{"version":3,"file":"js/974.babylonBundle.js","mappings":"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","sources":["webpack://babylonjs-typescript-webpack-template/./lts/loaders/generated/STL/stlFileLoader.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { Mesh } from \"core/Meshes/mesh\";\r\nimport type { ISceneLoaderPlugin, ISceneLoaderPluginExtensions } from \"core/Loading/sceneLoader\";\r\nimport { SceneLoader } from \"core/Loading/sceneLoader\";\r\nimport { AssetContainer } from \"core/assetContainer\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\n/**\r\n * STL file type loader.\r\n * This is a babylon scene loader plugin.\r\n */\r\nexport class STLFileLoader implements ISceneLoaderPlugin {\r\n    /** @internal */\r\n    public solidPattern = /solid (\\S*)([\\S\\s]*?)endsolid[ ]*(\\S*)/g;\r\n\r\n    /** @internal */\r\n    public facetsPattern = /facet([\\s\\S]*?)endfacet/g;\r\n    /** @internal */\r\n    public normalPattern = /normal[\\s]+([-+]?[0-9]+\\.?[0-9]*([eE][-+]?[0-9]+)?)+[\\s]+([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)+[\\s]+([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)+/g;\r\n    /** @internal */\r\n    public vertexPattern = /vertex[\\s]+([-+]?[0-9]+\\.?[0-9]*([eE][-+]?[0-9]+)?)+[\\s]+([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)+[\\s]+([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)+/g;\r\n\r\n    /**\r\n     * Defines the name of the plugin.\r\n     */\r\n    public name = \"stl\";\r\n\r\n    /**\r\n     * Defines the extensions the stl loader is able to load.\r\n     * force data to come in as an ArrayBuffer\r\n     * we'll convert to string if it looks like it's an ASCII .stl\r\n     */\r\n    public extensions: ISceneLoaderPluginExtensions = {\r\n        \".stl\": { isBinary: true },\r\n    };\r\n\r\n    /**\r\n     * Defines if Y and Z axes are swapped or not when loading an STL file.\r\n     * The default is false to maintain backward compatibility. When set to\r\n     * true, coordinates from the STL file are used without change.\r\n     */\r\n    public static DO_NOT_ALTER_FILE_COORDINATES = false;\r\n\r\n    /**\r\n     * Import meshes into a scene.\r\n     * @param meshesNames An array of mesh names, a single mesh name, or empty string for all meshes that filter what meshes are imported\r\n     * @param scene The scene to import into\r\n     * @param data The data to import\r\n     * @param rootUrl The root url for scene and resources\r\n     * @param meshes The meshes array to import into\r\n     * @returns True if successful or false otherwise\r\n     */\r\n    public importMesh(meshesNames: any, scene: Scene, data: any, rootUrl: string, meshes: Nullable<AbstractMesh[]>): boolean {\r\n        let matches;\r\n\r\n        if (typeof data !== \"string\") {\r\n            if (this._isBinary(data)) {\r\n                // binary .stl\r\n                const babylonMesh = new Mesh(\"stlmesh\", scene);\r\n                this._parseBinary(babylonMesh, data);\r\n                if (meshes) {\r\n                    meshes.push(babylonMesh);\r\n                }\r\n                return true;\r\n            }\r\n\r\n            // ASCII .stl\r\n\r\n            // convert to string\r\n            const array_buffer = new Uint8Array(data);\r\n            let str = \"\";\r\n            for (let i = 0; i < data.byteLength; i++) {\r\n                str += String.fromCharCode(array_buffer[i]); // implicitly assumes little-endian\r\n            }\r\n            data = str;\r\n        }\r\n\r\n        //if arrived here, data is a string, containing the STLA data.\r\n\r\n        while ((matches = this.solidPattern.exec(data))) {\r\n            let meshName = matches[1];\r\n            const meshNameFromEnd = matches[3];\r\n            if (meshNameFromEnd && meshName != meshNameFromEnd) {\r\n                Tools.Error(\"Error in STL, solid name != endsolid name\");\r\n                return false;\r\n            }\r\n\r\n            // check meshesNames\r\n            if (meshesNames && meshName) {\r\n                if (meshesNames instanceof Array) {\r\n                    if (!meshesNames.indexOf(meshName)) {\r\n                        continue;\r\n                    }\r\n                } else {\r\n                    if (meshName !== meshesNames) {\r\n                        continue;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // stl mesh name can be empty as well\r\n            meshName = meshName || \"stlmesh\";\r\n\r\n            const babylonMesh = new Mesh(meshName, scene);\r\n            this._parseASCII(babylonMesh, matches[2]);\r\n            if (meshes) {\r\n                meshes.push(babylonMesh);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Load into a scene.\r\n     * @param scene The scene to load into\r\n     * @param data The data to import\r\n     * @param rootUrl The root url for scene and resources\r\n     * @returns true if successful or false otherwise\r\n     */\r\n    public load(scene: Scene, data: any, rootUrl: string): boolean {\r\n        const result = this.importMesh(null, scene, data, rootUrl, null);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Load into an asset container.\r\n     * @param scene The scene to load into\r\n     * @param data The data to import\r\n     * @param rootUrl The root url for scene and resources\r\n     * @returns The loaded asset container\r\n     */\r\n    public loadAssetContainer(scene: Scene, data: string, rootUrl: string): AssetContainer {\r\n        const container = new AssetContainer(scene);\r\n        scene._blockEntityCollection = true;\r\n        this.importMesh(null, scene, data, rootUrl, container.meshes);\r\n        scene._blockEntityCollection = false;\r\n        return container;\r\n    }\r\n\r\n    private _isBinary(data: any) {\r\n        // check if file size is correct for binary stl\r\n        const reader = new DataView(data);\r\n\r\n        // A Binary STL header is 80 bytes, if the data size is not great than\r\n        // that then it's not a binary STL.\r\n        if (reader.byteLength <= 80) {\r\n            return false;\r\n        }\r\n\r\n        const faceSize = (32 / 8) * 3 + (32 / 8) * 3 * 3 + 16 / 8;\r\n        const nFaces = reader.getUint32(80, true);\r\n\r\n        if (80 + 32 / 8 + nFaces * faceSize === reader.byteLength) {\r\n            return true;\r\n        }\r\n\r\n        // US-ASCII begin with 's', 'o', 'l', 'i', 'd'\r\n        const ascii = [115, 111, 108, 105, 100];\r\n        for (let off = 0; off < 5; off++) {\r\n            if (reader.getUint8(off) !== ascii[off]) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _parseBinary(mesh: Mesh, data: ArrayBuffer) {\r\n        const reader = new DataView(data);\r\n        const faces = reader.getUint32(80, true);\r\n\r\n        const dataOffset = 84;\r\n        const faceLength = 12 * 4 + 2;\r\n\r\n        let offset = 0;\r\n\r\n        const positions = new Float32Array(faces * 3 * 3);\r\n        const normals = new Float32Array(faces * 3 * 3);\r\n        const indices = new Uint32Array(faces * 3);\r\n        let indicesCount = 0;\r\n\r\n        for (let face = 0; face < faces; face++) {\r\n            const start = dataOffset + face * faceLength;\r\n            const normalX = reader.getFloat32(start, true);\r\n            const normalY = reader.getFloat32(start + 4, true);\r\n            const normalZ = reader.getFloat32(start + 8, true);\r\n\r\n            for (let i = 1; i <= 3; i++) {\r\n                const vertexstart = start + i * 12;\r\n\r\n                // ordering is intentional to match ascii import\r\n                positions[offset] = reader.getFloat32(vertexstart, true);\r\n                normals[offset] = normalX;\r\n\r\n                if (!STLFileLoader.DO_NOT_ALTER_FILE_COORDINATES) {\r\n                    positions[offset + 2] = reader.getFloat32(vertexstart + 4, true);\r\n                    positions[offset + 1] = reader.getFloat32(vertexstart + 8, true);\r\n\r\n                    normals[offset + 2] = normalY;\r\n                    normals[offset + 1] = normalZ;\r\n                } else {\r\n                    positions[offset + 1] = reader.getFloat32(vertexstart + 4, true);\r\n                    positions[offset + 2] = reader.getFloat32(vertexstart + 8, true);\r\n\r\n                    normals[offset + 1] = normalY;\r\n                    normals[offset + 2] = normalZ;\r\n                }\r\n\r\n                offset += 3;\r\n            }\r\n\r\n            if (STLFileLoader.DO_NOT_ALTER_FILE_COORDINATES) {\r\n                indices[indicesCount] = indicesCount;\r\n                indices[indicesCount + 1] = indicesCount + 2;\r\n                indices[indicesCount + 2] = indicesCount + 1;\r\n                indicesCount += 3;\r\n            } else {\r\n                indices[indicesCount] = indicesCount++;\r\n                indices[indicesCount] = indicesCount++;\r\n                indices[indicesCount] = indicesCount++;\r\n            }\r\n        }\r\n\r\n        mesh.setVerticesData(VertexBuffer.PositionKind, positions);\r\n        mesh.setVerticesData(VertexBuffer.NormalKind, normals);\r\n        mesh.setIndices(indices);\r\n        mesh.computeWorldMatrix(true);\r\n    }\r\n\r\n    private _parseASCII(mesh: Mesh, solidData: string) {\r\n        const positions = [];\r\n        const normals = [];\r\n        const indices = [];\r\n        let indicesCount = 0;\r\n\r\n        //load facets, ignoring loop as the standard doesn't define it can contain more than vertices\r\n        let matches;\r\n        while ((matches = this.facetsPattern.exec(solidData))) {\r\n            const facet = matches[1];\r\n            //one normal per face\r\n            const normalMatches = this.normalPattern.exec(facet);\r\n            this.normalPattern.lastIndex = 0;\r\n            if (!normalMatches) {\r\n                continue;\r\n            }\r\n            const normal = [Number(normalMatches[1]), Number(normalMatches[5]), Number(normalMatches[3])];\r\n\r\n            let vertexMatch;\r\n            while ((vertexMatch = this.vertexPattern.exec(facet))) {\r\n                if (!STLFileLoader.DO_NOT_ALTER_FILE_COORDINATES) {\r\n                    positions.push(Number(vertexMatch[1]), Number(vertexMatch[5]), Number(vertexMatch[3]));\r\n                    normals.push(normal[0], normal[1], normal[2]);\r\n                } else {\r\n                    positions.push(Number(vertexMatch[1]), Number(vertexMatch[3]), Number(vertexMatch[5]));\r\n\r\n                    // Flipping the second and third component because inverted\r\n                    // when normal was declared.\r\n                    normals.push(normal[0], normal[2], normal[1]);\r\n                }\r\n            }\r\n            if (STLFileLoader.DO_NOT_ALTER_FILE_COORDINATES) {\r\n                indices.push(indicesCount, indicesCount + 2, indicesCount + 1);\r\n                indicesCount += 3;\r\n            } else {\r\n                indices.push(indicesCount++, indicesCount++, indicesCount++);\r\n            }\r\n            this.vertexPattern.lastIndex = 0;\r\n        }\r\n\r\n        this.facetsPattern.lastIndex = 0;\r\n        mesh.setVerticesData(VertexBuffer.PositionKind, positions);\r\n        mesh.setVerticesData(VertexBuffer.NormalKind, normals);\r\n        mesh.setIndices(indices);\r\n        mesh.computeWorldMatrix(true);\r\n    }\r\n}\r\n\r\nif (SceneLoader) {\r\n    SceneLoader.RegisterPlugin(new STLFileLoader());\r\n}\r\n"],"names":["STLFileLoader","solidPattern","facetsPattern","normalPattern","vertexPattern","name","extensions","isBinary","importMesh","meshesNames","scene","data","rootUrl","meshes","matches","this","_isBinary","babylonMesh","_parseBinary","push","array_buffer","Uint8Array","str","i","byteLength","String","fromCharCode","exec","meshName","meshNameFromEnd","Array","indexOf","_parseASCII","load","loadAssetContainer","container","_blockEntityCollection","reader","DataView","getUint32","ascii","off","getUint8","mesh","faces","offset","positions","Float32Array","normals","indices","Uint32Array","indicesCount","face","start","normalX","getFloat32","normalY","normalZ","vertexstart","DO_NOT_ALTER_FILE_COORDINATES","setVerticesData","setIndices","computeWorldMatrix","solidData","facet","normalMatches","lastIndex","normal","Number","vertexMatch"],"sourceRoot":""}