{"version":3,"file":"js/247.babylonBundle.js","mappings":"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","sources":["webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/valueAndUnit.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/measure.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/math2D.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/control.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/textBlock.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/container.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/rectangle.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/image.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/button.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/stackPanel.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/checkbox.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/textWrapper.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/inputText.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/grid.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/colorpicker.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/ellipse.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/focusableButton.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/inputTextArea.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/inputPassword.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/line.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/multiLinePoint.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/multiLine.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/radioButton.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/sliders/baseSlider.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/sliders/slider.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/selector.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/scrollViewers/scrollViewerWindow.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/sliders/scrollBar.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/sliders/imageScrollBar.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/scrollViewers/scrollViewer.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/toggleButton.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/virtualKeyboard.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/displayGrid.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/sliders/imageBasedSlider.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/statics.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/gradient/BaseGradient.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/gradient/LinearGradient.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/gradient/RadialGradient.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/style.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/advancedDynamicTexture.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/adtInstrumentation.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/xmlLoader.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/vector3WithInfo.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/controls/control3D.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/controls/contentDisplay3D.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/controls/abstractButton3D.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/controls/button3D.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/controls/container3D.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/controls/volumeBasedPanel.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/controls/cylinderPanel.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/fluent/shaders/fluent.vertex.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/fluent/fluentMaterial.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/controls/touchHolographicMenu.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/controls/handMenu.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/fluentBackplate/shaders/fluentBackplate.fragment.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/fluentBackplate/shaders/fluentBackplate.vertex.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/fluentBackplate/fluentBackplateMaterial.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/controls/holographicBackplate.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/controls/holographicButton.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/fluentButton/shaders/fluentButton.fragment.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/fluentButton/shaders/fluentButton.vertex.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/fluentButton/fluentButtonMaterial.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/controls/touchButton3D.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/controls/touchHolographicButton.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/behaviors/defaultBehavior.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/handle/shaders/handle.vertex.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/handle/shaders/handle.fragment.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/handle/handleMaterial.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/gizmos/gizmoHandle.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/gizmos/slateGizmo.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/controls/holographicSlate.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/controls/meshButton3D.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/controls/nearMenu.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/controls/planePanel.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/controls/scatterPanel.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/mrdl/shaders/mrdlSliderBar.fragment.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/mrdl/shaders/mrdlSliderBar.vertex.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/mrdl/mrdlSliderBarMaterial.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/mrdl/shaders/mrdlSliderThumb.fragment.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/mrdl/shaders/mrdlSliderThumb.vertex.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/mrdl/mrdlSliderThumbMaterial.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/mrdl/mrdlBackplateMaterial.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/controls/slider3D.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/controls/spherePanel.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/controls/stackPanel3D.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/controls/touchMeshButton3D.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/mrdl/shaders/mrdlBackglow.fragment.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/mrdl/shaders/mrdlBackglow.vertex.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/mrdl/mrdlBackglowMaterial.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/mrdl/mrdlFrontplateMaterial.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/controls/MRTK3/touchHolographicButton.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/controls/index.ts","webpack://babylonjs-typescript-webpack-template/./lts/loaders/generated/STL/stlFileLoader.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/gui3DManager.ts"],"sourcesContent":["import { Observable } from \"core/Misc/observable\";\r\nimport type { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\n\r\n/**\r\n * Class used to specific a value and its associated unit\r\n */\r\nexport class ValueAndUnit {\r\n    private _value = 1;\r\n    private _unit = ValueAndUnit.UNITMODE_PIXEL;\r\n    private _originalUnit: number;\r\n\r\n    /**\r\n     * Gets or sets a value indicating that this value will not scale accordingly with adaptive scaling property\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling\r\n     */\r\n    public ignoreAdaptiveScaling = false;\r\n\r\n    /**\r\n     * Observable event triggered each time the value or unit changes\r\n     */\r\n    public onChangedObservable = new Observable<void>();\r\n\r\n    /**\r\n     * Creates a new ValueAndUnit\r\n     * @param value defines the value to store\r\n     * @param unit defines the unit to store - defaults to ValueAndUnit.UNITMODE_PIXEL\r\n     * @param negativeValueAllowed defines a boolean indicating if the value can be negative\r\n     */\r\n    public constructor(\r\n        value: number,\r\n        /** defines the unit to store */\r\n        unit = ValueAndUnit.UNITMODE_PIXEL,\r\n        /** defines a boolean indicating if the value can be negative */\r\n        public negativeValueAllowed = true\r\n    ) {\r\n        this._value = value;\r\n        this._unit = unit;\r\n        this._originalUnit = unit;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is a percentage */\r\n    public get isPercentage(): boolean {\r\n        return this._unit === ValueAndUnit.UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is store as pixel */\r\n    public get isPixel(): boolean {\r\n        return this._unit === ValueAndUnit.UNITMODE_PIXEL;\r\n    }\r\n\r\n    /**\r\n     * Gets value (without units)\r\n     * @deprecated use value property instead\r\n     */\r\n    public get internalValue(): number {\r\n        return this._value;\r\n    }\r\n\r\n    /** Gets value (without units) */\r\n    public get value(): number {\r\n        return this._value;\r\n    }\r\n\r\n    /** Sets value (without units) */\r\n    public set value(value: number) {\r\n        if (value !== this._value) {\r\n            this._value = value;\r\n            this.onChangedObservable.notifyObservers();\r\n        }\r\n    }\r\n\r\n    /** Gets units (without value) */\r\n    public get unit(): number {\r\n        return this._unit;\r\n    }\r\n\r\n    /** Sets units (without value) */\r\n    public set unit(value: number) {\r\n        if (value !== this._unit) {\r\n            this._unit = value;\r\n            this.onChangedObservable.notifyObservers();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets value as pixel\r\n     * @param host defines the root host\r\n     * @param refValue defines the reference value for percentages\r\n     * @returns the value as pixel\r\n     */\r\n    public getValueInPixel(host: AdvancedDynamicTexture, refValue: number): number {\r\n        if (this.isPixel) {\r\n            return this.getValue(host);\r\n        }\r\n\r\n        return this.getValue(host) * refValue;\r\n    }\r\n\r\n    /**\r\n     * Update the current value and unit.\r\n     * @param value defines the value to store\r\n     * @param unit defines the unit to store\r\n     * @returns the current ValueAndUnit\r\n     */\r\n    public updateInPlace(value: number, unit = ValueAndUnit.UNITMODE_PIXEL): ValueAndUnit {\r\n        if (this.value !== value || this.unit !== unit) {\r\n            // set member variables to notify only once\r\n            this._value = value;\r\n            this._unit = unit;\r\n            this.onChangedObservable.notifyObservers();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the value accordingly to its unit\r\n     * @param host  defines the root host\r\n     * @returns the value\r\n     */\r\n    public getValue(host: AdvancedDynamicTexture): number {\r\n        if (host && !this.ignoreAdaptiveScaling && this.unit !== ValueAndUnit.UNITMODE_PERCENTAGE) {\r\n            let width: number = 0;\r\n            let height: number = 0;\r\n\r\n            if (host.idealWidth) {\r\n                width = Math.ceil((this._value * host.getSize().width) / host.idealWidth);\r\n            }\r\n\r\n            if (host.idealHeight) {\r\n                height = Math.ceil((this._value * host.getSize().height) / host.idealHeight);\r\n            }\r\n\r\n            if (host.useSmallestIdeal && host.idealWidth && host.idealHeight) {\r\n                return window.innerWidth < window.innerHeight ? width : height;\r\n            }\r\n\r\n            if (host.idealWidth) {\r\n                // horizontal\r\n                return width;\r\n            }\r\n\r\n            if (host.idealHeight) {\r\n                // vertical\r\n                return height;\r\n            }\r\n        }\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets a string representation of the value\r\n     * @param host defines the root host\r\n     * @param decimals defines an optional number of decimals to display\r\n     * @returns a string\r\n     */\r\n    public toString(host: AdvancedDynamicTexture, decimals?: number): string {\r\n        switch (this._unit) {\r\n            case ValueAndUnit.UNITMODE_PERCENTAGE: {\r\n                const percentage = this.getValue(host) * 100;\r\n                return (decimals ? percentage.toFixed(decimals) : percentage) + \"%\";\r\n            }\r\n            case ValueAndUnit.UNITMODE_PIXEL: {\r\n                const pixels = this.getValue(host);\r\n                return (decimals ? pixels.toFixed(decimals) : pixels) + \"px\";\r\n            }\r\n        }\r\n\r\n        return this._unit.toString();\r\n    }\r\n\r\n    /**\r\n     * Store a value parsed from a string\r\n     * @param source defines the source string\r\n     * @returns true if the value was successfully parsed and updated\r\n     */\r\n    public fromString(source: string | number): boolean {\r\n        const match = ValueAndUnit._Regex.exec(source.toString());\r\n\r\n        if (!match || match.length === 0) {\r\n            return false;\r\n        }\r\n\r\n        let sourceValue = parseFloat(match[1]);\r\n        let sourceUnit = this._originalUnit;\r\n\r\n        if (!this.negativeValueAllowed) {\r\n            if (sourceValue < 0) {\r\n                sourceValue = 0;\r\n            }\r\n        }\r\n\r\n        if (match.length === 4) {\r\n            switch (match[3]) {\r\n                case \"px\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PIXEL;\r\n                    break;\r\n                case \"%\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PERCENTAGE;\r\n                    sourceValue /= 100.0;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (sourceValue === this._value && sourceUnit === this._unit) {\r\n            return false;\r\n        }\r\n\r\n        this._value = sourceValue;\r\n        this._unit = sourceUnit;\r\n        this.onChangedObservable.notifyObservers();\r\n\r\n        return true;\r\n    }\r\n\r\n    // Static\r\n    private static _Regex = /(^-?\\d*(\\.\\d+)?)(%|px)?/;\r\n    private static _UNITMODE_PERCENTAGE = 0;\r\n    private static _UNITMODE_PIXEL = 1;\r\n\r\n    /** UNITMODE_PERCENTAGE */\r\n    public static get UNITMODE_PERCENTAGE(): number {\r\n        return ValueAndUnit._UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** UNITMODE_PIXEL */\r\n    public static get UNITMODE_PIXEL(): number {\r\n        return ValueAndUnit._UNITMODE_PIXEL;\r\n    }\r\n}\r\n","import type { Matrix2D } from \"./math2D\";\r\nimport { Vector2 } from \"core/Maths/math.vector\";\r\n\r\nconst tmpRect = [new Vector2(0, 0), new Vector2(0, 0), new Vector2(0, 0), new Vector2(0, 0)];\r\n\r\nconst tmpRect2 = [new Vector2(0, 0), new Vector2(0, 0), new Vector2(0, 0), new Vector2(0, 0)];\r\n\r\nconst tmpV1 = new Vector2(0, 0);\r\nconst tmpV2 = new Vector2(0, 0);\r\n\r\n/**\r\n * Class used to store 2D control sizes\r\n */\r\nexport class Measure {\r\n    /**\r\n     * Creates a new measure\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate\r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public constructor(\r\n        /** defines left coordinate */\r\n        public left: number,\r\n        /** defines top coordinate  */\r\n        public top: number,\r\n        /** defines width dimension  */\r\n        public width: number,\r\n        /** defines height dimension */\r\n        public height: number\r\n    ) {}\r\n\r\n    /**\r\n     * Copy from another measure\r\n     * @param other defines the other measure to copy from\r\n     */\r\n    public copyFrom(other: Measure): void {\r\n        this.left = other.left;\r\n        this.top = other.top;\r\n        this.width = other.width;\r\n        this.height = other.height;\r\n    }\r\n\r\n    /**\r\n     * Copy from a group of 4 floats\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate\r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public copyFromFloats(left: number, top: number, width: number, height: number): void {\r\n        this.left = left;\r\n        this.top = top;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    /**\r\n     * Computes the axis aligned bounding box measure for two given measures\r\n     * @param a Input measure\r\n     * @param b Input measure\r\n     * @param result the resulting bounding measure\r\n     */\r\n    public static CombineToRef(a: Measure, b: Measure, result: Measure) {\r\n        const left = Math.min(a.left, b.left);\r\n        const top = Math.min(a.top, b.top);\r\n        const right = Math.max(a.left + a.width, b.left + b.width);\r\n        const bottom = Math.max(a.top + a.height, b.top + b.height);\r\n        result.left = left;\r\n        result.top = top;\r\n        result.width = right - left;\r\n        result.height = bottom - top;\r\n    }\r\n\r\n    /**\r\n     * Computes the axis aligned bounding box of the measure after it is modified by a given transform\r\n     * @param transform the matrix to transform the measure before computing the AABB\r\n     * @param addX number to add to left\r\n     * @param addY number to add to top\r\n     * @param addWidth number to add to width\r\n     * @param addHeight number to add to height\r\n     * @param result the resulting AABB\r\n     */\r\n    public addAndTransformToRef(transform: Matrix2D, addX: number, addY: number, addWidth: number, addHeight: number, result: Measure) {\r\n        const left = this.left + addX;\r\n        const top = this.top + addY;\r\n        const width = this.width + addWidth;\r\n        const height = this.height + addHeight;\r\n\r\n        tmpRect[0].copyFromFloats(left, top);\r\n        tmpRect[1].copyFromFloats(left + width, top);\r\n        tmpRect[2].copyFromFloats(left + width, top + height);\r\n        tmpRect[3].copyFromFloats(left, top + height);\r\n\r\n        tmpV1.copyFromFloats(Number.MAX_VALUE, Number.MAX_VALUE);\r\n        tmpV2.copyFromFloats(0, 0);\r\n        for (let i = 0; i < 4; i++) {\r\n            transform.transformCoordinates(tmpRect[i].x, tmpRect[i].y, tmpRect2[i]);\r\n            tmpV1.x = Math.floor(Math.min(tmpV1.x, tmpRect2[i].x));\r\n            tmpV1.y = Math.floor(Math.min(tmpV1.y, tmpRect2[i].y));\r\n            tmpV2.x = Math.ceil(Math.max(tmpV2.x, tmpRect2[i].x));\r\n            tmpV2.y = Math.ceil(Math.max(tmpV2.y, tmpRect2[i].y));\r\n        }\r\n        result.left = tmpV1.x;\r\n        result.top = tmpV1.y;\r\n        result.width = tmpV2.x - tmpV1.x;\r\n        result.height = tmpV2.y - tmpV1.y;\r\n    }\r\n\r\n    /**\r\n     * Computes the axis aligned bounding box of the measure after it is modified by a given transform\r\n     * @param transform the matrix to transform the measure before computing the AABB\r\n     * @param result the resulting AABB\r\n     */\r\n    public transformToRef(transform: Matrix2D, result: Measure) {\r\n        this.addAndTransformToRef(transform, 0, 0, 0, 0, result);\r\n    }\r\n    /**\r\n     * Check equality between this measure and another one\r\n     * @param other defines the other measures\r\n     * @returns true if both measures are equals\r\n     */\r\n    public isEqualsTo(other: Measure): boolean {\r\n        if (this.left !== other.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this.top !== other.top) {\r\n            return false;\r\n        }\r\n\r\n        if (this.width !== other.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this.height !== other.height) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates an empty measure\r\n     * @returns a new measure\r\n     */\r\n    public static Empty(): Measure {\r\n        return new Measure(0, 0, 0, 0);\r\n    }\r\n}\r\n","import type { Nullable } from \"core/types\";\r\nimport { Vector2 } from \"core/Maths/math.vector\";\r\nimport { Epsilon } from \"core/Maths/math.constants\";\r\n\r\n/**\r\n * Class used to transport Vector2 information for pointer events\r\n */\r\nexport class Vector2WithInfo extends Vector2 {\r\n    /**\r\n     * Creates a new Vector2WithInfo\r\n     * @param source defines the vector2 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(\r\n        source: Vector2,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0\r\n    ) {\r\n        super(source.x, source.y);\r\n    }\r\n}\r\n\r\n/** Class used to provide 2D matrix features */\r\nexport class Matrix2D {\r\n    /** Gets the internal array of 6 floats used to store matrix data */\r\n    public m = new Float32Array(6);\r\n\r\n    /**\r\n     * Creates a new matrix\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     */\r\n    constructor(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number) {\r\n        this.fromValues(m00, m01, m10, m11, m20, m21);\r\n    }\r\n\r\n    /**\r\n     * Fills the matrix from direct values\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     * @returns the current modified matrix\r\n     */\r\n    public fromValues(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number): Matrix2D {\r\n        this.m[0] = m00;\r\n        this.m[1] = m01;\r\n        this.m[2] = m10;\r\n        this.m[3] = m11;\r\n        this.m[4] = m20;\r\n        this.m[5] = m21;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets matrix determinant\r\n     * @returns the determinant\r\n     */\r\n    public determinant(): number {\r\n        return this.m[0] * this.m[3] - this.m[1] * this.m[2];\r\n    }\r\n\r\n    /**\r\n     * Inverses the matrix and stores it in a target matrix\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public invertToRef(result: Matrix2D): Matrix2D {\r\n        const l0 = this.m[0];\r\n        const l1 = this.m[1];\r\n        const l2 = this.m[2];\r\n        const l3 = this.m[3];\r\n        const l4 = this.m[4];\r\n        const l5 = this.m[5];\r\n\r\n        const det = this.determinant();\r\n        if (det < Epsilon * Epsilon) {\r\n            result.m[0] = 0;\r\n            result.m[1] = 0;\r\n            result.m[2] = 0;\r\n            result.m[3] = 0;\r\n            result.m[4] = 0;\r\n            result.m[5] = 0;\r\n            return this;\r\n        }\r\n\r\n        const detDiv = 1 / det;\r\n\r\n        const det4 = l2 * l5 - l3 * l4;\r\n        const det5 = l1 * l4 - l0 * l5;\r\n\r\n        result.m[0] = l3 * detDiv;\r\n        result.m[1] = -l1 * detDiv;\r\n        result.m[2] = -l2 * detDiv;\r\n        result.m[3] = l0 * detDiv;\r\n        result.m[4] = det4 * detDiv;\r\n        result.m[5] = det5 * detDiv;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the current matrix with another one\r\n     * @param other defines the second operand\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public multiplyToRef(other: Matrix2D, result: Matrix2D): Matrix2D {\r\n        const l0 = this.m[0];\r\n        const l1 = this.m[1];\r\n        const l2 = this.m[2];\r\n        const l3 = this.m[3];\r\n        const l4 = this.m[4];\r\n        const l5 = this.m[5];\r\n\r\n        const r0 = other.m[0];\r\n        const r1 = other.m[1];\r\n        const r2 = other.m[2];\r\n        const r3 = other.m[3];\r\n        const r4 = other.m[4];\r\n        const r5 = other.m[5];\r\n\r\n        result.m[0] = l0 * r0 + l1 * r2;\r\n        result.m[1] = l0 * r1 + l1 * r3;\r\n        result.m[2] = l2 * r0 + l3 * r2;\r\n        result.m[3] = l2 * r1 + l3 * r3;\r\n        result.m[4] = l4 * r0 + l5 * r2 + r4;\r\n        result.m[5] = l4 * r1 + l5 * r3 + r5;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Applies the current matrix to a set of 2 floats and stores the result in a vector2\r\n     * @param x defines the x coordinate to transform\r\n     * @param y defines the x coordinate to transform\r\n     * @param result defines the target vector2\r\n     * @returns the current matrix\r\n     */\r\n    public transformCoordinates(x: number, y: number, result: Vector2): Matrix2D {\r\n        result.x = x * this.m[0] + y * this.m[2] + this.m[4];\r\n        result.y = x * this.m[1] + y * this.m[3] + this.m[5];\r\n\r\n        return this;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates an identity matrix\r\n     * @returns a new matrix\r\n     */\r\n    public static Identity(): Matrix2D {\r\n        return new Matrix2D(1, 0, 0, 1, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates an identity matrix and stores it in a target matrix\r\n     * @param result defines the target matrix\r\n     */\r\n    public static IdentityToRef(result: Matrix2D): void {\r\n        result.m[0] = 1;\r\n        result.m[1] = 0;\r\n        result.m[2] = 0;\r\n        result.m[3] = 1;\r\n        result.m[4] = 0;\r\n        result.m[5] = 0;\r\n    }\r\n\r\n    /**\r\n     * Creates a translation matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the translation\r\n     * @param y defines the y coordinate of the translation\r\n     * @param result defines the target matrix\r\n     */\r\n    public static TranslationToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(1, 0, 0, 1, x, y);\r\n    }\r\n\r\n    /**\r\n     * Creates a scaling matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the scaling\r\n     * @param y defines the y coordinate of the scaling\r\n     * @param result defines the target matrix\r\n     */\r\n    public static ScalingToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(x, 0, 0, y, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a rotation matrix and stores it in a target matrix\r\n     * @param angle defines the rotation angle\r\n     * @param result defines the target matrix\r\n     */\r\n    public static RotationToRef(angle: number, result: Matrix2D): void {\r\n        const s = Math.sin(angle);\r\n        const c = Math.cos(angle);\r\n\r\n        result.fromValues(c, s, -s, c, 0, 0);\r\n    }\r\n\r\n    private static _TempPreTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempPostTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempRotationMatrix = Matrix2D.Identity();\r\n    private static _TempScalingMatrix = Matrix2D.Identity();\r\n    private static _TempCompose0 = Matrix2D.Identity();\r\n    private static _TempCompose1 = Matrix2D.Identity();\r\n    private static _TempCompose2 = Matrix2D.Identity();\r\n\r\n    /**\r\n     * Composes a matrix from translation, rotation, scaling and parent matrix and stores it in a target matrix\r\n     * @param tx defines the x coordinate of the translation\r\n     * @param ty defines the y coordinate of the translation\r\n     * @param angle defines the rotation angle\r\n     * @param scaleX defines the x coordinate of the scaling\r\n     * @param scaleY defines the y coordinate of the scaling\r\n     * @param parentMatrix defines the parent matrix to multiply by (can be null)\r\n     * @param result defines the target matrix\r\n     */\r\n    public static ComposeToRef(tx: number, ty: number, angle: number, scaleX: number, scaleY: number, parentMatrix: Nullable<Matrix2D>, result: Matrix2D): void {\r\n        Matrix2D.TranslationToRef(tx, ty, Matrix2D._TempPreTranslationMatrix);\r\n\r\n        Matrix2D.ScalingToRef(scaleX, scaleY, Matrix2D._TempScalingMatrix);\r\n\r\n        Matrix2D.RotationToRef(angle, Matrix2D._TempRotationMatrix);\r\n\r\n        Matrix2D.TranslationToRef(-tx, -ty, Matrix2D._TempPostTranslationMatrix);\r\n\r\n        Matrix2D._TempPreTranslationMatrix.multiplyToRef(Matrix2D._TempScalingMatrix, Matrix2D._TempCompose0);\r\n        Matrix2D._TempCompose0.multiplyToRef(Matrix2D._TempRotationMatrix, Matrix2D._TempCompose1);\r\n        if (parentMatrix) {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, Matrix2D._TempCompose2);\r\n            Matrix2D._TempCompose2.multiplyToRef(parentMatrix, result);\r\n        } else {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, result);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Useful math functions\r\n */\r\nexport class MathTools {\r\n    /**\r\n     * Default rounding precision for GUI elements. It should be\r\n     * set to a power of ten, where the exponent means the number\r\n     * of decimal digits to round to, i.e, 100 means 2 decimal digits,\r\n     * 1000 means 3 decimal digits, etc. Default is 100 (2 decimal digits).\r\n     */\r\n    public static DefaultRoundingPrecision = 100;\r\n\r\n    /**\r\n     * Rounds a number to the nearest multiple of a given precision\r\n     * @param value the value to be rounded\r\n     * @param precision the multiple to which the value will be rounded. Default is 100 (2 decimal digits)\r\n     * @returns\r\n     */\r\n    public static Round(value: number, precision: number = MathTools.DefaultRoundingPrecision): number {\r\n        return Math.round(value * precision) / precision;\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/naming-convention */\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport { Vector2, Vector3, Matrix } from \"core/Maths/math.vector\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { PointerEventTypes } from \"core/Events/pointerEvents\";\r\nimport { Logger } from \"core/Misc/logger\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\nimport type { Container } from \"./container\";\r\nimport type { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Measure } from \"../measure\";\r\nimport type { Style } from \"../style\";\r\nimport { Matrix2D, Vector2WithInfo } from \"../math2D\";\r\nimport { GetClass, RegisterClass } from \"core/Misc/typeStore\";\r\nimport { SerializationHelper, serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasGradient, ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport { EngineStore } from \"core/Engines/engineStore\";\r\nimport type { IAccessibilityTag } from \"core/IAccessibilityTag\";\r\nimport type { IPointerEvent } from \"core/Events/deviceInputEvents\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { Animation } from \"core/Animations/animation\";\r\nimport type { BaseGradient } from \"./gradient/BaseGradient\";\r\n\r\n/**\r\n * Root class used for all 2D controls\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#controls\r\n */\r\nexport class Control implements IAnimatable {\r\n    /**\r\n     * Gets or sets a boolean indicating if alpha must be an inherited value (false by default)\r\n     */\r\n    public static AllowAlphaInheritance = false;\r\n\r\n    private _alpha = 1;\r\n    private _alphaSet = false;\r\n    private _zIndex = 0;\r\n    /** @internal */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** Gets or sets the control parent */\r\n    public parent: Nullable<Container>;\r\n    /** @internal */\r\n    public _currentMeasure = Measure.Empty();\r\n    /** @internal */\r\n    public _tempPaddingMeasure = Measure.Empty();\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    private _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _font: string;\r\n    /** @internal */\r\n    public _width = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @internal */\r\n    public _height = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @internal */\r\n    protected _fontOffset: { ascent: number; height: number; descent: number };\r\n    private _color = \"\";\r\n    private _style: Nullable<Style> = null;\r\n    private _styleObserver: Nullable<Observer<Style>>;\r\n    /** @internal */\r\n    protected _horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    /** @internal */\r\n    protected _verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n    /** @internal */\r\n    protected _isDirty = true;\r\n    /** @internal */\r\n    protected _wasDirty = false;\r\n    /** @internal */\r\n    public _tempParentMeasure = Measure.Empty();\r\n    /** @internal */\r\n    public _prevCurrentMeasureTransformedIntoGlobalSpace = Measure.Empty();\r\n    /** @internal */\r\n    public _cachedParentMeasure = Measure.Empty();\r\n    private _descendantsOnlyPadding = false;\r\n    private _paddingLeft = new ValueAndUnit(0);\r\n    private _paddingRight = new ValueAndUnit(0);\r\n    private _paddingTop = new ValueAndUnit(0);\r\n    private _paddingBottom = new ValueAndUnit(0);\r\n    /** @internal */\r\n    public _left = new ValueAndUnit(0);\r\n    /** @internal */\r\n    public _top = new ValueAndUnit(0);\r\n    private _scaleX = 1.0;\r\n    private _scaleY = 1.0;\r\n    private _rotation = 0;\r\n    private _transformCenterX = 0.5;\r\n    private _transformCenterY = 0.5;\r\n    /** @internal */\r\n    public _transformMatrix = Matrix2D.Identity();\r\n    /** @internal */\r\n    protected _invertTransformMatrix = Matrix2D.Identity();\r\n    /** @internal */\r\n    protected _transformedPosition = Vector2.Zero();\r\n    private _isMatrixDirty = true;\r\n    private _cachedOffsetX: number;\r\n    private _cachedOffsetY: number;\r\n    private _isVisible = true;\r\n    private _isHighlighted = false;\r\n    private _highlightColor = \"#4affff\";\r\n    protected _highlightLineWidth = 2;\r\n    /** @internal */\r\n    public _linkedMesh: Nullable<TransformNode>;\r\n    private _fontSet = false;\r\n    private _dummyVector2 = Vector2.Zero();\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _doNotRender = false;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    private _evaluatedMeasure = new Measure(0, 0, 0, 0);\r\n    private _evaluatedParentMeasure = new Measure(0, 0, 0, 0);\r\n    protected _isEnabled = true;\r\n    protected _disabledColor = \"#9a9a9a\";\r\n    protected _disabledColorItem = \"#6a6a6a\";\r\n    protected _isReadOnly = false;\r\n    private _gradient: Nullable<BaseGradient> = null;\r\n    /** @internal */\r\n    protected _rebuildLayout = false;\r\n\r\n    /** @internal */\r\n    public _customData: any = {};\r\n\r\n    /** @internal */\r\n    public _isClipped = false;\r\n\r\n    /** @internal */\r\n    public _automaticSize = false;\r\n\r\n    /** @internal */\r\n    public _tag: any;\r\n\r\n    /**\r\n     * Gets or sets the unique id of the node. Please note that this number will be updated when the control is added to a container\r\n     */\r\n    public uniqueId: number;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the control is readonly (default: false).\r\n     * A readonly control will still raise pointer events but will not react to them\r\n     */\r\n    public get isReadOnly() {\r\n        return this._isReadOnly;\r\n    }\r\n\r\n    public set isReadOnly(value: boolean) {\r\n        this._isReadOnly = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the transformed measure, that is the bounding box of the control after applying all transformations\r\n     */\r\n    public get transformedMeasure(): Measure {\r\n        return this._evaluatedMeasure;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an object used to store user defined information for the node\r\n     */\r\n    @serialize()\r\n    public metadata: any = null;\r\n\r\n    /** Gets or sets a boolean indicating if the control can be hit with pointer events */\r\n    @serialize()\r\n    public isHitTestVisible = true;\r\n    /** Gets or sets a boolean indicating if the control can block pointer events. False by default except on the following controls:\r\n     * * Button controls (Button, RadioButton, ToggleButton)\r\n     * * Checkbox\r\n     * * ColorPicker\r\n     * * InputText\r\n     * * Slider\r\n     */\r\n    @serialize()\r\n    public isPointerBlocker = false;\r\n    /** Gets or sets a boolean indicating if the control can be focusable */\r\n    @serialize()\r\n    public isFocusInvisible = false;\r\n\r\n    protected _clipChildren = true;\r\n    /**\r\n     * Sets/Gets a boolean indicating if the children are clipped to the current control bounds.\r\n     * Please note that not clipping children may generate issues with adt.useInvalidateRectOptimization so it is recommended to turn this optimization off if you want to use unclipped children\r\n     */\r\n    public set clipChildren(value: boolean) {\r\n        this._clipChildren = value;\r\n    }\r\n\r\n    @serialize()\r\n    public get clipChildren() {\r\n        return this._clipChildren;\r\n    }\r\n\r\n    protected _clipContent = true;\r\n    /**\r\n     * Sets/Gets a boolean indicating that control content must be clipped\r\n     * Please note that not clipping content may generate issues with adt.useInvalidateRectOptimization so it is recommended to turn this optimization off if you want to use unclipped children\r\n     */\r\n    public set clipContent(value: boolean) {\r\n        this._clipContent = value;\r\n    }\r\n\r\n    @serialize()\r\n    public get clipContent() {\r\n        return this._clipContent;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the current control should cache its rendering (useful when the control does not change often)\r\n     */\r\n    @serialize()\r\n    public useBitmapCache = false;\r\n\r\n    private _cacheData: Nullable<ImageData>;\r\n\r\n    private _shadowOffsetX = 0;\r\n    /** Gets or sets a value indicating the offset to apply on X axis to render the shadow */\r\n    @serialize()\r\n    public get shadowOffsetX() {\r\n        return this._shadowOffsetX;\r\n    }\r\n\r\n    public set shadowOffsetX(value: number) {\r\n        if (this._shadowOffsetX === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowOffsetX = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _shadowOffsetY = 0;\r\n    /** Gets or sets a value indicating the offset to apply on Y axis to render the shadow */\r\n    @serialize()\r\n    public get shadowOffsetY() {\r\n        return this._shadowOffsetY;\r\n    }\r\n\r\n    public set shadowOffsetY(value: number) {\r\n        if (this._shadowOffsetY === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowOffsetY = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _shadowBlur = 0;\r\n    private _previousShadowBlur = 0;\r\n    /** Gets or sets a value indicating the amount of blur to use to render the shadow */\r\n    @serialize()\r\n    public get shadowBlur() {\r\n        return this._shadowBlur;\r\n    }\r\n\r\n    public set shadowBlur(value: number) {\r\n        if (this._shadowBlur === value) {\r\n            return;\r\n        }\r\n\r\n        this._previousShadowBlur = this._shadowBlur;\r\n\r\n        this._shadowBlur = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _shadowColor = \"black\";\r\n    /** Gets or sets a value indicating the color of the shadow (black by default ie. \"#000\") */\r\n    @serialize()\r\n    public get shadowColor() {\r\n        return this._shadowColor;\r\n    }\r\n\r\n    public set shadowColor(value: string) {\r\n        if (this._shadowColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the cursor to use when the control is hovered */\r\n    @serialize()\r\n    public hoverCursor = \"\";\r\n\r\n    /** @internal */\r\n    protected _linkOffsetX = new ValueAndUnit(0);\r\n    /** @internal */\r\n    protected _linkOffsetY = new ValueAndUnit(0);\r\n\r\n    // Properties\r\n\r\n    /** Gets the control type name */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n     * Get the current class name of the control.\r\n     * @returns current class name\r\n     */\r\n    public getClassName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the accessibility tag to describe the control for accessibility purpose.\r\n     * By default, GUI controls already indicate accessibility info, but one can override the info using this tag.\r\n     */\r\n    public set accessibilityTag(value: Nullable<IAccessibilityTag>) {\r\n        this._accessibilityTag = value;\r\n        this.onAccessibilityTagChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    public get accessibilityTag() {\r\n        return this._accessibilityTag;\r\n    }\r\n\r\n    protected _accessibilityTag: Nullable<IAccessibilityTag> = null;\r\n\r\n    public onAccessibilityTagChangedObservable = new Observable<Nullable<IAccessibilityTag>>();\r\n\r\n    /**\r\n     * An event triggered when pointer wheel is scrolled\r\n     */\r\n    public onWheelObservable = new Observable<Vector2>();\r\n    /**\r\n     * An event triggered when the pointer moves over the control.\r\n     */\r\n    public onPointerMoveObservable = new Observable<Vector2>();\r\n\r\n    /**\r\n     * An event triggered when the pointer moves out of the control.\r\n     */\r\n    public onPointerOutObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered when the pointer taps the control\r\n     */\r\n    public onPointerDownObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer up\r\n     */\r\n    public onPointerUpObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when a control is clicked on\r\n     */\r\n    public onPointerClickObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer enters the control\r\n     */\r\n    public onPointerEnterObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered when the control is marked as dirty\r\n     */\r\n    public onDirtyObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered before drawing the control\r\n     */\r\n    public onBeforeDrawObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered after the control was drawn\r\n     */\r\n    public onAfterDrawObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered when the control has been disposed\r\n     */\r\n    public onDisposeObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered when the control isVisible is changed\r\n     */\r\n    public onIsVisibleChangedObservable = new Observable<boolean>();\r\n\r\n    /**\r\n     * Get the hosting AdvancedDynamicTexture\r\n     */\r\n    public get host(): AdvancedDynamicTexture {\r\n        return this._host;\r\n    }\r\n\r\n    /** Gets or set information about font offsets (used to render and align text) */\r\n    @serialize()\r\n    public get fontOffset(): { ascent: number; height: number; descent: number } {\r\n        return this._fontOffset;\r\n    }\r\n\r\n    public set fontOffset(offset: { ascent: number; height: number; descent: number }) {\r\n        this._fontOffset = offset;\r\n    }\r\n\r\n    /** Gets or sets alpha value for the control (1 means opaque and 0 means entirely transparent) */\r\n    @serialize()\r\n    public get alpha(): number {\r\n        return this._alpha;\r\n    }\r\n\r\n    public set alpha(value: number) {\r\n        if (this._alpha === value) {\r\n            return;\r\n        }\r\n        this._alphaSet = true;\r\n        this._alpha = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a number indicating size of stroke we want to highlight the control with (mostly for debugging purpose)\r\n     */\r\n    public get highlightLineWidth(): number {\r\n        return this._highlightLineWidth;\r\n    }\r\n\r\n    public set highlightLineWidth(value: number) {\r\n        if (this._highlightLineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._highlightLineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that we want to highlight the control (mostly for debugging purpose)\r\n     */\r\n    public get isHighlighted(): boolean {\r\n        return this._isHighlighted;\r\n    }\r\n\r\n    public set isHighlighted(value: boolean) {\r\n        if (this._isHighlighted === value) {\r\n            return;\r\n        }\r\n\r\n        this._isHighlighted = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a string defining the color to use for highlighting this control\r\n     */\r\n    public get highlightColor(): string {\r\n        return this._highlightColor;\r\n    }\r\n\r\n    public set highlightColor(value: string) {\r\n        if (this._highlightColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._highlightColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on X axis (1 by default)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling\r\n     */\r\n    @serialize()\r\n    public get scaleX(): number {\r\n        return this._scaleX;\r\n    }\r\n\r\n    public set scaleX(value: number) {\r\n        if (this._scaleX === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on Y axis (1 by default)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling\r\n     */\r\n    @serialize()\r\n    public get scaleY(): number {\r\n        return this._scaleY;\r\n    }\r\n\r\n    public set scaleY(value: number) {\r\n        if (this._scaleY === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the rotation angle (0 by default)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling\r\n     */\r\n    @serialize()\r\n    public get rotation(): number {\r\n        return this._rotation;\r\n    }\r\n\r\n    public set rotation(value: number) {\r\n        if (this._rotation === value) {\r\n            return;\r\n        }\r\n\r\n        this._rotation = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on Y axis (0 by default)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling\r\n     */\r\n    @serialize()\r\n    public get transformCenterY(): number {\r\n        return this._transformCenterY;\r\n    }\r\n\r\n    public set transformCenterY(value: number) {\r\n        if (this._transformCenterY === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on X axis (0 by default)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling\r\n     */\r\n    @serialize()\r\n    public get transformCenterX(): number {\r\n        return this._transformCenterX;\r\n    }\r\n\r\n    public set transformCenterX(value: number) {\r\n        if (this._transformCenterX === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the horizontal alignment\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#alignments\r\n     */\r\n    @serialize()\r\n    public get horizontalAlignment(): number {\r\n        return this._horizontalAlignment;\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        if (this._horizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._horizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the vertical alignment\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#alignments\r\n     */\r\n    @serialize()\r\n    public get verticalAlignment(): number {\r\n        return this._verticalAlignment;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        if (this._verticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._verticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _fixedRatio = 0;\r\n    public set fixedRatio(value: number) {\r\n        if (this._fixedRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._fixedRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a fixed ratio for this control.\r\n     * When different from 0, the ratio is used to compute the \"second\" dimension.\r\n     * The first dimension used in the computation is the last one set (by setting width / widthInPixels or height / heightInPixels), and the\r\n     * second dimension is computed as first dimension * fixedRatio\r\n     */\r\n    @serialize()\r\n    public get fixedRatio(): number {\r\n        return this._fixedRatio;\r\n    }\r\n\r\n    private _fixedRatioMasterIsWidth = true;\r\n    set fixedRatioMasterIsWidth(value: boolean) {\r\n        if (this._fixedRatioMasterIsWidth === value) {\r\n            return;\r\n        }\r\n        this._fixedRatioMasterIsWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the fixed ratio is set on the width instead of the height. True by default.\r\n     * When the height of a control is set, this property is changed to false.\r\n     */\r\n    @serialize()\r\n    get fixedRatioMasterIsWidth(): boolean {\r\n        return this._fixedRatioMasterIsWidth;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control width\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        this._fixedRatioMasterIsWidth = true;\r\n\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the control width in pixel\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public get widthInPixels(): number {\r\n        return this._width.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set widthInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this._fixedRatioMasterIsWidth = true;\r\n        this.width = value + \"px\";\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control height\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    public set height(value: string | number) {\r\n        this._fixedRatioMasterIsWidth = false;\r\n\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control height in pixel\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public get heightInPixels(): number {\r\n        return this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set heightInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this._fixedRatioMasterIsWidth = false;\r\n        this.height = value + \"px\";\r\n    }\r\n\r\n    /** Gets or set font family */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font style */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets style\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#styles\r\n     */\r\n    @serialize()\r\n    public get style(): Nullable<Style> {\r\n        return this._style;\r\n    }\r\n\r\n    public set style(value: Nullable<Style>) {\r\n        if (this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        this._style = value;\r\n\r\n        if (this._style) {\r\n            this._styleObserver = this._style.onChangedObservable.add(() => {\r\n                this._markAsDirty();\r\n                this._resetFontCache();\r\n            });\r\n        }\r\n\r\n        this._markAsDirty();\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** @internal */\r\n    public get _isFontSizeInPercentage(): boolean {\r\n        return this._fontSize.isPercentage;\r\n    }\r\n\r\n    /** Gets or sets font size in pixels */\r\n    public get fontSizeInPixels(): number {\r\n        const fontSizeToUse = this._style ? this._style._fontSize : this._fontSize;\r\n\r\n        if (fontSizeToUse.isPixel) {\r\n            return fontSizeToUse.getValue(this._host);\r\n        }\r\n\r\n        return fontSizeToUse.getValueInPixel(this._host, this._tempParentMeasure.height || this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set fontSizeInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.fontSize = value + \"px\";\r\n    }\r\n\r\n    /** Gets or sets font size */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this._markAsDirty();\r\n            this._resetFontCache();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets foreground color */\r\n    @serialize()\r\n    public get color(): string {\r\n        return this._color;\r\n    }\r\n\r\n    public set color(value: string) {\r\n        if (this._color === value) {\r\n            return;\r\n        }\r\n\r\n        this._color = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets gradient. Setting a gradient will override the color */\r\n    @serialize()\r\n    public get gradient(): Nullable<BaseGradient> {\r\n        return this._gradient;\r\n    }\r\n\r\n    public set gradient(value: Nullable<BaseGradient>) {\r\n        if (this._gradient === value) {\r\n            return;\r\n        }\r\n\r\n        this._gradient = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets z index which is used to reorder controls on the z axis */\r\n    @serialize()\r\n    public get zIndex(): number {\r\n        return this._zIndex;\r\n    }\r\n\r\n    public set zIndex(value: number) {\r\n        if (this.zIndex === value) {\r\n            return;\r\n        }\r\n\r\n        this._zIndex = value;\r\n\r\n        if (this.parent) {\r\n            this.parent._reOrderControl(this);\r\n        }\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can be rendered */\r\n    @serialize()\r\n    public get notRenderable(): boolean {\r\n        return this._doNotRender;\r\n    }\r\n\r\n    public set notRenderable(value: boolean) {\r\n        if (this._doNotRender === value) {\r\n            return;\r\n        }\r\n\r\n        this._doNotRender = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    @serialize()\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n        this._markAsDirty(true);\r\n\r\n        this.onIsVisibleChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    /** Gets a boolean indicating that the control needs to update its rendering */\r\n    public get isDirty(): boolean {\r\n        return this._isDirty;\r\n    }\r\n\r\n    /**\r\n     * Gets the current linked mesh (or null if none)\r\n     */\r\n    public get linkedMesh(): Nullable<TransformNode> {\r\n        return this._linkedMesh;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding should work like in CSS.\r\n     * Basically, it will add the padding amount on each side of the parent control for its children.\r\n     */\r\n    @serialize()\r\n    public get descendantsOnlyPadding(): boolean {\r\n        return this._descendantsOnlyPadding;\r\n    }\r\n\r\n    public set descendantsOnlyPadding(value: boolean) {\r\n        if (this._descendantsOnlyPadding === value) {\r\n            return;\r\n        }\r\n\r\n        this._descendantsOnlyPadding = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the left of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get paddingLeft(): string | number {\r\n        return this._paddingLeft.toString(this._host);\r\n    }\r\n\r\n    public set paddingLeft(value: string | number) {\r\n        if (this._paddingLeft.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding in pixels to use on the left of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public get paddingLeftInPixels(): number {\r\n        return this._paddingLeft.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingLeftInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.paddingLeft = value + \"px\";\r\n    }\r\n\r\n    /** @internal */\r\n    public get _paddingLeftInPixels(): number {\r\n        if (this._descendantsOnlyPadding) {\r\n            return 0;\r\n        }\r\n\r\n        return this.paddingLeftInPixels;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the right of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get paddingRight(): string | number {\r\n        return this._paddingRight.toString(this._host);\r\n    }\r\n\r\n    public set paddingRight(value: string | number) {\r\n        if (this._paddingRight.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding in pixels to use on the right of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public get paddingRightInPixels(): number {\r\n        return this._paddingRight.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingRightInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.paddingRight = value + \"px\";\r\n    }\r\n\r\n    /** @internal */\r\n    public get _paddingRightInPixels(): number {\r\n        if (this._descendantsOnlyPadding) {\r\n            return 0;\r\n        }\r\n\r\n        return this.paddingRightInPixels;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the top of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get paddingTop(): string | number {\r\n        return this._paddingTop.toString(this._host);\r\n    }\r\n\r\n    public set paddingTop(value: string | number) {\r\n        if (this._paddingTop.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding in pixels to use on the top of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public get paddingTopInPixels(): number {\r\n        return this._paddingTop.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingTopInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.paddingTop = value + \"px\";\r\n    }\r\n\r\n    /** @internal */\r\n    public get _paddingTopInPixels(): number {\r\n        if (this._descendantsOnlyPadding) {\r\n            return 0;\r\n        }\r\n\r\n        return this.paddingTopInPixels;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the bottom of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get paddingBottom(): string | number {\r\n        return this._paddingBottom.toString(this._host);\r\n    }\r\n\r\n    public set paddingBottom(value: string | number) {\r\n        if (this._paddingBottom.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding in pixels to use on the bottom of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public get paddingBottomInPixels(): number {\r\n        return this._paddingBottom.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingBottomInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.paddingBottom = value + \"px\";\r\n    }\r\n\r\n    /** @internal */\r\n    public get _paddingBottomInPixels(): number {\r\n        if (this._descendantsOnlyPadding) {\r\n            return 0;\r\n        }\r\n\r\n        return this.paddingBottomInPixels;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the left coordinate of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get left(): string | number {\r\n        return this._left.toString(this._host);\r\n    }\r\n\r\n    public set left(value: string | number) {\r\n        if (this._left.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the left coordinate in pixels of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public get leftInPixels(): number {\r\n        return this._left.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set leftInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.left = value + \"px\";\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the top coordinate of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get top(): string | number {\r\n        return this._top.toString(this._host);\r\n    }\r\n\r\n    public set top(value: string | number) {\r\n        if (this._top.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the top coordinate in pixels of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public get topInPixels(): number {\r\n        return this._top.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set topInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.top = value + \"px\";\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on X axis to the linked mesh\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions\r\n     */\r\n    @serialize()\r\n    public get linkOffsetX(): string | number {\r\n        return this._linkOffsetX.toString(this._host);\r\n    }\r\n\r\n    public set linkOffsetX(value: string | number) {\r\n        if (this._linkOffsetX.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset in pixels on X axis to the linked mesh\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions\r\n     */\r\n    public get linkOffsetXInPixels(): number {\r\n        return this._linkOffsetX.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set linkOffsetXInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.linkOffsetX = value + \"px\";\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on Y axis to the linked mesh\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions\r\n     */\r\n    @serialize()\r\n    public get linkOffsetY(): string | number {\r\n        return this._linkOffsetY.toString(this._host);\r\n    }\r\n\r\n    public set linkOffsetY(value: string | number) {\r\n        if (this._linkOffsetY.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset in pixels on Y axis to the linked mesh\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions\r\n     */\r\n    public get linkOffsetYInPixels(): number {\r\n        return this._linkOffsetY.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set linkOffsetYInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.linkOffsetY = value + \"px\";\r\n    }\r\n\r\n    /** Gets the center coordinate on X axis */\r\n    public get centerX(): number {\r\n        return this._currentMeasure.left + this._currentMeasure.width / 2;\r\n    }\r\n\r\n    /** Gets the center coordinate on Y axis */\r\n    public get centerY(): number {\r\n        return this._currentMeasure.top + this._currentMeasure.height / 2;\r\n    }\r\n\r\n    /** Gets or sets if control is Enabled */\r\n    @serialize()\r\n    public get isEnabled(): boolean {\r\n        return this._isEnabled;\r\n    }\r\n\r\n    public set isEnabled(value: boolean) {\r\n        if (this._isEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._isEnabled = value;\r\n        this._markAsDirty();\r\n        // if this control or any of it's descendants are under a pointer, we need to fire a pointerOut event\r\n        const recursivelyFirePointerOut = (control: Control) => {\r\n            if (!control.host) {\r\n                return;\r\n            }\r\n            for (const pointer in control.host._lastControlOver) {\r\n                if (control === this.host._lastControlOver[pointer]) {\r\n                    control._onPointerOut(control, null, true);\r\n                    delete control.host._lastControlOver[pointer];\r\n                }\r\n            }\r\n            if ((control as Container).children !== undefined) {\r\n                (control as Container).children.forEach(recursivelyFirePointerOut);\r\n            }\r\n        };\r\n        recursivelyFirePointerOut(this);\r\n    }\r\n    /** Gets or sets background color of control if it's disabled. Only applies to Button class. */\r\n    @serialize()\r\n    public get disabledColor(): string {\r\n        return this._disabledColor;\r\n    }\r\n\r\n    public set disabledColor(value: string) {\r\n        if (this._disabledColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._disabledColor = value;\r\n        this._markAsDirty();\r\n    }\r\n    /** Gets or sets front color of control if it's disabled. Only applies to Checkbox class. */\r\n    @serialize()\r\n    public get disabledColorItem(): string {\r\n        return this._disabledColorItem;\r\n    }\r\n\r\n    public set disabledColorItem(value: string) {\r\n        if (this._disabledColorItem === value) {\r\n            return;\r\n        }\r\n\r\n        this._disabledColorItem = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets/sets the overlap group of the control.\r\n     * Controls with overlapGroup set to a number can be deoverlapped.\r\n     * Controls with overlapGroup set to undefined are not deoverlapped.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#deoverlapping\r\n     */\r\n    @serialize()\r\n    public overlapGroup?: number;\r\n    /**\r\n     * Gets/sets the deoverlap movement multiplier\r\n     */\r\n    @serialize()\r\n    public overlapDeltaMultiplier?: number;\r\n\r\n    /**\r\n     * Array of animations\r\n     */\r\n    animations: Nullable<Animation[]> = null;\r\n\r\n    // Functions\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the name of the control\r\n     */\r\n    constructor(\r\n        /** defines the name of the control */\r\n        public name?: string\r\n    ) {}\r\n\r\n    /** @internal */\r\n    protected _getTypeName(): string {\r\n        return \"Control\";\r\n    }\r\n\r\n    /**\r\n     * Gets the first ascendant in the hierarchy of the given type\r\n     * @param className defines the required type\r\n     * @returns the ascendant or null if not found\r\n     */\r\n    public getAscendantOfClass(className: string): Nullable<Control> {\r\n        if (!this.parent) {\r\n            return null;\r\n        }\r\n\r\n        if (this.parent.getClassName() === className) {\r\n            return this.parent;\r\n        }\r\n\r\n        return this.parent.getAscendantOfClass(className);\r\n    }\r\n\r\n    /**\r\n     * Mark control element as dirty\r\n     * @param force force non visible elements to be marked too\r\n     */\r\n    public markAsDirty(force = false): void {\r\n        this._markAsDirty(force);\r\n    }\r\n\r\n    /**\r\n     * Mark the element and its children as dirty\r\n     */\r\n    public markAllAsDirty(): void {\r\n        this._markAllAsDirty();\r\n    }\r\n\r\n    /** @internal */\r\n    public _resetFontCache(): void {\r\n        this._fontSet = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Determines if a container is an ascendant of the current control\r\n     * @param container defines the container to look for\r\n     * @returns true if the container is one of the ascendant of the control\r\n     */\r\n    public isAscendant(container: Control): boolean {\r\n        if (!this.parent) {\r\n            return false;\r\n        }\r\n\r\n        if (this.parent === container) {\r\n            return true;\r\n        }\r\n\r\n        return this.parent.isAscendant(container);\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in local space\r\n     */\r\n    public getLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        const result = Vector2.Zero();\r\n\r\n        this.getLocalCoordinatesToRef(globalCoordinates, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @param result defines the target vector2 where to store the result\r\n     * @returns the current control\r\n     */\r\n    public getLocalCoordinatesToRef(globalCoordinates: Vector2, result: Vector2): Control {\r\n        result.x = globalCoordinates.x - this._currentMeasure.left;\r\n        result.y = globalCoordinates.y - this._currentMeasure.top;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in parent local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in parent local space\r\n     */\r\n    public getParentLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        const result = Vector2.Zero();\r\n\r\n        result.x = globalCoordinates.x - this._cachedParentMeasure.left;\r\n        result.y = globalCoordinates.y - this._cachedParentMeasure.top;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Move the current control to a vector3 position projected onto the screen.\r\n     * @param position defines the target position\r\n     * @param scene defines the hosting scene\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene): void {\r\n        if (!this._host || this.parent !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        const globalViewport = this._host._getGlobalViewport();\r\n        const projectedPosition = Vector3.Project(position, Matrix.IdentityReadOnly, scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Will store all controls that have this control as ascendant in a given array\r\n     * @param results defines the array where to store the descendants\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     */\r\n    public getDescendantsToRef(results: Control[], directDescendantsOnly: boolean = false, predicate?: (control: Control) => boolean): void {\r\n        // Do nothing by default\r\n    }\r\n\r\n    /**\r\n     * Will return all controls that have this control as ascendant\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @returns all child controls\r\n     */\r\n    public getDescendants(directDescendantsOnly?: boolean, predicate?: (control: Control) => boolean): Control[] {\r\n        const results = new Array<Control>();\r\n\r\n        this.getDescendantsToRef(results, directDescendantsOnly, predicate);\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Link current control with a target mesh\r\n     * @param mesh defines the mesh to link with\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions\r\n     */\r\n    public linkWithMesh(mesh: Nullable<TransformNode>): void {\r\n        if (!this._host || (this.parent && this.parent !== this._host._rootContainer)) {\r\n            if (mesh) {\r\n                Tools.Error(\"Cannot link a control to a mesh if the control is not at root level\");\r\n            }\r\n            return;\r\n        }\r\n\r\n        const index = this._host._linkedControls.indexOf(this);\r\n        if (index !== -1) {\r\n            this._linkedMesh = mesh;\r\n            if (!mesh) {\r\n                this._host._linkedControls.splice(index, 1);\r\n            }\r\n            return;\r\n        } else if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._linkedMesh = mesh;\r\n        this._host._linkedControls.push(this);\r\n    }\r\n\r\n    /**\r\n     * Shorthand function to set the top, right, bottom, and left padding values on the control.\r\n     * @param { string | number} paddingTop - The value of the top padding.\r\n     * @param { string | number} paddingRight - The value of the right padding. If omitted, top is used.\r\n     * @param { string | number} paddingBottom - The value of the bottom padding. If omitted, top is used.\r\n     * @param { string | number} paddingLeft - The value of the left padding. If omitted, right is used.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public setPadding(paddingTop: string | number, paddingRight?: string | number, paddingBottom?: string | number, paddingLeft?: string | number) {\r\n        const top = paddingTop;\r\n        const right = paddingRight ?? top;\r\n        const bottom = paddingBottom ?? top;\r\n        const left = paddingLeft ?? right;\r\n\r\n        this.paddingTop = top;\r\n        this.paddingRight = right;\r\n        this.paddingBottom = bottom;\r\n        this.paddingLeft = left;\r\n    }\r\n\r\n    /**\r\n     * Shorthand funtion to set the top, right, bottom, and left padding values in pixels on the control.\r\n     * @param { number} paddingTop - The value in pixels of the top padding.\r\n     * @param { number} paddingRight - The value in pixels of the right padding. If omitted, top is used.\r\n     * @param { number} paddingBottom - The value in pixels of the bottom padding. If omitted, top is used.\r\n     * @param { number} paddingLeft - The value in pixels of the left padding. If omitted, right is used.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public setPaddingInPixels(paddingTop: number, paddingRight?: number, paddingBottom?: number, paddingLeft?: number) {\r\n        const top = paddingTop;\r\n        const right = paddingRight ?? top;\r\n        const bottom = paddingBottom ?? top;\r\n        const left = paddingLeft ?? right;\r\n\r\n        this.paddingTopInPixels = top;\r\n        this.paddingRightInPixels = right;\r\n        this.paddingBottomInPixels = bottom;\r\n        this.paddingLeftInPixels = left;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3): void {\r\n        const oldLeft = this._left.getValue(this._host);\r\n        const oldTop = this._top.getValue(this._host);\r\n\r\n        const parentMeasure = this.parent?._currentMeasure;\r\n        if (parentMeasure) {\r\n            this._processMeasures(parentMeasure, this._host.getContext());\r\n        }\r\n\r\n        let newLeft = projectedPosition.x + this._linkOffsetX.getValue(this._host) - this._currentMeasure.width / 2;\r\n        let newTop = projectedPosition.y + this._linkOffsetY.getValue(this._host) - this._currentMeasure.height / 2;\r\n\r\n        const leftAndTopIgnoreAdaptiveScaling = this._left.ignoreAdaptiveScaling && this._top.ignoreAdaptiveScaling;\r\n        if (leftAndTopIgnoreAdaptiveScaling) {\r\n            if (Math.abs(newLeft - oldLeft) < 0.5) {\r\n                newLeft = oldLeft;\r\n            }\r\n\r\n            if (Math.abs(newTop - oldTop) < 0.5) {\r\n                newTop = oldTop;\r\n            }\r\n        }\r\n\r\n        if (!leftAndTopIgnoreAdaptiveScaling && oldLeft === newLeft && oldTop === newTop) {\r\n            return;\r\n        }\r\n\r\n        this.left = newLeft + \"px\";\r\n        this.top = newTop + \"px\";\r\n\r\n        this._left.ignoreAdaptiveScaling = true;\r\n        this._top.ignoreAdaptiveScaling = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _offsetLeft(offset: number) {\r\n        this._isDirty = true;\r\n        this._currentMeasure.left += offset;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _offsetTop(offset: number) {\r\n        this._isDirty = true;\r\n        this._currentMeasure.top += offset;\r\n    }\r\n\r\n    /** @internal */\r\n    public _markMatrixAsDirty(): void {\r\n        this._isMatrixDirty = true;\r\n        this._flagDescendantsAsMatrixDirty();\r\n    }\r\n\r\n    /** @internal */\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        // No child\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _intersectsRect(rect: Measure, context?: ICanvasRenderingContext) {\r\n        // make sure we are transformed correctly before checking intersections. no-op if nothing is dirty.\r\n        this._transform(context);\r\n        if (this._evaluatedMeasure.left >= rect.left + rect.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this._evaluatedMeasure.top >= rect.top + rect.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this._evaluatedMeasure.left + this._evaluatedMeasure.width <= rect.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this._evaluatedMeasure.top + this._evaluatedMeasure.height <= rect.top) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @internal */\r\n    protected _computeAdditionalOffsetX() {\r\n        return 0;\r\n    }\r\n\r\n    /** @internal */\r\n    protected _computeAdditionalOffsetY() {\r\n        return 0;\r\n    }\r\n\r\n    /** @internal */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public invalidateRect() {\r\n        this._transform();\r\n        if (this.host && this.host.useInvalidateRectOptimization) {\r\n            // Rotate by transform to get the measure transformed to global space\r\n            this._currentMeasure.transformToRef(this._transformMatrix, this._tmpMeasureA);\r\n            // get the boudning box of the current measure and last frames measure in global space and invalidate it\r\n            // the previous measure is used to properly clear a control that is scaled down\r\n            Measure.CombineToRef(this._tmpMeasureA, this._prevCurrentMeasureTransformedIntoGlobalSpace, this._tmpMeasureA);\r\n\r\n            // Expand rect based on shadows\r\n            const shadowOffsetX = this.shadowOffsetX;\r\n            const shadowOffsetY = this.shadowOffsetY;\r\n            const shadowBlur = Math.max(this._previousShadowBlur, this.shadowBlur);\r\n\r\n            const leftShadowOffset = Math.min(Math.min(shadowOffsetX, 0) - shadowBlur * 2, 0);\r\n            const rightShadowOffset = Math.max(Math.max(shadowOffsetX, 0) + shadowBlur * 2, 0);\r\n            const topShadowOffset = Math.min(Math.min(shadowOffsetY, 0) - shadowBlur * 2, 0);\r\n            const bottomShadowOffset = Math.max(Math.max(shadowOffsetY, 0) + shadowBlur * 2, 0);\r\n\r\n            const offsetX = this._computeAdditionalOffsetX();\r\n            const offsetY = this._computeAdditionalOffsetY();\r\n\r\n            this.host.invalidateRect(\r\n                Math.floor(this._tmpMeasureA.left + leftShadowOffset - offsetX),\r\n                Math.floor(this._tmpMeasureA.top + topShadowOffset - offsetY),\r\n                Math.ceil(this._tmpMeasureA.left + this._tmpMeasureA.width + rightShadowOffset + offsetX),\r\n                Math.ceil(this._tmpMeasureA.top + this._tmpMeasureA.height + bottomShadowOffset + offsetY)\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _markAsDirty(force = false): void {\r\n        if (!this._isVisible && !force) {\r\n            return;\r\n        }\r\n\r\n        this._isDirty = true;\r\n        this._markMatrixAsDirty();\r\n\r\n        // Redraw only this rectangle\r\n        if (this._host) {\r\n            this._host.markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _markAllAsDirty(): void {\r\n        this._markAsDirty();\r\n\r\n        if (this._font) {\r\n            this._prepareFont();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _link(host: AdvancedDynamicTexture): void {\r\n        this._host = host;\r\n        if (this._host) {\r\n            this.uniqueId = this._host.getScene()!.getUniqueId();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _transform(context?: ICanvasRenderingContext): void {\r\n        if (!this._isMatrixDirty && this._scaleX === 1 && this._scaleY === 1 && this._rotation === 0) {\r\n            return;\r\n        }\r\n\r\n        // postTranslate\r\n        const offsetX = this._currentMeasure.width * this._transformCenterX + this._currentMeasure.left;\r\n        const offsetY = this._currentMeasure.height * this._transformCenterY + this._currentMeasure.top;\r\n        if (context) {\r\n            context.translate(offsetX, offsetY);\r\n\r\n            // rotate\r\n            context.rotate(this._rotation);\r\n\r\n            // scale\r\n            context.scale(this._scaleX, this._scaleY);\r\n\r\n            // preTranslate\r\n            context.translate(-offsetX, -offsetY);\r\n        }\r\n        // Need to update matrices?\r\n        if (this._isMatrixDirty || this._cachedOffsetX !== offsetX || this._cachedOffsetY !== offsetY) {\r\n            this._cachedOffsetX = offsetX;\r\n            this._cachedOffsetY = offsetY;\r\n            this._isMatrixDirty = false;\r\n            this._flagDescendantsAsMatrixDirty();\r\n\r\n            Matrix2D.ComposeToRef(-offsetX, -offsetY, this._rotation, this._scaleX, this._scaleY, this.parent ? this.parent._transformMatrix : null, this._transformMatrix);\r\n\r\n            this._transformMatrix.invertToRef(this._invertTransformMatrix);\r\n            this._currentMeasure.transformToRef(this._transformMatrix, this._evaluatedMeasure);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _renderHighlight(context: ICanvasRenderingContext): void {\r\n        if (!this.isHighlighted) {\r\n            return;\r\n        }\r\n\r\n        context.save();\r\n        context.strokeStyle = this._highlightColor;\r\n        context.lineWidth = this._highlightLineWidth;\r\n\r\n        this._renderHighlightSpecific(context);\r\n        context.restore();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _renderHighlightSpecific(context: ICanvasRenderingContext): void {\r\n        context.strokeRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n    }\r\n\r\n    protected _getColor(context: ICanvasRenderingContext): string | ICanvasGradient {\r\n        return this.gradient ? this.gradient.getCanvasGradient(context) : this.color;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _applyStates(context: ICanvasRenderingContext): void {\r\n        if (this._isFontSizeInPercentage) {\r\n            this._fontSet = true;\r\n        }\r\n\r\n        if (this._host && this._host.useSmallestIdeal && !this._font) {\r\n            this._fontSet = true;\r\n        }\r\n\r\n        if (this._fontSet) {\r\n            this._prepareFont();\r\n            this._fontSet = false;\r\n        }\r\n\r\n        if (this._font) {\r\n            context.font = this._font;\r\n        }\r\n\r\n        if (this._color || this.gradient) {\r\n            context.fillStyle = this._getColor(context);\r\n        }\r\n\r\n        if (Control.AllowAlphaInheritance) {\r\n            context.globalAlpha *= this._alpha;\r\n        } else if (this._alphaSet) {\r\n            context.globalAlpha = this.parent && !this.parent.renderToIntermediateTexture ? this.parent.alpha * this._alpha : this._alpha;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _layout(parentMeasure: Measure, context: ICanvasRenderingContext): boolean {\r\n        if (!this.isDirty && (!this.isVisible || this.notRenderable)) {\r\n            return false;\r\n        }\r\n\r\n        if (this._isDirty || !this._cachedParentMeasure.isEqualsTo(parentMeasure)) {\r\n            this.host._numLayoutCalls++;\r\n\r\n            this._currentMeasure.addAndTransformToRef(\r\n                this._transformMatrix,\r\n                -this._paddingLeftInPixels | 0,\r\n                -this._paddingTopInPixels | 0,\r\n                this._paddingRightInPixels | 0,\r\n                this._paddingBottomInPixels | 0,\r\n                this._prevCurrentMeasureTransformedIntoGlobalSpace\r\n            );\r\n\r\n            context.save();\r\n\r\n            this._applyStates(context);\r\n\r\n            let rebuildCount = 0;\r\n            do {\r\n                this._rebuildLayout = false;\r\n                this._processMeasures(parentMeasure, context);\r\n                rebuildCount++;\r\n            } while (this._rebuildLayout && rebuildCount < 3);\r\n\r\n            if (rebuildCount >= 3) {\r\n                Logger.Error(`Layout cycle detected in GUI (Control name=${this.name}, uniqueId=${this.uniqueId})`);\r\n            }\r\n\r\n            context.restore();\r\n            this.invalidateRect();\r\n            this._evaluateClippingState(parentMeasure);\r\n        }\r\n\r\n        this._wasDirty = this._isDirty;\r\n        this._isDirty = false;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _processMeasures(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        this._tempPaddingMeasure.copyFrom(parentMeasure);\r\n\r\n        // Apply padding if in correct mode\r\n        if (this.parent && this.parent.descendantsOnlyPadding) {\r\n            this._tempPaddingMeasure.left += this.parent.paddingLeftInPixels;\r\n            this._tempPaddingMeasure.top += this.parent.paddingTopInPixels;\r\n            this._tempPaddingMeasure.width -= this.parent.paddingLeftInPixels + this.parent.paddingRightInPixels;\r\n            this._tempPaddingMeasure.height -= this.parent.paddingTopInPixels + this.parent.paddingBottomInPixels;\r\n        }\r\n\r\n        this._currentMeasure.copyFrom(this._tempPaddingMeasure);\r\n\r\n        // Let children take some pre-measurement actions\r\n        this._preMeasure(this._tempPaddingMeasure, context);\r\n\r\n        this._measure();\r\n        this._computeAlignment(this._tempPaddingMeasure, context);\r\n\r\n        // Convert to int values\r\n        this._currentMeasure.left = this._currentMeasure.left | 0;\r\n        this._currentMeasure.top = this._currentMeasure.top | 0;\r\n        this._currentMeasure.width = this._currentMeasure.width | 0;\r\n        this._currentMeasure.height = this._currentMeasure.height | 0;\r\n\r\n        // Let children add more features\r\n        this._additionalProcessing(this._tempPaddingMeasure, context);\r\n\r\n        this._cachedParentMeasure.copyFrom(this._tempPaddingMeasure);\r\n\r\n        this._currentMeasure.transformToRef(this._transformMatrix, this._evaluatedMeasure);\r\n        if (this.onDirtyObservable.hasObservers()) {\r\n            this.onDirtyObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    protected _evaluateClippingState(parentMeasure: Measure) {\r\n        // Since transformMatrix is used here, we need to have it freshly computed\r\n        this._transform();\r\n        this._currentMeasure.transformToRef(this._transformMatrix, this._evaluatedMeasure);\r\n        if (this.parent && this.parent.clipChildren) {\r\n            parentMeasure.transformToRef(this.parent._transformMatrix, this._evaluatedParentMeasure);\r\n            // Early clip\r\n            if (this._evaluatedMeasure.left > this._evaluatedParentMeasure.left + this._evaluatedParentMeasure.width) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n\r\n            if (this._evaluatedMeasure.left + this._evaluatedMeasure.width < this._evaluatedParentMeasure.left) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n\r\n            if (this._evaluatedMeasure.top > this._evaluatedParentMeasure.top + this._evaluatedParentMeasure.height) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n\r\n            if (this._evaluatedMeasure.top + this._evaluatedMeasure.height < this._evaluatedParentMeasure.top) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n        }\r\n\r\n        this._isClipped = false;\r\n    }\r\n\r\n    /** @internal */\r\n    public _measure(): void {\r\n        // Width / Height\r\n        if (this._width.isPixel) {\r\n            this._currentMeasure.width = this._width.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width *= this._width.getValue(this._host);\r\n        }\r\n\r\n        if (this._height.isPixel) {\r\n            this._currentMeasure.height = this._height.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height *= this._height.getValue(this._host);\r\n        }\r\n\r\n        if (this._fixedRatio !== 0) {\r\n            if (this._fixedRatioMasterIsWidth) {\r\n                this._currentMeasure.height = this._currentMeasure.width * this._fixedRatio;\r\n            } else {\r\n                this._currentMeasure.width = this._currentMeasure.height * this._fixedRatio;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _computeAlignment(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        const width = this._currentMeasure.width;\r\n        const height = this._currentMeasure.height;\r\n\r\n        const parentWidth = parentMeasure.width;\r\n        const parentHeight = parentMeasure.height;\r\n\r\n        // Left / top\r\n        let x = 0;\r\n        let y = 0;\r\n\r\n        switch (this.horizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = parentWidth - width;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (parentWidth - width) / 2;\r\n                break;\r\n        }\r\n\r\n        switch (this.verticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                y = 0;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                y = parentHeight - height;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                y = (parentHeight - height) / 2;\r\n                break;\r\n        }\r\n\r\n        if (!this.descendantsOnlyPadding) {\r\n            if (this._paddingLeft.isPixel) {\r\n                this._currentMeasure.left += this._paddingLeft.getValue(this._host);\r\n                this._currentMeasure.width -= this._paddingLeft.getValue(this._host);\r\n            } else {\r\n                this._currentMeasure.left += parentWidth * this._paddingLeft.getValue(this._host);\r\n                this._currentMeasure.width -= parentWidth * this._paddingLeft.getValue(this._host);\r\n            }\r\n\r\n            if (this._paddingRight.isPixel) {\r\n                this._currentMeasure.width -= this._paddingRight.getValue(this._host);\r\n            } else {\r\n                this._currentMeasure.width -= parentWidth * this._paddingRight.getValue(this._host);\r\n            }\r\n\r\n            if (this._paddingTop.isPixel) {\r\n                this._currentMeasure.top += this._paddingTop.getValue(this._host);\r\n                this._currentMeasure.height -= this._paddingTop.getValue(this._host);\r\n            } else {\r\n                this._currentMeasure.top += parentHeight * this._paddingTop.getValue(this._host);\r\n                this._currentMeasure.height -= parentHeight * this._paddingTop.getValue(this._host);\r\n            }\r\n\r\n            if (this._paddingBottom.isPixel) {\r\n                this._currentMeasure.height -= this._paddingBottom.getValue(this._host);\r\n            } else {\r\n                this._currentMeasure.height -= parentHeight * this._paddingBottom.getValue(this._host);\r\n            }\r\n        }\r\n\r\n        if (this._left.isPixel) {\r\n            this._currentMeasure.left += this._left.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._left.getValue(this._host);\r\n        }\r\n\r\n        if (this._top.isPixel) {\r\n            this._currentMeasure.top += this._top.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._top.getValue(this._host);\r\n        }\r\n\r\n        this._currentMeasure.left += x;\r\n        this._currentMeasure.top += y;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _preMeasure(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _clipForChildren(context: ICanvasRenderingContext): void {\r\n        // DO nothing\r\n    }\r\n\r\n    private static _ClipMeasure = new Measure(0, 0, 0, 0);\r\n    private _tmpMeasureA = new Measure(0, 0, 0, 0);\r\n    private _clip(context: ICanvasRenderingContext, invalidatedRectangle?: Nullable<Measure>) {\r\n        context.beginPath();\r\n        Control._ClipMeasure.copyFrom(this._currentMeasure);\r\n        if (invalidatedRectangle) {\r\n            // Rotate the invalidated rect into the control's space\r\n            invalidatedRectangle.transformToRef(this._invertTransformMatrix, this._tmpMeasureA);\r\n\r\n            // Get the intersection of the rect in context space and the current context\r\n            const intersection = new Measure(0, 0, 0, 0);\r\n            intersection.left = Math.max(this._tmpMeasureA.left, this._currentMeasure.left);\r\n            intersection.top = Math.max(this._tmpMeasureA.top, this._currentMeasure.top);\r\n            intersection.width = Math.min(this._tmpMeasureA.left + this._tmpMeasureA.width, this._currentMeasure.left + this._currentMeasure.width) - intersection.left;\r\n            intersection.height = Math.min(this._tmpMeasureA.top + this._tmpMeasureA.height, this._currentMeasure.top + this._currentMeasure.height) - intersection.top;\r\n            Control._ClipMeasure.copyFrom(intersection);\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            const shadowOffsetX = this.shadowOffsetX;\r\n            const shadowOffsetY = this.shadowOffsetY;\r\n            const shadowBlur = this.shadowBlur;\r\n\r\n            const leftShadowOffset = Math.min(Math.min(shadowOffsetX, 0) - shadowBlur * 2, 0);\r\n            const rightShadowOffset = Math.max(Math.max(shadowOffsetX, 0) + shadowBlur * 2, 0);\r\n            const topShadowOffset = Math.min(Math.min(shadowOffsetY, 0) - shadowBlur * 2, 0);\r\n            const bottomShadowOffset = Math.max(Math.max(shadowOffsetY, 0) + shadowBlur * 2, 0);\r\n\r\n            context.rect(\r\n                Control._ClipMeasure.left + leftShadowOffset,\r\n                Control._ClipMeasure.top + topShadowOffset,\r\n                Control._ClipMeasure.width + rightShadowOffset - leftShadowOffset,\r\n                Control._ClipMeasure.height + bottomShadowOffset - topShadowOffset\r\n            );\r\n        } else {\r\n            context.rect(Control._ClipMeasure.left, Control._ClipMeasure.top, Control._ClipMeasure.width, Control._ClipMeasure.height);\r\n        }\r\n\r\n        context.clip();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _render(context: ICanvasRenderingContext, invalidatedRectangle?: Nullable<Measure>): boolean {\r\n        if (!this.isVisible || this.notRenderable || this._isClipped) {\r\n            this._isDirty = false;\r\n            return false;\r\n        }\r\n\r\n        this.host._numRenderCalls++;\r\n\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        // Transform\r\n        this._transform(context);\r\n\r\n        // Clip\r\n        if (this.clipContent) {\r\n            this._clip(context, invalidatedRectangle);\r\n        }\r\n\r\n        if (this.onBeforeDrawObservable.hasObservers()) {\r\n            this.onBeforeDrawObservable.notifyObservers(this);\r\n        }\r\n\r\n        if (this.useBitmapCache && !this._wasDirty && this._cacheData) {\r\n            context.putImageData(this._cacheData, this._currentMeasure.left, this._currentMeasure.top);\r\n        } else {\r\n            this._draw(context, invalidatedRectangle);\r\n        }\r\n\r\n        if (this.useBitmapCache && this._wasDirty) {\r\n            this._cacheData = context.getImageData(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n        }\r\n\r\n        this._renderHighlight(context);\r\n\r\n        if (this.onAfterDrawObservable.hasObservers()) {\r\n            this.onAfterDrawObservable.notifyObservers(this);\r\n        }\r\n\r\n        context.restore();\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _draw(context: ICanvasRenderingContext, invalidatedRectangle?: Nullable<Measure>): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Tests if a given coordinates belong to the current control\r\n     * @param x defines x coordinate to test\r\n     * @param y defines y coordinate to test\r\n     * @returns true if the coordinates are inside the control\r\n     */\r\n    public contains(x: number, y: number): boolean {\r\n        // Invert transform\r\n        this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n\r\n        x = this._transformedPosition.x;\r\n        y = this._transformedPosition.y;\r\n\r\n        // Check\r\n        if (x < this._currentMeasure.left) {\r\n            return false;\r\n        }\r\n\r\n        if (x > this._currentMeasure.left + this._currentMeasure.width) {\r\n            return false;\r\n        }\r\n\r\n        if (y < this._currentMeasure.top) {\r\n            return false;\r\n        }\r\n\r\n        if (y > this._currentMeasure.top + this._currentMeasure.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isPointerBlocker) {\r\n            this._host._shouldBlockPointer = true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _processPicking(x: number, y: number, pi: Nullable<PointerInfoBase>, type: number, pointerId: number, buttonIndex: number, deltaX?: number, deltaY?: number): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        if (!this.isHitTestVisible || !this.isVisible || this._doNotRender) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pi, pointerId, buttonIndex, deltaX, deltaY);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerMove(target: Control, coordinates: Vector2, pointerId: number, pi: Nullable<PointerInfoBase>): void {\r\n        const canNotify: boolean = this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this, pi);\r\n\r\n        if (canNotify && this.parent != null && !this.isPointerBlocker) {\r\n            this.parent._onPointerMove(target, coordinates, pointerId, pi);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerEnter(target: Control, pi: Nullable<PointerInfoBase>): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) {\r\n            // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n        this._enterCount++;\r\n\r\n        const canNotify: boolean = this.onPointerEnterObservable.notifyObservers(this, -1, target, this, pi);\r\n\r\n        if (canNotify && this.parent != null && !this.isPointerBlocker) {\r\n            this.parent._onPointerEnter(target, pi);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerOut(target: Control, pi: Nullable<PointerInfoBase>, force = false): void {\r\n        if (!force && (!this._isEnabled || target === this)) {\r\n            return;\r\n        }\r\n        this._enterCount = 0;\r\n\r\n        let canNotify: boolean = true;\r\n\r\n        if (!target.isAscendant(this)) {\r\n            canNotify = this.onPointerOutObservable.notifyObservers(this, -1, target, this, pi);\r\n        }\r\n\r\n        if (canNotify && this.parent != null && !this.isPointerBlocker) {\r\n            this.parent._onPointerOut(target, pi, force);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: Nullable<PointerInfoBase>): boolean {\r\n        // Prevent pointerout to lose control context.\r\n        // Event redundancy is checked inside the function.\r\n        this._onPointerEnter(this, pi);\r\n\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        const canNotify: boolean = this.onPointerDownObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this, pi);\r\n\r\n        if (canNotify && this.parent != null && !this.isPointerBlocker) {\r\n            this.parent._onPointerDown(target, coordinates, pointerId, buttonIndex, pi);\r\n        }\r\n\r\n        if (pi && this.uniqueId !== this._host.rootContainer.uniqueId) {\r\n            this._host._capturedPointerIds.add((pi.event as IPointerEvent).pointerId);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean, pi?: Nullable<PointerInfoBase>): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        let canNotifyClick: boolean = notifyClick;\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            canNotifyClick = this.onPointerClickObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this, pi);\r\n        }\r\n        const canNotify: boolean = this.onPointerUpObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this, pi);\r\n\r\n        if (canNotify && this.parent != null && !this.isPointerBlocker) {\r\n            this.parent._onPointerUp(target, coordinates, pointerId, buttonIndex, canNotifyClick, pi);\r\n        }\r\n\r\n        if (pi && this.uniqueId !== this._host.rootContainer.uniqueId) {\r\n            this._host._capturedPointerIds.delete((pi.event as IPointerEvent).pointerId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector2.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (const key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector2.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onWheelScroll(deltaX?: number, deltaY?: number): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n        const canNotify: boolean = this.onWheelObservable.notifyObservers(new Vector2(deltaX, deltaY));\r\n\r\n        if (canNotify && this.parent != null) {\r\n            this.parent._onWheelScroll(deltaX, deltaY);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _onCanvasBlur(): void {}\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _processObservables(\r\n        type: number,\r\n        x: number,\r\n        y: number,\r\n        pi: Nullable<PointerInfoBase>,\r\n        pointerId: number,\r\n        buttonIndex: number,\r\n        deltaX?: number,\r\n        deltaY?: number\r\n    ): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        this._dummyVector2.copyFromFloats(x, y);\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, this._dummyVector2, pointerId, pi);\r\n\r\n            const previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this, pi);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this, pi);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, this._dummyVector2, pointerId, buttonIndex, pi);\r\n            this._host._registerLastControlDown(this, pointerId);\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, this._dummyVector2, pointerId, buttonIndex, true, pi);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERWHEEL) {\r\n            if (this._host._lastControlOver[pointerId]) {\r\n                this._host._lastControlOver[pointerId]._onWheelScroll(deltaX, deltaY);\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _prepareFont() {\r\n        if (!this._font && !this._fontSet) {\r\n            return;\r\n        }\r\n\r\n        if (this._style) {\r\n            this._font = this._style.fontStyle + \" \" + this._style.fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._style.fontFamily;\r\n        } else {\r\n            this._font = this._fontStyle + \" \" + this._fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._fontFamily;\r\n        }\r\n\r\n        this._fontOffset = Control._GetFontOffset(this._font);\r\n\r\n        //children need to be refreshed\r\n        this.getDescendants().forEach((child) => child._markAllAsDirty());\r\n    }\r\n\r\n    /**\r\n     * Clones a control and its descendants\r\n     * @param host the texture where the control will be instantiated. Can be empty, in which case the control will be created on the same texture\r\n     * @returns the cloned control\r\n     */\r\n    public clone(host?: AdvancedDynamicTexture): Control {\r\n        const serialization: any = {};\r\n        this.serialize(serialization);\r\n\r\n        const controlType = Tools.Instantiate(\"BABYLON.GUI.\" + serialization.className);\r\n        const cloned = new controlType();\r\n        cloned.parse(serialization, host);\r\n\r\n        return cloned;\r\n    }\r\n\r\n    /**\r\n     * Parses a serialized object into this control\r\n     * @param serializedObject the object with the serialized properties\r\n     * @param host the texture where the control will be instantiated. Can be empty, in which case the control will be created on the same texture\r\n     * @returns this control\r\n     */\r\n    public parse(serializedObject: any, host?: AdvancedDynamicTexture): Control {\r\n        SerializationHelper.Parse(() => this, serializedObject, null);\r\n\r\n        this.name = serializedObject.name;\r\n\r\n        this._parseFromContent(serializedObject, host ?? this._host);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Serializes the current control\r\n     * @param serializationObject defined the JSON serialized object\r\n     */\r\n    public serialize(serializationObject: any) {\r\n        SerializationHelper.Serialize(this, serializationObject);\r\n        serializationObject.name = this.name;\r\n        serializationObject.className = this.getClassName();\r\n\r\n        // Call prepareFont to guarantee the font is properly set before serializing\r\n        this._prepareFont();\r\n        if (this._font) {\r\n            serializationObject.fontFamily = this._fontFamily;\r\n            serializationObject.fontSize = this.fontSize;\r\n            serializationObject.fontWeight = this.fontWeight;\r\n            serializationObject.fontStyle = this.fontStyle;\r\n        }\r\n\r\n        if (this._gradient) {\r\n            serializationObject.gradient = {};\r\n            this._gradient.serialize(serializationObject.gradient);\r\n        }\r\n\r\n        // Animations\r\n        SerializationHelper.AppendSerializedAnimations(this, serializationObject);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _parseFromContent(serializedObject: any, host: AdvancedDynamicTexture) {\r\n        if (serializedObject.fontFamily) {\r\n            this.fontFamily = serializedObject.fontFamily;\r\n        }\r\n\r\n        if (serializedObject.fontSize) {\r\n            this.fontSize = serializedObject.fontSize;\r\n        }\r\n\r\n        if (serializedObject.fontWeight) {\r\n            this.fontWeight = serializedObject.fontWeight;\r\n        }\r\n\r\n        if (serializedObject.fontStyle) {\r\n            this.fontStyle = serializedObject.fontStyle;\r\n        }\r\n\r\n        // Gradient\r\n        if (serializedObject.gradient) {\r\n            const className = Tools.Instantiate(\"BABYLON.GUI.\" + serializedObject.gradient.className);\r\n            this._gradient = new className();\r\n            this._gradient?.parse(serializedObject.gradient);\r\n        }\r\n\r\n        // Animations\r\n        if (serializedObject.animations) {\r\n            this.animations = [];\r\n            for (let animationIndex = 0; animationIndex < serializedObject.animations.length; animationIndex++) {\r\n                const parsedAnimation = serializedObject.animations[animationIndex];\r\n                const internalClass = GetClass(\"BABYLON.Animation\");\r\n                if (internalClass) {\r\n                    this.animations.push(internalClass.Parse(parsedAnimation));\r\n                }\r\n            }\r\n\r\n            if (serializedObject.autoAnimate && this._host && this._host.getScene()) {\r\n                this._host\r\n                    .getScene()!\r\n                    .beginAnimation(\r\n                        this,\r\n                        serializedObject.autoAnimateFrom,\r\n                        serializedObject.autoAnimateTo,\r\n                        serializedObject.autoAnimateLoop,\r\n                        serializedObject.autoAnimateSpeed || 1.0\r\n                    );\r\n            }\r\n        }\r\n\r\n        this.fixedRatioMasterIsWidth = serializedObject.fixedRatioMasterIsWidth ?? this.fixedRatioMasterIsWidth;\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        this.onDirtyObservable.clear();\r\n        this.onBeforeDrawObservable.clear();\r\n        this.onAfterDrawObservable.clear();\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n        this.onWheelObservable.clear();\r\n\r\n        if (this._styleObserver && this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        if (this.parent) {\r\n            this.parent.removeControl(this);\r\n            this.parent = null;\r\n        }\r\n\r\n        if (this._host) {\r\n            const index = this._host._linkedControls.indexOf(this);\r\n            if (index > -1) {\r\n                this.linkWithMesh(null);\r\n            }\r\n        }\r\n\r\n        // Callback\r\n        this.onDisposeObservable.notifyObservers(this);\r\n        this.onDisposeObservable.clear();\r\n    }\r\n\r\n    // Statics\r\n    private static _HORIZONTAL_ALIGNMENT_LEFT = 0;\r\n    private static _HORIZONTAL_ALIGNMENT_RIGHT = 1;\r\n    private static _HORIZONTAL_ALIGNMENT_CENTER = 2;\r\n\r\n    private static _VERTICAL_ALIGNMENT_TOP = 0;\r\n    private static _VERTICAL_ALIGNMENT_BOTTOM = 1;\r\n    private static _VERTICAL_ALIGNMENT_CENTER = 2;\r\n\r\n    /** HORIZONTAL_ALIGNMENT_LEFT */\r\n    public static get HORIZONTAL_ALIGNMENT_LEFT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_LEFT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_RIGHT */\r\n    public static get HORIZONTAL_ALIGNMENT_RIGHT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_RIGHT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_CENTER */\r\n    public static get HORIZONTAL_ALIGNMENT_CENTER(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_TOP */\r\n    public static get VERTICAL_ALIGNMENT_TOP(): number {\r\n        return Control._VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_BOTTOM */\r\n    public static get VERTICAL_ALIGNMENT_BOTTOM(): number {\r\n        return Control._VERTICAL_ALIGNMENT_BOTTOM;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_CENTER */\r\n    public static get VERTICAL_ALIGNMENT_CENTER(): number {\r\n        return Control._VERTICAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    private static _FontHeightSizes: { [key: string]: { ascent: number; height: number; descent: number } } = {};\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _GetFontOffset(font: string): { ascent: number; height: number; descent: number } {\r\n        if (Control._FontHeightSizes[font]) {\r\n            return Control._FontHeightSizes[font];\r\n        }\r\n\r\n        const engine = EngineStore.LastCreatedEngine;\r\n        if (!engine) {\r\n            throw new Error(\"Invalid engine. Unable to create a canvas.\");\r\n        }\r\n\r\n        const result = engine.getFontOffset(font);\r\n        Control._FontHeightSizes[font] = result;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a Control from parsed data\r\n     * @param serializedObject defines parsed data\r\n     * @param host defines the hosting AdvancedDynamicTexture\r\n     * @returns a new Control\r\n     */\r\n    public static Parse(serializedObject: any, host: AdvancedDynamicTexture): Control {\r\n        const controlType = Tools.Instantiate(\"BABYLON.GUI.\" + serializedObject.className);\r\n        const control = SerializationHelper.Parse(() => new controlType(), serializedObject, null);\r\n\r\n        control.name = serializedObject.name;\r\n\r\n        control._parseFromContent(serializedObject, host);\r\n\r\n        return control;\r\n    }\r\n\r\n    public static AddHeader: (control: Control, text: string, size: string | number, options: { isHorizontal: boolean; controlFirst: boolean }) => any = () => {};\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected static drawEllipse(x: number, y: number, width: number, height: number, context: ICanvasRenderingContext): void {\r\n        context.translate(x, y);\r\n        context.scale(width, height);\r\n\r\n        context.beginPath();\r\n        context.arc(0, 0, 1, 0, 2 * Math.PI);\r\n        context.closePath();\r\n\r\n        context.scale(1 / width, 1 / height);\r\n        context.translate(-x, -y);\r\n    }\r\n\r\n    /**\r\n     * Returns true if the control is ready to be used\r\n     * @returns\r\n     */\r\n    public isReady(): boolean {\r\n        // Most controls are ready by default, so the default implementation is to return true\r\n        return true;\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Control\", Control);\r\n","import { Observable } from \"core/Misc/observable\";\r\nimport type { Measure } from \"../measure\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { Nullable } from \"core/types\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext, ITextMetrics } from \"core/Engines/ICanvas\";\r\nimport { EngineStore } from \"core/Engines/engineStore\";\r\n\r\n/**\r\n * Enum that determines the text-wrapping mode to use.\r\n */\r\nexport enum TextWrapping {\r\n    /**\r\n     * Clip the text when it's larger than Control.width; this is the default mode.\r\n     */\r\n    Clip = 0,\r\n\r\n    /**\r\n     * Wrap the text word-wise, i.e. try to add line-breaks at word boundary to fit within Control.width.\r\n     */\r\n    WordWrap = 1,\r\n\r\n    /**\r\n     * Ellipsize the text, i.e. shrink with trailing … when text is larger than Control.width.\r\n     */\r\n    Ellipsis = 2,\r\n\r\n    /**\r\n     * Wrap the text word-wise and clip the text when the text's height is larger than the Control.height, and shrink the last line with trailing … .\r\n     */\r\n    WordWrapEllipsis,\r\n}\r\n\r\n/**\r\n * Class used to create text block control\r\n */\r\nexport class TextBlock extends Control {\r\n    private _text = \"\";\r\n    private _textWrapping = TextWrapping.Clip;\r\n    private _textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    private _textVerticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n\r\n    private _lines: any[];\r\n    private _resizeToFit: boolean = false;\r\n    private _lineSpacing: ValueAndUnit = new ValueAndUnit(0);\r\n    private _outlineWidth: number = 0;\r\n    private _outlineColor: string = \"white\";\r\n    private _underline: boolean = false;\r\n    private _lineThrough: boolean = false;\r\n    private _wordDivider: string = \" \";\r\n    private _forceResizeWidth: boolean = false;\r\n    private _applyOutlineToUnderline: boolean = false;\r\n\r\n    /**\r\n     * An event triggered after the text is changed\r\n     */\r\n    public onTextChangedObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n     * An event triggered after the text was broken up into lines\r\n     */\r\n    public onLinesReadyObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n     * Function used to split a string into words. By default, a string is split at each space character found\r\n     */\r\n    public wordSplittingFunction: Nullable<(line: string) => string[]>;\r\n\r\n    /**\r\n     * Return the line list (you may need to use the onLinesReadyObservable to make sure the list is ready)\r\n     */\r\n    public get lines(): any[] {\r\n        return this._lines;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    @serialize()\r\n    public get resizeToFit(): boolean {\r\n        return this._resizeToFit;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public set resizeToFit(value: boolean) {\r\n        if (this._resizeToFit === value) {\r\n            return;\r\n        }\r\n        this._resizeToFit = value;\r\n\r\n        if (this._resizeToFit) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    @serialize()\r\n    public get textWrapping(): TextWrapping | boolean {\r\n        return this._textWrapping;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public set textWrapping(value: TextWrapping | boolean) {\r\n        if (this._textWrapping === value) {\r\n            return;\r\n        }\r\n        this._textWrapping = +value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    @serialize()\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n        this._text = value + \"\"; // Making sure it is a text\r\n        this._markAsDirty();\r\n\r\n        this.onTextChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    @serialize()\r\n    public get textHorizontalAlignment(): number {\r\n        return this._textHorizontalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textHorizontalAlignment(value: number) {\r\n        if (this._textHorizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textHorizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    @serialize()\r\n    public get textVerticalAlignment(): number {\r\n        return this._textVerticalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textVerticalAlignment(value: number) {\r\n        if (this._textVerticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textVerticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    @serialize()\r\n    public set lineSpacing(value: string | number) {\r\n        if (this._lineSpacing.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public get lineSpacing(): string | number {\r\n        return this._lineSpacing.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    @serialize()\r\n    public get outlineWidth(): number {\r\n        return this._outlineWidth;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public set outlineWidth(value: number) {\r\n        if (this._outlineWidth === value) {\r\n            return;\r\n        }\r\n        this._outlineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that text must have underline\r\n     */\r\n    @serialize()\r\n    public get underline(): boolean {\r\n        return this._underline;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that text must have underline\r\n     */\r\n    public set underline(value: boolean) {\r\n        if (this._underline === value) {\r\n            return;\r\n        }\r\n        this._underline = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that text must be crossed out\r\n     */\r\n    @serialize()\r\n    public get lineThrough(): boolean {\r\n        return this._lineThrough;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that text must be crossed out\r\n     */\r\n    public set lineThrough(value: boolean) {\r\n        if (this._lineThrough === value) {\r\n            return;\r\n        }\r\n        this._lineThrough = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * If the outline should be applied to the underline/strike-through too. Has different behavior in Edge/Chrome vs Firefox.\r\n     */\r\n    @serialize()\r\n    public get applyOutlineToUnderline(): boolean {\r\n        return this._applyOutlineToUnderline;\r\n    }\r\n\r\n    public set applyOutlineToUnderline(value: boolean) {\r\n        if (this._applyOutlineToUnderline === value) {\r\n            return;\r\n        }\r\n        this._applyOutlineToUnderline = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    @serialize()\r\n    public get outlineColor(): string {\r\n        return this._outlineColor;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public set outlineColor(value: string) {\r\n        if (this._outlineColor === value) {\r\n            return;\r\n        }\r\n        this._outlineColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets word divider\r\n     */\r\n    @serialize()\r\n    public get wordDivider(): string {\r\n        return this._wordDivider;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets word divider\r\n     */\r\n    public set wordDivider(value: string) {\r\n        if (this._wordDivider === value) {\r\n            return;\r\n        }\r\n        this._wordDivider = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * By default, if a text block has text wrapping other than Clip, its width\r\n     * is not resized even if resizeToFit = true. This parameter forces the width\r\n     * to be resized.\r\n     */\r\n    @serialize()\r\n    public get forceResizeWidth(): boolean {\r\n        return this._forceResizeWidth;\r\n    }\r\n\r\n    public set forceResizeWidth(value: boolean) {\r\n        if (this._forceResizeWidth === value) {\r\n            return;\r\n        }\r\n        this._forceResizeWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new TextBlock object\r\n     * @param name defines the name of the control\r\n     * @param text defines the text to display (empty string by default)\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the name of the control\r\n         */\r\n        public name?: string,\r\n        text: string = \"\"\r\n    ) {\r\n        super(name);\r\n\r\n        this.text = text;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"TextBlock\";\r\n    }\r\n\r\n    protected _processMeasures(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        if (!this._fontOffset || this.isDirty) {\r\n            this._fontOffset = Control._GetFontOffset(context.font);\r\n        }\r\n        super._processMeasures(parentMeasure, context);\r\n\r\n        // Prepare lines\r\n        this._lines = this._breakLines(this._currentMeasure.width, this._currentMeasure.height, context);\r\n        this.onLinesReadyObservable.notifyObservers(this);\r\n\r\n        let maxLineWidth: number = 0;\r\n\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n\r\n            if (line.width > maxLineWidth) {\r\n                maxLineWidth = line.width;\r\n            }\r\n        }\r\n\r\n        if (this._resizeToFit) {\r\n            if (this._textWrapping === TextWrapping.Clip || this._forceResizeWidth) {\r\n                const newWidth = Math.ceil(this._paddingLeftInPixels) + Math.ceil(this._paddingRightInPixels) + Math.ceil(maxLineWidth);\r\n                if (newWidth !== this._width.getValueInPixel(this._host, this._tempParentMeasure.width)) {\r\n                    this._width.updateInPlace(newWidth, ValueAndUnit.UNITMODE_PIXEL);\r\n                    this._rebuildLayout = true;\r\n                }\r\n            }\r\n            let newHeight = (this._paddingTopInPixels + this._paddingBottomInPixels + this._fontOffset.height * this._lines.length) | 0;\r\n\r\n            if (this._lines.length > 0 && this._lineSpacing.internalValue !== 0) {\r\n                let lineSpacing = 0;\r\n                if (this._lineSpacing.isPixel) {\r\n                    lineSpacing = this._lineSpacing.getValue(this._host);\r\n                } else {\r\n                    lineSpacing = this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n                }\r\n\r\n                newHeight += (this._lines.length - 1) * lineSpacing;\r\n            }\r\n\r\n            if (newHeight !== this._height.internalValue) {\r\n                this._height.updateInPlace(newHeight, ValueAndUnit.UNITMODE_PIXEL);\r\n                this._rebuildLayout = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _drawText(text: string, textWidth: number, y: number, context: ICanvasRenderingContext): void {\r\n        const width = this._currentMeasure.width;\r\n        let x = 0;\r\n        switch (this._textHorizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = width - textWidth;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (width - textWidth) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this.outlineWidth) {\r\n            context.strokeText(text, this._currentMeasure.left + x, y);\r\n        }\r\n        context.fillText(text, this._currentMeasure.left + x, y);\r\n\r\n        if (this._underline) {\r\n            this._drawLine(this._currentMeasure.left + x, y + 3, this._currentMeasure.left + x + textWidth, y + 3, context);\r\n        }\r\n\r\n        if (this._lineThrough) {\r\n            this._drawLine(this._currentMeasure.left + x, y - this.fontSizeInPixels / 3, this._currentMeasure.left + x + textWidth, y - this.fontSizeInPixels / 3, context);\r\n        }\r\n    }\r\n\r\n    private _drawLine(xFrom: number, yFrom: number, xTo: number, yTo: number, context: ICanvasRenderingContext): void {\r\n        context.beginPath();\r\n        context.lineWidth = Math.round(this.fontSizeInPixels * 0.05);\r\n        context.moveTo(xFrom, yFrom);\r\n        context.lineTo(xTo, yTo);\r\n        if (this.outlineWidth && this.applyOutlineToUnderline) {\r\n            context.stroke();\r\n            context.fill();\r\n        } else {\r\n            const currentStroke = context.strokeStyle;\r\n            context.strokeStyle = context.fillStyle;\r\n            context.stroke();\r\n            context.strokeStyle = currentStroke;\r\n        }\r\n        context.closePath();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        // Render lines\r\n        this._renderLines(context);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _applyStates(context: ICanvasRenderingContext): void {\r\n        super._applyStates(context);\r\n        if (this.outlineWidth) {\r\n            context.lineWidth = this.outlineWidth;\r\n            context.strokeStyle = this.outlineColor;\r\n            context.lineJoin = \"miter\";\r\n            context.miterLimit = 2;\r\n        }\r\n    }\r\n\r\n    private _linesTemp: object[] = [];\r\n\r\n    protected _breakLines(refWidth: number, refHeight: number, context: ICanvasRenderingContext): object[] {\r\n        this._linesTemp.length = 0;\r\n        const _lines = this.text.split(\"\\n\");\r\n\r\n        if (this._textWrapping === TextWrapping.Ellipsis) {\r\n            for (const _line of _lines) {\r\n                this._linesTemp.push(this._parseLineEllipsis(_line, refWidth, context));\r\n            }\r\n        } else if (this._textWrapping === TextWrapping.WordWrap) {\r\n            for (const _line of _lines) {\r\n                this._linesTemp.push(...this._parseLineWordWrap(_line, refWidth, context));\r\n            }\r\n        } else if (this._textWrapping === TextWrapping.WordWrapEllipsis) {\r\n            for (const _line of _lines) {\r\n                this._linesTemp.push(...this._parseLineWordWrapEllipsis(_line, refWidth, refHeight!, context));\r\n            }\r\n        } else {\r\n            for (const _line of _lines) {\r\n                this._linesTemp.push(this._parseLine(_line, context));\r\n            }\r\n        }\r\n\r\n        return this._linesTemp;\r\n    }\r\n\r\n    protected _parseLine(line: string = \"\", context: ICanvasRenderingContext): object {\r\n        return { text: line, width: this._getTextMetricsWidth(context.measureText(line)) };\r\n    }\r\n\r\n    //Calculate how many characters approximately we need to remove\r\n    private _getCharsToRemove(lineWidth: number, width: number, lineLength: number) {\r\n        const diff = lineWidth > width ? lineWidth - width : 0;\r\n        // This isn't exact unless the font is monospaced\r\n        const charWidth = lineWidth / lineLength;\r\n        const removeChars = Math.max(Math.floor(diff / charWidth), 1);\r\n        return removeChars;\r\n    }\r\n\r\n    protected _parseLineEllipsis(line: string = \"\", width: number, context: ICanvasRenderingContext): object {\r\n        let lineWidth = this._getTextMetricsWidth(context.measureText(line));\r\n\r\n        let removeChars = this._getCharsToRemove(lineWidth, width, line.length);\r\n\r\n        // unicode support. split('') does not work with unicode!\r\n        // make sure Array.from is available\r\n        const characters = Array.from && Array.from(line);\r\n        if (!characters) {\r\n            // no array.from, use the old method\r\n            while (line.length > 2 && lineWidth > width) {\r\n                line = line.slice(0, -removeChars);\r\n                lineWidth = this._getTextMetricsWidth(context.measureText(line + \"…\"));\r\n\r\n                removeChars = this._getCharsToRemove(lineWidth, width, line.length);\r\n            }\r\n            // Add on the end\r\n            line += \"…\";\r\n        } else {\r\n            while (characters.length && lineWidth > width) {\r\n                characters.splice(characters.length - removeChars, removeChars);\r\n                line = `${characters.join(\"\")}…`;\r\n                lineWidth = this._getTextMetricsWidth(context.measureText(line));\r\n\r\n                removeChars = this._getCharsToRemove(lineWidth, width, line.length);\r\n            }\r\n        }\r\n\r\n        return { text: line, width: lineWidth };\r\n    }\r\n\r\n    private _getTextMetricsWidth(textMetrics: ITextMetrics) {\r\n        if (textMetrics.actualBoundingBoxLeft !== undefined) {\r\n            return Math.abs(textMetrics.actualBoundingBoxLeft) + Math.abs(textMetrics.actualBoundingBoxRight);\r\n        }\r\n        return textMetrics.width;\r\n    }\r\n\r\n    protected _parseLineWordWrap(line: string = \"\", width: number, context: ICanvasRenderingContext): object[] {\r\n        const lines = [];\r\n        const words = this.wordSplittingFunction ? this.wordSplittingFunction(line) : line.split(this._wordDivider);\r\n        let lineWidth = this._getTextMetricsWidth(context.measureText(line));\r\n\r\n        for (let n = 0; n < words.length; n++) {\r\n            const testLine = n > 0 ? line + this._wordDivider + words[n] : words[0];\r\n            const testWidth = this._getTextMetricsWidth(context.measureText(testLine));\r\n            if (testWidth > width && n > 0) {\r\n                lines.push({ text: line, width: lineWidth });\r\n                line = words[n];\r\n                lineWidth = this._getTextMetricsWidth(context.measureText(line));\r\n            } else {\r\n                lineWidth = testWidth;\r\n                line = testLine;\r\n            }\r\n        }\r\n        lines.push({ text: line, width: lineWidth });\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _parseLineWordWrapEllipsis(line: string = \"\", width: number, height: number, context: ICanvasRenderingContext): object[] {\r\n        const lines = this._parseLineWordWrap(line, width, context);\r\n        for (let n = 1; n <= lines.length; n++) {\r\n            const currentHeight = this._computeHeightForLinesOf(n);\r\n            if (currentHeight > height && n > 1) {\r\n                const lastLine = lines[n - 2] as { text: string; width: number };\r\n                const currentLine = lines[n - 1] as { text: string; width: number };\r\n                lines[n - 2] = this._parseLineEllipsis(lastLine.text + this._wordDivider + currentLine.text, width, context);\r\n                const linesToRemove = lines.length - n + 1;\r\n                for (let i = 0; i < linesToRemove; i++) {\r\n                    lines.pop();\r\n                }\r\n                return lines;\r\n            }\r\n        }\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _renderLines(context: ICanvasRenderingContext): void {\r\n        if (!this._fontOffset || !this._lines) {\r\n            return;\r\n        }\r\n        const height = this._currentMeasure.height;\r\n        let rootY = 0;\r\n        switch (this._textVerticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                rootY = this._fontOffset.ascent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                rootY = height - this._fontOffset.height * (this._lines.length - 1) - this._fontOffset.descent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                rootY = this._fontOffset.ascent + (height - this._fontOffset.height * this._lines.length) / 2;\r\n                break;\r\n        }\r\n\r\n        rootY += this._currentMeasure.top;\r\n\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n\r\n            if (i !== 0 && this._lineSpacing.internalValue !== 0) {\r\n                if (this._lineSpacing.isPixel) {\r\n                    rootY += this._lineSpacing.getValue(this._host);\r\n                } else {\r\n                    rootY = rootY + this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n                }\r\n            }\r\n\r\n            this._drawText(line.text, line.width, rootY, context);\r\n            rootY += this._fontOffset.height;\r\n        }\r\n    }\r\n\r\n    private _computeHeightForLinesOf(lineCount: number): number {\r\n        let newHeight = this._paddingTopInPixels + this._paddingBottomInPixels + this._fontOffset.height * lineCount;\r\n\r\n        if (lineCount > 0 && this._lineSpacing.internalValue !== 0) {\r\n            let lineSpacing = 0;\r\n            if (this._lineSpacing.isPixel) {\r\n                lineSpacing = this._lineSpacing.getValue(this._host);\r\n            } else {\r\n                lineSpacing = this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n            }\r\n\r\n            newHeight += (lineCount - 1) * lineSpacing;\r\n        }\r\n\r\n        return newHeight;\r\n    }\r\n\r\n    /**\r\n     * Given a width constraint applied on the text block, find the expected height\r\n     * @returns expected height\r\n     */\r\n    public computeExpectedHeight(): number {\r\n        if (this.text && this.widthInPixels) {\r\n            // Should abstract platform instead of using LastCreatedEngine\r\n            const context = EngineStore.LastCreatedEngine?.createCanvas(0, 0).getContext(\"2d\");\r\n            if (context) {\r\n                this._applyStates(context);\r\n                if (!this._fontOffset) {\r\n                    this._fontOffset = Control._GetFontOffset(context.font);\r\n                }\r\n                const lines = this._lines\r\n                    ? this._lines\r\n                    : this._breakLines(\r\n                          this.widthInPixels - this._paddingLeftInPixels - this._paddingRightInPixels,\r\n                          this.heightInPixels - this._paddingTopInPixels - this._paddingBottomInPixels,\r\n                          context\r\n                      );\r\n                return this._computeHeightForLinesOf(lines.length);\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    dispose(): void {\r\n        super.dispose();\r\n\r\n        this.onTextChangedObservable.clear();\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.TextBlock\", TextBlock);\r\n","import type { Nullable } from \"core/types\";\r\nimport { Logger } from \"core/Misc/logger\";\r\n\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport type { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport { DynamicTexture } from \"core/Materials/Textures/dynamicTexture\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport type { BaseGradient } from \"./gradient/BaseGradient\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport { Matrix2D } from \"../math2D\";\r\n\r\n/**\r\n * Root class for 2D containers\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#containers\r\n */\r\nexport class Container extends Control {\r\n    /** @internal */\r\n    public _children = new Array<Control>();\r\n    /** @internal */\r\n    protected _measureForChildren = Measure.Empty();\r\n    /** @internal */\r\n    protected _background = \"\";\r\n    /** @internal */\r\n    protected _backgroundGradient: Nullable<BaseGradient> = null;\r\n    /** @internal */\r\n    protected _adaptWidthToChildren = false;\r\n    /** @internal */\r\n    protected _adaptHeightToChildren = false;\r\n    /** @internal */\r\n    protected _renderToIntermediateTexture: boolean = false;\r\n    /** @internal */\r\n    protected _intermediateTexture: Nullable<DynamicTexture> = null;\r\n\r\n    /** Gets or sets boolean indicating if children should be rendered to an intermediate texture rather than directly to host, useful for alpha blending */\r\n    @serialize()\r\n    public get renderToIntermediateTexture(): boolean {\r\n        return this._renderToIntermediateTexture;\r\n    }\r\n    public set renderToIntermediateTexture(value: boolean) {\r\n        if (this._renderToIntermediateTexture === value) {\r\n            return;\r\n        }\r\n        this._renderToIntermediateTexture = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that layout cycle errors should be displayed on the console\r\n     */\r\n    public logLayoutCycleErrors = false;\r\n\r\n    /**\r\n     * Gets or sets the number of layout cycles (a change involved by a control while evaluating the layout) allowed\r\n     */\r\n    @serialize()\r\n    public maxLayoutCycle = 3;\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children height */\r\n    @serialize()\r\n    public get adaptHeightToChildren(): boolean {\r\n        return this._adaptHeightToChildren;\r\n    }\r\n\r\n    public set adaptHeightToChildren(value: boolean) {\r\n        if (this._adaptHeightToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptHeightToChildren = value;\r\n\r\n        if (value) {\r\n            this.height = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children width */\r\n    @serialize()\r\n    public get adaptWidthToChildren(): boolean {\r\n        return this._adaptWidthToChildren;\r\n    }\r\n\r\n    public set adaptWidthToChildren(value: boolean) {\r\n        if (this._adaptWidthToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptWidthToChildren = value;\r\n\r\n        if (value) {\r\n            this.width = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    @serialize()\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background gradient color. Takes precedence over background */\r\n    @serialize()\r\n    public get backgroundGradient() {\r\n        return this._backgroundGradient;\r\n    }\r\n\r\n    public set backgroundGradient(value: Nullable<BaseGradient>) {\r\n        if (this._backgroundGradient === value) {\r\n            return;\r\n        }\r\n        this._backgroundGradient = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._children;\r\n    }\r\n\r\n    public get isReadOnly() {\r\n        return this._isReadOnly;\r\n    }\r\n\r\n    public set isReadOnly(value: boolean) {\r\n        this._isReadOnly = value;\r\n\r\n        for (const child of this._children) {\r\n            child.isReadOnly = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new Container\r\n     * @param name defines the name of the container\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container\";\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (const child of this.children) {\r\n            child._isClipped = false;\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its name\r\n     * @param name defines the child name to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByName(name: string): Nullable<Control> {\r\n        for (const child of this.children) {\r\n            if (child.name === name) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its type and its name\r\n     * @param name defines the child name to look for\r\n     * @param type defines the child type to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByType(name: string, type: string): Nullable<Control> {\r\n        for (const child of this.children) {\r\n            if (child.typeName === type) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Search for a specific control in children\r\n     * @param control defines the control to look for\r\n     * @returns true if the control is in child list\r\n     */\r\n    public containsControl(control: Control): boolean {\r\n        return this.children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current container\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Nullable<Control>): Container {\r\n        if (!control) {\r\n            return this;\r\n        }\r\n\r\n        const index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control._link(this._host);\r\n\r\n        control._markAllAsDirty();\r\n\r\n        this._reOrderControl(control);\r\n\r\n        this._markAsDirty();\r\n\r\n        this.onControlAddedObservable.notifyObservers(control);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes all controls from the current container\r\n     * @returns the current container\r\n     */\r\n    public clearControls(): Container {\r\n        const children = this.children.slice();\r\n\r\n        for (const child of children) {\r\n            this.removeControl(child);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        const index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n        }\r\n\r\n        control.linkWithMesh(null);\r\n\r\n        if (this._host) {\r\n            this._host._cleanControlAfterRemoval(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n\r\n        this.onControlRemovedObservable.notifyObservers(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * An event triggered when any control is added to this container.\r\n     */\r\n    public onControlAddedObservable = new Observable<Nullable<Control>>();\r\n\r\n    /**\r\n     * An event triggered when any control is removed from this container.\r\n     */\r\n    public onControlRemovedObservable = new Observable<Nullable<Control>>();\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _reOrderControl(control: Control): void {\r\n        const linkedMesh = control.linkedMesh;\r\n\r\n        this.removeControl(control);\r\n\r\n        let wasAdded = false;\r\n        for (let index = 0; index < this._children.length; index++) {\r\n            if (this._children[index].zIndex > control.zIndex) {\r\n                this._children.splice(index, 0, control);\r\n                wasAdded = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (!wasAdded) {\r\n            this._children.push(control);\r\n        }\r\n\r\n        control.parent = this;\r\n\r\n        if (linkedMesh) {\r\n            control.linkWithMesh(linkedMesh);\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _offsetLeft(offset: number) {\r\n        super._offsetLeft(offset);\r\n\r\n        for (const child of this._children) {\r\n            child._offsetLeft(offset);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _offsetTop(offset: number) {\r\n        super._offsetTop(offset);\r\n\r\n        for (const child of this._children) {\r\n            child._offsetTop(offset);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _markAllAsDirty(): void {\r\n        super._markAllAsDirty();\r\n\r\n        for (let index = 0; index < this._children.length; index++) {\r\n            this._children[index]._markAllAsDirty();\r\n        }\r\n    }\r\n\r\n    protected _getBackgroundColor(context: ICanvasRenderingContext) {\r\n        return this._backgroundGradient ? this._backgroundGradient.getCanvasGradient(context) : this._background;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _localDraw(context: ICanvasRenderingContext): void {\r\n        if (this._background || this._backgroundGradient) {\r\n            context.save();\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            context.fillStyle = this._getBackgroundColor(context);\r\n\r\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            context.restore();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _link(host: AdvancedDynamicTexture): void {\r\n        super._link(host);\r\n\r\n        for (const child of this._children) {\r\n            child._link(host);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    protected _beforeLayout() {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _processMeasures(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        if (this._isDirty || !this._cachedParentMeasure.isEqualsTo(parentMeasure)) {\r\n            super._processMeasures(parentMeasure, context);\r\n            this._evaluateClippingState(parentMeasure);\r\n            if (this._renderToIntermediateTexture) {\r\n                if (this._intermediateTexture && this._host.getScene() != this._intermediateTexture.getScene()) {\r\n                    this._intermediateTexture.dispose();\r\n                    this._intermediateTexture = null;\r\n                }\r\n                if (!this._intermediateTexture) {\r\n                    this._intermediateTexture = new DynamicTexture(\r\n                        \"\",\r\n                        { width: this._currentMeasure.width, height: this._currentMeasure.height },\r\n                        this._host.getScene(),\r\n                        false,\r\n                        Texture.NEAREST_SAMPLINGMODE,\r\n                        Constants.TEXTUREFORMAT_RGBA,\r\n                        false\r\n                    );\r\n                    this._intermediateTexture.hasAlpha = true;\r\n                } else {\r\n                    this._intermediateTexture.scaleTo(this._currentMeasure.width, this._currentMeasure.height);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _layout(parentMeasure: Measure, context: ICanvasRenderingContext): boolean {\r\n        if (!this.isDirty && (!this.isVisible || this.notRenderable)) {\r\n            return false;\r\n        }\r\n\r\n        this.host._numLayoutCalls++;\r\n\r\n        if (this._isDirty) {\r\n            this._currentMeasure.transformToRef(this._transformMatrix, this._prevCurrentMeasureTransformedIntoGlobalSpace);\r\n        }\r\n\r\n        let rebuildCount = 0;\r\n\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        this._beforeLayout();\r\n\r\n        do {\r\n            let computedWidth = -1;\r\n            let computedHeight = -1;\r\n            this._rebuildLayout = false;\r\n            this._processMeasures(parentMeasure, context);\r\n\r\n            if (!this._isClipped) {\r\n                for (const child of this._children) {\r\n                    child._tempParentMeasure.copyFrom(this._measureForChildren);\r\n\r\n                    if (child._layout(this._measureForChildren, context)) {\r\n                        if (child.isVisible && !child.notRenderable) {\r\n                            if (this.adaptWidthToChildren && child._width.isPixel) {\r\n                                computedWidth = Math.max(computedWidth, child._currentMeasure.width + child._paddingLeftInPixels + child._paddingRightInPixels);\r\n                            }\r\n                            if (this.adaptHeightToChildren && child._height.isPixel) {\r\n                                computedHeight = Math.max(computedHeight, child._currentMeasure.height + child._paddingTopInPixels + child._paddingBottomInPixels);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (this.adaptWidthToChildren && computedWidth >= 0) {\r\n                    computedWidth += this.paddingLeftInPixels + this.paddingRightInPixels;\r\n                    if (this.width !== computedWidth + \"px\") {\r\n                        this.parent?._markAsDirty();\r\n                        this.width = computedWidth + \"px\";\r\n                        this._width.ignoreAdaptiveScaling = true;\r\n                        this._rebuildLayout = true;\r\n                    }\r\n                }\r\n                if (this.adaptHeightToChildren && computedHeight >= 0) {\r\n                    computedHeight += this.paddingTopInPixels + this.paddingBottomInPixels;\r\n                    if (this.height !== computedHeight + \"px\") {\r\n                        this.parent?._markAsDirty();\r\n                        this.height = computedHeight + \"px\";\r\n                        this._height.ignoreAdaptiveScaling = true;\r\n                        this._rebuildLayout = true;\r\n                    }\r\n                }\r\n\r\n                this._postMeasure();\r\n            }\r\n            rebuildCount++;\r\n        } while (this._rebuildLayout && rebuildCount < this.maxLayoutCycle);\r\n\r\n        if (rebuildCount >= 3 && this.logLayoutCycleErrors) {\r\n            Logger.Error(`Layout cycle detected in GUI (Container name=${this.name}, uniqueId=${this.uniqueId})`);\r\n        }\r\n\r\n        context.restore();\r\n\r\n        if (this._isDirty) {\r\n            this.invalidateRect();\r\n\r\n            this._isDirty = false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    protected _postMeasure() {\r\n        // Do nothing by default\r\n    }\r\n\r\n    private _inverseTransformMatrix = Matrix2D.Identity();\r\n    private _inverseMeasure = new Measure(0, 0, 0, 0);\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _draw(context: ICanvasRenderingContext, invalidatedRectangle?: Measure): void {\r\n        const renderToIntermediateTextureThisDraw = this._renderToIntermediateTexture && this._intermediateTexture;\r\n        const contextToDrawTo = renderToIntermediateTextureThisDraw ? (<DynamicTexture>this._intermediateTexture).getContext() : context;\r\n\r\n        if (renderToIntermediateTextureThisDraw) {\r\n            contextToDrawTo.save();\r\n            contextToDrawTo.translate(-this._currentMeasure.left, -this._currentMeasure.top);\r\n            if (invalidatedRectangle) {\r\n                this._transformMatrix.invertToRef(this._inverseTransformMatrix);\r\n                invalidatedRectangle.transformToRef(this._inverseTransformMatrix, this._inverseMeasure);\r\n                contextToDrawTo.clearRect(this._inverseMeasure.left, this._inverseMeasure.top, this._inverseMeasure.width, this._inverseMeasure.height);\r\n            } else {\r\n                contextToDrawTo.clearRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n        }\r\n\r\n        this._localDraw(contextToDrawTo);\r\n\r\n        context.save();\r\n\r\n        if (this.clipChildren) {\r\n            this._clipForChildren(contextToDrawTo);\r\n        }\r\n\r\n        for (const child of this._children) {\r\n            // Only redraw parts of the screen that are invalidated\r\n            if (invalidatedRectangle) {\r\n                if (!child._intersectsRect(invalidatedRectangle)) {\r\n                    continue;\r\n                }\r\n            }\r\n            child._render(contextToDrawTo, invalidatedRectangle);\r\n        }\r\n\r\n        if (renderToIntermediateTextureThisDraw) {\r\n            contextToDrawTo.restore();\r\n            context.save();\r\n            context.globalAlpha = this.alpha;\r\n            context.drawImage(contextToDrawTo.canvas, this._currentMeasure.left, this._currentMeasure.top);\r\n            context.restore();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    public getDescendantsToRef(results: Control[], directDescendantsOnly: boolean = false, predicate?: (control: Control) => boolean): void {\r\n        if (!this.children) {\r\n            return;\r\n        }\r\n\r\n        for (let index = 0; index < this.children.length; index++) {\r\n            const item = this.children[index];\r\n\r\n            if (!predicate || predicate(item)) {\r\n                results.push(item);\r\n            }\r\n\r\n            if (!directDescendantsOnly) {\r\n                item.getDescendantsToRef(results, false, predicate);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _processPicking(x: number, y: number, pi: Nullable<PointerInfoBase>, type: number, pointerId: number, buttonIndex: number, deltaX?: number, deltaY?: number): boolean {\r\n        if (!this._isEnabled || !this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        // checks if the picking position is within the container\r\n        const contains = super.contains(x, y);\r\n\r\n        // if clipChildren is off, we should still pass picking events to children even if we don't contain the pointer\r\n        if (!contains && this.clipChildren) {\r\n            return false;\r\n        }\r\n\r\n        // Checking backwards to pick closest first\r\n        for (let index = this._children.length - 1; index >= 0; index--) {\r\n            const child = this._children[index];\r\n            if (child._processPicking(x, y, pi, type, pointerId, buttonIndex, deltaX, deltaY)) {\r\n                if (child.hoverCursor) {\r\n                    this._host._changeCursor(child.hoverCursor);\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!contains) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.isHitTestVisible) {\r\n            return false;\r\n        }\r\n\r\n        return this._processObservables(type, x, y, pi, pointerId, buttonIndex, deltaX, deltaY);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.copyFrom(this._currentMeasure);\r\n    }\r\n\r\n    /**\r\n     * Serializes the current control\r\n     * @param serializationObject defined the JSON serialized object\r\n     */\r\n    public serialize(serializationObject: any) {\r\n        super.serialize(serializationObject);\r\n\r\n        if (this.backgroundGradient) {\r\n            serializationObject.backgroundGradient = {};\r\n            this.backgroundGradient.serialize(serializationObject.backgroundGradient);\r\n        }\r\n\r\n        if (!this.children.length) {\r\n            return;\r\n        }\r\n\r\n        serializationObject.children = [];\r\n\r\n        for (const child of this.children) {\r\n            const childSerializationObject = {};\r\n            child.serialize(childSerializationObject);\r\n            serializationObject.children.push(childSerializationObject);\r\n        }\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (let index = this.children.length - 1; index >= 0; index--) {\r\n            this.children[index].dispose();\r\n        }\r\n        this._intermediateTexture?.dispose();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _parseFromContent(serializedObject: any, host: AdvancedDynamicTexture) {\r\n        super._parseFromContent(serializedObject, host);\r\n        this._link(host);\r\n\r\n        // Gradient\r\n        if (serializedObject.backgroundGradient) {\r\n            const className = Tools.Instantiate(\"BABYLON.GUI.\" + serializedObject.backgroundGradient.className);\r\n            this._backgroundGradient = new className();\r\n            this._backgroundGradient?.parse(serializedObject.backgroundGradient);\r\n        }\r\n\r\n        if (!serializedObject.children) {\r\n            return;\r\n        }\r\n\r\n        for (const childData of serializedObject.children) {\r\n            this.addControl(Control.Parse(childData, host));\r\n        }\r\n    }\r\n\r\n    public isReady(): boolean {\r\n        for (const child of this.children) {\r\n            if (!child.isReady()) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Container\", Container);\r\n","import { Container } from \"./container\";\r\nimport type { Measure } from \"../measure\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/** Class used to create rectangle container */\r\nexport class Rectangle extends Container {\r\n    private _thickness = 1;\r\n    private _cornerRadius = [0, 0, 0, 0];\r\n    private _cachedRadius = [0, 0, 0, 0];\r\n\r\n    /** Gets or sets border thickness */\r\n    @serialize()\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the corner radius of all angles */\r\n    @serialize()\r\n    public get cornerRadius(): number {\r\n        return this._cornerRadius[0];\r\n    }\r\n\r\n    public set cornerRadius(value: number) {\r\n        if (value < 0) {\r\n            value = 0;\r\n        }\r\n\r\n        if (this._cornerRadius[0] === value && this._cornerRadius[1] === value && this._cornerRadius[2] === value && this._cornerRadius[3] === value) {\r\n            return;\r\n        }\r\n\r\n        this._cornerRadius[0] = this._cornerRadius[1] = this._cornerRadius[2] = this._cornerRadius[3] = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the corner radius top left angle */\r\n    @serialize()\r\n    public get cornerRadiusX(): number {\r\n        return this._cornerRadius[0];\r\n    }\r\n\r\n    public set cornerRadiusX(value: number) {\r\n        if (this._cornerRadius[0] === value) {\r\n            return;\r\n        }\r\n        this._cornerRadius[0] = value;\r\n    }\r\n\r\n    /** Gets or sets the corner radius top right angle */\r\n    @serialize()\r\n    public get cornerRadiusY(): number {\r\n        return this._cornerRadius[1];\r\n    }\r\n\r\n    public set cornerRadiusY(value: number) {\r\n        if (this._cornerRadius[1] === value) {\r\n            return;\r\n        }\r\n        this._cornerRadius[1] = value;\r\n    }\r\n\r\n    /** Gets or sets the corner radius bottom left angle */\r\n    @serialize()\r\n    public get cornerRadiusZ(): number {\r\n        return this._cornerRadius[2];\r\n    }\r\n\r\n    public set cornerRadiusZ(value: number) {\r\n        if (this._cornerRadius[2] === value) {\r\n            return;\r\n        }\r\n        this._cornerRadius[2] = value;\r\n    }\r\n\r\n    /** Gets or sets the corner radius bottom right angle */\r\n    @serialize()\r\n    public get cornerRadiusW(): number {\r\n        return this._cornerRadius[3];\r\n    }\r\n\r\n    public set cornerRadiusW(value: number) {\r\n        if (this._cornerRadius[3] === value) {\r\n            return;\r\n        }\r\n        this._cornerRadius[3] = value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Rectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Rectangle\";\r\n    }\r\n\r\n    /** @internal */\r\n    protected _computeAdditionalOffsetX() {\r\n        let additionalWidth = 0;\r\n        if (this._cornerRadius[0] !== 0 || this._cornerRadius[1] !== 0 || this._cornerRadius[2] !== 0 || this._cornerRadius[3] !== 0) {\r\n            // Take in account the aliasing\r\n            additionalWidth += 1;\r\n        }\r\n        if (this.thickness) {\r\n            additionalWidth += this.thickness / 2;\r\n        }\r\n        return additionalWidth;\r\n    }\r\n\r\n    /** @internal */\r\n    protected _computeAdditionalOffsetY() {\r\n        let additionalHeight = 0;\r\n        if (this._cornerRadius[0] !== 0 || this._cornerRadius[1] !== 0 || this._cornerRadius[2] !== 0 || this._cornerRadius[3] !== 0) {\r\n            // Take in account the aliasing\r\n            additionalHeight += 1;\r\n        }\r\n        if (this.thickness) {\r\n            additionalHeight += this.thickness / 2;\r\n        }\r\n        return additionalHeight;\r\n    }\r\n\r\n    protected _getRectangleFill(context: ICanvasRenderingContext) {\r\n        return this._getBackgroundColor(context);\r\n    }\r\n\r\n    protected _localDraw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this._background || this._backgroundGradient) {\r\n            context.fillStyle = this._getRectangleFill(context);\r\n\r\n            if (this._cornerRadius[0] !== 0 || this._cornerRadius[1] !== 0 || this._cornerRadius[2] !== 0 || this._cornerRadius[3] !== 0) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.fill();\r\n            } else {\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n        }\r\n\r\n        if (this._thickness) {\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (this.color || this.gradient) {\r\n                context.strokeStyle = this.gradient ? this.gradient.getCanvasGradient(context) : this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            if (this._cornerRadius[0] !== 0 || this._cornerRadius[1] !== 0 || this._cornerRadius[2] !== 0 || this._cornerRadius[3] !== 0) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.stroke();\r\n            } else {\r\n                context.strokeRect(\r\n                    this._currentMeasure.left + this._thickness / 2,\r\n                    this._currentMeasure.top + this._thickness / 2,\r\n                    this._currentMeasure.width - this._thickness,\r\n                    this._currentMeasure.height - this._thickness\r\n                );\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    private _drawRoundedRect(context: ICanvasRenderingContext, offset: number = 0): void {\r\n        const x = this._currentMeasure.left + offset;\r\n        const y = this._currentMeasure.top + offset;\r\n        const width = this._currentMeasure.width - offset * 2;\r\n        const height = this._currentMeasure.height - offset * 2;\r\n\r\n        for (let index = 0; index < this._cornerRadius.length; index++) {\r\n            this._cachedRadius[index] = Math.abs(Math.min(height / 2, Math.min(width / 2, this._cornerRadius[index])));\r\n        }\r\n\r\n        context.beginPath();\r\n        context.moveTo(x + this._cachedRadius[0], y);\r\n        context.lineTo(x + width - this._cachedRadius[1], y);\r\n        context.arc(x + width - this._cachedRadius[1], y + this._cachedRadius[1], this._cachedRadius[1], (3 * Math.PI) / 2, Math.PI * 2);\r\n        context.lineTo(x + width, y + height - this._cachedRadius[2]);\r\n        context.arc(x + width - this._cachedRadius[2], y + height - this._cachedRadius[2], this._cachedRadius[2], 0, Math.PI / 2);\r\n        context.lineTo(x + this._cachedRadius[3], y + height);\r\n        context.arc(x + this._cachedRadius[3], y + height - this._cachedRadius[3], this._cachedRadius[3], Math.PI / 2, Math.PI);\r\n        context.lineTo(x, y + this._cachedRadius[0]);\r\n        context.arc(x + this._cachedRadius[0], y + this._cachedRadius[0], this._cachedRadius[0], Math.PI, (3 * Math.PI) / 2);\r\n        context.closePath();\r\n    }\r\n\r\n    protected _clipForChildren(context: ICanvasRenderingContext) {\r\n        if (this._cornerRadius[0] !== 0 || this._cornerRadius[1] !== 0 || this._cornerRadius[2] !== 0 || this._cornerRadius[3] !== 0) {\r\n            this._drawRoundedRect(context, this._thickness);\r\n            context.clip();\r\n        }\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Rectangle\", Rectangle);\r\n","import type { Nullable } from \"core/types\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport { Tools } from \"core/Misc/tools\";\r\n\r\nimport { Control } from \"./control\";\r\nimport type { Measure } from \"../measure\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvas, ICanvasRenderingContext, IImage } from \"core/Engines/ICanvas\";\r\nimport { EngineStore } from \"core/Engines/engineStore\";\r\n\r\n/**\r\n * Class used to create 2D images\r\n */\r\nexport class Image extends Control {\r\n    /**\r\n     *  Specifies an alternate text for the image, if the image for some reason cannot be displayed.\r\n     */\r\n    public alt?: string;\r\n\r\n    private _workingCanvas: Nullable<ICanvas> = null;\r\n\r\n    private _domImage: IImage;\r\n    private _imageWidth: number;\r\n    private _imageHeight: number;\r\n    private _loaded = false;\r\n    private _stretch = Image.STRETCH_FILL;\r\n    private _source: Nullable<string>;\r\n    private _autoScale = false;\r\n\r\n    private _sourceLeft = 0;\r\n    private _sourceTop = 0;\r\n    private _sourceWidth = 0;\r\n    private _sourceHeight = 0;\r\n    private _svgAttributesComputationCompleted: boolean = false;\r\n    private _isSVG: boolean = false;\r\n\r\n    private _cellWidth: number = 0;\r\n    private _cellHeight: number = 0;\r\n    private _cellId: number = -1;\r\n\r\n    private _sliceLeft: number;\r\n    private _sliceRight: number;\r\n    private _sliceTop: number;\r\n    private _sliceBottom: number;\r\n\r\n    private _populateNinePatchSlicesFromImage = false;\r\n\r\n    private _detectPointerOnOpaqueOnly: boolean;\r\n\r\n    private _imageDataCache: {\r\n        data: Uint8ClampedArray | null;\r\n        key: string;\r\n    } = { data: null, key: \"\" };\r\n\r\n    /**\r\n     * Cache of images to avoid loading the same image multiple times\r\n     */\r\n    public static SourceImgCache = new Map<string, { img: IImage; timesUsed: number; loaded: boolean; waitingForLoadCallback: Array<() => void> }>();\r\n\r\n    /**\r\n     * Observable notified when the content is loaded\r\n     */\r\n    public onImageLoadedObservable = new Observable<Image>();\r\n\r\n    /**\r\n     * Observable notified when _sourceLeft, _sourceTop, _sourceWidth and _sourceHeight are computed\r\n     */\r\n    public onSVGAttributesComputedObservable = new Observable<Image>();\r\n\r\n    /**\r\n     * Gets or sets the referrer policy to apply on the img element load request.\r\n     * You should set referrerPolicy before set the source of the image if you want to ensure the header will be present on the xhr loading request\r\n     */\r\n    public referrerPolicy: Nullable<ReferrerPolicy>;\r\n\r\n    /**\r\n     * Gets a boolean indicating that the content is loaded\r\n     */\r\n    public get isLoaded(): boolean {\r\n        return this._loaded;\r\n    }\r\n\r\n    public isReady(): boolean {\r\n        return this.isLoaded;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if pointers should only be validated on pixels with alpha > 0.\r\n     * Beware using this as this will consume more memory as the image has to be stored twice\r\n     */\r\n    @serialize()\r\n    public get detectPointerOnOpaqueOnly(): boolean {\r\n        return this._detectPointerOnOpaqueOnly;\r\n    }\r\n\r\n    public set detectPointerOnOpaqueOnly(value: boolean) {\r\n        if (this._detectPointerOnOpaqueOnly === value) {\r\n            return;\r\n        }\r\n\r\n        this._detectPointerOnOpaqueOnly = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the left value for slicing (9-patch)\r\n     */\r\n    @serialize()\r\n    public get sliceLeft(): number {\r\n        return this._sliceLeft;\r\n    }\r\n\r\n    public set sliceLeft(value: number) {\r\n        if (this._sliceLeft === value) {\r\n            return;\r\n        }\r\n\r\n        this._sliceLeft = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the right value for slicing (9-patch)\r\n     */\r\n    @serialize()\r\n    public get sliceRight(): number {\r\n        return this._sliceRight;\r\n    }\r\n\r\n    public set sliceRight(value: number) {\r\n        if (this._sliceRight === value) {\r\n            return;\r\n        }\r\n\r\n        this._sliceRight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the top value for slicing (9-patch)\r\n     */\r\n    @serialize()\r\n    public get sliceTop(): number {\r\n        return this._sliceTop;\r\n    }\r\n\r\n    public set sliceTop(value: number) {\r\n        if (this._sliceTop === value) {\r\n            return;\r\n        }\r\n\r\n        this._sliceTop = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the bottom value for slicing (9-patch)\r\n     */\r\n    @serialize()\r\n    public get sliceBottom(): number {\r\n        return this._sliceBottom;\r\n    }\r\n\r\n    public set sliceBottom(value: number) {\r\n        if (this._sliceBottom === value) {\r\n            return;\r\n        }\r\n\r\n        this._sliceBottom = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the left coordinate in the source image\r\n     */\r\n    @serialize()\r\n    public get sourceLeft(): number {\r\n        return this._sourceLeft;\r\n    }\r\n\r\n    public set sourceLeft(value: number) {\r\n        if (this._sourceLeft === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceLeft = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the top coordinate in the source image\r\n     */\r\n    @serialize()\r\n    public get sourceTop(): number {\r\n        return this._sourceTop;\r\n    }\r\n\r\n    public set sourceTop(value: number) {\r\n        if (this._sourceTop === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceTop = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the width to capture in the source image\r\n     */\r\n    @serialize()\r\n    public get sourceWidth(): number {\r\n        return this._sourceWidth;\r\n    }\r\n\r\n    public set sourceWidth(value: number) {\r\n        if (this._sourceWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the height to capture in the source image\r\n     */\r\n    @serialize()\r\n    public get sourceHeight(): number {\r\n        return this._sourceHeight;\r\n    }\r\n\r\n    public set sourceHeight(value: number) {\r\n        if (this._sourceHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets the image width\r\n     */\r\n    public get imageWidth(): number {\r\n        return this._imageWidth;\r\n    }\r\n\r\n    /**\r\n     * Gets the image height\r\n     */\r\n    public get imageHeight(): number {\r\n        return this._imageHeight;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if nine patch slices (left, top, right, bottom) should be read from image data\r\n     */\r\n    @serialize()\r\n    public get populateNinePatchSlicesFromImage(): boolean {\r\n        return this._populateNinePatchSlicesFromImage;\r\n    }\r\n\r\n    public set populateNinePatchSlicesFromImage(value: boolean) {\r\n        if (this._populateNinePatchSlicesFromImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._populateNinePatchSlicesFromImage = value;\r\n\r\n        if (this._populateNinePatchSlicesFromImage && this._loaded) {\r\n            this._extractNinePatchSliceDataFromImage();\r\n        }\r\n    }\r\n\r\n    /** Indicates if the format of the image is SVG */\r\n    public get isSVG(): boolean {\r\n        return this._isSVG;\r\n    }\r\n\r\n    /** Gets the status of the SVG attributes computation (sourceLeft, sourceTop, sourceWidth, sourceHeight) */\r\n    public get svgAttributesComputationCompleted(): boolean {\r\n        return this._svgAttributesComputationCompleted;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the image can force its container to adapt its size\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#image\r\n     */\r\n    @serialize()\r\n    public get autoScale(): boolean {\r\n        return this._autoScale;\r\n    }\r\n\r\n    public set autoScale(value: boolean) {\r\n        if (this._autoScale === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoScale = value;\r\n\r\n        if (value && this._loaded) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the stretching mode used by the image */\r\n    @serialize()\r\n    public get stretch(): number {\r\n        return this._stretch;\r\n    }\r\n\r\n    public set stretch(value: number) {\r\n        if (this._stretch === value) {\r\n            return;\r\n        }\r\n\r\n        this._stretch = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _rotate90(n: number, preserveProperties: boolean = false): Image {\r\n        const width = this._domImage.width;\r\n        const height = this._domImage.height;\r\n\r\n        // Should abstract platform instead of using LastCreatedEngine\r\n        const engine = this._host?.getScene()?.getEngine() || EngineStore.LastCreatedEngine;\r\n        if (!engine) {\r\n            throw new Error(\"Invalid engine. Unable to create a canvas.\");\r\n        }\r\n        const canvas = engine.createCanvas(height, width);\r\n\r\n        const context = canvas.getContext(\"2d\")!;\r\n\r\n        context.translate(canvas.width / 2, canvas.height / 2);\r\n        context.rotate((n * Math.PI) / 2);\r\n\r\n        context.drawImage(this._domImage, 0, 0, width, height, -width / 2, -height / 2, width, height);\r\n\r\n        const dataUrl: string = canvas.toDataURL(\"image/jpg\");\r\n        const rotatedImage = new Image(this.name + \"rotated\", dataUrl);\r\n\r\n        if (preserveProperties) {\r\n            rotatedImage._stretch = this._stretch;\r\n            rotatedImage._autoScale = this._autoScale;\r\n            rotatedImage._cellId = this._cellId;\r\n            rotatedImage._cellWidth = n % 1 ? this._cellHeight : this._cellWidth;\r\n            rotatedImage._cellHeight = n % 1 ? this._cellWidth : this._cellHeight;\r\n        }\r\n\r\n        this._handleRotationForSVGImage(this, rotatedImage, n);\r\n\r\n        this._imageDataCache.data = null;\r\n\r\n        return rotatedImage;\r\n    }\r\n\r\n    private _handleRotationForSVGImage(srcImage: Image, dstImage: Image, n: number): void {\r\n        if (!srcImage._isSVG) {\r\n            return;\r\n        }\r\n\r\n        if (srcImage._svgAttributesComputationCompleted) {\r\n            this._rotate90SourceProperties(srcImage, dstImage, n);\r\n            this._markAsDirty();\r\n        } else {\r\n            srcImage.onSVGAttributesComputedObservable.addOnce(() => {\r\n                this._rotate90SourceProperties(srcImage, dstImage, n);\r\n                this._markAsDirty();\r\n            });\r\n        }\r\n    }\r\n\r\n    private _rotate90SourceProperties(srcImage: Image, dstImage: Image, n: number): void {\r\n        let srcLeft = srcImage.sourceLeft,\r\n            srcTop = srcImage.sourceTop,\r\n            srcWidth = srcImage.domImage.width,\r\n            srcHeight = srcImage.domImage.height;\r\n\r\n        let dstLeft = srcLeft,\r\n            dstTop = srcTop,\r\n            dstWidth = srcImage.sourceWidth,\r\n            dstHeight = srcImage.sourceHeight;\r\n\r\n        if (n != 0) {\r\n            const mult = n < 0 ? -1 : 1;\r\n            n = n % 4;\r\n            for (let i = 0; i < Math.abs(n); ++i) {\r\n                dstLeft = -(srcTop - srcHeight / 2) * mult + srcHeight / 2;\r\n                dstTop = (srcLeft - srcWidth / 2) * mult + srcWidth / 2;\r\n                [dstWidth, dstHeight] = [dstHeight, dstWidth];\r\n                if (n < 0) {\r\n                    dstTop -= dstHeight;\r\n                } else {\r\n                    dstLeft -= dstWidth;\r\n                }\r\n                srcLeft = dstLeft;\r\n                srcTop = dstTop;\r\n                [srcWidth, srcHeight] = [srcHeight, srcWidth];\r\n            }\r\n        }\r\n\r\n        dstImage.sourceLeft = dstLeft;\r\n        dstImage.sourceTop = dstTop;\r\n        dstImage.sourceWidth = dstWidth;\r\n        dstImage.sourceHeight = dstHeight;\r\n    }\r\n\r\n    private _extractNinePatchSliceDataFromImage() {\r\n        const width = this._domImage.width;\r\n        const height = this._domImage.height;\r\n\r\n        if (!this._workingCanvas) {\r\n            const engine = this._host?.getScene()?.getEngine() || EngineStore.LastCreatedEngine;\r\n            if (!engine) {\r\n                throw new Error(\"Invalid engine. Unable to create a canvas.\");\r\n            }\r\n            this._workingCanvas = engine.createCanvas(width, height);\r\n        }\r\n        const canvas = this._workingCanvas;\r\n        const context = canvas.getContext(\"2d\")!;\r\n\r\n        context.drawImage(this._domImage, 0, 0, width, height);\r\n        const imageData = context.getImageData(0, 0, width, height);\r\n\r\n        // Left and right\r\n        this._sliceLeft = -1;\r\n        this._sliceRight = -1;\r\n        for (let x = 0; x < width; x++) {\r\n            const alpha = imageData.data[x * 4 + 3];\r\n\r\n            if (alpha > 127 && this._sliceLeft === -1) {\r\n                this._sliceLeft = x;\r\n                continue;\r\n            }\r\n\r\n            if (alpha < 127 && this._sliceLeft > -1) {\r\n                this._sliceRight = x;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // top and bottom\r\n        this._sliceTop = -1;\r\n        this._sliceBottom = -1;\r\n        for (let y = 0; y < height; y++) {\r\n            const alpha = imageData.data[y * width * 4 + 3];\r\n\r\n            if (alpha > 127 && this._sliceTop === -1) {\r\n                this._sliceTop = y;\r\n                continue;\r\n            }\r\n\r\n            if (alpha < 127 && this._sliceTop > -1) {\r\n                this._sliceBottom = y;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the internal DOM image used to render the control\r\n     */\r\n    public set domImage(value: IImage) {\r\n        this._domImage = value;\r\n        this._loaded = false;\r\n        this._imageDataCache.data = null;\r\n\r\n        if (this._domImage.width) {\r\n            this._onImageLoaded();\r\n        } else {\r\n            this._domImage.onload = () => {\r\n                this._onImageLoaded();\r\n            };\r\n        }\r\n    }\r\n\r\n    public get domImage(): IImage {\r\n        return this._domImage;\r\n    }\r\n\r\n    private _onImageLoaded(): void {\r\n        this._imageDataCache.data = null;\r\n        this._imageWidth = this._domImage.width;\r\n        this._imageHeight = this._domImage.height;\r\n        this._loaded = true;\r\n\r\n        if (this._populateNinePatchSlicesFromImage) {\r\n            this._extractNinePatchSliceDataFromImage();\r\n        }\r\n\r\n        if (this._autoScale) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n\r\n        this.onImageLoadedObservable.notifyObservers(this);\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets the image source url\r\n     */\r\n    @serialize()\r\n    public get source() {\r\n        return this._source;\r\n    }\r\n\r\n    /**\r\n     * Resets the internal Image Element cache. Can reduce memory usage.\r\n     */\r\n    public static ResetImageCache() {\r\n        Image.SourceImgCache.clear();\r\n    }\r\n\r\n    private _removeCacheUsage(source: Nullable<string>) {\r\n        const value = source && Image.SourceImgCache.get(source);\r\n        if (value) {\r\n            value.timesUsed -= 1;\r\n            // Since the image isn't being used anymore, we can clean it from the cache\r\n            if (value.timesUsed === 0) {\r\n                Image.SourceImgCache.delete(source);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets image source url\r\n     */\r\n    public set source(value: Nullable<string>) {\r\n        if (this._source === value) {\r\n            return;\r\n        }\r\n\r\n        this._removeCacheUsage(this._source);\r\n\r\n        this._loaded = false;\r\n        this._source = value;\r\n        this._imageDataCache.data = null;\r\n\r\n        if (value) {\r\n            value = this._svgCheck(value);\r\n        }\r\n\r\n        // Should abstract platform instead of using LastCreatedEngine\r\n        const engine = this._host?.getScene()?.getEngine() || EngineStore.LastCreatedEngine;\r\n        if (!engine) {\r\n            throw new Error(\"Invalid engine. Unable to create a canvas.\");\r\n        }\r\n        if (value && Image.SourceImgCache.has(value)) {\r\n            const cachedData = Image.SourceImgCache.get(value)!;\r\n            this._domImage = cachedData.img;\r\n            cachedData.timesUsed += 1;\r\n            if (cachedData.loaded) {\r\n                this._onImageLoaded();\r\n            } else {\r\n                cachedData.waitingForLoadCallback.push(this._onImageLoaded.bind(this));\r\n            }\r\n            return;\r\n        }\r\n        this._domImage = engine.createCanvasImage();\r\n        if (value) {\r\n            Image.SourceImgCache.set(value, { img: this._domImage, timesUsed: 1, loaded: false, waitingForLoadCallback: [this._onImageLoaded.bind(this)] });\r\n        }\r\n\r\n        this._domImage.onload = () => {\r\n            if (value) {\r\n                const cachedData = Image.SourceImgCache.get(value);\r\n                if (cachedData) {\r\n                    cachedData.loaded = true;\r\n                    for (const waitingCallback of cachedData.waitingForLoadCallback) {\r\n                        waitingCallback();\r\n                    }\r\n                    cachedData.waitingForLoadCallback.length = 0;\r\n                    return;\r\n                }\r\n            }\r\n            this._onImageLoaded();\r\n        };\r\n        if (value) {\r\n            Tools.SetCorsBehavior(value, this._domImage);\r\n            Tools.SetReferrerPolicyBehavior(this.referrerPolicy, this._domImage);\r\n            this._domImage.src = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks for svg document with icon id present\r\n     * @param value\r\n     */\r\n    private _svgCheck(value: string): string {\r\n        if (window.SVGSVGElement && value.search(/.svg#/gi) !== -1 && value.indexOf(\"#\") === value.lastIndexOf(\"#\")) {\r\n            this._isSVG = true;\r\n            const svgsrc = value.split(\"#\")[0];\r\n            const elemid = value.split(\"#\")[1];\r\n            // check if object alr exist in document\r\n            const svgExist = <HTMLObjectElement>document.body.querySelector('object[data=\"' + svgsrc + '\"]');\r\n            if (svgExist) {\r\n                const svgDoc = svgExist.contentDocument;\r\n                // get viewbox width and height, get svg document width and height in px\r\n                if (svgDoc && svgDoc.documentElement) {\r\n                    const vb = svgDoc.documentElement.getAttribute(\"viewBox\");\r\n                    const docwidth = Number(svgDoc.documentElement.getAttribute(\"width\"));\r\n                    const docheight = Number(svgDoc.documentElement.getAttribute(\"height\"));\r\n                    const elem = <SVGGraphicsElement>(<unknown>svgDoc.getElementById(elemid));\r\n                    if (elem && vb && docwidth && docheight) {\r\n                        this._getSVGAttribs(svgExist, elemid);\r\n                        return value;\r\n                    }\r\n                }\r\n\r\n                // wait for object to load\r\n                svgExist.addEventListener(\"load\", () => {\r\n                    this._getSVGAttribs(svgExist, elemid);\r\n                });\r\n            } else {\r\n                // create document object\r\n                const svgImage = document.createElement(\"object\");\r\n                svgImage.data = svgsrc;\r\n                svgImage.type = \"image/svg+xml\";\r\n                svgImage.width = \"0%\";\r\n                svgImage.height = \"0%\";\r\n                document.body.appendChild(svgImage);\r\n                // when the object has loaded, get the element attribs\r\n                svgImage.onload = () => {\r\n                    const svgobj = <HTMLObjectElement>document.body.querySelector('object[data=\"' + svgsrc + '\"]');\r\n                    if (svgobj) {\r\n                        this._getSVGAttribs(svgobj, elemid);\r\n                    }\r\n                };\r\n            }\r\n            return svgsrc;\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets sourceLeft, sourceTop, sourceWidth, sourceHeight automatically\r\n     * given external svg file and icon id\r\n     * @param svgsrc\r\n     * @param elemid\r\n     */\r\n    private _getSVGAttribs(svgsrc: HTMLObjectElement, elemid: string) {\r\n        const svgDoc = svgsrc.contentDocument;\r\n        // get viewbox width and height, get svg document width and height in px\r\n        if (svgDoc && svgDoc.documentElement) {\r\n            const vb = svgDoc.documentElement.getAttribute(\"viewBox\");\r\n            const docwidth = Number(svgDoc.documentElement.getAttribute(\"width\"));\r\n            const docheight = Number(svgDoc.documentElement.getAttribute(\"height\"));\r\n            // get element bbox and matrix transform\r\n            const elem = svgDoc.getElementById(elemid) as Nullable<SVGGraphicsElement>;\r\n            if (vb && docwidth && docheight && elem) {\r\n                const vb_width = Number(vb.split(\" \")[2]);\r\n                const vb_height = Number(vb.split(\" \")[3]);\r\n                const elem_bbox = elem.getBBox();\r\n                let elem_matrix_a = 1;\r\n                let elem_matrix_d = 1;\r\n                let elem_matrix_e = 0;\r\n                let elem_matrix_f = 0;\r\n                const mainMatrix = elem.transform.baseVal.consolidate()!.matrix;\r\n                if (elem.transform && elem.transform.baseVal.consolidate()) {\r\n                    elem_matrix_a = mainMatrix.a;\r\n                    elem_matrix_d = mainMatrix.d;\r\n                    elem_matrix_e = mainMatrix.e;\r\n                    elem_matrix_f = mainMatrix.f;\r\n                }\r\n\r\n                // compute source coordinates and dimensions\r\n                this.sourceLeft = ((elem_matrix_a * elem_bbox.x + elem_matrix_e) * docwidth) / vb_width;\r\n                this.sourceTop = ((elem_matrix_d * elem_bbox.y + elem_matrix_f) * docheight) / vb_height;\r\n                this.sourceWidth = elem_bbox.width * elem_matrix_a * (docwidth / vb_width);\r\n                this.sourceHeight = elem_bbox.height * elem_matrix_d * (docheight / vb_height);\r\n                this._svgAttributesComputationCompleted = true;\r\n                this.onSVGAttributesComputedObservable.notifyObservers(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell width to use when animation sheet is enabled\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#image\r\n     */\r\n    @serialize()\r\n    get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n    set cellWidth(value: number) {\r\n        if (this._cellWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell height to use when animation sheet is enabled\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#image\r\n     */\r\n    @serialize()\r\n    get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n    set cellHeight(value: number) {\r\n        if (this._cellHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell id to use (this will turn on the animation sheet mode)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#image\r\n     */\r\n    @serialize()\r\n    get cellId(): number {\r\n        return this._cellId;\r\n    }\r\n    set cellId(value: number) {\r\n        if (this._cellId === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellId = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Image\r\n     * @param name defines the control name\r\n     * @param url defines the image url\r\n     */\r\n    constructor(public name?: string, url: Nullable<string> = null) {\r\n        super(name);\r\n        this.source = url;\r\n    }\r\n\r\n    /**\r\n     * Tests if a given coordinates belong to the current control\r\n     * @param x defines x coordinate to test\r\n     * @param y defines y coordinate to test\r\n     * @returns true if the coordinates are inside the control\r\n     */\r\n    public contains(x: number, y: number): boolean {\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this._detectPointerOnOpaqueOnly || !this._workingCanvas) {\r\n            return true;\r\n        }\r\n\r\n        const width = this._currentMeasure.width | 0;\r\n        const height = this._currentMeasure.height | 0;\r\n        const key = width + \"_\" + height;\r\n\r\n        let imageData = this._imageDataCache.data;\r\n\r\n        if (!imageData || this._imageDataCache.key !== key) {\r\n            const canvas = this._workingCanvas;\r\n            const context = canvas.getContext(\"2d\")!;\r\n\r\n            this._imageDataCache.data = imageData = context.getImageData(0, 0, width, height).data;\r\n            this._imageDataCache.key = key;\r\n        }\r\n\r\n        x = (x - this._currentMeasure.left) | 0;\r\n        y = (y - this._currentMeasure.top) | 0;\r\n\r\n        const pickedPixel = imageData[(x + y * width) * 4 + 3];\r\n\r\n        return pickedPixel > 0;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Image\";\r\n    }\r\n\r\n    /** Force the control to synchronize with its content */\r\n    public synchronizeSizeWithContent() {\r\n        if (!this._loaded) {\r\n            return;\r\n        }\r\n\r\n        this.width = this._domImage.width + \"px\";\r\n        this.height = this._domImage.height + \"px\";\r\n    }\r\n\r\n    protected _processMeasures(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        if (this._loaded) {\r\n            switch (this._stretch) {\r\n                case Image.STRETCH_NONE:\r\n                    break;\r\n                case Image.STRETCH_FILL:\r\n                    break;\r\n                case Image.STRETCH_UNIFORM:\r\n                    break;\r\n                case Image.STRETCH_NINE_PATCH:\r\n                    break;\r\n                case Image.STRETCH_EXTEND:\r\n                    if (this._autoScale) {\r\n                        this.synchronizeSizeWithContent();\r\n                    }\r\n                    if (this.parent && this.parent.parent) {\r\n                        // Will update root size if root is not the top root\r\n                        this.parent.adaptWidthToChildren = true;\r\n                        this.parent.adaptHeightToChildren = true;\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        super._processMeasures(parentMeasure, context);\r\n    }\r\n\r\n    private _prepareWorkingCanvasForOpaqueDetection() {\r\n        if (!this._detectPointerOnOpaqueOnly) {\r\n            return;\r\n        }\r\n\r\n        const width = this._currentMeasure.width;\r\n        const height = this._currentMeasure.height;\r\n\r\n        if (!this._workingCanvas) {\r\n            const engine = this._host?.getScene()?.getEngine() || EngineStore.LastCreatedEngine;\r\n            if (!engine) {\r\n                throw new Error(\"Invalid engine. Unable to create a canvas.\");\r\n            }\r\n            this._workingCanvas = engine.createCanvas(width, height);\r\n        }\r\n        const canvas = this._workingCanvas;\r\n\r\n        const context = canvas.getContext(\"2d\")!;\r\n\r\n        context.clearRect(0, 0, width, height);\r\n    }\r\n\r\n    private _drawImage(context: ICanvasRenderingContext, sx: number, sy: number, sw: number, sh: number, tx: number, ty: number, tw: number, th: number) {\r\n        context.drawImage(this._domImage, sx, sy, sw, sh, tx, ty, tw, th);\r\n\r\n        if (!this._detectPointerOnOpaqueOnly) {\r\n            return;\r\n        }\r\n\r\n        const canvas = this._workingCanvas!;\r\n        context = canvas.getContext(\"2d\")!;\r\n\r\n        context.drawImage(this._domImage, sx, sy, sw, sh, tx - this._currentMeasure.left, ty - this._currentMeasure.top, tw, th);\r\n    }\r\n\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        let x, y, width, height;\r\n        if (this.cellId == -1) {\r\n            x = this._sourceLeft;\r\n            y = this._sourceTop;\r\n\r\n            width = this._sourceWidth ? this._sourceWidth : this._imageWidth;\r\n            height = this._sourceHeight ? this._sourceHeight : this._imageHeight;\r\n        } else {\r\n            const rowCount = this._domImage.naturalWidth / this.cellWidth;\r\n            const column = (this.cellId / rowCount) >> 0;\r\n            const row = this.cellId % rowCount;\r\n\r\n            x = this.cellWidth * row;\r\n            y = this.cellHeight * column;\r\n            width = this.cellWidth;\r\n            height = this.cellHeight;\r\n        }\r\n\r\n        this._prepareWorkingCanvasForOpaqueDetection();\r\n\r\n        this._applyStates(context);\r\n        if (this._loaded) {\r\n            switch (this._stretch) {\r\n                case Image.STRETCH_NONE:\r\n                    this._drawImage(context, x, y, width, height, this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                    break;\r\n                case Image.STRETCH_FILL:\r\n                    this._drawImage(context, x, y, width, height, this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                    break;\r\n                case Image.STRETCH_UNIFORM: {\r\n                    const hRatio = this._currentMeasure.width / width;\r\n                    const vRatio = this._currentMeasure.height / height;\r\n                    const ratio = Math.min(hRatio, vRatio);\r\n                    const centerX = (this._currentMeasure.width - width * ratio) / 2;\r\n                    const centerY = (this._currentMeasure.height - height * ratio) / 2;\r\n\r\n                    this._drawImage(context, x, y, width, height, this._currentMeasure.left + centerX, this._currentMeasure.top + centerY, width * ratio, height * ratio);\r\n                    break;\r\n                }\r\n                case Image.STRETCH_EXTEND:\r\n                    this._drawImage(context, x, y, width, height, this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                    break;\r\n                case Image.STRETCH_NINE_PATCH:\r\n                    this._renderNinePatch(context);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    private _renderNinePatch(context: ICanvasRenderingContext): void {\r\n        const leftWidth = this._sliceLeft;\r\n        const topHeight = this._sliceTop;\r\n        const bottomHeight = this._imageHeight - this._sliceBottom;\r\n        const rightWidth = this._imageWidth - this._sliceRight;\r\n        const centerWidth = this._sliceRight - this._sliceLeft;\r\n        const centerHeight = this._sliceBottom - this._sliceTop;\r\n        const targetCenterWidth = this._currentMeasure.width - rightWidth - leftWidth + 2;\r\n        const targetCenterHeight = this._currentMeasure.height - bottomHeight - topHeight + 2;\r\n        const centerLeftOffset = this._currentMeasure.left + leftWidth - 1;\r\n        const centerTopOffset = this._currentMeasure.top + topHeight - 1;\r\n        const rightOffset = this._currentMeasure.left + this._currentMeasure.width - rightWidth;\r\n        const bottomOffset = this._currentMeasure.top + this._currentMeasure.height - bottomHeight;\r\n\r\n        //Top Left\r\n        this._drawImage(context, 0, 0, leftWidth, topHeight, this._currentMeasure.left, this._currentMeasure.top, leftWidth, topHeight);\r\n        //Top\r\n        context.clearRect(centerLeftOffset, this._currentMeasure.top, targetCenterWidth, topHeight);\r\n        this._drawImage(context, this._sliceLeft, 0, centerWidth, topHeight, centerLeftOffset, this._currentMeasure.top, targetCenterWidth, topHeight);\r\n        //Top Right\r\n        context.clearRect(rightOffset, this._currentMeasure.top, rightWidth, topHeight);\r\n        this._drawImage(context, this._sliceRight, 0, rightWidth, topHeight, rightOffset, this._currentMeasure.top, rightWidth, topHeight);\r\n        //Left\r\n        context.clearRect(this._currentMeasure.left, centerTopOffset, leftWidth, targetCenterHeight);\r\n        this._drawImage(context, 0, this._sliceTop, leftWidth, centerHeight, this._currentMeasure.left, centerTopOffset, leftWidth, targetCenterHeight);\r\n        // Center\r\n        context.clearRect(centerLeftOffset, centerTopOffset, targetCenterWidth, targetCenterHeight);\r\n        this._drawImage(context, this._sliceLeft, this._sliceTop, centerWidth, centerHeight, centerLeftOffset, centerTopOffset, targetCenterWidth, targetCenterHeight);\r\n        //Right\r\n        context.clearRect(rightOffset, centerTopOffset, rightWidth, targetCenterHeight);\r\n        this._drawImage(context, this._sliceRight, this._sliceTop, rightWidth, centerHeight, rightOffset, centerTopOffset, rightWidth, targetCenterHeight);\r\n        //Bottom Left\r\n        context.clearRect(this._currentMeasure.left, bottomOffset, leftWidth, bottomHeight);\r\n        this._drawImage(context, 0, this._sliceBottom, leftWidth, bottomHeight, this._currentMeasure.left, bottomOffset, leftWidth, bottomHeight);\r\n        //Bottom\r\n        context.clearRect(centerLeftOffset, bottomOffset, targetCenterWidth, bottomHeight);\r\n        this._drawImage(context, this.sliceLeft, this._sliceBottom, centerWidth, bottomHeight, centerLeftOffset, bottomOffset, targetCenterWidth, bottomHeight);\r\n        //Bottom Right\r\n        context.clearRect(rightOffset, bottomOffset, rightWidth, bottomHeight);\r\n        this._drawImage(context, this._sliceRight, this._sliceBottom, rightWidth, bottomHeight, rightOffset, bottomOffset, rightWidth, bottomHeight);\r\n    }\r\n\r\n    public dispose() {\r\n        super.dispose();\r\n        this.onImageLoadedObservable.clear();\r\n        this.onSVGAttributesComputedObservable.clear();\r\n        this._removeCacheUsage(this._source);\r\n    }\r\n\r\n    // Static\r\n    /** STRETCH_NONE */\r\n    public static readonly STRETCH_NONE = 0;\r\n    /** STRETCH_FILL */\r\n    public static readonly STRETCH_FILL = 1;\r\n    /** STRETCH_UNIFORM */\r\n    public static readonly STRETCH_UNIFORM = 2;\r\n    /** STRETCH_EXTEND */\r\n    public static readonly STRETCH_EXTEND = 3;\r\n    /** NINE_PATCH */\r\n    public static readonly STRETCH_NINE_PATCH = 4;\r\n}\r\nRegisterClass(\"BABYLON.GUI.Image\", Image);\r\n","import type { Nullable } from \"core/types\";\r\nimport type { Vector2 } from \"core/Maths/math.vector\";\r\n\r\nimport { Rectangle } from \"./rectangle\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Image } from \"./image\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport type { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/**\r\n * Class used to create 2D buttons\r\n */\r\nexport class Button extends Rectangle {\r\n    /**\r\n     * Function called to generate a pointer enter animation\r\n     */\r\n    public pointerEnterAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer out animation\r\n     */\r\n    public pointerOutAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer down animation\r\n     */\r\n    public pointerDownAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer up animation\r\n     */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the button will let internal controls handle picking instead of doing it directly using its bounding info\r\n     */\r\n    public delegatePickingToChildren = false;\r\n\r\n    private _image: Nullable<Image>;\r\n    /**\r\n     * Returns the image part of the button (if any)\r\n     */\r\n    public get image(): Nullable<Image> {\r\n        return this._image;\r\n    }\r\n\r\n    private _textBlock: Nullable<TextBlock>;\r\n    /**\r\n     * Returns the TextBlock part of the button (if any)\r\n     */\r\n    public get textBlock(): Nullable<TextBlock> {\r\n        return this._textBlock;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Button\r\n     * @param name defines the name of the button\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.thickness = 1;\r\n        this.isPointerBlocker = true;\r\n\r\n        let alphaStore: Nullable<number> = null;\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            alphaStore = this.alpha;\r\n            this.alpha -= 0.1;\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (alphaStore !== null) {\r\n                this.alpha = alphaStore;\r\n            }\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            this.scaleX -= 0.05;\r\n            this.scaleY -= 0.05;\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            this.scaleX += 0.05;\r\n            this.scaleY += 0.05;\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button\";\r\n    }\r\n\r\n    // While being a container, the button behaves like a control.\r\n    /**\r\n     * @internal\r\n     */\r\n    public _processPicking(x: number, y: number, pi: PointerInfoBase, type: number, pointerId: number, buttonIndex: number, deltaX?: number, deltaY?: number): boolean {\r\n        if (!this._isEnabled || !this.isHitTestVisible || !this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.delegatePickingToChildren) {\r\n            let contains = false;\r\n            for (let index = this._children.length - 1; index >= 0; index--) {\r\n                const child = this._children[index];\r\n                if (child.isEnabled && child.isHitTestVisible && child.isVisible && !child.notRenderable && child.contains(x, y)) {\r\n                    contains = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!contains) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        this._processObservables(type, x, y, pi, pointerId, buttonIndex, deltaX, deltaY);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerEnter(target: Control, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerEnter(target, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.isReadOnly && this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerOut(target: Control, pi: PointerInfoBase, force = false): void {\r\n        if (!this.isReadOnly && this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n\r\n        super._onPointerOut(target, pi, force);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.isReadOnly && this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    protected _getRectangleFill(context: ICanvasRenderingContext) {\r\n        if (this.isEnabled) {\r\n            return this._getBackgroundColor(context);\r\n        } else {\r\n            return this._disabledColor;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean, pi: PointerInfoBase): void {\r\n        if (!this.isReadOnly && this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick, pi);\r\n    }\r\n\r\n    /**\r\n     * Serializes the current button\r\n     * @param serializationObject defines the JSON serialized object\r\n     */\r\n    public serialize(serializationObject: any) {\r\n        super.serialize(serializationObject);\r\n\r\n        if (this._textBlock) {\r\n            serializationObject.textBlockName = this._textBlock.name;\r\n        }\r\n        if (this._image) {\r\n            serializationObject.imageName = this._image.name;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _parseFromContent(serializedObject: any, host: AdvancedDynamicTexture) {\r\n        super._parseFromContent(serializedObject, host);\r\n\r\n        if (serializedObject.textBlockName) {\r\n            this._textBlock = this.getChildByName(serializedObject.textBlockName) as Nullable<TextBlock>;\r\n        }\r\n\r\n        if (serializedObject.imageName) {\r\n            this._image = this.getChildByName(serializedObject.imageName) as Nullable<Image>;\r\n        }\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new button made with an image and a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageButton(name: string, text: string, imageUrl: string): Button {\r\n        const result = new this(name);\r\n\r\n        // Adding text\r\n        const textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        textBlock.paddingLeft = \"20%\";\r\n        result.addControl(textBlock);\r\n\r\n        // Adding image\r\n        const iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.width = \"20%\";\r\n        iconImage.stretch = Image.STRETCH_UNIFORM;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image\r\n     * @param name defines the name of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageOnlyButton(name: string, imageUrl: string): Button {\r\n        const result = new this(name);\r\n\r\n        // Adding image\r\n        const iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @returns a new Button\r\n     */\r\n    public static CreateSimpleButton(name: string, text: string): Button {\r\n        const result = new this(name);\r\n\r\n        // Adding text\r\n        const textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        // Store\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image and a centered text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageWithCenterTextButton(name: string, text: string, imageUrl: string): Button {\r\n        const result = new this(name);\r\n\r\n        // Adding image\r\n        const iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        result.addControl(iconImage);\r\n\r\n        // Adding text\r\n        const textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Button\", Button);\r\n","import { Tools } from \"core/Misc/tools\";\r\n\r\nimport { Container } from \"./container\";\r\nimport type { Measure } from \"../measure\";\r\nimport { Control } from \"./control\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport type { TextBlock } from \"./textBlock\";\r\nimport { TextWrapping } from \"./textBlock\";\r\n\r\n/**\r\n * Class used to create a 2D stack panel container\r\n */\r\nexport class StackPanel extends Container {\r\n    private _isVertical = true;\r\n    private _manualWidth = false;\r\n    private _manualHeight = false;\r\n    private _doNotTrackManualChanges = false;\r\n    private _spacing = 0;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that layout warnings should be ignored\r\n     */\r\n    @serialize()\r\n    public ignoreLayoutWarnings = false;\r\n\r\n    /** Gets or sets a boolean indicating if the stack panel is vertical or horizontal*/\r\n    @serialize()\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the spacing (in pixels) between each child.\r\n     */\r\n    @serialize()\r\n    public get spacing(): number {\r\n        return this._spacing;\r\n    }\r\n\r\n    public set spacing(value: number) {\r\n        if (this._spacing === value) {\r\n            return;\r\n        }\r\n\r\n        this._spacing = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets panel width.\r\n     * This value should not be set when in horizontal mode as it will be computed automatically\r\n     */\r\n    @serialize()\r\n    public set width(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualWidth = true;\r\n        }\r\n\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets panel height.\r\n     * This value should not be set when in vertical mode as it will be computed automatically\r\n     */\r\n    @serialize()\r\n    public set height(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualHeight = true;\r\n        }\r\n\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new StackPanel\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"StackPanel\";\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _preMeasure(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        for (const child of this._children) {\r\n            if (this._isVertical) {\r\n                child.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            } else {\r\n                child.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            }\r\n        }\r\n\r\n        super._preMeasure(parentMeasure, context);\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.copyFrom(parentMeasure);\r\n\r\n        this._measureForChildren.left = this._currentMeasure.left;\r\n        this._measureForChildren.top = this._currentMeasure.top;\r\n\r\n        if (!this.isVertical || this._manualWidth) {\r\n            this._measureForChildren.width = this._currentMeasure.width;\r\n        }\r\n\r\n        if (this.isVertical || this._manualHeight) {\r\n            this._measureForChildren.height = this._currentMeasure.height;\r\n        }\r\n    }\r\n\r\n    protected _postMeasure(): void {\r\n        let stackWidth = 0;\r\n        let stackHeight = 0;\r\n        const childrenCount = this._children.length;\r\n        for (let index = 0; index < childrenCount; index++) {\r\n            const child = this._children[index];\r\n            if (!child.isVisible || child.notRenderable) {\r\n                continue;\r\n            }\r\n\r\n            if (this._isVertical) {\r\n                if (child.top !== stackHeight + \"px\") {\r\n                    child.top = stackHeight + \"px\";\r\n                    this._rebuildLayout = true;\r\n                    child._top.ignoreAdaptiveScaling = true;\r\n                }\r\n\r\n                if (child._height.isPercentage && !child._automaticSize) {\r\n                    if (!this.ignoreLayoutWarnings) {\r\n                        Tools.Warn(`Control (Name:${child.name}, UniqueId:${child.uniqueId}) is using height in percentage mode inside a vertical StackPanel`);\r\n                    }\r\n                } else {\r\n                    stackHeight += child._currentMeasure.height + child._paddingTopInPixels + child._paddingBottomInPixels + (index < childrenCount - 1 ? this._spacing : 0);\r\n                }\r\n            } else {\r\n                if (child.left !== stackWidth + \"px\") {\r\n                    child.left = stackWidth + \"px\";\r\n                    this._rebuildLayout = true;\r\n                    child._left.ignoreAdaptiveScaling = true;\r\n                }\r\n\r\n                if (\r\n                    child._width.isPercentage &&\r\n                    !child._automaticSize &&\r\n                    child.getClassName() === \"TextBlock\" &&\r\n                    (child as TextBlock).textWrapping !== TextWrapping.Clip &&\r\n                    !(child as TextBlock).forceResizeWidth\r\n                ) {\r\n                    if (!this.ignoreLayoutWarnings) {\r\n                        Tools.Warn(`Control (Name:${child.name}, UniqueId:${child.uniqueId}) is using width in percentage mode inside a horizontal StackPanel`);\r\n                    }\r\n                } else {\r\n                    stackWidth += child._currentMeasure.width + child._paddingLeftInPixels + child._paddingRightInPixels + (index < childrenCount - 1 ? this._spacing : 0);\r\n                }\r\n            }\r\n        }\r\n\r\n        stackWidth += this._paddingLeftInPixels + this._paddingRightInPixels;\r\n        stackHeight += this._paddingTopInPixels + this._paddingBottomInPixels;\r\n\r\n        this._doNotTrackManualChanges = true;\r\n\r\n        // Let stack panel width or height default to stackHeight and stackWidth if dimensions are not specified.\r\n        // User can now define their own height and width for stack panel.\r\n\r\n        let panelWidthChanged = false;\r\n        let panelHeightChanged = false;\r\n\r\n        if ((!this._manualHeight || this.adaptHeightToChildren) && this._isVertical) {\r\n            // do not specify height if strictly defined by user\r\n            const previousHeight = this.height;\r\n            this.height = stackHeight + \"px\";\r\n            panelHeightChanged = previousHeight !== this.height || !this._height.ignoreAdaptiveScaling;\r\n        }\r\n        if ((!this._manualWidth || this.adaptWidthToChildren) && !this._isVertical) {\r\n            // do not specify width if strictly defined by user\r\n            const previousWidth = this.width;\r\n            this.width = stackWidth + \"px\";\r\n            panelWidthChanged = previousWidth !== this.width || !this._width.ignoreAdaptiveScaling;\r\n        }\r\n\r\n        if (panelHeightChanged) {\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        if (panelWidthChanged) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        this._doNotTrackManualChanges = false;\r\n\r\n        if (panelWidthChanged || panelHeightChanged) {\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        super._postMeasure();\r\n    }\r\n\r\n    /**\r\n     * Serializes the current control\r\n     * @param serializationObject defined the JSON serialized object\r\n     */\r\n    public serialize(serializationObject: any) {\r\n        super.serialize(serializationObject);\r\n        serializationObject.manualWidth = this._manualWidth;\r\n        serializationObject.manualHeight = this._manualHeight;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _parseFromContent(serializedObject: any, host: AdvancedDynamicTexture) {\r\n        this._manualWidth = serializedObject.manualWidth;\r\n        this._manualHeight = serializedObject.manualHeight;\r\n\r\n        super._parseFromContent(serializedObject, host);\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.StackPanel\", StackPanel);\r\n","import { Observable } from \"core/Misc/observable\";\r\nimport type { Vector2 } from \"core/Maths/math.vector\";\r\n\r\nimport { Control } from \"./control\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/**\r\n * Class used to represent a 2D checkbox\r\n */\r\nexport class Checkbox extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness  */\r\n    @serialize()\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Observable raised when isChecked property changes\r\n     */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    @serialize()\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    @serialize()\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    @serialize()\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    /**\r\n     * Creates a new CheckBox\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Checkbox\";\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        const actualWidth = this._currentMeasure.width - this._thickness;\r\n        const actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n        context.fillRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (this._isChecked) {\r\n            context.fillStyle = this._isEnabled ? this.color : this._disabledColorItem;\r\n            const offsetWidth = actualWidth * this._checkSizeRatio;\r\n            const offsetHeight = actualHeight * this._checkSizeRatio;\r\n\r\n            context.fillRect(\r\n                this._currentMeasure.left + this._thickness / 2 + (actualWidth - offsetWidth) / 2,\r\n                this._currentMeasure.top + this._thickness / 2 + (actualHeight - offsetHeight) / 2,\r\n                offsetWidth,\r\n                offsetHeight\r\n            );\r\n        }\r\n\r\n        context.strokeStyle = this.color;\r\n        context.lineWidth = this._thickness;\r\n\r\n        context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.isReadOnly) {\r\n            this.isChecked = !this.isChecked;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a checkbox with a header\r\n     * @param title defines the label to use for the header\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the checkbox and a textBlock\r\n     */\r\n    public static AddCheckBoxWithHeader(title: string, onValueChanged: (value: boolean) => void): StackPanel {\r\n        const panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        const checkbox = new Checkbox();\r\n        checkbox.width = \"20px\";\r\n        checkbox.height = \"20px\";\r\n        checkbox.isChecked = true;\r\n        checkbox.color = \"green\";\r\n        checkbox.onIsCheckedChangedObservable.add(onValueChanged);\r\n        panel.addControl(checkbox);\r\n\r\n        const header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header);\r\n\r\n        return panel;\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Checkbox\", Checkbox);\r\n","/** @internal */\r\nexport class TextWrapper {\r\n    private _text: string;\r\n    private _characters: string[] | undefined;\r\n\r\n    public get text(): string {\r\n        return this._characters ? this._characters.join(\"\") : this._text;\r\n    }\r\n\r\n    public set text(txt: string) {\r\n        this._text = txt;\r\n        this._characters = Array.from && Array.from(txt);\r\n    }\r\n\r\n    public get length(): number {\r\n        return this._characters ? this._characters.length : this._text.length;\r\n    }\r\n\r\n    public removePart(idxStart: number, idxEnd: number, insertTxt?: string): void {\r\n        this._text = this._text.slice(0, idxStart) + (insertTxt ? insertTxt : \"\") + this._text.slice(idxEnd);\r\n        if (this._characters) {\r\n            const newCharacters = insertTxt ? Array.from(insertTxt) : [];\r\n            this._characters.splice(idxStart, idxEnd - idxStart, ...newCharacters);\r\n        }\r\n    }\r\n\r\n    public charAt(idx: number): string {\r\n        return this._characters ? this._characters[idx] : this._text.charAt(idx);\r\n    }\r\n\r\n    public substr(from: number, length?: number): string {\r\n        if (this._characters) {\r\n            if (isNaN(from)) {\r\n                from = 0;\r\n            } else if (from >= 0) {\r\n                from = Math.min(from, this._characters.length);\r\n            } else {\r\n                from = this._characters.length + Math.max(from, -this._characters.length);\r\n            }\r\n            if (length === undefined) {\r\n                length = this._characters.length - from;\r\n            } else if (isNaN(length)) {\r\n                length = 0;\r\n            } else if (length < 0) {\r\n                length = 0;\r\n            }\r\n            const temp = [];\r\n            while (--length >= 0) {\r\n                temp[length] = this._characters[from + length];\r\n            }\r\n            return temp.join(\"\");\r\n        }\r\n\r\n        return this._text.substr(from, length);\r\n    }\r\n\r\n    public substring(from: number, to?: number): string {\r\n        if (this._characters) {\r\n            if (isNaN(from)) {\r\n                from = 0;\r\n            } else if (from > this._characters.length) {\r\n                from = this._characters.length;\r\n            } else if (from < 0) {\r\n                from = 0;\r\n            }\r\n            if (to === undefined) {\r\n                to = this._characters.length;\r\n            } else if (isNaN(to)) {\r\n                to = 0;\r\n            } else if (to > this._characters.length) {\r\n                to = this._characters.length;\r\n            } else if (to < 0) {\r\n                to = 0;\r\n            }\r\n            const temp = [];\r\n            let idx = 0;\r\n            while (from < to) {\r\n                temp[idx++] = this._characters[from++];\r\n            }\r\n            return temp.join(\"\");\r\n        }\r\n\r\n        return this._text.substring(from, to);\r\n    }\r\n\r\n    public isWord(index: number): boolean {\r\n        const rWord = /\\w/g;\r\n        return this._characters ? this._characters[index].search(rWord) !== -1 : this._text.search(rWord) !== -1;\r\n    }\r\n}\r\n","import type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport type { Vector2 } from \"core/Maths/math.vector\";\r\nimport type { ClipboardInfo } from \"core/Events/clipboardEvents\";\r\nimport { ClipboardEventTypes } from \"core/Events/clipboardEvents\";\r\nimport type { PointerInfo, PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { PointerEventTypes } from \"core/Events/pointerEvents\";\r\n\r\nimport { Control } from \"./control\";\r\nimport type { IFocusableControl } from \"./focusableControl\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport type { VirtualKeyboard } from \"./virtualKeyboard\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { TextWrapper } from \"./textWrapper\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { IKeyboardEvent, IPointerEvent } from \"core/Events/deviceInputEvents\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/**\r\n * Class used to create input text control\r\n */\r\nexport class InputText extends Control implements IFocusableControl {\r\n    protected _textWrapper: TextWrapper;\r\n    protected _placeholderText = \"\";\r\n    protected _background = \"#222222\";\r\n    protected _focusedBackground = \"#000000\";\r\n    protected _focusedColor = \"white\";\r\n    protected _placeholderColor = \"gray\";\r\n    protected _thickness = 1;\r\n    protected _margin = new ValueAndUnit(10, ValueAndUnit.UNITMODE_PIXEL);\r\n    protected _autoStretchWidth = true;\r\n    protected _maxWidth = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    protected _isFocused = false;\r\n    /** the type of device that most recently focused the input: \"mouse\", \"touch\" or \"pen\" */\r\n    protected _focusedBy: string;\r\n    protected _blinkTimeout: number;\r\n    protected _blinkIsEven = false;\r\n    private _cursorOffset = 0;\r\n    protected _scrollLeft: Nullable<number>;\r\n    protected _textWidth: number;\r\n    protected _clickedCoordinate: Nullable<number>;\r\n    protected _deadKey = false;\r\n    protected _addKey = true;\r\n    protected _currentKey = \"\";\r\n    protected _isTextHighlightOn = false;\r\n    protected _textHighlightColor = \"#d5e0ff\";\r\n    protected _highligherOpacity = 0.4;\r\n    protected _highlightedText = \"\";\r\n    private _startHighlightIndex = 0;\r\n    private _endHighlightIndex = 0;\r\n    private _cursorIndex = -1;\r\n    protected _onFocusSelectAll = false;\r\n    protected _isPointerDown = false;\r\n    protected _onClipboardObserver: Nullable<Observer<ClipboardInfo>>;\r\n    protected _onPointerDblTapObserver: Nullable<Observer<PointerInfo>>;\r\n\r\n    /** @internal */\r\n    public _connectedVirtualKeyboard: Nullable<VirtualKeyboard>;\r\n\r\n    /** Gets or sets a string representing the message displayed on mobile when the control gets the focus */\r\n    @serialize()\r\n    public promptMessage = \"Please enter text:\";\r\n    /** Force disable prompt on mobile device */\r\n    @serialize()\r\n    public disableMobilePrompt = false;\r\n\r\n    /** Observable raised when the text changes */\r\n    public onTextChangedObservable = new Observable<InputText>();\r\n    /** Observable raised just before an entered character is to be added */\r\n    public onBeforeKeyAddObservable = new Observable<InputText>();\r\n    /** Observable raised when the control gets the focus */\r\n    public onFocusObservable = new Observable<InputText>();\r\n    /** Observable raised when the control loses the focus */\r\n    public onBlurObservable = new Observable<InputText>();\r\n    /**Observable raised when the text is highlighted */\r\n    public onTextHighlightObservable = new Observable<InputText>();\r\n    /**Observable raised when copy event is triggered */\r\n    public onTextCopyObservable = new Observable<InputText>();\r\n    /** Observable raised when cut event is triggered */\r\n    public onTextCutObservable = new Observable<InputText>();\r\n    /** Observable raised when paste event is triggered */\r\n    public onTextPasteObservable = new Observable<InputText>();\r\n    /** Observable raised when a key event was processed */\r\n    public onKeyboardEventProcessedObservable = new Observable<IKeyboardEvent>();\r\n\r\n    /** Gets or sets the maximum width allowed by the control */\r\n    @serialize()\r\n    public get maxWidth(): string | number {\r\n        return this._maxWidth.toString(this._host);\r\n    }\r\n\r\n    /** Gets the maximum width allowed by the control in pixels */\r\n    public get maxWidthInPixels(): number {\r\n        return this._maxWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set maxWidth(value: string | number) {\r\n        if (this._maxWidth.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._maxWidth.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the text highlighter transparency; default: 0.4 */\r\n    @serialize()\r\n    public get highligherOpacity(): number {\r\n        return this._highligherOpacity;\r\n    }\r\n\r\n    public set highligherOpacity(value: number) {\r\n        if (this._highligherOpacity === value) {\r\n            return;\r\n        }\r\n        this._highligherOpacity = value;\r\n        this._markAsDirty();\r\n    }\r\n    /** Gets or sets a boolean indicating whether to select complete text by default on input focus */\r\n    @serialize()\r\n    public get onFocusSelectAll(): boolean {\r\n        return this._onFocusSelectAll;\r\n    }\r\n\r\n    public set onFocusSelectAll(value: boolean) {\r\n        if (this._onFocusSelectAll === value) {\r\n            return;\r\n        }\r\n\r\n        this._onFocusSelectAll = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the text hightlight color */\r\n    @serialize()\r\n    public get textHighlightColor(): string {\r\n        return this._textHighlightColor;\r\n    }\r\n\r\n    public set textHighlightColor(value: string) {\r\n        if (this._textHighlightColor === value) {\r\n            return;\r\n        }\r\n        this._textHighlightColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets control margin */\r\n    @serialize()\r\n    public get margin(): string {\r\n        return this._margin.toString(this._host);\r\n    }\r\n\r\n    /** Gets control margin in pixels */\r\n    public get marginInPixels(): number {\r\n        return this._margin.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set margin(value: string) {\r\n        if (this._margin.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._margin.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can auto stretch its width to adapt to the text */\r\n    @serialize()\r\n    public get autoStretchWidth(): boolean {\r\n        return this._autoStretchWidth;\r\n    }\r\n\r\n    public set autoStretchWidth(value: boolean) {\r\n        if (this._autoStretchWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoStretchWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets border thickness */\r\n    @serialize()\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the background color when focused */\r\n    @serialize()\r\n    public get focusedBackground(): string {\r\n        return this._focusedBackground;\r\n    }\r\n\r\n    public set focusedBackground(value: string) {\r\n        if (this._focusedBackground === value) {\r\n            return;\r\n        }\r\n\r\n        this._focusedBackground = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the background color when focused */\r\n    @serialize()\r\n    public get focusedColor(): string {\r\n        return this._focusedColor;\r\n    }\r\n\r\n    public set focusedColor(value: string) {\r\n        if (this._focusedColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._focusedColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the background color */\r\n    @serialize()\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the placeholder color */\r\n    @serialize()\r\n    public get placeholderColor(): string {\r\n        return this._placeholderColor;\r\n    }\r\n\r\n    public set placeholderColor(value: string) {\r\n        if (this._placeholderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._placeholderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the text displayed when the control is empty */\r\n    @serialize()\r\n    public get placeholderText(): string {\r\n        return this._placeholderText;\r\n    }\r\n\r\n    public set placeholderText(value: string) {\r\n        if (this._placeholderText === value) {\r\n            return;\r\n        }\r\n        this._placeholderText = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the dead key. 0 to disable. */\r\n    @serialize()\r\n    public get deadKey(): boolean {\r\n        return this._deadKey;\r\n    }\r\n\r\n    public set deadKey(flag: boolean) {\r\n        this._deadKey = flag;\r\n    }\r\n\r\n    /** Gets or sets the highlight text */\r\n    public get highlightedText(): string {\r\n        return this._highlightedText;\r\n    }\r\n    public set highlightedText(text: string) {\r\n        if (this._highlightedText === text) {\r\n            return;\r\n        }\r\n        this._highlightedText = text;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets if the current key should be added */\r\n    public get addKey(): boolean {\r\n        return this._addKey;\r\n    }\r\n\r\n    public set addKey(flag: boolean) {\r\n        this._addKey = flag;\r\n    }\r\n\r\n    /** Gets or sets the value of the current key being entered */\r\n    public get currentKey(): string {\r\n        return this._currentKey;\r\n    }\r\n\r\n    public set currentKey(key: string) {\r\n        this._currentKey = key;\r\n    }\r\n\r\n    /** Gets or sets the text displayed in the control */\r\n    @serialize()\r\n    public get text(): string {\r\n        return this._textWrapper.text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        const valueAsString = value.toString(); // Forcing convertion\r\n\r\n        if (!this._textWrapper) {\r\n            this._textWrapper = new TextWrapper();\r\n        }\r\n\r\n        if (this._textWrapper.text === valueAsString) {\r\n            return;\r\n        }\r\n        this._textWrapper.text = valueAsString;\r\n        this._textHasChanged();\r\n    }\r\n\r\n    protected _textHasChanged(): void {\r\n        this._markAsDirty();\r\n        this.onTextChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Gets or sets control width */\r\n    @serialize()\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n\r\n        this.autoStretchWidth = false;\r\n    }\r\n\r\n    /**\r\n     * Creates a new InputText\r\n     * @param name defines the control name\r\n     * @param text defines the text of the control\r\n     */\r\n    constructor(public name?: string, text: string = \"\") {\r\n        super(name);\r\n\r\n        this.text = text;\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    /** @internal */\r\n    public onBlur(): void {\r\n        this._isFocused = false;\r\n        this._scrollLeft = null;\r\n        this._cursorOffset = 0;\r\n        clearTimeout(this._blinkTimeout);\r\n        this._markAsDirty();\r\n\r\n        this.onBlurObservable.notifyObservers(this);\r\n\r\n        this._host.unRegisterClipboardEvents();\r\n        if (this._onClipboardObserver) {\r\n            this._host.onClipboardObservable.remove(this._onClipboardObserver);\r\n        }\r\n        const scene = this._host.getScene();\r\n        if (this._onPointerDblTapObserver && scene) {\r\n            scene.onPointerObservable.remove(this._onPointerDblTapObserver);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public onFocus(): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n        this._scrollLeft = null;\r\n        this._isFocused = true;\r\n        this._blinkIsEven = false;\r\n        this._cursorOffset = 0;\r\n        this._markAsDirty();\r\n\r\n        this.onFocusObservable.notifyObservers(this);\r\n\r\n        if (this._focusedBy === \"touch\" && !this.disableMobilePrompt) {\r\n            const value = prompt(this.promptMessage);\r\n\r\n            if (value !== null) {\r\n                this.text = value;\r\n            }\r\n            this._host.focusedControl = null;\r\n            return;\r\n        }\r\n\r\n        this._host.registerClipboardEvents();\r\n\r\n        this._onClipboardObserver = this._host.onClipboardObservable.add((clipboardInfo) => {\r\n            // process clipboard event, can be configured.\r\n            switch (clipboardInfo.type) {\r\n                case ClipboardEventTypes.COPY:\r\n                    this._onCopyText(clipboardInfo.event);\r\n                    this.onTextCopyObservable.notifyObservers(this);\r\n                    break;\r\n                case ClipboardEventTypes.CUT:\r\n                    this._onCutText(clipboardInfo.event);\r\n                    this.onTextCutObservable.notifyObservers(this);\r\n                    break;\r\n                case ClipboardEventTypes.PASTE:\r\n                    this._onPasteText(clipboardInfo.event);\r\n                    this.onTextPasteObservable.notifyObservers(this);\r\n                    break;\r\n                default:\r\n                    return;\r\n            }\r\n        });\r\n\r\n        const scene = this._host.getScene();\r\n        if (scene) {\r\n            //register the pointer double tap event\r\n            this._onPointerDblTapObserver = scene.onPointerObservable.add((pointerInfo) => {\r\n                if (!this._isFocused) {\r\n                    return;\r\n                }\r\n                if (pointerInfo.type === PointerEventTypes.POINTERDOUBLETAP) {\r\n                    this._processDblClick(pointerInfo);\r\n                }\r\n            });\r\n        }\r\n\r\n        if (this._onFocusSelectAll) {\r\n            this._selectAllText();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Function to focus an inputText programmatically\r\n     */\r\n    public focus() {\r\n        this._host.moveFocusToControl(this);\r\n    }\r\n\r\n    /**\r\n     * Function to unfocus an inputText programmatically\r\n     */\r\n    public blur() {\r\n        this._host.focusedControl = null;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"InputText\";\r\n    }\r\n\r\n    /**\r\n     * Function called to get the list of controls that should not steal the focus from this control\r\n     * @returns an array of controls\r\n     */\r\n    public keepsFocusWith(): Nullable<Control[]> {\r\n        if (!this._connectedVirtualKeyboard) {\r\n            return null;\r\n        }\r\n        return [this._connectedVirtualKeyboard];\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public processKey(keyCode: number, key?: string, evt?: IKeyboardEvent) {\r\n        if (this.isReadOnly) {\r\n            return;\r\n        }\r\n\r\n        //return if clipboard event keys (i.e -ctr/cmd + c,v,x)\r\n        if (evt && (evt.ctrlKey || evt.metaKey) && (keyCode === 67 || keyCode === 86 || keyCode === 88)) {\r\n            return;\r\n        }\r\n\r\n        //select all\r\n        if (evt && (evt.ctrlKey || evt.metaKey) && keyCode === 65) {\r\n            this._selectAllText();\r\n            evt.preventDefault();\r\n            return;\r\n        }\r\n        // Specific cases\r\n        switch (keyCode) {\r\n            case 32: //SPACE\r\n                key = \" \"; //ie11 key for space is \"Spacebar\"\r\n                break;\r\n            case 191: //SLASH\r\n                if (evt) {\r\n                    evt.preventDefault();\r\n                }\r\n                break;\r\n            case 8: // BACKSPACE\r\n                if (this._textWrapper.text && this._textWrapper.length > 0) {\r\n                    //delete the highlighted text\r\n                    if (this.isTextHighlightOn) {\r\n                        this._textWrapper.removePart(this._startHighlightIndex, this._endHighlightIndex);\r\n                        this._textHasChanged();\r\n                        this.isTextHighlightOn = false;\r\n                        this._cursorOffset = this._textWrapper.length - this._startHighlightIndex;\r\n                        this._blinkIsEven = false;\r\n                        if (evt) {\r\n                            evt.preventDefault();\r\n                        }\r\n                        return;\r\n                    }\r\n                    //delete single character\r\n                    if (this._cursorOffset === 0) {\r\n                        this.text = this._textWrapper.substr(0, this._textWrapper.length - 1);\r\n                    } else {\r\n                        const deletePosition = this._textWrapper.length - this._cursorOffset;\r\n                        if (deletePosition > 0) {\r\n                            this._textWrapper.removePart(deletePosition - 1, deletePosition);\r\n                            this._textHasChanged();\r\n                        }\r\n                    }\r\n                }\r\n                if (evt) {\r\n                    evt.preventDefault();\r\n                }\r\n                return;\r\n            case 46: // DELETE\r\n                if (this.isTextHighlightOn) {\r\n                    this._textWrapper.removePart(this._startHighlightIndex, this._endHighlightIndex);\r\n                    this._textHasChanged();\r\n                    this.isTextHighlightOn = false;\r\n                    this._cursorOffset = this._textWrapper.length - this._startHighlightIndex;\r\n                    if (evt) {\r\n                        evt.preventDefault();\r\n                    }\r\n                    return;\r\n                }\r\n                if (this._textWrapper.text && this._textWrapper.length > 0 && this._cursorOffset > 0) {\r\n                    const deletePosition = this._textWrapper.length - this._cursorOffset;\r\n                    this._textWrapper.removePart(deletePosition, deletePosition + 1);\r\n                    this._textHasChanged();\r\n                    this._cursorOffset--;\r\n                }\r\n                if (evt) {\r\n                    evt.preventDefault();\r\n                }\r\n                return;\r\n            case 13: // RETURN\r\n                this._host.focusedControl = null;\r\n                this.isTextHighlightOn = false;\r\n                return;\r\n            case 35: // END\r\n                this._cursorOffset = 0;\r\n                this._blinkIsEven = false;\r\n                this.isTextHighlightOn = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 36: // HOME\r\n                this._cursorOffset = this._textWrapper.length;\r\n                this._blinkIsEven = false;\r\n                this.isTextHighlightOn = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 37: // LEFT\r\n                this._cursorOffset++;\r\n                if (this._cursorOffset > this._textWrapper.length) {\r\n                    this._cursorOffset = this._textWrapper.length;\r\n                }\r\n\r\n                if (evt && evt.shiftKey) {\r\n                    // update the cursor\r\n                    this._blinkIsEven = false;\r\n                    // shift + ctrl/cmd + <-\r\n                    if (evt.ctrlKey || evt.metaKey) {\r\n                        if (!this.isTextHighlightOn) {\r\n                            if (this._textWrapper.length === this._cursorOffset) {\r\n                                return;\r\n                            } else {\r\n                                this._endHighlightIndex = this._textWrapper.length - this._cursorOffset + 1;\r\n                            }\r\n                        }\r\n                        this._startHighlightIndex = 0;\r\n                        this._cursorIndex = this._textWrapper.length - this._endHighlightIndex;\r\n                        this._cursorOffset = this._textWrapper.length;\r\n                        this.isTextHighlightOn = true;\r\n                        this._markAsDirty();\r\n                        return;\r\n                    }\r\n                    //store the starting point\r\n                    if (!this.isTextHighlightOn) {\r\n                        this.isTextHighlightOn = true;\r\n                        this._cursorIndex = this._cursorOffset >= this._textWrapper.length ? this._textWrapper.length : this._cursorOffset - 1;\r\n                    }\r\n                    //if text is already highlighted\r\n                    else if (this._cursorIndex === -1) {\r\n                        this._cursorIndex = this._textWrapper.length - this._endHighlightIndex;\r\n                        this._cursorOffset = this._startHighlightIndex === 0 ? this._textWrapper.length : this._textWrapper.length - this._startHighlightIndex + 1;\r\n                    }\r\n                    //set the highlight indexes\r\n                    if (this._cursorIndex < this._cursorOffset) {\r\n                        this._endHighlightIndex = this._textWrapper.length - this._cursorIndex;\r\n                        this._startHighlightIndex = this._textWrapper.length - this._cursorOffset;\r\n                    } else if (this._cursorIndex > this._cursorOffset) {\r\n                        this._endHighlightIndex = this._textWrapper.length - this._cursorOffset;\r\n                        this._startHighlightIndex = this._textWrapper.length - this._cursorIndex;\r\n                    } else {\r\n                        this.isTextHighlightOn = false;\r\n                    }\r\n                    this._markAsDirty();\r\n                    return;\r\n                }\r\n                if (this.isTextHighlightOn) {\r\n                    this._cursorOffset = this._textWrapper.length - this._startHighlightIndex;\r\n                    this.isTextHighlightOn = false;\r\n                }\r\n                if (evt && (evt.ctrlKey || evt.metaKey)) {\r\n                    this._cursorOffset = this._textWrapper.length;\r\n                    evt.preventDefault();\r\n                }\r\n                this._blinkIsEven = false;\r\n                this.isTextHighlightOn = false;\r\n                this._cursorIndex = -1;\r\n                this._markAsDirty();\r\n                return;\r\n            case 39: // RIGHT\r\n                this._cursorOffset--;\r\n                if (this._cursorOffset < 0) {\r\n                    this._cursorOffset = 0;\r\n                }\r\n                if (evt && evt.shiftKey) {\r\n                    //update the cursor\r\n                    this._blinkIsEven = false;\r\n                    //shift + ctrl/cmd + ->\r\n                    if (evt.ctrlKey || evt.metaKey) {\r\n                        if (!this.isTextHighlightOn) {\r\n                            if (this._cursorOffset === 0) {\r\n                                return;\r\n                            } else {\r\n                                this._startHighlightIndex = this._textWrapper.length - this._cursorOffset - 1;\r\n                            }\r\n                        }\r\n                        this._endHighlightIndex = this._textWrapper.length;\r\n                        this.isTextHighlightOn = true;\r\n                        this._cursorIndex = this._textWrapper.length - this._startHighlightIndex;\r\n                        this._cursorOffset = 0;\r\n                        this._markAsDirty();\r\n                        return;\r\n                    }\r\n\r\n                    if (!this.isTextHighlightOn) {\r\n                        this.isTextHighlightOn = true;\r\n                        this._cursorIndex = this._cursorOffset <= 0 ? 0 : this._cursorOffset + 1;\r\n                    }\r\n                    //if text is already highlighted\r\n                    else if (this._cursorIndex === -1) {\r\n                        this._cursorIndex = this._textWrapper.length - this._startHighlightIndex;\r\n                        this._cursorOffset = this._textWrapper.length === this._endHighlightIndex ? 0 : this._textWrapper.length - this._endHighlightIndex - 1;\r\n                    }\r\n                    //set the highlight indexes\r\n                    if (this._cursorIndex < this._cursorOffset) {\r\n                        this._endHighlightIndex = this._textWrapper.length - this._cursorIndex;\r\n                        this._startHighlightIndex = this._textWrapper.length - this._cursorOffset;\r\n                    } else if (this._cursorIndex > this._cursorOffset) {\r\n                        this._endHighlightIndex = this._textWrapper.length - this._cursorOffset;\r\n                        this._startHighlightIndex = this._textWrapper.length - this._cursorIndex;\r\n                    } else {\r\n                        this.isTextHighlightOn = false;\r\n                    }\r\n                    this._markAsDirty();\r\n                    return;\r\n                }\r\n                if (this.isTextHighlightOn) {\r\n                    this._cursorOffset = this._textWrapper.length - this._endHighlightIndex;\r\n                    this.isTextHighlightOn = false;\r\n                }\r\n                //ctr + ->\r\n                if (evt && (evt.ctrlKey || evt.metaKey)) {\r\n                    this._cursorOffset = 0;\r\n                    evt.preventDefault();\r\n                }\r\n                this._blinkIsEven = false;\r\n                this.isTextHighlightOn = false;\r\n                this._cursorIndex = -1;\r\n                this._markAsDirty();\r\n                return;\r\n        }\r\n        if (keyCode === 32) {\r\n            key = evt?.key ?? \" \";\r\n        }\r\n        this._deadKey = key === \"Dead\";\r\n        // Printable characters\r\n        if (\r\n            key &&\r\n            (keyCode === -1 || // Direct access\r\n                keyCode === 32 || // Space\r\n                keyCode === 34 || // \"    add support for single and double quotes\r\n                keyCode === 39 || // '\r\n                (keyCode > 47 && keyCode < 64) || // Numbers\r\n                (keyCode > 64 && keyCode < 91) || // Letters\r\n                (keyCode > 159 && keyCode < 193) || // Special characters\r\n                (keyCode > 218 && keyCode < 223) || // Special characters\r\n                (keyCode > 95 && keyCode < 112))\r\n        ) {\r\n            // Numpad\r\n            this._currentKey = key;\r\n            this.onBeforeKeyAddObservable.notifyObservers(this);\r\n            key = this._currentKey;\r\n            if (this._addKey && !this._deadKey) {\r\n                if (this.isTextHighlightOn) {\r\n                    this._textWrapper.removePart(this._startHighlightIndex, this._endHighlightIndex, key);\r\n                    this._textHasChanged();\r\n                    this._cursorOffset = this._textWrapper.length - (this._startHighlightIndex + 1);\r\n                    this.isTextHighlightOn = false;\r\n                    this._blinkIsEven = false;\r\n                    this._markAsDirty();\r\n                } else if (this._cursorOffset === 0) {\r\n                    this.text += this._deadKey && evt?.key ? evt.key : key;\r\n                } else {\r\n                    const insertPosition = this._textWrapper.length - this._cursorOffset;\r\n                    this._textWrapper.removePart(insertPosition, insertPosition, key);\r\n                    this._textHasChanged();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _updateValueFromCursorIndex(offset: number) {\r\n        //update the cursor\r\n        this._blinkIsEven = false;\r\n\r\n        if (this._cursorIndex === -1) {\r\n            this._cursorIndex = offset;\r\n        } else {\r\n            if (this._cursorIndex < this._cursorOffset) {\r\n                this._endHighlightIndex = this._textWrapper.length - this._cursorIndex;\r\n                this._startHighlightIndex = this._textWrapper.length - this._cursorOffset;\r\n            } else if (this._cursorIndex > this._cursorOffset) {\r\n                this._endHighlightIndex = this._textWrapper.length - this._cursorOffset;\r\n                this._startHighlightIndex = this._textWrapper.length - this._cursorIndex;\r\n            } else {\r\n                this.isTextHighlightOn = false;\r\n                this._markAsDirty();\r\n                return;\r\n            }\r\n        }\r\n        this.isTextHighlightOn = true;\r\n        this._markAsDirty();\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected _processDblClick(evt: PointerInfo) {\r\n        //pre-find the start and end index of the word under cursor, speeds up the rendering\r\n        this._startHighlightIndex = this._textWrapper.length - this._cursorOffset;\r\n        this._endHighlightIndex = this._startHighlightIndex;\r\n        let moveLeft, moveRight;\r\n        do {\r\n            moveRight = this._endHighlightIndex < this._textWrapper.length && this._textWrapper.isWord(this._endHighlightIndex) ? ++this._endHighlightIndex : 0;\r\n            moveLeft = this._startHighlightIndex > 0 && this._textWrapper.isWord(this._startHighlightIndex - 1) ? --this._startHighlightIndex : 0;\r\n        } while (moveLeft || moveRight);\r\n\r\n        this._cursorOffset = this._textWrapper.length - this._startHighlightIndex;\r\n\r\n        this.isTextHighlightOn = true;\r\n        this._clickedCoordinate = null;\r\n        this._blinkIsEven = true;\r\n        this._cursorIndex = -1;\r\n        this._markAsDirty();\r\n    }\r\n    /** @internal */\r\n    protected _selectAllText() {\r\n        this._blinkIsEven = true;\r\n        this.isTextHighlightOn = true;\r\n\r\n        this._startHighlightIndex = 0;\r\n        this._endHighlightIndex = this._textWrapper.length;\r\n        this._cursorOffset = this._textWrapper.length;\r\n        this._cursorIndex = -1;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Handles the keyboard event\r\n     * @param evt Defines the KeyboardEvent\r\n     */\r\n    public processKeyboard(evt: IKeyboardEvent): void {\r\n        // process pressed key\r\n        this.processKey(evt.keyCode, evt.key, evt);\r\n\r\n        this.onKeyboardEventProcessedObservable.notifyObservers(evt);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _onCopyText(ev: ClipboardEvent): void {\r\n        this.isTextHighlightOn = false;\r\n        //when write permission to clipbaord data is denied\r\n        try {\r\n            ev.clipboardData && ev.clipboardData.setData(\"text/plain\", this._highlightedText);\r\n        } catch {} //pass\r\n        this._host.clipboardData = this._highlightedText;\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _onCutText(ev: ClipboardEvent): void {\r\n        if (!this._highlightedText) {\r\n            return;\r\n        }\r\n        this._textWrapper.removePart(this._startHighlightIndex, this._endHighlightIndex);\r\n        this._textHasChanged();\r\n        this.isTextHighlightOn = false;\r\n        this._cursorOffset = this._textWrapper.length - this._startHighlightIndex;\r\n        //when write permission to clipbaord data is denied\r\n        try {\r\n            ev.clipboardData && ev.clipboardData.setData(\"text/plain\", this._highlightedText);\r\n        } catch {} //pass\r\n\r\n        this._host.clipboardData = this._highlightedText;\r\n        this._highlightedText = \"\";\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _onPasteText(ev: ClipboardEvent): void {\r\n        let data: string = \"\";\r\n        if (ev.clipboardData && ev.clipboardData.types.indexOf(\"text/plain\") !== -1) {\r\n            data = ev.clipboardData.getData(\"text/plain\");\r\n        } else {\r\n            //get the cached data; returns blank string by default\r\n            data = this._host.clipboardData;\r\n        }\r\n        const insertPosition = this._textWrapper.length - this._cursorOffset;\r\n        this._textWrapper.removePart(insertPosition, insertPosition, data);\r\n        this._textHasChanged();\r\n    }\r\n\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        // Background\r\n        if (this._isFocused) {\r\n            if (this._focusedBackground) {\r\n                context.fillStyle = this._isEnabled ? this._focusedBackground : this._disabledColor;\r\n\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n        } else if (this._background) {\r\n            context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n\r\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (!this._fontOffset || this._wasDirty) {\r\n            this._fontOffset = Control._GetFontOffset(context.font);\r\n        }\r\n\r\n        // Text\r\n        const clipTextLeft = this._currentMeasure.left + this._margin.getValueInPixel(this._host, this._tempParentMeasure.width);\r\n        if (this.color) {\r\n            context.fillStyle = this.color;\r\n        }\r\n\r\n        let text = this._beforeRenderText(this._textWrapper);\r\n\r\n        if (!this._isFocused && !this._textWrapper.text && this._placeholderText) {\r\n            text = new TextWrapper();\r\n            text.text = this._placeholderText;\r\n\r\n            if (this._placeholderColor) {\r\n                context.fillStyle = this._placeholderColor;\r\n            }\r\n        }\r\n\r\n        this._textWidth = context.measureText(text.text).width;\r\n        const marginWidth = this._margin.getValueInPixel(this._host, this._tempParentMeasure.width) * 2;\r\n        if (this._autoStretchWidth) {\r\n            this.width = Math.min(this._maxWidth.getValueInPixel(this._host, this._tempParentMeasure.width), this._textWidth + marginWidth) + \"px\";\r\n            this._autoStretchWidth = true; // setting the width will have reset _autoStretchWidth to false!\r\n        }\r\n\r\n        const rootY = this._fontOffset.ascent + (this._currentMeasure.height - this._fontOffset.height) / 2;\r\n        const availableWidth = this._width.getValueInPixel(this._host, this._tempParentMeasure.width) - marginWidth;\r\n\r\n        context.save();\r\n        context.beginPath();\r\n        context.rect(clipTextLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, availableWidth + 2, this._currentMeasure.height);\r\n        context.clip();\r\n\r\n        if (this._isFocused && this._textWidth > availableWidth) {\r\n            const textLeft = clipTextLeft - this._textWidth + availableWidth;\r\n            if (!this._scrollLeft) {\r\n                this._scrollLeft = textLeft;\r\n            }\r\n        } else {\r\n            this._scrollLeft = clipTextLeft;\r\n        }\r\n\r\n        context.fillText(text.text, this._scrollLeft, this._currentMeasure.top + rootY);\r\n\r\n        // Cursor\r\n        if (this._isFocused) {\r\n            // Need to move cursor\r\n            if (this._clickedCoordinate) {\r\n                const rightPosition = this._scrollLeft + this._textWidth;\r\n                const absoluteCursorPosition = rightPosition - this._clickedCoordinate;\r\n                let currentSize = 0;\r\n                this._cursorOffset = 0;\r\n                let previousDist = 0;\r\n                do {\r\n                    if (this._cursorOffset) {\r\n                        previousDist = Math.abs(absoluteCursorPosition - currentSize);\r\n                    }\r\n                    this._cursorOffset++;\r\n                    currentSize = context.measureText(text.substr(text.length - this._cursorOffset, this._cursorOffset)).width;\r\n                } while (currentSize < absoluteCursorPosition && text.length >= this._cursorOffset);\r\n\r\n                // Find closest move\r\n                if (Math.abs(absoluteCursorPosition - currentSize) > previousDist) {\r\n                    this._cursorOffset--;\r\n                }\r\n\r\n                this._blinkIsEven = false;\r\n                this._clickedCoordinate = null;\r\n            }\r\n\r\n            // Render cursor\r\n            if (!this._blinkIsEven) {\r\n                const cursorOffsetText = text.substr(text.length - this._cursorOffset);\r\n                const cursorOffsetWidth = context.measureText(cursorOffsetText).width;\r\n                let cursorLeft = this._scrollLeft + this._textWidth - cursorOffsetWidth;\r\n\r\n                if (cursorLeft < clipTextLeft) {\r\n                    this._scrollLeft += clipTextLeft - cursorLeft;\r\n                    cursorLeft = clipTextLeft;\r\n                    this._markAsDirty();\r\n                } else if (cursorLeft > clipTextLeft + availableWidth) {\r\n                    this._scrollLeft += clipTextLeft + availableWidth - cursorLeft;\r\n                    cursorLeft = clipTextLeft + availableWidth;\r\n                    this._markAsDirty();\r\n                }\r\n                if (!this.isTextHighlightOn) {\r\n                    context.fillRect(cursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, 2, this._fontOffset.height);\r\n                }\r\n            }\r\n\r\n            clearTimeout(this._blinkTimeout);\r\n            this._blinkTimeout = <any>setTimeout(() => {\r\n                this._blinkIsEven = !this._blinkIsEven;\r\n                this._markAsDirty();\r\n            }, 500);\r\n\r\n            //show the highlighted text\r\n            if (this.isTextHighlightOn) {\r\n                clearTimeout(this._blinkTimeout);\r\n                const highlightCursorOffsetWidth = context.measureText(text.substring(this._startHighlightIndex)).width;\r\n                let highlightCursorLeft = this._scrollLeft + this._textWidth - highlightCursorOffsetWidth;\r\n                this._highlightedText = text.substring(this._startHighlightIndex, this._endHighlightIndex);\r\n                let width = context.measureText(text.substring(this._startHighlightIndex, this._endHighlightIndex)).width;\r\n                if (highlightCursorLeft < clipTextLeft) {\r\n                    width = width - (clipTextLeft - highlightCursorLeft);\r\n                    if (!width) {\r\n                        // when using left arrow on text.length > availableWidth;\r\n                        // assigns the width of the first letter after clipTextLeft\r\n                        width = context.measureText(text.charAt(text.length - this._cursorOffset)).width;\r\n                    }\r\n                    highlightCursorLeft = clipTextLeft;\r\n                }\r\n                //for transparancy\r\n                context.globalAlpha = this._highligherOpacity;\r\n                context.fillStyle = this._textHighlightColor;\r\n                context.fillRect(highlightCursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, width, this._fontOffset.height);\r\n                context.globalAlpha = 1.0;\r\n            }\r\n        }\r\n        context.restore();\r\n\r\n        // Border\r\n        if (this._thickness) {\r\n            if (this._isFocused) {\r\n                if (this.focusedColor) {\r\n                    context.strokeStyle = this.focusedColor;\r\n                }\r\n            } else {\r\n                if (this.color) {\r\n                    context.strokeStyle = this.color;\r\n                }\r\n            }\r\n\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.strokeRect(\r\n                this._currentMeasure.left + this._thickness / 2,\r\n                this._currentMeasure.top + this._thickness / 2,\r\n                this._currentMeasure.width - this._thickness,\r\n                this._currentMeasure.height - this._thickness\r\n            );\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isReadOnly) {\r\n            return true;\r\n        }\r\n\r\n        this._clickedCoordinate = coordinates.x;\r\n        this.isTextHighlightOn = false;\r\n        this._highlightedText = \"\";\r\n        this._cursorIndex = -1;\r\n        this._isPointerDown = true;\r\n        this._host._capturingControl[pointerId] = this;\r\n        this._focusedBy = (pi.event as IPointerEvent).pointerType;\r\n        if (this._host.focusedControl === this) {\r\n            // Move cursor\r\n            clearTimeout(this._blinkTimeout);\r\n            this._markAsDirty();\r\n            return true;\r\n        }\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        this._host.focusedControl = this;\r\n\r\n        return true;\r\n    }\r\n    public _onPointerMove(target: Control, coordinates: Vector2, pointerId: number, pi: PointerInfoBase): void {\r\n        if (this._host.focusedControl === this && this._isPointerDown && !this.isReadOnly) {\r\n            this._clickedCoordinate = coordinates.x;\r\n            this._markAsDirty();\r\n            this._updateValueFromCursorIndex(this._cursorOffset);\r\n        }\r\n        super._onPointerMove(target, coordinates, pointerId, pi);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._isPointerDown = false;\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n\r\n    protected _beforeRenderText(textWrapper: TextWrapper): TextWrapper {\r\n        return textWrapper;\r\n    }\r\n\r\n    /** @internal */\r\n    private set isTextHighlightOn(value: boolean) {\r\n        if (this._isTextHighlightOn === value) {\r\n            return;\r\n        }\r\n        if (value) {\r\n            this.onTextHighlightObservable.notifyObservers(this);\r\n        }\r\n        this._isTextHighlightOn = value;\r\n    }\r\n\r\n    /** @internal */\r\n    private get isTextHighlightOn(): boolean {\r\n        return this._isTextHighlightOn;\r\n    }\r\n\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this.onBlurObservable.clear();\r\n        this.onFocusObservable.clear();\r\n        this.onTextChangedObservable.clear();\r\n        this.onTextCopyObservable.clear();\r\n        this.onTextCutObservable.clear();\r\n        this.onTextPasteObservable.clear();\r\n        this.onTextHighlightObservable.clear();\r\n        this.onKeyboardEventProcessedObservable.clear();\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.InputText\", InputText);\r\n","import type { Nullable } from \"core/types\";\r\n\r\nimport { Container } from \"./container\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\nimport type { Measure } from \"../measure\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport type { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\n\r\n/**\r\n * Class used to create a 2D grid container\r\n */\r\nexport class Grid extends Container {\r\n    private _rowDefinitions = new Array<ValueAndUnit>();\r\n    private _rowDefinitionObservers: Observer<void>[] = [];\r\n    private _columnDefinitions = new Array<ValueAndUnit>();\r\n    private _columnDefinitionObservers: Observer<void>[] = [];\r\n    private _cells: { [key: string]: Container } = {};\r\n    private _childControls = new Array<Control>();\r\n\r\n    /**\r\n     * Sets/Gets a boolean indicating that control content must be clipped\r\n     * Please note that not clipping content may generate issues with adt.useInvalidateRectOptimization so it is recommended to turn this optimization off if you want to use unclipped children\r\n     */\r\n    public set clipContent(value: boolean) {\r\n        this._clipContent = value;\r\n\r\n        // This value has to be replicated on all of the container cells\r\n        for (const key in this._cells) {\r\n            this._cells[key].clipContent = value;\r\n        }\r\n    }\r\n\r\n    @serialize()\r\n    public get clipContent(): boolean {\r\n        return this._clipContent;\r\n    }\r\n\r\n    /**\r\n     * Sets/Gets a boolean indicating if the children are clipped to the current control bounds.\r\n     * Please note that not clipping children may generate issues with adt.useInvalidateRectOptimization so it is recommended to turn this optimization off if you want to use unclipped children\r\n     */\r\n    public set clipChildren(value: boolean) {\r\n        this._clipChildren = value;\r\n\r\n        // This value has to be replicated on all of the container cells\r\n        for (const key in this._cells) {\r\n            this._cells[key].clipChildren = value;\r\n        }\r\n    }\r\n\r\n    public get clipChildren(): boolean {\r\n        return this._clipChildren;\r\n    }\r\n\r\n    /**\r\n     * Gets the number of columns\r\n     */\r\n    public get columnCount(): number {\r\n        return this._columnDefinitions.length;\r\n    }\r\n\r\n    /**\r\n     * Gets the number of rows\r\n     */\r\n    public get rowCount(): number {\r\n        return this._rowDefinitions.length;\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._childControls;\r\n    }\r\n\r\n    /** Gets the list of cells (e.g. the containers) */\r\n    public get cells(): { [key: string]: Container } {\r\n        return this._cells;\r\n    }\r\n\r\n    /**\r\n     * Gets the definition of a specific row\r\n     * @param index defines the index of the row\r\n     * @returns the row definition\r\n     */\r\n    public getRowDefinition(index: number): Nullable<ValueAndUnit> {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return null;\r\n        }\r\n\r\n        return this._rowDefinitions[index];\r\n    }\r\n\r\n    /**\r\n     * Gets the definition of a specific column\r\n     * @param index defines the index of the column\r\n     * @returns the column definition\r\n     */\r\n    public getColumnDefinition(index: number): Nullable<ValueAndUnit> {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return null;\r\n        }\r\n\r\n        return this._columnDefinitions[index];\r\n    }\r\n\r\n    /**\r\n     * Adds a new row to the grid\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the height is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addRowDefinition(height: number, isPixel = false): Grid {\r\n        this._rowDefinitions.push(new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n        this._rowDefinitionObservers.push(this._rowDefinitions[this.rowCount - 1].onChangedObservable.add(() => this._markAsDirty())!);\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new column to the grid\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addColumnDefinition(width: number, isPixel = false): Grid {\r\n        this._columnDefinitions.push(new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n        this._columnDefinitionObservers.push(this._columnDefinitions[this.columnCount - 1].onChangedObservable.add(() => this._markAsDirty())!);\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a row definition\r\n     * @param index defines the index of the row to update\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the weight is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setRowDefinition(index: number, height: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        const current = this._rowDefinitions[index];\r\n        if (current && current.isPixel === isPixel && current.value === height) {\r\n            return this;\r\n        }\r\n\r\n        this._rowDefinitions[index].onChangedObservable.remove(this._rowDefinitionObservers[index]);\r\n        this._rowDefinitions[index] = new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n        this._rowDefinitionObservers[index] = this._rowDefinitions[index].onChangedObservable.add(() => this._markAsDirty())!;\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a column definition\r\n     * @param index defines the index of the column to update\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setColumnDefinition(index: number, width: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        const current = this._columnDefinitions[index];\r\n        if (current && current.isPixel === isPixel && current.value === width) {\r\n            return this;\r\n        }\r\n\r\n        this._columnDefinitions[index].onChangedObservable.remove(this._columnDefinitionObservers[index]);\r\n        this._columnDefinitions[index] = new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n        this._columnDefinitionObservers[index] = this._columnDefinitions[index].onChangedObservable.add(() => this._markAsDirty())!;\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of children stored in a specific cell\r\n     * @param row defines the row to check\r\n     * @param column defines the column to check\r\n     * @returns the list of controls\r\n     */\r\n    public getChildrenAt(row: number, column: number): Nullable<Array<Control>> {\r\n        const cell = this._cells[`${row}:${column}`];\r\n\r\n        if (!cell) {\r\n            return null;\r\n        }\r\n\r\n        return cell.children;\r\n    }\r\n\r\n    /**\r\n     * Gets a string representing the child cell info (row x column)\r\n     * @param child defines the control to get info from\r\n     * @returns a string containing the child cell info (row x column)\r\n     */\r\n    public getChildCellInfo(child: Control): string {\r\n        return child._tag;\r\n    }\r\n\r\n    private _removeCell(cell: Container, key: string) {\r\n        if (!cell) {\r\n            return;\r\n        }\r\n\r\n        super.removeControl(cell);\r\n\r\n        for (const control of cell.children) {\r\n            const childIndex = this._childControls.indexOf(control);\r\n\r\n            if (childIndex !== -1) {\r\n                this._childControls.splice(childIndex, 1);\r\n            }\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    private _offsetCell(previousKey: string, key: string) {\r\n        if (!this._cells[key]) {\r\n            return;\r\n        }\r\n\r\n        this._cells[previousKey] = this._cells[key];\r\n\r\n        for (const control of this._cells[previousKey].children) {\r\n            control._tag = previousKey;\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    /**\r\n     * Remove a column definition at specified index\r\n     * @param index defines the index of the column to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeColumnDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (let x = 0; x < this._rowDefinitions.length; x++) {\r\n            const key = `${x}:${index}`;\r\n            const cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (let x = 0; x < this._rowDefinitions.length; x++) {\r\n            for (let y = index + 1; y < this._columnDefinitions.length; y++) {\r\n                const previousKey = `${x}:${y - 1}`;\r\n                const key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._columnDefinitions[index].onChangedObservable.remove(this._columnDefinitionObservers[index]);\r\n        this._columnDefinitions.splice(index, 1);\r\n        this._columnDefinitionObservers.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a row definition at specified index\r\n     * @param index defines the index of the row to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeRowDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (let y = 0; y < this._columnDefinitions.length; y++) {\r\n            const key = `${index}:${y}`;\r\n            const cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (let y = 0; y < this._columnDefinitions.length; y++) {\r\n            for (let x = index + 1; x < this._rowDefinitions.length; x++) {\r\n                const previousKey = `${x - 1}:${y}`;\r\n                const key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._rowDefinitions[index].onChangedObservable.remove(this._rowDefinitionObservers[index]);\r\n        this._rowDefinitions.splice(index, 1);\r\n        this._rowDefinitionObservers.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current grid\r\n     * @param control defines the control to add\r\n     * @param row defines the row where to add the control (0 by default)\r\n     * @param column defines the column where to add the control (0 by default)\r\n     * @returns the current grid\r\n     */\r\n    public addControl(control: Control, row: number = 0, column: number = 0): Grid {\r\n        if (this._rowDefinitions.length === 0) {\r\n            // Add default row definition\r\n            this.addRowDefinition(1, false);\r\n        }\r\n\r\n        if (this._columnDefinitions.length === 0) {\r\n            // Add default column definition\r\n            this.addColumnDefinition(1, false);\r\n        }\r\n\r\n        if (this._childControls.indexOf(control) !== -1) {\r\n            Tools.Warn(`Control (Name:${control.name}, UniqueId:${control.uniqueId}) is already associated with this grid. You must remove it before reattaching it`);\r\n            return this;\r\n        }\r\n\r\n        const x = Math.min(row, this._rowDefinitions.length - 1);\r\n        const y = Math.min(column, this._columnDefinitions.length - 1);\r\n        const key = `${x}:${y}`;\r\n        let goodContainer = this._cells[key];\r\n\r\n        if (!goodContainer) {\r\n            goodContainer = new Container(key);\r\n            this._cells[key] = goodContainer;\r\n            goodContainer.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            goodContainer.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            goodContainer.clipContent = this.clipContent;\r\n            goodContainer.clipChildren = this.clipChildren;\r\n            super.addControl(goodContainer);\r\n        }\r\n\r\n        goodContainer.addControl(control);\r\n        this._childControls.push(control);\r\n        control._tag = key;\r\n        control.parent = this;\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        const index = this._childControls.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._childControls.splice(index, 1);\r\n        }\r\n\r\n        const cell = this._cells[control._tag];\r\n\r\n        if (cell) {\r\n            cell.removeControl(control);\r\n            control._tag = null;\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Grid\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Grid\";\r\n    }\r\n\r\n    protected _getGridDefinitions(definitionCallback: (lefts: number[], tops: number[], widths: number[], heights: number[]) => void) {\r\n        const widths = [];\r\n        const heights = [];\r\n        const lefts = [];\r\n        const tops = [];\r\n\r\n        let availableWidth = this._currentMeasure.width;\r\n        let globalWidthPercentage = 0;\r\n        let availableHeight = this._currentMeasure.height;\r\n        let globalHeightPercentage = 0;\r\n\r\n        // Heights\r\n        let index = 0;\r\n        for (const rowDefinition of this._rowDefinitions) {\r\n            if (rowDefinition.isPixel) {\r\n                const height = rowDefinition.getValue(this._host);\r\n                availableHeight -= height;\r\n                heights[index] = height;\r\n            } else {\r\n                globalHeightPercentage += rowDefinition.value;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let top = 0;\r\n        index = 0;\r\n        for (const rowDefinition of this._rowDefinitions) {\r\n            tops.push(top);\r\n\r\n            if (!rowDefinition.isPixel) {\r\n                const height = Math.round((rowDefinition.value / globalHeightPercentage) * availableHeight);\r\n                top += height;\r\n                heights[index] = height;\r\n            } else {\r\n                top += rowDefinition.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        // Widths\r\n        index = 0;\r\n        for (const columnDefinition of this._columnDefinitions) {\r\n            if (columnDefinition.isPixel) {\r\n                const width = columnDefinition.getValue(this._host);\r\n                availableWidth -= width;\r\n                widths[index] = width;\r\n            } else {\r\n                globalWidthPercentage += columnDefinition.value;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let left = 0;\r\n        index = 0;\r\n        for (const columnDefinition of this._columnDefinitions) {\r\n            lefts.push(left);\r\n            if (!columnDefinition.isPixel) {\r\n                const width = Math.round((columnDefinition.value / globalWidthPercentage) * availableWidth);\r\n                left += width;\r\n                widths[index] = width;\r\n            } else {\r\n                left += columnDefinition.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        definitionCallback(lefts, tops, widths, heights);\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        this._getGridDefinitions((lefts: number[], tops: number[], widths: number[], heights: number[]) => {\r\n            // Setting child sizes\r\n            for (const key in this._cells) {\r\n                if (!Object.prototype.hasOwnProperty.call(this._cells, key)) {\r\n                    continue;\r\n                }\r\n                const split = key.split(\":\");\r\n                const x = parseInt(split[0]);\r\n                const y = parseInt(split[1]);\r\n                const cell = this._cells[key];\r\n\r\n                cell.leftInPixels = lefts[y];\r\n                cell.topInPixels = tops[x];\r\n                cell.widthInPixels = widths[y];\r\n                cell.heightInPixels = heights[x];\r\n                cell._left.ignoreAdaptiveScaling = true;\r\n                cell._top.ignoreAdaptiveScaling = true;\r\n                cell._width.ignoreAdaptiveScaling = true;\r\n                cell._height.ignoreAdaptiveScaling = true;\r\n            }\r\n        });\r\n\r\n        super._additionalProcessing(parentMeasure, context);\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (const key in this._cells) {\r\n            if (!Object.prototype.hasOwnProperty.call(this._cells, key)) {\r\n                continue;\r\n            }\r\n\r\n            const child = this._cells[key];\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    public _renderHighlightSpecific(context: ICanvasRenderingContext): void {\r\n        super._renderHighlightSpecific(context);\r\n\r\n        this._getGridDefinitions((lefts: number[], tops: number[], widths: number[], heights: number[]) => {\r\n            // Columns\r\n            for (let index = 0; index < lefts.length; index++) {\r\n                const left = this._currentMeasure.left + lefts[index] + widths[index];\r\n                context.beginPath();\r\n                context.moveTo(left, this._currentMeasure.top);\r\n                context.lineTo(left, this._currentMeasure.top + this._currentMeasure.height);\r\n                context.stroke();\r\n            }\r\n\r\n            // Rows\r\n            for (let index = 0; index < tops.length; index++) {\r\n                const top = this._currentMeasure.top + tops[index] + heights[index];\r\n                context.beginPath();\r\n                context.moveTo(this._currentMeasure.left, top);\r\n                context.lineTo(this._currentMeasure.left + this._currentMeasure.width, top);\r\n                context.stroke();\r\n            }\r\n        });\r\n\r\n        context.restore();\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (const control of this._childControls) {\r\n            control.dispose();\r\n        }\r\n        for (let index = 0; index < this._rowDefinitions.length; index++) {\r\n            this._rowDefinitions[index].onChangedObservable.remove(this._rowDefinitionObservers[index]);\r\n        }\r\n        for (let index = 0; index < this._columnDefinitions.length; index++) {\r\n            this._columnDefinitions[index].onChangedObservable.remove(this._columnDefinitionObservers[index]);\r\n        }\r\n        this._rowDefinitionObservers.length = 0;\r\n        this._rowDefinitions.length = 0;\r\n        this._columnDefinitionObservers.length = 0;\r\n        this._columnDefinitions.length = 0;\r\n        this._cells = {};\r\n        this._childControls.length = 0;\r\n    }\r\n\r\n    /**\r\n     * Serializes the current control\r\n     * @param serializationObject defined the JSON serialized object\r\n     */\r\n    public serialize(serializationObject: any) {\r\n        super.serialize(serializationObject);\r\n        serializationObject.columnCount = this.columnCount;\r\n        serializationObject.rowCount = this.rowCount;\r\n        serializationObject.columns = [];\r\n        serializationObject.rows = [];\r\n        serializationObject.tags = [];\r\n        for (let i = 0; i < this.columnCount; ++i) {\r\n            const cd = this.getColumnDefinition(i);\r\n            const childSerializationObject = { value: cd?.getValue(this.host), unit: cd?.unit };\r\n            serializationObject.columns.push(childSerializationObject);\r\n        }\r\n        for (let i = 0; i < this.rowCount; ++i) {\r\n            const rd = this.getRowDefinition(i);\r\n            const childSerializationObject = { value: rd?.getValue(this.host), unit: rd?.unit };\r\n            serializationObject.rows.push(childSerializationObject);\r\n        }\r\n        this.children.forEach((child) => {\r\n            serializationObject.tags.push(child._tag);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _parseFromContent(serializedObject: any, host: AdvancedDynamicTexture) {\r\n        super._parseFromContent(serializedObject, host);\r\n        const children: Control[] = [];\r\n        this.children.forEach((child) => {\r\n            children.push(child);\r\n        });\r\n        this.removeRowDefinition(0);\r\n        this.removeColumnDefinition(0);\r\n        for (let i = 0; i < serializedObject.columnCount; ++i) {\r\n            const columnValue = serializedObject.columns[i].value;\r\n            const unit = serializedObject.columns[i].unit;\r\n            this.addColumnDefinition(columnValue, unit === 1 ? true : false);\r\n        }\r\n        for (let i = 0; i < serializedObject.rowCount; ++i) {\r\n            const rowValue = serializedObject.rows[i].value;\r\n            const unit = serializedObject.rows[i].unit;\r\n            this.addRowDefinition(rowValue, unit === 1 ? true : false);\r\n        }\r\n\r\n        for (let i = 0; i < children.length; ++i) {\r\n            const cellInfo = serializedObject.tags[i];\r\n            let rowNumber = parseInt(cellInfo.substring(0, cellInfo.search(\":\")));\r\n            if (isNaN(rowNumber)) {\r\n                rowNumber = 0;\r\n            }\r\n            let columnNumber = parseInt(cellInfo.substring(cellInfo.search(\":\") + 1));\r\n            if (isNaN(columnNumber)) {\r\n                columnNumber = 0;\r\n            }\r\n            this.addControl(children[i], rowNumber, columnNumber);\r\n        }\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Grid\", Grid);\r\n","import { Observable } from \"core/Misc/observable\";\r\nimport type { Vector2 } from \"core/Maths/math.vector\";\r\n\r\nimport { Control } from \"./control\";\r\nimport type { Measure } from \"../measure\";\r\nimport { InputText } from \"./inputText\";\r\nimport { Rectangle } from \"./rectangle\";\r\nimport { Button } from \"./button\";\r\nimport { Grid } from \"./grid\";\r\nimport type { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport { TextBlock } from \"../controls/textBlock\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvas, ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport { EngineStore } from \"core/Engines/engineStore\";\r\n\r\n/** Class used to create color pickers */\r\nexport class ColorPicker extends Control {\r\n    private static _Epsilon = 0.000001;\r\n    private _colorWheelCanvas: ICanvas;\r\n\r\n    private _value: Color3 = Color3.Red();\r\n    private _tmpColor = new Color3();\r\n\r\n    private _pointerStartedOnSquare = false;\r\n    private _pointerStartedOnWheel = false;\r\n\r\n    private _squareLeft = 0;\r\n    private _squareTop = 0;\r\n    private _squareSize = 0;\r\n\r\n    private _h = 360;\r\n    private _s = 1;\r\n    private _v = 1;\r\n\r\n    private _lastPointerDownId = -1;\r\n\r\n    /**\r\n     * Observable raised when the value changes\r\n     */\r\n    public onValueChangedObservable = new Observable<Color3>();\r\n\r\n    /** Gets or sets the color of the color picker */\r\n    @serialize()\r\n    public get value(): Color3 {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: Color3) {\r\n        if (this._value.equals(value)) {\r\n            return;\r\n        }\r\n\r\n        this._value.copyFrom(value);\r\n\r\n        this._value.toHSVToRef(this._tmpColor);\r\n\r\n        this._h = this._tmpColor.r;\r\n        this._s = Math.max(this._tmpColor.g, 0.00001);\r\n        this._v = Math.max(this._tmpColor.b, 0.00001);\r\n\r\n        this._markAsDirty();\r\n\r\n        if (this._value.r <= ColorPicker._Epsilon) {\r\n            this._value.r = 0;\r\n        }\r\n\r\n        if (this._value.g <= ColorPicker._Epsilon) {\r\n            this._value.g = 0;\r\n        }\r\n\r\n        if (this._value.b <= ColorPicker._Epsilon) {\r\n            this._value.b = 0;\r\n        }\r\n\r\n        if (this._value.r >= 1.0 - ColorPicker._Epsilon) {\r\n            this._value.r = 1.0;\r\n        }\r\n\r\n        if (this._value.g >= 1.0 - ColorPicker._Epsilon) {\r\n            this._value.g = 1.0;\r\n        }\r\n\r\n        if (this._value.b >= 1.0 - ColorPicker._Epsilon) {\r\n            this._value.b = 1.0;\r\n        }\r\n\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control width\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            if (this._width.getValue(this._host) === 0) {\r\n                value = \"1px\";\r\n                this._width.fromString(value);\r\n            }\r\n            this._height.fromString(value);\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control height\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /** Gets or sets control height */\r\n    public set height(value: string | number) {\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            if (this._height.getValue(this._host) === 0) {\r\n                value = \"1px\";\r\n                this._height.fromString(value);\r\n            }\r\n            this._width.fromString(value);\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control size */\r\n    @serialize()\r\n    public get size(): string | number {\r\n        return this.width;\r\n    }\r\n\r\n    public set size(value: string | number) {\r\n        this.width = value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new ColorPicker\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.value = new Color3(0.88, 0.1, 0.1);\r\n        this.size = \"200px\";\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ColorPicker\";\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _preMeasure(parentMeasure: Measure): void {\r\n        if (parentMeasure.width < parentMeasure.height) {\r\n            this._currentMeasure.height = parentMeasure.width;\r\n        } else {\r\n            this._currentMeasure.width = parentMeasure.height;\r\n        }\r\n    }\r\n\r\n    private _updateSquareProps(): void {\r\n        const radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * 0.5;\r\n        const wheelThickness = radius * 0.2;\r\n        const innerDiameter = (radius - wheelThickness) * 2;\r\n        const squareSize = innerDiameter / Math.sqrt(2);\r\n        const offset = radius - squareSize * 0.5;\r\n\r\n        this._squareLeft = this._currentMeasure.left + offset;\r\n        this._squareTop = this._currentMeasure.top + offset;\r\n        this._squareSize = squareSize;\r\n    }\r\n\r\n    private _drawGradientSquare(hueValue: number, left: number, top: number, width: number, height: number, context: ICanvasRenderingContext) {\r\n        const lgh = context.createLinearGradient(left, top, width + left, top);\r\n        lgh.addColorStop(0, \"#fff\");\r\n        lgh.addColorStop(1, \"hsl(\" + hueValue + \", 100%, 50%)\");\r\n\r\n        context.fillStyle = lgh;\r\n        context.fillRect(left, top, width, height);\r\n\r\n        const lgv = context.createLinearGradient(left, top, left, height + top);\r\n        lgv.addColorStop(0, \"rgba(0,0,0,0)\");\r\n        lgv.addColorStop(1, \"#000\");\r\n\r\n        context.fillStyle = lgv;\r\n        context.fillRect(left, top, width, height);\r\n    }\r\n\r\n    private _drawCircle(centerX: number, centerY: number, radius: number, context: ICanvasRenderingContext) {\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius + 1, 0, 2 * Math.PI, false);\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = \"#333333\";\r\n        context.stroke();\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = \"#ffffff\";\r\n        context.stroke();\r\n    }\r\n\r\n    private _createColorWheelCanvas(radius: number, thickness: number): ICanvas {\r\n        // Shoudl abstract platform instead of using LastCreatedEngine\r\n        const engine = EngineStore.LastCreatedEngine;\r\n        if (!engine) {\r\n            throw new Error(\"Invalid engine. Unable to create a canvas.\");\r\n        }\r\n        const canvas = engine.createCanvas(radius * 2, radius * 2);\r\n        const context = canvas.getContext(\"2d\");\r\n        const image = context.getImageData(0, 0, radius * 2, radius * 2);\r\n        const data = image.data;\r\n\r\n        const color = this._tmpColor;\r\n        const maxDistSq = radius * radius;\r\n        const innerRadius = radius - thickness;\r\n        const minDistSq = innerRadius * innerRadius;\r\n\r\n        for (let x = -radius; x < radius; x++) {\r\n            for (let y = -radius; y < radius; y++) {\r\n                const distSq = x * x + y * y;\r\n\r\n                if (distSq > maxDistSq || distSq < minDistSq) {\r\n                    continue;\r\n                }\r\n\r\n                const dist = Math.sqrt(distSq);\r\n                const ang = Math.atan2(y, x);\r\n\r\n                Color3.HSVtoRGBToRef((ang * 180) / Math.PI + 180, dist / radius, 1, color);\r\n\r\n                const index = (x + radius + (y + radius) * 2 * radius) * 4;\r\n\r\n                data[index] = color.r * 255;\r\n                data[index + 1] = color.g * 255;\r\n                data[index + 2] = color.b * 255;\r\n                let alphaRatio = (dist - innerRadius) / (radius - innerRadius);\r\n\r\n                //apply less alpha to bigger color pickers\r\n                let alphaAmount = 0.2;\r\n                const maxAlpha = 0.2;\r\n                const minAlpha = 0.04;\r\n                const lowerRadius = 50;\r\n                const upperRadius = 150;\r\n\r\n                if (radius < lowerRadius) {\r\n                    alphaAmount = maxAlpha;\r\n                } else if (radius > upperRadius) {\r\n                    alphaAmount = minAlpha;\r\n                } else {\r\n                    alphaAmount = ((minAlpha - maxAlpha) * (radius - lowerRadius)) / (upperRadius - lowerRadius) + maxAlpha;\r\n                }\r\n\r\n                alphaRatio = (dist - innerRadius) / (radius - innerRadius);\r\n\r\n                if (alphaRatio < alphaAmount) {\r\n                    data[index + 3] = 255 * (alphaRatio / alphaAmount);\r\n                } else if (alphaRatio > 1 - alphaAmount) {\r\n                    data[index + 3] = 255 * (1.0 - (alphaRatio - (1 - alphaAmount)) / alphaAmount);\r\n                } else {\r\n                    data[index + 3] = 255;\r\n                }\r\n            }\r\n        }\r\n\r\n        context.putImageData(image, 0, 0);\r\n\r\n        return canvas;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        const radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * 0.5;\r\n        const wheelThickness = radius * 0.2;\r\n        const left = this._currentMeasure.left;\r\n        const top = this._currentMeasure.top;\r\n\r\n        if (!this._colorWheelCanvas || this._colorWheelCanvas.width != radius * 2) {\r\n            this._colorWheelCanvas = this._createColorWheelCanvas(radius, wheelThickness);\r\n        }\r\n\r\n        this._updateSquareProps();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n\r\n            context.fillRect(this._squareLeft, this._squareTop, this._squareSize, this._squareSize);\r\n        }\r\n\r\n        context.drawImage(this._colorWheelCanvas, left, top);\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        this._drawGradientSquare(this._h, this._squareLeft, this._squareTop, this._squareSize, this._squareSize, context);\r\n\r\n        let cx = this._squareLeft + this._squareSize * this._s;\r\n        let cy = this._squareTop + this._squareSize * (1 - this._v);\r\n\r\n        this._drawCircle(cx, cy, radius * 0.04, context);\r\n\r\n        const dist = radius - wheelThickness * 0.5;\r\n        cx = left + radius + Math.cos(((this._h - 180) * Math.PI) / 180) * dist;\r\n        cy = top + radius + Math.sin(((this._h - 180) * Math.PI) / 180) * dist;\r\n        this._drawCircle(cx, cy, wheelThickness * 0.35, context);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    private _updateValueFromPointer(x: number, y: number): void {\r\n        if (this._pointerStartedOnWheel) {\r\n            const radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * 0.5;\r\n            const centerX = radius + this._currentMeasure.left;\r\n            const centerY = radius + this._currentMeasure.top;\r\n            this._h = (Math.atan2(y - centerY, x - centerX) * 180) / Math.PI + 180;\r\n        } else if (this._pointerStartedOnSquare) {\r\n            this._updateSquareProps();\r\n            this._s = (x - this._squareLeft) / this._squareSize;\r\n            this._v = 1 - (y - this._squareTop) / this._squareSize;\r\n            this._s = Math.min(this._s, 1);\r\n            this._s = Math.max(this._s, ColorPicker._Epsilon);\r\n            this._v = Math.min(this._v, 1);\r\n            this._v = Math.max(this._v, ColorPicker._Epsilon);\r\n        }\r\n\r\n        Color3.HSVtoRGBToRef(this._h, this._s, this._v, this._tmpColor);\r\n\r\n        this.value = this._tmpColor;\r\n    }\r\n\r\n    private _isPointOnSquare(x: number, y: number): boolean {\r\n        this._updateSquareProps();\r\n\r\n        const left = this._squareLeft;\r\n        const top = this._squareTop;\r\n        const size = this._squareSize;\r\n\r\n        if (x >= left && x <= left + size && y >= top && y <= top + size) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _isPointOnWheel(x: number, y: number): boolean {\r\n        const radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * 0.5;\r\n        const centerX = radius + this._currentMeasure.left;\r\n        const centerY = radius + this._currentMeasure.top;\r\n        const wheelThickness = radius * 0.2;\r\n        const innerRadius = radius - wheelThickness;\r\n        const radiusSq = radius * radius;\r\n        const innerRadiusSq = innerRadius * innerRadius;\r\n\r\n        const dx = x - centerX;\r\n        const dy = y - centerY;\r\n\r\n        const distSq = dx * dx + dy * dy;\r\n\r\n        if (distSq <= radiusSq && distSq >= innerRadiusSq) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isReadOnly) {\r\n            return true;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._pointerStartedOnSquare = false;\r\n        this._pointerStartedOnWheel = false;\r\n\r\n        // Invert transform\r\n        this._invertTransformMatrix.transformCoordinates(coordinates.x, coordinates.y, this._transformedPosition);\r\n\r\n        const x = this._transformedPosition.x;\r\n        const y = this._transformedPosition.y;\r\n\r\n        if (this._isPointOnSquare(x, y)) {\r\n            this._pointerStartedOnSquare = true;\r\n        } else if (this._isPointOnWheel(x, y)) {\r\n            this._pointerStartedOnWheel = true;\r\n        }\r\n\r\n        this._updateValueFromPointer(x, y);\r\n        this._host._capturingControl[pointerId] = this;\r\n        this._lastPointerDownId = pointerId;\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2, pointerId: number, pi: PointerInfoBase): void {\r\n        // Only listen to pointer move events coming from the last pointer to click on the element (To support dual vr controller interaction)\r\n        if (pointerId != this._lastPointerDownId) {\r\n            return;\r\n        }\r\n\r\n        if (!this.isReadOnly) {\r\n            // Invert transform\r\n            this._invertTransformMatrix.transformCoordinates(coordinates.x, coordinates.y, this._transformedPosition);\r\n\r\n            const x = this._transformedPosition.x;\r\n            const y = this._transformedPosition.y;\r\n\r\n            if (this._pointerIsDown) {\r\n                this._updateValueFromPointer(x, y);\r\n            }\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates, pointerId, pi);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean, pi: PointerInfoBase): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick, pi);\r\n    }\r\n\r\n    public _onCanvasBlur() {\r\n        this._forcePointerUp();\r\n        super._onCanvasBlur();\r\n    }\r\n\r\n    /**\r\n     * This function expands the color picker by creating a color picker dialog with manual\r\n     * color value input and the ability to save colors into an array to be used later in\r\n     * subsequent launches of the dialogue.\r\n     * @param advancedTexture defines the AdvancedDynamicTexture the dialog is assigned to\r\n     * @param options defines size for dialog and options for saved colors. Also accepts last color picked as hex string and saved colors array as hex strings.\r\n     * @param options.pickerWidth\r\n     * @param options.pickerHeight\r\n     * @param options.headerHeight\r\n     * @param options.lastColor\r\n     * @param options.swatchLimit\r\n     * @param options.numSwatchesPerLine\r\n     * @param options.savedColors\r\n     * @returns picked color as a hex string and the saved colors array as hex strings.\r\n     */\r\n    public static ShowPickerDialogAsync(\r\n        advancedTexture: AdvancedDynamicTexture,\r\n        options: {\r\n            pickerWidth?: string;\r\n            pickerHeight?: string;\r\n            headerHeight?: string;\r\n            lastColor?: string;\r\n            swatchLimit?: number;\r\n            numSwatchesPerLine?: number;\r\n            savedColors?: Array<string>;\r\n        }\r\n    ): Promise<{\r\n        savedColors?: string[];\r\n        pickedColor: string;\r\n    }> {\r\n        return new Promise((resolve) => {\r\n            // Default options\r\n            options.pickerWidth = options.pickerWidth || \"640px\";\r\n            options.pickerHeight = options.pickerHeight || \"400px\";\r\n            options.headerHeight = options.headerHeight || \"35px\";\r\n            options.lastColor = options.lastColor || \"#000000\";\r\n            options.swatchLimit = options.swatchLimit || 20;\r\n            options.numSwatchesPerLine = options.numSwatchesPerLine || 10;\r\n\r\n            // Window size settings\r\n            const drawerMaxRows: number = options.swatchLimit / options.numSwatchesPerLine;\r\n            const rawSwatchSize: number = parseFloat(<string>options.pickerWidth) / options.numSwatchesPerLine;\r\n            const gutterSize: number = Math.floor(rawSwatchSize * 0.25);\r\n            const colGutters: number = gutterSize * (options.numSwatchesPerLine + 1);\r\n            const swatchSize: number = Math.floor((parseFloat(<string>options.pickerWidth) - colGutters) / options.numSwatchesPerLine);\r\n            const drawerMaxSize: number = swatchSize * drawerMaxRows + gutterSize * (drawerMaxRows + 1);\r\n            const containerSize: string = (parseInt(options.pickerHeight) + drawerMaxSize + Math.floor(swatchSize * 0.25)).toString() + \"px\";\r\n\r\n            // Button Colors\r\n            const buttonColor: string = \"#c0c0c0\";\r\n            const buttonBackgroundColor: string = \"#535353\";\r\n            const buttonBackgroundHoverColor: string = \"#414141\";\r\n            const buttonBackgroundClickColor: string = \"515151\";\r\n            const buttonDisabledColor: string = \"#555555\";\r\n            const buttonDisabledBackgroundColor: string = \"#454545\";\r\n            const currentSwatchesOutlineColor: string = \"#404040\";\r\n            const luminanceLimitColor: Color3 = Color3.FromHexString(\"#dddddd\");\r\n            const luminanceLimit: number = luminanceLimitColor.r + luminanceLimitColor.g + luminanceLimitColor.b;\r\n            const iconColorDark: string = \"#aaaaaa\";\r\n            const iconColorLight: string = \"#ffffff\";\r\n\r\n            // Button settings\r\n            let buttonFontSize: number;\r\n            let butEdit: Button;\r\n\r\n            // Input Text Colors\r\n            const inputFieldLabels: string[] = [\"R\", \"G\", \"B\"];\r\n            const inputTextBackgroundColor: string = \"#454545\";\r\n            const inputTextColor: string = \"#f0f0f0\";\r\n\r\n            // This int is used for naming swatches and serves as the index for calling them from the list\r\n            let swatchNumber: number;\r\n\r\n            // Menu Panel options. We need to know if the swatchDrawer exists so we can create it if needed.\r\n            let swatchDrawer: Grid;\r\n            let editSwatchMode: boolean = false;\r\n\r\n            // Color InputText fields that will be updated upon value change\r\n            let butSave: Button;\r\n            let lastVal: string;\r\n            let activeField: string;\r\n\r\n            // Dialog menu container which will contain both the main dialogue window and the swatch drawer which opens once a color is saved.\r\n            const dialogContainer: Grid = new Grid();\r\n            dialogContainer.name = \"Dialog Container\";\r\n            dialogContainer.width = options.pickerWidth;\r\n            if (options.savedColors) {\r\n                dialogContainer.height = containerSize;\r\n                const topRow: number = parseInt(options.pickerHeight) / parseInt(containerSize);\r\n                dialogContainer.addRowDefinition(topRow, false);\r\n                dialogContainer.addRowDefinition(1.0 - topRow, false);\r\n            } else {\r\n                dialogContainer.height = options.pickerHeight;\r\n                dialogContainer.addRowDefinition(1.0, false);\r\n            }\r\n            advancedTexture.addControl(dialogContainer);\r\n\r\n            // Swatch drawer which contains all saved color buttons\r\n            if (options.savedColors) {\r\n                swatchDrawer = new Grid();\r\n                swatchDrawer.name = \"Swatch Drawer\";\r\n                swatchDrawer.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n                swatchDrawer.background = buttonBackgroundColor;\r\n                swatchDrawer.width = options.pickerWidth!;\r\n                const initialRows: number = options.savedColors.length / options.numSwatchesPerLine;\r\n                let gutterCount: number;\r\n                if (initialRows == 0) {\r\n                    gutterCount = 0;\r\n                } else {\r\n                    gutterCount = initialRows + 1;\r\n                }\r\n                swatchDrawer.height = (swatchSize * initialRows + gutterCount * gutterSize).toString() + \"px\";\r\n                swatchDrawer.top = Math.floor(swatchSize * 0.25).toString() + \"px\";\r\n                for (let i = 0; i < Math.ceil(options.savedColors.length / options.numSwatchesPerLine) * 2 + 1; i++) {\r\n                    if (i % 2 != 0) {\r\n                        swatchDrawer.addRowDefinition(swatchSize, true);\r\n                    } else {\r\n                        swatchDrawer.addRowDefinition(gutterSize, true);\r\n                    }\r\n                }\r\n                for (let i = 0; i < options.numSwatchesPerLine! * 2 + 1; i++) {\r\n                    if (i % 2 != 0) {\r\n                        swatchDrawer.addColumnDefinition(swatchSize, true);\r\n                    } else {\r\n                        swatchDrawer.addColumnDefinition(gutterSize, true);\r\n                    }\r\n                }\r\n                dialogContainer.addControl(swatchDrawer, 1, 0);\r\n            }\r\n\r\n            // Picker container\r\n            const pickerPanel: Grid = new Grid();\r\n            pickerPanel.name = \"Picker Panel\";\r\n            pickerPanel.height = options.pickerHeight;\r\n            const panelHead: number = parseInt(options.headerHeight) / parseInt(options.pickerHeight);\r\n            const pickerPanelRows: number[] = [panelHead, 1.0 - panelHead];\r\n            pickerPanel.addRowDefinition(pickerPanelRows[0], false);\r\n            pickerPanel.addRowDefinition(pickerPanelRows[1], false);\r\n            dialogContainer.addControl(pickerPanel, 0, 0);\r\n\r\n            // Picker container header\r\n            const header: Rectangle = new Rectangle();\r\n            header.name = \"Dialogue Header Bar\";\r\n            header.background = \"#cccccc\";\r\n            header.thickness = 0;\r\n            pickerPanel.addControl(header, 0, 0);\r\n\r\n            // Header close button\r\n            const closeButton: Button = Button.CreateSimpleButton(\"closeButton\", \"a\");\r\n            closeButton.fontFamily = \"coreglyphs\";\r\n            const headerColor3: Color3 = Color3.FromHexString(header.background);\r\n            const closeIconColor = new Color3(1.0 - headerColor3.r, 1.0 - headerColor3.g, 1.0 - headerColor3.b);\r\n            closeButton.color = closeIconColor.toHexString();\r\n            closeButton.fontSize = Math.floor(parseInt(options.headerHeight!) * 0.6);\r\n            closeButton.textBlock!.textVerticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n            closeButton.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_RIGHT;\r\n            closeButton.height = closeButton.width = options.headerHeight;\r\n            closeButton.background = header.background;\r\n            closeButton.thickness = 0;\r\n            closeButton.pointerDownAnimation = () => {};\r\n            closeButton.pointerUpAnimation = () => {\r\n                closeButton.background = header.background;\r\n            };\r\n            closeButton.pointerEnterAnimation = () => {\r\n                closeButton.color = header.background;\r\n                closeButton.background = \"red\";\r\n            };\r\n            closeButton.pointerOutAnimation = () => {\r\n                closeButton.color = closeIconColor.toHexString();\r\n                closeButton.background = header.background;\r\n            };\r\n            closeButton.onPointerClickObservable.add(() => {\r\n                closePicker(currentSwatch.background);\r\n            });\r\n            pickerPanel.addControl(closeButton, 0, 0);\r\n\r\n            // Dialog container body\r\n            const dialogBody: Grid = new Grid();\r\n            dialogBody.name = \"Dialogue Body\";\r\n            dialogBody.background = buttonBackgroundColor;\r\n            const dialogBodyCols: number[] = [0.4375, 0.5625];\r\n            dialogBody.addRowDefinition(1.0, false);\r\n            dialogBody.addColumnDefinition(dialogBodyCols[0], false);\r\n            dialogBody.addColumnDefinition(dialogBodyCols[1], false);\r\n            pickerPanel.addControl(dialogBody, 1, 0);\r\n\r\n            // Picker grid\r\n            const pickerGrid: Grid = new Grid();\r\n            pickerGrid.name = \"Picker Grid\";\r\n            pickerGrid.addRowDefinition(0.85, false);\r\n            pickerGrid.addRowDefinition(0.15, false);\r\n            dialogBody.addControl(pickerGrid, 0, 0);\r\n\r\n            //  Picker control\r\n            const picker = new ColorPicker();\r\n            picker.name = \"GUI Color Picker\";\r\n            if (options.pickerHeight < options.pickerWidth) {\r\n                picker.width = 0.89;\r\n            } else {\r\n                picker.height = 0.89;\r\n            }\r\n            picker.value = Color3.FromHexString(options.lastColor);\r\n            picker.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n            picker.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n            picker.onPointerDownObservable.add(() => {\r\n                activeField = picker.name!;\r\n                lastVal = \"\";\r\n                editSwatches(false);\r\n            });\r\n            picker.onValueChangedObservable.add(function (value) {\r\n                // value is a color3\r\n                if (activeField == picker.name) {\r\n                    updateValues(value, picker.name);\r\n                }\r\n            });\r\n            pickerGrid.addControl(picker, 0, 0);\r\n\r\n            // Picker body right quarant\r\n            const pickerBodyRight: Grid = new Grid();\r\n            pickerBodyRight.name = \"Dialogue Right Half\";\r\n            pickerBodyRight.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            const pickerBodyRightRows: number[] = [0.514, 0.486];\r\n            pickerBodyRight.addRowDefinition(pickerBodyRightRows[0], false);\r\n            pickerBodyRight.addRowDefinition(pickerBodyRightRows[1], false);\r\n            dialogBody.addControl(pickerBodyRight, 1, 1);\r\n\r\n            // Picker container swatches and buttons\r\n            const pickerSwatchesButtons: Grid = new Grid();\r\n            pickerSwatchesButtons.name = \"Swatches and Buttons\";\r\n            const pickerButtonsCol: number[] = [0.417, 0.583];\r\n            pickerSwatchesButtons.addRowDefinition(1.0, false);\r\n            pickerSwatchesButtons.addColumnDefinition(pickerButtonsCol[0], false);\r\n            pickerSwatchesButtons.addColumnDefinition(pickerButtonsCol[1], false);\r\n            pickerBodyRight.addControl(pickerSwatchesButtons, 0, 0);\r\n\r\n            // Picker Swatches quadrant\r\n            const pickerSwatches: Grid = new Grid();\r\n            pickerSwatches.name = \"New and Current Swatches\";\r\n            const pickeSwatchesRows: number[] = [0.04, 0.16, 0.64, 0.16];\r\n            pickerSwatches.addRowDefinition(pickeSwatchesRows[0], false);\r\n            pickerSwatches.addRowDefinition(pickeSwatchesRows[1], false);\r\n            pickerSwatches.addRowDefinition(pickeSwatchesRows[2], false);\r\n            pickerSwatches.addRowDefinition(pickeSwatchesRows[3], false);\r\n            pickerSwatchesButtons.addControl(pickerSwatches, 0, 0);\r\n\r\n            // Active swatches\r\n            const activeSwatches: Grid = new Grid();\r\n            activeSwatches.name = \"Active Swatches\";\r\n            activeSwatches.width = 0.67;\r\n            activeSwatches.addRowDefinition(0.5, false);\r\n            activeSwatches.addRowDefinition(0.5, false);\r\n            pickerSwatches.addControl(activeSwatches, 2, 0);\r\n\r\n            const labelWidth: number = Math.floor(parseInt(options.pickerWidth) * dialogBodyCols[1] * pickerButtonsCol[0] * 0.11);\r\n            const labelHeight: number = Math.floor(parseInt(options.pickerHeight) * pickerPanelRows[1] * pickerBodyRightRows[0] * pickeSwatchesRows[1] * 0.5);\r\n\r\n            let labelTextSize: number;\r\n            if (options.pickerWidth > options.pickerHeight) {\r\n                labelTextSize = labelHeight;\r\n            } else {\r\n                labelTextSize = labelWidth;\r\n            }\r\n            // New color swatch and previous color button\r\n            const newText: TextBlock = new TextBlock();\r\n            newText.text = \"new\";\r\n            newText.name = \"New Color Label\";\r\n            newText.color = buttonColor;\r\n            newText.fontSize = labelTextSize;\r\n            pickerSwatches.addControl(newText, 1, 0);\r\n\r\n            const newSwatch = new Rectangle();\r\n            newSwatch.name = \"New Color Swatch\";\r\n            newSwatch.background = options.lastColor;\r\n            newSwatch.thickness = 0;\r\n            activeSwatches.addControl(newSwatch, 0, 0);\r\n\r\n            const currentSwatch: Button = Button.CreateSimpleButton(\"currentSwatch\", \"\");\r\n            currentSwatch.background = options.lastColor;\r\n            currentSwatch.thickness = 0;\r\n            currentSwatch.onPointerClickObservable.add(() => {\r\n                const revertColor = Color3.FromHexString(currentSwatch.background);\r\n                updateValues(revertColor, currentSwatch.name!);\r\n                editSwatches(false);\r\n            });\r\n            currentSwatch.pointerDownAnimation = () => {};\r\n            currentSwatch.pointerUpAnimation = () => {};\r\n            currentSwatch.pointerEnterAnimation = () => {};\r\n            currentSwatch.pointerOutAnimation = () => {};\r\n            activeSwatches.addControl(currentSwatch, 1, 0);\r\n\r\n            const swatchOutline: Rectangle = new Rectangle();\r\n            swatchOutline.name = \"Swatch Outline\";\r\n            swatchOutline.width = 0.67;\r\n            swatchOutline.thickness = 2;\r\n            swatchOutline.color = currentSwatchesOutlineColor;\r\n            swatchOutline.isHitTestVisible = false;\r\n            pickerSwatches.addControl(swatchOutline, 2, 0);\r\n\r\n            const currentText: TextBlock = new TextBlock();\r\n            currentText.name = \"Current Color Label\";\r\n            currentText.text = \"current\";\r\n            currentText.color = buttonColor;\r\n            currentText.fontSize = labelTextSize;\r\n            pickerSwatches.addControl(currentText, 3, 0);\r\n\r\n            // Buttons grid\r\n            const buttonGrid: Grid = new Grid();\r\n            buttonGrid.name = \"Button Grid\";\r\n            buttonGrid.height = 0.8;\r\n            const buttonGridRows: number = 1 / 3;\r\n            buttonGrid.addRowDefinition(buttonGridRows, false);\r\n            buttonGrid.addRowDefinition(buttonGridRows, false);\r\n            buttonGrid.addRowDefinition(buttonGridRows, false);\r\n            pickerSwatchesButtons.addControl(buttonGrid, 0, 1);\r\n\r\n            // Determine pixel width and height for all buttons from overall panel dimensions\r\n            const buttonWidth = Math.floor(parseInt(options.pickerWidth) * dialogBodyCols[1] * pickerButtonsCol[1] * 0.67).toString() + \"px\";\r\n            const buttonHeight =\r\n                Math.floor(\r\n                    parseInt(options.pickerHeight) * pickerPanelRows[1] * pickerBodyRightRows[0] * (parseFloat(buttonGrid.height.toString()) / 100) * buttonGridRows * 0.7\r\n                ).toString() + \"px\";\r\n\r\n            // Determine button type size\r\n            if (parseFloat(buttonWidth) > parseFloat(buttonHeight)) {\r\n                buttonFontSize = Math.floor(parseFloat(buttonHeight) * 0.45);\r\n            } else {\r\n                buttonFontSize = Math.floor(parseFloat(buttonWidth) * 0.11);\r\n            }\r\n\r\n            // Panel Buttons\r\n            const butOK: Button = Button.CreateSimpleButton(\"butOK\", \"OK\");\r\n            butOK.width = buttonWidth;\r\n            butOK.height = buttonHeight;\r\n            butOK.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n            butOK.thickness = 2;\r\n            butOK.color = buttonColor;\r\n            butOK.fontSize = buttonFontSize;\r\n            butOK.background = buttonBackgroundColor;\r\n            butOK.onPointerEnterObservable.add(() => {\r\n                butOK.background = buttonBackgroundHoverColor;\r\n            });\r\n            butOK.onPointerOutObservable.add(() => {\r\n                butOK.background = buttonBackgroundColor;\r\n            });\r\n            butOK.pointerDownAnimation = () => {\r\n                butOK.background = buttonBackgroundClickColor;\r\n            };\r\n            butOK.pointerUpAnimation = () => {\r\n                butOK.background = buttonBackgroundHoverColor;\r\n            };\r\n            butOK.onPointerClickObservable.add(() => {\r\n                editSwatches(false);\r\n                closePicker(newSwatch.background);\r\n            });\r\n            buttonGrid.addControl(butOK, 0, 0);\r\n\r\n            const butCancel: Button = Button.CreateSimpleButton(\"butCancel\", \"Cancel\");\r\n            butCancel.width = buttonWidth;\r\n            butCancel.height = buttonHeight;\r\n            butCancel.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n            butCancel.thickness = 2;\r\n            butCancel.color = buttonColor;\r\n            butCancel.fontSize = buttonFontSize;\r\n            butCancel.background = buttonBackgroundColor;\r\n            butCancel.onPointerEnterObservable.add(() => {\r\n                butCancel.background = buttonBackgroundHoverColor;\r\n            });\r\n            butCancel.onPointerOutObservable.add(() => {\r\n                butCancel.background = buttonBackgroundColor;\r\n            });\r\n            butCancel.pointerDownAnimation = () => {\r\n                butCancel.background = buttonBackgroundClickColor;\r\n            };\r\n            butCancel.pointerUpAnimation = () => {\r\n                butCancel.background = buttonBackgroundHoverColor;\r\n            };\r\n            butCancel.onPointerClickObservable.add(() => {\r\n                editSwatches(false);\r\n                closePicker(currentSwatch.background);\r\n            });\r\n            buttonGrid.addControl(butCancel, 1, 0);\r\n\r\n            if (options.savedColors) {\r\n                butSave = Button.CreateSimpleButton(\"butSave\", \"Save\");\r\n                butSave.width = buttonWidth;\r\n                butSave.height = buttonHeight;\r\n                butSave.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n                butSave.thickness = 2;\r\n                butSave.fontSize = buttonFontSize;\r\n                if (options.savedColors.length < options.swatchLimit!) {\r\n                    butSave.color = buttonColor;\r\n                    butSave.background = buttonBackgroundColor;\r\n                } else {\r\n                    disableButton(butSave, true);\r\n                }\r\n                butSave.onPointerEnterObservable.add(() => {\r\n                    if (options.savedColors) {\r\n                        if (options.savedColors.length < options.swatchLimit!) {\r\n                            butSave.background = buttonBackgroundHoverColor;\r\n                        }\r\n                    }\r\n                });\r\n                butSave.onPointerOutObservable.add(() => {\r\n                    if (options.savedColors) {\r\n                        if (options.savedColors.length < options.swatchLimit!) {\r\n                            butSave.background = buttonBackgroundColor;\r\n                        }\r\n                    }\r\n                });\r\n                butSave.pointerDownAnimation = () => {\r\n                    if (options.savedColors) {\r\n                        if (options.savedColors.length < options.swatchLimit!) {\r\n                            butSave.background = buttonBackgroundClickColor;\r\n                        }\r\n                    }\r\n                };\r\n                butSave.pointerUpAnimation = () => {\r\n                    if (options.savedColors) {\r\n                        if (options.savedColors.length < options.swatchLimit!) {\r\n                            butSave.background = buttonBackgroundHoverColor;\r\n                        }\r\n                    }\r\n                };\r\n                butSave.onPointerClickObservable.add(() => {\r\n                    if (options.savedColors) {\r\n                        if (options.savedColors.length == 0) {\r\n                            setEditButtonVisibility(true);\r\n                        }\r\n                        if (options.savedColors.length < options.swatchLimit!) {\r\n                            updateSwatches(newSwatch.background, butSave);\r\n                        }\r\n                        editSwatches(false);\r\n                    }\r\n                });\r\n                if (options.savedColors.length > 0) {\r\n                    setEditButtonVisibility(true);\r\n                }\r\n                buttonGrid.addControl(butSave, 2, 0);\r\n            }\r\n\r\n            // Picker color values input\r\n            const pickerColorValues: Grid = new Grid();\r\n            pickerColorValues.name = \"Dialog Lower Right\";\r\n            pickerColorValues.addRowDefinition(0.02, false);\r\n            pickerColorValues.addRowDefinition(0.63, false);\r\n            pickerColorValues.addRowDefinition(0.21, false);\r\n            pickerColorValues.addRowDefinition(0.14, false);\r\n            pickerBodyRight.addControl(pickerColorValues, 1, 0);\r\n\r\n            // RGB values text boxes\r\n            const currentColor = Color3.FromHexString(options.lastColor);\r\n            const rgbValuesQuadrant: Grid = new Grid();\r\n            rgbValuesQuadrant.name = \"RGB Values\";\r\n            rgbValuesQuadrant.width = 0.82;\r\n            rgbValuesQuadrant.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n            rgbValuesQuadrant.addRowDefinition(1 / 3, false);\r\n            rgbValuesQuadrant.addRowDefinition(1 / 3, false);\r\n            rgbValuesQuadrant.addRowDefinition(1 / 3, false);\r\n            rgbValuesQuadrant.addColumnDefinition(0.1, false);\r\n            rgbValuesQuadrant.addColumnDefinition(0.2, false);\r\n            rgbValuesQuadrant.addColumnDefinition(0.7, false);\r\n            pickerColorValues.addControl(rgbValuesQuadrant, 1, 0);\r\n\r\n            for (let i = 0; i < inputFieldLabels.length; i++) {\r\n                const labelText: TextBlock = new TextBlock();\r\n                labelText.text = inputFieldLabels[i];\r\n                labelText.color = buttonColor;\r\n                labelText.fontSize = buttonFontSize;\r\n                rgbValuesQuadrant.addControl(labelText, i, 0);\r\n            }\r\n\r\n            // Input fields for RGB values\r\n            const rValInt = new InputText();\r\n            rValInt.width = 0.83;\r\n            rValInt.height = 0.72;\r\n            rValInt.name = \"rIntField\";\r\n            rValInt.fontSize = buttonFontSize;\r\n            rValInt.text = (currentColor.r * 255).toString();\r\n            rValInt.color = inputTextColor;\r\n            rValInt.background = inputTextBackgroundColor;\r\n            rValInt.onFocusObservable.add(() => {\r\n                activeField = rValInt.name!;\r\n                lastVal = rValInt.text;\r\n                editSwatches(false);\r\n            });\r\n            rValInt.onBlurObservable.add(() => {\r\n                if (rValInt.text == \"\") {\r\n                    rValInt.text = \"0\";\r\n                }\r\n                updateInt(rValInt, \"r\");\r\n                if (activeField == rValInt.name) {\r\n                    activeField = \"\";\r\n                }\r\n            });\r\n            rValInt.onTextChangedObservable.add(() => {\r\n                if (activeField == rValInt.name) {\r\n                    updateInt(rValInt, \"r\");\r\n                }\r\n            });\r\n            rgbValuesQuadrant.addControl(rValInt, 0, 1);\r\n\r\n            const gValInt = new InputText();\r\n            gValInt.width = 0.83;\r\n            gValInt.height = 0.72;\r\n            gValInt.name = \"gIntField\";\r\n            gValInt.fontSize = buttonFontSize;\r\n            gValInt.text = (currentColor.g * 255).toString();\r\n            gValInt.color = inputTextColor;\r\n            gValInt.background = inputTextBackgroundColor;\r\n            gValInt.onFocusObservable.add(() => {\r\n                activeField = gValInt.name!;\r\n                lastVal = gValInt.text;\r\n                editSwatches(false);\r\n            });\r\n            gValInt.onBlurObservable.add(() => {\r\n                if (gValInt.text == \"\") {\r\n                    gValInt.text = \"0\";\r\n                }\r\n                updateInt(gValInt, \"g\");\r\n                if (activeField == gValInt.name) {\r\n                    activeField = \"\";\r\n                }\r\n            });\r\n            gValInt.onTextChangedObservable.add(() => {\r\n                if (activeField == gValInt.name) {\r\n                    updateInt(gValInt, \"g\");\r\n                }\r\n            });\r\n            rgbValuesQuadrant.addControl(gValInt, 1, 1);\r\n\r\n            const bValInt = new InputText();\r\n            bValInt.width = 0.83;\r\n            bValInt.height = 0.72;\r\n            bValInt.name = \"bIntField\";\r\n            bValInt.fontSize = buttonFontSize;\r\n            bValInt.text = (currentColor.b * 255).toString();\r\n            bValInt.color = inputTextColor;\r\n            bValInt.background = inputTextBackgroundColor;\r\n            bValInt.onFocusObservable.add(() => {\r\n                activeField = bValInt.name!;\r\n                lastVal = bValInt.text;\r\n                editSwatches(false);\r\n            });\r\n            bValInt.onBlurObservable.add(() => {\r\n                if (bValInt.text == \"\") {\r\n                    bValInt.text = \"0\";\r\n                }\r\n                updateInt(bValInt, \"b\");\r\n                if (activeField == bValInt.name) {\r\n                    activeField = \"\";\r\n                }\r\n            });\r\n            bValInt.onTextChangedObservable.add(() => {\r\n                if (activeField == bValInt.name) {\r\n                    updateInt(bValInt, \"b\");\r\n                }\r\n            });\r\n            rgbValuesQuadrant.addControl(bValInt, 2, 1);\r\n\r\n            const rValDec = new InputText();\r\n            rValDec.width = 0.95;\r\n            rValDec.height = 0.72;\r\n            rValDec.name = \"rDecField\";\r\n            rValDec.fontSize = buttonFontSize;\r\n            rValDec.text = currentColor.r.toString();\r\n            rValDec.color = inputTextColor;\r\n            rValDec.background = inputTextBackgroundColor;\r\n            rValDec.onFocusObservable.add(() => {\r\n                activeField = rValDec.name!;\r\n                lastVal = rValDec.text;\r\n                editSwatches(false);\r\n            });\r\n            rValDec.onBlurObservable.add(() => {\r\n                if (parseFloat(rValDec.text) == 0 || rValDec.text == \"\") {\r\n                    rValDec.text = \"0\";\r\n                    updateFloat(rValDec, \"r\");\r\n                }\r\n                if (activeField == rValDec.name) {\r\n                    activeField = \"\";\r\n                }\r\n            });\r\n            rValDec.onTextChangedObservable.add(() => {\r\n                if (activeField == rValDec.name) {\r\n                    updateFloat(rValDec, \"r\");\r\n                }\r\n            });\r\n            rgbValuesQuadrant.addControl(rValDec, 0, 2);\r\n\r\n            const gValDec = new InputText();\r\n            gValDec.width = 0.95;\r\n            gValDec.height = 0.72;\r\n            gValDec.name = \"gDecField\";\r\n            gValDec.fontSize = buttonFontSize;\r\n            gValDec.text = currentColor.g.toString();\r\n            gValDec.color = inputTextColor;\r\n            gValDec.background = inputTextBackgroundColor;\r\n            gValDec.onFocusObservable.add(() => {\r\n                activeField = gValDec.name!;\r\n                lastVal = gValDec.text;\r\n                editSwatches(false);\r\n            });\r\n            gValDec.onBlurObservable.add(() => {\r\n                if (parseFloat(gValDec.text) == 0 || gValDec.text == \"\") {\r\n                    gValDec.text = \"0\";\r\n                    updateFloat(gValDec, \"g\");\r\n                }\r\n                if (activeField == gValDec.name) {\r\n                    activeField = \"\";\r\n                }\r\n            });\r\n            gValDec.onTextChangedObservable.add(() => {\r\n                if (activeField == gValDec.name) {\r\n                    updateFloat(gValDec, \"g\");\r\n                }\r\n            });\r\n            rgbValuesQuadrant.addControl(gValDec, 1, 2);\r\n\r\n            const bValDec = new InputText();\r\n            bValDec.width = 0.95;\r\n            bValDec.height = 0.72;\r\n            bValDec.name = \"bDecField\";\r\n            bValDec.fontSize = buttonFontSize;\r\n            bValDec.text = currentColor.b.toString();\r\n            bValDec.color = inputTextColor;\r\n            bValDec.background = inputTextBackgroundColor;\r\n            bValDec.onFocusObservable.add(() => {\r\n                activeField = bValDec.name!;\r\n                lastVal = bValDec.text;\r\n                editSwatches(false);\r\n            });\r\n            bValDec.onBlurObservable.add(() => {\r\n                if (parseFloat(bValDec.text) == 0 || bValDec.text == \"\") {\r\n                    bValDec.text = \"0\";\r\n                    updateFloat(bValDec, \"b\");\r\n                }\r\n                if (activeField == bValDec.name) {\r\n                    activeField = \"\";\r\n                }\r\n            });\r\n            bValDec.onTextChangedObservable.add(() => {\r\n                if (activeField == bValDec.name) {\r\n                    updateFloat(bValDec, \"b\");\r\n                }\r\n            });\r\n            rgbValuesQuadrant.addControl(bValDec, 2, 2);\r\n\r\n            // Hex value input\r\n            const hexValueQuadrant: Grid = new Grid();\r\n            hexValueQuadrant.name = \"Hex Value\";\r\n            hexValueQuadrant.width = 0.82;\r\n            hexValueQuadrant.addRowDefinition(1.0, false);\r\n            hexValueQuadrant.addColumnDefinition(0.1, false);\r\n            hexValueQuadrant.addColumnDefinition(0.9, false);\r\n            pickerColorValues.addControl(hexValueQuadrant, 2, 0);\r\n\r\n            const labelText: TextBlock = new TextBlock();\r\n            labelText.text = \"#\";\r\n            labelText.color = buttonColor;\r\n            labelText.fontSize = buttonFontSize;\r\n            hexValueQuadrant.addControl(labelText, 0, 0);\r\n\r\n            const hexVal = new InputText();\r\n            hexVal.width = 0.96;\r\n            hexVal.height = 0.72;\r\n            hexVal.name = \"hexField\";\r\n            hexVal.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n            hexVal.fontSize = buttonFontSize;\r\n            const minusPound = options.lastColor.split(\"#\");\r\n            hexVal.text = minusPound[1];\r\n            hexVal.color = inputTextColor;\r\n            hexVal.background = inputTextBackgroundColor;\r\n            hexVal.onFocusObservable.add(() => {\r\n                activeField = hexVal.name!;\r\n                lastVal = hexVal.text;\r\n                editSwatches(false);\r\n            });\r\n            hexVal.onBlurObservable.add(() => {\r\n                if (hexVal.text.length == 3) {\r\n                    const val = hexVal.text.split(\"\");\r\n                    hexVal.text = val[0] + val[0] + val[1] + val[1] + val[2] + val[2];\r\n                }\r\n                if (hexVal.text == \"\") {\r\n                    hexVal.text = \"000000\";\r\n                    updateValues(Color3.FromHexString(hexVal.text), \"b\");\r\n                }\r\n                if (activeField == hexVal.name) {\r\n                    activeField = \"\";\r\n                }\r\n            });\r\n            hexVal.onTextChangedObservable.add(() => {\r\n                let newHexValue: string = hexVal.text;\r\n                const checkHex: boolean = /[^0-9A-F]/i.test(newHexValue);\r\n                if ((hexVal.text.length > 6 || checkHex) && activeField == hexVal.name) {\r\n                    hexVal.text = lastVal;\r\n                } else {\r\n                    if (hexVal.text.length < 6) {\r\n                        const leadingZero: number = 6 - hexVal.text.length;\r\n                        for (let i = 0; i < leadingZero; i++) {\r\n                            newHexValue = \"0\" + newHexValue;\r\n                        }\r\n                    }\r\n                    if (hexVal.text.length == 3) {\r\n                        const val: string[] = hexVal.text.split(\"\");\r\n                        newHexValue = val[0] + val[0] + val[1] + val[1] + val[2] + val[2];\r\n                    }\r\n                    newHexValue = \"#\" + newHexValue;\r\n                    if (activeField == hexVal.name) {\r\n                        lastVal = hexVal.text;\r\n                        updateValues(Color3.FromHexString(newHexValue), hexVal.name);\r\n                    }\r\n                }\r\n            });\r\n            hexValueQuadrant.addControl(hexVal, 0, 1);\r\n\r\n            if (options.savedColors && options.savedColors.length > 0) {\r\n                updateSwatches(\"\", butSave!);\r\n            }\r\n\r\n            /**\r\n             * Will update all values for InputText and ColorPicker controls based on the BABYLON.Color3 passed to this function.\r\n             * Each InputText control and the ColorPicker control will be tested to see if they are the activeField and if they\r\n             * are will receive no update. This is to prevent the input from the user being overwritten.\r\n             * @param value\r\n             * @param inputField\r\n             */\r\n            function updateValues(value: Color3, inputField: string) {\r\n                activeField = inputField;\r\n                const pickedColor: string = value.toHexString();\r\n                newSwatch.background = pickedColor;\r\n                if (rValInt.name != activeField) {\r\n                    rValInt.text = Math.floor(value.r * 255).toString();\r\n                }\r\n                if (gValInt.name != activeField) {\r\n                    gValInt.text = Math.floor(value.g * 255).toString();\r\n                }\r\n                if (bValInt.name != activeField) {\r\n                    bValInt.text = Math.floor(value.b * 255).toString();\r\n                }\r\n                if (rValDec.name != activeField) {\r\n                    rValDec.text = value.r.toString();\r\n                }\r\n                if (gValDec.name != activeField) {\r\n                    gValDec.text = value.g.toString();\r\n                }\r\n                if (bValDec.name != activeField) {\r\n                    bValDec.text = value.b.toString();\r\n                }\r\n                if (hexVal.name != activeField) {\r\n                    const minusPound: string[] = pickedColor.split(\"#\");\r\n                    hexVal.text = minusPound[1];\r\n                }\r\n                if (picker.name != activeField) {\r\n                    picker.value = value;\r\n                }\r\n            }\r\n\r\n            // When the user enters an integer for R, G, or B we check to make sure it is a valid number and replace if not.\r\n            function updateInt(field: InputText, channel: string) {\r\n                let newValue: string = field.text;\r\n                const checkVal: boolean = /[^0-9]/g.test(newValue);\r\n                if (checkVal) {\r\n                    field.text = lastVal;\r\n                    return;\r\n                } else {\r\n                    if (newValue != \"\") {\r\n                        if (Math.floor(parseInt(newValue)) < 0) {\r\n                            newValue = \"0\";\r\n                        } else if (Math.floor(parseInt(newValue)) > 255) {\r\n                            newValue = \"255\";\r\n                        } else if (isNaN(parseInt(newValue))) {\r\n                            newValue = \"0\";\r\n                        }\r\n                    }\r\n                    if (activeField == field.name) {\r\n                        lastVal = newValue;\r\n                    }\r\n                }\r\n                if (newValue != \"\") {\r\n                    newValue = parseInt(newValue).toString();\r\n                    field.text = newValue;\r\n                    const newSwatchRGB: Color3 = Color3.FromHexString(newSwatch.background);\r\n                    if (activeField == field.name) {\r\n                        if (channel == \"r\") {\r\n                            updateValues(new Color3(parseInt(newValue) / 255, newSwatchRGB.g, newSwatchRGB.b), field.name);\r\n                        } else if (channel == \"g\") {\r\n                            updateValues(new Color3(newSwatchRGB.r, parseInt(newValue) / 255, newSwatchRGB.b), field.name);\r\n                        } else {\r\n                            updateValues(new Color3(newSwatchRGB.r, newSwatchRGB.g, parseInt(newValue) / 255), field.name);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // When the user enters a float for R, G, or B we check to make sure it is a valid number and replace if not.\r\n            function updateFloat(field: InputText, channel: string) {\r\n                let newValue: string = field.text;\r\n                const checkVal: boolean = /[^0-9.]/g.test(newValue);\r\n                if (checkVal) {\r\n                    field.text = lastVal;\r\n                    return;\r\n                } else {\r\n                    if (newValue != \"\" && newValue != \".\" && parseFloat(newValue) != 0) {\r\n                        if (parseFloat(newValue) < 0.0) {\r\n                            newValue = \"0.0\";\r\n                        } else if (parseFloat(newValue) > 1.0) {\r\n                            newValue = \"1.0\";\r\n                        } else if (isNaN(parseFloat(newValue))) {\r\n                            newValue = \"0.0\";\r\n                        }\r\n                    }\r\n                    if (activeField == field.name) {\r\n                        lastVal = newValue;\r\n                    }\r\n                }\r\n                if (newValue != \"\" && newValue != \".\" && parseFloat(newValue) != 0) {\r\n                    newValue = parseFloat(newValue).toString();\r\n                    field.text = newValue;\r\n                } else {\r\n                    newValue = \"0.0\";\r\n                }\r\n                const newSwatchRGB = Color3.FromHexString(newSwatch.background);\r\n                if (activeField == field.name) {\r\n                    if (channel == \"r\") {\r\n                        updateValues(new Color3(parseFloat(newValue), newSwatchRGB.g, newSwatchRGB.b), field.name);\r\n                    } else if (channel == \"g\") {\r\n                        updateValues(new Color3(newSwatchRGB.r, parseFloat(newValue), newSwatchRGB.b), field.name);\r\n                    } else {\r\n                        updateValues(new Color3(newSwatchRGB.r, newSwatchRGB.g, parseFloat(newValue)), field.name);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Removes the current index from the savedColors array. Drawer can then be regenerated.\r\n            function deleteSwatch(index: number) {\r\n                if (options.savedColors) {\r\n                    options.savedColors.splice(index, 1);\r\n                }\r\n                if (options.savedColors && options.savedColors.length == 0) {\r\n                    setEditButtonVisibility(false);\r\n                    editSwatchMode = false;\r\n                }\r\n            }\r\n\r\n            // Creates and styles an individual swatch when updateSwatches is called.\r\n            function createSwatch() {\r\n                if (options.savedColors && options.savedColors[swatchNumber]) {\r\n                    let icon: string;\r\n                    if (editSwatchMode) {\r\n                        icon = \"b\";\r\n                    } else {\r\n                        icon = \"\";\r\n                    }\r\n                    const swatch: Button = Button.CreateSimpleButton(\"Swatch_\" + swatchNumber, icon);\r\n                    swatch.fontFamily = \"coreglyphs\";\r\n                    const swatchColor: Color3 = Color3.FromHexString(options.savedColors[swatchNumber]);\r\n                    const swatchLuminence: number = swatchColor.r + swatchColor.g + swatchColor.b;\r\n\r\n                    // Set color of outline and textBlock based on luminance of the color swatch so feedback always visible\r\n                    if (swatchLuminence > luminanceLimit) {\r\n                        swatch.color = iconColorDark;\r\n                    } else {\r\n                        swatch.color = iconColorLight;\r\n                    }\r\n                    swatch.fontSize = Math.floor(swatchSize * 0.7);\r\n                    swatch.textBlock!.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n                    swatch.height = swatch.width = swatchSize.toString() + \"px\";\r\n                    swatch.background = options.savedColors[swatchNumber];\r\n                    swatch.thickness = 2;\r\n                    const metadata = swatchNumber;\r\n                    swatch.pointerDownAnimation = () => {\r\n                        swatch.thickness = 4;\r\n                    };\r\n                    swatch.pointerUpAnimation = () => {\r\n                        swatch.thickness = 3;\r\n                    };\r\n                    swatch.pointerEnterAnimation = () => {\r\n                        swatch.thickness = 3;\r\n                    };\r\n                    swatch.pointerOutAnimation = () => {\r\n                        swatch.thickness = 2;\r\n                    };\r\n                    swatch.onPointerClickObservable.add(() => {\r\n                        if (!editSwatchMode) {\r\n                            if (options.savedColors) {\r\n                                updateValues(Color3.FromHexString(options.savedColors[metadata]), swatch.name!);\r\n                            }\r\n                        } else {\r\n                            deleteSwatch(metadata);\r\n                            updateSwatches(\"\", butSave);\r\n                        }\r\n                    });\r\n                    return swatch;\r\n                } else {\r\n                    return null;\r\n                }\r\n            }\r\n\r\n            // Mode switch to render button text and close symbols on swatch controls\r\n            function editSwatches(mode?: boolean) {\r\n                if (mode !== undefined) {\r\n                    editSwatchMode = mode;\r\n                }\r\n                let thisButton: Button;\r\n                if (editSwatchMode) {\r\n                    for (let i = 0; i < swatchDrawer.children.length; i++) {\r\n                        thisButton = swatchDrawer.children[i] as Button;\r\n                        thisButton.textBlock!.text = \"b\";\r\n                    }\r\n                    if (butEdit !== undefined) {\r\n                        butEdit.textBlock!.text = \"Done\";\r\n                    }\r\n                } else {\r\n                    for (let i = 0; i < swatchDrawer.children.length; i++) {\r\n                        thisButton = swatchDrawer.children[i] as Button;\r\n                        thisButton.textBlock!.text = \"\";\r\n                    }\r\n                    if (butEdit !== undefined) {\r\n                        butEdit.textBlock!.text = \"Edit\";\r\n                    }\r\n                }\r\n            }\r\n\r\n            /**\r\n             * When Save Color button is pressed this function will first create a swatch drawer if one is not already\r\n             * made. Then all controls are removed from the drawer and we step through the savedColors array and\r\n             * creates one swatch per color. It will also set the height of the drawer control based on how many\r\n             * saved colors there are and how many can be stored per row.\r\n             * @param color\r\n             * @param button\r\n             */\r\n            function updateSwatches(color: string, button: Button) {\r\n                if (options.savedColors) {\r\n                    if (color != \"\") {\r\n                        options.savedColors.push(color);\r\n                    }\r\n                    swatchNumber = 0;\r\n                    swatchDrawer.clearControls();\r\n                    const rowCount: number = Math.ceil(options.savedColors.length / options.numSwatchesPerLine!);\r\n                    let gutterCount: number;\r\n                    if (rowCount == 0) {\r\n                        gutterCount = 0;\r\n                    } else {\r\n                        gutterCount = rowCount + 1;\r\n                    }\r\n                    if (swatchDrawer.rowCount != rowCount + gutterCount) {\r\n                        const currentRows: number = swatchDrawer.rowCount;\r\n                        for (let i = 0; i < currentRows; i++) {\r\n                            swatchDrawer.removeRowDefinition(0);\r\n                        }\r\n                        for (let i = 0; i < rowCount + gutterCount; i++) {\r\n                            if (i % 2) {\r\n                                swatchDrawer.addRowDefinition(swatchSize, true);\r\n                            } else {\r\n                                swatchDrawer.addRowDefinition(gutterSize, true);\r\n                            }\r\n                        }\r\n                    }\r\n                    swatchDrawer.height = (swatchSize * rowCount + gutterCount * gutterSize).toString() + \"px\";\r\n\r\n                    for (let y = 1, thisRow = 1; y < rowCount + gutterCount; y += 2, thisRow++) {\r\n                        // Determine number of buttons to create per row based on the button limit per row and number of saved colors\r\n                        let totalButtonsThisRow: number;\r\n                        if (options.savedColors.length > thisRow * options.numSwatchesPerLine!) {\r\n                            totalButtonsThisRow = options.numSwatchesPerLine!;\r\n                        } else {\r\n                            totalButtonsThisRow = options.savedColors.length - (thisRow - 1) * options.numSwatchesPerLine!;\r\n                        }\r\n                        const buttonIterations: number = Math.min(Math.max(totalButtonsThisRow, 0), options.numSwatchesPerLine!);\r\n                        for (let x = 0, w = 1; x < buttonIterations; x++) {\r\n                            if (x > options.numSwatchesPerLine!) {\r\n                                continue;\r\n                            }\r\n                            const swatch: Button | null = createSwatch();\r\n                            if (swatch != null) {\r\n                                swatchDrawer.addControl(swatch, y, w);\r\n                                w += 2;\r\n                                swatchNumber++;\r\n                            } else {\r\n                                continue;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (options.savedColors.length >= options.swatchLimit!) {\r\n                        disableButton(button, true);\r\n                    } else {\r\n                        disableButton(button, false);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Shows or hides edit swatches button depending on if there are saved swatches\r\n            function setEditButtonVisibility(enableButton: boolean) {\r\n                if (enableButton) {\r\n                    butEdit = Button.CreateSimpleButton(\"butEdit\", \"Edit\");\r\n                    butEdit.width = buttonWidth;\r\n                    butEdit.height = buttonHeight;\r\n                    butEdit.left = Math.floor(parseInt(buttonWidth) * 0.1).toString() + \"px\";\r\n                    butEdit.top = (parseFloat(butEdit.left) * -1).toString() + \"px\";\r\n                    butEdit.verticalAlignment = Control.VERTICAL_ALIGNMENT_BOTTOM;\r\n                    butEdit.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n                    butEdit.thickness = 2;\r\n                    butEdit.color = buttonColor;\r\n                    butEdit.fontSize = buttonFontSize;\r\n                    butEdit.background = buttonBackgroundColor;\r\n                    butEdit.onPointerEnterObservable.add(() => {\r\n                        butEdit.background = buttonBackgroundHoverColor;\r\n                    });\r\n                    butEdit.onPointerOutObservable.add(() => {\r\n                        butEdit.background = buttonBackgroundColor;\r\n                    });\r\n                    butEdit.pointerDownAnimation = () => {\r\n                        butEdit.background = buttonBackgroundClickColor;\r\n                    };\r\n                    butEdit.pointerUpAnimation = () => {\r\n                        butEdit.background = buttonBackgroundHoverColor;\r\n                    };\r\n                    butEdit.onPointerClickObservable.add(() => {\r\n                        if (editSwatchMode) {\r\n                            editSwatchMode = false;\r\n                        } else {\r\n                            editSwatchMode = true;\r\n                        }\r\n                        editSwatches();\r\n                    });\r\n                    pickerGrid.addControl(butEdit, 1, 0);\r\n                } else {\r\n                    pickerGrid.removeControl(butEdit);\r\n                }\r\n            }\r\n\r\n            // Called when the user hits the limit of saved colors in the drawer.\r\n            function disableButton(button: Button, disabled: boolean) {\r\n                if (disabled) {\r\n                    button.color = buttonDisabledColor;\r\n                    button.background = buttonDisabledBackgroundColor;\r\n                } else {\r\n                    button.color = buttonColor;\r\n                    button.background = buttonBackgroundColor;\r\n                }\r\n            }\r\n\r\n            // Passes last chosen color back to scene and kills dialog by removing from AdvancedDynamicTexture\r\n            function closePicker(color: string) {\r\n                if (options.savedColors && options.savedColors.length > 0) {\r\n                    resolve({\r\n                        savedColors: options.savedColors,\r\n                        pickedColor: color,\r\n                    });\r\n                } else {\r\n                    resolve({\r\n                        pickedColor: color,\r\n                    });\r\n                }\r\n                advancedTexture.removeControl(dialogContainer);\r\n            }\r\n        });\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.ColorPicker\", ColorPicker);\r\n","import { Container } from \"./container\";\r\nimport { Control } from \"./control\";\r\nimport type { Measure } from \"../measure\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/** Class used to create 2D ellipse containers */\r\nexport class Ellipse extends Container {\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    @serialize()\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Ellipse\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Ellipse\";\r\n    }\r\n\r\n    protected _localDraw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        Control.drawEllipse(\r\n            this._currentMeasure.left + this._currentMeasure.width / 2,\r\n            this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._thickness / 2,\r\n            this._currentMeasure.height / 2 - this._thickness / 2,\r\n            context\r\n        );\r\n\r\n        if (this._backgroundGradient || this._background) {\r\n            context.fillStyle = this._getBackgroundColor(context);\r\n\r\n            context.fill();\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (this._thickness) {\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    protected _clipForChildren(context: ICanvasRenderingContext) {\r\n        Control.drawEllipse(\r\n            this._currentMeasure.left + this._currentMeasure.width / 2,\r\n            this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2,\r\n            this._currentMeasure.height / 2,\r\n            context\r\n        );\r\n\r\n        context.clip();\r\n    }\r\n\r\n    public _renderHighlightSpecific(context: ICanvasRenderingContext): void {\r\n        Control.drawEllipse(\r\n            this._currentMeasure.left + this._currentMeasure.width / 2,\r\n            this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._highlightLineWidth / 2,\r\n            this._currentMeasure.height / 2 - this._highlightLineWidth / 2,\r\n            context\r\n        );\r\n        context.stroke();\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Ellipse\", Ellipse);\r\n","import type { Nullable } from \"core/types\";\r\nimport type { Vector2 } from \"core/Maths/math.vector\";\r\n\r\nimport { Button } from \"./button\";\r\nimport type { Control } from \"./control\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport type { IFocusableControl } from \"./focusableControl\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport type { IKeyboardEvent } from \"core/Events/deviceInputEvents\";\r\n\r\n/**\r\n * Class used to create a focusable button that can easily handle keyboard events\r\n * @since 5.0.0\r\n */\r\nexport class FocusableButton extends Button implements IFocusableControl {\r\n    /** Highlight color when button is focused */\r\n    public focusedColor: Nullable<string> = null;\r\n    private _isFocused = false;\r\n    private _unfocusedColor: Nullable<string> = null;\r\n\r\n    /** Observable raised when the control gets the focus */\r\n    public onFocusObservable = new Observable<Button>();\r\n    /** Observable raised when the control loses the focus */\r\n    public onBlurObservable = new Observable<Button>();\r\n    /** Observable raised when a key event was processed */\r\n    public onKeyboardEventProcessedObservable = new Observable<IKeyboardEvent>();\r\n\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this._unfocusedColor = this.color;\r\n    }\r\n\r\n    /** @internal */\r\n    public onBlur(): void {\r\n        if (this._isFocused) {\r\n            this._isFocused = false;\r\n            if (this.focusedColor && this._unfocusedColor != null) {\r\n                // Set color back to saved unfocused color\r\n                this.color = this._unfocusedColor;\r\n            }\r\n            this.onBlurObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public onFocus(): void {\r\n        this._isFocused = true;\r\n\r\n        if (this.focusedColor) {\r\n            // Save the unfocused color\r\n            this._unfocusedColor = this.color;\r\n            this.color = this.focusedColor;\r\n        }\r\n        this.onFocusObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Function called to get the list of controls that should not steal the focus from this control\r\n     * @returns an array of controls\r\n     */\r\n    public keepsFocusWith(): Nullable<Control[]> {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Function to focus a button programmatically\r\n     */\r\n    public focus() {\r\n        this._host.moveFocusToControl(this);\r\n    }\r\n\r\n    /**\r\n     * Function to unfocus a button programmatically\r\n     */\r\n    public blur() {\r\n        this._host.focusedControl = null;\r\n    }\r\n\r\n    /**\r\n     * Handles the keyboard event\r\n     * @param evt Defines the KeyboardEvent\r\n     */\r\n    public processKeyboard(evt: IKeyboardEvent): void {\r\n        this.onKeyboardEventProcessedObservable.notifyObservers(evt, -1, this);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!this.isReadOnly) {\r\n            // Clicking on button should focus\r\n            this.focus();\r\n        }\r\n\r\n        return super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi);\r\n    }\r\n\r\n    /** @internal */\r\n    public displose() {\r\n        super.dispose();\r\n\r\n        this.onBlurObservable.clear();\r\n        this.onFocusObservable.clear();\r\n        this.onKeyboardEventProcessedObservable.clear();\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.FocusableButton\", FocusableButton);\r\n","import type { Nullable } from \"core/types\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport type { Vector2 } from \"core/Maths/math.vector\";\r\n\r\nimport { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport type { VirtualKeyboard } from \"./virtualKeyboard\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { Measure } from \"../measure\";\r\nimport { InputText } from \"./inputText\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport type { PointerInfo, PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport type { IKeyboardEvent } from \"core/Events/deviceInputEvents\";\r\n\r\nimport { serialize } from \"core/Misc/decorators\";\r\n\r\n/**\r\n * Class used to create input text control\r\n */\r\nexport class InputTextArea extends InputText {\r\n    private _textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    private _textVerticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n    private _lines: any[];\r\n    private _lineSpacing: ValueAndUnit = new ValueAndUnit(0);\r\n    private _outlineWidth: number = 0;\r\n    private _outlineColor: string = \"white\";\r\n    private _maxHeight = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n\r\n    private _clipTextTop: number;\r\n    private _clipTextLeft: number;\r\n\r\n    private _cursorInfo: { globalStartIndex: number; globalEndIndex: number; relativeStartIndex: number; relativeEndIndex: number; currentLineIndex: number };\r\n    private _highlightCursorInfo: { initialStartIndex: number; initialRelativeStartIndex: number; initialLineIndex: number };\r\n\r\n    /**\r\n     * An event triggered after the text was broken up into lines\r\n     */\r\n    public onLinesReadyObservable = new Observable<InputTextArea>();\r\n\r\n    /** @internal */\r\n    public _connectedVirtualKeyboard: Nullable<VirtualKeyboard>;\r\n    private _contextForBreakLines: ICanvasRenderingContext;\r\n    private _clickedCoordinateX: Nullable<number>;\r\n    private _clickedCoordinateY: Nullable<number>;\r\n\r\n    private _availableWidth: number;\r\n    private _availableHeight: number;\r\n\r\n    private _scrollTop: Nullable<number>;\r\n\r\n    private _autoStretchHeight: boolean;\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public get outlineWidth(): number {\r\n        return this._outlineWidth;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public set outlineWidth(value: number) {\r\n        if (this._outlineWidth === value) {\r\n            return;\r\n        }\r\n        this._outlineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public get outlineColor(): string {\r\n        return this._outlineColor;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public set outlineColor(value: string) {\r\n        if (this._outlineColor === value) {\r\n            return;\r\n        }\r\n        this._outlineColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can auto stretch its height to adapt to the text */\r\n    @serialize()\r\n    public get autoStretchHeight(): boolean {\r\n        return this._autoStretchHeight;\r\n    }\r\n\r\n    public set autoStretchHeight(value: boolean) {\r\n        if (this._autoStretchHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoStretchHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    public set height(value: string | number) {\r\n        this.fixedRatioMasterIsWidth = false;\r\n\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n\r\n        this._autoStretchHeight = false;\r\n    }\r\n\r\n    @serialize()\r\n    public get maxHeight(): string | number {\r\n        return this._maxHeight.toString(this._host);\r\n    }\r\n\r\n    /** Gets the maximum width allowed by the control in pixels */\r\n    public get maxHeightInPixels(): number {\r\n        return this._maxHeight.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set maxHeight(value: string | number) {\r\n        if (this._maxHeight.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._maxHeight.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new InputTextArea\r\n     * @param name defines the control name\r\n     * @param text defines the text of the control\r\n     */\r\n    constructor(public name?: string, text: string = \"\") {\r\n        super(name);\r\n\r\n        this.text = text;\r\n\r\n        this.isPointerBlocker = true;\r\n\r\n        this.onLinesReadyObservable.add(() => this._updateCursorPosition());\r\n\r\n        this._highlightCursorInfo = {\r\n            initialStartIndex: -1,\r\n            initialRelativeStartIndex: -1,\r\n            initialLineIndex: -1,\r\n        };\r\n\r\n        this._cursorInfo = {\r\n            globalStartIndex: 0,\r\n            globalEndIndex: 0,\r\n            relativeEndIndex: 0,\r\n            relativeStartIndex: 0,\r\n            currentLineIndex: 0,\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"InputTextArea\";\r\n    }\r\n\r\n    /**\r\n     * Handles the keyboard event\r\n     * @param evt Defines the KeyboardEvent\r\n     */\r\n    public processKeyboard(evt: IKeyboardEvent): void {\r\n        // process pressed key\r\n        this.alternativeProcessKey(evt.code, evt.key, evt);\r\n\r\n        this.onKeyboardEventProcessedObservable.notifyObservers(evt);\r\n    }\r\n\r\n    /**\r\n     * Process the last keyboard input\r\n     *\r\n     * @param code The ascii input number\r\n     * @param key The key string representation\r\n     * @param evt The keyboard event emits with input\r\n     * @internal\r\n     */\r\n    public alternativeProcessKey(code: string, key?: string, evt?: IKeyboardEvent) {\r\n        //return if clipboard event keys (i.e -ctr/cmd + c,v,x)\r\n        if (evt && (evt.ctrlKey || evt.metaKey) && (code === \"KeyC\" || code === \"KeyV\" || code === \"KeyX\")) {\r\n            return;\r\n        }\r\n\r\n        // Specific cases\r\n        switch (code) {\r\n            case \"KeyA\": // A - select all\r\n                if (evt && (evt.ctrlKey || evt.metaKey)) {\r\n                    this._selectAllText();\r\n                    evt.preventDefault();\r\n                    return;\r\n                }\r\n                break;\r\n            case \"Period\": //SLASH\r\n                if (evt && evt.shiftKey) {\r\n                    evt.preventDefault();\r\n                }\r\n                break;\r\n            case \"Backspace\": // BACKSPACE\r\n                if (!this._isTextHighlightOn && this._cursorInfo.globalStartIndex > 0) {\r\n                    this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n                    this._cursorInfo.globalStartIndex--;\r\n                }\r\n\r\n                this._textWrapper.removePart(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex);\r\n\r\n                this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n\r\n                if (evt) {\r\n                    evt.preventDefault();\r\n                }\r\n\r\n                this._blinkIsEven = false;\r\n                this._isTextHighlightOn = false;\r\n\r\n                this._textHasChanged();\r\n                break;\r\n            case \"Delete\": // DELETE\r\n                if (!this._isTextHighlightOn && this._cursorInfo.globalEndIndex < this.text.length) {\r\n                    this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex + 1;\r\n                }\r\n\r\n                this._textWrapper.removePart(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex);\r\n\r\n                this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n\r\n                if (evt) {\r\n                    evt.preventDefault();\r\n                }\r\n\r\n                this._blinkIsEven = false;\r\n                this._isTextHighlightOn = false;\r\n\r\n                this._textHasChanged();\r\n                break;\r\n            case \"Enter\": // RETURN\r\n                this._textWrapper.removePart(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex, \"\\n\");\r\n                this._cursorInfo.globalStartIndex++;\r\n                this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n\r\n                this._blinkIsEven = false;\r\n                this._isTextHighlightOn = false;\r\n\r\n                this._textHasChanged();\r\n                return;\r\n            case \"End\": // END\r\n                this._cursorInfo.globalStartIndex = this.text.length;\r\n                this._blinkIsEven = false;\r\n                this._isTextHighlightOn = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case \"Home\": // HOME\r\n                this._cursorInfo.globalStartIndex = 0;\r\n                this._blinkIsEven = false;\r\n                this._isTextHighlightOn = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case \"ArrowLeft\": // LEFT\r\n                this._markAsDirty();\r\n\r\n                if (evt && evt.shiftKey) {\r\n                    // shift + ctrl/cmd + <-\r\n                    if (evt.ctrlKey || evt.metaKey) {\r\n                        // Go to line's start by substract the relativeStartIndex to the globalStartIndex\r\n                        this._cursorInfo.globalStartIndex -= this._cursorInfo.relativeStartIndex;\r\n                        this._cursorInfo.globalEndIndex = this._highlightCursorInfo.initialStartIndex;\r\n                    }\r\n                    // store the starting point\r\n                    if (!this._isTextHighlightOn) {\r\n                        this._highlightCursorInfo.initialLineIndex = this._cursorInfo.currentLineIndex;\r\n                        this._highlightCursorInfo.initialStartIndex = this._cursorInfo.globalStartIndex;\r\n                        this._highlightCursorInfo.initialRelativeStartIndex = this._cursorInfo.relativeStartIndex;\r\n\r\n                        this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n                        this._cursorInfo.globalStartIndex--;\r\n                        this._isTextHighlightOn = true;\r\n                    } else {\r\n                        if (this._cursorInfo.globalEndIndex > this._highlightCursorInfo.initialStartIndex) {\r\n                            this._cursorInfo.globalEndIndex--;\r\n                        } else {\r\n                            this._cursorInfo.globalStartIndex--;\r\n                        }\r\n                    }\r\n                    this._blinkIsEven = true;\r\n                    evt.preventDefault();\r\n                    return;\r\n                }\r\n\r\n                if (this._isTextHighlightOn) {\r\n                    this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n                } else if (evt && (evt.ctrlKey || evt.metaKey)) {\r\n                    // ctr + <-\r\n                    this._cursorInfo.globalStartIndex -= this._cursorInfo.relativeStartIndex;\r\n                    evt.preventDefault();\r\n                } else if (this._cursorInfo.globalStartIndex > 0) {\r\n                    this._cursorInfo.globalStartIndex--;\r\n                }\r\n\r\n                // update the cursor\r\n                this._blinkIsEven = false;\r\n                this._isTextHighlightOn = false;\r\n                return;\r\n            case \"ArrowRight\": // RIGHT\r\n                this._markAsDirty();\r\n\r\n                if (evt && evt.shiftKey) {\r\n                    // shift + ctrl/cmd + ->\r\n                    if (evt.ctrlKey || evt.metaKey) {\r\n                        const rightDelta = this._lines[this._cursorInfo.currentLineIndex].text.length - this._cursorInfo.relativeEndIndex - 1;\r\n                        this._cursorInfo.globalEndIndex += rightDelta;\r\n                        this._cursorInfo.globalStartIndex = this._highlightCursorInfo.initialStartIndex;\r\n                    }\r\n                    // store the starting point\r\n                    if (!this._isTextHighlightOn) {\r\n                        this._highlightCursorInfo.initialLineIndex = this._cursorInfo.currentLineIndex;\r\n                        this._highlightCursorInfo.initialStartIndex = this._cursorInfo.globalStartIndex;\r\n                        this._highlightCursorInfo.initialRelativeStartIndex = this._cursorInfo.relativeStartIndex;\r\n\r\n                        this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n                        this._cursorInfo.globalEndIndex++;\r\n                        this._isTextHighlightOn = true;\r\n                    } else {\r\n                        if (this._cursorInfo.globalStartIndex < this._highlightCursorInfo.initialStartIndex) {\r\n                            this._cursorInfo.globalStartIndex++;\r\n                        } else {\r\n                            this._cursorInfo.globalEndIndex++;\r\n                        }\r\n                    }\r\n                    this._blinkIsEven = true;\r\n                    evt.preventDefault();\r\n                    return;\r\n                }\r\n                if (this._isTextHighlightOn) {\r\n                    this._cursorInfo.globalStartIndex = this._cursorInfo.globalEndIndex;\r\n                } else if (evt && (evt.ctrlKey || evt.metaKey)) {\r\n                    //ctr + ->\r\n                    const rightDelta = this._lines[this._cursorInfo.currentLineIndex].text.length - this._cursorInfo.relativeEndIndex;\r\n                    this._cursorInfo.globalStartIndex += rightDelta;\r\n                } else if (this._cursorInfo.globalStartIndex < this.text.length) {\r\n                    this._cursorInfo.globalStartIndex++;\r\n                }\r\n\r\n                // update the cursor\r\n                this._blinkIsEven = false;\r\n                this._isTextHighlightOn = false;\r\n                return;\r\n            case \"ArrowUp\": // UP\r\n                // update the cursor\r\n                this._blinkIsEven = false;\r\n\r\n                if (evt) {\r\n                    if (evt.shiftKey) {\r\n                        if (!this._isTextHighlightOn) {\r\n                            this._highlightCursorInfo.initialLineIndex = this._cursorInfo.currentLineIndex;\r\n                            this._highlightCursorInfo.initialStartIndex = this._cursorInfo.globalStartIndex;\r\n                            this._highlightCursorInfo.initialRelativeStartIndex = this._cursorInfo.relativeStartIndex;\r\n                        }\r\n                        this._isTextHighlightOn = true;\r\n                        this._blinkIsEven = true;\r\n                    } else {\r\n                        this._isTextHighlightOn = false;\r\n                    }\r\n                    evt.preventDefault();\r\n                }\r\n\r\n                if (this._cursorInfo.currentLineIndex === 0) {\r\n                    // First line\r\n                    this._cursorInfo.globalStartIndex = 0;\r\n                } else {\r\n                    const currentLine = this._lines[this._cursorInfo.currentLineIndex];\r\n                    const upperLine = this._lines[this._cursorInfo.currentLineIndex - 1];\r\n\r\n                    let tmpIndex = 0;\r\n                    let relativeIndex = 0;\r\n                    if (!this._isTextHighlightOn || this._cursorInfo.currentLineIndex < this._highlightCursorInfo.initialLineIndex) {\r\n                        tmpIndex = this._cursorInfo.globalStartIndex;\r\n                        relativeIndex = this._cursorInfo.relativeStartIndex;\r\n                    } else {\r\n                        tmpIndex = this._cursorInfo.globalEndIndex;\r\n                        relativeIndex = this._cursorInfo.relativeEndIndex;\r\n                    }\r\n\r\n                    const currentText = currentLine.text.substr(0, relativeIndex);\r\n                    const currentWidth = this._contextForBreakLines.measureText(currentText).width;\r\n\r\n                    let upperWidth = 0;\r\n                    let previousWidth = 0;\r\n\r\n                    tmpIndex -= relativeIndex; // Start of current line\r\n                    tmpIndex -= upperLine.text.length + upperLine.lineEnding.length; // Start of upper line\r\n                    let upperLineRelativeIndex = 0;\r\n\r\n                    while (upperWidth < currentWidth && upperLineRelativeIndex < upperLine.text.length) {\r\n                        tmpIndex++;\r\n                        upperLineRelativeIndex++;\r\n                        previousWidth = Math.abs(currentWidth - upperWidth);\r\n                        upperWidth = this._contextForBreakLines.measureText(upperLine.text.substr(0, upperLineRelativeIndex)).width;\r\n                    }\r\n\r\n                    // Find closest move\r\n                    if (Math.abs(currentWidth - upperWidth) > previousWidth && upperLineRelativeIndex > 0) {\r\n                        tmpIndex--;\r\n                    }\r\n\r\n                    if (!this._isTextHighlightOn) {\r\n                        this._cursorInfo.globalStartIndex = tmpIndex;\r\n                    } else if (this._cursorInfo.currentLineIndex <= this._highlightCursorInfo.initialLineIndex) {\r\n                        this._cursorInfo.globalStartIndex = tmpIndex;\r\n                        this._cursorInfo.globalEndIndex = this._highlightCursorInfo.initialStartIndex;\r\n                        this._cursorInfo.relativeEndIndex = this._highlightCursorInfo.initialRelativeStartIndex;\r\n                    } else {\r\n                        this._cursorInfo.globalEndIndex = tmpIndex;\r\n                    }\r\n                }\r\n\r\n                this._markAsDirty();\r\n                return;\r\n            case \"ArrowDown\": // DOWN\r\n                // update the cursor\r\n                this._blinkIsEven = false;\r\n\r\n                if (evt) {\r\n                    if (evt.shiftKey) {\r\n                        if (!this._isTextHighlightOn) {\r\n                            this._highlightCursorInfo.initialLineIndex = this._cursorInfo.currentLineIndex;\r\n                            this._highlightCursorInfo.initialStartIndex = this._cursorInfo.globalStartIndex;\r\n                            this._highlightCursorInfo.initialRelativeStartIndex = this._cursorInfo.relativeStartIndex;\r\n                        }\r\n\r\n                        this._isTextHighlightOn = true;\r\n                        this._blinkIsEven = true;\r\n                    } else {\r\n                        this._isTextHighlightOn = false;\r\n                    }\r\n                    evt.preventDefault();\r\n                }\r\n\r\n                if (this._cursorInfo.currentLineIndex === this._lines.length - 1) {\r\n                    // Last line\r\n                    this._cursorInfo.globalStartIndex = this.text.length;\r\n                } else {\r\n                    const currentLine = this._lines[this._cursorInfo.currentLineIndex];\r\n                    const underLine = this._lines[this._cursorInfo.currentLineIndex + 1];\r\n\r\n                    let tmpIndex = 0;\r\n                    let relativeIndex = 0;\r\n                    if (!this._isTextHighlightOn || this._cursorInfo.currentLineIndex < this._highlightCursorInfo.initialLineIndex) {\r\n                        tmpIndex = this._cursorInfo.globalStartIndex;\r\n                        relativeIndex = this._cursorInfo.relativeStartIndex;\r\n                    } else {\r\n                        tmpIndex = this._cursorInfo.globalEndIndex;\r\n                        relativeIndex = this._cursorInfo.relativeEndIndex;\r\n                    }\r\n\r\n                    const currentText = currentLine.text.substr(0, relativeIndex);\r\n                    const currentWidth = this._contextForBreakLines.measureText(currentText).width;\r\n\r\n                    let underWidth = 0;\r\n                    let previousWidth = 0;\r\n\r\n                    tmpIndex += currentLine.text.length - relativeIndex + currentLine.lineEnding.length; // Start of current line\r\n                    let underLineRelativeIndex = 0;\r\n\r\n                    while (underWidth < currentWidth && underLineRelativeIndex < underLine.text.length) {\r\n                        tmpIndex++;\r\n                        underLineRelativeIndex++;\r\n                        previousWidth = Math.abs(currentWidth - underWidth);\r\n                        underWidth = this._contextForBreakLines.measureText(underLine.text.substr(0, underLineRelativeIndex)).width;\r\n                    }\r\n\r\n                    // Find closest move\r\n                    if (Math.abs(currentWidth - underWidth) > previousWidth && underLineRelativeIndex > 0) {\r\n                        tmpIndex--;\r\n                    }\r\n\r\n                    if (!this._isTextHighlightOn) {\r\n                        this._cursorInfo.globalStartIndex = tmpIndex;\r\n                    } else if (this._cursorInfo.currentLineIndex < this._highlightCursorInfo.initialLineIndex) {\r\n                        this._cursorInfo.globalStartIndex = tmpIndex;\r\n                        if (this._cursorInfo.globalStartIndex > this._cursorInfo.globalEndIndex) {\r\n                            this._cursorInfo.globalEndIndex += this._cursorInfo.globalStartIndex;\r\n                            this._cursorInfo.globalStartIndex = this._cursorInfo.globalEndIndex - this._cursorInfo.globalStartIndex;\r\n                            this._cursorInfo.globalEndIndex -= this._cursorInfo.globalStartIndex;\r\n                        }\r\n                    } else {\r\n                        this._cursorInfo.globalEndIndex = tmpIndex;\r\n                        this._cursorInfo.globalStartIndex = this._highlightCursorInfo.initialStartIndex;\r\n                    }\r\n                }\r\n\r\n                this._markAsDirty();\r\n                return;\r\n        }\r\n\r\n        // Printable characters\r\n        if (key?.length === 1) {\r\n            evt?.preventDefault();\r\n            this._currentKey = key;\r\n            this.onBeforeKeyAddObservable.notifyObservers(this);\r\n            key = this._currentKey;\r\n            if (this._addKey) {\r\n                this._isTextHighlightOn = false;\r\n                this._blinkIsEven = false;\r\n\r\n                this._textWrapper.removePart(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex, key);\r\n                this._cursorInfo.globalStartIndex += key.length;\r\n                this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n\r\n                this._textHasChanged();\r\n            }\r\n        }\r\n    }\r\n\r\n    protected _parseLineWordWrap(line: string = \"\", width: number, context: ICanvasRenderingContext): { text: string; width: number; lineEnding: string }[] {\r\n        const lines = [];\r\n        const words = line.split(\" \");\r\n        let lineWidth = 0;\r\n\r\n        for (let n = 0; n < words.length; n++) {\r\n            const testLine = n > 0 ? line + \" \" + words[n] : words[0];\r\n            const metrics = context.measureText(testLine);\r\n            const testWidth = metrics.width;\r\n            if (testWidth > width) {\r\n                if (n > 0) {\r\n                    // Avoid first word duplication if of too long\r\n                    lineWidth = context.measureText(line).width;\r\n                    lines.push({ text: line, width: lineWidth, lineEnding: \" \" });\r\n                }\r\n\r\n                line = words[n];\r\n\r\n                let flushedLine = \"\";\r\n\r\n                line.split(\"\").map((char) => {\r\n                    if (context.measureText(flushedLine + char).width > width) {\r\n                        lines.push({ text: flushedLine, width: context.measureText(flushedLine).width, lineEnding: \"\\n\" });\r\n                        flushedLine = \"\";\r\n                    }\r\n                    flushedLine += char;\r\n                });\r\n\r\n                line = flushedLine;\r\n                // Measure remaining characters\r\n                lineWidth = context.measureText(line).width;\r\n            } else {\r\n                lineWidth = testWidth;\r\n                line = testLine;\r\n            }\r\n        }\r\n        lines.push({ text: line, width: lineWidth, lineEnding: \" \" });\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _breakLines(refWidth: number, context: ICanvasRenderingContext): object[] {\r\n        const lines: { text: string; width: number; lineEnding: string }[] = [];\r\n        const _lines = this.text.split(\"\\n\");\r\n\r\n        if (this.clipContent) {\r\n            for (const _line of _lines) {\r\n                lines.push(...this._parseLineWordWrap(_line, refWidth, context));\r\n            }\r\n        } else {\r\n            for (const _line of _lines) {\r\n                lines.push(this._parseLine(_line, context));\r\n            }\r\n        }\r\n\r\n        lines[lines.length - 1].lineEnding = \"\\n\";\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _parseLine(line: string = \"\", context: ICanvasRenderingContext): { text: string; width: number; lineEnding: string } {\r\n        return { text: line, width: context.measureText(line).width, lineEnding: \" \" };\r\n    }\r\n\r\n    /**\r\n     * Processing of child right before the parent measurement update\r\n     *\r\n     * @param parentMeasure The parent measure\r\n     * @param context The rendering canvas\r\n     * @internal\r\n     */\r\n    protected _preMeasure(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        if (!this._fontOffset || this._wasDirty) {\r\n            this._fontOffset = Control._GetFontOffset(context.font);\r\n        }\r\n\r\n        let text = this._beforeRenderText(this._textWrapper).text;\r\n\r\n        // placeholder conditions and color setting\r\n        if (!this._isFocused && !this.text && this._placeholderText) {\r\n            text = this._placeholderText;\r\n\r\n            if (this._placeholderColor) {\r\n                context.fillStyle = this._placeholderColor;\r\n            }\r\n        }\r\n\r\n        // measures the textlength -> this.measure.width\r\n        this._textWidth = context.measureText(text).width;\r\n        // we double up the margin width\r\n        const marginWidth = this._margin.getValueInPixel(this._host, parentMeasure.width) * 2;\r\n\r\n        if (this._autoStretchWidth) {\r\n            const tmpLines = text.split(\"\\n\");\r\n            const longerString = tmpLines.reduce((acc: string, val: string) => {\r\n                const valueLength = context.measureText(val).width;\r\n                const accLength = context.measureText(acc).width;\r\n                return valueLength > accLength ? val : acc;\r\n            }, \"\");\r\n\r\n            const longerStringWidth = context.measureText(longerString).width;\r\n            this.width = Math.min(this._maxWidth.getValueInPixel(this._host, parentMeasure.width), longerStringWidth + marginWidth) + \"px\";\r\n\r\n            this.autoStretchWidth = true;\r\n        }\r\n\r\n        this._availableWidth = this._width.getValueInPixel(this._host, parentMeasure.width) - marginWidth;\r\n\r\n        // Prepare lines\r\n        this._lines = this._breakLines(this._availableWidth, context);\r\n        // can we find a cleaner implementation here?\r\n        this._contextForBreakLines = context;\r\n\r\n        if (this._autoStretchHeight) {\r\n            const textHeight = this._lines.length * this._fontOffset.height;\r\n            const totalHeight = textHeight + this._margin.getValueInPixel(this._host, parentMeasure.height) * 2;\r\n            this.height = Math.min(this._maxHeight.getValueInPixel(this._host, parentMeasure.height), totalHeight) + \"px\";\r\n\r\n            this._autoStretchHeight = true;\r\n        }\r\n\r\n        this._availableHeight = this._height.getValueInPixel(this._host, parentMeasure.height) - marginWidth;\r\n\r\n        if (this._isFocused) {\r\n            this._cursorInfo.currentLineIndex = 0;\r\n\r\n            let lineLength = this._lines[this._cursorInfo.currentLineIndex].text.length + this._lines[this._cursorInfo.currentLineIndex].lineEnding.length;\r\n            let tmpLength = 0;\r\n\r\n            while (tmpLength + lineLength <= this._cursorInfo.globalStartIndex) {\r\n                tmpLength += lineLength;\r\n\r\n                if (this._cursorInfo.currentLineIndex < this._lines.length - 1) {\r\n                    this._cursorInfo.currentLineIndex++;\r\n                    lineLength = this._lines[this._cursorInfo.currentLineIndex].text.length + this._lines[this._cursorInfo.currentLineIndex].lineEnding.length;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private _computeScroll() {\r\n        this._clipTextLeft = this._currentMeasure.left + this._margin.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n        this._clipTextTop = this._currentMeasure.top + this._margin.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n\r\n        if (this._isFocused && this._lines[this._cursorInfo.currentLineIndex].width > this._availableWidth) {\r\n            const textLeft = this._clipTextLeft - this._lines[this._cursorInfo.currentLineIndex].width + this._availableWidth;\r\n\r\n            if (!this._scrollLeft) {\r\n                this._scrollLeft = textLeft;\r\n            }\r\n        } else {\r\n            this._scrollLeft = this._clipTextLeft;\r\n        }\r\n\r\n        if (this._isFocused && !this._autoStretchHeight) {\r\n            const selectedHeight = (this._cursorInfo.currentLineIndex + 1) * this._fontOffset.height;\r\n            const textTop = this._clipTextTop - selectedHeight;\r\n\r\n            if (!this._scrollTop) {\r\n                this._scrollTop = textTop;\r\n            }\r\n        } else {\r\n            this._scrollTop = this._clipTextTop;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Processing of child after the parent measurement update\r\n     *\r\n     * @internal\r\n     */\r\n    protected _additionalProcessing(): void {\r\n        // Flush the highlighted text each frame\r\n        this.highlightedText = \"\";\r\n\r\n        this.onLinesReadyObservable.notifyObservers(this);\r\n    }\r\n\r\n    private _drawText(text: string, textWidth: number, y: number, context: ICanvasRenderingContext): void {\r\n        const width = this._currentMeasure.width;\r\n        let x = this._scrollLeft as number;\r\n        switch (this._textHorizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x += 0;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x += width - textWidth;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x += (width - textWidth) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this.outlineWidth) {\r\n            context.strokeText(text, this._currentMeasure.left + x, y);\r\n        }\r\n        context.fillText(text, x, y);\r\n    }\r\n\r\n    /**\r\n     * Copy the text in the clipboard\r\n     *\r\n     * @param ev The clipboard event\r\n     * @internal\r\n     */\r\n    protected _onCopyText(ev: ClipboardEvent): void {\r\n        this._isTextHighlightOn = false;\r\n        //when write permission to clipbaord data is denied\r\n        try {\r\n            ev.clipboardData && ev.clipboardData.setData(\"text/plain\", this._highlightedText);\r\n        } catch {} //pass\r\n        this._host.clipboardData = this._highlightedText;\r\n    }\r\n\r\n    /**\r\n     * Cut the text and copy it in the clipboard\r\n     *\r\n     * @param ev The clipboard event\r\n     * @internal\r\n     */\r\n    protected _onCutText(ev: ClipboardEvent): void {\r\n        if (!this._highlightedText) {\r\n            return;\r\n        }\r\n        //when write permission to clipbaord data is denied\r\n        try {\r\n            ev.clipboardData && ev.clipboardData.setData(\"text/plain\", this._highlightedText);\r\n        } catch {} //pass\r\n\r\n        this._host.clipboardData = this._highlightedText;\r\n\r\n        this._textWrapper.removePart(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex);\r\n\r\n        this._textHasChanged();\r\n    }\r\n\r\n    /**\r\n     * Paste the copied text from the clipboard\r\n     *\r\n     * @param ev The clipboard event\r\n     * @internal\r\n     */\r\n    protected _onPasteText(ev: ClipboardEvent): void {\r\n        let data: string = \"\";\r\n        if (ev.clipboardData && ev.clipboardData.types.indexOf(\"text/plain\") !== -1) {\r\n            data = ev.clipboardData.getData(\"text/plain\");\r\n        } else {\r\n            //get the cached data; returns blank string by default\r\n            data = this._host.clipboardData;\r\n        }\r\n\r\n        this._isTextHighlightOn = false;\r\n\r\n        this._textWrapper.removePart(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex, data);\r\n\r\n        const deltaIndex = data.length - (this._cursorInfo.globalEndIndex - this._cursorInfo.globalStartIndex);\r\n\r\n        this._cursorInfo.globalStartIndex += deltaIndex;\r\n        this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n\r\n        this._textHasChanged();\r\n    }\r\n\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        this._computeScroll();\r\n\r\n        this._scrollLeft = this._scrollLeft ?? 0;\r\n        this._scrollTop = this._scrollTop ?? 0;\r\n\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        // Background\r\n        if (this._isFocused) {\r\n            if (this._focusedBackground) {\r\n                context.fillStyle = this._isEnabled ? this._focusedBackground : this._disabledColor;\r\n\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n        } else if (this._background) {\r\n            context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n\r\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        // sets the color of the rectangle (border if background available)\r\n        if (this.color) {\r\n            context.fillStyle = this.color;\r\n        }\r\n\r\n        const height = this._currentMeasure.height;\r\n        const width = this._currentMeasure.width;\r\n        let rootY = 0;\r\n\r\n        switch (this._textVerticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                rootY = this._fontOffset.ascent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                rootY = height - this._fontOffset.height * (this._lines.length - 1) - this._fontOffset.descent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                rootY = this._fontOffset.ascent + (height - this._fontOffset.height * this._lines.length) / 2;\r\n                break;\r\n        }\r\n\r\n        context.save();\r\n        context.beginPath();\r\n        context.fillStyle = this.fontStyle;\r\n\r\n        // here we define the visible reactangle to clip it in next line\r\n        context.rect(this._clipTextLeft, this._clipTextTop, this._availableWidth + 2, this._availableHeight + 2);\r\n        context.clip();\r\n\r\n        // Text\r\n        rootY += this._scrollTop;\r\n\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n\r\n            if (i !== 0 && this._lineSpacing.internalValue !== 0) {\r\n                if (this._lineSpacing.isPixel) {\r\n                    rootY += this._lineSpacing.getValue(this._host);\r\n                } else {\r\n                    rootY = rootY + this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n                }\r\n            }\r\n\r\n            this._drawText(line.text, line.width, rootY, context);\r\n            rootY += this._fontOffset.height;\r\n        }\r\n\r\n        context.restore();\r\n\r\n        // Cursor\r\n        if (this._isFocused) {\r\n            // Render cursor\r\n            if (!this._blinkIsEven || this._isTextHighlightOn) {\r\n                let cursorLeft = this._scrollLeft + context.measureText(this._lines[this._cursorInfo.currentLineIndex].text.substr(0, this._cursorInfo.relativeStartIndex)).width;\r\n\r\n                if (cursorLeft < this._clipTextLeft) {\r\n                    this._scrollLeft += this._clipTextLeft - cursorLeft;\r\n                    cursorLeft = this._clipTextLeft;\r\n                    this._markAsDirty();\r\n                } else if (cursorLeft > this._clipTextLeft + this._availableWidth) {\r\n                    this._scrollLeft += this._clipTextLeft + this._availableWidth - cursorLeft;\r\n                    cursorLeft = this._clipTextLeft + this._availableWidth;\r\n                    this._markAsDirty();\r\n                }\r\n\r\n                let cursorTop = this._scrollTop + this._cursorInfo.currentLineIndex * this._fontOffset.height; //cursorTop distance from top to cursor start\r\n\r\n                if (cursorTop < this._clipTextTop) {\r\n                    this._scrollTop += this._clipTextTop - cursorTop;\r\n                    cursorTop = this._clipTextTop;\r\n                    this._markAsDirty();\r\n                } else if (cursorTop + this._fontOffset.height > this._clipTextTop + this._availableHeight) {\r\n                    this._scrollTop += this._clipTextTop + this._availableHeight - cursorTop - this._fontOffset.height;\r\n                    cursorTop = this._clipTextTop + this._availableHeight - this._fontOffset.height;\r\n                    this._markAsDirty();\r\n                }\r\n\r\n                if (!this._isTextHighlightOn) {\r\n                    context.fillRect(cursorLeft, cursorTop, 2, this._fontOffset.height);\r\n                }\r\n            }\r\n\r\n            this._resetBlinking();\r\n\r\n            //show the highlighted text\r\n            if (this._isTextHighlightOn) {\r\n                clearTimeout(this._blinkTimeout);\r\n\r\n                this._highlightedText = this.text.substring(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex);\r\n\r\n                context.globalAlpha = this._highligherOpacity;\r\n                context.fillStyle = this._textHighlightColor;\r\n\r\n                const startLineIndex = Math.min(this._cursorInfo.currentLineIndex, this._highlightCursorInfo.initialLineIndex);\r\n                const endLineIndex = Math.max(this._cursorInfo.currentLineIndex, this._highlightCursorInfo.initialLineIndex);\r\n\r\n                let highlightRootY = this._scrollTop + startLineIndex * this._fontOffset.height;\r\n\r\n                for (let i = startLineIndex; i <= endLineIndex; i++) {\r\n                    const line = this._lines[i];\r\n\r\n                    let highlightRootX = this._scrollLeft as number;\r\n                    switch (this._textHorizontalAlignment) {\r\n                        case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                            highlightRootX += 0;\r\n                            break;\r\n                        case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                            highlightRootX += width - line.width;\r\n                            break;\r\n                        case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                            highlightRootX += (width - line.width) / 2;\r\n                            break;\r\n                    }\r\n\r\n                    const begin = i === startLineIndex ? this._cursorInfo.relativeStartIndex : 0;\r\n                    const end = i === endLineIndex ? this._cursorInfo.relativeEndIndex : line.text.length;\r\n\r\n                    const leftOffsetWidth = context.measureText(line.text.substr(0, begin)).width;\r\n                    const selectedText = line.text.substring(begin, end);\r\n                    const hightlightWidth = context.measureText(selectedText).width;\r\n\r\n                    context.fillRect(highlightRootX + leftOffsetWidth, highlightRootY, hightlightWidth, this._fontOffset.height);\r\n\r\n                    highlightRootY += this._fontOffset.height;\r\n                }\r\n\r\n                if (this._cursorInfo.globalEndIndex === this._cursorInfo.globalStartIndex) {\r\n                    this._resetBlinking();\r\n                }\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n\r\n        // Border\r\n        if (this._thickness) {\r\n            if (this._isFocused) {\r\n                if (this.focusedColor) {\r\n                    context.strokeStyle = this.focusedColor;\r\n                }\r\n            } else {\r\n                if (this.color) {\r\n                    context.strokeStyle = this.color;\r\n                }\r\n            }\r\n\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.strokeRect(\r\n                this._currentMeasure.left + this._thickness / 2,\r\n                this._currentMeasure.top + this._thickness / 2,\r\n                this._currentMeasure.width - this._thickness,\r\n                this._currentMeasure.height - this._thickness\r\n            );\r\n        }\r\n    }\r\n\r\n    private _resetBlinking() {\r\n        clearTimeout(this._blinkTimeout);\r\n        this._blinkTimeout = <any>setTimeout(() => {\r\n            this._blinkIsEven = !this._blinkIsEven;\r\n            this._markAsDirty();\r\n        }, 500);\r\n    }\r\n\r\n    protected _applyStates(context: ICanvasRenderingContext): void {\r\n        super._applyStates(context);\r\n        if (this.outlineWidth) {\r\n            context.lineWidth = this.outlineWidth;\r\n            context.strokeStyle = this.outlineColor;\r\n        }\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\r\n            return false;\r\n        }\r\n\r\n        this._clickedCoordinateX = coordinates.x;\r\n        this._clickedCoordinateY = coordinates.y;\r\n\r\n        this._isTextHighlightOn = false;\r\n        this._highlightedText = \"\";\r\n        this._isPointerDown = true;\r\n        this._host._capturingControl[pointerId] = this;\r\n        if (this._host.focusedControl === this) {\r\n            // Move cursor\r\n            clearTimeout(this._blinkTimeout);\r\n            this._markAsDirty();\r\n            return true;\r\n        }\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        this._host.focusedControl = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    // for textselection\r\n    public _onPointerMove(target: Control, coordinates: Vector2, pointerId: number, pi: PointerInfoBase): void {\r\n        // Avoid Chromium-like beahavior when this event is fired right after onPointerDown\r\n        if (pi.event.movementX === 0 && pi.event.movementY === 0) {\r\n            return;\r\n        }\r\n\r\n        if (this._host.focusedControl === this && this._isPointerDown) {\r\n            this._clickedCoordinateX = coordinates.x;\r\n            this._clickedCoordinateY = coordinates.y;\r\n\r\n            if (!this._isTextHighlightOn) {\r\n                this._highlightCursorInfo.initialLineIndex = this._cursorInfo.currentLineIndex;\r\n                this._highlightCursorInfo.initialStartIndex = this._cursorInfo.globalStartIndex;\r\n                this._highlightCursorInfo.initialRelativeStartIndex = this._cursorInfo.relativeStartIndex;\r\n\r\n                this._isTextHighlightOn = true;\r\n            }\r\n\r\n            this._markAsDirty();\r\n        }\r\n        super._onPointerMove(target, coordinates, pointerId, pi);\r\n    }\r\n\r\n    /**\r\n     * Apply the correct position of cursor according to current modification\r\n     */\r\n    private _updateCursorPosition() {\r\n        if (!this._isFocused) {\r\n            return;\r\n        }\r\n\r\n        if (this._clickedCoordinateX && this._clickedCoordinateY) {\r\n            if (!this._isTextHighlightOn) {\r\n                this._cursorInfo = {\r\n                    globalStartIndex: 0,\r\n                    globalEndIndex: 0,\r\n                    relativeStartIndex: 0,\r\n                    relativeEndIndex: 0,\r\n                    currentLineIndex: 0,\r\n                };\r\n            }\r\n\r\n            let globalIndex = 0;\r\n            let relativeIndex = 0;\r\n\r\n            const lastClickedCoordinateY = this._clickedCoordinateY - (this._scrollTop as number);\r\n\r\n            const relativeCoordinateY = Math.floor(lastClickedCoordinateY / this._fontOffset.height);\r\n            this._cursorInfo.currentLineIndex = Math.min(Math.max(relativeCoordinateY, 0), this._lines.length - 1);\r\n\r\n            let currentSize = 0;\r\n\r\n            const relativeXPosition = this._clickedCoordinateX - (this._scrollLeft ?? 0);\r\n\r\n            let previousDist = 0;\r\n\r\n            for (let index = 0; index < this._cursorInfo.currentLineIndex; index++) {\r\n                const line = this._lines[index];\r\n                globalIndex += line.text.length + line.lineEnding.length;\r\n            }\r\n\r\n            while (currentSize < relativeXPosition && this._lines[this._cursorInfo.currentLineIndex].text.length > relativeIndex) {\r\n                relativeIndex++;\r\n                previousDist = Math.abs(relativeXPosition - currentSize);\r\n                currentSize = this._contextForBreakLines.measureText(this._lines[this._cursorInfo.currentLineIndex].text.substr(0, relativeIndex)).width;\r\n            }\r\n\r\n            // Find closest move\r\n            if (Math.abs(relativeXPosition - currentSize) > previousDist && relativeIndex > 0) {\r\n                relativeIndex--;\r\n            }\r\n\r\n            globalIndex += relativeIndex;\r\n\r\n            if (!this._isTextHighlightOn) {\r\n                this._cursorInfo.globalStartIndex = globalIndex;\r\n                this._cursorInfo.relativeStartIndex = relativeIndex;\r\n                this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n                this._cursorInfo.relativeEndIndex = this._cursorInfo.relativeStartIndex;\r\n            } else {\r\n                if (globalIndex < this._highlightCursorInfo.initialStartIndex) {\r\n                    this._cursorInfo.globalStartIndex = globalIndex;\r\n                    this._cursorInfo.relativeStartIndex = relativeIndex;\r\n                    this._cursorInfo.globalEndIndex = this._highlightCursorInfo.initialStartIndex;\r\n                    this._cursorInfo.relativeEndIndex = this._highlightCursorInfo.initialRelativeStartIndex;\r\n                } else {\r\n                    this._cursorInfo.globalStartIndex = this._highlightCursorInfo.initialStartIndex;\r\n                    this._cursorInfo.relativeStartIndex = this._highlightCursorInfo.initialRelativeStartIndex;\r\n                    this._cursorInfo.globalEndIndex = globalIndex;\r\n                    this._cursorInfo.relativeEndIndex = relativeIndex;\r\n                }\r\n            }\r\n\r\n            // Avoid the caret during highlighting\r\n            this._blinkIsEven = this._isTextHighlightOn;\r\n            this._clickedCoordinateX = null;\r\n            this._clickedCoordinateY = null;\r\n        } else {\r\n            // Standard behavior same as Current line is at least above the initial highlight index\r\n            this._cursorInfo.relativeStartIndex = 0;\r\n            this._cursorInfo.currentLineIndex = 0;\r\n\r\n            let lineLength = this._lines[this._cursorInfo.currentLineIndex].text.length + this._lines[this._cursorInfo.currentLineIndex].lineEnding.length;\r\n            let tmpLength = 0;\r\n\r\n            while (tmpLength + lineLength <= this._cursorInfo.globalStartIndex) {\r\n                tmpLength += lineLength;\r\n\r\n                if (this._cursorInfo.currentLineIndex < this._lines.length - 1) {\r\n                    this._cursorInfo.currentLineIndex++;\r\n                    lineLength = this._lines[this._cursorInfo.currentLineIndex].text.length + this._lines[this._cursorInfo.currentLineIndex].lineEnding.length;\r\n                }\r\n            }\r\n\r\n            this._cursorInfo.relativeStartIndex = this._cursorInfo.globalStartIndex - tmpLength;\r\n\r\n            if (this._highlightCursorInfo.initialStartIndex !== -1 && this._cursorInfo.globalStartIndex >= this._highlightCursorInfo.initialStartIndex) {\r\n                // Current line is at least below the initial highlight index\r\n                while (tmpLength + lineLength <= this._cursorInfo.globalEndIndex) {\r\n                    tmpLength += lineLength;\r\n\r\n                    if (this._cursorInfo.currentLineIndex < this._lines.length - 1) {\r\n                        this._cursorInfo.currentLineIndex++;\r\n                        lineLength = this._lines[this._cursorInfo.currentLineIndex].text.length + this._lines[this._cursorInfo.currentLineIndex].lineEnding.length;\r\n                    }\r\n                }\r\n\r\n                this._cursorInfo.relativeEndIndex = this._cursorInfo.globalEndIndex - tmpLength;\r\n            } else if (!this._isTextHighlightOn) {\r\n                this._cursorInfo.relativeEndIndex = this._cursorInfo.relativeStartIndex;\r\n                this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update all values of cursor information based on cursorIndex value\r\n     *\r\n     * @param offset The index to take care of\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected _updateValueFromCursorIndex(offset: number) {\r\n        // Override to avoid parent behavior during _onPointerMove\r\n    }\r\n\r\n    /**\r\n     * Select the word immediatly under the cursor on double click\r\n     *\r\n     * @param _evt Pointer informations of double click\r\n     * @internal\r\n     */\r\n    protected _processDblClick(_evt: PointerInfo) {\r\n        //pre-find the start and end index of the word under cursor, speeds up the rendering\r\n        let moveLeft, moveRight;\r\n        do {\r\n            moveLeft = this._cursorInfo.globalStartIndex > 0 && this._textWrapper.isWord(this._cursorInfo.globalStartIndex - 1) ? --this._cursorInfo.globalStartIndex : 0;\r\n            moveRight =\r\n                this._cursorInfo.globalEndIndex < this._textWrapper.length && this._textWrapper.isWord(this._cursorInfo.globalEndIndex) ? ++this._cursorInfo.globalEndIndex : 0;\r\n        } while (moveLeft || moveRight);\r\n\r\n        this._highlightCursorInfo.initialLineIndex = this._cursorInfo.currentLineIndex;\r\n        this._highlightCursorInfo.initialStartIndex = this._cursorInfo.globalStartIndex;\r\n\r\n        this.onTextHighlightObservable.notifyObservers(this);\r\n\r\n        this._isTextHighlightOn = true;\r\n        this._blinkIsEven = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** @internal */\r\n    protected _selectAllText() {\r\n        this._isTextHighlightOn = true;\r\n        this._blinkIsEven = true;\r\n\r\n        this._highlightCursorInfo = {\r\n            initialStartIndex: 0,\r\n            initialRelativeStartIndex: 0,\r\n            initialLineIndex: 0,\r\n        };\r\n\r\n        this._cursorInfo = {\r\n            globalStartIndex: 0,\r\n            globalEndIndex: this._textWrapper.length,\r\n            relativeEndIndex: this._lines[this._lines.length - 1].text.length,\r\n            relativeStartIndex: 0,\r\n            currentLineIndex: this._lines.length - 1,\r\n        };\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    public dipose() {\r\n        super.dispose();\r\n\r\n        this.onLinesReadyObservable.clear();\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.InputTextArea\", InputTextArea);\r\n","import { InputText } from \"./inputText\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { TextWrapper } from \"./textWrapper\";\r\n\r\n/**\r\n * Class used to create a password control\r\n */\r\nexport class InputPassword extends InputText {\r\n    protected _getTypeName(): string {\r\n        return \"InputPassword\";\r\n    }\r\n\r\n    protected _beforeRenderText(textWrapper: TextWrapper): TextWrapper {\r\n        const pwdTextWrapper = new TextWrapper();\r\n        let txt = \"\";\r\n        for (let i = 0; i < textWrapper.length; i++) {\r\n            txt += \"\\u2022\";\r\n        }\r\n        pwdTextWrapper.text = txt;\r\n        return pwdTextWrapper;\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.InputPassword\", InputPassword);\r\n","import type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Vector3, Matrix } from \"core/Maths/math.vector\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\nimport { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport type { Measure } from \"../measure\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/** Class used to render 2D lines */\r\nexport class Line extends Control {\r\n    private _lineWidth = 1;\r\n    /** @internal */\r\n    public _x1 = new ValueAndUnit(0);\r\n    /** @internal */\r\n    public _y1 = new ValueAndUnit(0);\r\n    /** @internal */\r\n    public _x2 = new ValueAndUnit(0);\r\n    /** @internal */\r\n    public _y2 = new ValueAndUnit(0);\r\n    private _dash = new Array<number>();\r\n    private _connectedControl: Control;\r\n    private _connectedControlDirtyObserver: Nullable<Observer<Control>>;\r\n\r\n    /** Gets or sets the dash pattern */\r\n    @serialize()\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the control connected with the line end */\r\n    public get connectedControl(): Control {\r\n        return this._connectedControl;\r\n    }\r\n\r\n    public set connectedControl(value: Control) {\r\n        if (this._connectedControl === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._connectedControlDirtyObserver && this._connectedControl) {\r\n            this._connectedControl.onDirtyObservable.remove(this._connectedControlDirtyObserver);\r\n            this._connectedControlDirtyObserver = null;\r\n        }\r\n\r\n        if (value) {\r\n            this._connectedControlDirtyObserver = value.onDirtyObservable.add(() => this._markAsDirty());\r\n        }\r\n\r\n        this._connectedControl = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets start coordinates on X axis */\r\n    @serialize()\r\n    public get x1(): string | number {\r\n        return this._x1.toString(this._host);\r\n    }\r\n\r\n    public set x1(value: string | number) {\r\n        if (this._x1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets start coordinates on Y axis */\r\n    @serialize()\r\n    public get y1(): string | number {\r\n        return this._y1.toString(this._host);\r\n    }\r\n\r\n    public set y1(value: string | number) {\r\n        if (this._y1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on X axis */\r\n    @serialize()\r\n    public get x2(): string | number {\r\n        return this._x2.toString(this._host);\r\n    }\r\n\r\n    public set x2(value: string | number) {\r\n        if (this._x2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on Y axis */\r\n    @serialize()\r\n    public get y2(): string | number {\r\n        return this._y2.toString(this._host);\r\n    }\r\n\r\n    public set y2(value: string | number) {\r\n        if (this._y2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    @serialize()\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets horizontal alignment */\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    /** Gets or sets vertical alignment */\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    /** @internal */\r\n    public get _effectiveX2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerX : 0) + this._x2.getValue(this._host);\r\n    }\r\n\r\n    /** @internal */\r\n    public get _effectiveY2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerY : 0) + this._y2.getValue(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Line\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this._automaticSize = true;\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Line\";\r\n    }\r\n\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        context.strokeStyle = this._getColor(context);\r\n        context.lineWidth = this._lineWidth;\r\n        context.setLineDash(this._dash);\r\n\r\n        context.beginPath();\r\n        context.moveTo(this._cachedParentMeasure.left + this._x1.getValue(this._host), this._cachedParentMeasure.top + this._y1.getValue(this._host));\r\n\r\n        context.lineTo(this._cachedParentMeasure.left + this._effectiveX2, this._cachedParentMeasure.top + this._effectiveY2);\r\n        context.stroke();\r\n\r\n        context.restore();\r\n    }\r\n\r\n    public _measure(): void {\r\n        // Width / Height\r\n        this._currentMeasure.width = Math.abs(this._x1.getValue(this._host) - this._effectiveX2) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._y1.getValue(this._host) - this._effectiveY2) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure): void {\r\n        this._currentMeasure.left = parentMeasure.left + Math.min(this._x1.getValue(this._host), this._effectiveX2) - this._lineWidth / 2;\r\n        this._currentMeasure.top = parentMeasure.top + Math.min(this._y1.getValue(this._host), this._effectiveY2) - this._lineWidth / 2;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line given 3D cartesian coordinates.\r\n     * @param position Targeted world position\r\n     * @param scene Scene\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene, end: boolean = false): void {\r\n        if (!this._host || this.parent !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        const globalViewport = this._host._getGlobalViewport();\r\n        const projectedPosition = Vector3.Project(position, Matrix.IdentityReadOnly, scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition, end);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line to a position in screen absolute space.\r\n     * @param projectedPosition Position in screen absolute space (X, Y)\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3, end: boolean = false): void {\r\n        const x: string = projectedPosition.x + this._linkOffsetX.getValue(this._host) + \"px\";\r\n        const y: string = projectedPosition.y + this._linkOffsetY.getValue(this._host) + \"px\";\r\n\r\n        if (end) {\r\n            this.x2 = x;\r\n            this.y2 = y;\r\n            this._x2.ignoreAdaptiveScaling = true;\r\n            this._y2.ignoreAdaptiveScaling = true;\r\n        } else {\r\n            this.x1 = x;\r\n            this.y1 = y;\r\n            this._x1.ignoreAdaptiveScaling = true;\r\n            this._y1.ignoreAdaptiveScaling = true;\r\n        }\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Line\", Line);\r\n","import type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport { Epsilon } from \"core/Maths/math.constants\";\r\nimport type { Camera } from \"core/Cameras/camera\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\n\r\nimport type { MultiLine } from \"./controls/multiLine\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\nimport type { Control } from \"./controls/control\";\r\n\r\n/**\r\n * Class used to store a point for a MultiLine object.\r\n * The point can be pure 2D coordinates, a mesh or a control\r\n */\r\nexport class MultiLinePoint {\r\n    private _multiLine: MultiLine;\r\n\r\n    private _x: ValueAndUnit;\r\n    private _y: ValueAndUnit;\r\n    private _control: Nullable<Control>;\r\n    private _mesh: Nullable<AbstractMesh>;\r\n\r\n    private _controlObserver: Nullable<Observer<Control>>;\r\n    private _meshObserver: Nullable<Observer<Camera>>;\r\n\r\n    /** @internal */\r\n    public _point: Vector3;\r\n\r\n    /**\r\n     * Creates a new MultiLinePoint\r\n     * @param multiLine defines the source MultiLine object\r\n     */\r\n    constructor(multiLine: MultiLine) {\r\n        this._multiLine = multiLine;\r\n\r\n        this._x = new ValueAndUnit(0);\r\n        this._y = new ValueAndUnit(0);\r\n\r\n        this._point = new Vector3(0, 0, 0);\r\n    }\r\n\r\n    /** Gets or sets x coordinate */\r\n    public get x(): string | number {\r\n        return this._x.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set x(value: string | number) {\r\n        if (this._x.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets y coordinate */\r\n    public get y(): string | number {\r\n        return this._y.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set y(value: string | number) {\r\n        if (this._y.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the control associated with this point */\r\n    public get control(): Nullable<Control> {\r\n        return this._control;\r\n    }\r\n\r\n    public set control(value: Nullable<Control>) {\r\n        if (this._control === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._control && this._controlObserver) {\r\n            this._control.onDirtyObservable.remove(this._controlObserver);\r\n\r\n            this._controlObserver = null;\r\n        }\r\n\r\n        this._control = value;\r\n\r\n        if (this._control) {\r\n            this._controlObserver = this._control.onDirtyObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the mesh associated with this point */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        return this._mesh;\r\n    }\r\n\r\n    public set mesh(value: Nullable<AbstractMesh>) {\r\n        if (this._mesh === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._mesh && this._meshObserver) {\r\n            this._mesh.getScene().onAfterCameraRenderObservable.remove(this._meshObserver);\r\n        }\r\n\r\n        this._mesh = value;\r\n\r\n        if (this._mesh) {\r\n            this._meshObserver = this._mesh.getScene().onAfterCameraRenderObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Resets links */\r\n    public resetLinks(): void {\r\n        this.control = null;\r\n        this.mesh = null;\r\n    }\r\n\r\n    /**\r\n     * Gets a translation vector with Z component\r\n     * @returns the translation vector\r\n     */\r\n    public translate(): Vector3 {\r\n        this._point = this._translatePoint();\r\n\r\n        return this._point;\r\n    }\r\n\r\n    private _translatePoint(): Vector3 {\r\n        if (this._mesh != null) {\r\n            return this._multiLine._host.getProjectedPositionWithZ(this._mesh.getBoundingInfo().boundingSphere.center, this._mesh.getWorldMatrix());\r\n        } else if (this._control != null) {\r\n            return new Vector3(this._control.centerX, this._control.centerY, 1 - Epsilon);\r\n        } else {\r\n            const host: any = this._multiLine._host as any;\r\n\r\n            const xValue: number = this._x.getValueInPixel(host, Number(host._canvas.width));\r\n            const yValue: number = this._y.getValueInPixel(host, Number(host._canvas.height));\r\n\r\n            return new Vector3(xValue, yValue, 1 - Epsilon);\r\n        }\r\n    }\r\n\r\n    /** Release associated resources */\r\n    public dispose(): void {\r\n        this.resetLinks();\r\n    }\r\n}\r\n","import type { Nullable } from \"core/types\";\r\nimport { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\n\r\nimport { Control } from \"./control\";\r\nimport { MultiLinePoint } from \"../multiLinePoint\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { Vector3 } from \"core/Maths/math.vector\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/**\r\n * Class used to create multi line control\r\n */\r\nexport class MultiLine extends Control {\r\n    private _lineWidth: number = 1;\r\n    private _dash: number[];\r\n    private _points: Nullable<MultiLinePoint>[];\r\n\r\n    private _minX: Nullable<number>;\r\n    private _minY: Nullable<number>;\r\n    private _maxX: Nullable<number>;\r\n    private _maxY: Nullable<number>;\r\n\r\n    /**\r\n     * Creates a new MultiLine\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this._automaticSize = true;\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        this._dash = [];\r\n        this._points = [];\r\n    }\r\n\r\n    /** Gets or sets dash pattern */\r\n    @serialize()\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets point stored at specified index\r\n     * @param index defines the index to look for\r\n     * @returns the requested point if found\r\n     */\r\n    public getAt(index: number): MultiLinePoint {\r\n        if (!this._points[index]) {\r\n            this._points[index] = new MultiLinePoint(this);\r\n        }\r\n\r\n        return this._points[index] as MultiLinePoint;\r\n    }\r\n\r\n    /** Function called when a point is updated */\r\n    public onPointUpdate = (): void => {\r\n        this._markAsDirty();\r\n    };\r\n\r\n    /**\r\n     * Adds new points to the point collection\r\n     * @param items defines the list of items (mesh, control or 2d coordinates) to add\r\n     * @returns the list of created MultiLinePoint\r\n     */\r\n    public add(...items: (AbstractMesh | Control | { x: string | number; y: string | number })[]): MultiLinePoint[] {\r\n        return items.map((item) => this.push(item));\r\n    }\r\n\r\n    /**\r\n     * Adds a new point to the point collection\r\n     * @param item defines the item (mesh, control or 2d coordinates) to add\r\n     * @returns the created MultiLinePoint\r\n     */\r\n    public push(item?: AbstractMesh | Control | { x: string | number; y: string | number }): MultiLinePoint {\r\n        const point: MultiLinePoint = this.getAt(this._points.length);\r\n\r\n        if (item == null) {\r\n            return point;\r\n        }\r\n\r\n        if (item instanceof AbstractMesh) {\r\n            point.mesh = item;\r\n        } else if (item instanceof Control) {\r\n            point.control = item;\r\n        } else if (item.x != null && item.y != null) {\r\n            point.x = item.x;\r\n            point.y = item.y;\r\n        }\r\n\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * Remove a specific value or point from the active point collection\r\n     * @param value defines the value or point to remove\r\n     */\r\n    public remove(value: number | MultiLinePoint): void {\r\n        let index: number;\r\n\r\n        if (value instanceof MultiLinePoint) {\r\n            index = this._points.indexOf(value);\r\n\r\n            if (index === -1) {\r\n                return;\r\n            }\r\n        } else {\r\n            index = value;\r\n        }\r\n\r\n        const point: Nullable<MultiLinePoint> = this._points[index];\r\n\r\n        if (!point) {\r\n            return;\r\n        }\r\n\r\n        point.dispose();\r\n\r\n        this._points.splice(index, 1);\r\n    }\r\n\r\n    /**\r\n     * Resets this object to initial state (no point)\r\n     */\r\n    public reset(): void {\r\n        while (this._points.length > 0) {\r\n            this.remove(this._points.length - 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets all links\r\n     */\r\n    public resetLinks(): void {\r\n        this._points.forEach((point) => {\r\n            if (point != null) {\r\n                point.resetLinks();\r\n            }\r\n        });\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MultiLine\";\r\n    }\r\n\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n\r\n        context.strokeStyle = this.color;\r\n        context.lineWidth = this._lineWidth;\r\n        context.setLineDash(this._dash);\r\n\r\n        context.beginPath();\r\n\r\n        let first: boolean = true; //first index is not necessarily 0\r\n        let previousPoint: Vector3;\r\n\r\n        this._points.forEach((point) => {\r\n            if (!point) {\r\n                return;\r\n            }\r\n\r\n            if (first) {\r\n                context.moveTo(point._point.x, point._point.y);\r\n\r\n                first = false;\r\n            } else {\r\n                if (point._point.z < 1 && previousPoint.z < 1) {\r\n                    context.lineTo(point._point.x, point._point.y);\r\n                } else {\r\n                    context.moveTo(point._point.x, point._point.y);\r\n                }\r\n            }\r\n            previousPoint = point._point;\r\n        });\r\n\r\n        context.stroke();\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(): void {\r\n        this._minX = null;\r\n        this._minY = null;\r\n        this._maxX = null;\r\n        this._maxY = null;\r\n\r\n        this._points.forEach((point) => {\r\n            if (!point) {\r\n                return;\r\n            }\r\n\r\n            point.translate();\r\n\r\n            if (this._minX == null || point._point.x < this._minX) {\r\n                this._minX = point._point.x;\r\n            }\r\n            if (this._minY == null || point._point.y < this._minY) {\r\n                this._minY = point._point.y;\r\n            }\r\n            if (this._maxX == null || point._point.x > this._maxX) {\r\n                this._maxX = point._point.x;\r\n            }\r\n            if (this._maxY == null || point._point.y > this._maxY) {\r\n                this._maxY = point._point.y;\r\n            }\r\n        });\r\n\r\n        if (this._minX == null) {\r\n            this._minX = 0;\r\n        }\r\n        if (this._minY == null) {\r\n            this._minY = 0;\r\n        }\r\n        if (this._maxX == null) {\r\n            this._maxX = 0;\r\n        }\r\n        if (this._maxY == null) {\r\n            this._maxY = 0;\r\n        }\r\n    }\r\n\r\n    public _measure(): void {\r\n        if (this._minX == null || this._maxX == null || this._minY == null || this._maxY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.width = Math.abs(this._maxX - this._minX) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._maxY - this._minY) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(): void {\r\n        if (this._minX == null || this._minY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.left = this._minX - this._lineWidth / 2;\r\n        this._currentMeasure.top = this._minY - this._lineWidth / 2;\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.reset();\r\n\r\n        super.dispose();\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.MultiLine\", MultiLine);\r\n","import { Observable } from \"core/Misc/observable\";\r\nimport type { Vector2 } from \"core/Maths/math.vector\";\r\n\r\nimport { Control } from \"./control\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/**\r\n * Class used to create radio button controls\r\n */\r\nexport class RadioButton extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    @serialize()\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets group name */\r\n    @serialize()\r\n    public group = \"\";\r\n\r\n    /** Observable raised when isChecked is changed */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    @serialize()\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    @serialize()\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    @serialize()\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n\r\n        if (this._isChecked && this._host) {\r\n            // Update all controls from same group\r\n            this._host.executeOnAllControls((control) => {\r\n                if (control === this) {\r\n                    return;\r\n                }\r\n\r\n                if ((<any>control).group === undefined) {\r\n                    return;\r\n                }\r\n                const childRadio = <RadioButton>control;\r\n                if (childRadio.group === this.group) {\r\n                    childRadio.isChecked = false;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new RadioButton\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"RadioButton\";\r\n    }\r\n\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        const actualWidth = this._currentMeasure.width - this._thickness;\r\n        const actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        // Outer\r\n        Control.drawEllipse(\r\n            this._currentMeasure.left + this._currentMeasure.width / 2,\r\n            this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._thickness / 2,\r\n            this._currentMeasure.height / 2 - this._thickness / 2,\r\n            context\r\n        );\r\n\r\n        context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n        context.fill();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        context.strokeStyle = this.color;\r\n        context.lineWidth = this._thickness;\r\n\r\n        context.stroke();\r\n\r\n        // Inner\r\n        if (this._isChecked) {\r\n            context.fillStyle = this._isEnabled ? this.color : this._disabledColor;\r\n            const offsetWidth = actualWidth * this._checkSizeRatio;\r\n            const offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n            Control.drawEllipse(\r\n                this._currentMeasure.left + this._currentMeasure.width / 2,\r\n                this._currentMeasure.top + this._currentMeasure.height / 2,\r\n                offsetWidth / 2 - this._thickness / 2,\r\n                offseHeight / 2 - this._thickness / 2,\r\n                context\r\n            );\r\n\r\n            context.fill();\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isReadOnly) {\r\n            return true;\r\n        }\r\n\r\n        if (!this.isChecked) {\r\n            this.isChecked = true;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a radio button with a header\r\n     * @param title defines the label to use for the header\r\n     * @param group defines the group to use for the radio button\r\n     * @param isChecked defines the initial state of the radio button\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the radio button and a textBlock\r\n     */\r\n    public static AddRadioButtonWithHeader(title: string, group: string, isChecked: boolean, onValueChanged: (button: RadioButton, value: boolean) => void): StackPanel {\r\n        const panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        const radio = new RadioButton();\r\n        radio.width = \"20px\";\r\n        radio.height = \"20px\";\r\n        radio.isChecked = isChecked;\r\n        radio.color = \"green\";\r\n        radio.group = group;\r\n        radio.onIsCheckedChangedObservable.add((value) => onValueChanged(radio, value));\r\n        panel.addControl(radio);\r\n\r\n        const header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header);\r\n\r\n        return panel;\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.RadioButton\", RadioButton);\r\n","import { Observable } from \"core/Misc/observable\";\r\nimport type { Vector2 } from \"core/Maths/math.vector\";\r\n\r\nimport { Control } from \"../control\";\r\nimport { ValueAndUnit } from \"../../valueAndUnit\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class BaseSlider extends Control {\r\n    protected _thumbWidth = new ValueAndUnit(20, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _minimum = 0;\r\n    private _maximum = 100;\r\n    private _value = 50;\r\n    private _isVertical = false;\r\n    protected _barOffset = new ValueAndUnit(5, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _isThumbClamped = false;\r\n    protected _displayThumb = true;\r\n    private _step = 0;\r\n\r\n    private _lastPointerDownId = -1;\r\n\r\n    // Shared rendering info\r\n    protected _effectiveBarOffset = 0;\r\n    protected _renderLeft: number;\r\n    protected _renderTop: number;\r\n    protected _renderWidth: number;\r\n    protected _renderHeight: number;\r\n    protected _backgroundBoxLength: number;\r\n    protected _backgroundBoxThickness: number;\r\n    protected _effectiveThumbThickness: number;\r\n\r\n    /** Observable raised when the slider value changes */\r\n    public onValueChangedObservable = new Observable<number>();\r\n\r\n    /** Gets or sets a boolean indicating if the thumb must be rendered */\r\n    @serialize()\r\n    public get displayThumb(): boolean {\r\n        return this._displayThumb;\r\n    }\r\n\r\n    public set displayThumb(value: boolean) {\r\n        if (this._displayThumb === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayThumb = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a step to apply to values (0 by default) */\r\n    @serialize()\r\n    public get step(): number {\r\n        return this._step;\r\n    }\r\n\r\n    public set step(value: number) {\r\n        if (this._step === value) {\r\n            return;\r\n        }\r\n\r\n        this._step = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets main bar offset (ie. the margin applied to the value bar) */\r\n    @serialize()\r\n    public get barOffset(): string | number {\r\n        return this._barOffset.toString(this._host);\r\n    }\r\n\r\n    /** Gets main bar offset in pixels*/\r\n    public get barOffsetInPixels(): number {\r\n        return this._barOffset.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set barOffset(value: string | number) {\r\n        if (this._barOffset.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._barOffset.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets thumb width */\r\n    @serialize()\r\n    public get thumbWidth(): string | number {\r\n        return this._thumbWidth.toString(this._host);\r\n    }\r\n\r\n    /** Gets thumb width in pixels */\r\n    public get thumbWidthInPixels(): number {\r\n        return this._thumbWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set thumbWidth(value: string | number) {\r\n        if (this._thumbWidth.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._thumbWidth.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets minimum value */\r\n    @serialize()\r\n    public get minimum(): number {\r\n        return this._minimum;\r\n    }\r\n\r\n    public set minimum(value: number) {\r\n        if (this._minimum === value) {\r\n            return;\r\n        }\r\n\r\n        this._minimum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets maximum value */\r\n    @serialize()\r\n    public get maximum(): number {\r\n        return this._maximum;\r\n    }\r\n\r\n    public set maximum(value: number) {\r\n        if (this._maximum === value) {\r\n            return;\r\n        }\r\n\r\n        this._maximum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets current value */\r\n    @serialize()\r\n    public get value(): number {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: number) {\r\n        value = Math.max(Math.min(value, this._maximum), this._minimum);\r\n\r\n        if (this._value === value) {\r\n            return;\r\n        }\r\n\r\n        this._value = value;\r\n        this._markAsDirty();\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /**Gets or sets a boolean indicating if the slider should be vertical or horizontal */\r\n    @serialize()\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating if the thumb can go over main bar extends */\r\n    @serialize()\r\n    public get isThumbClamped(): boolean {\r\n        return this._isThumbClamped;\r\n    }\r\n\r\n    public set isThumbClamped(value: boolean) {\r\n        if (this._isThumbClamped === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbClamped = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new BaseSlider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"BaseSlider\";\r\n    }\r\n\r\n    protected _getThumbPosition() {\r\n        if (this.isVertical) {\r\n            return ((this.maximum - this.value) / (this.maximum - this.minimum)) * this._backgroundBoxLength;\r\n        }\r\n\r\n        return ((this.value - this.minimum) / (this.maximum - this.minimum)) * this._backgroundBoxLength;\r\n    }\r\n\r\n    protected _getThumbThickness(type: string): number {\r\n        let thumbThickness = 0;\r\n        switch (type) {\r\n            case \"circle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.max(this._thumbWidth.getValue(this._host), this._backgroundBoxThickness);\r\n                } else {\r\n                    thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n                }\r\n                break;\r\n            case \"rectangle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.min(this._thumbWidth.getValue(this._host), this._backgroundBoxThickness);\r\n                } else {\r\n                    thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n                }\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n    protected _prepareRenderingData(type: string) {\r\n        // Main bar\r\n        this._effectiveBarOffset = 0;\r\n        this._renderLeft = this._currentMeasure.left;\r\n        this._renderTop = this._currentMeasure.top;\r\n        this._renderWidth = this._currentMeasure.width;\r\n        this._renderHeight = this._currentMeasure.height;\r\n\r\n        this._backgroundBoxLength = Math.max(this._currentMeasure.width, this._currentMeasure.height);\r\n        this._backgroundBoxThickness = Math.min(this._currentMeasure.width, this._currentMeasure.height);\r\n        this._effectiveThumbThickness = this._getThumbThickness(type);\r\n\r\n        if (this.displayThumb) {\r\n            this._backgroundBoxLength -= this._effectiveThumbThickness;\r\n        }\r\n        //throw error when height is less than width for vertical slider\r\n        if (this.isVertical && this._currentMeasure.height < this._currentMeasure.width) {\r\n            console.error(\"Height should be greater than width\");\r\n            return;\r\n        }\r\n        if (this._barOffset.isPixel) {\r\n            this._effectiveBarOffset = Math.min(this._barOffset.getValue(this._host), this._backgroundBoxThickness);\r\n        } else {\r\n            this._effectiveBarOffset = this._backgroundBoxThickness * this._barOffset.getValue(this._host);\r\n        }\r\n\r\n        this._backgroundBoxThickness -= this._effectiveBarOffset * 2;\r\n\r\n        if (this.isVertical) {\r\n            this._renderLeft += this._effectiveBarOffset;\r\n            if (!this.isThumbClamped && this.displayThumb) {\r\n                this._renderTop += this._effectiveThumbThickness / 2;\r\n            }\r\n\r\n            this._renderHeight = this._backgroundBoxLength;\r\n            this._renderWidth = this._backgroundBoxThickness;\r\n        } else {\r\n            this._renderTop += this._effectiveBarOffset;\r\n            if (!this.isThumbClamped && this.displayThumb) {\r\n                this._renderLeft += this._effectiveThumbThickness / 2;\r\n            }\r\n            this._renderHeight = this._backgroundBoxThickness;\r\n            this._renderWidth = this._backgroundBoxLength;\r\n        }\r\n    }\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        let value: number;\r\n        if (this._isVertical) {\r\n            value = this._minimum + (1 - (y - this._currentMeasure.top) / this._currentMeasure.height) * (this._maximum - this._minimum);\r\n        } else {\r\n            value = this._minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this._maximum - this._minimum);\r\n        }\r\n        this.value = this._step ? Math.round(value / this._step) * this._step : value;\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isReadOnly) {\r\n            return true;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        this._host._capturingControl[pointerId] = this;\r\n        this._lastPointerDownId = pointerId;\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2, pointerId: number, pi: PointerInfoBase): void {\r\n        // Only listen to pointer move events coming from the last pointer to click on the element (To support dual vr controller interaction)\r\n        if (pointerId != this._lastPointerDownId) {\r\n            return;\r\n        }\r\n\r\n        if (this._pointerIsDown && !this.isReadOnly) {\r\n            this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates, pointerId, pi);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n\r\n    public _onCanvasBlur(): void {\r\n        this._forcePointerUp();\r\n        super._onCanvasBlur();\r\n    }\r\n}\r\n","import { BaseSlider } from \"./baseSlider\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { BaseGradient } from \"../gradient/BaseGradient\";\r\nimport type { AdvancedDynamicTexture } from \"gui/2D/advancedDynamicTexture\";\r\nimport { Tools } from \"core/Misc/tools\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class Slider extends BaseSlider {\r\n    private _background = \"black\";\r\n    private _borderColor = \"white\";\r\n    private _thumbColor = \"\";\r\n    private _isThumbCircle = false;\r\n    protected _displayValueBar = true;\r\n    private _backgroundGradient: Nullable<BaseGradient> = null;\r\n\r\n    /** Gets or sets a boolean indicating if the value bar must be rendered */\r\n    @serialize()\r\n    public get displayValueBar(): boolean {\r\n        return this._displayValueBar;\r\n    }\r\n\r\n    public set displayValueBar(value: boolean) {\r\n        if (this._displayValueBar === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayValueBar = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets border color */\r\n    @serialize()\r\n    public get borderColor(): string {\r\n        return this._borderColor;\r\n    }\r\n\r\n    public set borderColor(value: string) {\r\n        if (this._borderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._borderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    @serialize()\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background gradient */\r\n    public get backgroundGradient(): Nullable<BaseGradient> {\r\n        return this._backgroundGradient;\r\n    }\r\n\r\n    public set backgroundGradient(value: Nullable<BaseGradient>) {\r\n        if (this._backgroundGradient === value) {\r\n            return;\r\n        }\r\n\r\n        this._backgroundGradient = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets thumb's color */\r\n    @serialize()\r\n    public get thumbColor(): string {\r\n        return this._thumbColor;\r\n    }\r\n\r\n    public set thumbColor(value: string) {\r\n        if (this._thumbColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the thumb should be round or square */\r\n    @serialize()\r\n    public get isThumbCircle(): boolean {\r\n        return this._isThumbCircle;\r\n    }\r\n\r\n    public set isThumbCircle(value: boolean) {\r\n        if (this._isThumbCircle === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbCircle = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Slider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Slider\";\r\n    }\r\n\r\n    protected _getBackgroundColor(context: ICanvasRenderingContext) {\r\n        return this._backgroundGradient ? this._backgroundGradient.getCanvasGradient(context) : this._background;\r\n    }\r\n\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        this._prepareRenderingData(this.isThumbCircle ? \"circle\" : \"rectangle\");\r\n        let left = this._renderLeft;\r\n        let top = this._renderTop;\r\n        const width = this._renderWidth;\r\n        const height = this._renderHeight;\r\n\r\n        let radius = 0;\r\n\r\n        if (this.isThumbClamped && this.isThumbCircle) {\r\n            if (this.isVertical) {\r\n                top += this._effectiveThumbThickness / 2;\r\n            } else {\r\n                left += this._effectiveThumbThickness / 2;\r\n            }\r\n\r\n            radius = this._backgroundBoxThickness / 2;\r\n        } else {\r\n            radius = (this._effectiveThumbThickness - this._effectiveBarOffset) / 2;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        const thumbPosition = this._getThumbPosition();\r\n        context.fillStyle = this._getBackgroundColor(context);\r\n\r\n        if (this.isVertical) {\r\n            if (this.isThumbClamped) {\r\n                if (this.isThumbCircle) {\r\n                    context.beginPath();\r\n                    context.arc(left + this._backgroundBoxThickness / 2, top, radius, Math.PI, 2 * Math.PI);\r\n                    context.fill();\r\n                    context.fillRect(left, top, width, height);\r\n                } else {\r\n                    context.fillRect(left, top, width, height + this._effectiveThumbThickness);\r\n                }\r\n            } else {\r\n                context.fillRect(left, top, width, height);\r\n            }\r\n        } else {\r\n            if (this.isThumbClamped) {\r\n                if (this.isThumbCircle) {\r\n                    context.beginPath();\r\n                    context.arc(left + this._backgroundBoxLength, top + this._backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);\r\n                    context.fill();\r\n                    context.fillRect(left, top, width, height);\r\n                } else {\r\n                    context.fillRect(left, top, width + this._effectiveThumbThickness, height);\r\n                }\r\n            } else {\r\n                context.fillRect(left, top, width, height);\r\n            }\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        // Value bar\r\n        context.fillStyle = this._getColor(context);\r\n        if (this._displayValueBar) {\r\n            if (this.isVertical) {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + this._backgroundBoxThickness / 2, top + this._backgroundBoxLength, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                    } else {\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);\r\n                    }\r\n                } else {\r\n                    context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                }\r\n            } else {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left, top + this._backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    } else {\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                } else {\r\n                    context.fillRect(left, top, thumbPosition, height);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Thumb\r\n        context.fillStyle = this._thumbColor || this._getColor(context);\r\n        if (this.displayThumb) {\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n            if (this._isThumbCircle) {\r\n                context.beginPath();\r\n                if (this.isVertical) {\r\n                    context.arc(left + this._backgroundBoxThickness / 2, top + thumbPosition, radius, 0, 2 * Math.PI);\r\n                } else {\r\n                    context.arc(left + thumbPosition, top + this._backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);\r\n                }\r\n                context.fill();\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                context.stroke();\r\n            } else {\r\n                if (this.isVertical) {\r\n                    context.fillRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n                } else {\r\n                    context.fillRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                if (this.isVertical) {\r\n                    context.strokeRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n                } else {\r\n                    context.strokeRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    public serialize(serializationObject: any) {\r\n        super.serialize(serializationObject);\r\n\r\n        if (this.backgroundGradient) {\r\n            serializationObject.backgroundGradient = {};\r\n            this.backgroundGradient.serialize(serializationObject.backgroundGradient);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _parseFromContent(serializedObject: any, host: AdvancedDynamicTexture) {\r\n        super._parseFromContent(serializedObject, host);\r\n\r\n        if (serializedObject.backgroundGradient) {\r\n            const className = Tools.Instantiate(\"BABYLON.GUI.\" + serializedObject.backgroundGradient.className);\r\n            this.backgroundGradient = new className();\r\n            this.backgroundGradient!.parse(serializedObject.backgroundGradient);\r\n        }\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Slider\", Slider);\r\n","import { Rectangle } from \"./rectangle\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Checkbox } from \"./checkbox\";\r\nimport { RadioButton } from \"./radioButton\";\r\nimport { Slider } from \"./sliders/slider\";\r\nimport { Container } from \"./container\";\r\n\r\n/** Class used to create a RadioGroup\r\n * which contains groups of radio buttons\r\n */\r\nexport class SelectorGroup {\r\n    private _groupPanel = new StackPanel();\r\n    private _selectors: StackPanel[] = new Array();\r\n    private _groupHeader: TextBlock;\r\n\r\n    /**\r\n     * Creates a new SelectorGroup\r\n     * @param name of group, used as a group heading\r\n     */\r\n    constructor(\r\n        /** name of SelectorGroup */\r\n        public name: string\r\n    ) {\r\n        this._groupPanel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._groupPanel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._groupHeader = this._addGroupHeader(name);\r\n    }\r\n\r\n    /** Gets the groupPanel of the SelectorGroup  */\r\n    public get groupPanel(): StackPanel {\r\n        return this._groupPanel;\r\n    }\r\n\r\n    /** Gets the selectors array */\r\n    public get selectors(): StackPanel[] {\r\n        return this._selectors;\r\n    }\r\n\r\n    /** Gets and sets the group header */\r\n    public get header() {\r\n        return this._groupHeader.text;\r\n    }\r\n\r\n    public set header(label: string) {\r\n        if (this._groupHeader.text === \"label\") {\r\n            return;\r\n        }\r\n\r\n        this._groupHeader.text = label;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _addGroupHeader(text: string): TextBlock {\r\n        const groupHeading = new TextBlock(\"groupHead\", text);\r\n        groupHeading.width = 0.9;\r\n        groupHeading.height = \"30px\";\r\n        groupHeading.textWrapping = true;\r\n        groupHeading.color = \"black\";\r\n        groupHeading.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.left = \"2px\";\r\n        this._groupPanel.addControl(groupHeading);\r\n        return groupHeading;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _getSelector(selectorNb: number) {\r\n        if (selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        return this._selectors[selectorNb];\r\n    }\r\n\r\n    /** Removes the selector at the given position\r\n     * @param selectorNb the position of the selector within the group\r\n     */\r\n    public removeSelector(selectorNb: number) {\r\n        if (selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        this._groupPanel.removeControl(this._selectors[selectorNb]);\r\n        this._selectors.splice(selectorNb, 1);\r\n    }\r\n}\r\n\r\n/** Class used to create a CheckboxGroup\r\n * which contains groups of checkbox buttons\r\n */\r\nexport class CheckboxGroup extends SelectorGroup {\r\n    /** Adds a checkbox as a control\r\n     * @param text is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public addCheckbox(text: string, func = (s: boolean) => {}, checked: boolean = false): void {\r\n        checked = checked || false;\r\n        const button = new Checkbox();\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function (state) {\r\n            func(state);\r\n        });\r\n\r\n        const _selector = Control.AddHeader(button, text, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Checkbox>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a RadioGroup\r\n * which contains groups of radio buttons\r\n */\r\nexport class RadioGroup extends SelectorGroup {\r\n    private _selectNb = 0;\r\n\r\n    /** Adds a radio button as a control\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public addRadio(label: string, func = (n: number) => {}, checked = false): void {\r\n        const nb = this._selectNb++;\r\n        const button = new RadioButton();\r\n        button.name = label;\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.group = this.name;\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function (state) {\r\n            if (state) {\r\n                func(nb);\r\n            }\r\n        });\r\n\r\n        const _selector = Control.AddHeader(button, label, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<RadioButton>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a SliderGroup\r\n * which contains groups of slider buttons\r\n */\r\nexport class SliderGroup extends SelectorGroup {\r\n    /**\r\n     * Adds a slider to the SelectorGroup\r\n     * @param label is the label for the SliderBar\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onValueChange is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addSlider(\r\n        label: string,\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        func = (v: number) => {},\r\n        unit: string = \"Units\",\r\n        min: number = 0,\r\n        max: number = 0,\r\n        value: number = 0,\r\n        onValueChange = (v: number) => {\r\n            return v | 0;\r\n        }\r\n    ): void {\r\n        const button = new Slider();\r\n        button.name = unit;\r\n        button.value = value;\r\n        button.minimum = min;\r\n        button.maximum = max;\r\n        button.width = 0.9;\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.borderColor = \"black\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        button.left = \"4px\";\r\n        button.paddingBottom = \"4px\";\r\n\r\n        button.onValueChangedObservable.add(function (value) {\r\n            (<TextBlock>button.parent!.children[0]).text = button.parent!.children[0].name + \": \" + onValueChange(value) + \" \" + button.name;\r\n            func(value);\r\n        });\r\n\r\n        const _selector = Control.AddHeader(button, label + \": \" + onValueChange(value) + \" \" + unit, \"30px\", { isHorizontal: false, controlFirst: false });\r\n        _selector.height = \"60px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        _selector.children[0].name = label;\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        this.selectors[selectorNb].children[0].name = label;\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).text =\r\n            label + \": \" + (<Slider>this.selectors[selectorNb].children[1]).value + \" \" + this.selectors[selectorNb].children[1].name;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).color = color;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[1].color = color;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Slider>this.selectors[selectorNb].children[1]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to hold the controls for the checkboxes, radio buttons and sliders\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/selector\r\n */\r\nexport class SelectionPanel extends Rectangle {\r\n    private _panel: StackPanel;\r\n    private _buttonColor: string = \"#364249\";\r\n    private _buttonBackground: string = \"#CCCCCC\";\r\n    private _headerColor: string = \"black\";\r\n    private _barColor: string = \"white\";\r\n    private _barHeight: string = \"2px\";\r\n    private _spacerHeight: string = \"20px\";\r\n    private _labelColor: string;\r\n    private _groups: SelectorGroup[];\r\n    private _bars: any[] = new Array();\r\n\r\n    /**\r\n     * Creates a new SelectionPanel\r\n     * @param name of SelectionPanel\r\n     * @param groups is an array of SelectionGroups\r\n     */\r\n    constructor(\r\n        /** name of SelectionPanel */\r\n        public name: string,\r\n        /** an array of SelectionGroups */\r\n        public groups: SelectorGroup[] = []\r\n    ) {\r\n        super(name);\r\n        this._groups = groups;\r\n        this.thickness = 2;\r\n        this._panel = new StackPanel();\r\n        this._panel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._panel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._panel.top = 5;\r\n        this._panel.left = 5;\r\n        this._panel.width = 0.95;\r\n        if (groups.length > 0) {\r\n            for (let i = 0; i < groups.length - 1; i++) {\r\n                this._panel.addControl(groups[i].groupPanel);\r\n                this._addSpacer();\r\n            }\r\n            this._panel.addControl(groups[groups.length - 1].groupPanel);\r\n        }\r\n        this.addControl(this._panel);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"SelectionPanel\";\r\n    }\r\n\r\n    /** Gets the (stack) panel of the SelectionPanel  */\r\n    public get panel(): StackPanel {\r\n        return this._panel;\r\n    }\r\n\r\n    /** Gets or sets the headerColor */\r\n    public get headerColor(): string {\r\n        return this._headerColor;\r\n    }\r\n\r\n    public set headerColor(color: string) {\r\n        if (this._headerColor === color) {\r\n            return;\r\n        }\r\n        this._headerColor = color;\r\n        this._setHeaderColor();\r\n    }\r\n\r\n    private _setHeaderColor() {\r\n        for (let i = 0; i < this._groups.length; i++) {\r\n            this._groups[i].groupPanel.children[0].color = this._headerColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button color */\r\n    public get buttonColor(): string {\r\n        return this._buttonColor;\r\n    }\r\n\r\n    public set buttonColor(color: string) {\r\n        if (this._buttonColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonColor = color;\r\n        this._setbuttonColor();\r\n    }\r\n\r\n    private _setbuttonColor() {\r\n        for (let i = 0; i < this._groups.length; i++) {\r\n            for (let j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorButtonColor(j, this._buttonColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the label color */\r\n    public get labelColor(): string {\r\n        return this._labelColor;\r\n    }\r\n\r\n    public set labelColor(color: string) {\r\n        if (this._labelColor === color) {\r\n            return;\r\n        }\r\n        this._labelColor = color;\r\n        this._setLabelColor();\r\n    }\r\n\r\n    private _setLabelColor() {\r\n        for (let i = 0; i < this._groups.length; i++) {\r\n            for (let j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorLabelColor(j, this._labelColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button background */\r\n    public get buttonBackground(): string {\r\n        return this._buttonBackground;\r\n    }\r\n\r\n    public set buttonBackground(color: string) {\r\n        if (this._buttonBackground === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonBackground = color;\r\n        this._setButtonBackground();\r\n    }\r\n\r\n    private _setButtonBackground() {\r\n        for (let i = 0; i < this._groups.length; i++) {\r\n            for (let j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorButtonBackground(j, this._buttonBackground);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the color of separator bar */\r\n    public get barColor(): string {\r\n        return this._barColor;\r\n    }\r\n\r\n    public set barColor(color: string) {\r\n        if (this._barColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._barColor = color;\r\n        this._setBarColor();\r\n    }\r\n\r\n    private _setBarColor() {\r\n        for (let i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].background = this._barColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of separator bar */\r\n    public get barHeight(): string {\r\n        return this._barHeight;\r\n    }\r\n\r\n    public set barHeight(value: string) {\r\n        if (this._barHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._barHeight = value;\r\n        this._setBarHeight();\r\n    }\r\n\r\n    private _setBarHeight() {\r\n        for (let i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].height = this._barHeight;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of spacers*/\r\n    public get spacerHeight(): string {\r\n        return this._spacerHeight;\r\n    }\r\n\r\n    public set spacerHeight(value: string) {\r\n        if (this._spacerHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._spacerHeight = value;\r\n        this._setSpacerHeight();\r\n    }\r\n\r\n    private _setSpacerHeight() {\r\n        for (let i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].height = this._spacerHeight;\r\n        }\r\n    }\r\n\r\n    /** Adds a bar between groups */\r\n    private _addSpacer(): void {\r\n        const separator = new Container();\r\n        separator.width = 1;\r\n        separator.height = this._spacerHeight;\r\n        separator.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        const bar = new Rectangle();\r\n        bar.width = 1;\r\n        bar.height = this._barHeight;\r\n        bar.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        bar.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n        bar.background = this._barColor;\r\n        bar.color = \"transparent\";\r\n        separator.addControl(bar);\r\n\r\n        this._panel.addControl(separator);\r\n        this._bars.push(separator);\r\n    }\r\n\r\n    /** Add a group to the selection panel\r\n     * @param group is the selector group to add\r\n     */\r\n    public addGroup(group: SelectorGroup): void {\r\n        if (this._groups.length > 0) {\r\n            this._addSpacer();\r\n        }\r\n        this._panel.addControl(group.groupPanel);\r\n        this._groups.push(group);\r\n        group.groupPanel.children[0].color = this._headerColor;\r\n        for (let j = 0; j < group.selectors.length; j++) {\r\n            (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorButtonColor(j, this._buttonColor);\r\n            (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorButtonBackground(j, this._buttonBackground);\r\n        }\r\n    }\r\n\r\n    /** Remove the group from the given position\r\n     * @param groupNb is the position of the group in the list\r\n     */\r\n    public removeGroup(groupNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        const group = this._groups[groupNb];\r\n        this._panel.removeControl(group.groupPanel);\r\n        this._groups.splice(groupNb, 1);\r\n        if (groupNb < this._bars.length) {\r\n            this._panel.removeControl(this._bars[groupNb]);\r\n            this._bars.splice(groupNb, 1);\r\n        }\r\n    }\r\n\r\n    /** Change a group header label\r\n     * @param label is the new group header label\r\n     * @param groupNb is the number of the group to relabel\r\n     * */\r\n    public setHeaderName(label: string, groupNb: number) {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        const group = this._groups[groupNb];\r\n        (<TextBlock>group.groupPanel.children[0]).text = label;\r\n    }\r\n\r\n    /** Change selector label to the one given\r\n     * @param label is the new selector label\r\n     * @param groupNb is the number of the groupcontaining the selector\r\n     * @param selectorNb is the number of the selector within a group to relabel\r\n     * */\r\n    public relabel(label: string, groupNb: number, selectorNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        const group = this._groups[groupNb];\r\n        if (selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorLabel(selectorNb, label);\r\n    }\r\n\r\n    /** For a given group position remove the selector at the given position\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param selectorNb is the number of the selector within the group\r\n     */\r\n    public removeFromGroupSelector(groupNb: number, selectorNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        const group = this._groups[groupNb];\r\n        if (selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        group.removeSelector(selectorNb);\r\n    }\r\n\r\n    /** For a given group position of correct type add a checkbox button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupCheckbox(groupNb: number, label: string, func = () => {}, checked: boolean = false): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        const group = this._groups[groupNb];\r\n        (<CheckboxGroup>group).addCheckbox(label, func, checked);\r\n    }\r\n\r\n    /** For a given group position of correct type add a radio button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupRadio(groupNb: number, label: string, func = () => {}, checked: boolean = false): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        const group = this._groups[groupNb];\r\n        (<RadioGroup>group).addRadio(label, func, checked);\r\n    }\r\n\r\n    /**\r\n     * For a given slider group add a slider\r\n     * @param groupNb is the number of the group to add the slider to\r\n     * @param label is the label for the Slider\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onVal is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addToGroupSlider(\r\n        groupNb: number,\r\n        label: string,\r\n        func = () => {},\r\n        unit: string = \"Units\",\r\n        min: number = 0,\r\n        max: number = 0,\r\n        value: number = 0,\r\n        onVal = (v: number) => {\r\n            return v | 0;\r\n        }\r\n    ): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        const group = this._groups[groupNb];\r\n        (<SliderGroup>group).addSlider(label, func, unit, min, max, value, onVal);\r\n    }\r\n}\r\n","import { Measure } from \"../../measure\";\r\nimport { Container } from \"../container\";\r\nimport { ValueAndUnit } from \"../../valueAndUnit\";\r\nimport { Control } from \"../control\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/**\r\n * Class used to hold a the container for ScrollViewer\r\n * @internal\r\n */\r\nexport class _ScrollViewerWindow extends Container {\r\n    public parentClientWidth: number;\r\n    public parentClientHeight: number;\r\n\r\n    private _freezeControls = false;\r\n    private _parentMeasure: Measure;\r\n    private _oldLeft: number | null;\r\n    private _oldTop: number | null;\r\n\r\n    public get freezeControls(): boolean {\r\n        return this._freezeControls;\r\n    }\r\n\r\n    public set freezeControls(value: boolean) {\r\n        if (this._freezeControls === value) {\r\n            return;\r\n        }\r\n\r\n        if (!value) {\r\n            this._restoreMeasures();\r\n        }\r\n\r\n        // trigger a full normal layout calculation to be sure all children have their measures up to date\r\n        this._freezeControls = false;\r\n\r\n        const textureSize = this.host.getSize();\r\n        const renderWidth = textureSize.width;\r\n        const renderHeight = textureSize.height;\r\n\r\n        const context = this.host.getContext();\r\n\r\n        const measure = new Measure(0, 0, renderWidth, renderHeight);\r\n\r\n        this.host._numLayoutCalls = 0;\r\n\r\n        this.host._rootContainer._layout(measure, context);\r\n\r\n        // in freeze mode, prepare children measures accordingly\r\n        if (value) {\r\n            this._updateMeasures();\r\n            if (this._useBuckets()) {\r\n                this._makeBuckets();\r\n            }\r\n        }\r\n\r\n        this._freezeControls = value;\r\n\r\n        this.host.markAsDirty(); // redraw with the (new) current settings\r\n    }\r\n\r\n    private _bucketWidth: number = 0;\r\n    private _bucketHeight: number = 0;\r\n    private _buckets: { [key: number]: Array<Control> } = {};\r\n    private _bucketLen: number;\r\n\r\n    public get bucketWidth(): number {\r\n        return this._bucketWidth;\r\n    }\r\n\r\n    public get bucketHeight(): number {\r\n        return this._bucketHeight;\r\n    }\r\n\r\n    public setBucketSizes(width: number, height: number): void {\r\n        this._bucketWidth = width;\r\n        this._bucketHeight = height;\r\n\r\n        if (this._useBuckets()) {\r\n            if (this._freezeControls) {\r\n                this._makeBuckets();\r\n            }\r\n        } else {\r\n            this._buckets = {};\r\n        }\r\n    }\r\n\r\n    private _useBuckets(): boolean {\r\n        return this._bucketWidth > 0 && this._bucketHeight > 0;\r\n    }\r\n\r\n    private _makeBuckets(): void {\r\n        this._buckets = {};\r\n        this._bucketLen = Math.ceil(this.widthInPixels / this._bucketWidth);\r\n        this._dispatchInBuckets(this._children);\r\n        this._oldLeft = null;\r\n        this._oldTop = null;\r\n    }\r\n\r\n    private _dispatchInBuckets(children: Control[]): void {\r\n        for (let i = 0; i < children.length; ++i) {\r\n            const child = children[i];\r\n\r\n            const bStartX = Math.max(0, Math.floor((child._customData._origLeft - this._customData.origLeft) / this._bucketWidth)),\r\n                bEndX = Math.floor((child._customData._origLeft - this._customData.origLeft + child._currentMeasure.width - 1) / this._bucketWidth),\r\n                bEndY = Math.floor((child._customData._origTop - this._customData.origTop + child._currentMeasure.height - 1) / this._bucketHeight);\r\n            let bStartY = Math.max(0, Math.floor((child._customData._origTop - this._customData.origTop) / this._bucketHeight));\r\n\r\n            while (bStartY <= bEndY) {\r\n                for (let x = bStartX; x <= bEndX; ++x) {\r\n                    const bucket = bStartY * this._bucketLen + x;\r\n                    let lstc = this._buckets[bucket];\r\n\r\n                    if (!lstc) {\r\n                        lstc = [];\r\n                        this._buckets[bucket] = lstc;\r\n                    }\r\n\r\n                    lstc.push(child);\r\n                }\r\n                bStartY++;\r\n            }\r\n\r\n            if (child instanceof Container && child._children.length > 0) {\r\n                this._dispatchInBuckets(child._children);\r\n            }\r\n        }\r\n    }\r\n\r\n    // reset left and top measures for the window and all its children\r\n    private _updateMeasures(): void {\r\n        const left = this.leftInPixels | 0,\r\n            top = this.topInPixels | 0;\r\n\r\n        this._measureForChildren.left -= left;\r\n        this._measureForChildren.top -= top;\r\n        this._currentMeasure.left -= left;\r\n        this._currentMeasure.top -= top;\r\n\r\n        this._customData.origLeftForChildren = this._measureForChildren.left;\r\n        this._customData.origTopForChildren = this._measureForChildren.top;\r\n        this._customData.origLeft = this._currentMeasure.left;\r\n        this._customData.origTop = this._currentMeasure.top;\r\n\r\n        this._updateChildrenMeasures(this._children, left, top);\r\n    }\r\n\r\n    private _updateChildrenMeasures(children: Control[], left: number, top: number): void {\r\n        for (let i = 0; i < children.length; ++i) {\r\n            const child = children[i];\r\n\r\n            child._currentMeasure.left -= left;\r\n            child._currentMeasure.top -= top;\r\n\r\n            child._customData._origLeft = child._currentMeasure.left; // save the original left and top values for each child\r\n            child._customData._origTop = child._currentMeasure.top;\r\n\r\n            if (child instanceof Container && child._children.length > 0) {\r\n                this._updateChildrenMeasures(child._children, left, top);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _restoreMeasures(): void {\r\n        const left = this.leftInPixels | 0,\r\n            top = this.topInPixels | 0;\r\n\r\n        this._measureForChildren.left = this._customData.origLeftForChildren + left;\r\n        this._measureForChildren.top = this._customData.origTopForChildren + top;\r\n        this._currentMeasure.left = this._customData.origLeft + left;\r\n        this._currentMeasure.top = this._customData.origTop + top;\r\n    }\r\n\r\n    /**\r\n     * Creates a new ScrollViewerWindow\r\n     * @param name of ScrollViewerWindow\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ScrollViewerWindow\";\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._parentMeasure = parentMeasure;\r\n\r\n        this._measureForChildren.left = this._currentMeasure.left;\r\n        this._measureForChildren.top = this._currentMeasure.top;\r\n\r\n        this._measureForChildren.width = parentMeasure.width;\r\n        this._measureForChildren.height = parentMeasure.height;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _layout(parentMeasure: Measure, context: ICanvasRenderingContext): boolean {\r\n        if (this._freezeControls) {\r\n            this.invalidateRect(); // will trigger a redraw of the window\r\n            return false;\r\n        }\r\n\r\n        return super._layout(parentMeasure, context);\r\n    }\r\n\r\n    private _scrollChildren(children: Control[], left: number, top: number): void {\r\n        for (let i = 0; i < children.length; ++i) {\r\n            const child = children[i];\r\n\r\n            child._currentMeasure.left = child._customData._origLeft + left;\r\n            child._currentMeasure.top = child._customData._origTop + top;\r\n            child._isClipped = false; // clipping will be handled by _draw and the call to _intersectsRect()\r\n\r\n            if (child instanceof Container && child._children.length > 0) {\r\n                this._scrollChildren(child._children, left, top);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _scrollChildrenWithBuckets(left: number, top: number, scrollLeft: number, scrollTop: number): void {\r\n        const bStartX = Math.max(0, Math.floor(-left / this._bucketWidth)),\r\n            bEndX = Math.floor((-left + this._parentMeasure.width - 1) / this._bucketWidth),\r\n            bEndY = Math.floor((-top + this._parentMeasure.height - 1) / this._bucketHeight);\r\n        let bStartY = Math.max(0, Math.floor(-top / this._bucketHeight));\r\n\r\n        while (bStartY <= bEndY) {\r\n            for (let x = bStartX; x <= bEndX; ++x) {\r\n                const bucket = bStartY * this._bucketLen + x,\r\n                    lstc = this._buckets[bucket];\r\n\r\n                if (lstc) {\r\n                    for (let i = 0; i < lstc.length; ++i) {\r\n                        const child = lstc[i];\r\n                        child._currentMeasure.left = child._customData._origLeft + scrollLeft;\r\n                        child._currentMeasure.top = child._customData._origTop + scrollTop;\r\n                        child._isClipped = false; // clipping will be handled by _draw and the call to _intersectsRect()\r\n                    }\r\n                }\r\n            }\r\n            bStartY++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _draw(context: ICanvasRenderingContext, invalidatedRectangle?: Measure): void {\r\n        if (!this._freezeControls) {\r\n            super._draw(context, invalidatedRectangle);\r\n            return;\r\n        }\r\n\r\n        this._localDraw(context);\r\n\r\n        if (this.clipChildren) {\r\n            this._clipForChildren(context);\r\n        }\r\n\r\n        const left = this.leftInPixels | 0,\r\n            top = this.topInPixels | 0;\r\n\r\n        if (this._useBuckets()) {\r\n            if (this._oldLeft !== null && this._oldTop !== null) {\r\n                this._scrollChildrenWithBuckets(this._oldLeft, this._oldTop, left, top);\r\n                this._scrollChildrenWithBuckets(left, top, left, top);\r\n            } else {\r\n                this._scrollChildren(this._children, left, top);\r\n            }\r\n        } else {\r\n            this._scrollChildren(this._children, left, top);\r\n        }\r\n\r\n        this._oldLeft = left;\r\n        this._oldTop = top;\r\n\r\n        for (const child of this._children) {\r\n            if (!child._intersectsRect(this._parentMeasure)) {\r\n                continue;\r\n            }\r\n            child._render(context, this._parentMeasure);\r\n        }\r\n    }\r\n\r\n    protected _postMeasure(): void {\r\n        if (this._freezeControls) {\r\n            super._postMeasure();\r\n            return;\r\n        }\r\n\r\n        let maxWidth = this.parentClientWidth;\r\n        let maxHeight = this.parentClientHeight;\r\n        for (const child of this.children) {\r\n            if (!child.isVisible || child.notRenderable) {\r\n                continue;\r\n            }\r\n\r\n            if (child.horizontalAlignment === Control.HORIZONTAL_ALIGNMENT_CENTER) {\r\n                child._offsetLeft(this._currentMeasure.left - child._currentMeasure.left);\r\n            }\r\n\r\n            if (child.verticalAlignment === Control.VERTICAL_ALIGNMENT_CENTER) {\r\n                child._offsetTop(this._currentMeasure.top - child._currentMeasure.top);\r\n            }\r\n\r\n            maxWidth = Math.max(maxWidth, child._currentMeasure.left - this._currentMeasure.left + child._currentMeasure.width + child.paddingRightInPixels);\r\n            maxHeight = Math.max(maxHeight, child._currentMeasure.top - this._currentMeasure.top + child._currentMeasure.height + child.paddingBottomInPixels);\r\n        }\r\n\r\n        if (this._currentMeasure.width !== maxWidth) {\r\n            this._width.updateInPlace(maxWidth, ValueAndUnit.UNITMODE_PIXEL);\r\n            this._currentMeasure.width = maxWidth;\r\n            this._rebuildLayout = true;\r\n            this._isDirty = true;\r\n        }\r\n\r\n        if (this._currentMeasure.height !== maxHeight) {\r\n            this._height.updateInPlace(maxHeight, ValueAndUnit.UNITMODE_PIXEL);\r\n            this._currentMeasure.height = maxHeight;\r\n            this._rebuildLayout = true;\r\n            this._isDirty = true;\r\n        }\r\n\r\n        super._postMeasure();\r\n    }\r\n}\r\n","import type { Vector2 } from \"core/Maths/math.vector\";\r\nimport { BaseSlider } from \"./baseSlider\";\r\nimport type { Control } from \"../control\";\r\nimport { Measure } from \"../../measure\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { BaseGradient } from \"../gradient/BaseGradient\";\r\nimport type { AdvancedDynamicTexture } from \"gui/2D/advancedDynamicTexture\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class ScrollBar extends BaseSlider {\r\n    private _background = \"black\";\r\n    private _borderColor = \"white\";\r\n    private _tempMeasure = new Measure(0, 0, 0, 0);\r\n    private _invertScrollDirection = false;\r\n    private _backgroundGradient: Nullable<BaseGradient> = null;\r\n\r\n    /** Gets or sets border color */\r\n    @serialize()\r\n    public get borderColor(): string {\r\n        return this._borderColor;\r\n    }\r\n\r\n    public set borderColor(value: string) {\r\n        if (this._borderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._borderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    @serialize()\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background gradient. Takes precedence over gradient. */\r\n    public get backgroundGradient(): Nullable<BaseGradient> {\r\n        return this._backgroundGradient;\r\n    }\r\n\r\n    public set backgroundGradient(value: Nullable<BaseGradient>) {\r\n        if (this._backgroundGradient === value) {\r\n            return;\r\n        }\r\n\r\n        this._backgroundGradient = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Inverts the scrolling direction (default: false) */\r\n    @serialize()\r\n    public get invertScrollDirection() {\r\n        return this._invertScrollDirection;\r\n    }\r\n\r\n    public set invertScrollDirection(invert: boolean) {\r\n        this._invertScrollDirection = invert;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Slider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Scrollbar\";\r\n    }\r\n\r\n    protected _getThumbThickness(): number {\r\n        let thumbThickness = 0;\r\n        if (this._thumbWidth.isPixel) {\r\n            thumbThickness = this._thumbWidth.getValue(this._host);\r\n        } else {\r\n            thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n    private _getBackgroundColor(context: ICanvasRenderingContext) {\r\n        return this._backgroundGradient ? this._backgroundGradient.getCanvasGradient(context) : this._background;\r\n    }\r\n\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        this._prepareRenderingData(\"rectangle\");\r\n        const left = this._renderLeft;\r\n\r\n        const thumbPosition = this._getThumbPosition();\r\n        context.fillStyle = this._getBackgroundColor(context);\r\n\r\n        context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n\r\n        // Value bar\r\n        context.fillStyle = this._getColor(context);\r\n\r\n        // Thumb\r\n        if (this.isVertical) {\r\n            this._tempMeasure.left = left - this._effectiveBarOffset;\r\n            this._tempMeasure.top = this._currentMeasure.top + thumbPosition;\r\n            this._tempMeasure.width = this._currentMeasure.width;\r\n            this._tempMeasure.height = this._effectiveThumbThickness;\r\n        } else {\r\n            this._tempMeasure.left = this._currentMeasure.left + thumbPosition;\r\n            this._tempMeasure.top = this._currentMeasure.top;\r\n            this._tempMeasure.width = this._effectiveThumbThickness;\r\n            this._tempMeasure.height = this._currentMeasure.height;\r\n        }\r\n\r\n        context.fillRect(this._tempMeasure.left, this._tempMeasure.top, this._tempMeasure.width, this._tempMeasure.height);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    private _first: boolean;\r\n    private _originX: number;\r\n    private _originY: number;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        const sign = this._invertScrollDirection ? -1 : 1;\r\n\r\n        if (this._first) {\r\n            this._first = false;\r\n            this._originX = x;\r\n            this._originY = y;\r\n\r\n            // Check if move is required\r\n            if (\r\n                x < this._tempMeasure.left ||\r\n                x > this._tempMeasure.left + this._tempMeasure.width ||\r\n                y < this._tempMeasure.top ||\r\n                y > this._tempMeasure.top + this._tempMeasure.height\r\n            ) {\r\n                if (this.isVertical) {\r\n                    this.value = this.minimum + (1 - (y - this._currentMeasure.top) / this._currentMeasure.height) * (this.maximum - this.minimum);\r\n                } else {\r\n                    this.value = this.minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this.maximum - this.minimum);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Delta mode\r\n        let delta = 0;\r\n        if (this.isVertical) {\r\n            delta = -((y - this._originY) / (this._currentMeasure.height - this._effectiveThumbThickness));\r\n        } else {\r\n            delta = (x - this._originX) / (this._currentMeasure.width - this._effectiveThumbThickness);\r\n        }\r\n\r\n        this.value += sign * delta * (this.maximum - this.minimum);\r\n\r\n        this._originX = x;\r\n        this._originY = y;\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        this._first = true;\r\n\r\n        return super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi);\r\n    }\r\n\r\n    public serialize(serializationObject: any) {\r\n        super.serialize(serializationObject);\r\n\r\n        if (this.backgroundGradient) {\r\n            serializationObject.backgroundGradient = {};\r\n            this.backgroundGradient.serialize(serializationObject.backgroundGradient);\r\n        }\r\n    }\r\n\r\n    public _parseFromContent(serializationObject: any, host: AdvancedDynamicTexture) {\r\n        super._parseFromContent(serializationObject, host);\r\n\r\n        if (serializationObject.backgroundGradient) {\r\n            const className = Tools.Instantiate(\"BABYLON.GUI.\" + serializationObject.backgroundGradient.className);\r\n            this.backgroundGradient = new className();\r\n            this.backgroundGradient!.parse(serializationObject.backgroundGradient);\r\n        }\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Scrollbar\", ScrollBar);\r\n","import type { Vector2 } from \"core/Maths/math.vector\";\r\nimport { BaseSlider } from \"./baseSlider\";\r\nimport type { Control } from \"../control\";\r\nimport type { Image } from \"../image\";\r\nimport { Measure } from \"../../measure\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class ImageScrollBar extends BaseSlider {\r\n    private _backgroundBaseImage: Image;\r\n    private _backgroundImage: Image;\r\n    private _thumbImage: Image;\r\n    private _thumbBaseImage: Image;\r\n    private _thumbLength: number = 0.5;\r\n    private _thumbHeight: number = 1;\r\n    private _barImageHeight: number = 1;\r\n    private _tempMeasure = new Measure(0, 0, 0, 0);\r\n    private _invertScrollDirection = false;\r\n\r\n    /** Number of 90° rotation to apply on the images when in vertical mode */\r\n    @serialize()\r\n    public num90RotationInVerticalMode = 1;\r\n\r\n    /** Inverts the scrolling direction (default: false) */\r\n    @serialize()\r\n    public get invertScrollDirection() {\r\n        return this._invertScrollDirection;\r\n    }\r\n\r\n    public set invertScrollDirection(invert: boolean) {\r\n        this._invertScrollDirection = invert;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the background for horizontal bar\r\n     */\r\n    public get backgroundImage(): Image {\r\n        return this._backgroundBaseImage;\r\n    }\r\n\r\n    public set backgroundImage(value: Image) {\r\n        if (this._backgroundBaseImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._backgroundBaseImage = value;\r\n\r\n        if (this.isVertical && this.num90RotationInVerticalMode !== 0) {\r\n            if (!value.isLoaded) {\r\n                value.onImageLoadedObservable.addOnce(() => {\r\n                    const rotatedValue = value._rotate90(this.num90RotationInVerticalMode, true);\r\n                    this._backgroundImage = rotatedValue;\r\n                    if (!rotatedValue.isLoaded) {\r\n                        rotatedValue.onImageLoadedObservable.addOnce(() => {\r\n                            this._markAsDirty();\r\n                        });\r\n                    }\r\n                    this._markAsDirty();\r\n                });\r\n            } else {\r\n                this._backgroundImage = value._rotate90(this.num90RotationInVerticalMode, true);\r\n                this._markAsDirty();\r\n            }\r\n        } else {\r\n            this._backgroundImage = value;\r\n            if (value && !value.isLoaded) {\r\n                value.onImageLoadedObservable.addOnce(() => {\r\n                    this._markAsDirty();\r\n                });\r\n            }\r\n\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the thumb\r\n     */\r\n    public get thumbImage(): Image {\r\n        return this._thumbBaseImage;\r\n    }\r\n\r\n    public set thumbImage(value: Image) {\r\n        if (this._thumbBaseImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbBaseImage = value;\r\n\r\n        if (this.isVertical && this.num90RotationInVerticalMode !== 0) {\r\n            if (!value.isLoaded) {\r\n                value.onImageLoadedObservable.addOnce(() => {\r\n                    const rotatedValue = value._rotate90(-this.num90RotationInVerticalMode, true);\r\n                    this._thumbImage = rotatedValue;\r\n                    if (!rotatedValue.isLoaded) {\r\n                        rotatedValue.onImageLoadedObservable.addOnce(() => {\r\n                            this._markAsDirty();\r\n                        });\r\n                    }\r\n                    this._markAsDirty();\r\n                });\r\n            } else {\r\n                this._thumbImage = value._rotate90(-this.num90RotationInVerticalMode, true);\r\n                this._markAsDirty();\r\n            }\r\n        } else {\r\n            this._thumbImage = value;\r\n            if (value && !value.isLoaded) {\r\n                value.onImageLoadedObservable.addOnce(() => {\r\n                    this._markAsDirty();\r\n                });\r\n            }\r\n\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the length of the thumb\r\n     */\r\n    public get thumbLength(): number {\r\n        return this._thumbLength;\r\n    }\r\n\r\n    public set thumbLength(value: number) {\r\n        if (this._thumbLength === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbLength = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the height of the thumb\r\n     */\r\n    public get thumbHeight(): number {\r\n        return this._thumbHeight;\r\n    }\r\n\r\n    public set thumbHeight(value: number) {\r\n        if (this._thumbLength === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the height of the bar image\r\n     */\r\n    public get barImageHeight(): number {\r\n        return this._barImageHeight;\r\n    }\r\n\r\n    public set barImageHeight(value: number) {\r\n        if (this._barImageHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._barImageHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new ImageScrollBar\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ImageScrollBar\";\r\n    }\r\n\r\n    protected _getThumbThickness(): number {\r\n        let thumbThickness = 0;\r\n        if (this._thumbWidth.isPixel) {\r\n            thumbThickness = this._thumbWidth.getValue(this._host);\r\n        } else {\r\n            thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        this._prepareRenderingData(\"rectangle\");\r\n        const thumbPosition = this._getThumbPosition();\r\n        const left = this._renderLeft;\r\n        const top = this._renderTop;\r\n        const width = this._renderWidth;\r\n        const height = this._renderHeight;\r\n\r\n        // Background\r\n        if (this._backgroundImage) {\r\n            this._tempMeasure.copyFromFloats(left, top, width, height);\r\n            if (this.isVertical) {\r\n                this._tempMeasure.copyFromFloats(left + width * (1 - this._barImageHeight) * 0.5, this._currentMeasure.top, width * this._barImageHeight, height);\r\n                this._tempMeasure.height += this._effectiveThumbThickness;\r\n                this._backgroundImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            } else {\r\n                this._tempMeasure.copyFromFloats(this._currentMeasure.left, top + height * (1 - this._barImageHeight) * 0.5, width, height * this._barImageHeight);\r\n                this._tempMeasure.width += this._effectiveThumbThickness;\r\n                this._backgroundImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            }\r\n            this._backgroundImage._draw(context);\r\n        }\r\n\r\n        // Thumb\r\n        if (this.isVertical) {\r\n            this._tempMeasure.copyFromFloats(\r\n                left - this._effectiveBarOffset + this._currentMeasure.width * (1 - this._thumbHeight) * 0.5,\r\n                this._currentMeasure.top + thumbPosition,\r\n                this._currentMeasure.width * this._thumbHeight,\r\n                this._effectiveThumbThickness\r\n            );\r\n        } else {\r\n            this._tempMeasure.copyFromFloats(\r\n                this._currentMeasure.left + thumbPosition,\r\n                this._currentMeasure.top + this._currentMeasure.height * (1 - this._thumbHeight) * 0.5,\r\n                this._effectiveThumbThickness,\r\n                this._currentMeasure.height * this._thumbHeight\r\n            );\r\n        }\r\n\r\n        if (this._thumbImage) {\r\n            this._thumbImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._thumbImage._draw(context);\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    private _first: boolean;\r\n    private _originX: number;\r\n    private _originY: number;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        const sign = this._invertScrollDirection ? -1 : 1;\r\n\r\n        if (this._first) {\r\n            this._first = false;\r\n            this._originX = x;\r\n            this._originY = y;\r\n\r\n            // Check if move is required\r\n            if (\r\n                x < this._tempMeasure.left ||\r\n                x > this._tempMeasure.left + this._tempMeasure.width ||\r\n                y < this._tempMeasure.top ||\r\n                y > this._tempMeasure.top + this._tempMeasure.height\r\n            ) {\r\n                if (this.isVertical) {\r\n                    this.value = this.minimum + (1 - (y - this._currentMeasure.top) / this._currentMeasure.height) * (this.maximum - this.minimum);\r\n                } else {\r\n                    this.value = this.minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this.maximum - this.minimum);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Delta mode\r\n        let delta = 0;\r\n        if (this.isVertical) {\r\n            delta = -((y - this._originY) / (this._currentMeasure.height - this._effectiveThumbThickness));\r\n        } else {\r\n            delta = (x - this._originX) / (this._currentMeasure.width - this._effectiveThumbThickness);\r\n        }\r\n\r\n        this.value += sign * delta * (this.maximum - this.minimum);\r\n\r\n        this._originX = x;\r\n        this._originY = y;\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        this._first = true;\r\n\r\n        return super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi);\r\n    }\r\n}\r\n","import type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport type { Vector2 } from \"core/Maths/math\";\r\nimport { Rectangle } from \"../rectangle\";\r\nimport { Grid } from \"../grid\";\r\nimport type { Image } from \"../image\";\r\nimport { Control } from \"../control\";\r\nimport type { Container } from \"../container\";\r\nimport type { Measure } from \"../../measure\";\r\nimport type { AdvancedDynamicTexture } from \"../../advancedDynamicTexture\";\r\nimport { _ScrollViewerWindow } from \"./scrollViewerWindow\";\r\nimport { ScrollBar } from \"../sliders/scrollBar\";\r\nimport { ImageScrollBar } from \"../sliders/imageScrollBar\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\n\r\n/**\r\n * Class used to hold a viewer window and sliders in a grid\r\n */\r\nexport class ScrollViewer extends Rectangle {\r\n    private _grid: Grid;\r\n    private _horizontalBarSpace: Rectangle;\r\n    private _verticalBarSpace: Rectangle;\r\n    private _dragSpace: Rectangle;\r\n    private _horizontalBar: ScrollBar | ImageScrollBar;\r\n    private _verticalBar: ScrollBar | ImageScrollBar;\r\n    private _barColor: string;\r\n    private _barBackground: string;\r\n    private _barImage: Image;\r\n    private _horizontalBarImage: Image;\r\n    private _verticalBarImage: Image;\r\n    private _barBackgroundImage: Image;\r\n    private _horizontalBarBackgroundImage: Image;\r\n    private _verticalBarBackgroundImage: Image;\r\n    private _barSize: number = 20;\r\n    private _window: _ScrollViewerWindow;\r\n    private _pointerIsOver: Boolean = false;\r\n    private _wheelPrecision: number = 0.05;\r\n    private _onWheelObserver: Nullable<Observer<Vector2>>;\r\n    private _clientWidth: number;\r\n    private _clientHeight: number;\r\n    private _useImageBar: Boolean;\r\n    private _thumbLength: number = 0.5;\r\n    private _thumbHeight: number = 1;\r\n    private _barImageHeight: number = 1;\r\n    private _horizontalBarImageHeight: number = 1;\r\n    private _verticalBarImageHeight: number = 1;\r\n    private _oldWindowContentsWidth: number = 0;\r\n    private _oldWindowContentsHeight: number = 0;\r\n\r\n    /**\r\n     * Gets the horizontal scrollbar\r\n     */\r\n    public get horizontalBar(): ScrollBar | ImageScrollBar {\r\n        return this._horizontalBar;\r\n    }\r\n\r\n    /**\r\n     * Gets the vertical scrollbar\r\n     */\r\n    public get verticalBar(): ScrollBar | ImageScrollBar {\r\n        return this._verticalBar;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current container\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Nullable<Control>): Container {\r\n        if (!control) {\r\n            return this;\r\n        }\r\n\r\n        this._window.addControl(control);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        this._window.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._window.children;\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (const child of this._children) {\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Freezes or unfreezes the controls in the window.\r\n     * When controls are frozen, the scroll viewer can render a lot more quickly but updates to positions/sizes of controls\r\n     * are not taken into account. If you want to change positions/sizes, unfreeze, perform the changes then freeze again\r\n     */\r\n    public get freezeControls(): boolean {\r\n        return this._window.freezeControls;\r\n    }\r\n\r\n    public set freezeControls(value: boolean) {\r\n        this._window.freezeControls = value;\r\n    }\r\n\r\n    /** Gets the bucket width */\r\n    public get bucketWidth(): number {\r\n        return this._window.bucketWidth;\r\n    }\r\n\r\n    /** Gets the bucket height */\r\n    public get bucketHeight(): number {\r\n        return this._window.bucketHeight;\r\n    }\r\n\r\n    /**\r\n     * Sets the bucket sizes.\r\n     * When freezeControls is true, setting a non-zero bucket size will improve performances by updating only\r\n     * controls that are visible. The bucket sizes is used to subdivide (internally) the window area to smaller areas into which\r\n     * controls are dispatched. So, the size should be roughly equals to the mean size of all the controls of\r\n     * the window. To disable the usage of buckets, sets either width or height (or both) to 0.\r\n     * Please note that using this option will raise the memory usage (the higher the bucket sizes, the less memory\r\n     * used), that's why it is not enabled by default.\r\n     * @param width width of the bucket\r\n     * @param height height of the bucket\r\n     */\r\n    public setBucketSizes(width: number, height: number): void {\r\n        this._window.setBucketSizes(width, height);\r\n    }\r\n\r\n    private _forceHorizontalBar: boolean = false;\r\n    private _forceVerticalBar: boolean = false;\r\n\r\n    /**\r\n     * Forces the horizontal scroll bar to be displayed\r\n     */\r\n    public get forceHorizontalBar(): boolean {\r\n        return this._forceHorizontalBar;\r\n    }\r\n\r\n    public set forceHorizontalBar(value: boolean) {\r\n        this._grid.setRowDefinition(1, value ? this._barSize : 0, true);\r\n        this._horizontalBar.isVisible = value;\r\n        this._forceHorizontalBar = value;\r\n    }\r\n\r\n    /**\r\n     * Forces the vertical scroll bar to be displayed\r\n     */\r\n    public get forceVerticalBar(): boolean {\r\n        return this._forceVerticalBar;\r\n    }\r\n\r\n    public set forceVerticalBar(value: boolean) {\r\n        this._grid.setColumnDefinition(1, value ? this._barSize : 0, true);\r\n        this._verticalBar.isVisible = value;\r\n        this._forceVerticalBar = value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new ScrollViewer\r\n     * @param name of ScrollViewer\r\n     * @param isImageBased\r\n     */\r\n    constructor(name?: string, isImageBased?: boolean) {\r\n        super(name);\r\n\r\n        this._useImageBar = isImageBased ? isImageBased : false;\r\n\r\n        this.onDirtyObservable.add(() => {\r\n            this._horizontalBarSpace.color = this.color;\r\n            this._verticalBarSpace.color = this.color;\r\n            this._dragSpace.color = this.color;\r\n        });\r\n\r\n        this.onPointerEnterObservable.add(() => {\r\n            this._pointerIsOver = true;\r\n        });\r\n\r\n        this.onPointerOutObservable.add(() => {\r\n            this._pointerIsOver = false;\r\n        });\r\n\r\n        this._grid = new Grid();\r\n        if (this._useImageBar) {\r\n            this._horizontalBar = new ImageScrollBar();\r\n            this._verticalBar = new ImageScrollBar();\r\n        } else {\r\n            this._horizontalBar = new ScrollBar();\r\n            this._verticalBar = new ScrollBar();\r\n        }\r\n\r\n        this._window = new _ScrollViewerWindow(\"scrollViewer_window\");\r\n        this._window.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._window.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        this._grid.addColumnDefinition(1);\r\n        this._grid.addColumnDefinition(0, true);\r\n        this._grid.addRowDefinition(1);\r\n        this._grid.addRowDefinition(0, true);\r\n\r\n        super.addControl(this._grid);\r\n        this._grid.addControl(this._window, 0, 0);\r\n\r\n        this._verticalBarSpace = new Rectangle();\r\n        this._verticalBarSpace.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalBarSpace.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._verticalBarSpace.thickness = 1;\r\n        this._grid.addControl(this._verticalBarSpace, 0, 1);\r\n        this._addBar(this._verticalBar, this._verticalBarSpace, true, Math.PI);\r\n\r\n        this._horizontalBarSpace = new Rectangle();\r\n        this._horizontalBarSpace.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._horizontalBarSpace.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._horizontalBarSpace.thickness = 1;\r\n        this._grid.addControl(this._horizontalBarSpace, 1, 0);\r\n        this._addBar(this._horizontalBar, this._horizontalBarSpace, false, 0);\r\n\r\n        this._dragSpace = new Rectangle();\r\n        this._dragSpace.thickness = 1;\r\n        this._grid.addControl(this._dragSpace, 1, 1);\r\n\r\n        // Colors\r\n        if (!this._useImageBar) {\r\n            this.barColor = \"grey\";\r\n            this.barBackground = \"transparent\";\r\n        }\r\n    }\r\n\r\n    /** Reset the scroll viewer window to initial size */\r\n    public resetWindow() {\r\n        this._window.width = \"100%\";\r\n        this._window.height = \"100%\";\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ScrollViewer\";\r\n    }\r\n\r\n    private _buildClientSizes() {\r\n        const ratio = this.host.idealRatio;\r\n\r\n        this._window.parentClientWidth = this._currentMeasure.width - (this._verticalBar.isVisible || this.forceVerticalBar ? this._barSize * ratio : 0) - 2 * this.thickness;\r\n        this._window.parentClientHeight = this._currentMeasure.height - (this._horizontalBar.isVisible || this.forceHorizontalBar ? this._barSize * ratio : 0) - 2 * this.thickness;\r\n\r\n        this._clientWidth = this._window.parentClientWidth;\r\n        this._clientHeight = this._window.parentClientHeight;\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._buildClientSizes();\r\n    }\r\n\r\n    protected _postMeasure(): void {\r\n        super._postMeasure();\r\n\r\n        this._updateScroller();\r\n\r\n        this._setWindowPosition(false);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the mouse wheel precision\r\n     * from 0 to 1 with a default value of 0.05\r\n     * */\r\n    @serialize()\r\n    public get wheelPrecision(): number {\r\n        return this._wheelPrecision;\r\n    }\r\n\r\n    public set wheelPrecision(value: number) {\r\n        if (this._wheelPrecision === value) {\r\n            return;\r\n        }\r\n\r\n        if (value < 0) {\r\n            value = 0;\r\n        }\r\n\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n\r\n        this._wheelPrecision = value;\r\n    }\r\n\r\n    /** Gets or sets the scroll bar container background color */\r\n    @serialize()\r\n    public get scrollBackground(): string {\r\n        return this._horizontalBarSpace.background;\r\n    }\r\n\r\n    public set scrollBackground(color: string) {\r\n        if (this._horizontalBarSpace.background === color) {\r\n            return;\r\n        }\r\n        this._horizontalBarSpace.background = color;\r\n        this._verticalBarSpace.background = color;\r\n    }\r\n\r\n    /** Gets or sets the bar color */\r\n    @serialize()\r\n    public get barColor(): string {\r\n        return this._barColor;\r\n    }\r\n\r\n    public set barColor(color: string) {\r\n        if (this._barColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._barColor = color;\r\n        this._horizontalBar.color = color;\r\n        this._verticalBar.color = color;\r\n    }\r\n\r\n    /** Gets or sets the bar image */\r\n    public get thumbImage(): Image {\r\n        return this._barImage;\r\n    }\r\n\r\n    public set thumbImage(value: Image) {\r\n        if (this._barImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._barImage = value;\r\n        const hb = <ImageScrollBar>this._horizontalBar;\r\n        const vb = <ImageScrollBar>this._verticalBar;\r\n        hb.thumbImage = value;\r\n        vb.thumbImage = value;\r\n    }\r\n\r\n    /** Gets or sets the horizontal bar image */\r\n    public get horizontalThumbImage(): Image {\r\n        return this._horizontalBarImage;\r\n    }\r\n\r\n    public set horizontalThumbImage(value: Image) {\r\n        if (this._horizontalBarImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._horizontalBarImage = value;\r\n        const hb = <ImageScrollBar>this._horizontalBar;\r\n        hb.thumbImage = value;\r\n    }\r\n\r\n    /** Gets or sets the vertical bar image */\r\n    public get verticalThumbImage(): Image {\r\n        return this._verticalBarImage;\r\n    }\r\n\r\n    public set verticalThumbImage(value: Image) {\r\n        if (this._verticalBarImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._verticalBarImage = value;\r\n        const vb = <ImageScrollBar>this._verticalBar;\r\n        vb.thumbImage = value;\r\n    }\r\n\r\n    /** Gets or sets the size of the bar */\r\n    @serialize()\r\n    public get barSize(): number {\r\n        return this._barSize;\r\n    }\r\n\r\n    public set barSize(value: number) {\r\n        if (this._barSize === value) {\r\n            return;\r\n        }\r\n\r\n        this._barSize = value;\r\n        this._markAsDirty();\r\n\r\n        if (this._horizontalBar.isVisible) {\r\n            this._grid.setRowDefinition(1, this._barSize, true);\r\n        }\r\n        if (this._verticalBar.isVisible) {\r\n            this._grid.setColumnDefinition(1, this._barSize, true);\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the length of the thumb */\r\n    public get thumbLength(): number {\r\n        return this._thumbLength;\r\n    }\r\n\r\n    public set thumbLength(value: number) {\r\n        if (this._thumbLength === value) {\r\n            return;\r\n        }\r\n        if (value <= 0) {\r\n            value = 0.1;\r\n        }\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n        this._thumbLength = value;\r\n        const hb = <ImageScrollBar>this._horizontalBar;\r\n        const vb = <ImageScrollBar>this._verticalBar;\r\n        hb.thumbLength = value;\r\n        vb.thumbLength = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of the thumb */\r\n    public get thumbHeight(): number {\r\n        return this._thumbHeight;\r\n    }\r\n\r\n    public set thumbHeight(value: number) {\r\n        if (this._thumbHeight === value) {\r\n            return;\r\n        }\r\n        if (value <= 0) {\r\n            value = 0.1;\r\n        }\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n        this._thumbHeight = value;\r\n        const hb = <ImageScrollBar>this._horizontalBar;\r\n        const vb = <ImageScrollBar>this._verticalBar;\r\n        hb.thumbHeight = value;\r\n        vb.thumbHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of the bar image */\r\n    public get barImageHeight(): number {\r\n        return this._barImageHeight;\r\n    }\r\n\r\n    public set barImageHeight(value: number) {\r\n        if (this._barImageHeight === value) {\r\n            return;\r\n        }\r\n        if (value <= 0) {\r\n            value = 0.1;\r\n        }\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n        this._barImageHeight = value;\r\n        const hb = <ImageScrollBar>this._horizontalBar;\r\n        const vb = <ImageScrollBar>this._verticalBar;\r\n        hb.barImageHeight = value;\r\n        vb.barImageHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of the horizontal bar image */\r\n    public get horizontalBarImageHeight(): number {\r\n        return this._horizontalBarImageHeight;\r\n    }\r\n\r\n    public set horizontalBarImageHeight(value: number) {\r\n        if (this._horizontalBarImageHeight === value) {\r\n            return;\r\n        }\r\n        if (value <= 0) {\r\n            value = 0.1;\r\n        }\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n        this._horizontalBarImageHeight = value;\r\n        const hb = <ImageScrollBar>this._horizontalBar;\r\n        hb.barImageHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of the vertical bar image */\r\n    public get verticalBarImageHeight(): number {\r\n        return this._verticalBarImageHeight;\r\n    }\r\n\r\n    public set verticalBarImageHeight(value: number) {\r\n        if (this._verticalBarImageHeight === value) {\r\n            return;\r\n        }\r\n        if (value <= 0) {\r\n            value = 0.1;\r\n        }\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n        this._verticalBarImageHeight = value;\r\n        const vb = <ImageScrollBar>this._verticalBar;\r\n        vb.barImageHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the bar background */\r\n    @serialize()\r\n    public get barBackground(): string {\r\n        return this._barBackground;\r\n    }\r\n\r\n    public set barBackground(color: string) {\r\n        if (this._barBackground === color) {\r\n            return;\r\n        }\r\n\r\n        this._barBackground = color;\r\n        const hb = <ScrollBar>this._horizontalBar;\r\n        const vb = <ScrollBar>this._verticalBar;\r\n        hb.background = color;\r\n        vb.background = color;\r\n        this._dragSpace.background = color;\r\n    }\r\n\r\n    /** Gets or sets the bar background image */\r\n    public get barImage(): Image {\r\n        return this._barBackgroundImage;\r\n    }\r\n\r\n    public set barImage(value: Image) {\r\n        this._barBackgroundImage = value;\r\n        const hb = <ImageScrollBar>this._horizontalBar;\r\n        const vb = <ImageScrollBar>this._verticalBar;\r\n        hb.backgroundImage = value;\r\n        vb.backgroundImage = value;\r\n    }\r\n\r\n    /** Gets or sets the horizontal bar background image */\r\n    public get horizontalBarImage(): Image {\r\n        return this._horizontalBarBackgroundImage;\r\n    }\r\n\r\n    public set horizontalBarImage(value: Image) {\r\n        this._horizontalBarBackgroundImage = value;\r\n        const hb = <ImageScrollBar>this._horizontalBar;\r\n        hb.backgroundImage = value;\r\n    }\r\n\r\n    /** Gets or sets the vertical bar background image */\r\n    public get verticalBarImage(): Image {\r\n        return this._verticalBarBackgroundImage;\r\n    }\r\n\r\n    public set verticalBarImage(value: Image) {\r\n        this._verticalBarBackgroundImage = value;\r\n        const vb = <ImageScrollBar>this._verticalBar;\r\n        vb.backgroundImage = value;\r\n    }\r\n\r\n    private _setWindowPosition(force = true): void {\r\n        const ratio = this.host.idealRatio;\r\n        const windowContentsWidth = this._window._currentMeasure.width;\r\n        const windowContentsHeight = this._window._currentMeasure.height;\r\n\r\n        if (!force && this._oldWindowContentsWidth === windowContentsWidth && this._oldWindowContentsHeight === windowContentsHeight) {\r\n            return;\r\n        }\r\n\r\n        this._oldWindowContentsWidth = windowContentsWidth;\r\n        this._oldWindowContentsHeight = windowContentsHeight;\r\n\r\n        const _endLeft = this._clientWidth - windowContentsWidth;\r\n        const _endTop = this._clientHeight - windowContentsHeight;\r\n\r\n        const newLeft = (this._horizontalBar.value / ratio) * _endLeft + \"px\";\r\n        const newTop = (this._verticalBar.value / ratio) * _endTop + \"px\";\r\n\r\n        if (newLeft !== this._window.left) {\r\n            this._window.left = newLeft;\r\n            if (!this.freezeControls) {\r\n                this._rebuildLayout = true;\r\n            }\r\n        }\r\n\r\n        if (newTop !== this._window.top) {\r\n            this._window.top = newTop;\r\n            if (!this.freezeControls) {\r\n                this._rebuildLayout = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    private _updateScroller(): void {\r\n        const windowContentsWidth = this._window._currentMeasure.width;\r\n        const windowContentsHeight = this._window._currentMeasure.height;\r\n\r\n        if (this._horizontalBar.isVisible && windowContentsWidth <= this._clientWidth && !this.forceHorizontalBar) {\r\n            this._grid.setRowDefinition(1, 0, true);\r\n            this._horizontalBar.isVisible = false;\r\n            this._horizontalBar.value = 0;\r\n            this._rebuildLayout = true;\r\n        } else if (!this._horizontalBar.isVisible && (windowContentsWidth > this._clientWidth || this.forceHorizontalBar)) {\r\n            this._grid.setRowDefinition(1, this._barSize, true);\r\n            this._horizontalBar.isVisible = true;\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        if (this._verticalBar.isVisible && windowContentsHeight <= this._clientHeight && !this.forceVerticalBar) {\r\n            this._grid.setColumnDefinition(1, 0, true);\r\n            this._verticalBar.isVisible = false;\r\n            this._verticalBar.value = 0;\r\n            this._rebuildLayout = true;\r\n        } else if (!this._verticalBar.isVisible && (windowContentsHeight > this._clientHeight || this.forceVerticalBar)) {\r\n            this._grid.setColumnDefinition(1, this._barSize, true);\r\n            this._verticalBar.isVisible = true;\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        this._buildClientSizes();\r\n\r\n        const ratio = this.host.idealRatio;\r\n\r\n        this._horizontalBar.thumbWidth = this._thumbLength * 0.9 * (this._clientWidth / ratio) + \"px\";\r\n        this._verticalBar.thumbWidth = this._thumbLength * 0.9 * (this._clientHeight / ratio) + \"px\";\r\n    }\r\n\r\n    public _link(host: AdvancedDynamicTexture): void {\r\n        super._link(host);\r\n\r\n        this._attachWheel();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _addBar(barControl: ScrollBar | ImageScrollBar, barContainer: Rectangle, isVertical: boolean, rotation: number) {\r\n        barControl.paddingLeft = 0;\r\n        barControl.width = \"100%\";\r\n        barControl.height = \"100%\";\r\n        barControl.barOffset = 0;\r\n        barControl.value = 0;\r\n        barControl.maximum = 1;\r\n        barControl.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        barControl.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n        barControl.isVertical = isVertical;\r\n        barControl.rotation = rotation;\r\n        barControl.isVisible = false;\r\n\r\n        barContainer.addControl(barControl);\r\n\r\n        barControl.onValueChangedObservable.add(() => {\r\n            this._setWindowPosition();\r\n        });\r\n    }\r\n\r\n    /** @internal */\r\n    private _attachWheel() {\r\n        if (!this._host || this._onWheelObserver) {\r\n            return;\r\n        }\r\n\r\n        this._onWheelObserver = this.onWheelObservable.add((pi) => {\r\n            if (!this._pointerIsOver || this.isReadOnly) {\r\n                return;\r\n            }\r\n            if (this._verticalBar.isVisible == true) {\r\n                if (pi.y < 0 && this._verticalBar.value > 0) {\r\n                    this._verticalBar.value -= this._wheelPrecision;\r\n                } else if (pi.y > 0 && this._verticalBar.value < this._verticalBar.maximum) {\r\n                    this._verticalBar.value += this._wheelPrecision;\r\n                }\r\n            }\r\n            if (this._horizontalBar.isVisible == true) {\r\n                if (pi.x < 0 && this._horizontalBar.value < this._horizontalBar.maximum) {\r\n                    this._horizontalBar.value += this._wheelPrecision;\r\n                } else if (pi.x > 0 && this._horizontalBar.value > 0) {\r\n                    this._horizontalBar.value -= this._wheelPrecision;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public _renderHighlightSpecific(context: ICanvasRenderingContext): void {\r\n        if (!this.isHighlighted) {\r\n            return;\r\n        }\r\n\r\n        super._renderHighlightSpecific(context);\r\n\r\n        this._grid._renderHighlightSpecific(context);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        this.onWheelObservable.remove(this._onWheelObserver);\r\n        this._onWheelObserver = null;\r\n        super.dispose();\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.ScrollViewer\", ScrollViewer);\r\n","import type { Nullable } from \"core/types\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport type { Vector2 } from \"core/Maths/math.vector\";\r\n\r\nimport { Rectangle } from \"./rectangle\";\r\nimport type { Control } from \"./control\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\n\r\n/**\r\n * Class used to create toggle buttons\r\n * @since 5.0.0\r\n */\r\nexport class ToggleButton extends Rectangle {\r\n    /**\r\n     * Function called to generate the toActive animation\r\n     */\r\n    public toActiveAnimation: () => void;\r\n\r\n    /**\r\n     * Function called to generate the toInactive animation\r\n     */\r\n    public toInactiveAnimation: () => void;\r\n\r\n    /**\r\n     * Function called to generate a pointer enter animation when the toggle button is active.\r\n     */\r\n    public pointerEnterActiveAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer out animation when the toggle button is active.\r\n     */\r\n    public pointerOutActiveAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer down animation when the toggle button is active.\r\n     */\r\n    public pointerDownActiveAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer up animation when the toggle button is active.\r\n     */\r\n    public pointerUpActiveAnimation: () => void;\r\n\r\n    /**\r\n     * Function called to generate a pointer enter animation when the toggle button is inactive.\r\n     */\r\n    public pointerEnterInactiveAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer out animation when the toggle button is inactive.\r\n     */\r\n    public pointerOutInactiveAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer down animation when the toggle button is inactive.\r\n     */\r\n    public pointerDownInactiveAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer up animation when the toggle button is inactive.\r\n     */\r\n    public pointerUpInactiveAnimation: () => void;\r\n\r\n    /** Observable raised when isActive is changed */\r\n    public onIsActiveChangedObservable = new Observable<boolean>();\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the toggle button will let internal controls handle picking instead of doing it directly using its bounding info\r\n     */\r\n    public delegatePickingToChildren = false;\r\n\r\n    private _group: string;\r\n    /** Gets or sets group name this toggle button belongs to */\r\n    public get group(): string {\r\n        return this._group;\r\n    }\r\n    public set group(value: string) {\r\n        if (this._group === value) {\r\n            return;\r\n        }\r\n\r\n        this._group = value;\r\n    }\r\n\r\n    private _isActive = false;\r\n    /** Gets or sets a boolean indicating if the toggle button is active or not */\r\n    public get isActive(): boolean {\r\n        return this._isActive;\r\n    }\r\n    public set isActive(value: boolean) {\r\n        // Function modeled after radioButton.ts\r\n        if (this._isActive === value) {\r\n            return;\r\n        }\r\n\r\n        this._isActive = value;\r\n\r\n        // Update the visual state based on the new value\r\n        if (this._isActive) {\r\n            this.toActiveAnimation?.();\r\n        } else {\r\n            this.toInactiveAnimation?.();\r\n        }\r\n\r\n        this._markAsDirty();\r\n\r\n        this.onIsActiveChangedObservable.notifyObservers(value);\r\n\r\n        if (this._isActive && this._host && this._group) {\r\n            // A toggle button in a group can only have 1 active element at a given time.\r\n            // If this toggle button has a group, set other toggle buttons in the group to inactive.\r\n            this._host.executeOnAllControls((control) => {\r\n                // Check for control type ToggleButton\r\n                if (control.typeName === \"ToggleButton\") {\r\n                    // Don't do anything to this toggle button\r\n                    if (control === this) {\r\n                        return;\r\n                    }\r\n\r\n                    const childToggle = <ToggleButton>control;\r\n                    // If toggle button is in same group, set isActive to false\r\n                    if (childToggle.group === this.group) {\r\n                        childToggle.isActive = false;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new ToggleButton\r\n     * @param name defines the control name\r\n     * @param group defines the toggle group this toggle belongs to\r\n     */\r\n    constructor(public name?: string, group?: string) {\r\n        super(name);\r\n        this.group = group ?? \"\";\r\n\r\n        this.thickness = 0;\r\n        this.isPointerBlocker = true;\r\n\r\n        let alphaStore: Nullable<number> = null;\r\n\r\n        this.toActiveAnimation = () => {\r\n            this.thickness = 1;\r\n        };\r\n        this.toInactiveAnimation = () => {\r\n            this.thickness = 0;\r\n        };\r\n\r\n        this.pointerEnterActiveAnimation = () => {\r\n            alphaStore = this.alpha;\r\n            this.alpha -= 0.1;\r\n        };\r\n\r\n        this.pointerOutActiveAnimation = () => {\r\n            if (alphaStore !== null) {\r\n                this.alpha = alphaStore;\r\n            }\r\n        };\r\n\r\n        this.pointerDownActiveAnimation = () => {\r\n            this.scaleX -= 0.05;\r\n            this.scaleY -= 0.05;\r\n        };\r\n\r\n        this.pointerUpActiveAnimation = () => {\r\n            this.scaleX += 0.05;\r\n            this.scaleY += 0.05;\r\n        };\r\n\r\n        this.pointerEnterInactiveAnimation = () => {\r\n            alphaStore = this.alpha;\r\n            this.alpha -= 0.1;\r\n        };\r\n\r\n        this.pointerOutInactiveAnimation = () => {\r\n            if (alphaStore !== null) {\r\n                this.alpha = alphaStore;\r\n            }\r\n        };\r\n\r\n        this.pointerDownInactiveAnimation = () => {\r\n            this.scaleX -= 0.05;\r\n            this.scaleY -= 0.05;\r\n        };\r\n\r\n        this.pointerUpInactiveAnimation = () => {\r\n            this.scaleX += 0.05;\r\n            this.scaleY += 0.05;\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ToggleButton\";\r\n    }\r\n\r\n    // While being a container, the toggle button behaves like a control.\r\n    /**\r\n     * @internal\r\n     */\r\n    public _processPicking(x: number, y: number, pi: PointerInfoBase, type: number, pointerId: number, buttonIndex: number, deltaX?: number, deltaY?: number): boolean {\r\n        if (!this._isEnabled || !this.isHitTestVisible || !this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.delegatePickingToChildren) {\r\n            let contains = false;\r\n            for (let index = this._children.length - 1; index >= 0; index--) {\r\n                const child = this._children[index];\r\n                if (child.isEnabled && child.isHitTestVisible && child.isVisible && !child.notRenderable && child.contains(x, y)) {\r\n                    contains = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!contains) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        this._processObservables(type, x, y, pi, pointerId, buttonIndex, deltaX, deltaY);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerEnter(target: Control, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerEnter(target, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isReadOnly) {\r\n            return true;\r\n        }\r\n\r\n        if (this._isActive) {\r\n            if (this.pointerEnterActiveAnimation) {\r\n                this.pointerEnterActiveAnimation();\r\n            }\r\n        } else {\r\n            if (this.pointerEnterInactiveAnimation) {\r\n                this.pointerEnterInactiveAnimation();\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerOut(target: Control, pi: PointerInfoBase, force = false): void {\r\n        if (!this.isReadOnly) {\r\n            if (this._isActive) {\r\n                if (this.pointerOutActiveAnimation) {\r\n                    this.pointerOutActiveAnimation();\r\n                }\r\n            } else {\r\n                if (this.pointerOutInactiveAnimation) {\r\n                    this.pointerOutInactiveAnimation();\r\n                }\r\n            }\r\n        }\r\n\r\n        super._onPointerOut(target, pi, force);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isReadOnly) {\r\n            return true;\r\n        }\r\n\r\n        if (this._isActive) {\r\n            if (this.pointerDownActiveAnimation) {\r\n                this.pointerDownActiveAnimation();\r\n            }\r\n        } else {\r\n            if (this.pointerDownInactiveAnimation) {\r\n                this.pointerDownInactiveAnimation();\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean, pi: PointerInfoBase): void {\r\n        if (!this.isReadOnly) {\r\n            if (this._isActive) {\r\n                if (this.pointerUpActiveAnimation) {\r\n                    this.pointerUpActiveAnimation();\r\n                }\r\n            } else {\r\n                if (this.pointerUpInactiveAnimation) {\r\n                    this.pointerUpInactiveAnimation();\r\n                }\r\n            }\r\n        }\r\n\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick, pi);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.ToggleButton\", ToggleButton);\r\n","import type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Observable } from \"core/Misc/observable\";\r\n\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { Button } from \"./button\";\r\nimport type { Container } from \"./container\";\r\nimport type { TextBlock } from \"./textBlock\";\r\nimport type { InputText } from \"./inputText\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport { InputTextArea } from \"./inputTextArea\";\r\n\r\n/**\r\n * Class used to store key control properties\r\n */\r\nexport class KeyPropertySet {\r\n    /** Width */\r\n    width?: string;\r\n    /** Height */\r\n    height?: string;\r\n    /** Left padding */\r\n    paddingLeft?: string;\r\n    /** Right padding */\r\n    paddingRight?: string;\r\n    /** Top padding */\r\n    paddingTop?: string;\r\n    /** Bottom padding */\r\n    paddingBottom?: string;\r\n    /** Foreground color */\r\n    color?: string;\r\n    /** Background color */\r\n    background?: string;\r\n}\r\n\r\ntype ConnectedInputText = {\r\n    input: InputText;\r\n    onFocusObserver: Nullable<Observer<InputText>>;\r\n    onBlurObserver: Nullable<Observer<InputText>>;\r\n};\r\n\r\n/**\r\n * Class used to create virtual keyboard\r\n */\r\nexport class VirtualKeyboard extends StackPanel {\r\n    /** Observable raised when a key is pressed */\r\n    public onKeyPressObservable = new Observable<string>();\r\n\r\n    /** Gets or sets default key button width */\r\n    public defaultButtonWidth = \"40px\";\r\n    /** Gets or sets default key button height */\r\n    public defaultButtonHeight = \"40px\";\r\n\r\n    /** Gets or sets default key button left padding */\r\n    public defaultButtonPaddingLeft = \"2px\";\r\n    /** Gets or sets default key button right padding */\r\n    public defaultButtonPaddingRight = \"2px\";\r\n    /** Gets or sets default key button top padding */\r\n    public defaultButtonPaddingTop = \"2px\";\r\n    /** Gets or sets default key button bottom padding */\r\n    public defaultButtonPaddingBottom = \"2px\";\r\n\r\n    /** Gets or sets default key button foreground color */\r\n    public defaultButtonColor = \"#DDD\";\r\n    /** Gets or sets default key button background color */\r\n    public defaultButtonBackground = \"#070707\";\r\n\r\n    /** Gets or sets shift button foreground color */\r\n    public shiftButtonColor = \"#7799FF\";\r\n    /** Gets or sets shift button thickness*/\r\n    public selectedShiftThickness = 1;\r\n\r\n    /** Gets shift key state */\r\n    public shiftState = 0;\r\n\r\n    protected _getTypeName(): string {\r\n        return \"VirtualKeyboard\";\r\n    }\r\n\r\n    private _createKey(key: string, propertySet: Nullable<KeyPropertySet>) {\r\n        const button = Button.CreateSimpleButton(key, key);\r\n\r\n        button.width = propertySet && propertySet.width ? propertySet.width : this.defaultButtonWidth;\r\n        button.height = propertySet && propertySet.height ? propertySet.height : this.defaultButtonHeight;\r\n        button.color = propertySet && propertySet.color ? propertySet.color : this.defaultButtonColor;\r\n        button.background = propertySet && propertySet.background ? propertySet.background : this.defaultButtonBackground;\r\n        button.paddingLeft = propertySet && propertySet.paddingLeft ? propertySet.paddingLeft : this.defaultButtonPaddingLeft;\r\n        button.paddingRight = propertySet && propertySet.paddingRight ? propertySet.paddingRight : this.defaultButtonPaddingRight;\r\n        button.paddingTop = propertySet && propertySet.paddingTop ? propertySet.paddingTop : this.defaultButtonPaddingTop;\r\n        button.paddingBottom = propertySet && propertySet.paddingBottom ? propertySet.paddingBottom : this.defaultButtonPaddingBottom;\r\n\r\n        button.thickness = 0;\r\n        button.isFocusInvisible = true;\r\n\r\n        button.shadowColor = this.shadowColor;\r\n        button.shadowBlur = this.shadowBlur;\r\n        button.shadowOffsetX = this.shadowOffsetX;\r\n        button.shadowOffsetY = this.shadowOffsetY;\r\n\r\n        button.onPointerUpObservable.add(() => {\r\n            this.onKeyPressObservable.notifyObservers(key);\r\n        });\r\n\r\n        return button;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row of keys\r\n     * @param keys defines the list of keys to add\r\n     * @param propertySets defines the associated property sets\r\n     */\r\n    public addKeysRow(keys: Array<string>, propertySets?: Array<KeyPropertySet>): void {\r\n        const panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.isFocusInvisible = true;\r\n\r\n        let maxKey: Nullable<Button> = null;\r\n        for (let i = 0; i < keys.length; i++) {\r\n            let properties = null;\r\n\r\n            if (propertySets && propertySets.length === keys.length) {\r\n                properties = propertySets[i];\r\n            }\r\n\r\n            const key = this._createKey(keys[i], properties);\r\n            if (!maxKey || key.heightInPixels > maxKey.heightInPixels) {\r\n                maxKey = key;\r\n            }\r\n\r\n            panel.addControl(key);\r\n        }\r\n\r\n        panel.height = maxKey ? maxKey.height : this.defaultButtonHeight;\r\n\r\n        this.addControl(panel);\r\n    }\r\n\r\n    /**\r\n     * Set the shift key to a specific state\r\n     * @param shiftState defines the new shift state\r\n     */\r\n    public applyShiftState(shiftState: number): void {\r\n        if (!this.children) {\r\n            return;\r\n        }\r\n\r\n        for (let i = 0; i < this.children.length; i++) {\r\n            const row = this.children[i];\r\n            if (!row || !(<Container>row).children) {\r\n                continue;\r\n            }\r\n\r\n            const rowContainer = <Container>row;\r\n            for (let j = 0; j < rowContainer.children.length; j++) {\r\n                const button = rowContainer.children[j] as Button;\r\n\r\n                if (!button || !button.children[0]) {\r\n                    continue;\r\n                }\r\n\r\n                const button_tblock = button.children[0] as TextBlock;\r\n\r\n                if (button_tblock.text === \"\\u21E7\") {\r\n                    button.color = shiftState ? this.shiftButtonColor : this.defaultButtonColor;\r\n                    button.thickness = shiftState > 1 ? this.selectedShiftThickness : 0;\r\n                }\r\n\r\n                button_tblock.text = shiftState > 0 ? button_tblock.text.toUpperCase() : button_tblock.text.toLowerCase();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _currentlyConnectedInputText: Nullable<InputText | InputTextArea> = null;\r\n    private _connectedInputTexts: ConnectedInputText[] = [];\r\n    private _onKeyPressObserver: Nullable<Observer<string>> = null;\r\n\r\n    /** Gets the input text control currently attached to the keyboard */\r\n    public get connectedInputText(): Nullable<InputText | InputTextArea> {\r\n        return this._currentlyConnectedInputText;\r\n    }\r\n\r\n    /**\r\n     * Connects the keyboard with an input text control\r\n     *\r\n     * @param input defines the target control\r\n     */\r\n    public connect(input: InputText): void {\r\n        const inputTextAlreadyConnected = this._connectedInputTexts.some((a) => a.input === input);\r\n        if (inputTextAlreadyConnected) {\r\n            return;\r\n        }\r\n\r\n        if (this._onKeyPressObserver === null) {\r\n            this._onKeyPressObserver = this.onKeyPressObservable.add((key) => {\r\n                if (!this._currentlyConnectedInputText) {\r\n                    return;\r\n                }\r\n\r\n                this._currentlyConnectedInputText._host.focusedControl = this._currentlyConnectedInputText;\r\n\r\n                switch (key) {\r\n                    case \"\\u21E7\":\r\n                        this.shiftState++;\r\n                        if (this.shiftState > 2) {\r\n                            this.shiftState = 0;\r\n                        }\r\n                        this.applyShiftState(this.shiftState);\r\n                        return;\r\n                    case \"\\u2190\":\r\n                        if (this._currentlyConnectedInputText instanceof InputTextArea) {\r\n                            this._currentlyConnectedInputText.alternativeProcessKey(\"Backspace\");\r\n                        } else {\r\n                            this._currentlyConnectedInputText.processKey(8);\r\n                        }\r\n                        return;\r\n                    case \"\\u21B5\":\r\n                        if (this._currentlyConnectedInputText instanceof InputTextArea) {\r\n                            this._currentlyConnectedInputText.alternativeProcessKey(\"Enter\");\r\n                        } else {\r\n                            this._currentlyConnectedInputText.processKey(13);\r\n                        }\r\n                        return;\r\n                }\r\n                if (this._currentlyConnectedInputText instanceof InputTextArea) {\r\n                    this._currentlyConnectedInputText.alternativeProcessKey(\"\", this.shiftState ? key.toUpperCase() : key);\r\n                } else {\r\n                    this._currentlyConnectedInputText.processKey(-1, this.shiftState ? key.toUpperCase() : key);\r\n                }\r\n\r\n                if (this.shiftState === 1) {\r\n                    this.shiftState = 0;\r\n                    this.applyShiftState(this.shiftState);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.isVisible = false;\r\n        this._currentlyConnectedInputText = input;\r\n        input._connectedVirtualKeyboard = this;\r\n\r\n        // Events hooking\r\n        const onFocusObserver: Nullable<Observer<InputText>> = input.onFocusObservable.add(() => {\r\n            this._currentlyConnectedInputText = input;\r\n            input._connectedVirtualKeyboard = this;\r\n            this.isVisible = true;\r\n        });\r\n\r\n        const onBlurObserver: Nullable<Observer<InputText>> = input.onBlurObservable.add(() => {\r\n            input._connectedVirtualKeyboard = null;\r\n            this._currentlyConnectedInputText = null;\r\n            this.isVisible = false;\r\n        });\r\n\r\n        this._connectedInputTexts.push({\r\n            input,\r\n            onBlurObserver,\r\n            onFocusObserver,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Disconnects the keyboard from connected InputText controls\r\n     *\r\n     * @param input optionally defines a target control, otherwise all are disconnected\r\n     */\r\n    public disconnect(input?: InputText): void {\r\n        if (input) {\r\n            // .find not available on IE\r\n            const filtered = this._connectedInputTexts.filter((a) => a.input === input);\r\n            if (filtered.length === 1) {\r\n                this._removeConnectedInputObservables(filtered[0]);\r\n\r\n                this._connectedInputTexts = this._connectedInputTexts.filter((a) => a.input !== input);\r\n                if (this._currentlyConnectedInputText === input) {\r\n                    this._currentlyConnectedInputText = null;\r\n                }\r\n            }\r\n        } else {\r\n            this._connectedInputTexts.forEach((connectedInputText: ConnectedInputText) => {\r\n                this._removeConnectedInputObservables(connectedInputText);\r\n            });\r\n            this._connectedInputTexts.length = 0;\r\n        }\r\n\r\n        if (this._connectedInputTexts.length === 0) {\r\n            this._currentlyConnectedInputText = null;\r\n            this.onKeyPressObservable.remove(this._onKeyPressObserver);\r\n            this._onKeyPressObserver = null;\r\n        }\r\n    }\r\n\r\n    private _removeConnectedInputObservables(connectedInputText: ConnectedInputText): void {\r\n        connectedInputText.input._connectedVirtualKeyboard = null;\r\n        connectedInputText.input.onFocusObservable.remove(connectedInputText.onFocusObserver);\r\n        connectedInputText.input.onBlurObservable.remove(connectedInputText.onBlurObserver);\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n\r\n        this.disconnect();\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Creates a new keyboard using a default layout\r\n     *\r\n     * @param name defines control name\r\n     * @returns a new VirtualKeyboard\r\n     */\r\n    public static CreateDefaultLayout(name?: string): VirtualKeyboard {\r\n        const returnValue = new VirtualKeyboard(name);\r\n\r\n        returnValue.addKeysRow([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"\\u2190\"]);\r\n        returnValue.addKeysRow([\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"]);\r\n        returnValue.addKeysRow([\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \";\", \"'\", \"\\u21B5\"]);\r\n        returnValue.addKeysRow([\"\\u21E7\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \",\", \".\", \"/\"]);\r\n        returnValue.addKeysRow([\" \"], [{ width: \"200px\" }]);\r\n\r\n        return returnValue;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _parseFromContent(serializedObject: any, host: AdvancedDynamicTexture) {\r\n        super._parseFromContent(serializedObject, host);\r\n        for (const row of this.children) {\r\n            if (row.getClassName() === \"StackPanel\") {\r\n                const stackPanel = row as StackPanel;\r\n                for (const key of stackPanel.children) {\r\n                    if (key.getClassName() === \"Button\" && key.name) {\r\n                        key.onPointerUpObservable.add(() => {\r\n                            this.onKeyPressObservable.notifyObservers(key.name as string);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.VirtualKeyboard\", VirtualKeyboard);\r\n","import { Control } from \"./control\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/** Class used to render a grid  */\r\nexport class DisplayGrid extends Control {\r\n    private _cellWidth = 20;\r\n    private _cellHeight = 20;\r\n\r\n    private _minorLineTickness = 1;\r\n    private _minorLineColor = \"DarkGray\";\r\n\r\n    private _majorLineTickness = 2;\r\n    private _majorLineColor = \"White\";\r\n\r\n    private _majorLineFrequency = 5;\r\n\r\n    private _background = \"Black\";\r\n\r\n    private _displayMajorLines = true;\r\n    private _displayMinorLines = true;\r\n\r\n    /** Gets or sets a boolean indicating if minor lines must be rendered (true by default)) */\r\n    @serialize()\r\n    public get displayMinorLines(): boolean {\r\n        return this._displayMinorLines;\r\n    }\r\n\r\n    public set displayMinorLines(value: boolean) {\r\n        if (this._displayMinorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMinorLines = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if major lines must be rendered (true by default)) */\r\n    @serialize()\r\n    public get displayMajorLines(): boolean {\r\n        return this._displayMajorLines;\r\n    }\r\n\r\n    public set displayMajorLines(value: boolean) {\r\n        if (this._displayMajorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMajorLines = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color (Black by default) */\r\n    @serialize()\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the width of each cell (20 by default) */\r\n    @serialize()\r\n    public get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n\r\n    public set cellWidth(value: number) {\r\n        this._cellWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of each cell (20 by default) */\r\n    @serialize()\r\n    public get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n\r\n    public set cellHeight(value: number) {\r\n        this._cellHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of minor lines (1 by default) */\r\n    @serialize()\r\n    public get minorLineTickness(): number {\r\n        return this._minorLineTickness;\r\n    }\r\n\r\n    public set minorLineTickness(value: number) {\r\n        this._minorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of minor lines (DarkGray by default) */\r\n    @serialize()\r\n    public get minorLineColor(): string {\r\n        return this._minorLineColor;\r\n    }\r\n\r\n    public set minorLineColor(value: string) {\r\n        this._minorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of major lines (2 by default) */\r\n    @serialize()\r\n    public get majorLineTickness(): number {\r\n        return this._majorLineTickness;\r\n    }\r\n\r\n    public set majorLineTickness(value: number) {\r\n        this._majorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of major lines (White by default) */\r\n    @serialize()\r\n    public get majorLineColor(): string {\r\n        return this._majorLineColor;\r\n    }\r\n\r\n    public set majorLineColor(value: string) {\r\n        this._majorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the frequency of major lines (default is 1 every 5 minor lines)*/\r\n    @serialize()\r\n    public get majorLineFrequency(): number {\r\n        return this._majorLineFrequency;\r\n    }\r\n\r\n    public set majorLineFrequency(value: number) {\r\n        this._majorLineFrequency = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new GridDisplayRectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._isEnabled) {\r\n            if (this._background) {\r\n                context.fillStyle = this._background;\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n\r\n            const cellCountX = this._currentMeasure.width / this._cellWidth;\r\n            const cellCountY = this._currentMeasure.height / this._cellHeight;\r\n\r\n            // Minor lines\r\n            const left = this._currentMeasure.left + this._currentMeasure.width / 2;\r\n            const top = this._currentMeasure.top + this._currentMeasure.height / 2;\r\n\r\n            if (this._displayMinorLines) {\r\n                context.strokeStyle = this._minorLineColor;\r\n                context.lineWidth = this._minorLineTickness;\r\n\r\n                for (let x = -cellCountX / 2 + 1; x < cellCountX / 2; x++) {\r\n                    const cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n\r\n                    context.stroke();\r\n                }\r\n\r\n                for (let y = -cellCountY / 2 + 1; y < cellCountY / 2; y++) {\r\n                    const cellY = top + y * this.cellHeight;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.stroke();\r\n                }\r\n            }\r\n\r\n            // Major lines\r\n            if (this._displayMajorLines) {\r\n                context.strokeStyle = this._majorLineColor;\r\n                context.lineWidth = this._majorLineTickness;\r\n\r\n                for (let x = -cellCountX / 2 + this._majorLineFrequency; x < cellCountX / 2; x += this._majorLineFrequency) {\r\n                    const cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n                    context.stroke();\r\n                }\r\n\r\n                for (let y = -cellCountY / 2 + this._majorLineFrequency; y < cellCountY / 2; y += this._majorLineFrequency) {\r\n                    const cellY = top + y * this.cellHeight;\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.closePath();\r\n                    context.stroke();\r\n                }\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"DisplayGrid\";\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.DisplayGrid\", DisplayGrid);\r\n","import { BaseSlider } from \"./baseSlider\";\r\nimport { Measure } from \"../../measure\";\r\nimport { Image } from \"../image\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport type { AdvancedDynamicTexture } from \"../../advancedDynamicTexture\";\r\n\r\n/**\r\n * Class used to create slider controls based on images\r\n */\r\nexport class ImageBasedSlider extends BaseSlider {\r\n    private _backgroundImage: Image;\r\n    private _thumbImage: Image;\r\n    private _valueBarImage: Image;\r\n    private _tempMeasure = new Measure(0, 0, 0, 0);\r\n\r\n    @serialize()\r\n    public get displayThumb(): boolean {\r\n        return this._displayThumb && this.thumbImage != null;\r\n    }\r\n\r\n    public set displayThumb(value: boolean) {\r\n        if (this._displayThumb === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayThumb = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the background\r\n     */\r\n    public get backgroundImage(): Image {\r\n        return this._backgroundImage;\r\n    }\r\n\r\n    public set backgroundImage(value: Image) {\r\n        if (this._backgroundImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._backgroundImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the value bar\r\n     */\r\n    public get valueBarImage(): Image {\r\n        return this._valueBarImage;\r\n    }\r\n\r\n    public set valueBarImage(value: Image) {\r\n        if (this._valueBarImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._valueBarImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the thumb\r\n     */\r\n    public get thumbImage(): Image {\r\n        return this._thumbImage;\r\n    }\r\n\r\n    public set thumbImage(value: Image) {\r\n        if (this._thumbImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new ImageBasedSlider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ImageBasedSlider\";\r\n    }\r\n\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        this._prepareRenderingData(\"rectangle\");\r\n        const thumbPosition = this._getThumbPosition();\r\n        const left = this._renderLeft;\r\n        const top = this._renderTop;\r\n        const width = this._renderWidth;\r\n        const height = this._renderHeight;\r\n\r\n        // Background\r\n        if (this._backgroundImage) {\r\n            this._tempMeasure.copyFromFloats(left, top, width, height);\r\n            if (this.isThumbClamped && this.displayThumb) {\r\n                if (this.isVertical) {\r\n                    this._tempMeasure.height += this._effectiveThumbThickness;\r\n                } else {\r\n                    this._tempMeasure.width += this._effectiveThumbThickness;\r\n                }\r\n            }\r\n            this._backgroundImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._backgroundImage._draw(context);\r\n        }\r\n\r\n        // Bar\r\n        if (this._valueBarImage) {\r\n            if (this.isVertical) {\r\n                if (this.isThumbClamped && this.displayThumb) {\r\n                    this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);\r\n                } else {\r\n                    this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition);\r\n                }\r\n            } else {\r\n                if (this.isThumbClamped && this.displayThumb) {\r\n                    this._tempMeasure.copyFromFloats(left, top, thumbPosition + this._effectiveThumbThickness / 2, height);\r\n                } else {\r\n                    this._tempMeasure.copyFromFloats(left, top, thumbPosition, height);\r\n                }\r\n            }\r\n            this._valueBarImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._valueBarImage._draw(context);\r\n        }\r\n\r\n        // Thumb\r\n        if (this.displayThumb) {\r\n            if (this.isVertical) {\r\n                this._tempMeasure.copyFromFloats(\r\n                    left - this._effectiveBarOffset,\r\n                    this._currentMeasure.top + thumbPosition,\r\n                    this._currentMeasure.width,\r\n                    this._effectiveThumbThickness\r\n                );\r\n            } else {\r\n                this._tempMeasure.copyFromFloats(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n            }\r\n\r\n            this._thumbImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._thumbImage._draw(context);\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    /**\r\n     * Serializes the current control\r\n     * @param serializationObject defined the JSON serialized object\r\n     */\r\n    public serialize(serializationObject: any) {\r\n        super.serialize(serializationObject);\r\n        const backgroundImage = {};\r\n        const thumbImage = {};\r\n        const valueBarImage = {};\r\n        this.backgroundImage.serialize(backgroundImage);\r\n        this.thumbImage.serialize(thumbImage);\r\n        this.valueBarImage.serialize(valueBarImage);\r\n        serializationObject.backgroundImage = backgroundImage;\r\n        serializationObject.thumbImage = thumbImage;\r\n        serializationObject.valueBarImage = valueBarImage;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _parseFromContent(serializedObject: any, host: AdvancedDynamicTexture) {\r\n        super._parseFromContent(serializedObject, host);\r\n        this.backgroundImage = Image.Parse(serializedObject.backgroundImage, host) as Image;\r\n        this.thumbImage = Image.Parse(serializedObject.thumbImage, host) as Image;\r\n        this.valueBarImage = Image.Parse(serializedObject.valueBarImage, host) as Image;\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.ImageBasedSlider\", ImageBasedSlider);\r\n","import { Control } from \"./control\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Forcing an export so that this code will execute\r\n * @internal\r\n */\r\nconst name = \"Statics\";\r\n\r\nexport { name };\r\n\r\n/**\r\n * Creates a stack panel that can be used to render headers\r\n * @param control defines the control to associate with the header\r\n * @param text defines the text of the header\r\n * @param size defines the size of the header\r\n * @param options defines options used to configure the header\r\n * @param options.isHorizontal\r\n * @param options.controlFirst\r\n * @returns a new StackPanel\r\n */\r\nControl.AddHeader = function (control: Control, text: string, size: string | number, options: { isHorizontal: boolean; controlFirst: boolean }): StackPanel {\r\n    const panel = new StackPanel(\"panel\");\r\n    const isHorizontal = options ? options.isHorizontal : true;\r\n    const controlFirst = options ? options.controlFirst : true;\r\n\r\n    panel.isVertical = !isHorizontal;\r\n\r\n    const header = new TextBlock(\"header\");\r\n    header.text = text;\r\n    header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    if (isHorizontal) {\r\n        header.width = size;\r\n    } else {\r\n        header.height = size;\r\n    }\r\n\r\n    if (controlFirst) {\r\n        panel.addControl(control);\r\n        panel.addControl(header);\r\n        header.paddingLeft = \"5px\";\r\n    } else {\r\n        panel.addControl(header);\r\n        panel.addControl(control);\r\n        header.paddingRight = \"5px\";\r\n    }\r\n\r\n    header.shadowBlur = control.shadowBlur;\r\n    header.shadowColor = control.shadowColor;\r\n    header.shadowOffsetX = control.shadowOffsetX;\r\n    header.shadowOffsetY = control.shadowOffsetY;\r\n\r\n    return panel;\r\n};\r\n","/*\r\n * Base Gradient class. Should not be used directly.\r\n */\r\n\r\nimport type { ICanvasGradient, ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/**\r\n * Type that represents a single stop on the gradient.\r\n */\r\nexport type GradientColorStop = {\r\n    /**\r\n     * Offset from the start where the color will be applied.\r\n     */\r\n    offset: number;\r\n    /**\r\n     * Color to be applied.\r\n     */\r\n    color: string;\r\n};\r\n\r\n/**\r\n * Class that serves as a base for all the gradients created from context.\r\n */\r\nexport abstract class BaseGradient {\r\n    private _colorStops: GradientColorStop[] = [];\r\n\r\n    private _canvasGradient: CanvasGradient;\r\n    private _context: ICanvasRenderingContext;\r\n    private _gradientDirty: boolean = true;\r\n\r\n    /**\r\n     * Overwritten by child classes to create the canvas gradient.\r\n     * @param context\r\n     */\r\n    protected abstract _createCanvasGradient(context: ICanvasRenderingContext): ICanvasGradient;\r\n\r\n    private _addColorStopsToCanvasGradient() {\r\n        for (const stop of this._colorStops) {\r\n            this._canvasGradient.addColorStop(stop.offset, stop.color);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * If there are any changes or the context changed, regenerate the canvas gradient object. Else,\r\n     * reuse the existing gradient.\r\n     **/\r\n    public getCanvasGradient(context: ICanvasRenderingContext) {\r\n        if (this._gradientDirty || this._context !== context) {\r\n            this._context = context;\r\n            this._canvasGradient = this._createCanvasGradient(context);\r\n            this._addColorStopsToCanvasGradient();\r\n            this._gradientDirty = false;\r\n        }\r\n        return this._canvasGradient;\r\n    }\r\n\r\n    /**\r\n     * Adds a new color stop to the gradient.\r\n     * @param offset the offset of the stop on the gradient. Should be between 0 and 1\r\n     * @param color the color of the stop\r\n     */\r\n    public addColorStop(offset: number, color: string) {\r\n        this._colorStops.push({ offset, color });\r\n        this._gradientDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Removes an existing color stop with the specified offset from the gradient\r\n     * @param offset the offset of the stop to be removed\r\n     */\r\n    public removeColorStop(offset: number) {\r\n        this._colorStops = this._colorStops.filter((colorStop) => colorStop.offset !== offset);\r\n        this._gradientDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Removes all color stops from the gradient\r\n     */\r\n    public clearColorStops() {\r\n        this._colorStops = [];\r\n        this._gradientDirty = true;\r\n    }\r\n\r\n    /** Color stops of the gradient */\r\n    public get colorStops() {\r\n        return this._colorStops;\r\n    }\r\n\r\n    /** Type of the gradient */\r\n    public getClassName() {\r\n        return \"BaseGradient\";\r\n    }\r\n\r\n    /** Serialize into a json object */\r\n    public serialize(serializationObject: any) {\r\n        serializationObject.colorStops = this._colorStops;\r\n        serializationObject.className = this.getClassName();\r\n    }\r\n\r\n    /** Parse from json object */\r\n    public parse(serializationObject: any) {\r\n        this._colorStops = serializationObject.colorStops;\r\n    }\r\n}\r\n","import type { ICanvasGradient, ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport { BaseGradient } from \"./BaseGradient\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\n\r\n/**\r\n * Gradient along a line that connects two coordinates.\r\n * These coordinates are relative to the canvas' space, not to any control's space.\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createLinearGradient\r\n */\r\nexport class LinearGradient extends BaseGradient {\r\n    private _x0: number;\r\n    private _y0: number;\r\n    private _x1: number;\r\n    private _y1: number;\r\n\r\n    /**\r\n     * Creates a new linear gradient\r\n     * @param x0\r\n     * @param y0\r\n     * @param x1\r\n     * @param y1\r\n     */\r\n    constructor(x0?: number, y0?: number, x1?: number, y1?: number) {\r\n        super();\r\n        this._x0 = x0 ?? 0;\r\n        this._y0 = y0 ?? 0;\r\n        this._x1 = x1 ?? 0;\r\n        this._y1 = y1 ?? 0;\r\n    }\r\n\r\n    protected _createCanvasGradient(context: ICanvasRenderingContext): ICanvasGradient {\r\n        return context.createLinearGradient(this._x0, this._y0, this._x1, this._y1);\r\n    }\r\n\r\n    /** X axis coordinate of the starting point in the line */\r\n    public get x0() {\r\n        return this._x0;\r\n    }\r\n\r\n    /** X axis coordinate of the ending point in the line */\r\n    public get x1() {\r\n        return this._x1;\r\n    }\r\n\r\n    /** Y axis coordinate of the starting point in the line */\r\n    public get y0() {\r\n        return this._y0;\r\n    }\r\n\r\n    /** Y axis coordinate of the ending point in the line */\r\n    public get y1() {\r\n        return this._y1;\r\n    }\r\n\r\n    /**\r\n     * Class name of the gradient\r\n     * @returns the class name of the gradient\r\n     */\r\n    public getClassName(): string {\r\n        return \"LinearGradient\";\r\n    }\r\n\r\n    /**\r\n     * Serializes this gradient\r\n     * @param serializationObject the object to serialize to\r\n     */\r\n    public serialize(serializationObject: any): void {\r\n        super.serialize(serializationObject);\r\n        serializationObject.x0 = this._x0;\r\n        serializationObject.y0 = this._y0;\r\n        serializationObject.x1 = this._x1;\r\n        serializationObject.y1 = this._y1;\r\n    }\r\n\r\n    /**\r\n     * Parses a gradient from a serialization object\r\n     * @param serializationObject the object to parse from\r\n     */\r\n    public parse(serializationObject: any): void {\r\n        super.parse(serializationObject);\r\n        this._x0 = serializationObject.x0;\r\n        this._y0 = serializationObject.y0;\r\n        this._x1 = serializationObject.x1;\r\n        this._y1 = serializationObject.y1;\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.LinearGradient\", LinearGradient);\r\n","import type { ICanvasGradient, ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport { BaseGradient } from \"./BaseGradient\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\n\r\n/**\r\n * Gradient formed from two circles with their own centers and radius.\r\n * The coordinates of the circles centers are relative to the canvas' space, not to any control's space.\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createRadialGradient\r\n */\r\nexport class RadialGradient extends BaseGradient {\r\n    private _x0: number;\r\n    private _y0: number;\r\n    private _r0: number;\r\n    private _x1: number;\r\n    private _y1: number;\r\n    private _r1: number;\r\n\r\n    /**\r\n     * Creates a new radial gradient\r\n     * @param x0 x coordinate of the first circle's center\r\n     * @param y0 y coordinate of the first circle's center\r\n     * @param r0 radius of the first circle\r\n     * @param x1 x coordinate of the second circle's center\r\n     * @param y1 y coordinate of the second circle's center\r\n     * @param r1 radius of the second circle\r\n     */\r\n    constructor(x0?: number, y0?: number, r0?: number, x1?: number, y1?: number, r1?: number) {\r\n        super();\r\n        this._x0 = x0 ?? 0;\r\n        this._y0 = y0 ?? 0;\r\n        this._r0 = r0 ?? 0;\r\n        this._x1 = x1 ?? 0;\r\n        this._y1 = y1 ?? 0;\r\n        this._r1 = r1 ?? 0;\r\n    }\r\n\r\n    protected _createCanvasGradient(context: ICanvasRenderingContext): ICanvasGradient {\r\n        return context.createRadialGradient(this._x0, this._y0, this._r0, this._x1, this._y1, this._r1);\r\n    }\r\n\r\n    /** x coordinate of the first circle's center */\r\n    public get x0() {\r\n        return this._x0;\r\n    }\r\n\r\n    /** x coordinate of the second circle's center */\r\n    public get x1() {\r\n        return this._x1;\r\n    }\r\n\r\n    /** y coordinate of the first circle's center */\r\n    public get y0() {\r\n        return this._y0;\r\n    }\r\n\r\n    /** y coordinate of the second circle's center */\r\n    public get y1() {\r\n        return this._y1;\r\n    }\r\n\r\n    /** radius of the first circle */\r\n    public get r0() {\r\n        return this._r0;\r\n    }\r\n\r\n    /** radius of the second circle */\r\n    public get r1() {\r\n        return this._r1;\r\n    }\r\n\r\n    /**\r\n     * Class name of the gradient\r\n     * @returns the class name of the gradient\r\n     */\r\n    public getClassName() {\r\n        return \"RadialGradient\";\r\n    }\r\n\r\n    /**\r\n     * Serializes this gradient\r\n     * @param serializationObject the object to serialize to\r\n     */\r\n    public serialize(serializationObject: any): void {\r\n        super.serialize(serializationObject);\r\n        serializationObject.x0 = this._x0;\r\n        serializationObject.y0 = this._y0;\r\n        serializationObject.r0 = this._r0;\r\n        serializationObject.x1 = this._x1;\r\n        serializationObject.y1 = this._y1;\r\n        serializationObject.r1 = this._r1;\r\n    }\r\n\r\n    /**\r\n     * Parses a gradient from a serialization object\r\n     * @param serializationObject the object to parse from\r\n     */\r\n    public parse(serializationObject: any): void {\r\n        super.parse(serializationObject);\r\n        this._x0 = serializationObject.x0;\r\n        this._y0 = serializationObject.y0;\r\n        this._r0 = serializationObject.r0;\r\n        this._x1 = serializationObject.x1;\r\n        this._y1 = serializationObject.y1;\r\n        this._r1 = serializationObject.r1;\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.RadialGradient\", RadialGradient);\r\n","import { Observable } from \"core/Misc/observable\";\r\nimport type { IDisposable } from \"core/scene\";\r\nimport type { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\n\r\n/**\r\n * Define a style used by control to automatically setup properties based on a template.\r\n * Only support font related properties so far\r\n */\r\nexport class Style implements IDisposable {\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    /** @internal */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** @internal */\r\n    public _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n\r\n    /**\r\n     * Observable raised when the style values are changed\r\n     */\r\n    public onChangedObservable = new Observable<Style>();\r\n\r\n    /**\r\n     * Creates a new style object\r\n     * @param host defines the AdvancedDynamicTexture which hosts this style\r\n     */\r\n    public constructor(host: AdvancedDynamicTexture) {\r\n        this._host = host;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font size\r\n     */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this.onChangedObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font family\r\n     */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font style\r\n     */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Dispose all associated resources */\r\n    public dispose() {\r\n        this.onChangedObservable.clear();\r\n    }\r\n}\r\n","import type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport { Vector2, Vector3, TmpVectors } from \"core/Maths/math.vector\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport type { PointerInfoPre, PointerInfo, PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { PointerEventTypes } from \"core/Events/pointerEvents\";\r\nimport { ClipboardEventTypes, ClipboardInfo } from \"core/Events/clipboardEvents\";\r\nimport type { KeyboardInfoPre } from \"core/Events/keyboardEvents\";\r\nimport { KeyboardEventTypes } from \"core/Events/keyboardEvents\";\r\nimport type { Camera } from \"core/Cameras/camera\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport { DynamicTexture } from \"core/Materials/Textures/dynamicTexture\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { Layer } from \"core/Layers/layer\";\r\nimport type { Engine } from \"core/Engines/engine\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\nimport { Container } from \"./controls/container\";\r\nimport { Control } from \"./controls/control\";\r\nimport type { IFocusableControl } from \"./controls/focusableControl\";\r\nimport { Style } from \"./style\";\r\nimport { Measure } from \"./measure\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport { Viewport } from \"core/Maths/math.viewport\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { WebRequest } from \"core/Misc/webRequest\";\r\nimport type { IPointerEvent, IWheelEvent } from \"core/Events/deviceInputEvents\";\r\nimport { RandomGUID } from \"core/Misc/guid\";\r\nimport { GetClass } from \"core/Misc/typeStore\";\r\nimport { DecodeBase64ToBinary } from \"core/Misc/stringTools\";\r\n\r\nimport type { StandardMaterial } from \"core/Materials/standardMaterial\";\r\n\r\n/**\r\n * Class used to create texture to support 2D GUI elements\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui\r\n */\r\nexport class AdvancedDynamicTexture extends DynamicTexture {\r\n    /** Define the Uurl to load snippets */\r\n    public static SnippetUrl = Constants.SnippetUrl;\r\n\r\n    /** Indicates if some optimizations can be performed in GUI GPU management (the downside is additional memory/GPU texture memory used) */\r\n    public static AllowGPUOptimizations = true;\r\n\r\n    /** Snippet ID if the content was created from the snippet server */\r\n    public snippetId: string;\r\n\r\n    /** Observable that fires when the GUI is ready */\r\n    public onGuiReadyObservable = new Observable<AdvancedDynamicTexture>();\r\n\r\n    private _isDirty = false;\r\n    private _renderObserver: Nullable<Observer<Camera>>;\r\n    private _resizeObserver: Nullable<Observer<Engine>>;\r\n    private _preKeyboardObserver: Nullable<Observer<KeyboardInfoPre>>;\r\n    private _prePointerObserver: Nullable<Observer<PointerInfoPre>>;\r\n    private _sceneRenderObserver: Nullable<Observer<Scene>>;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _canvasPointerOutObserver: Nullable<Observer<PointerEvent>>;\r\n    private _canvasBlurObserver: Nullable<Observer<Engine>>;\r\n    private _controlAddedObserver: Nullable<Observer<Nullable<Control>>>;\r\n    private _controlRemovedObserver: Nullable<Observer<Nullable<Control>>>;\r\n    private _background: string;\r\n    /** @internal */\r\n    public _rootContainer = new Container(\"root\");\r\n    /** @internal */\r\n    public _lastPickedControl: Control;\r\n    /** @internal */\r\n    public _lastControlOver: { [pointerId: number]: Control } = {};\r\n    /** @internal */\r\n    public _lastControlDown: { [pointerId: number]: Control } = {};\r\n    /** @internal */\r\n    public _capturingControl: { [pointerId: number]: Control } = {};\r\n    /** @internal */\r\n    public _shouldBlockPointer: boolean;\r\n    /** @internal */\r\n    public _layerToDispose: Nullable<Layer>;\r\n    /** @internal */\r\n    public _linkedControls = new Array<Control>();\r\n    private _isFullscreen = false;\r\n    private _fullscreenViewport = new Viewport(0, 0, 1, 1);\r\n    private _idealWidth = 0;\r\n    private _idealHeight = 0;\r\n    private _useSmallestIdeal: boolean = false;\r\n    private _renderAtIdealSize = false;\r\n    private _focusedControl: Nullable<IFocusableControl>;\r\n    private _blockNextFocusCheck = false;\r\n    private _renderScale = 1;\r\n    private _rootElement: Nullable<HTMLElement>;\r\n    private _cursorChanged = false;\r\n    private _defaultMousePointerId = 0;\r\n    private _rootChildrenHaveChanged: boolean = false;\r\n\r\n    /** @internal */\r\n    public _capturedPointerIds = new Set<number>();\r\n\r\n    /** @internal */\r\n    public _numLayoutCalls = 0;\r\n    /** Gets the number of layout calls made the last time the ADT has been rendered */\r\n    public get numLayoutCalls(): number {\r\n        return this._numLayoutCalls;\r\n    }\r\n\r\n    /** @internal */\r\n    public _numRenderCalls = 0;\r\n    /** Gets the number of render calls made the last time the ADT has been rendered */\r\n    public get numRenderCalls(): number {\r\n        return this._numRenderCalls;\r\n    }\r\n\r\n    /**\r\n     * Define type to string to ensure compatibility across browsers\r\n     * Safari doesn't support DataTransfer constructor\r\n     */\r\n    private _clipboardData: string = \"\";\r\n    /**\r\n     * Observable event triggered each time an clipboard event is received from the rendering canvas\r\n     */\r\n    public onClipboardObservable = new Observable<ClipboardInfo>();\r\n    /**\r\n     * Observable event triggered each time a pointer down is intercepted by a control\r\n     */\r\n    public onControlPickedObservable = new Observable<Control>();\r\n    /**\r\n     * Observable event triggered before layout is evaluated\r\n     */\r\n    public onBeginLayoutObservable = new Observable<AdvancedDynamicTexture>();\r\n    /**\r\n     * Observable event triggered after the layout was evaluated\r\n     */\r\n    public onEndLayoutObservable = new Observable<AdvancedDynamicTexture>();\r\n    /**\r\n     * Observable event triggered before the texture is rendered\r\n     */\r\n    public onBeginRenderObservable = new Observable<AdvancedDynamicTexture>();\r\n    /**\r\n     * Observable event triggered after the texture was rendered\r\n     */\r\n    public onEndRenderObservable = new Observable<AdvancedDynamicTexture>();\r\n    /**\r\n     * Gets or sets a boolean defining if alpha is stored as premultiplied\r\n     */\r\n    public premulAlpha = false;\r\n    /**\r\n     * Gets or sets a boolean indicating that the canvas must be reverted on Y when updating the texture\r\n     */\r\n    public applyYInversionOnUpdate = true;\r\n    /**\r\n     * Gets or sets a number used to scale rendering size (2 means that the texture will be twice bigger).\r\n     * Useful when you want more antialiasing\r\n     */\r\n    public get renderScale(): number {\r\n        return this._renderScale;\r\n    }\r\n    public set renderScale(value: number) {\r\n        if (value === this._renderScale) {\r\n            return;\r\n        }\r\n        this._renderScale = value;\r\n        this._onResize();\r\n    }\r\n    /** Gets or sets the background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n        this._background = value;\r\n        this.markAsDirty();\r\n    }\r\n    /**\r\n     * Gets or sets the ideal width used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling\r\n     */\r\n    public get idealWidth(): number {\r\n        return this._idealWidth;\r\n    }\r\n    public set idealWidth(value: number) {\r\n        if (this._idealWidth === value) {\r\n            return;\r\n        }\r\n        this._idealWidth = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n    /**\r\n     * Gets or sets the ideal height used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling\r\n     */\r\n    public get idealHeight(): number {\r\n        return this._idealHeight;\r\n    }\r\n    public set idealHeight(value: number) {\r\n        if (this._idealHeight === value) {\r\n            return;\r\n        }\r\n        this._idealHeight = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n    /**\r\n     * Gets or sets a boolean indicating if the smallest ideal value must be used if idealWidth and idealHeight are both set\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling\r\n     */\r\n    public get useSmallestIdeal(): boolean {\r\n        return this._useSmallestIdeal;\r\n    }\r\n    public set useSmallestIdeal(value: boolean) {\r\n        if (this._useSmallestIdeal === value) {\r\n            return;\r\n        }\r\n        this._useSmallestIdeal = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n    /**\r\n     * Gets or sets a boolean indicating if adaptive scaling must be used\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling\r\n     */\r\n    public get renderAtIdealSize(): boolean {\r\n        return this._renderAtIdealSize;\r\n    }\r\n    public set renderAtIdealSize(value: boolean) {\r\n        if (this._renderAtIdealSize === value) {\r\n            return;\r\n        }\r\n        this._renderAtIdealSize = value;\r\n        this._onResize();\r\n    }\r\n\r\n    /**\r\n     * Gets the ratio used when in \"ideal mode\"\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling\r\n     * */\r\n    public get idealRatio(): number {\r\n        let rwidth: number = 0;\r\n        let rheight: number = 0;\r\n\r\n        if (this._idealWidth) {\r\n            rwidth = this.getSize().width / this._idealWidth;\r\n        }\r\n\r\n        if (this._idealHeight) {\r\n            rheight = this.getSize().height / this._idealHeight;\r\n        }\r\n\r\n        if (this._useSmallestIdeal && this._idealWidth && this._idealHeight) {\r\n            return window.innerWidth < window.innerHeight ? rwidth : rheight;\r\n        }\r\n\r\n        if (this._idealWidth) {\r\n            // horizontal\r\n            return rwidth;\r\n        }\r\n\r\n        if (this._idealHeight) {\r\n            // vertical\r\n            return rheight;\r\n        }\r\n\r\n        return 1;\r\n    }\r\n\r\n    /**\r\n     * Gets the underlying layer used to render the texture when in fullscreen mode\r\n     */\r\n    public get layer(): Nullable<Layer> {\r\n        return this._layerToDispose;\r\n    }\r\n    /**\r\n     * Gets the root container control\r\n     */\r\n    public get rootContainer(): Container {\r\n        return this._rootContainer;\r\n    }\r\n    /**\r\n     * Returns an array containing the root container.\r\n     * This is mostly used to let the Inspector introspects the ADT\r\n     * @returns an array containing the rootContainer\r\n     */\r\n    public getChildren(): Array<Container> {\r\n        return [this._rootContainer];\r\n    }\r\n    /**\r\n     * Will return all controls that are inside this texture\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @returns all child controls\r\n     */\r\n    public getDescendants(directDescendantsOnly?: boolean, predicate?: (control: Control) => boolean): Control[] {\r\n        return this._rootContainer.getDescendants(directDescendantsOnly, predicate);\r\n    }\r\n\r\n    /**\r\n     * Will return all controls with the given type name\r\n     * @param typeName defines the type name to search for\r\n     * @returns an array of all controls found\r\n     */\r\n    public getControlsByType(typeName: string): Control[] {\r\n        return this._rootContainer.getDescendants(false, (control) => control.typeName === typeName);\r\n    }\r\n\r\n    /**\r\n     * Will return the first control with the given name\r\n     * @param name defines the name to search for\r\n     * @returns the first control found or null\r\n     */\r\n    public getControlByName(name: string): Nullable<Control> {\r\n        return this._getControlByKey(\"name\", name);\r\n    }\r\n\r\n    private _getControlByKey(key: string, value: any): Nullable<Control> {\r\n        return this._rootContainer.getDescendants().find((control) => control[key as keyof Control] === value) || null;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the current focused control\r\n     */\r\n    public get focusedControl(): Nullable<IFocusableControl> {\r\n        return this._focusedControl;\r\n    }\r\n    public set focusedControl(control: Nullable<IFocusableControl>) {\r\n        if (this._focusedControl == control) {\r\n            return;\r\n        }\r\n        if (this._focusedControl) {\r\n            this._focusedControl.onBlur();\r\n        }\r\n        if (control) {\r\n            control.onFocus();\r\n        }\r\n        this._focusedControl = control;\r\n    }\r\n    /**\r\n     * Gets or sets a boolean indicating if the texture must be rendered in background or foreground when in fullscreen mode\r\n     */\r\n    public get isForeground(): boolean {\r\n        if (!this.layer) {\r\n            return true;\r\n        }\r\n        return !this.layer.isBackground;\r\n    }\r\n    public set isForeground(value: boolean) {\r\n        if (!this.layer) {\r\n            return;\r\n        }\r\n        if (this.layer.isBackground === !value) {\r\n            return;\r\n        }\r\n        this.layer.isBackground = !value;\r\n    }\r\n    /**\r\n     * Gets or set information about clipboardData\r\n     */\r\n    public get clipboardData(): string {\r\n        return this._clipboardData;\r\n    }\r\n    public set clipboardData(value: string) {\r\n        this._clipboardData = value;\r\n    }\r\n\r\n    /**\r\n     * If set to true, every scene render will trigger a pointer event for the GUI\r\n     * if it is linked to a mesh or has controls linked to a mesh. This will allow\r\n     * you to catch the pointer moving around the GUI due to camera or mesh movements,\r\n     * but it has a performance cost.\r\n     */\r\n    public checkPointerEveryFrame = false;\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture\r\n     * @param name defines the name of the texture\r\n     * @param width defines the width of the texture\r\n     * @param height defines the height of the texture\r\n     * @param scene defines the hosting scene\r\n     * @param generateMipMaps defines a boolean indicating if mipmaps must be generated (false by default)\r\n     * @param samplingMode defines the texture sampling mode (Texture.NEAREST_SAMPLINGMODE by default)\r\n     * @param invertY defines if the texture needs to be inverted on the y axis during loading (true by default)\r\n     */\r\n    constructor(name: string, width = 0, height = 0, scene?: Nullable<Scene>, generateMipMaps = false, samplingMode = Texture.NEAREST_SAMPLINGMODE, invertY = true) {\r\n        super(name, { width: width, height: height }, scene, generateMipMaps, samplingMode, Constants.TEXTUREFORMAT_RGBA, invertY);\r\n        scene = this.getScene();\r\n        if (!scene || !this._texture) {\r\n            return;\r\n        }\r\n        this.applyYInversionOnUpdate = invertY;\r\n        this._rootElement = scene.getEngine().getInputElement();\r\n        this._renderObserver = scene.onBeforeCameraRenderObservable.add((camera: Camera) => this._checkUpdate(camera));\r\n\r\n        /** Whenever a control is added or removed to the root, we have to recheck the camera projection as it can have changed  */\r\n        this._controlAddedObserver = this._rootContainer.onControlAddedObservable.add((control) => {\r\n            if (control) {\r\n                this._rootChildrenHaveChanged = true;\r\n            }\r\n        });\r\n        this._controlRemovedObserver = this._rootContainer.onControlRemovedObservable.add((control) => {\r\n            if (control) {\r\n                this._rootChildrenHaveChanged = true;\r\n            }\r\n        });\r\n        this._preKeyboardObserver = scene.onPreKeyboardObservable.add((info) => {\r\n            if (!this._focusedControl) {\r\n                return;\r\n            }\r\n            if (info.type === KeyboardEventTypes.KEYDOWN) {\r\n                this._focusedControl.processKeyboard(info.event);\r\n            }\r\n            info.skipOnPointerObservable = true;\r\n        });\r\n        this._rootContainer._link(this);\r\n        this.hasAlpha = true;\r\n        if (!width || !height) {\r\n            this._resizeObserver = scene.getEngine().onResizeObservable.add(() => this._onResize());\r\n            this._onResize();\r\n        }\r\n        this._texture.isReady = true;\r\n    }\r\n    /**\r\n     * Get the current class name of the texture useful for serialization or dynamic coding.\r\n     * @returns \"AdvancedDynamicTexture\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"AdvancedDynamicTexture\";\r\n    }\r\n    /**\r\n     * Function used to execute a function on all controls\r\n     * @param func defines the function to execute\r\n     * @param container defines the container where controls belong. If null the root container will be used\r\n     */\r\n    public executeOnAllControls(func: (control: Control) => void, container?: Container) {\r\n        if (!container) {\r\n            container = this._rootContainer;\r\n        }\r\n        func(container);\r\n        for (const child of container.children) {\r\n            if ((<any>child).children) {\r\n                this.executeOnAllControls(func, <Container>child);\r\n                continue;\r\n            }\r\n            func(child);\r\n        }\r\n    }\r\n\r\n    private _useInvalidateRectOptimization = true;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the InvalidateRect optimization should be turned on\r\n     */\r\n    public get useInvalidateRectOptimization(): boolean {\r\n        return this._useInvalidateRectOptimization;\r\n    }\r\n\r\n    public set useInvalidateRectOptimization(value: boolean) {\r\n        this._useInvalidateRectOptimization = value;\r\n    }\r\n\r\n    // Invalidated rectangle which is the combination of all invalidated controls after they have been rotated into absolute position\r\n    private _invalidatedRectangle: Nullable<Measure> = null;\r\n    /**\r\n     * Invalidates a rectangle area on the gui texture\r\n     * @param invalidMinX left most position of the rectangle to invalidate in the texture\r\n     * @param invalidMinY top most position of the rectangle to invalidate in the texture\r\n     * @param invalidMaxX right most position of the rectangle to invalidate in the texture\r\n     * @param invalidMaxY bottom most position of the rectangle to invalidate in the texture\r\n     */\r\n    public invalidateRect(invalidMinX: number, invalidMinY: number, invalidMaxX: number, invalidMaxY: number) {\r\n        if (!this._useInvalidateRectOptimization) {\r\n            return;\r\n        }\r\n        if (!this._invalidatedRectangle) {\r\n            this._invalidatedRectangle = new Measure(invalidMinX, invalidMinY, invalidMaxX - invalidMinX + 1, invalidMaxY - invalidMinY + 1);\r\n        } else {\r\n            // Compute intersection\r\n            const maxX = Math.ceil(Math.max(this._invalidatedRectangle.left + this._invalidatedRectangle.width - 1, invalidMaxX));\r\n            const maxY = Math.ceil(Math.max(this._invalidatedRectangle.top + this._invalidatedRectangle.height - 1, invalidMaxY));\r\n            this._invalidatedRectangle.left = Math.floor(Math.min(this._invalidatedRectangle.left, invalidMinX));\r\n            this._invalidatedRectangle.top = Math.floor(Math.min(this._invalidatedRectangle.top, invalidMinY));\r\n            this._invalidatedRectangle.width = maxX - this._invalidatedRectangle.left + 1;\r\n            this._invalidatedRectangle.height = maxY - this._invalidatedRectangle.top + 1;\r\n        }\r\n    }\r\n    /**\r\n     * Marks the texture as dirty forcing a complete update\r\n     */\r\n    public markAsDirty() {\r\n        this._isDirty = true;\r\n    }\r\n    /**\r\n     * Helper function used to create a new style\r\n     * @returns a new style\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#styles\r\n     */\r\n    public createStyle(): Style {\r\n        return new Style(this);\r\n    }\r\n    /**\r\n     * Adds a new control to the root container\r\n     * @param control defines the control to add\r\n     * @returns the current texture\r\n     */\r\n    public addControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.addControl(control);\r\n        return this;\r\n    }\r\n    /**\r\n     * Removes a control from the root container\r\n     * @param control defines the control to remove\r\n     * @returns the current texture\r\n     */\r\n    public removeControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n    /**\r\n     * Moves overlapped controls towards a position where it is not overlapping anymore.\r\n     * Please note that this method alters linkOffsetXInPixels and linkOffsetYInPixels.\r\n     * @param overlapGroup the overlap group which will be processed or undefined to process all overlap groups\r\n     * @param deltaStep the step size (speed) to reach the target non overlapping position (default 0.1)\r\n     * @param repelFactor how much is the control repelled by other controls\r\n     */\r\n    public moveToNonOverlappedPosition(overlapGroup?: number | Control[], deltaStep = 1, repelFactor = 1) {\r\n        let controlsForGroup: Control[];\r\n        if (Array.isArray(overlapGroup)) {\r\n            controlsForGroup = overlapGroup;\r\n        } else {\r\n            const descendants = this.getDescendants(true);\r\n            // get only the controls with an overlapGroup property set\r\n            // if the overlapGroup parameter is set, filter the controls and get only the controls belonging to that overlapGroup\r\n            controlsForGroup = overlapGroup === undefined ? descendants.filter((c) => c.overlapGroup !== undefined) : descendants.filter((c) => c.overlapGroup === overlapGroup);\r\n        }\r\n\r\n        controlsForGroup.forEach((control1) => {\r\n            let velocity = Vector2.Zero();\r\n            const center = new Vector2(control1.centerX, control1.centerY);\r\n\r\n            controlsForGroup.forEach((control2) => {\r\n                if (control1 !== control2 && AdvancedDynamicTexture._Overlaps(control1, control2)) {\r\n                    // if the two controls overlaps get a direction vector from one control's center to another control's center\r\n                    const diff = center.subtract(new Vector2(control2.centerX, control2.centerY));\r\n                    const diffLength = diff.length();\r\n\r\n                    if (diffLength > 0) {\r\n                        // calculate the velocity\r\n                        velocity = velocity.add(diff.normalize().scale(repelFactor / diffLength));\r\n                    }\r\n                }\r\n            });\r\n\r\n            if (velocity.length() > 0) {\r\n                // move the control along the direction vector away from the overlapping control\r\n                velocity = velocity.normalize().scale(deltaStep * (control1.overlapDeltaMultiplier ?? 1));\r\n                control1.linkOffsetXInPixels += velocity.x;\r\n                control1.linkOffsetYInPixels += velocity.y;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        const scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        this._rootElement = null;\r\n        scene.onBeforeCameraRenderObservable.remove(this._renderObserver);\r\n        if (this._resizeObserver) {\r\n            scene.getEngine().onResizeObservable.remove(this._resizeObserver);\r\n        }\r\n        if (this._prePointerObserver) {\r\n            scene.onPrePointerObservable.remove(this._prePointerObserver);\r\n        }\r\n        if (this._sceneRenderObserver) {\r\n            scene.onBeforeRenderObservable.remove(this._sceneRenderObserver);\r\n        }\r\n        if (this._pointerObserver) {\r\n            scene.onPointerObservable.remove(this._pointerObserver);\r\n        }\r\n        if (this._preKeyboardObserver) {\r\n            scene.onPreKeyboardObservable.remove(this._preKeyboardObserver);\r\n        }\r\n        if (this._canvasPointerOutObserver) {\r\n            scene.getEngine().onCanvasPointerOutObservable.remove(this._canvasPointerOutObserver);\r\n        }\r\n        if (this._canvasBlurObserver) {\r\n            scene.getEngine().onCanvasBlurObservable.remove(this._canvasBlurObserver);\r\n        }\r\n        if (this._controlAddedObserver) {\r\n            this._rootContainer.onControlAddedObservable.remove(this._controlAddedObserver);\r\n        }\r\n        if (this._controlRemovedObserver) {\r\n            this._rootContainer.onControlRemovedObservable.remove(this._controlRemovedObserver);\r\n        }\r\n        if (this._layerToDispose) {\r\n            this._layerToDispose.texture = null;\r\n            this._layerToDispose.dispose();\r\n            this._layerToDispose = null;\r\n        }\r\n        this._rootContainer.dispose();\r\n        this.onClipboardObservable.clear();\r\n        this.onControlPickedObservable.clear();\r\n        this.onBeginRenderObservable.clear();\r\n        this.onEndRenderObservable.clear();\r\n        this.onBeginLayoutObservable.clear();\r\n        this.onEndLayoutObservable.clear();\r\n        this.onGuiReadyObservable.clear();\r\n        super.dispose();\r\n    }\r\n    private _onResize(): void {\r\n        const scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        // Check size\r\n        const engine = scene.getEngine();\r\n        const textureSize = this.getSize();\r\n        let renderWidth = engine.getRenderWidth() * this._renderScale;\r\n        let renderHeight = engine.getRenderHeight() * this._renderScale;\r\n\r\n        if (this._renderAtIdealSize) {\r\n            if (this._idealWidth) {\r\n                renderHeight = (renderHeight * this._idealWidth) / renderWidth;\r\n                renderWidth = this._idealWidth;\r\n            } else if (this._idealHeight) {\r\n                renderWidth = (renderWidth * this._idealHeight) / renderHeight;\r\n                renderHeight = this._idealHeight;\r\n            }\r\n        }\r\n        if (textureSize.width !== renderWidth || textureSize.height !== renderHeight) {\r\n            this.scaleTo(renderWidth, renderHeight);\r\n            this.markAsDirty();\r\n            if (this._idealWidth || this._idealHeight) {\r\n                this._rootContainer._markAllAsDirty();\r\n            }\r\n        }\r\n        this.invalidateRect(0, 0, textureSize.width - 1, textureSize.height - 1);\r\n    }\r\n    /** @internal */\r\n    public _getGlobalViewport(): Viewport {\r\n        const size = this.getSize();\r\n        const globalViewPort = this._fullscreenViewport.toGlobal(size.width, size.height);\r\n\r\n        const targetX = Math.round(globalViewPort.width * (1 / this.rootContainer.scaleX));\r\n        const targetY = Math.round(globalViewPort.height * (1 / this.rootContainer.scaleY));\r\n\r\n        globalViewPort.x += (globalViewPort.width - targetX) / 2;\r\n        globalViewPort.y += (globalViewPort.height - targetY) / 2;\r\n\r\n        globalViewPort.width = targetX;\r\n        globalViewPort.height = targetY;\r\n\r\n        return globalViewPort;\r\n    }\r\n    /**\r\n     * Get screen coordinates for a vector3\r\n     * @param position defines the position to project\r\n     * @param worldMatrix defines the world matrix to use\r\n     * @returns the projected position\r\n     */\r\n    public getProjectedPosition(position: Vector3, worldMatrix: Matrix): Vector2 {\r\n        const result = this.getProjectedPositionWithZ(position, worldMatrix);\r\n        return new Vector2(result.x, result.y);\r\n    }\r\n\r\n    /**\r\n     * Get screen coordinates for a vector3\r\n     * @param position defines the position to project\r\n     * @param worldMatrix defines the world matrix to use\r\n     * @returns the projected position with Z\r\n     */\r\n    public getProjectedPositionWithZ(position: Vector3, worldMatrix: Matrix): Vector3 {\r\n        const scene = this.getScene();\r\n        if (!scene) {\r\n            return Vector3.Zero();\r\n        }\r\n        const globalViewport = this._getGlobalViewport();\r\n        const projectedPosition = Vector3.Project(position, worldMatrix, scene.getTransformMatrix(), globalViewport);\r\n        return new Vector3(projectedPosition.x, projectedPosition.y, projectedPosition.z);\r\n    }\r\n\r\n    private _checkUpdate(camera: Camera, skipUpdate?: boolean): void {\r\n        if (this._layerToDispose) {\r\n            if ((camera.layerMask & this._layerToDispose.layerMask) === 0) {\r\n                return;\r\n            }\r\n        }\r\n        if (this._isFullscreen && this._linkedControls.length) {\r\n            const scene = this.getScene();\r\n            if (!scene) {\r\n                return;\r\n            }\r\n            const globalViewport = this._getGlobalViewport();\r\n            for (const control of this._linkedControls) {\r\n                if (!control.isVisible) {\r\n                    continue;\r\n                }\r\n                const mesh = control._linkedMesh as AbstractMesh;\r\n                if (!mesh || mesh.isDisposed()) {\r\n                    Tools.SetImmediate(() => {\r\n                        control.linkWithMesh(null);\r\n                    });\r\n                    continue;\r\n                }\r\n                const position = mesh.getBoundingInfo ? mesh.getBoundingInfo().boundingSphere.center : (Vector3.ZeroReadOnly as Vector3);\r\n                const projectedPosition = Vector3.Project(position, mesh.getWorldMatrix(), scene.getTransformMatrix(), globalViewport);\r\n                if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n                    control.notRenderable = true;\r\n                    continue;\r\n                }\r\n                control.notRenderable = false;\r\n                if (this.useInvalidateRectOptimization) {\r\n                    control.invalidateRect();\r\n                }\r\n\r\n                control._moveToProjectedPosition(projectedPosition);\r\n            }\r\n        }\r\n        if (!this._isDirty && !this._rootContainer.isDirty) {\r\n            return;\r\n        }\r\n        this._isDirty = false;\r\n        this._render(skipUpdate);\r\n        if (!skipUpdate) {\r\n            this.update(this.applyYInversionOnUpdate, this.premulAlpha, AdvancedDynamicTexture.AllowGPUOptimizations);\r\n        }\r\n    }\r\n\r\n    private _clearMeasure = new Measure(0, 0, 0, 0);\r\n\r\n    private _render(skipRender?: boolean): void {\r\n        const textureSize = this.getSize();\r\n        const renderWidth = textureSize.width;\r\n        const renderHeight = textureSize.height;\r\n\r\n        const context = this.getContext();\r\n        context.font = \"18px Arial\";\r\n        context.strokeStyle = \"white\";\r\n\r\n        if (this.onGuiReadyObservable.hasObservers()) {\r\n            this._checkGuiIsReady();\r\n        }\r\n\r\n        /** We have to recheck the camera projection in the case the root control's children have changed  */\r\n        if (this._rootChildrenHaveChanged) {\r\n            const camera = this.getScene()?.activeCamera;\r\n            if (camera) {\r\n                this._rootChildrenHaveChanged = false;\r\n                this._checkUpdate(camera, true);\r\n            }\r\n        }\r\n\r\n        // Layout\r\n        this.onBeginLayoutObservable.notifyObservers(this);\r\n        const measure = new Measure(0, 0, renderWidth, renderHeight);\r\n        this._numLayoutCalls = 0;\r\n        this._rootContainer._layout(measure, context);\r\n        this.onEndLayoutObservable.notifyObservers(this);\r\n        this._isDirty = false; // Restoring the dirty state that could have been set by controls during layout processing\r\n\r\n        if (skipRender) {\r\n            return;\r\n        }\r\n\r\n        // Clear\r\n        if (this._invalidatedRectangle) {\r\n            this._clearMeasure.copyFrom(this._invalidatedRectangle);\r\n        } else {\r\n            this._clearMeasure.copyFromFloats(0, 0, renderWidth, renderHeight);\r\n        }\r\n        context.clearRect(this._clearMeasure.left, this._clearMeasure.top, this._clearMeasure.width, this._clearMeasure.height);\r\n        if (this._background) {\r\n            context.save();\r\n            context.fillStyle = this._background;\r\n            context.fillRect(this._clearMeasure.left, this._clearMeasure.top, this._clearMeasure.width, this._clearMeasure.height);\r\n            context.restore();\r\n        }\r\n\r\n        // Render\r\n        this.onBeginRenderObservable.notifyObservers(this);\r\n        this._numRenderCalls = 0;\r\n        this._rootContainer._render(context, this._invalidatedRectangle);\r\n        this.onEndRenderObservable.notifyObservers(this);\r\n        this._invalidatedRectangle = null;\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    public _changeCursor(cursor: string) {\r\n        if (this._rootElement) {\r\n            this._rootElement.style.cursor = cursor;\r\n            this._cursorChanged = true;\r\n        }\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    public _registerLastControlDown(control: Control, pointerId: number) {\r\n        this._lastControlDown[pointerId] = control;\r\n        this.onControlPickedObservable.notifyObservers(control);\r\n    }\r\n    private _doPicking(x: number, y: number, pi: Nullable<PointerInfoBase>, type: number, pointerId: number, buttonIndex: number, deltaX?: number, deltaY?: number): void {\r\n        const scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        const engine = scene.getEngine();\r\n        const textureSize = this.getSize();\r\n        if (this._isFullscreen) {\r\n            const camera = scene.cameraToUseForPointers || scene.activeCamera;\r\n            if (!camera) {\r\n                return;\r\n            }\r\n            const viewport = camera.viewport;\r\n            x = x * (textureSize.width / (engine.getRenderWidth() * viewport.width));\r\n            y = y * (textureSize.height / (engine.getRenderHeight() * viewport.height));\r\n        }\r\n        if (this._capturingControl[pointerId]) {\r\n            if (this._capturingControl[pointerId].isPointerBlocker) {\r\n                this._shouldBlockPointer = true;\r\n            }\r\n            this._capturingControl[pointerId]._processObservables(type, x, y, pi, pointerId, buttonIndex);\r\n            return;\r\n        }\r\n\r\n        this._cursorChanged = false;\r\n        if (!this._rootContainer._processPicking(x, y, pi, type, pointerId, buttonIndex, deltaX, deltaY)) {\r\n            if (!scene.doNotHandleCursors) {\r\n                this._changeCursor(\"\");\r\n            }\r\n            if (type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId], pi);\r\n                    delete this._lastControlOver[pointerId];\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!this._cursorChanged && !scene.doNotHandleCursors) {\r\n            this._changeCursor(\"\");\r\n        }\r\n        this._manageFocus();\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    public _cleanControlAfterRemovalFromList(list: { [pointerId: number]: Control }, control: Control) {\r\n        for (const pointerId in list) {\r\n            if (!Object.prototype.hasOwnProperty.call(list, pointerId)) {\r\n                continue;\r\n            }\r\n            const lastControlOver = list[pointerId];\r\n            if (lastControlOver === control) {\r\n                delete list[pointerId];\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    public _cleanControlAfterRemoval(control: Control) {\r\n        this._cleanControlAfterRemovalFromList(this._lastControlDown, control);\r\n        this._cleanControlAfterRemovalFromList(this._lastControlOver, control);\r\n    }\r\n\r\n    /**\r\n     * This function will run a pointer event on this ADT and will trigger any pointer events on any controls\r\n     * This will work on a fullscreen ADT only. For mesh based ADT, simulate pointer events using the scene directly.\r\n     * @param x pointer X on the canvas for the picking\r\n     * @param y pointer Y on the canvas for the picking\r\n     * @param pi optional pointer information\r\n     */\r\n    public pick(x: number, y: number, pi: Nullable<PointerInfoPre> = null) {\r\n        if (this._isFullscreen && this._scene) {\r\n            this._translateToPicking(this._scene, new Viewport(0, 0, 0, 0), pi, x, y);\r\n        }\r\n    }\r\n\r\n    private _translateToPicking(scene: Scene, tempViewport: Viewport, pi: Nullable<PointerInfoPre>, x: number = scene.pointerX, y: number = scene.pointerY) {\r\n        const camera = scene.cameraToUseForPointers || scene.activeCamera;\r\n        const engine = scene.getEngine();\r\n        const originalCameraToUseForPointers = scene.cameraToUseForPointers;\r\n\r\n        if (!camera) {\r\n            tempViewport.x = 0;\r\n            tempViewport.y = 0;\r\n            tempViewport.width = engine.getRenderWidth();\r\n            tempViewport.height = engine.getRenderHeight();\r\n        } else {\r\n            if (camera.rigCameras.length) {\r\n                // rig camera - we need to find the camera to use for this event\r\n                const rigViewport = new Viewport(0, 0, 1, 1);\r\n                camera.rigCameras.forEach((rigCamera) => {\r\n                    // generate the viewport of this camera\r\n                    rigCamera.viewport.toGlobalToRef(engine.getRenderWidth(), engine.getRenderHeight(), rigViewport);\r\n                    const transformedX = x / engine.getHardwareScalingLevel() - rigViewport.x;\r\n                    const transformedY = y / engine.getHardwareScalingLevel() - (engine.getRenderHeight() - rigViewport.y - rigViewport.height);\r\n                    // check if the pointer is in the camera's viewport\r\n                    if (transformedX < 0 || transformedY < 0 || x > rigViewport.width || y > rigViewport.height) {\r\n                        // out of viewport - don't use this camera\r\n                        return;\r\n                    }\r\n                    // set the camera to use for pointers until this pointer loop is over\r\n                    scene.cameraToUseForPointers = rigCamera;\r\n                    // set the viewport\r\n                    tempViewport.x = rigViewport.x;\r\n                    tempViewport.y = rigViewport.y;\r\n                    tempViewport.width = rigViewport.width;\r\n                    tempViewport.height = rigViewport.height;\r\n                });\r\n            } else {\r\n                camera.viewport.toGlobalToRef(engine.getRenderWidth(), engine.getRenderHeight(), tempViewport);\r\n            }\r\n        }\r\n\r\n        const transformedX = x / engine.getHardwareScalingLevel() - tempViewport.x;\r\n        const transformedY = y / engine.getHardwareScalingLevel() - (engine.getRenderHeight() - tempViewport.y - tempViewport.height);\r\n        this._shouldBlockPointer = false;\r\n        // Do picking modifies _shouldBlockPointer\r\n        if (pi) {\r\n            const pointerId = (pi.event as IPointerEvent).pointerId || this._defaultMousePointerId;\r\n            this._doPicking(transformedX, transformedY, pi, pi.type, pointerId, pi.event.button, (<IWheelEvent>pi.event).deltaX, (<IWheelEvent>pi.event).deltaY);\r\n            // Avoid overwriting a true skipOnPointerObservable to false\r\n            if (this._shouldBlockPointer || this._capturingControl[pointerId]) {\r\n                pi.skipOnPointerObservable = true;\r\n            }\r\n        } else {\r\n            this._doPicking(transformedX, transformedY, null, PointerEventTypes.POINTERMOVE, this._defaultMousePointerId, 0);\r\n        }\r\n        // if overridden by a rig camera - reset back to the original value\r\n        scene.cameraToUseForPointers = originalCameraToUseForPointers;\r\n    }\r\n\r\n    /** Attach to all scene events required to support pointer events */\r\n    public attach(): void {\r\n        const scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        const tempViewport = new Viewport(0, 0, 0, 0);\r\n\r\n        this._prePointerObserver = scene.onPrePointerObservable.add((pi) => {\r\n            if (\r\n                scene.isPointerCaptured((<IPointerEvent>pi.event).pointerId) &&\r\n                pi.type === PointerEventTypes.POINTERUP &&\r\n                !this._capturedPointerIds.has((pi.event as IPointerEvent).pointerId)\r\n            ) {\r\n                return;\r\n            }\r\n            if (\r\n                pi.type !== PointerEventTypes.POINTERMOVE &&\r\n                pi.type !== PointerEventTypes.POINTERUP &&\r\n                pi.type !== PointerEventTypes.POINTERDOWN &&\r\n                pi.type !== PointerEventTypes.POINTERWHEEL\r\n            ) {\r\n                return;\r\n            }\r\n\r\n            if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                // Avoid pointerMove events firing while the pointer is captured by the scene\r\n                if (scene.isPointerCaptured((<IPointerEvent>pi.event).pointerId)) {\r\n                    return;\r\n                }\r\n                if ((pi.event as IPointerEvent).pointerId) {\r\n                    this._defaultMousePointerId = (pi.event as IPointerEvent).pointerId; // This is required to make sure we have the correct pointer ID for wheel\r\n                }\r\n            }\r\n            this._translateToPicking(scene, tempViewport, pi);\r\n        });\r\n        this._attachPickingToSceneRender(scene, () => this._translateToPicking(scene, tempViewport, null), false);\r\n        this._attachToOnPointerOut(scene);\r\n        this._attachToOnBlur(scene);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _onClipboardCopy = (rawEvt: Event) => {\r\n        const evt = rawEvt as ClipboardEvent;\r\n        const ev = new ClipboardInfo(ClipboardEventTypes.COPY, evt);\r\n        this.onClipboardObservable.notifyObservers(ev);\r\n        evt.preventDefault();\r\n    };\r\n    /**\r\n     * @internal\r\n     */\r\n    private _onClipboardCut = (rawEvt: Event) => {\r\n        const evt = rawEvt as ClipboardEvent;\r\n        const ev = new ClipboardInfo(ClipboardEventTypes.CUT, evt);\r\n        this.onClipboardObservable.notifyObservers(ev);\r\n        evt.preventDefault();\r\n    };\r\n    /**\r\n     * @internal\r\n     */\r\n    private _onClipboardPaste = (rawEvt: Event) => {\r\n        const evt = rawEvt as ClipboardEvent;\r\n        const ev = new ClipboardInfo(ClipboardEventTypes.PASTE, evt);\r\n        this.onClipboardObservable.notifyObservers(ev);\r\n        evt.preventDefault();\r\n    };\r\n    /**\r\n     * Register the clipboard Events onto the canvas\r\n     */\r\n    public registerClipboardEvents(): void {\r\n        self.addEventListener(\"copy\", this._onClipboardCopy, false);\r\n        self.addEventListener(\"cut\", this._onClipboardCut, false);\r\n        self.addEventListener(\"paste\", this._onClipboardPaste, false);\r\n    }\r\n    /**\r\n     * Unregister the clipboard Events from the canvas\r\n     */\r\n    public unRegisterClipboardEvents(): void {\r\n        self.removeEventListener(\"copy\", this._onClipboardCopy);\r\n        self.removeEventListener(\"cut\", this._onClipboardCut);\r\n        self.removeEventListener(\"paste\", this._onClipboardPaste);\r\n    }\r\n\r\n    /**\r\n     * Transform uvs from mesh space to texture space, taking the texture into account\r\n     * @param uv the uvs in mesh space\r\n     * @returns the uvs in texture space\r\n     */\r\n    private _transformUvs(uv: Vector2): Vector2 {\r\n        const textureMatrix = this.getTextureMatrix();\r\n        let result;\r\n        if (textureMatrix.isIdentityAs3x2()) {\r\n            result = uv;\r\n        } else {\r\n            const homogeneousTextureMatrix = TmpVectors.Matrix[0];\r\n\r\n            textureMatrix.getRowToRef(0, TmpVectors.Vector4[0]);\r\n            textureMatrix.getRowToRef(1, TmpVectors.Vector4[1]);\r\n            textureMatrix.getRowToRef(2, TmpVectors.Vector4[2]);\r\n\r\n            const r0 = TmpVectors.Vector4[0];\r\n            const r1 = TmpVectors.Vector4[1];\r\n            const r2 = TmpVectors.Vector4[2];\r\n\r\n            homogeneousTextureMatrix.setRowFromFloats(0, r0.x, r0.y, 0, 0);\r\n            homogeneousTextureMatrix.setRowFromFloats(1, r1.x, r1.y, 0, 0);\r\n            homogeneousTextureMatrix.setRowFromFloats(2, 0, 0, 1, 0);\r\n            homogeneousTextureMatrix.setRowFromFloats(3, r2.x, r2.y, 0, 1);\r\n\r\n            result = TmpVectors.Vector2[0];\r\n            Vector2.TransformToRef(uv, homogeneousTextureMatrix, result);\r\n        }\r\n\r\n        // In wrap and mirror mode, the texture coordinate for coordinates more than 1 is the fractional part of the coordinate\r\n        if (this.wrapU === Texture.WRAP_ADDRESSMODE || this.wrapU === Texture.MIRROR_ADDRESSMODE) {\r\n            if (result.x > 1) {\r\n                let fX = result.x - Math.trunc(result.x);\r\n                // In mirror mode, the sign of the texture coordinate depends on the integer part -\r\n                // odd integers means it is mirrored from the original coordinate\r\n                if (this.wrapU === Texture.MIRROR_ADDRESSMODE && Math.trunc(result.x) % 2 === 1) {\r\n                    fX = 1 - fX;\r\n                }\r\n                result.x = fX;\r\n            }\r\n        }\r\n        if (this.wrapV === Texture.WRAP_ADDRESSMODE || this.wrapV === Texture.MIRROR_ADDRESSMODE) {\r\n            if (result.y > 1) {\r\n                let fY = result.y - Math.trunc(result.y);\r\n                if (this.wrapV === Texture.MIRROR_ADDRESSMODE && Math.trunc(result.x) % 2 === 1) {\r\n                    fY = 1 - fY;\r\n                }\r\n                result.y = fY;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * Connect the texture to a hosting mesh to enable interactions\r\n     * @param mesh defines the mesh to attach to\r\n     * @param supportPointerMove defines a boolean indicating if pointer move events must be catched as well\r\n     */\r\n    public attachToMesh(mesh: AbstractMesh, supportPointerMove = true): void {\r\n        const scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        if (this._pointerObserver) {\r\n            scene.onPointerObservable.remove(this._pointerObserver);\r\n        }\r\n\r\n        this._pointerObserver = scene.onPointerObservable.add((pi) => {\r\n            if (\r\n                pi.type !== PointerEventTypes.POINTERMOVE &&\r\n                pi.type !== PointerEventTypes.POINTERUP &&\r\n                pi.type !== PointerEventTypes.POINTERDOWN &&\r\n                pi.type !== PointerEventTypes.POINTERWHEEL\r\n            ) {\r\n                return;\r\n            }\r\n\r\n            if (pi.type === PointerEventTypes.POINTERMOVE && (pi.event as IPointerEvent).pointerId) {\r\n                this._defaultMousePointerId = (pi.event as IPointerEvent).pointerId; // This is required to make sure we have the correct pointer ID for wheel\r\n            }\r\n\r\n            const pointerId = (pi.event as IPointerEvent).pointerId || this._defaultMousePointerId;\r\n            if (pi.pickInfo && pi.pickInfo.hit && pi.pickInfo.pickedMesh === mesh) {\r\n                let uv = pi.pickInfo.getTextureCoordinates();\r\n                if (uv) {\r\n                    uv = this._transformUvs(uv);\r\n                    const size = this.getSize();\r\n                    this._doPicking(\r\n                        uv.x * size.width,\r\n                        (this.applyYInversionOnUpdate ? 1.0 - uv.y : uv.y) * size.height,\r\n                        pi,\r\n                        pi.type,\r\n                        pointerId,\r\n                        pi.event.button,\r\n                        (<IWheelEvent>pi.event).deltaX,\r\n                        (<IWheelEvent>pi.event).deltaY\r\n                    );\r\n                }\r\n            } else if (pi.type === PointerEventTypes.POINTERUP) {\r\n                if (this._lastControlDown[pointerId]) {\r\n                    this._lastControlDown[pointerId]._forcePointerUp(pointerId);\r\n                }\r\n                delete this._lastControlDown[pointerId];\r\n                if (this.focusedControl) {\r\n                    const friendlyControls = this.focusedControl.keepsFocusWith();\r\n                    let canMoveFocus = true;\r\n                    if (friendlyControls) {\r\n                        for (const control of friendlyControls) {\r\n                            // Same host, no need to keep the focus\r\n                            if (this === control._host) {\r\n                                continue;\r\n                            }\r\n                            // Different hosts\r\n                            const otherHost = control._host;\r\n                            if (otherHost._lastControlOver[pointerId] && otherHost._lastControlOver[pointerId].isAscendant(control)) {\r\n                                canMoveFocus = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (canMoveFocus) {\r\n                        this.focusedControl = null;\r\n                    }\r\n                }\r\n            } else if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId], pi, true);\r\n                }\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        });\r\n        mesh.enablePointerMoveEvents = supportPointerMove;\r\n        this._attachPickingToSceneRender(\r\n            scene,\r\n            () => {\r\n                const pointerId = this._defaultMousePointerId;\r\n                const pick = scene?.pick(scene.pointerX, scene.pointerY);\r\n                if (pick && pick.hit && pick.pickedMesh === mesh) {\r\n                    let uv = pick.getTextureCoordinates();\r\n                    if (uv) {\r\n                        uv = this._transformUvs(uv);\r\n                        const size = this.getSize();\r\n                        this._doPicking(uv.x * size.width, (this.applyYInversionOnUpdate ? 1.0 - uv.y : uv.y) * size.height, null, PointerEventTypes.POINTERMOVE, pointerId, 0);\r\n                    }\r\n                } else {\r\n                    if (this._lastControlOver[pointerId]) {\r\n                        this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId], null, true);\r\n                    }\r\n                    delete this._lastControlOver[pointerId];\r\n                }\r\n            },\r\n            true\r\n        );\r\n        this._attachToOnPointerOut(scene);\r\n        this._attachToOnBlur(scene);\r\n    }\r\n    /**\r\n     * Move the focus to a specific control\r\n     * @param control defines the control which will receive the focus\r\n     */\r\n    public moveFocusToControl(control: IFocusableControl): void {\r\n        this.focusedControl = control;\r\n        this._lastPickedControl = <any>control;\r\n        this._blockNextFocusCheck = true;\r\n    }\r\n    private _manageFocus(): void {\r\n        if (this._blockNextFocusCheck) {\r\n            this._blockNextFocusCheck = false;\r\n            this._lastPickedControl = <any>this._focusedControl;\r\n            return;\r\n        }\r\n        // Focus management\r\n        if (this._focusedControl) {\r\n            if (this._focusedControl !== <any>this._lastPickedControl) {\r\n                if (this._lastPickedControl.isFocusInvisible) {\r\n                    return;\r\n                }\r\n                this.focusedControl = null;\r\n            }\r\n        }\r\n    }\r\n    private _attachPickingToSceneRender(scene: Scene, pickFunction: () => void, forcePicking: boolean) {\r\n        this._sceneRenderObserver = scene.onBeforeRenderObservable.add(() => {\r\n            if (!this.checkPointerEveryFrame) {\r\n                return;\r\n            }\r\n            if (this._linkedControls.length > 0 || forcePicking) {\r\n                pickFunction();\r\n            }\r\n        });\r\n    }\r\n    private _attachToOnPointerOut(scene: Scene): void {\r\n        this._canvasPointerOutObserver = scene.getEngine().onCanvasPointerOutObservable.add((pointerEvent) => {\r\n            if (this._lastControlOver[pointerEvent.pointerId]) {\r\n                this._lastControlOver[pointerEvent.pointerId]._onPointerOut(this._lastControlOver[pointerEvent.pointerId], null);\r\n            }\r\n            delete this._lastControlOver[pointerEvent.pointerId];\r\n            if (this._lastControlDown[pointerEvent.pointerId] && this._lastControlDown[pointerEvent.pointerId] !== this._capturingControl[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId]._forcePointerUp(pointerEvent.pointerId);\r\n                delete this._lastControlDown[pointerEvent.pointerId];\r\n            }\r\n        });\r\n    }\r\n    private _attachToOnBlur(scene: Scene): void {\r\n        this._canvasBlurObserver = scene.getEngine().onCanvasBlurObservable.add(() => {\r\n            Object.entries(this._lastControlDown).forEach(([, value]) => {\r\n                value._onCanvasBlur();\r\n            });\r\n            this.focusedControl = null;\r\n            this._lastControlDown = {};\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Serializes the entire GUI system\r\n     * @returns an object with the JSON serialized data\r\n     */\r\n    public serializeContent(): any {\r\n        const size = this.getSize();\r\n        const serializationObject = {\r\n            root: {},\r\n            width: size.width,\r\n            height: size.height,\r\n        };\r\n\r\n        this._rootContainer.serialize(serializationObject.root);\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Recreate the content of the ADT from a JSON object\r\n     * @param serializedObject define the JSON serialized object to restore from\r\n     * @param scaleToSize defines whether to scale to texture to the saved size\r\n     */\r\n    public parseSerializedObject(serializedObject: any, scaleToSize?: boolean) {\r\n        this._rootContainer = Control.Parse(serializedObject.root, this) as Container;\r\n        if (scaleToSize) {\r\n            const width = serializedObject.width;\r\n            const height = serializedObject.height;\r\n            if (typeof width === \"number\" && typeof height === \"number\" && width >= 0 && height >= 0) {\r\n                this.scaleTo(width, height);\r\n            } else {\r\n                // scales the GUI to a default size if none was available in the serialized content\r\n                this.scaleTo(1920, 1080);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clones the ADT\r\n     * @param newName defines the name of the new ADT\r\n     * @returns the clone of the ADT\r\n     */\r\n    public clone(newName?: string): AdvancedDynamicTexture {\r\n        const scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return this;\r\n        }\r\n        const size = this.getSize();\r\n        const data = this.serializeContent();\r\n        const clone = new AdvancedDynamicTexture(newName ?? \"Clone of \" + this.name, size.width, size.height, scene, !this.noMipmap, this.samplingMode);\r\n        clone.parseSerializedObject(data);\r\n\r\n        return clone;\r\n    }\r\n\r\n    /**\r\n     * Recreate the content of the ADT from a JSON object\r\n     * @param serializedObject define the JSON serialized object to restore from\r\n     * @param scaleToSize defines whether to scale to texture to the saved size\r\n     * @deprecated Please use parseSerializedObject instead\r\n     */\r\n    public parseContent = this.parseSerializedObject;\r\n\r\n    /**\r\n     * Recreate the content of the ADT from a snippet saved by the GUI editor\r\n     * @param snippetId defines the snippet to load\r\n     * @param scaleToSize defines whether to scale to texture to the saved size\r\n     * @param appendToAdt if provided the snippet will be appended to the adt. Otherwise a fullscreen ADT will be created.\r\n     * @returns a promise that will resolve on success\r\n     */\r\n    public static async ParseFromSnippetAsync(snippetId: string, scaleToSize?: boolean, appendToAdt?: AdvancedDynamicTexture): Promise<AdvancedDynamicTexture> {\r\n        const adt = appendToAdt ?? AdvancedDynamicTexture.CreateFullscreenUI(\"ADT from snippet\");\r\n        if (snippetId === \"_BLANK\") {\r\n            return adt;\r\n        }\r\n\r\n        const serialized = await AdvancedDynamicTexture._LoadURLContentAsync(AdvancedDynamicTexture.SnippetUrl + \"/\" + snippetId.replace(/#/g, \"/\"), true);\r\n        adt.parseSerializedObject(serialized, scaleToSize);\r\n        return adt;\r\n    }\r\n\r\n    /**\r\n     * Recreate the content of the ADT from a snippet saved by the GUI editor\r\n     * @param snippetId defines the snippet to load\r\n     * @param scaleToSize defines whether to scale to texture to the saved size\r\n     * @returns a promise that will resolve on success\r\n     */\r\n    public parseFromSnippetAsync(snippetId: string, scaleToSize?: boolean): Promise<AdvancedDynamicTexture> {\r\n        return AdvancedDynamicTexture.ParseFromSnippetAsync(snippetId, scaleToSize, this);\r\n    }\r\n\r\n    /**\r\n     * Recreate the content of the ADT from a url json\r\n     * @param url defines the url to load\r\n     * @param scaleToSize defines whether to scale to texture to the saved size\r\n     * @param appendToAdt if provided the snippet will be appended to the adt. Otherwise a fullscreen ADT will be created.\r\n     * @returns a promise that will resolve on success\r\n     */\r\n    public static async ParseFromFileAsync(url: string, scaleToSize?: boolean, appendToAdt?: AdvancedDynamicTexture): Promise<AdvancedDynamicTexture> {\r\n        const adt = appendToAdt ?? AdvancedDynamicTexture.CreateFullscreenUI(\"ADT from URL\");\r\n        const serialized = await AdvancedDynamicTexture._LoadURLContentAsync(url);\r\n        adt.parseSerializedObject(serialized, scaleToSize);\r\n        return adt;\r\n    }\r\n\r\n    /**\r\n     * Recreate the content of the ADT from a url json\r\n     * @param url defines the url to load\r\n     * @param scaleToSize defines whether to scale to texture to the saved size\r\n     * @returns a promise that will resolve on success\r\n     */\r\n    public parseFromURLAsync(url: string, scaleToSize?: boolean): Promise<AdvancedDynamicTexture> {\r\n        return AdvancedDynamicTexture.ParseFromFileAsync(url, scaleToSize, this);\r\n    }\r\n\r\n    private static _LoadURLContentAsync(url: string, snippet: boolean = false): Promise<any> {\r\n        if (url === \"\") {\r\n            return Promise.reject(\"No URL provided\");\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            const request = new WebRequest();\r\n            request.addEventListener(\"readystatechange\", () => {\r\n                if (request.readyState == 4) {\r\n                    if (request.status == 200) {\r\n                        let gui;\r\n                        if (snippet) {\r\n                            const payload = JSON.parse(JSON.parse(request.responseText).jsonPayload);\r\n                            gui = payload.encodedGui ? new TextDecoder(\"utf-8\").decode(DecodeBase64ToBinary(payload.encodedGui)) : payload.gui;\r\n                        } else {\r\n                            gui = request.responseText;\r\n                        }\r\n                        const serializationObject = JSON.parse(gui);\r\n                        resolve(serializationObject);\r\n                    } else {\r\n                        reject(\"Unable to load\");\r\n                    }\r\n                }\r\n            });\r\n            request.open(\"GET\", url);\r\n            request.send();\r\n        });\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Compares two rectangle based controls for pixel overlap\r\n     * @param control1 The first control to compare\r\n     * @param control2 The second control to compare\r\n     * @returns true if overlaps, otherwise false\r\n     */\r\n    private static _Overlaps(control1: Control, control2: Control) {\r\n        return !(\r\n            control1.centerX > control2.centerX + control2.widthInPixels ||\r\n            control1.centerX + control1.widthInPixels < control2.centerX ||\r\n            control1.centerY + control1.heightInPixels < control2.centerY ||\r\n            control1.centerY > control2.centerY + control2.heightInPixels\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in projected mode (ie. attached to a mesh)\r\n     * @param mesh defines the mesh which will receive the texture\r\n     * @param width defines the texture width (1024 by default)\r\n     * @param height defines the texture height (1024 by default)\r\n     * @param supportPointerMove defines a boolean indicating if the texture must capture move events (true by default)\r\n     * @param onlyAlphaTesting defines a boolean indicating that alpha blending will not be used (only alpha testing) (false by default)\r\n     * @param invertY defines if the texture needs to be inverted on the y axis during loading (true by default)\r\n     * @param materialSetupCallback defines a custom way of creating and setting up the material on the mesh\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateForMesh(\r\n        mesh: AbstractMesh,\r\n        width = 1024,\r\n        height = 1024,\r\n        supportPointerMove = true,\r\n        onlyAlphaTesting = false,\r\n        invertY?: boolean,\r\n        materialSetupCallback: (mesh: AbstractMesh, uniqueId: string, texture: AdvancedDynamicTexture, onlyAlphaTesting: boolean) => void = this._CreateMaterial\r\n    ): AdvancedDynamicTexture {\r\n        // use a unique ID in name so serialization will work even if you create two ADTs for a single mesh\r\n        const uniqueId = RandomGUID();\r\n        const result = new AdvancedDynamicTexture(\r\n            `AdvancedDynamicTexture for ${mesh.name} [${uniqueId}]`,\r\n            width,\r\n            height,\r\n            mesh.getScene(),\r\n            true,\r\n            Texture.TRILINEAR_SAMPLINGMODE,\r\n            invertY\r\n        );\r\n\r\n        materialSetupCallback(mesh, uniqueId, result, onlyAlphaTesting);\r\n\r\n        result.attachToMesh(mesh, supportPointerMove);\r\n        return result;\r\n    }\r\n\r\n    private static _CreateMaterial(mesh: AbstractMesh, uniqueId: string, texture: AdvancedDynamicTexture, onlyAlphaTesting: boolean): void {\r\n        const internalClassType = GetClass(\"BABYLON.StandardMaterial\");\r\n        if (!internalClassType) {\r\n            throw \"StandardMaterial needs to be imported before as it contains a side-effect required by your code.\";\r\n        }\r\n\r\n        const material: StandardMaterial = new internalClassType(`AdvancedDynamicTextureMaterial for ${mesh.name} [${uniqueId}]`, mesh.getScene());\r\n        material.backFaceCulling = false;\r\n        material.diffuseColor = Color3.Black();\r\n        material.specularColor = Color3.Black();\r\n        if (onlyAlphaTesting) {\r\n            material.diffuseTexture = texture;\r\n            material.emissiveTexture = texture;\r\n            texture.hasAlpha = true;\r\n        } else {\r\n            material.emissiveTexture = texture;\r\n            material.opacityTexture = texture;\r\n        }\r\n        mesh.material = material;\r\n    }\r\n\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in projected mode (ie. attached to a mesh) BUT do not create a new material for the mesh. You will be responsible for connecting the texture\r\n     * @param mesh defines the mesh which will receive the texture\r\n     * @param width defines the texture width (1024 by default)\r\n     * @param height defines the texture height (1024 by default)\r\n     * @param supportPointerMove defines a boolean indicating if the texture must capture move events (true by default)\r\n     * @param invertY defines if the texture needs to be inverted on the y axis during loading (true by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateForMeshTexture(mesh: AbstractMesh, width = 1024, height = 1024, supportPointerMove = true, invertY?: boolean): AdvancedDynamicTexture {\r\n        const result = new AdvancedDynamicTexture(mesh.name + \" AdvancedDynamicTexture\", width, height, mesh.getScene(), true, Texture.TRILINEAR_SAMPLINGMODE, invertY);\r\n        result.attachToMesh(mesh, supportPointerMove);\r\n        return result;\r\n    }\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in fullscreen mode.\r\n     * In this mode the texture will rely on a layer for its rendering.\r\n     * This allows it to be treated like any other layer.\r\n     * As such, if you have a multi camera setup, you can set the layerMask on the GUI as well.\r\n     * LayerMask is set through advancedTexture.layer.layerMask\r\n     * @param name defines name for the texture\r\n     * @param foreground defines a boolean indicating if the texture must be rendered in foreground (default is true)\r\n     * @param scene defines the hosting scene\r\n     * @param sampling defines the texture sampling mode (Texture.BILINEAR_SAMPLINGMODE by default)\r\n     * @param adaptiveScaling defines whether to automatically scale root to match hardwarescaling (false by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateFullscreenUI(\r\n        name: string,\r\n        foreground: boolean = true,\r\n        scene: Nullable<Scene> = null,\r\n        sampling = Texture.BILINEAR_SAMPLINGMODE,\r\n        adaptiveScaling: boolean = false\r\n    ): AdvancedDynamicTexture {\r\n        const result = new AdvancedDynamicTexture(name, 0, 0, scene, false, sampling);\r\n        // Display\r\n        const resultScene = result.getScene();\r\n        const layer = new Layer(name + \"_layer\", null, resultScene, !foreground);\r\n        layer.texture = result;\r\n        result._layerToDispose = layer;\r\n        result._isFullscreen = true;\r\n\r\n        if (adaptiveScaling && resultScene) {\r\n            const newScale = 1 / resultScene.getEngine().getHardwareScalingLevel();\r\n            result._rootContainer.scaleX = newScale;\r\n            result._rootContainer.scaleY = newScale;\r\n        }\r\n\r\n        // Attach\r\n        result.attach();\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Scales the texture\r\n     * @param ratio the scale factor to apply to both width and height\r\n     */\r\n    public scale(ratio: number): void {\r\n        super.scale(ratio);\r\n        this.markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Resizes the texture\r\n     * @param width the new width\r\n     * @param height the new height\r\n     */\r\n    public scaleTo(width: number, height: number): void {\r\n        super.scaleTo(width, height);\r\n        this.markAsDirty();\r\n    }\r\n\r\n    private _checkGuiIsReady() {\r\n        if (this.guiIsReady()) {\r\n            this.onGuiReadyObservable.notifyObservers(this);\r\n\r\n            this.onGuiReadyObservable.clear();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns true if all the GUI components are ready to render\r\n     */\r\n    public guiIsReady(): boolean {\r\n        return this._rootContainer.isReady();\r\n    }\r\n}\r\n","import type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { PerfCounter } from \"core/Misc/perfCounter\";\r\nimport type { IDisposable } from \"core/scene\";\r\n\r\nimport type { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\n\r\n/**\r\n * This class can be used to get instrumentation data from a AdvancedDynamicTexture object\r\n */\r\nexport class AdvancedDynamicTextureInstrumentation implements IDisposable {\r\n    private _captureRenderTime = false;\r\n    private _renderTime = new PerfCounter();\r\n\r\n    private _captureLayoutTime = false;\r\n    private _layoutTime = new PerfCounter();\r\n\r\n    // Observers\r\n    private _onBeginRenderObserver: Nullable<Observer<AdvancedDynamicTexture>> = null;\r\n    private _onEndRenderObserver: Nullable<Observer<AdvancedDynamicTexture>> = null;\r\n    private _onBeginLayoutObserver: Nullable<Observer<AdvancedDynamicTexture>> = null;\r\n    private _onEndLayoutObserver: Nullable<Observer<AdvancedDynamicTexture>> = null;\r\n\r\n    // Properties\r\n\r\n    /**\r\n     * Gets the perf counter used to capture render time\r\n     */\r\n    public get renderTimeCounter(): PerfCounter {\r\n        return this._renderTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the perf counter used to capture layout time\r\n     */\r\n    public get layoutTimeCounter(): PerfCounter {\r\n        return this._layoutTime;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the render time capture\r\n     */\r\n    public get captureRenderTime(): boolean {\r\n        return this._captureRenderTime;\r\n    }\r\n\r\n    public set captureRenderTime(value: boolean) {\r\n        if (value === this._captureRenderTime) {\r\n            return;\r\n        }\r\n\r\n        this._captureRenderTime = value;\r\n\r\n        if (value) {\r\n            this._onBeginRenderObserver = this.texture.onBeginRenderObservable.add(() => {\r\n                this._renderTime.beginMonitoring();\r\n            });\r\n\r\n            this._onEndRenderObserver = this.texture.onEndRenderObservable.add(() => {\r\n                this._renderTime.endMonitoring(true);\r\n            });\r\n        } else {\r\n            this.texture.onBeginRenderObservable.remove(this._onBeginRenderObserver);\r\n            this._onBeginRenderObserver = null;\r\n            this.texture.onEndRenderObservable.remove(this._onEndRenderObserver);\r\n            this._onEndRenderObserver = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the layout time capture\r\n     */\r\n    public get captureLayoutTime(): boolean {\r\n        return this._captureLayoutTime;\r\n    }\r\n\r\n    public set captureLayoutTime(value: boolean) {\r\n        if (value === this._captureLayoutTime) {\r\n            return;\r\n        }\r\n\r\n        this._captureLayoutTime = value;\r\n\r\n        if (value) {\r\n            this._onBeginLayoutObserver = this.texture.onBeginLayoutObservable.add(() => {\r\n                this._layoutTime.beginMonitoring();\r\n            });\r\n\r\n            this._onEndLayoutObserver = this.texture.onEndLayoutObservable.add(() => {\r\n                this._layoutTime.endMonitoring(true);\r\n            });\r\n        } else {\r\n            this.texture.onBeginLayoutObservable.remove(this._onBeginLayoutObserver);\r\n            this._onBeginLayoutObserver = null;\r\n            this.texture.onEndLayoutObservable.remove(this._onEndLayoutObserver);\r\n            this._onEndLayoutObserver = null;\r\n        }\r\n    }\r\n    /**\r\n     * Instantiates a new advanced dynamic texture instrumentation.\r\n     * This class can be used to get instrumentation data from an AdvancedDynamicTexture object\r\n     * @param texture Defines the AdvancedDynamicTexture to instrument\r\n     */\r\n    public constructor(\r\n        /**\r\n         * Define the instrumented AdvancedDynamicTexture.\r\n         */\r\n        public texture: AdvancedDynamicTexture\r\n    ) {}\r\n\r\n    /**\r\n     * Dispose and release associated resources.\r\n     */\r\n    public dispose() {\r\n        this.texture.onBeginRenderObservable.remove(this._onBeginRenderObserver);\r\n        this._onBeginRenderObserver = null;\r\n        this.texture.onEndRenderObservable.remove(this._onEndRenderObserver);\r\n        this._onEndRenderObserver = null;\r\n        this.texture.onBeginLayoutObservable.remove(this._onBeginLayoutObserver);\r\n        this._onBeginLayoutObserver = null;\r\n        this.texture.onEndLayoutObservable.remove(this._onEndLayoutObserver);\r\n        this._onEndLayoutObserver = null;\r\n\r\n        (<any>this.texture) = null;\r\n    }\r\n}\r\n","import { GetClass } from \"core/Misc/typeStore\";\r\nimport type { Nullable } from \"core/types\";\r\n\r\nconst XmlLoaderError = \"XmlLoader Exception : XML file is malformed or corrupted.\";\r\n\r\n/**\r\n * Class used to load GUI via XML.\r\n */\r\nexport class XmlLoader {\r\n    private _nodes: any = {};\r\n\r\n    private _nodeTypes: any = {\r\n        element: 1,\r\n        attribute: 2,\r\n        text: 3,\r\n    };\r\n\r\n    private _isLoaded: boolean = false;\r\n\r\n    private _objectAttributes: any = {\r\n        textHorizontalAlignment: 1,\r\n        textVerticalAlignment: 2,\r\n        horizontalAlignment: 3,\r\n        verticalAlignment: 4,\r\n        stretch: 5,\r\n    };\r\n\r\n    private _rootNode: any;\r\n\r\n    private _parentClass: any;\r\n\r\n    /**\r\n     * Create a new xml loader\r\n     * @param parentClass Sets the class context. Used when the loader is instanced inside a class and not in a global context\r\n     */\r\n    constructor(parentClass: any = null) {\r\n        if (parentClass) {\r\n            this._parentClass = parentClass;\r\n        }\r\n    }\r\n\r\n    private _getChainElement(attributeValue: any): any {\r\n        let element: any = window;\r\n\r\n        if (this._parentClass) {\r\n            element = this._parentClass;\r\n        }\r\n        let value = attributeValue;\r\n        value = value.split(\".\");\r\n\r\n        for (let i = 0; i < value.length; i++) {\r\n            element = element[value[i]];\r\n        }\r\n        return element;\r\n    }\r\n\r\n    private _getClassAttribute(attributeName: string): any {\r\n        const attribute = attributeName.split(\".\");\r\n        const className = GetClass(\"BABYLON.GUI.\" + attribute[0]);\r\n        return className[attribute[1]];\r\n    }\r\n\r\n    private _createGuiElement(node: any, parent: any, linkParent: boolean = true): void {\r\n        try {\r\n            const className = GetClass(\"BABYLON.GUI.\" + node.nodeName);\r\n            const guiNode = new className();\r\n\r\n            if (parent && linkParent) {\r\n                parent.addControl(guiNode);\r\n            }\r\n\r\n            for (let i = 0; i < node.attributes.length; i++) {\r\n                if (node.attributes[i].name.toLowerCase().includes(\"datasource\")) {\r\n                    continue;\r\n                }\r\n\r\n                if (node.attributes[i].name.toLowerCase().includes(\"observable\")) {\r\n                    const element = this._getChainElement(node.attributes[i].value);\r\n                    guiNode[node.attributes[i].name].add(element);\r\n\r\n                    continue;\r\n                } else if (node.attributes[i].name == \"linkWithMesh\") {\r\n                    if (this._parentClass) {\r\n                        guiNode.linkWithMesh(this._parentClass[node.attributes[i].value]);\r\n                    } else {\r\n                        guiNode.linkWithMesh(window[node.attributes[i].value]);\r\n                    }\r\n                } else if (node.attributes[i].value.startsWith(\"{{\") && node.attributes[i].value.endsWith(\"}}\")) {\r\n                    const element = this._getChainElement(node.attributes[i].value.substring(2, node.attributes[i].value.length - 2));\r\n                    guiNode[node.attributes[i].name] = element;\r\n                } else if (!this._objectAttributes[node.attributes[i].name]) {\r\n                    if (node.attributes[i].value == \"true\" || node.attributes[i].value == \"false\") {\r\n                        guiNode[node.attributes[i].name] = node.attributes[i].value == \"true\";\r\n                    } else {\r\n                        guiNode[node.attributes[i].name] = !isNaN(Number(node.attributes[i].value)) ? Number(node.attributes[i].value) : node.attributes[i].value;\r\n                    }\r\n                } else {\r\n                    guiNode[node.attributes[i].name] = this._getClassAttribute(node.attributes[i].value);\r\n                }\r\n            }\r\n\r\n            if (!node.attributes.getNamedItem(\"id\")) {\r\n                this._nodes[node.nodeName + Object.keys(this._nodes).length + \"_gen\"] = guiNode;\r\n                return guiNode;\r\n            }\r\n\r\n            let id = node.attributes.getNamedItem(\"id\").value;\r\n            if (id.startsWith(\"{{\") && id.endsWith(\"}}\")) {\r\n                id = this._getChainElement(id.substring(2, id.length - 2));\r\n            }\r\n\r\n            if (!this._nodes[id]) {\r\n                this._nodes[id] = guiNode;\r\n            } else {\r\n                throw \"XmlLoader Exception : Duplicate ID, every element should have an unique ID attribute\";\r\n            }\r\n            return guiNode;\r\n        } catch (exception) {\r\n            throw \"XmlLoader Exception : Error parsing Control \" + node.nodeName + \",\" + exception + \".\";\r\n        }\r\n    }\r\n\r\n    private _parseGrid(node: any, guiNode: any, parent: any): void {\r\n        let width;\r\n        let height;\r\n        let columns;\r\n        const rows = node.children;\r\n        let cells;\r\n        let isPixel = false;\r\n        let cellNode;\r\n        let rowNumber = -1;\r\n        let columnNumber = -1;\r\n        let totalColumnsNumber = 0;\r\n\r\n        for (let i = 0; i < rows.length; i++) {\r\n            if (rows[i].nodeType != this._nodeTypes.element) {\r\n                continue;\r\n            }\r\n            if (rows[i].nodeName != \"Row\") {\r\n                throw \"XmlLoader Exception : Expecting Row node, received \" + rows[i].nodeName;\r\n            }\r\n            rowNumber += 1;\r\n            columns = rows[i].children;\r\n\r\n            if (!rows[i].attributes.getNamedItem(\"height\")) {\r\n                throw \"XmlLoader Exception : Height must be defined for grid rows\";\r\n            }\r\n            height = Number(rows[i].attributes.getNamedItem(\"height\").nodeValue);\r\n            isPixel = rows[i].attributes.getNamedItem(\"isPixel\") ? JSON.parse(rows[i].attributes.getNamedItem(\"isPixel\").nodeValue) : false;\r\n            guiNode.addRowDefinition(height, isPixel);\r\n\r\n            for (let j = 0; j < columns.length; j++) {\r\n                if (columns[j].nodeType != this._nodeTypes.element) {\r\n                    continue;\r\n                }\r\n                if (columns[j].nodeName != \"Column\") {\r\n                    throw \"XmlLoader Exception : Expecting Column node, received \" + columns[j].nodeName;\r\n                }\r\n                columnNumber += 1;\r\n                if (rowNumber > 0 && columnNumber > totalColumnsNumber) {\r\n                    throw \"XmlLoader Exception : In the Grid element, the number of columns is defined in the first row, do not add more columns in the subsequent rows.\";\r\n                }\r\n\r\n                if (rowNumber == 0) {\r\n                    if (!columns[j].attributes.getNamedItem(\"width\")) {\r\n                        throw \"XmlLoader Exception : Width must be defined for all the grid columns in the first row\";\r\n                    }\r\n                    width = Number(columns[j].attributes.getNamedItem(\"width\").nodeValue);\r\n                    isPixel = columns[j].attributes.getNamedItem(\"isPixel\") ? JSON.parse(columns[j].attributes.getNamedItem(\"isPixel\").nodeValue) : false;\r\n                    guiNode.addColumnDefinition(width, isPixel);\r\n                }\r\n\r\n                cells = columns[j].children;\r\n\r\n                for (let k = 0; k < cells.length; k++) {\r\n                    if (cells[k].nodeType != this._nodeTypes.element) {\r\n                        continue;\r\n                    }\r\n                    cellNode = this._createGuiElement(cells[k], guiNode, false);\r\n                    guiNode.addControl(cellNode, rowNumber, columnNumber);\r\n                    if (cells[k].firstChild) {\r\n                        this._parseXml(cells[k].firstChild, cellNode);\r\n                    }\r\n                }\r\n            }\r\n            if (rowNumber == 0) {\r\n                totalColumnsNumber = columnNumber;\r\n            }\r\n            columnNumber = -1;\r\n        }\r\n\r\n        if (node.nextSibling) {\r\n            this._parseXml(node.nextSibling, parent);\r\n        }\r\n    }\r\n\r\n    private _parseElement(node: any, guiNode: any, parent: any): void {\r\n        if (node.firstChild) {\r\n            this._parseXml(node.firstChild, guiNode);\r\n        }\r\n\r\n        if (node.nextSibling) {\r\n            this._parseXml(node.nextSibling, parent);\r\n        }\r\n    }\r\n\r\n    private _prepareSourceElement(node: any, guiNode: any, variable: any, source: any, iterator: any): void {\r\n        if (this._parentClass) {\r\n            this._parentClass[variable] = source[iterator];\r\n        } else {\r\n            window[variable] = source[iterator];\r\n        }\r\n\r\n        if (node.firstChild) {\r\n            this._parseXml(node.firstChild, guiNode, true);\r\n        }\r\n    }\r\n\r\n    private _parseElementsFromSource(node: any, guiNode: any, parent: any): void {\r\n        const dataSource = node.attributes.getNamedItem(\"dataSource\").value;\r\n\r\n        if (!dataSource.includes(\" in \")) {\r\n            throw \"XmlLoader Exception : Malformed XML, Data Source must include an in\";\r\n        } else {\r\n            let isArray = true;\r\n            const splittedSource = dataSource.split(\" in \");\r\n            if (splittedSource.length < 2) {\r\n                throw \"XmlLoader Exception : Malformed XML, Data Source must have an iterator and a source\";\r\n            }\r\n            let source = splittedSource[1];\r\n            if (source.startsWith(\"{\") && source.endsWith(\"}\")) {\r\n                isArray = false;\r\n            }\r\n\r\n            if (!isArray || (source.startsWith(\"[\") && source.endsWith(\"]\"))) {\r\n                source = source.substring(1, source.length - 1);\r\n            }\r\n\r\n            if (this._parentClass) {\r\n                source = this._parentClass[source];\r\n            } else {\r\n                source = window[source];\r\n            }\r\n\r\n            if (isArray) {\r\n                for (let i = 0; i < source.length; i++) {\r\n                    this._prepareSourceElement(node, guiNode, splittedSource[0], source, i);\r\n                }\r\n            } else {\r\n                for (const i in source) {\r\n                    this._prepareSourceElement(node, guiNode, splittedSource[0], source, i);\r\n                }\r\n            }\r\n\r\n            if (node.nextSibling) {\r\n                this._parseXml(node.nextSibling, parent);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _parseXml(node: any, parent: any, generated: boolean = false): void {\r\n        if (node.nodeType != this._nodeTypes.element) {\r\n            if (node.nextSibling) {\r\n                this._parseXml(node.nextSibling, parent, generated);\r\n            }\r\n            return;\r\n        }\r\n\r\n        if (generated) {\r\n            node.setAttribute(\"id\", parent.id + (parent._children.length + 1));\r\n        }\r\n\r\n        const guiNode = this._createGuiElement(node, parent);\r\n\r\n        if (!this._rootNode) {\r\n            this._rootNode = guiNode;\r\n        }\r\n\r\n        if (node.nodeName == \"Grid\") {\r\n            this._parseGrid(node, guiNode, parent);\r\n        } else if (!node.attributes.getNamedItem(\"dataSource\")) {\r\n            this._parseElement(node, guiNode, parent);\r\n        } else {\r\n            this._parseElementsFromSource(node, guiNode, parent);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets if the loading has finished.\r\n     * @returns whether the loading has finished or not\r\n     */\r\n    public isLoaded(): boolean {\r\n        return this._isLoaded;\r\n    }\r\n\r\n    /**\r\n     * Gets a loaded node / control by id.\r\n     * @param id the Controls id set in the xml\r\n     * @returns element of type Control\r\n     */\r\n    public getNodeById(id: string): any {\r\n        return this._nodes[id];\r\n    }\r\n\r\n    /**\r\n     * Gets all loaded nodes / controls\r\n     * @returns Array of controls\r\n     */\r\n    public getNodes(): any {\r\n        return this._nodes;\r\n    }\r\n    /**\r\n     * Disposes the loaded layout\r\n     */\r\n    public dispose(): void {\r\n        if (this._rootNode) {\r\n            this._rootNode.dispose();\r\n            this._rootNode = null;\r\n            this._nodes = {};\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initiates the xml layout loading\r\n     * @param xmlFile defines the xml layout to load\r\n     * @param rootNode defines the node / control to use as a parent for the loaded layout controls.\r\n     * @param onSuccess defines the callback called on layout load successfully.\r\n     * @param onError defines the callback called on layout load failure.\r\n     */\r\n    public loadLayout(xmlFile: any, rootNode: any, onSuccess: Nullable<() => void> = null, onError: Nullable<(error: string) => void> = null): void {\r\n        const xhttp = new XMLHttpRequest();\r\n        xhttp.onload = () => {\r\n            if (xhttp.readyState === 4 && xhttp.status === 200) {\r\n                if (!xhttp.responseXML) {\r\n                    if (onError) {\r\n                        onError(XmlLoaderError);\r\n                        return;\r\n                    } else {\r\n                        throw XmlLoaderError;\r\n                    }\r\n                }\r\n\r\n                const xmlDoc = xhttp.responseXML.documentElement;\r\n                this._parseXml(xmlDoc.firstChild, rootNode);\r\n                this._isLoaded = true;\r\n\r\n                if (onSuccess) {\r\n                    onSuccess();\r\n                }\r\n            }\r\n        };\r\n\r\n        xhttp.onerror = function () {\r\n            if (onError) {\r\n                onError(\"an error occurred during loading the layout\");\r\n            }\r\n        };\r\n\r\n        xhttp.open(\"GET\", xmlFile, true);\r\n        xhttp.send();\r\n    }\r\n    /**\r\n     * Initiates the xml layout loading asynchronously\r\n     * @param xmlFile defines the xml layout to load\r\n     * @param rootNode defines the node / control to use as a parent for the loaded layout controls.\r\n     * @returns Promise\r\n     */\r\n    public async loadLayoutAsync(xmlFile: any, rootNode: any): Promise<any> {\r\n        return new Promise((resolve: any, reject: any) => {\r\n            this.loadLayout(xmlFile, rootNode, resolve, reject);\r\n        });\r\n    }\r\n}\r\n","import { Vector3 } from \"core/Maths/math.vector\";\r\n\r\n/**\r\n * Class used to transport Vector3 information for pointer events\r\n */\r\nexport class Vector3WithInfo extends Vector3 {\r\n    /**\r\n     * Creates a new Vector3WithInfo\r\n     * @param source defines the vector3 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(\r\n        source: Vector3,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0\r\n    ) {\r\n        super(source.x, source.y, source.z);\r\n    }\r\n}\r\n","import type { Nullable } from \"core/types\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport { PointerEventTypes } from \"core/Events/pointerEvents\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { IBehaviorAware, Behavior } from \"core/Behaviors/behavior\";\r\nimport type { IDisposable, Scene } from \"core/scene\";\r\n\r\nimport type { GUI3DManager } from \"../gui3DManager\";\r\nimport { Vector3WithInfo } from \"../vector3WithInfo\";\r\nimport type { Container3D } from \"./container3D\";\r\n\r\nimport type { TouchButton3D } from \"./touchButton3D\";\r\n\r\n/**\r\n * Class used as base class for controls\r\n */\r\nexport class Control3D implements IDisposable, IBehaviorAware<Control3D> {\r\n    private _node: Nullable<TransformNode>;\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _downPointerIds: { [id: number]: number } = {}; // Store number of pointer downs per ID, from near and far interactions\r\n\r\n    protected _isVisible = true;\r\n\r\n    /** @internal */\r\n    public _host: GUI3DManager;\r\n    /** @internal */\r\n    public _isScaledByManager = false;\r\n\r\n    /** Gets or sets the control position in world space */\r\n    public get position(): Vector3 {\r\n        if (!this._node) {\r\n            return Vector3.Zero();\r\n        }\r\n\r\n        return this._node.position;\r\n    }\r\n\r\n    public set position(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.position = value;\r\n    }\r\n\r\n    /** Gets or sets the control scaling in world space */\r\n    public get scaling(): Vector3 {\r\n        if (!this._node) {\r\n            return new Vector3(1, 1, 1);\r\n        }\r\n\r\n        return this._node.scaling;\r\n    }\r\n\r\n    public set scaling(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._isScaledByManager = false;\r\n        this._node.scaling = value;\r\n    }\r\n\r\n    /** Callback used to start pointer enter animation */\r\n    public pointerEnterAnimation: () => void;\r\n    /** Callback used to start pointer out animation */\r\n    public pointerOutAnimation: () => void;\r\n    /** Callback used to start pointer down animation */\r\n    public pointerDownAnimation: () => void;\r\n    /** Callback used to start pointer up animation */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    /**\r\n     * An event triggered when the pointer moves over the control\r\n     */\r\n    public onPointerMoveObservable = new Observable<Vector3>();\r\n\r\n    /**\r\n     * An event triggered when the pointer moves out of the control\r\n     */\r\n    public onPointerOutObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * An event triggered when the pointer taps the control\r\n     */\r\n    public onPointerDownObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer is up\r\n     */\r\n    public onPointerUpObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when a control is clicked on (with a mouse)\r\n     */\r\n    public onPointerClickObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer enters the control\r\n     */\r\n    public onPointerEnterObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * Gets or sets the parent container\r\n     */\r\n    public parent: Nullable<Container3D>;\r\n\r\n    // Behaviors\r\n    private _behaviors = new Array<Behavior<Control3D>>();\r\n\r\n    /**\r\n     * Gets the list of attached behaviors\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors\r\n     */\r\n    public get behaviors(): Behavior<Control3D>[] {\r\n        return this._behaviors;\r\n    }\r\n\r\n    /**\r\n     * Attach a behavior to the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public addBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        const index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n\r\n        behavior.init();\r\n        const scene = this._host.scene;\r\n        if (scene.isLoading) {\r\n            // We defer the attach when the scene will be loaded\r\n            scene.onDataLoadedObservable.addOnce(() => {\r\n                behavior.attach(this);\r\n            });\r\n        } else {\r\n            behavior.attach(this);\r\n        }\r\n        this._behaviors.push(behavior);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove an attached behavior\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public removeBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        const index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index === -1) {\r\n            return this;\r\n        }\r\n\r\n        this._behaviors[index].detach();\r\n        this._behaviors.splice(index, 1);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets an attached behavior by name\r\n     * @param name defines the name of the behavior to look for\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors\r\n     * @returns null if behavior was not found else the requested behavior\r\n     */\r\n    public getBehaviorByName(name: string): Nullable<Behavior<Control3D>> {\r\n        for (const behavior of this._behaviors) {\r\n            if (behavior.name === name) {\r\n                return behavior;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n\r\n        const mesh = this.mesh;\r\n        if (mesh) {\r\n            mesh.setEnabled(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the control name\r\n     */\r\n    constructor(\r\n        /** Defines the control name */\r\n        public name?: string\r\n    ) {}\r\n\r\n    /**\r\n     * Gets a string representing the class name\r\n     */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n     * Get the current class name of the control.\r\n     * @returns current class name\r\n     */\r\n    public getClassName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Control3D\";\r\n    }\r\n\r\n    /**\r\n     * Gets the transform node used by this control\r\n     */\r\n    public get node(): Nullable<TransformNode> {\r\n        return this._node;\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh used to render this control\r\n     */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        if (this._node instanceof AbstractMesh) {\r\n            return this._node as AbstractMesh;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Link the control as child of the given node\r\n     * @param node defines the node to link to. Use null to unlink the control\r\n     * @returns the current control\r\n     */\r\n    public linkToTransformNode(node: Nullable<TransformNode>): Control3D {\r\n        if (this._node) {\r\n            this._node.parent = node;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal*\r\n     */\r\n    public _prepareNode(scene: Scene): void {\r\n        if (!this._node) {\r\n            this._node = this._createNode(scene);\r\n\r\n            if (!this.node) {\r\n                return;\r\n            }\r\n            this._injectGUI3DReservedDataStore(this.node).control = this; // Store the control on the reservedDataStore field in order to get it when picking\r\n\r\n            const mesh = this.mesh;\r\n            if (mesh) {\r\n                mesh.isPickable = true;\r\n\r\n                this._affectMaterial(mesh);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected _injectGUI3DReservedDataStore(node: TransformNode): any {\r\n        node.reservedDataStore = node.reservedDataStore ?? {};\r\n        node.reservedDataStore.GUI3D = node.reservedDataStore.GUI3D ?? {};\r\n        return node.reservedDataStore.GUI3D;\r\n    }\r\n\r\n    /**\r\n     * Node creation.\r\n     * Can be overriden by children\r\n     * @param scene defines the scene where the node must be attached\r\n     * @returns the attached node or null if none. Must return a Mesh or AbstractMesh if there is an attached visible object\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        // Do nothing by default\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Affect a material to the given mesh\r\n     * @param mesh defines the mesh which will represent the control\r\n     */\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        mesh.material = null;\r\n    }\r\n\r\n    private _isTouchButton3D(control: Control3D): control is TouchButton3D {\r\n        return (control as TouchButton3D)._generatePointerEventType !== undefined;\r\n    }\r\n\r\n    // Pointers\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerMove(target: Control3D, coordinates: Vector3): void {\r\n        this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerEnter(target: Control3D): boolean {\r\n        if (this._enterCount === -1) {\r\n            // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n\r\n        this._enterCount++;\r\n\r\n        if (this._enterCount > 1) {\r\n            return false;\r\n        }\r\n\r\n        this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerOut(target: Control3D): void {\r\n        this._enterCount--;\r\n\r\n        if (this._enterCount > 0) {\r\n            return;\r\n        }\r\n\r\n        this._enterCount = 0;\r\n\r\n        this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerDown(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        this._downCount++;\r\n        this._downPointerIds[pointerId] = this._downPointerIds[pointerId] + 1 || 1;\r\n\r\n        if (this._downCount !== 1) {\r\n            return false;\r\n        }\r\n\r\n        this.onPointerDownObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerUp(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._downCount--;\r\n        this._downPointerIds[pointerId]--;\r\n\r\n        if (this._downPointerIds[pointerId] <= 0) {\r\n            delete this._downPointerIds[pointerId];\r\n        }\r\n\r\n        if (this._downCount < 0) {\r\n            // Handle if forcePointerUp was called prior to this\r\n            this._downCount = 0;\r\n            return;\r\n        }\r\n\r\n        if (this._downCount == 0) {\r\n            if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n                this.onPointerClickObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n            }\r\n            this.onPointerUpObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n            if (this.pointerUpAnimation) {\r\n                this.pointerUpAnimation();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector3.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (const key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector3.Zero(), +key as number, 0, true);\r\n            }\r\n            if (this._downCount > 0) {\r\n                this._downCount = 1;\r\n                this._onPointerUp(this, Vector3.Zero(), 0, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _processObservables(type: number, pickedPoint: Vector3, originMeshPosition: Nullable<Vector3>, pointerId: number, buttonIndex: number): boolean {\r\n        if (this._isTouchButton3D(this) && originMeshPosition) {\r\n            type = this._generatePointerEventType(type, originMeshPosition, this._downCount);\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, pickedPoint);\r\n\r\n            const previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, pickedPoint, pointerId, buttonIndex);\r\n            this._host._lastControlDown[pointerId] = this;\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP || type === PointerEventTypes.POINTERDOUBLETAP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, pickedPoint, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** @internal */\r\n    public _disposeNode(): void {\r\n        if (this._node) {\r\n            this._node.dispose();\r\n            this._node = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        this._disposeNode();\r\n\r\n        // Behaviors\r\n        for (const behavior of this._behaviors) {\r\n            behavior.detach();\r\n        }\r\n    }\r\n}\r\n","import type { Control } from \"../../2D/controls/control\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport type { Nullable } from \"core/types\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\n\r\n/**\r\n * The base class for controls that display content\r\n */\r\nexport class ContentDisplay3D extends Control3D {\r\n    private _content: Control;\r\n    private _facadeTexture: Nullable<AdvancedDynamicTexture>;\r\n    protected _contentResolution = 512;\r\n    protected _contentScaleRatio = 2;\r\n    protected _contentScaleRatioY?: number;\r\n\r\n    /**\r\n     * Gets or sets the GUI 2D content used to display the button's facade\r\n     */\r\n    public get content(): Control {\r\n        return this._content;\r\n    }\r\n\r\n    public set content(value: Control) {\r\n        this._content = value;\r\n\r\n        if (!value || !this._host || !this._host.utilityLayer) {\r\n            return;\r\n        }\r\n\r\n        if (!this._facadeTexture) {\r\n            this._facadeTexture = new AdvancedDynamicTexture(\r\n                \"Facade\",\r\n                this._contentResolution,\r\n                this._contentResolution,\r\n                this._host.utilityLayer.utilityLayerScene,\r\n                true,\r\n                Texture.TRILINEAR_SAMPLINGMODE\r\n            );\r\n            this._setFacadeTextureScaling();\r\n            this._facadeTexture.premulAlpha = true;\r\n        } else {\r\n            this._facadeTexture.rootContainer.clearControls();\r\n        }\r\n\r\n        this._facadeTexture.addControl(value);\r\n\r\n        this._applyFacade(this._facadeTexture);\r\n    }\r\n\r\n    protected _setFacadeTextureScaling() {\r\n        if (this._facadeTexture) {\r\n            this._facadeTexture.rootContainer.scaleX = this._contentScaleRatio;\r\n            this._facadeTexture.rootContainer.scaleY = this._contentScaleRatioY ?? this._contentScaleRatio;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the texture resolution used to render content (512 by default)\r\n     */\r\n    public get contentResolution(): number {\r\n        return this._contentResolution;\r\n    }\r\n\r\n    public set contentResolution(value: number) {\r\n        if (this._contentResolution === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentResolution = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    protected _disposeFacadeTexture() {\r\n        if (this._facadeTexture) {\r\n            this._facadeTexture.dispose();\r\n            this._facadeTexture = null;\r\n        }\r\n    }\r\n\r\n    protected _resetContent() {\r\n        this._disposeFacadeTexture();\r\n        this.content = this._content;\r\n    }\r\n\r\n    /**\r\n     * Apply the facade texture (created from the content property).\r\n     * This function can be overloaded by child classes\r\n     * @param facadeTexture defines the AdvancedDynamicTexture to use\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {}\r\n}\r\n","import { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { ContentDisplay3D } from \"./contentDisplay3D\";\r\n\r\n/**\r\n * Class used as a root to all buttons\r\n */\r\nexport class AbstractButton3D extends ContentDisplay3D {\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"AbstractButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        return new TransformNode(\"button\" + this.name, scene);\r\n    }\r\n}\r\n","import { Vector4 } from \"core/Maths/math.vector\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { CreateBox } from \"core/Meshes/Builders/boxBuilder\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport { StandardMaterial } from \"core/Materials/standardMaterial\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\nimport { AbstractButton3D } from \"./abstractButton3D\";\r\nimport type { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\n\r\n/**\r\n * Options used to create a button in 3D\r\n */\r\nexport interface IButton3DCreationOptions {\r\n    /**\r\n     * Width of the button. Default: 1\r\n     */\r\n    width?: number;\r\n\r\n    /**\r\n     * Height of the button. Default: 1\r\n     */\r\n    height?: number;\r\n\r\n    /**\r\n     * Depth of the button. Default: 0.08\r\n     */\r\n    depth?: number;\r\n}\r\n\r\n/**\r\n * Class used to create a button in 3D\r\n */\r\nexport class Button3D extends AbstractButton3D {\r\n    /** @internal */\r\n    protected _currentMaterial: Material;\r\n\r\n    protected _options: IButton3DCreationOptions;\r\n    protected _height: number;\r\n    protected _depth: number;\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string, options?: IButton3DCreationOptions) {\r\n        super(name);\r\n\r\n        this._options = {\r\n            width: 1,\r\n            height: 1,\r\n            depth: 0.08,\r\n            ...options,\r\n        };\r\n\r\n        // Default animations\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Red();\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Black();\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Apply the facade texture (created from the content property).\r\n     * @param facadeTexture defines the AdvancedDynamicTexture to use\r\n     */\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        (<any>this._currentMaterial).emissiveTexture = facadeTexture;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        const faceUV = new Array(6);\r\n\r\n        for (let i = 0; i < 6; i++) {\r\n            faceUV[i] = new Vector4(0, 0, 0, 0);\r\n        }\r\n        if (scene.useRightHandedSystem) {\r\n            // Flip the u on the texture\r\n            faceUV[0].copyFromFloats(1, 0, 0, 1);\r\n        } else {\r\n            faceUV[1].copyFromFloats(0, 0, 1, 1);\r\n        }\r\n\r\n        const mesh = CreateBox(\r\n            this.name + \"_rootMesh\",\r\n            {\r\n                width: this._options.width,\r\n                height: this._options.height,\r\n                depth: this._options.depth,\r\n                faceUV: faceUV,\r\n                wrap: true,\r\n            },\r\n            scene\r\n        );\r\n\r\n        this._contentScaleRatioY = (this._contentScaleRatio * this._options.width!) / this._options.height!;\r\n        this._setFacadeTextureScaling();\r\n\r\n        return mesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        const material = new StandardMaterial(this.name + \"Material\", mesh.getScene());\r\n        material.specularColor = Color3.Black();\r\n\r\n        mesh.material = material;\r\n        this._currentMaterial = material;\r\n\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this._disposeFacadeTexture();\r\n\r\n        if (this._currentMaterial) {\r\n            this._currentMaterial.dispose();\r\n        }\r\n    }\r\n}\r\n","import type { Nullable } from \"core/types\";\r\nimport { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Class used to create containers for controls\r\n */\r\nexport class Container3D extends Control3D {\r\n    private _blockLayout = false;\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    protected _children = new Array<Control3D>();\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    public get children(): Array<Control3D> {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the layout must be blocked (default is false).\r\n     * This is helpful to optimize layout operation when adding multiple children in a row\r\n     */\r\n    public get blockLayout(): boolean {\r\n        return this._blockLayout;\r\n    }\r\n\r\n    public set blockLayout(value: boolean) {\r\n        if (this._blockLayout === value) {\r\n            return;\r\n        }\r\n\r\n        this._blockLayout = value;\r\n\r\n        if (!this._blockLayout) {\r\n            this._arrangeChildren();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new container\r\n     * @param name defines the container name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    /**\r\n     * Force the container to update the layout. Please note that it will not take blockLayout property in account\r\n     * @returns the current container\r\n     */\r\n    public updateLayout(): Container3D {\r\n        this._arrangeChildren();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the children of this control\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the children of this control\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Control3D): Container3D {\r\n        const index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control.parent = this;\r\n        control._host = this._host;\r\n\r\n        this._children.push(control);\r\n\r\n        if (this._host.utilityLayer) {\r\n            control._prepareNode(this._host.utilityLayer.utilityLayerScene);\r\n\r\n            if (control.node) {\r\n                control.node.parent = this.node;\r\n            }\r\n\r\n            if (!this.blockLayout) {\r\n                this._arrangeChildren();\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * This function will be called everytime a new control is added\r\n     */\r\n    protected _arrangeChildren() {}\r\n\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        return new TransformNode(\"ContainerNode\", scene);\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the children of this control\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): Container3D {\r\n        const index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n            control._disposeNode();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container3D\";\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        for (const control of this._children) {\r\n            control.dispose();\r\n        }\r\n\r\n        this._children.length = 0;\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    /** Control rotation will remain unchanged  */\r\n    public static readonly UNSET_ORIENTATION = 0;\r\n\r\n    /** Control will rotate to make it look at sphere central axis */\r\n    public static readonly FACEORIGIN_ORIENTATION = 1;\r\n\r\n    /** Control will rotate to make it look back at sphere central axis */\r\n    public static readonly FACEORIGINREVERSED_ORIENTATION = 2;\r\n\r\n    /** Control will rotate to look at z axis (0, 0, 1) */\r\n    public static readonly FACEFORWARD_ORIENTATION = 3;\r\n\r\n    /** Control will rotate to look at negative z axis (0, 0, -1) */\r\n    public static readonly FACEFORWARDREVERSED_ORIENTATION = 4;\r\n}\r\n","import { Tools } from \"core/Misc/tools\";\r\nimport { Matrix, Vector3, TmpVectors } from \"core/Maths/math.vector\";\r\nimport type { int } from \"core/types\";\r\n\r\nimport { Container3D } from \"./container3D\";\r\nimport type { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Abstract class used to create a container panel deployed on the surface of a volume\r\n */\r\nexport abstract class VolumeBasedPanel extends Container3D {\r\n    private _columns = 10;\r\n    private _rows = 0;\r\n    private _rowThenColum = true;\r\n\r\n    private _orientation = Container3D.FACEORIGIN_ORIENTATION;\r\n\r\n    protected _cellWidth: number;\r\n    protected _cellHeight: number;\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0;\r\n\r\n    /**\r\n     * Gets or sets the orientation to apply to all controls (BABYLON.Container3D.FaceOriginReversedOrientation by default)\r\n     * | Value | Type                                | Description |\r\n     * | ----- | ----------------------------------- | ----------- |\r\n     * | 0     | UNSET_ORIENTATION                   |  Control rotation will remain unchanged |\r\n     * | 1     | FACEORIGIN_ORIENTATION              |  Control will rotate to make it look at sphere central axis |\r\n     * | 2     | FACEORIGINREVERSED_ORIENTATION      |  Control will rotate to make it look back at sphere central axis |\r\n     * | 3     | FACEFORWARD_ORIENTATION             |  Control will rotate to look at z axis (0, 0, 1) |\r\n     * | 4     | FACEFORWARDREVERSED_ORIENTATION     |  Control will rotate to look at negative z axis (0, 0, -1) |\r\n     */\r\n    public get orientation(): number {\r\n        return this._orientation;\r\n    }\r\n\r\n    public set orientation(value: number) {\r\n        if (this._orientation === value) {\r\n            return;\r\n        }\r\n\r\n        this._orientation = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the number of columns requested (10 by default).\r\n     * The panel will automatically compute the number of rows based on number of child controls.\r\n     */\r\n    public get columns(): int {\r\n        return this._columns;\r\n    }\r\n\r\n    public set columns(value: int) {\r\n        if (this._columns === value) {\r\n            return;\r\n        }\r\n\r\n        this._columns = value;\r\n        this._rowThenColum = true;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a the number of rows requested.\r\n     * The panel will automatically compute the number of columns based on number of child controls.\r\n     */\r\n    public get rows(): int {\r\n        return this._rows;\r\n    }\r\n\r\n    public set rows(value: int) {\r\n        if (this._rows === value) {\r\n            return;\r\n        }\r\n\r\n        this._rows = value;\r\n        this._rowThenColum = false;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates new VolumeBasedPanel\r\n     * @param name\r\n     */\r\n    public constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        this._cellWidth = 0;\r\n        this._cellHeight = 0;\r\n        let rows = 0;\r\n        let columns = 0;\r\n        let controlCount = 0;\r\n\r\n        const currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (const child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            //   child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            const boundingBox = child.mesh.getHierarchyBoundingVectors();\r\n            const extendSize = TmpVectors.Vector3[0];\r\n            const diff = TmpVectors.Vector3[1];\r\n\r\n            boundingBox.max.subtractToRef(boundingBox.min, diff);\r\n\r\n            diff.scaleInPlace(0.5);\r\n\r\n            Vector3.TransformNormalToRef(diff, currentInverseWorld, extendSize);\r\n\r\n            this._cellWidth = Math.max(this._cellWidth, extendSize.x * 2);\r\n            this._cellHeight = Math.max(this._cellHeight, extendSize.y * 2);\r\n        }\r\n\r\n        this._cellWidth += this.margin * 2;\r\n        this._cellHeight += this.margin * 2;\r\n\r\n        // Arrange\r\n        if (this._rowThenColum) {\r\n            columns = this._columns;\r\n            rows = Math.ceil(controlCount / this._columns);\r\n        } else {\r\n            rows = this._rows;\r\n            columns = Math.ceil(controlCount / this._rows);\r\n        }\r\n\r\n        const startOffsetX = columns * 0.5 * this._cellWidth;\r\n        const startOffsetY = rows * 0.5 * this._cellHeight;\r\n        const nodeGrid = [];\r\n        let cellCounter = 0;\r\n\r\n        if (this._rowThenColum) {\r\n            for (let r = 0; r < rows; r++) {\r\n                for (let c = 0; c < columns; c++) {\r\n                    nodeGrid.push(new Vector3(c * this._cellWidth - startOffsetX + this._cellWidth / 2, r * this._cellHeight - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (let c = 0; c < columns; c++) {\r\n                for (let r = 0; r < rows; r++) {\r\n                    nodeGrid.push(new Vector3(c * this._cellWidth - startOffsetX + this._cellWidth / 2, r * this._cellHeight - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        cellCounter = 0;\r\n        for (const child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            this._mapGridNode(child, nodeGrid[cellCounter]);\r\n\r\n            cellCounter++;\r\n        }\r\n\r\n        this._finalProcessing();\r\n    }\r\n\r\n    /** Child classes must implement this function to provide correct control positioning */\r\n    protected abstract _mapGridNode(control: Control3D, nodePosition: Vector3): void;\r\n\r\n    /** Child classes can implement this function to provide additional processing */\r\n    protected _finalProcessing() {}\r\n}\r\n","import { Tools } from \"core/Misc/tools\";\r\nimport { Matrix, TmpVectors, Vector3 } from \"core/Maths/math.vector\";\r\nimport type { float } from \"core/types\";\r\n\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport type { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\nimport { Axis, Space } from \"core/Maths/math.axis\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a cylinder\r\n */\r\nexport class CylinderPanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the cylinder where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        const mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n        const newPos = this._cylindricalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new Vector3(2 * newPos.x, newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new Vector3(-newPos.x, newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(Axis.Y, Math.PI, Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _cylindricalMapping(source: Vector3) {\r\n        const newPos = new Vector3(0, source.y, this._radius);\r\n\r\n        const yAngle = source.x / this._radius;\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, 0, 0, TmpVectors.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, TmpVectors.Matrix[0]);\r\n    }\r\n}\r\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"fluentVertexShader\";\nconst shader = `precision highp float;\rattribute vec3 position;\rattribute vec3 normal;\rattribute vec2 uv;\runiform mat4 world;\runiform mat4 viewProjection;\rvarying vec2 vUV;\r#ifdef BORDER\nvarying vec2 scaleInfo;\runiform float borderWidth;\runiform vec3 scaleFactor;\r#endif\n#ifdef HOVERLIGHT\nvarying vec3 worldPosition;\r#endif\nvoid main(void) {\rvUV=uv;\r#ifdef BORDER\nvec3 scale=scaleFactor;\rfloat minScale=min(min(scale.x,scale.y),scale.z);\rfloat maxScale=max(max(scale.x,scale.y),scale.z);\rfloat minOverMiddleScale=minScale/(scale.x+scale.y+scale.z-minScale-maxScale);\rfloat areaYZ=scale.y*scale.z;\rfloat areaXZ=scale.x*scale.z;\rfloat areaXY=scale.x*scale.y;\rfloat scaledBorderWidth=borderWidth; \rif (abs(normal.x)==1.0) \r{\rscale.x=scale.y;\rscale.y=scale.z;\rif (areaYZ>areaXZ && areaYZ>areaXY)\r{\rscaledBorderWidth*=minOverMiddleScale;\r}\r}\relse if (abs(normal.y)==1.0) \r{\rscale.x=scale.z;\rif (areaXZ>areaXY && areaXZ>areaYZ)\r{\rscaledBorderWidth*=minOverMiddleScale;\r}\r}\relse \r{\rif (areaXY>areaYZ && areaXY>areaXZ)\r{\rscaledBorderWidth*=minOverMiddleScale;\r}\r}\rfloat scaleRatio=min(scale.x,scale.y)/max(scale.x,scale.y);\rif (scale.x>scale.y)\r{\rscaleInfo.x=1.0-(scaledBorderWidth*scaleRatio);\rscaleInfo.y=1.0-scaledBorderWidth;\r}\relse\r{\rscaleInfo.x=1.0-scaledBorderWidth;\rscaleInfo.y=1.0-(scaledBorderWidth*scaleRatio);\r} \r#endif \nvec4 worldPos=world*vec4(position,1.0);\r#ifdef HOVERLIGHT\nworldPosition=worldPos.xyz;\r#endif\ngl_Position=viewProjection*worldPos;\r}\r`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const fluentVertexShader = { name, shader };\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { serializeAsColor4, serializeAsVector3, serializeAsTexture, serialize, expandToProperty, serializeAsColor3, SerializationHelper } from \"core/Misc/decorators\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport { Vector3, TmpVectors } from \"core/Maths/math.vector\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\nimport { MaterialHelper } from \"core/Materials/materialHelper\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { Color3, Color4 } from \"core/Maths/math.color\";\r\n\r\nimport \"./shaders/fluent.vertex\";\r\nimport \"./shaders/fluent.fragment\";\r\n\r\n/** @internal */\r\nexport class FluentMaterialDefines extends MaterialDefines {\r\n    public INNERGLOW = false;\r\n    public BORDER = false;\r\n    public HOVERLIGHT = false;\r\n    public TEXTURE = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render controls with fluent design\r\n */\r\nexport class FluentMaterial extends PushMaterial {\r\n    /**\r\n     * Gets or sets inner glow intensity. A value of 0 means no glow (default is 0.5)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public innerGlowColorIntensity = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the inner glow color (white by default)\r\n     */\r\n    @serializeAsColor3()\r\n    public innerGlowColor = new Color3(1.0, 1.0, 1.0);\r\n\r\n    /**\r\n     * Gets or sets the albedo color (Default is Color3(0.3, 0.35, 0.4))\r\n     */\r\n    @serializeAsColor3()\r\n    public albedoColor = new Color3(0.3, 0.35, 0.4);\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if borders must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderBorders = false;\r\n\r\n    /**\r\n     * Gets or sets border width (default is 0.5)\r\n     */\r\n    @serialize()\r\n    public borderWidth = 0.5;\r\n\r\n    /**\r\n     * Gets or sets a value indicating the smoothing value applied to border edges (0.02 by default)\r\n     */\r\n    @serialize()\r\n    public edgeSmoothingValue = 0.02;\r\n\r\n    /**\r\n     * Gets or sets the minimum value that can be applied to border width (default is 0.1)\r\n     */\r\n    @serialize()\r\n    public borderMinValue = 0.1;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if hover light must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderHoverLight = false;\r\n\r\n    /**\r\n     * Gets or sets the radius used to render the hover light (default is 0.01)\r\n     */\r\n    @serialize()\r\n    public hoverRadius = 0.01;\r\n\r\n    /**\r\n     * Gets or sets the color used to render the hover light (default is Color4(0.3, 0.3, 0.3, 1.0))\r\n     */\r\n    @serializeAsColor4()\r\n    public hoverColor = new Color4(0.3, 0.3, 0.3, 1.0);\r\n\r\n    /**\r\n     * Gets or sets the hover light position in world space (default is Vector3.Zero())\r\n     */\r\n    @serializeAsVector3()\r\n    public hoverPosition = Vector3.Zero();\r\n\r\n    @serializeAsTexture(\"albedoTexture\")\r\n    private _albedoTexture: Nullable<BaseTexture>;\r\n\r\n    /** Gets or sets the texture to use for albedo color */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\r\n    public albedoTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Creates a new Fluent material\r\n     * @param name defines the name of the material\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return this.alpha !== 1.0;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new FluentMaterialDefines();\r\n        }\r\n\r\n        const scene = this.getScene();\r\n        const defines = <FluentMaterialDefines>subMesh.materialDefines;\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (defines._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (defines._areTexturesDirty) {\r\n            defines.INNERGLOW = this.innerGlowColorIntensity > 0;\r\n            defines.BORDER = this.renderBorders;\r\n            defines.HOVERLIGHT = this.renderHoverLight;\r\n\r\n            if (this._albedoTexture) {\r\n                if (!this._albedoTexture.isReadyOrNotBlocking()) {\r\n                    return false;\r\n                } else {\r\n                    defines.TEXTURE = true;\r\n                }\r\n            } else {\r\n                defines.TEXTURE = false;\r\n            }\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n            attribs.push(VertexBuffer.NormalKind);\r\n            attribs.push(VertexBuffer.UVKind);\r\n\r\n            const shaderName = \"fluent\";\r\n\r\n            const uniforms = [\r\n                \"world\",\r\n                \"viewProjection\",\r\n                \"innerGlowColor\",\r\n                \"albedoColor\",\r\n                \"borderWidth\",\r\n                \"edgeSmoothingValue\",\r\n                \"scaleFactor\",\r\n                \"borderMinValue\",\r\n                \"hoverColor\",\r\n                \"hoverPosition\",\r\n                \"hoverRadius\",\r\n                \"textureMatrix\",\r\n            ];\r\n\r\n            const samplers = [\"albedoSampler\"];\r\n            const uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4,\r\n            });\r\n\r\n            const join = defines.toString();\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: null,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: { maxSimultaneousLights: 4 },\r\n                    },\r\n                    engine\r\n                ),\r\n                defines,\r\n                this._materialContext\r\n            );\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const scene = this.getScene();\r\n\r\n        const defines = <FluentMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            this._activeEffect.setColor4(\"albedoColor\", this.albedoColor, this.alpha);\r\n\r\n            if (defines.INNERGLOW) {\r\n                this._activeEffect.setColor4(\"innerGlowColor\", this.innerGlowColor, this.innerGlowColorIntensity);\r\n            }\r\n\r\n            if (defines.BORDER) {\r\n                this._activeEffect.setFloat(\"borderWidth\", this.borderWidth);\r\n                this._activeEffect.setFloat(\"edgeSmoothingValue\", this.edgeSmoothingValue);\r\n                this._activeEffect.setFloat(\"borderMinValue\", this.borderMinValue);\r\n\r\n                mesh.getBoundingInfo().boundingBox.extendSize.multiplyToRef(mesh.scaling, TmpVectors.Vector3[0]);\r\n                this._activeEffect.setVector3(\"scaleFactor\", TmpVectors.Vector3[0]);\r\n            }\r\n\r\n            if (defines.HOVERLIGHT) {\r\n                this._activeEffect.setDirectColor4(\"hoverColor\", this.hoverColor);\r\n                this._activeEffect.setFloat(\"hoverRadius\", this.hoverRadius);\r\n                this._activeEffect.setVector3(\"hoverPosition\", this.hoverPosition);\r\n            }\r\n\r\n            if (defines.TEXTURE && this._albedoTexture) {\r\n                this._activeEffect.setTexture(\"albedoSampler\", this._albedoTexture);\r\n                const matrix = this._albedoTexture.getTextureMatrix();\r\n                this._activeEffect.setMatrix(\"textureMatrix\", matrix);\r\n            }\r\n        }\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        const activeTextures = super.getActiveTextures();\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): FluentMaterial {\r\n        return SerializationHelper.Clone(() => new FluentMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n        serializationObject.customType = \"BABYLON.GUI.FluentMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FluentMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): FluentMaterial {\r\n        return SerializationHelper.Parse(() => new FluentMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.FluentMaterial\", FluentMaterial);\r\n","import type { Scene } from \"core/scene\";\r\nimport type { Vector3 } from \"core/Maths/math.vector\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Control3D } from \"./control3D\";\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { Mesh } from \"core/Meshes/mesh\";\r\nimport { CreateBox } from \"core/Meshes/Builders/boxBuilder\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { FluentMaterial } from \"../materials/fluent/fluentMaterial\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Logger } from \"core/Misc/logger\";\r\nimport type { Container3D } from \"./container3D\";\r\nimport type { TouchHolographicButton } from \"./touchHolographicButton\";\r\n\r\n/**\r\n * Simple menu that can contain holographic buttons\r\n */\r\nexport class TouchHolographicMenu extends VolumeBasedPanel {\r\n    protected _backPlate: Mesh;\r\n    private _backPlateMaterial: FluentMaterial;\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<Vector3>>>;\r\n\r\n    private _currentMin: Nullable<Vector3>;\r\n    private _currentMax: Nullable<Vector3>;\r\n\r\n    private _backPlateMargin = 1.25;\r\n\r\n    /**\r\n     * Scale for the buttons added to the menu\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    protected static MENU_BUTTON_SCALE: number = 1;\r\n\r\n    /**\r\n     * Gets or sets the margin size of the backplate in button size units.\r\n     * Setting this to 1, will make the backPlate margin the size of 1 button\r\n     */\r\n    public get backPlateMargin(): number {\r\n        return this._backPlateMargin;\r\n    }\r\n\r\n    public set backPlateMargin(value: number) {\r\n        this._backPlateMargin = value;\r\n\r\n        if (this._children.length >= 1) {\r\n            this.children.forEach((control) => {\r\n                this._updateCurrentMinMax(control.position);\r\n            });\r\n\r\n            this._updateMargins();\r\n        }\r\n    }\r\n\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        const node = new Mesh(`menu_${this.name}`, scene);\r\n\r\n        this._backPlate = CreateBox(\"backPlate\" + this.name, { size: 1 }, scene);\r\n        this._backPlate.parent = node;\r\n\r\n        return node;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        this._backPlateMaterial = new FluentMaterial(this.name + \"backPlateMaterial\", mesh.getScene());\r\n        this._backPlateMaterial.albedoColor = new Color3(0.08, 0.15, 0.55);\r\n        this._backPlateMaterial.renderBorders = true;\r\n        this._backPlateMaterial.renderHoverLight = true;\r\n\r\n        this._pickedPointObserver = this._host.onPickedPointChangedObservable.add((pickedPoint) => {\r\n            if (pickedPoint) {\r\n                this._backPlateMaterial.hoverPosition = pickedPoint;\r\n                this._backPlateMaterial.hoverColor.a = 1.0;\r\n            } else {\r\n                this._backPlateMaterial.hoverColor.a = 0;\r\n            }\r\n        });\r\n\r\n        this._backPlate.material = this._backPlateMaterial;\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        // Simple plane mapping for the menu\r\n        const mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        control.position = nodePosition.clone();\r\n\r\n        this._updateCurrentMinMax(nodePosition);\r\n    }\r\n\r\n    protected _finalProcessing() {\r\n        this._updateMargins();\r\n    }\r\n\r\n    private _updateCurrentMinMax(nodePosition: Vector3) {\r\n        if (!this._currentMin) {\r\n            this._currentMin = nodePosition.clone();\r\n            this._currentMax = nodePosition.clone();\r\n        }\r\n\r\n        this._currentMin.minimizeInPlace(nodePosition);\r\n        this._currentMax!.maximizeInPlace(nodePosition);\r\n    }\r\n\r\n    private _updateMargins() {\r\n        if (this._children.length > 0) {\r\n            this._currentMin!.addInPlaceFromFloats(-this._cellWidth / 2, -this._cellHeight / 2, 0);\r\n            this._currentMax!.addInPlaceFromFloats(this._cellWidth / 2, this._cellHeight / 2, 0);\r\n            const extendSize = this._currentMax!.subtract(this._currentMin!);\r\n\r\n            // Also add a % margin\r\n            this._backPlate.scaling.x = extendSize.x + this._cellWidth * this.backPlateMargin;\r\n            this._backPlate.scaling.y = extendSize.y + this._cellHeight * this.backPlateMargin;\r\n            this._backPlate.scaling.z = 0.001;\r\n\r\n            for (let i = 0; i < this._children.length; i++) {\r\n                this._children[i].position.subtractInPlace(this._currentMin!).subtractInPlace(extendSize.scale(0.5));\r\n                this._children[i].position.z -= 0.01;\r\n            }\r\n        }\r\n\r\n        this._currentMin = null;\r\n        this._currentMax = null;\r\n    }\r\n\r\n    /**\r\n     * Creates a holographic menu GUI 3D control\r\n     * @param name name of the menu\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    /**\r\n     * Adds a button to the menu.\r\n     * Please note that the back material of the button will be set to transparent as it is attached to the menu.\r\n     *\r\n     * @param button Button to add\r\n     * @returns This menu\r\n     */\r\n    public addButton(button: TouchHolographicButton): TouchHolographicMenu {\r\n        // Block updating the layout until the button is resized (which has to happen after node creation)\r\n        const wasLayoutBlocked = this.blockLayout;\r\n        if (!wasLayoutBlocked) {\r\n            this.blockLayout = true;\r\n        }\r\n\r\n        super.addControl(button);\r\n\r\n        button.isBackplateVisible = false;\r\n        button.scaling.scaleInPlace(TouchHolographicMenu.MENU_BUTTON_SCALE);\r\n\r\n        // Unblocking the layout triggers the pending layout update that uses the size of the buttons to determine the size of the backing mesh\r\n        if (!wasLayoutBlocked) {\r\n            this.blockLayout = false;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * This method should not be used directly. It is inherited from `Container3D`.\r\n     * Please use `addButton` instead.\r\n     * @param _control\r\n     * @returns\r\n     */\r\n    public addControl(_control: Control3D): Container3D {\r\n        Logger.Warn(\"TouchHolographicMenu can only contain buttons. Please use the method `addButton` instead.\");\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Disposes the menu\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n    }\r\n}\r\n","import type { Scene } from \"core/scene\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport { TouchHolographicMenu } from \"./touchHolographicMenu\";\r\nimport { HandConstraintBehavior } from \"core/Behaviors/Meshes/handConstraintBehavior\";\r\nimport type { WebXRExperienceHelper } from \"core/XR/webXRExperienceHelper\";\r\n\r\n/**\r\n * Hand menu that displays buttons and floats around the hand.\r\n * @since 5.0.0\r\n */\r\nexport class HandMenu extends TouchHolographicMenu {\r\n    private _handConstraintBehavior: HandConstraintBehavior;\r\n\r\n    /**\r\n     * The hand constraint behavior setting the transformation of this node\r\n     */\r\n    public get handConstraintBehavior() {\r\n        return this._handConstraintBehavior;\r\n    }\r\n\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        const node = super._createNode(scene)! as Mesh;\r\n\r\n        this._handConstraintBehavior.attach(node);\r\n\r\n        return node;\r\n    }\r\n\r\n    /**\r\n     * Creates a hand menu GUI 3D control\r\n     * @param xr the WebXRExperienceHelper used to link this control to the enabled WebXRHandTracking feature\r\n     * @param name name of the hand menu\r\n     */\r\n    constructor(xr: WebXRExperienceHelper, name?: string) {\r\n        super(name);\r\n\r\n        this._handConstraintBehavior = new HandConstraintBehavior();\r\n        this._handConstraintBehavior.linkToXRExperience(xr);\r\n        this.backPlateMargin = 0.15;\r\n        this.rows = 3;\r\n    }\r\n\r\n    /**\r\n     * Disposes the hand menu\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this._handConstraintBehavior.detach();\r\n    }\r\n}\r\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"fluentBackplatePixelShader\";\nconst shader = `uniform vec3 cameraPosition;\rvarying vec3 vPosition;\rvarying vec3 vNormal;\rvarying vec2 vUV;\rvarying vec3 vTangent;\rvarying vec3 vBinormal;\rvarying vec4 vColor;\rvarying vec4 vExtra1;\rvarying vec4 vExtra2;\rvarying vec4 vExtra3;\runiform float _Radius_;\runiform float _Line_Width_;\runiform bool _Absolute_Sizes_;\runiform float _Filter_Width_;\runiform vec4 _Base_Color_;\runiform vec4 _Line_Color_;\runiform float _Radius_Top_Left_;\runiform float _Radius_Top_Right_;\runiform float _Radius_Bottom_Left_;\runiform float _Radius_Bottom_Right_;\runiform vec3 _Blob_Position_;\runiform float _Blob_Intensity_;\runiform float _Blob_Near_Size_;\runiform float _Blob_Far_Size_;\runiform float _Blob_Near_Distance_;\runiform float _Blob_Far_Distance_;\runiform float _Blob_Fade_Length_;\runiform float _Blob_Pulse_;\runiform float _Blob_Fade_;\runiform sampler2D _Blob_Texture_;\runiform vec3 _Blob_Position_2_;\runiform float _Blob_Near_Size_2_;\runiform float _Blob_Pulse_2_;\runiform float _Blob_Fade_2_;\runiform float _Rate_;\runiform vec4 _Highlight_Color_;\runiform float _Highlight_Width_;\runiform vec4 _Highlight_Transform_;\runiform float _Highlight_;\runiform float _Iridescence_Intensity_;\runiform float _Iridescence_Edge_Intensity_;\runiform float _Angle_;\runiform float _Fade_Out_;\runiform bool _Reflected_;\runiform float _Frequency_;\runiform float _Vertical_Offset_;\runiform sampler2D _Iridescent_Map_;\runiform bool _Use_Global_Left_Index_;\runiform bool _Use_Global_Right_Index_;\runiform vec4 Global_Left_Index_Tip_Position;\runiform vec4 Global_Right_Index_Tip_Position;\rvoid Round_Rect_Fragment_B31(\rfloat Radius,\rfloat Line_Width,\rvec4 Line_Color,\rfloat Filter_Width,\rvec2 UV,\rfloat Line_Visibility,\rvec4 Rect_Parms,\rvec4 Fill_Color,\rout vec4 Color)\r{\rfloat d=length(max(abs(UV)-Rect_Parms.xy,0.0));\rfloat dx=max(fwidth(d)*Filter_Width,0.00001);\rfloat g=min(Rect_Parms.z,Rect_Parms.w);\rfloat dgrad=max(fwidth(g)*Filter_Width,0.00001);\rfloat Inside_Rect=clamp(g/dgrad,0.0,1.0);\rfloat inner=clamp((d+dx*0.5-max(Radius-Line_Width,d-dx*0.5))/dx,0.0,1.0);\rColor=clamp(mix(Fill_Color,Line_Color,inner),0.0,1.0)*Inside_Rect;\r}\rvoid Blob_Fragment_B71(\rsampler2D Blob_Texture,\rvec4 Blob_Info1,\rvec4 Blob_Info2,\rout vec4 Blob_Color)\r{\rfloat k1=dot(Blob_Info1.xy,Blob_Info1.xy);\rfloat k2=dot(Blob_Info2.xy,Blob_Info2.xy);\rvec3 closer=k1<k2 ? vec3(k1,Blob_Info1.z,Blob_Info1.w) : vec3(k2,Blob_Info2.z,Blob_Info2.w);\rBlob_Color=closer.z*texture(Blob_Texture,vec2(vec2(sqrt(closer.x),closer.y).x,1.0-vec2(sqrt(closer.x),closer.y).y))*clamp(1.0-closer.x,0.0,1.0);\r}\rvoid Line_Fragment_B48(\rvec4 Base_Color,\rvec4 Highlight_Color,\rfloat Highlight_Width,\rvec3 Line_Vertex,\rfloat Highlight,\rout vec4 Line_Color)\r{\rfloat k2=1.0-clamp(abs(Line_Vertex.y/Highlight_Width),0.0,1.0);\rLine_Color=mix(Base_Color,Highlight_Color,Highlight*k2);\r}\rvoid Scale_RGB_B54(\rvec4 Color,\rfloat Scalar,\rout vec4 Result)\r{\rResult=vec4(Scalar,Scalar,Scalar,1)*Color;\r}\rvoid Conditional_Float_B38(\rbool Which,\rfloat If_True,\rfloat If_False,\rout float Result)\r{\rResult=Which ? If_True : If_False;\r}\rvoid main()\r{\rfloat R_Q72;\rfloat G_Q72;\rfloat B_Q72;\rfloat A_Q72;\rR_Q72=vColor.r; G_Q72=vColor.g; B_Q72=vColor.b; A_Q72=vColor.a;\rvec4 Blob_Color_Q71;\r#if BLOB_ENABLE\nfloat k1=dot(vExtra2.xy,vExtra2.xy);\rfloat k2=dot(vExtra3.xy,vExtra3.xy);\rvec3 closer=k1<k2 ? vec3(k1,vExtra2.z,vExtra2.w) : vec3(k2,vExtra3.z,vExtra3.w);\rBlob_Color_Q71=closer.z*texture(_Blob_Texture_,vec2(vec2(sqrt(closer.x),closer.y).x,1.0-vec2(sqrt(closer.x),closer.y).y))*clamp(1.0-closer.x,0.0,1.0);\r#else\nBlob_Color_Q71=vec4(0,0,0,0);\r#endif\nvec4 Line_Color_Q48;\rLine_Fragment_B48(_Line_Color_,_Highlight_Color_,_Highlight_Width_,vTangent,_Highlight_,Line_Color_Q48);\rfloat X_Q67;\rfloat Y_Q67;\rX_Q67=vUV.x;\rY_Q67=vUV.y;\rvec3 Incident_Q66=normalize(vPosition-cameraPosition);\rvec3 Reflected_Q60=reflect(Incident_Q66,vBinormal);\rfloat Product_Q63=Y_Q67*_Vertical_Offset_;\rfloat Dot_Q68=dot(Incident_Q66, Reflected_Q60);\rfloat Dot_Q57=dot(vNormal, Incident_Q66);\rfloat Result_Q38;\rConditional_Float_B38(_Reflected_,Dot_Q68,Dot_Q57,Result_Q38);\rfloat Product_Q64=Result_Q38*_Frequency_;\rfloat Sum_Q69=Product_Q64+1.0;\rfloat Product_Q70=Sum_Q69*0.5;\rfloat Sum_Q62=Product_Q63+Product_Q70;\rfloat FractF_Q59=fract(Sum_Q62);\rvec2 Vec2_Q65=vec2(FractF_Q59,0.5);\rvec4 Color_Q58;\r#if IRIDESCENT_MAP_ENABLE\nColor_Q58=texture(_Iridescent_Map_,Vec2_Q65);\r#else\nColor_Q58=vec4(0,0,0,0);\r#endif\nvec4 Result_Q54;\rScale_RGB_B54(Color_Q58,_Iridescence_Edge_Intensity_,Result_Q54);\rvec4 Result_Q55;\rScale_RGB_B54(Color_Q58,_Iridescence_Intensity_,Result_Q55);\rvec4 Base_And_Iridescent_Q53;\rBase_And_Iridescent_Q53=Line_Color_Q48+vec4(Result_Q54.rgb,0.0);\rvec4 Base_And_Iridescent_Q56;\rBase_And_Iridescent_Q56=_Base_Color_+vec4(Result_Q55.rgb,0.0);\rvec4 Result_Q52=Base_And_Iridescent_Q53; Result_Q52.a=1.0;\rvec4 Result_Q35=Blob_Color_Q71+(1.0-Blob_Color_Q71.a)*Base_And_Iridescent_Q56;\rvec4 Color_Q31;\rRound_Rect_Fragment_B31(R_Q72,G_Q72,Result_Q52,_Filter_Width_,vUV,1.0,vExtra1,Result_Q35,Color_Q31);\rvec4 Result_Q47=_Fade_Out_*Color_Q31;\rvec4 Out_Color=Result_Q47;\rfloat Clip_Threshold=0.001;\rbool To_sRGB=false;\rgl_FragColor=Out_Color;\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const fluentBackplatePixelShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"fluentBackplateVertexShader\";\nconst shader = `uniform mat4 world;\runiform mat4 viewProjection;\runiform vec3 cameraPosition;\rattribute vec3 position;\rattribute vec3 normal;\r#ifdef TANGENT\nattribute vec3 tangent;\r#else\nconst vec3 tangent=vec3(0.);\r#endif\nuniform float _Radius_;\runiform float _Line_Width_;\runiform bool _Absolute_Sizes_;\runiform float _Filter_Width_;\runiform vec4 _Base_Color_;\runiform vec4 _Line_Color_;\runiform float _Radius_Top_Left_;\runiform float _Radius_Top_Right_;\runiform float _Radius_Bottom_Left_;\runiform float _Radius_Bottom_Right_;\runiform vec3 _Blob_Position_;\runiform float _Blob_Intensity_;\runiform float _Blob_Near_Size_;\runiform float _Blob_Far_Size_;\runiform float _Blob_Near_Distance_;\runiform float _Blob_Far_Distance_;\runiform float _Blob_Fade_Length_;\runiform float _Blob_Pulse_;\runiform float _Blob_Fade_;\runiform sampler2D _Blob_Texture_;\runiform vec3 _Blob_Position_2_;\runiform float _Blob_Near_Size_2_;\runiform float _Blob_Pulse_2_;\runiform float _Blob_Fade_2_;\runiform float _Rate_;\runiform vec4 _Highlight_Color_;\runiform float _Highlight_Width_;\runiform vec4 _Highlight_Transform_;\runiform float _Highlight_;\runiform float _Iridescence_Intensity_;\runiform float _Iridescence_Edge_Intensity_;\runiform float _Angle_;\runiform float _Fade_Out_;\runiform bool _Reflected_;\runiform float _Frequency_;\runiform float _Vertical_Offset_;\runiform sampler2D _Iridescent_Map_;\runiform bool _Use_Global_Left_Index_;\runiform bool _Use_Global_Right_Index_;\runiform vec4 Global_Left_Index_Tip_Position;\runiform vec4 Global_Right_Index_Tip_Position;\rvarying vec3 vPosition;\rvarying vec3 vNormal;\rvarying vec2 vUV;\rvarying vec3 vTangent;\rvarying vec3 vBinormal;\rvarying vec4 vColor;\rvarying vec4 vExtra1;\rvarying vec4 vExtra2;\rvarying vec4 vExtra3;\rvoid Object_To_World_Pos_B115(\rvec3 Pos_Object,\rout vec3 Pos_World)\r{\rPos_World=(world*vec4(Pos_Object,1.0)).xyz;\r}\rvoid PickDir_B140(\rfloat Degrees,\rvec3 DirX,\rvec3 DirY,\rout vec3 Dir)\r{\rfloat a=Degrees*3.14159/180.0;\rDir=cos(a)*DirX+sin(a)*DirY;\r}\rvoid Round_Rect_Vertex_B139(\rvec2 UV,\rfloat Radius,\rfloat Margin,\rfloat Anisotropy,\rfloat Gradient1,\rfloat Gradient2,\rout vec2 Rect_UV,\rout vec4 Rect_Parms,\rout vec2 Scale_XY,\rout vec2 Line_UV)\r{\rScale_XY=vec2(Anisotropy,1.0);\rLine_UV=(UV-vec2(0.5,0.5));\rRect_UV=Line_UV*Scale_XY;\rRect_Parms.xy=Scale_XY*0.5-vec2(Radius,Radius)-vec2(Margin,Margin);\rRect_Parms.z=Gradient1; \rRect_Parms.w=Gradient2;\r}\rvoid Line_Vertex_B135(\rvec2 Scale_XY,\rvec2 UV,\rfloat Time,\rfloat Rate,\rvec4 Highlight_Transform,\rout vec3 Line_Vertex)\r{\rfloat angle2=(Rate*Time)*2.0*3.1416;\rfloat sinAngle2=sin(angle2);\rfloat cosAngle2=cos(angle2);\rvec2 xformUV=UV*Highlight_Transform.xy+Highlight_Transform.zw;\rLine_Vertex.x=0.0;\rLine_Vertex.y=cosAngle2*xformUV.x-sinAngle2*xformUV.y;\rLine_Vertex.z=0.0; \r}\rvoid Blob_Vertex_B180(\rvec3 Position,\rvec3 Normal,\rvec3 Tangent,\rvec3 Bitangent,\rvec3 Blob_Position,\rfloat Intensity,\rfloat Blob_Near_Size,\rfloat Blob_Far_Size,\rfloat Blob_Near_Distance,\rfloat Blob_Far_Distance,\rfloat Blob_Fade_Length,\rfloat Blob_Pulse,\rfloat Blob_Fade,\rout vec4 Blob_Info)\r{\rvec3 blob=Blob_Position;\rvec3 delta=blob-Position;\rfloat dist=dot(Normal,delta);\rfloat lerpValue=clamp((abs(dist)-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance),0.0,1.0);\rfloat fadeValue=1.0-clamp((abs(dist)-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);\rfloat size=Blob_Near_Size+(Blob_Far_Size-Blob_Near_Size)*lerpValue;\rvec2 blobXY=vec2(dot(delta,Tangent),dot(delta,Bitangent))/(0.0001+size);\rfloat Fade=fadeValue*Intensity*Blob_Fade;\rfloat Distance=(lerpValue*0.5+0.5)*(1.0-Blob_Pulse);\rBlob_Info=vec4(blobXY.x,blobXY.y,Distance,Fade);\r}\rvoid Move_Verts_B129(\rfloat Anisotropy,\rvec3 P,\rfloat Radius,\rout vec3 New_P,\rout vec2 New_UV,\rout float Radial_Gradient,\rout vec3 Radial_Dir)\r{\rvec2 UV=P.xy*2.0+0.5;\rvec2 center=clamp(UV,0.0,1.0);\rvec2 delta=UV-center;\rvec2 r2=2.0*vec2(Radius/Anisotropy,Radius);\rNew_UV=center+r2*(UV-2.0*center+0.5);\rNew_P=vec3(New_UV-0.5,P.z);\rRadial_Gradient=1.0-length(delta)*2.0;\rRadial_Dir=vec3(delta*r2,0.0);\r}\rvoid Object_To_World_Dir_B132(\rvec3 Dir_Object,\rout vec3 Binormal_World,\rout vec3 Binormal_World_N,\rout float Binormal_Length)\r{\rBinormal_World=(world*vec4(Dir_Object,0.0)).xyz;\rBinormal_Length=length(Binormal_World);\rBinormal_World_N=Binormal_World/Binormal_Length;\r}\rvoid RelativeOrAbsoluteDetail_B147(\rfloat Nominal_Radius,\rfloat Nominal_LineWidth,\rbool Absolute_Measurements,\rfloat Height,\rout float Radius,\rout float Line_Width)\r{\rfloat scale=Absolute_Measurements ? 1.0/Height : 1.0;\rRadius=Nominal_Radius*scale;\rLine_Width=Nominal_LineWidth*scale;\r}\rvoid Edge_AA_Vertex_B130(\rvec3 Position_World,\rvec3 Position_Object,\rvec3 Normal_Object,\rvec3 Eye,\rfloat Radial_Gradient,\rvec3 Radial_Dir,\rvec3 Tangent,\rout float Gradient1,\rout float Gradient2)\r{\rvec3 I=(Eye-Position_World);\rvec3 T=(world* vec4(Tangent,0.0)).xyz;\rfloat g=(dot(T,I)<0.0) ? 0.0 : 1.0;\rif (Normal_Object.z==0.0) { \rGradient1=Position_Object.z>0.0 ? g : 1.0;\rGradient2=Position_Object.z>0.0 ? 1.0 : g;\r} else {\rGradient1=g+(1.0-g)*(Radial_Gradient);\rGradient2=1.0;\r}\r}\rvoid Pick_Radius_B144(\rfloat Radius,\rfloat Radius_Top_Left,\rfloat Radius_Top_Right,\rfloat Radius_Bottom_Left,\rfloat Radius_Bottom_Right,\rvec3 Position,\rout float Result)\r{\rbool whichY=Position.y>0.0;\rResult=Position.x<0.0 ? (whichY ? Radius_Top_Left : Radius_Bottom_Left) : (whichY ? Radius_Top_Right : Radius_Bottom_Right);\rResult*=Radius;\r}\rvoid main()\r{\rvec3 Nrm_World_Q128;\rNrm_World_Q128=normalize((world*vec4(normal,0.0)).xyz);\rvec3 Tangent_World_Q131;\rvec3 Tangent_World_N_Q131;\rfloat Tangent_Length_Q131;\rTangent_World_Q131=(world*vec4(vec3(1,0,0),0.0)).xyz;\rTangent_Length_Q131=length(Tangent_World_Q131);\rTangent_World_N_Q131=Tangent_World_Q131/Tangent_Length_Q131;\rvec3 Binormal_World_Q132;\rvec3 Binormal_World_N_Q132;\rfloat Binormal_Length_Q132;\rObject_To_World_Dir_B132(vec3(0,1,0),Binormal_World_Q132,Binormal_World_N_Q132,Binormal_Length_Q132);\rfloat Anisotropy_Q133=Tangent_Length_Q131/Binormal_Length_Q132;\rvec3 Result_Q177;\rResult_Q177=mix(_Blob_Position_,Global_Left_Index_Tip_Position.xyz,float(_Use_Global_Left_Index_));\rvec3 Result_Q178;\rResult_Q178=mix(_Blob_Position_2_,Global_Right_Index_Tip_Position.xyz,float(_Use_Global_Right_Index_));\rfloat Result_Q144;\rPick_Radius_B144(_Radius_,_Radius_Top_Left_,_Radius_Top_Right_,_Radius_Bottom_Left_,_Radius_Bottom_Right_,position,Result_Q144);\rvec3 Dir_Q140;\rPickDir_B140(_Angle_,Tangent_World_N_Q131,Binormal_World_N_Q132,Dir_Q140);\rfloat Radius_Q147;\rfloat Line_Width_Q147;\rRelativeOrAbsoluteDetail_B147(Result_Q144,_Line_Width_,_Absolute_Sizes_,Binormal_Length_Q132,Radius_Q147,Line_Width_Q147);\rvec4 Out_Color_Q145=vec4(Radius_Q147,Line_Width_Q147,0,1);\rvec3 New_P_Q129;\rvec2 New_UV_Q129;\rfloat Radial_Gradient_Q129;\rvec3 Radial_Dir_Q129;\rMove_Verts_B129(Anisotropy_Q133,position,Radius_Q147,New_P_Q129,New_UV_Q129,Radial_Gradient_Q129,Radial_Dir_Q129);\rvec3 Pos_World_Q115;\rObject_To_World_Pos_B115(New_P_Q129,Pos_World_Q115);\rvec4 Blob_Info_Q180;\r#if BLOB_ENABLE\nBlob_Vertex_B180(Pos_World_Q115,Nrm_World_Q128,Tangent_World_N_Q131,Binormal_World_N_Q132,Result_Q177,_Blob_Intensity_,_Blob_Near_Size_,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,_Blob_Fade_Length_,_Blob_Pulse_,_Blob_Fade_,Blob_Info_Q180);\r#else\nBlob_Info_Q180=vec4(0,0,0,0);\r#endif\nvec4 Blob_Info_Q181;\r#if BLOB_ENABLE_2\nBlob_Vertex_B180(Pos_World_Q115,Nrm_World_Q128,Tangent_World_N_Q131,Binormal_World_N_Q132,Result_Q178,_Blob_Intensity_,_Blob_Near_Size_2_,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,_Blob_Fade_Length_,_Blob_Pulse_2_,_Blob_Fade_2_,Blob_Info_Q181);\r#else\nBlob_Info_Q181=vec4(0,0,0,0);\r#endif\nfloat Gradient1_Q130;\rfloat Gradient2_Q130;\r#if SMOOTH_EDGES\nEdge_AA_Vertex_B130(Pos_World_Q115,position,normal,cameraPosition,Radial_Gradient_Q129,Radial_Dir_Q129,tangent,Gradient1_Q130,Gradient2_Q130);\r#else\nGradient1_Q130=1.0;\rGradient2_Q130=1.0;\r#endif\nvec2 Rect_UV_Q139;\rvec4 Rect_Parms_Q139;\rvec2 Scale_XY_Q139;\rvec2 Line_UV_Q139;\rRound_Rect_Vertex_B139(New_UV_Q129,Radius_Q147,0.0,Anisotropy_Q133,Gradient1_Q130,Gradient2_Q130,Rect_UV_Q139,Rect_Parms_Q139,Scale_XY_Q139,Line_UV_Q139);\rvec3 Line_Vertex_Q135;\rLine_Vertex_B135(Scale_XY_Q139,Line_UV_Q139,0.0,_Rate_,_Highlight_Transform_,Line_Vertex_Q135);\rvec3 Position=Pos_World_Q115;\rvec3 Normal=Dir_Q140;\rvec2 UV=Rect_UV_Q139;\rvec3 Tangent=Line_Vertex_Q135;\rvec3 Binormal=Nrm_World_Q128;\rvec4 Color=Out_Color_Q145;\rvec4 Extra1=Rect_Parms_Q139;\rvec4 Extra2=Blob_Info_Q180;\rvec4 Extra3=Blob_Info_Q181;\rgl_Position=viewProjection*vec4(Position,1);\rvPosition=Position;\rvNormal=Normal;\rvUV=UV;\rvTangent=Tangent;\rvBinormal=Binormal;\rvColor=Color;\rvExtra1=Extra1;\rvExtra2=Extra2;\rvExtra3=Extra3;\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const fluentBackplateVertexShader = { name, shader };\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { SerializationHelper, serialize, serializeAsVector3 } from \"core/Misc/decorators\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport { Vector3, Vector4 } from \"core/Maths/math.vector\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"core/Materials/materialHelper\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { Color4 } from \"core/Maths/math.color\";\r\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\r\nimport { Constants } from \"core/Engines/constants\";\r\n\r\nimport \"./shaders/fluentBackplate.fragment\";\r\nimport \"./shaders/fluentBackplate.vertex\";\r\n\r\n/** @internal */\r\nclass FluentBackplateMaterialDefines extends MaterialDefines {\r\n    public BLOB_ENABLE = true;\r\n    public BLOB_ENABLE_2 = true;\r\n    public SMOOTH_EDGES = true;\r\n    public IRIDESCENT_MAP_ENABLE = true;\r\n\r\n    constructor() {\r\n        super();\r\n        this._needNormals = true;\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render square buttons with fluent design\r\n */\r\nexport class FluentBackplateMaterial extends PushMaterial {\r\n    /**\r\n     * URL pointing to the texture used to define the coloring for the fluent blob effect.\r\n     */\r\n    public static BLOB_TEXTURE_URL = \"https://assets.babylonjs.com/meshes/MRTK/mrtk-fluent-backplate-blob.png\";\r\n\r\n    /**\r\n     * URL pointing to the texture used to define iridescent map.\r\n     */\r\n    public static IM_TEXTURE_URL = \"https://assets.babylonjs.com/meshes/MRTK/mrtk-fluent-backplate-iridescence.png\";\r\n\r\n    private _blobTexture: Texture;\r\n    private _iridescentMap: Texture;\r\n\r\n    /**\r\n     * Gets or sets the corner radius on the backplate. Best to keep this value between 0.01 and 0.5. Default is 0.03.\r\n     */\r\n    @serialize()\r\n    public radius = 0.03;\r\n\r\n    /**\r\n     * Gets or sets the line width of the backplate.\r\n     */\r\n    @serialize()\r\n    public lineWidth = 0.01;\r\n\r\n    /**\r\n     * Gets or sets whether to use absolute sizes when calculating effects on the backplate.\r\n     * Since desktop and VR/AR have different relative sizes, it's usually best to keep this false.\r\n     */\r\n    @serialize()\r\n    public absoluteSizes = false;\r\n\r\n    /** @internal */\r\n    public _filterWidth = 1;\r\n\r\n    /**\r\n     * Gets or sets the base color of the backplate.\r\n     */\r\n    @serialize()\r\n    public baseColor = new Color4(0.0392157, 0.0666667, 0.207843, 1);\r\n\r\n    /**\r\n     * Gets or sets the line color of the backplate.\r\n     */\r\n    @serialize()\r\n    public lineColor = new Color4(0.14902, 0.133333, 0.384314, 1);\r\n\r\n    /**\r\n     * Gets or sets the intensity of the fluent hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobIntensity = 0.98;\r\n\r\n    /**\r\n     * Gets or sets the far size of the fluent hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobFarSize = 0.04;\r\n\r\n    /**\r\n     * Gets or sets the distance considered \"near\" to the backplate, which controls the size of the fluent hover glow effect (see blobNearSize).\r\n     */\r\n    @serialize()\r\n    public blobNearDistance = 0;\r\n\r\n    /**\r\n     * Gets or sets the distance considered \"far\" from the backplate, which controls the size of the fluent hover glow effect (see blobFarSize).\r\n     */\r\n    @serialize()\r\n    public blobFarDistance = 0.08;\r\n\r\n    /**\r\n     * Gets or sets the length of the fluent hover glow effect fade.\r\n     */\r\n    @serialize()\r\n    public blobFadeLength = 0.08;\r\n\r\n    /**\r\n     * Gets or sets the size of the fluent hover glow effect when the left pointer is considered \"near\" to the backplate (see blobNearDistance).\r\n     */\r\n    @serialize()\r\n    public blobNearSize = 0.22;\r\n\r\n    /**\r\n     * Gets or sets the progress of the fluent hover glow effect selection animation corresponding to the left pointer (0.0 - 1.0).\r\n     */\r\n    @serialize()\r\n    public blobPulse = 0;\r\n\r\n    /**\r\n     * Gets or sets the opacity of the fluent hover glow effect corresponding to the left pointer (0.0 - 1.0). Default is 0.\r\n     */\r\n    @serialize()\r\n    public blobFade = 0;\r\n\r\n    /**\r\n     * Gets or sets the size of the fluent hover glow effect when the right pointer is considered \"near\" to the backplate (see blobNearDistance).\r\n     */\r\n    @serialize()\r\n    public blobNearSize2 = 0.22;\r\n\r\n    /**\r\n     * Gets or sets the progress of the fluent hover glow effect selection animation corresponding to the right pointer (0.0 - 1.0).\r\n     */\r\n    @serialize()\r\n    public blobPulse2 = 0;\r\n\r\n    /**\r\n     * Gets or sets the opacity of the fluent hover glow effect corresponding to the right pointer (0.0 - 1.0). Default is 0.\r\n     */\r\n    @serialize()\r\n    public blobFade2 = 0;\r\n\r\n    /** @internal */\r\n    public _rate = 0.135;\r\n\r\n    /**\r\n     * Gets or sets the color of the highlights on the backplate line.\r\n     */\r\n    @serialize()\r\n    public highlightColor = new Color4(0.98, 0.98, 0.98, 1);\r\n\r\n    /**\r\n     * Gets or sets the width of the highlights on the backplate line.\r\n     */\r\n    @serialize()\r\n    public highlightWidth = 0.25;\r\n\r\n    /** @internal */\r\n    public _highlightTransform = new Vector4(1, 1, 0, 0);\r\n\r\n    /** @internal */\r\n    public _highlight = 1;\r\n\r\n    /**\r\n     * Gets or sets the intensity of the iridescence effect.\r\n     */\r\n    @serialize()\r\n    public iridescenceIntensity = 0;\r\n\r\n    /**\r\n     * Gets or sets the intensity of the iridescence effect on the backplate edges.\r\n     */\r\n    @serialize()\r\n    public iridescenceEdgeIntensity = 1;\r\n\r\n    /** @internal */\r\n    public _angle = -45;\r\n\r\n    /**\r\n     * Gets or sets the opacity of the backplate (0.0 - 1.0).\r\n     */\r\n    @serialize()\r\n    public fadeOut = 1;\r\n\r\n    /** @internal */\r\n    public _reflected = true;\r\n\r\n    /** @internal */\r\n    public _frequency = 1;\r\n\r\n    /** @internal */\r\n    public _verticalOffset = 0;\r\n\r\n    /**\r\n     * Gets or sets the world-space position of the tip of the left index finger.\r\n     */\r\n    @serializeAsVector3()\r\n    public globalLeftIndexTipPosition = Vector3.Zero();\r\n    private _globalLeftIndexTipPosition4 = Vector4.Zero();\r\n\r\n    /**\r\n     * Gets or sets the world-space position of the tip of the right index finger.\r\n     */\r\n    @serializeAsVector3()\r\n    public globalRightIndexTipPosition = Vector3.Zero();\r\n    private _globalRightIndexTipPosition4 = Vector4.Zero();\r\n\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n        this.alphaMode = Constants.ALPHA_DISABLE;\r\n        this.backFaceCulling = false;\r\n\r\n        this._blobTexture = new Texture(FluentBackplateMaterial.BLOB_TEXTURE_URL, this.getScene(), true, false, Texture.NEAREST_SAMPLINGMODE);\r\n        this._iridescentMap = new Texture(FluentBackplateMaterial.IM_TEXTURE_URL, this.getScene(), true, false, Texture.NEAREST_SAMPLINGMODE);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new FluentBackplateMaterialDefines();\r\n        }\r\n\r\n        const defines = <FluentBackplateMaterialDefines>subMesh.materialDefines;\r\n        const scene = this.getScene();\r\n\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, false);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\r\n\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            if (defines.TANGENT) {\r\n                attribs.push(VertexBuffer.TangentKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            const shaderName = \"fluentBackplate\";\r\n            const join = defines.toString();\r\n\r\n            const uniforms = [\r\n                \"world\",\r\n                \"viewProjection\",\r\n                \"cameraPosition\",\r\n                \"_Radius_\",\r\n                \"_Line_Width_\",\r\n                \"_Absolute_Sizes_\",\r\n                \"_Filter_Width_\",\r\n                \"_Base_Color_\",\r\n                \"_Line_Color_\",\r\n                \"_Radius_Top_Left_\",\r\n                \"_Radius_Top_Right_\",\r\n                \"_Radius_Bottom_Left_\",\r\n                \"_Radius_Bottom_Right_\",\r\n                \"_Blob_Position_\",\r\n                \"_Blob_Intensity_\",\r\n                \"_Blob_Near_Size_\",\r\n                \"_Blob_Far_Size_\",\r\n                \"_Blob_Near_Distance_\",\r\n                \"_Blob_Far_Distance_\",\r\n                \"_Blob_Fade_Length_\",\r\n                \"_Blob_Pulse_\",\r\n                \"_Blob_Fade_\",\r\n                \"_Blob_Texture_\",\r\n                \"_Blob_Position_2_\",\r\n                \"_Blob_Near_Size_2_\",\r\n                \"_Blob_Pulse_2_\",\r\n                \"_Blob_Fade_2_\",\r\n                \"_Rate_\",\r\n                \"_Highlight_Color_\",\r\n                \"_Highlight_Width_\",\r\n                \"_Highlight_Transform_\",\r\n                \"_Highlight_\",\r\n                \"_Iridescence_Intensity_\",\r\n                \"_Iridescence_Edge_Intensity_\",\r\n                \"_Angle_\",\r\n                \"_Fade_Out_\",\r\n                \"_Reflected_\",\r\n                \"_Frequency_\",\r\n                \"_Vertical_Offset_\",\r\n                \"_Iridescent_Map_\",\r\n                \"_Use_Global_Left_Index_\",\r\n                \"_Use_Global_Right_Index_\",\r\n                \"Global_Left_Index_Tip_Position\",\r\n                \"Global_Right_Index_Tip_Position\",\r\n            ];\r\n            const samplers: string[] = [\"_Blob_Texture_\", \"_Iridescent_Map_\"];\r\n            const uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4,\r\n            });\r\n\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: { maxSimultaneousLights: 4 },\r\n                    },\r\n                    engine\r\n                ),\r\n                defines,\r\n                this._materialContext\r\n            );\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const defines = <FluentBackplateMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", this.getScene().getTransformMatrix());\r\n        this._activeEffect.setVector3(\"cameraPosition\", this.getScene().activeCamera?.position ?? Vector3.ZeroReadOnly);\r\n\r\n        // \"Round Rect\"\r\n        this._activeEffect.setFloat(\"_Radius_\", this.radius);\r\n        this._activeEffect.setFloat(\"_Line_Width_\", this.lineWidth);\r\n        this._activeEffect.setFloat(\"_Absolute_Sizes_\", this.absoluteSizes ? 1.0 : 0.0);\r\n        this._activeEffect.setFloat(\"_Filter_Width_\", this._filterWidth);\r\n        this._activeEffect.setDirectColor4(\"_Base_Color_\", this.baseColor);\r\n        this._activeEffect.setDirectColor4(\"_Line_Color_\", this.lineColor);\r\n\r\n        // \"Radii Multipliers\"\r\n        this._activeEffect.setFloat(\"_Radius_Top_Left_\", 1);\r\n        this._activeEffect.setFloat(\"_Radius_Top_Right_\", 1.0);\r\n        this._activeEffect.setFloat(\"_Radius_Bottom_Left_\", 1.0);\r\n        this._activeEffect.setFloat(\"_Radius_Bottom_Right_\", 1.0);\r\n\r\n        // \"Blob\"\r\n        //define BLOB_ENABLE true;\r\n        this._activeEffect.setFloat(\"_Blob_Intensity_\", this.blobIntensity);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Size_\", this.blobNearSize);\r\n        this._activeEffect.setFloat(\"_Blob_Far_Size_\", this.blobFarSize);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Distance_\", this.blobNearDistance);\r\n        this._activeEffect.setFloat(\"_Blob_Far_Distance_\", this.blobFarDistance);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_Length_\", this.blobFadeLength);\r\n        this._activeEffect.setFloat(\"_Blob_Pulse_\", this.blobPulse);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_\", this.blobFade);\r\n\r\n        // \"Blob Texture\"\r\n        this._activeEffect.setTexture(\"_Blob_Texture_\", this._blobTexture);\r\n\r\n        // \"Blob 2\"\r\n        //define BLOB_ENABLE_2 true;\r\n        this._activeEffect.setFloat(\"_Blob_Near_Size_2_\", this.blobNearSize2);\r\n        this._activeEffect.setFloat(\"_Blob_Pulse_2_\", this.blobPulse2);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_2_\", this.blobFade2);\r\n\r\n        // \"Line Highlight\"\r\n        this._activeEffect.setFloat(\"_Rate_\", this._rate);\r\n        this._activeEffect.setDirectColor4(\"_Highlight_Color_\", this.highlightColor);\r\n        this._activeEffect.setFloat(\"_Highlight_Width_\", this.highlightWidth);\r\n        this._activeEffect.setVector4(\"_Highlight_Transform_\", this._highlightTransform);\r\n        this._activeEffect.setFloat(\"_Highlight_\", this._highlight);\r\n\r\n        // \"Iridescence\"\r\n        this._activeEffect.setFloat(\"_Iridescence_Intensity_\", this.iridescenceIntensity);\r\n        this._activeEffect.setFloat(\"_Iridescence_Edge_Intensity_\", this.iridescenceEdgeIntensity);\r\n        this._activeEffect.setFloat(\"_Angle_\", this._angle);\r\n\r\n        // \"Fade\"\r\n        this._activeEffect.setFloat(\"_Fade_Out_\", this.fadeOut);\r\n\r\n        // \"Antialiasing\"\r\n        //define SMOOTH_EDGES true;\r\n\r\n        // \"ChooseAngle\"\r\n        this._activeEffect.setFloat(\"_Reflected_\", this._reflected ? 1.0 : 0.0);\r\n\r\n        // \"Multiply\"\r\n        this._activeEffect.setFloat(\"_Frequency_\", this._frequency);\r\n        this._activeEffect.setFloat(\"_Vertical_Offset_\", this._verticalOffset);\r\n\r\n        // \"Color Texture\"\r\n        //define IRIDESCENT_MAP_ENABLE true;\r\n        this._activeEffect.setTexture(\"_Iridescent_Map_\", this._iridescentMap);\r\n\r\n        // \"Global\"\r\n        this._activeEffect.setFloat(\"_Use_Global_Left_Index_\", 1.0);\r\n        this._activeEffect.setFloat(\"_Use_Global_Right_Index_\", 1.0);\r\n\r\n        this._globalLeftIndexTipPosition4.set(this.globalLeftIndexTipPosition.x, this.globalLeftIndexTipPosition.y, this.globalLeftIndexTipPosition.z, 1.0);\r\n        this._activeEffect.setVector4(\"Global_Left_Index_Tip_Position\", this._globalLeftIndexTipPosition4);\r\n\r\n        this._globalRightIndexTipPosition4.set(this.globalRightIndexTipPosition.x, this.globalRightIndexTipPosition.y, this.globalRightIndexTipPosition.z, 1.0);\r\n        this._activeEffect.setVector4(\"Global_Right_Index_Tip_Position\", this._globalRightIndexTipPosition4);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    /**\r\n     * Get the list of animatables in the material.\r\n     * @returns the list of animatables object used in the material\r\n     */\r\n    public getAnimatables(): IAnimatable[] {\r\n        return [];\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n\r\n        this._blobTexture.dispose();\r\n        this._iridescentMap.dispose();\r\n    }\r\n\r\n    public clone(name: string): FluentBackplateMaterial {\r\n        return SerializationHelper.Clone(() => new FluentBackplateMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n        serializationObject.customType = \"BABYLON.FluentBackplateMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FluentBackplateMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): FluentBackplateMaterial {\r\n        return SerializationHelper.Parse(() => new FluentBackplateMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.FluentBackplateMaterial\", FluentBackplateMaterial);\r\n","import type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport { CreateBox } from \"core/Meshes/Builders/boxBuilder\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { FluentBackplateMaterial } from \"../materials/fluentBackplate/fluentBackplateMaterial\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { SceneLoader } from \"core/Loading/sceneLoader\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\n\r\n/**\r\n * Class used to create a holographic backplate in 3D\r\n * @since 5.0.0\r\n */\r\nexport class HolographicBackplate extends Control3D {\r\n    /**\r\n     * Base Url for the button model.\r\n     */\r\n    public static MODEL_BASE_URL: string = \"https://assets.babylonjs.com/meshes/MRTK/\";\r\n    /**\r\n     * File name for the button model.\r\n     */\r\n    public static MODEL_FILENAME: string = \"mrtk-fluent-backplate.glb\";\r\n\r\n    private _model: AbstractMesh;\r\n    private _material: FluentBackplateMaterial;\r\n\r\n    /**\r\n     * Rendering ground id of the backplate mesh.\r\n     */\r\n    public set renderingGroupId(id: number) {\r\n        this._model.renderingGroupId = id;\r\n    }\r\n    public get renderingGroupId(): number {\r\n        return this._model.renderingGroupId;\r\n    }\r\n\r\n    /**\r\n     * Gets the material used by the backplate\r\n     */\r\n    public get material(): FluentBackplateMaterial {\r\n        return this._material;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this backplate shares its material with other HolographicBackplates\r\n     */\r\n    public get shareMaterials(): boolean {\r\n        return this._shareMaterials;\r\n    }\r\n\r\n    /**\r\n     * Creates a new holographic backplate\r\n     * @param name defines the control name\r\n     * @param _shareMaterials\r\n     */\r\n    constructor(name?: string, private _shareMaterials = true) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"HolographicBackplate\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        const collisionMesh = CreateBox(\r\n            (this.name ?? \"HolographicBackplate\") + \"_CollisionMesh\",\r\n            {\r\n                width: 1.0,\r\n                height: 1.0,\r\n                depth: 1.0,\r\n            },\r\n            scene\r\n        );\r\n        collisionMesh.isPickable = true;\r\n        collisionMesh.visibility = 0;\r\n\r\n        SceneLoader.ImportMeshAsync(undefined, HolographicBackplate.MODEL_BASE_URL, HolographicBackplate.MODEL_FILENAME, scene).then((result) => {\r\n            const importedModel = result.meshes[1];\r\n            importedModel.name = `${this.name}_frontPlate`;\r\n            importedModel.isPickable = false;\r\n            importedModel.parent = collisionMesh;\r\n            if (this._material) {\r\n                importedModel.material = this._material;\r\n            }\r\n            this._model = importedModel;\r\n        });\r\n\r\n        return collisionMesh;\r\n    }\r\n\r\n    private _createMaterial(mesh: Mesh) {\r\n        this._material = new FluentBackplateMaterial(this.name + \" Material\", mesh.getScene());\r\n    }\r\n\r\n    protected _affectMaterial(mesh: Mesh) {\r\n        // Back\r\n        if (this._shareMaterials) {\r\n            if (!this._host._touchSharedMaterials[\"fluentBackplateMaterial\"]) {\r\n                this._createMaterial(mesh);\r\n                this._host._touchSharedMaterials[\"fluentBackplateMaterial\"] = this._material;\r\n            } else {\r\n                this._material = this._host._touchSharedMaterials[\"fluentBackplateMaterial\"] as FluentBackplateMaterial;\r\n            }\r\n        } else {\r\n            this._createMaterial(mesh);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose(); // will dispose main mesh ie. back plate\r\n\r\n        if (!this.shareMaterials) {\r\n            this._material.dispose();\r\n        }\r\n\r\n        this._model.dispose();\r\n    }\r\n}\r\n","import { Button3D } from \"./button3D\";\r\n\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport { StandardMaterial } from \"core/Materials/standardMaterial\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport { Mesh } from \"core/Meshes/mesh\";\r\nimport { CreatePlane } from \"core/Meshes/Builders/planeBuilder\";\r\nimport { CreateBox } from \"core/Meshes/Builders/boxBuilder\";\r\nimport { FadeInOutBehavior } from \"core/Behaviors/Meshes/fadeInOutBehavior\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\nimport { FluentMaterial } from \"../materials/fluent/fluentMaterial\";\r\nimport { StackPanel } from \"../../2D/controls/stackPanel\";\r\nimport { Image } from \"../../2D/controls/image\";\r\nimport { TextBlock } from \"../../2D/controls/textBlock\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport type { Control3D } from \"./control3D\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { DomManagement } from \"core/Misc/domManagement\";\r\n\r\n/**\r\n * Class used to create a holographic button in 3D\r\n */\r\nexport class HolographicButton extends Button3D {\r\n    private _backPlate: Mesh;\r\n    private _textPlate: Mesh;\r\n    private _frontPlate: Mesh;\r\n    private _text: string;\r\n    private _imageUrl: string;\r\n    private _shareMaterials = true;\r\n    private _frontMaterial: FluentMaterial;\r\n    private _backMaterial: FluentMaterial;\r\n    private _plateMaterial: StandardMaterial;\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<Vector3>>>;\r\n\r\n    // Tooltip\r\n    private _tooltipFade: Nullable<FadeInOutBehavior>;\r\n    private _tooltipTextBlock: Nullable<TextBlock>;\r\n    private _tooltipTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _tooltipMesh: Nullable<Mesh>;\r\n    private _tooltipHoverObserver: Nullable<Observer<Control3D>>;\r\n    private _tooltipOutObserver: Nullable<Observer<Control3D>>;\r\n\r\n    private _disposeTooltip() {\r\n        this._tooltipFade = null;\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.dispose();\r\n        }\r\n        if (this._tooltipTexture) {\r\n            this._tooltipTexture.dispose();\r\n        }\r\n        if (this._tooltipMesh) {\r\n            this._tooltipMesh.dispose();\r\n        }\r\n        this.onPointerEnterObservable.remove(this._tooltipHoverObserver);\r\n        this.onPointerOutObservable.remove(this._tooltipOutObserver);\r\n    }\r\n\r\n    /**\r\n     * Rendering ground id of all the mesh in the button\r\n     */\r\n    public set renderingGroupId(id: number) {\r\n        this._backPlate.renderingGroupId = id;\r\n        this._textPlate.renderingGroupId = id;\r\n        this._frontPlate.renderingGroupId = id;\r\n\r\n        if (this._tooltipMesh) {\r\n            this._tooltipMesh.renderingGroupId = id;\r\n        }\r\n    }\r\n    public get renderingGroupId(): number {\r\n        return this._backPlate.renderingGroupId;\r\n    }\r\n\r\n    /**\r\n     * Text to be displayed on the tooltip shown when hovering on the button. When set to null tooltip is disabled. (Default: null)\r\n     */\r\n    public set tooltipText(text: Nullable<string>) {\r\n        if (!text) {\r\n            this._disposeTooltip();\r\n            return;\r\n        }\r\n        if (!this._tooltipFade) {\r\n            const rightHandedScene = this._backPlate._scene.useRightHandedSystem;\r\n            // Create tooltip with mesh and text\r\n            this._tooltipMesh = CreatePlane(\"\", { size: 1 }, this._backPlate._scene);\r\n            const tooltipBackground = CreatePlane(\"\", { size: 1, sideOrientation: Mesh.DOUBLESIDE }, this._backPlate._scene);\r\n            const mat = new StandardMaterial(\"\", this._backPlate._scene);\r\n            mat.diffuseColor = Color3.FromHexString(\"#212121\");\r\n            tooltipBackground.material = mat;\r\n            tooltipBackground.isPickable = false;\r\n            this._tooltipMesh.addChild(tooltipBackground);\r\n            tooltipBackground.position = Vector3.Forward(rightHandedScene).scale(0.05);\r\n            this._tooltipMesh.scaling.y = 1 / 3;\r\n            this._tooltipMesh.position = Vector3.Up().scale(0.7).add(Vector3.Forward(rightHandedScene).scale(-0.15));\r\n            this._tooltipMesh.isPickable = false;\r\n            this._tooltipMesh.parent = this._backPlate;\r\n\r\n            // Create text texture for the tooltip\r\n            this._tooltipTexture = AdvancedDynamicTexture.CreateForMesh(this._tooltipMesh);\r\n            this._tooltipTextBlock = new TextBlock();\r\n            this._tooltipTextBlock.scaleY = 3;\r\n            this._tooltipTextBlock.color = \"white\";\r\n            this._tooltipTextBlock.fontSize = 130;\r\n            this._tooltipTexture.addControl(this._tooltipTextBlock);\r\n\r\n            // Add hover action to tooltip\r\n            this._tooltipFade = new FadeInOutBehavior();\r\n            this._tooltipFade.delay = 500;\r\n            this._tooltipMesh.addBehavior(this._tooltipFade);\r\n            this._tooltipHoverObserver = this.onPointerEnterObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(true);\r\n                }\r\n            });\r\n            this._tooltipOutObserver = this.onPointerOutObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(false);\r\n                }\r\n            });\r\n        }\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.text = text;\r\n        }\r\n    }\r\n\r\n    public get tooltipText() {\r\n        if (this._tooltipTextBlock) {\r\n            return this._tooltipTextBlock.text;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text for the button\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n\r\n        this._text = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image url for the button\r\n     */\r\n    public get imageUrl(): string {\r\n        return this._imageUrl;\r\n    }\r\n\r\n    public set imageUrl(value: string) {\r\n        if (this._imageUrl === value) {\r\n            return;\r\n        }\r\n\r\n        this._imageUrl = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets the back material used by this button\r\n     */\r\n    public get backMaterial(): FluentMaterial {\r\n        return this._backMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the front material used by this button\r\n     */\r\n    public get frontMaterial(): FluentMaterial {\r\n        return this._frontMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the plate material used by this button\r\n     */\r\n    public get plateMaterial(): StandardMaterial {\r\n        return this._plateMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this button shares its material with other HolographicButtons\r\n     */\r\n    public get shareMaterials(): boolean {\r\n        return this._shareMaterials;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     * @param shareMaterials\r\n     */\r\n    constructor(name?: string, shareMaterials = true) {\r\n        super(name);\r\n\r\n        this._shareMaterials = shareMaterials;\r\n\r\n        // Default animations\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(true);\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(false);\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"HolographicButton\";\r\n    }\r\n\r\n    private _rebuildContent(): void {\r\n        this._disposeFacadeTexture();\r\n\r\n        const panel = new StackPanel();\r\n        panel.isVertical = true;\r\n\r\n        if (DomManagement.IsDocumentAvailable() && !!document.createElement) {\r\n            if (this._imageUrl) {\r\n                const image = new Image();\r\n                image.source = this._imageUrl;\r\n                image.paddingTop = \"40px\";\r\n                image.height = \"180px\";\r\n                image.width = \"100px\";\r\n                image.paddingBottom = \"40px\";\r\n                panel.addControl(image);\r\n            }\r\n        }\r\n\r\n        if (this._text) {\r\n            const text = new TextBlock();\r\n            text.text = this._text;\r\n            text.color = \"white\";\r\n            text.height = \"30px\";\r\n            text.fontSize = 24;\r\n            panel.addControl(text);\r\n        }\r\n\r\n        if (this._frontPlate) {\r\n            this.content = panel;\r\n        }\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._backPlate = CreateBox(\r\n            this.name + \"BackMesh\",\r\n            {\r\n                width: 1.0,\r\n                height: 1.0,\r\n                depth: 0.08,\r\n            },\r\n            scene\r\n        );\r\n\r\n        this._frontPlate = CreateBox(\r\n            this.name + \"FrontMesh\",\r\n            {\r\n                width: 1.0,\r\n                height: 1.0,\r\n                depth: 0.08,\r\n            },\r\n            scene\r\n        );\r\n\r\n        this._frontPlate.parent = this._backPlate;\r\n        this._frontPlate.position = Vector3.Forward(scene.useRightHandedSystem).scale(-0.08);\r\n        this._frontPlate.isPickable = false;\r\n        this._frontPlate.setEnabled(false);\r\n\r\n        this._textPlate = <Mesh>super._createNode(scene);\r\n        this._textPlate.parent = this._backPlate;\r\n        this._textPlate.position = Vector3.Forward(scene.useRightHandedSystem).scale(-0.08);\r\n        this._textPlate.isPickable = false;\r\n\r\n        return this._backPlate;\r\n    }\r\n\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        this._plateMaterial.emissiveTexture = facadeTexture;\r\n        this._plateMaterial.opacityTexture = facadeTexture;\r\n    }\r\n\r\n    private _createBackMaterial(mesh: Mesh) {\r\n        this._backMaterial = new FluentMaterial(this.name + \"Back Material\", mesh.getScene());\r\n        this._backMaterial.renderHoverLight = true;\r\n        this._pickedPointObserver = this._host.onPickedPointChangedObservable.add((pickedPoint) => {\r\n            if (pickedPoint) {\r\n                this._backMaterial.hoverPosition = pickedPoint;\r\n                this._backMaterial.hoverColor.a = 1.0;\r\n            } else {\r\n                this._backMaterial.hoverColor.a = 0;\r\n            }\r\n        });\r\n    }\r\n\r\n    private _createFrontMaterial(mesh: Mesh) {\r\n        this._frontMaterial = new FluentMaterial(this.name + \"Front Material\", mesh.getScene());\r\n        this._frontMaterial.innerGlowColorIntensity = 0; // No inner glow\r\n        this._frontMaterial.alpha = 0.5; // Additive\r\n        this._frontMaterial.renderBorders = true;\r\n    }\r\n\r\n    private _createPlateMaterial(mesh: Mesh) {\r\n        this._plateMaterial = new StandardMaterial(this.name + \"Plate Material\", mesh.getScene());\r\n        this._plateMaterial.specularColor = Color3.Black();\r\n    }\r\n\r\n    protected _affectMaterial(mesh: Mesh) {\r\n        // Back\r\n        if (this._shareMaterials) {\r\n            if (!this._host._sharedMaterials[\"backFluentMaterial\"]) {\r\n                this._createBackMaterial(mesh);\r\n                this._host._sharedMaterials[\"backFluentMaterial\"] = this._backMaterial;\r\n            } else {\r\n                this._backMaterial = this._host._sharedMaterials[\"backFluentMaterial\"] as FluentMaterial;\r\n            }\r\n\r\n            // Front\r\n            if (!this._host._sharedMaterials[\"frontFluentMaterial\"]) {\r\n                this._createFrontMaterial(mesh);\r\n                this._host._sharedMaterials[\"frontFluentMaterial\"] = this._frontMaterial;\r\n            } else {\r\n                this._frontMaterial = this._host._sharedMaterials[\"frontFluentMaterial\"] as FluentMaterial;\r\n            }\r\n        } else {\r\n            this._createBackMaterial(mesh);\r\n            this._createFrontMaterial(mesh);\r\n        }\r\n\r\n        this._createPlateMaterial(mesh);\r\n        this._backPlate.material = this._backMaterial;\r\n        this._frontPlate.material = this._frontMaterial;\r\n        this._textPlate.material = this._plateMaterial;\r\n\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose(); // will dispose main mesh ie. back plate\r\n\r\n        this._disposeTooltip();\r\n\r\n        if (!this.shareMaterials) {\r\n            this._backMaterial.dispose();\r\n            this._frontMaterial.dispose();\r\n            this._plateMaterial.dispose();\r\n\r\n            if (this._pickedPointObserver) {\r\n                this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n                this._pickedPointObserver = null;\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"fluentButtonPixelShader\";\nconst shader = `uniform vec3 cameraPosition;\rvarying vec3 vPosition;\rvarying vec3 vNormal;\rvarying vec2 vUV;\rvarying vec3 vTangent;\rvarying vec3 vBinormal;\rvarying vec4 vColor;\rvarying vec4 vExtra1;\runiform float _Edge_Width_;\runiform vec4 _Edge_Color_;\runiform bool _Relative_Width_;\runiform float _Proximity_Max_Intensity_;\runiform float _Proximity_Far_Distance_;\runiform float _Proximity_Near_Radius_;\runiform float _Proximity_Anisotropy_;\runiform float _Selection_Fuzz_;\runiform float _Selected_;\runiform float _Selection_Fade_;\runiform float _Selection_Fade_Size_;\runiform float _Selected_Distance_;\runiform float _Selected_Fade_Length_;\runiform bool _Blob_Enable_;\runiform vec3 _Blob_Position_;\runiform float _Blob_Intensity_;\runiform float _Blob_Near_Size_;\runiform float _Blob_Far_Size_;\runiform float _Blob_Near_Distance_;\runiform float _Blob_Far_Distance_;\runiform float _Blob_Fade_Length_;\runiform float _Blob_Inner_Fade_;\runiform float _Blob_Pulse_;\runiform float _Blob_Fade_;\runiform sampler2D _Blob_Texture_;\runiform bool _Blob_Enable_2_;\runiform vec3 _Blob_Position_2_;\runiform float _Blob_Near_Size_2_;\runiform float _Blob_Inner_Fade_2_;\runiform float _Blob_Pulse_2_;\runiform float _Blob_Fade_2_;\runiform vec3 _Active_Face_Dir_;\runiform vec3 _Active_Face_Up_;\runiform bool Enable_Fade;\runiform float _Fade_Width_;\runiform bool _Smooth_Active_Face_;\runiform bool _Show_Frame_;\runiform bool _Use_Blob_Texture_;\runiform bool Use_Global_Left_Index;\runiform bool Use_Global_Right_Index;\runiform vec4 Global_Left_Index_Tip_Position;\runiform vec4 Global_Right_Index_Tip_Position;\runiform vec4 Global_Left_Thumb_Tip_Position;\runiform vec4 Global_Right_Thumb_Tip_Position;\runiform float Global_Left_Index_Tip_Proximity;\runiform float Global_Right_Index_Tip_Proximity;\rvoid Holo_Edge_Fragment_B35(\rvec4 Edges,\rfloat Edge_Width,\rout float NotEdge)\r{\rvec2 c=vec2(min(Edges.r,Edges.g),min(Edges.b,Edges.a));\rvec2 df=fwidth(c)*Edge_Width;\rvec2 g=clamp(c/df,0.0,1.0);\rNotEdge=g.x*g.y;\r}\rvoid Blob_Fragment_B39(\rvec2 UV,\rvec3 Blob_Info,\rsampler2D Blob_Texture,\rout vec4 Blob_Color)\r{\rfloat k=dot(UV,UV);\rBlob_Color=Blob_Info.y*texture(Blob_Texture,vec2(vec2(sqrt(k),Blob_Info.x).x,1.0-vec2(sqrt(k),Blob_Info.x).y))*(1.0-clamp(k,0.0,1.0));\r}\rvec2 FilterStep(vec2 Edge,vec2 X)\r{\rvec2 dX=max(fwidth(X),vec2(0.00001,0.00001));\rreturn clamp( (X+dX-max(Edge,X-dX))/(dX*2.0),0.0,1.0);\r}\rvoid Wireframe_Fragment_B59(\rvec3 Widths,\rvec2 UV,\rfloat Proximity,\rvec4 Edge_Color,\rout vec4 Wireframe)\r{\rvec2 c=min(UV,vec2(1.0,1.0)-UV);\rvec2 g=FilterStep(Widths.xy*0.5,c); \rWireframe=(1.0-min(g.x,g.y))*Proximity*Edge_Color;\r}\rvoid Proximity_B53(\rvec3 Proximity_Center,\rvec3 Proximity_Center_2,\rfloat Proximity_Max_Intensity,\rfloat Proximity_Near_Radius,\rvec3 Position,\rvec3 Show_Selection,\rvec4 Extra1,\rfloat Dist_To_Face,\rfloat Intensity,\rout float Proximity)\r{\rvec2 delta1=Extra1.xy;\rvec2 delta2=Extra1.zw;\rfloat d2=sqrt(min(dot(delta1,delta1),dot(delta2,delta2))+Dist_To_Face*Dist_To_Face);\rProximity=Intensity*Proximity_Max_Intensity*(1.0-clamp(d2/Proximity_Near_Radius,0.0,1.0))*(1.0-Show_Selection.x)+Show_Selection.x;\r}\rvoid To_XYZ_B46(\rvec3 Vec3,\rout float X,\rout float Y,\rout float Z)\r{\rX=Vec3.x;\rY=Vec3.y;\rZ=Vec3.z;\r}\rvoid main()\r{\rfloat NotEdge_Q35;\r#if ENABLE_FADE\nHolo_Edge_Fragment_B35(vColor,_Fade_Width_,NotEdge_Q35);\r#else\nNotEdge_Q35=1.0;\r#endif\nvec4 Blob_Color_Q39;\rfloat k=dot(vUV,vUV);\rvec2 blobTextureCoord=vec2(vec2(sqrt(k),vTangent.x).x,1.0-vec2(sqrt(k),vTangent.x).y);\rvec4 blobColor=mix(vec4(1.0,1.0,1.0,1.0)*step(1.0-vTangent.x,clamp(sqrt(k)+0.1,0.0,1.0)),texture(_Blob_Texture_,blobTextureCoord),float(_Use_Blob_Texture_));\rBlob_Color_Q39=vTangent.y*blobColor*(1.0-clamp(k,0.0,1.0));\rfloat Is_Quad_Q24;\rIs_Quad_Q24=vNormal.z;\rvec3 Blob_Position_Q41= mix(_Blob_Position_,Global_Left_Index_Tip_Position.xyz,float(Use_Global_Left_Index));\rvec3 Blob_Position_Q42= mix(_Blob_Position_2_,Global_Right_Index_Tip_Position.xyz,float(Use_Global_Right_Index));\rfloat X_Q46;\rfloat Y_Q46;\rfloat Z_Q46;\rTo_XYZ_B46(vBinormal,X_Q46,Y_Q46,Z_Q46);\rfloat Proximity_Q53;\rProximity_B53(Blob_Position_Q41,Blob_Position_Q42,_Proximity_Max_Intensity_,_Proximity_Near_Radius_,vPosition,vBinormal,vExtra1,Y_Q46,Z_Q46,Proximity_Q53);\rvec4 Wireframe_Q59;\rWireframe_Fragment_B59(vNormal,vUV,Proximity_Q53,_Edge_Color_,Wireframe_Q59);\rvec4 Wire_Or_Blob_Q23=mix(Wireframe_Q59,Blob_Color_Q39,Is_Quad_Q24);\rvec4 Result_Q22;\rResult_Q22=mix(Wire_Or_Blob_Q23,vec4(0.3,0.3,0.3,0.3),float(_Show_Frame_));\rvec4 Final_Color_Q37=NotEdge_Q35*Result_Q22;\rvec4 Out_Color=Final_Color_Q37;\rfloat Clip_Threshold=0.0;\rbool To_sRGB=false;\rgl_FragColor=Out_Color;\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const fluentButtonPixelShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"fluentButtonVertexShader\";\nconst shader = `uniform mat4 world;\runiform mat4 viewProjection;\runiform vec3 cameraPosition;\rattribute vec3 position;\rattribute vec3 normal;\rattribute vec2 uv;\rattribute vec3 tangent;\rattribute vec4 color;\runiform float _Edge_Width_;\runiform vec4 _Edge_Color_;\runiform float _Proximity_Max_Intensity_;\runiform float _Proximity_Far_Distance_;\runiform float _Proximity_Near_Radius_;\runiform float _Proximity_Anisotropy_;\runiform float _Selection_Fuzz_;\runiform float _Selected_;\runiform float _Selection_Fade_;\runiform float _Selection_Fade_Size_;\runiform float _Selected_Distance_;\runiform float _Selected_Fade_Length_;\runiform bool _Blob_Enable_;\runiform vec3 _Blob_Position_;\runiform float _Blob_Intensity_;\runiform float _Blob_Near_Size_;\runiform float _Blob_Far_Size_;\runiform float _Blob_Near_Distance_;\runiform float _Blob_Far_Distance_;\runiform float _Blob_Fade_Length_;\runiform float _Blob_Inner_Fade_;\runiform float _Blob_Pulse_;\runiform float _Blob_Fade_;\runiform sampler2D _Blob_Texture_;\runiform bool _Blob_Enable_2_;\runiform vec3 _Blob_Position_2_;\runiform float _Blob_Near_Size_2_;\runiform float _Blob_Inner_Fade_2_;\runiform float _Blob_Pulse_2_;\runiform float _Blob_Fade_2_;\runiform vec3 _Active_Face_Dir_;\runiform vec3 _Active_Face_Up_;\runiform bool _Enable_Fade_;\runiform float _Fade_Width_;\runiform bool _Smooth_Active_Face_;\runiform bool _Show_Frame_;\runiform bool Use_Global_Left_Index;\runiform bool Use_Global_Right_Index;\runiform vec4 Global_Left_Index_Tip_Position;\runiform vec4 Global_Right_Index_Tip_Position;\runiform vec4 Global_Left_Thumb_Tip_Position;\runiform vec4 Global_Right_Thumb_Tip_Position;\runiform float Global_Left_Index_Tip_Proximity;\runiform float Global_Right_Index_Tip_Proximity;\rvarying vec3 vPosition;\rvarying vec3 vNormal;\rvarying vec2 vUV;\rvarying vec3 vTangent;\rvarying vec3 vBinormal;\rvarying vec4 vColor;\rvarying vec4 vExtra1;\rvoid Blob_Vertex_B47(\rvec3 Position,\rvec3 Normal,\rvec3 Tangent,\rvec3 Bitangent,\rvec3 Blob_Position,\rfloat Intensity,\rfloat Blob_Near_Size,\rfloat Blob_Far_Size,\rfloat Blob_Near_Distance,\rfloat Blob_Far_Distance,\rvec4 Vx_Color,\rvec2 UV,\rvec3 Face_Center,\rvec2 Face_Size,\rvec2 In_UV,\rfloat Blob_Fade_Length,\rfloat Selection_Fade,\rfloat Selection_Fade_Size,\rfloat Inner_Fade,\rvec3 Active_Face_Center,\rfloat Blob_Pulse,\rfloat Blob_Fade,\rfloat Blob_Enabled,\rout vec3 Out_Position,\rout vec2 Out_UV,\rout vec3 Blob_Info)\r{\rfloat blobSize,fadeIn;\rvec3 Hit_Position;\rBlob_Info=vec3(0.0,0.0,0.0);\rfloat Hit_Distance=dot(Blob_Position-Face_Center,Normal);\rHit_Position=Blob_Position-Hit_Distance*Normal;\rfloat absD=abs(Hit_Distance);\rfloat lerpVal=clamp((absD-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance),0.0,1.0);\rfadeIn=1.0-clamp((absD-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);\rfloat innerFade=1.0-clamp(-Hit_Distance/Inner_Fade,0.0,1.0);\rfloat farClip=clamp(1.0-step(Blob_Far_Distance+Blob_Fade_Length,absD),0.0,1.0);\rfloat size=mix(Blob_Near_Size,Blob_Far_Size,lerpVal)*farClip;\rblobSize=mix(size,Selection_Fade_Size,Selection_Fade)*innerFade*Blob_Enabled;\rBlob_Info.x=lerpVal*0.5+0.5;\rBlob_Info.y=fadeIn*Intensity*(1.0-Selection_Fade)*Blob_Fade;\rBlob_Info.x*=(1.0-Blob_Pulse);\rvec3 delta=Hit_Position-Face_Center;\rvec2 blobCenterXY=vec2(dot(delta,Tangent),dot(delta,Bitangent));\rvec2 quadUVin=2.0*UV-1.0; \rvec2 blobXY=blobCenterXY+quadUVin*blobSize;\rvec2 blobClipped=clamp(blobXY,-Face_Size*0.5,Face_Size*0.5);\rvec2 blobUV=(blobClipped-blobCenterXY)/max(blobSize,0.0001)*2.0;\rvec3 blobCorner=Face_Center+blobClipped.x*Tangent+blobClipped.y*Bitangent;\rOut_Position=mix(Position,blobCorner,Vx_Color.rrr);\rOut_UV=mix(In_UV,blobUV,Vx_Color.rr);\r}\rvec2 ProjectProximity(\rvec3 blobPosition,\rvec3 position,\rvec3 center,\rvec3 dir,\rvec3 xdir,\rvec3 ydir,\rout float vdistance\r)\r{\rvec3 delta=blobPosition-position;\rvec2 xy=vec2(dot(delta,xdir),dot(delta,ydir));\rvdistance=abs(dot(delta,dir));\rreturn xy;\r}\rvoid Proximity_Vertex_B66(\rvec3 Blob_Position,\rvec3 Blob_Position_2,\rvec3 Active_Face_Center,\rvec3 Active_Face_Dir,\rvec3 Position,\rfloat Proximity_Far_Distance,\rfloat Relative_Scale,\rfloat Proximity_Anisotropy,\rvec3 Up,\rout vec4 Extra1,\rout float Distance_To_Face,\rout float Intensity)\r{\rvec3 Active_Face_Dir_X=normalize(cross(Active_Face_Dir,Up));\rvec3 Active_Face_Dir_Y=cross(Active_Face_Dir,Active_Face_Dir_X);\rfloat distz1,distz2;\rExtra1.xy=ProjectProximity(Blob_Position,Position,Active_Face_Center,Active_Face_Dir,Active_Face_Dir_X*Proximity_Anisotropy,Active_Face_Dir_Y,distz1)/Relative_Scale;\rExtra1.zw=ProjectProximity(Blob_Position_2,Position,Active_Face_Center,Active_Face_Dir,Active_Face_Dir_X*Proximity_Anisotropy,Active_Face_Dir_Y,distz2)/Relative_Scale;\rDistance_To_Face=dot(Active_Face_Dir,Position-Active_Face_Center);\rIntensity=1.0-clamp(min(distz1,distz2)/Proximity_Far_Distance,0.0,1.0);\r}\rvoid Holo_Edge_Vertex_B44(\rvec3 Incident,\rvec3 Normal,\rvec2 UV,\rvec3 Tangent,\rvec3 Bitangent,\rbool Smooth_Active_Face,\rfloat Active,\rout vec4 Holo_Edges)\r{\rfloat NdotI=dot(Incident,Normal);\rvec2 flip=(UV-vec2(0.5,0.5));\rfloat udot=dot(Incident,Tangent)*flip.x*NdotI;\rfloat uval=1.0-float(udot>0.0);\rfloat vdot=-dot(Incident,Bitangent)*flip.y*NdotI;\rfloat vval=1.0-float(vdot>0.0);\rfloat Smooth_And_Active=step(1.0,float(Smooth_Active_Face && Active>0.0));\ruval=mix(uval,max(1.0,uval),Smooth_And_Active); \rvval=mix(vval,max(1.0,vval),Smooth_And_Active);\rHolo_Edges=vec4(1.0,1.0,1.0,1.0)-vec4(uval*UV.x,uval*(1.0-UV.x),vval*UV.y,vval*(1.0-UV.y));\r}\rvoid Object_To_World_Pos_B13(\rvec3 Pos_Object,\rout vec3 Pos_World)\r{\rPos_World=(world*vec4(Pos_Object,1.0)).xyz;\r}\rvoid Choose_Blob_B38(\rvec4 Vx_Color,\rvec3 Position1,\rvec3 Position2,\rbool Blob_Enable_1,\rbool Blob_Enable_2,\rfloat Near_Size_1,\rfloat Near_Size_2,\rfloat Blob_Inner_Fade_1,\rfloat Blob_Inner_Fade_2,\rfloat Blob_Pulse_1,\rfloat Blob_Pulse_2,\rfloat Blob_Fade_1,\rfloat Blob_Fade_2,\rout vec3 Position,\rout float Near_Size,\rout float Inner_Fade,\rout float Blob_Enable,\rout float Fade,\rout float Pulse)\r{\rPosition=Position1*(1.0-Vx_Color.g)+Vx_Color.g*Position2;\rfloat b1=float(Blob_Enable_1);\rfloat b2=float(Blob_Enable_2);\rBlob_Enable=b1+(b2-b1)*Vx_Color.g;\rPulse=Blob_Pulse_1*(1.0-Vx_Color.g)+Vx_Color.g*Blob_Pulse_2;\rFade=Blob_Fade_1*(1.0-Vx_Color.g)+Vx_Color.g*Blob_Fade_2;\rNear_Size=Near_Size_1*(1.0-Vx_Color.g)+Vx_Color.g*Near_Size_2;\rInner_Fade=Blob_Inner_Fade_1*(1.0-Vx_Color.g)+Vx_Color.g*Blob_Inner_Fade_2;\r}\rvoid Wireframe_Vertex_B51(\rvec3 Position,\rvec3 Normal,\rvec3 Tangent,\rvec3 Bitangent,\rfloat Edge_Width,\rvec2 Face_Size,\rout vec3 Wire_Vx_Pos,\rout vec2 UV,\rout vec2 Widths)\r{\rWidths.xy=Edge_Width/Face_Size;\rfloat x=dot(Position,Tangent);\rfloat y=dot(Position,Bitangent);\rfloat dx=0.5-abs(x);\rfloat newx=(0.5-dx*Widths.x*2.0)*sign(x);\rfloat dy=0.5-abs(y);\rfloat newy=(0.5-dy*Widths.y*2.0)*sign(y);\rWire_Vx_Pos=Normal*0.5+newx*Tangent+newy*Bitangent;\rUV.x=dot(Wire_Vx_Pos,Tangent)+0.5;\rUV.y=dot(Wire_Vx_Pos,Bitangent)+0.5;\r}\rvec2 ramp2(vec2 start,vec2 end,vec2 x)\r{\rreturn clamp((x-start)/(end-start),vec2(0.0,0.0),vec2(1.0,1.0));\r}\rfloat computeSelection(\rvec3 blobPosition,\rvec3 normal,\rvec3 tangent,\rvec3 bitangent,\rvec3 faceCenter,\rvec2 faceSize,\rfloat selectionFuzz,\rfloat farDistance,\rfloat fadeLength\r)\r{\rvec3 delta=blobPosition-faceCenter;\rfloat absD=abs(dot(delta,normal));\rfloat fadeIn=1.0-clamp((absD-farDistance)/fadeLength,0.0,1.0);\rvec2 blobCenterXY=vec2(dot(delta,tangent),dot(delta,bitangent));\rvec2 innerFace=faceSize*(1.0-selectionFuzz)*0.5;\rvec2 selectPulse=ramp2(-faceSize*0.5,-innerFace,blobCenterXY)-ramp2(innerFace,faceSize*0.5,blobCenterXY);\rreturn selectPulse.x*selectPulse.y*fadeIn;\r}\rvoid Selection_Vertex_B48(\rvec3 Blob_Position,\rvec3 Blob_Position_2,\rvec3 Face_Center,\rvec2 Face_Size,\rvec3 Normal,\rvec3 Tangent,\rvec3 Bitangent,\rfloat Selection_Fuzz,\rfloat Selected,\rfloat Far_Distance,\rfloat Fade_Length,\rvec3 Active_Face_Dir,\rout float Show_Selection)\r{\rfloat select1=computeSelection(Blob_Position,Normal,Tangent,Bitangent,Face_Center,Face_Size,Selection_Fuzz,Far_Distance,Fade_Length);\rfloat select2=computeSelection(Blob_Position_2,Normal,Tangent,Bitangent,Face_Center,Face_Size,Selection_Fuzz,Far_Distance,Fade_Length);\rfloat Active=max(0.0,dot(Active_Face_Dir,Normal));\rShow_Selection=mix(max(select1,select2),1.0,Selected)*Active;\r}\rvoid Proximity_Visibility_B54(\rfloat Selection,\rvec3 Proximity_Center,\rvec3 Proximity_Center_2,\rfloat Input_Width,\rfloat Proximity_Far_Distance,\rfloat Proximity_Radius,\rvec3 Active_Face_Center,\rvec3 Active_Face_Dir,\rout float Width)\r{\rvec3 boxEdges=(world*vec4(vec3(0.5,0.5,0.5),0.0)).xyz;\rfloat boxMaxSize=length(boxEdges);\rfloat d1=dot(Proximity_Center-Active_Face_Center,Active_Face_Dir);\rvec3 blob1=Proximity_Center-d1*Active_Face_Dir;\rfloat d2=dot(Proximity_Center_2-Active_Face_Center,Active_Face_Dir);\rvec3 blob2=Proximity_Center_2-d2*Active_Face_Dir;\rvec3 delta1=blob1-Active_Face_Center;\rvec3 delta2=blob2-Active_Face_Center;\rfloat dist1=dot(delta1,delta1);\rfloat dist2=dot(delta2,delta2);\rfloat nearestProxDist=sqrt(min(dist1,dist2));\rWidth=Input_Width*(1.0-step(boxMaxSize+Proximity_Radius,nearestProxDist))*(1.0-step(Proximity_Far_Distance,min(d1,d2))*(1.0-step(0.0001,Selection)));\r}\rvoid Object_To_World_Dir_B67(\rvec3 Dir_Object,\rout vec3 Dir_World)\r{\rDir_World=(world*vec4(Dir_Object,0.0)).xyz;\r}\rvoid main()\r{\rvec3 Active_Face_Center_Q49;\rActive_Face_Center_Q49=(world*vec4(_Active_Face_Dir_*0.5,1.0)).xyz;\rvec3 Blob_Position_Q41= mix(_Blob_Position_,Global_Left_Index_Tip_Position.xyz,float(Use_Global_Left_Index));\rvec3 Blob_Position_Q42= mix(_Blob_Position_2_,Global_Right_Index_Tip_Position.xyz,float(Use_Global_Right_Index));\rvec3 Active_Face_Dir_Q64=normalize((world*vec4(_Active_Face_Dir_,0.0)).xyz);\rfloat Relative_Scale_Q57;\r#if RELATIVE_WIDTH\nRelative_Scale_Q57=length((world*vec4(vec3(0,1,0),0.0)).xyz);\r#else\nRelative_Scale_Q57=1.0;\r#endif\nvec3 Tangent_World_Q30;\rTangent_World_Q30=(world*vec4(tangent,0.0)).xyz;\rvec3 Binormal_World_Q31;\rBinormal_World_Q31=(world*vec4((cross(normal,tangent)),0.0)).xyz;\rvec3 Normal_World_Q60;\rNormal_World_Q60=(world*vec4(normal,0.0)).xyz;\rvec3 Result_Q18=0.5*normal;\rvec3 Dir_World_Q67;\rObject_To_World_Dir_B67(_Active_Face_Up_,Dir_World_Q67);\rfloat Product_Q56=_Edge_Width_*Relative_Scale_Q57;\rvec3 Normal_World_N_Q29=normalize(Normal_World_Q60);\rvec3 Tangent_World_N_Q28=normalize(Tangent_World_Q30);\rvec3 Binormal_World_N_Q32=normalize(Binormal_World_Q31);\rvec3 Position_Q38;\rfloat Near_Size_Q38;\rfloat Inner_Fade_Q38;\rfloat Blob_Enable_Q38;\rfloat Fade_Q38;\rfloat Pulse_Q38;\rChoose_Blob_B38(color,Blob_Position_Q41,Blob_Position_Q42,_Blob_Enable_,_Blob_Enable_2_,_Blob_Near_Size_,_Blob_Near_Size_2_,_Blob_Inner_Fade_,_Blob_Inner_Fade_2_,_Blob_Pulse_,_Blob_Pulse_2_,_Blob_Fade_,_Blob_Fade_2_,Position_Q38,Near_Size_Q38,Inner_Fade_Q38,Blob_Enable_Q38,Fade_Q38,Pulse_Q38);\rvec3 Face_Center_Q33;\rFace_Center_Q33=(world*vec4(Result_Q18,1.0)).xyz;\rvec2 Face_Size_Q50=vec2(length(Tangent_World_Q30),length(Binormal_World_Q31));\rfloat Show_Selection_Q48;\rSelection_Vertex_B48(Blob_Position_Q41,Blob_Position_Q42,Face_Center_Q33,Face_Size_Q50,Normal_World_N_Q29,Tangent_World_N_Q28,Binormal_World_N_Q32,_Selection_Fuzz_,_Selected_,_Selected_Distance_,_Selected_Fade_Length_,Active_Face_Dir_Q64,Show_Selection_Q48);\rvec3 Normalized_Q72=normalize(Dir_World_Q67);\rfloat Active_Q34=max(0.0,dot(Active_Face_Dir_Q64,Normal_World_N_Q29));\rfloat Width_Q54;\rProximity_Visibility_B54(Show_Selection_Q48,Blob_Position_Q41,Blob_Position_Q42,Product_Q56,_Proximity_Far_Distance_,_Proximity_Near_Radius_,Active_Face_Center_Q49,Active_Face_Dir_Q64,Width_Q54);\rvec3 Wire_Vx_Pos_Q51;\rvec2 UV_Q51;\rvec2 Widths_Q51;\rWireframe_Vertex_B51(position,normal,tangent,(cross(normal,tangent)),Width_Q54,Face_Size_Q50,Wire_Vx_Pos_Q51,UV_Q51,Widths_Q51);\rvec3 Vec3_Q27=vec3(Widths_Q51.x,Widths_Q51.y,color.r);\rvec3 Pos_World_Q13;\rObject_To_World_Pos_B13(Wire_Vx_Pos_Q51,Pos_World_Q13);\rvec3 Incident_Q36=normalize(Pos_World_Q13-cameraPosition);\rvec3 Out_Position_Q47;\rvec2 Out_UV_Q47;\rvec3 Blob_Info_Q47;\rBlob_Vertex_B47(Pos_World_Q13,Normal_World_N_Q29,Tangent_World_N_Q28,Binormal_World_N_Q32,Position_Q38,_Blob_Intensity_,Near_Size_Q38,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,color,uv,Face_Center_Q33,Face_Size_Q50,UV_Q51,_Blob_Fade_Length_,_Selection_Fade_,_Selection_Fade_Size_,Inner_Fade_Q38,Active_Face_Center_Q49,Pulse_Q38,Fade_Q38,Blob_Enable_Q38,Out_Position_Q47,Out_UV_Q47,Blob_Info_Q47);\rvec4 Extra1_Q66;\rfloat Distance_To_Face_Q66;\rfloat Intensity_Q66;\rProximity_Vertex_B66(Blob_Position_Q41,Blob_Position_Q42,Active_Face_Center_Q49,Active_Face_Dir_Q64,Pos_World_Q13,_Proximity_Far_Distance_,Relative_Scale_Q57,_Proximity_Anisotropy_,Normalized_Q72,Extra1_Q66,Distance_To_Face_Q66,Intensity_Q66);\rvec4 Holo_Edges_Q44;\rHolo_Edge_Vertex_B44(Incident_Q36,Normal_World_N_Q29,uv,Tangent_World_Q30,Binormal_World_Q31,_Smooth_Active_Face_,Active_Q34,Holo_Edges_Q44);\rvec3 Vec3_Q19=vec3(Show_Selection_Q48,Distance_To_Face_Q66,Intensity_Q66);\rvec3 Position=Out_Position_Q47;\rvec2 UV=Out_UV_Q47;\rvec3 Tangent=Blob_Info_Q47;\rvec3 Binormal=Vec3_Q19;\rvec3 Normal=Vec3_Q27;\rvec4 Extra1=Extra1_Q66;\rvec4 Color=Holo_Edges_Q44;\rgl_Position=viewProjection*vec4(Position,1);\rvPosition=Position;\rvNormal=Normal;\rvUV=UV;\rvTangent=Tangent;\rvBinormal=Binormal;\rvColor=Color;\rvExtra1=Extra1;\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const fluentButtonVertexShader = { name, shader };\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { serializeAsColor4, serializeAsVector3, serialize, SerializationHelper } from \"core/Misc/decorators\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport { Vector3, Vector4 } from \"core/Maths/math.vector\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"core/Materials/materialHelper\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { Color3, Color4 } from \"core/Maths/math.color\";\r\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\r\nimport { Constants } from \"core/Engines/constants\";\r\n\r\nimport \"./shaders/fluentButton.fragment\";\r\nimport \"./shaders/fluentButton.vertex\";\r\n\r\n/** @internal */\r\nclass FluentButtonMaterialDefines extends MaterialDefines {\r\n    public RELATIVE_WIDTH = true;\r\n    public ENABLE_FADE = true;\r\n\r\n    constructor() {\r\n        super();\r\n        this._needNormals = true;\r\n        this._needUVs = true;\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render square buttons with fluent design\r\n * @since 5.0.0\r\n */\r\nexport class FluentButtonMaterial extends PushMaterial {\r\n    /**\r\n     * URL pointing to the texture used to define the coloring for the fluent blob effect.\r\n     */\r\n    public static BLOB_TEXTURE_URL = \"https://assets.babylonjs.com/meshes/MRTK/mrtk-fluent-button-blob.png\";\r\n\r\n    /**\r\n     * Gets or sets the width of the glowing edge, relative to the scale of the button.\r\n     * (Default is 4% of the height).\r\n     */\r\n    @serialize()\r\n    public edgeWidth = 0.04;\r\n\r\n    /**\r\n     * Gets or sets the color of the glowing edge.\r\n     */\r\n    @serializeAsColor4()\r\n    public edgeColor = new Color4(0.592157, 0.592157, 0.592157, 1.0);\r\n\r\n    /**\r\n     * Gets or sets the maximum intensity of the proximity light.\r\n     */\r\n    @serialize()\r\n    public proximityMaxIntensity = 0.45;\r\n\r\n    /**\r\n     * Gets or sets the maximum distance for the proximity light (Default is 16mm).\r\n     */\r\n    @serialize()\r\n    public proximityFarDistance = 0.16;\r\n\r\n    /**\r\n     * Gets or sets the radius of the proximity light when near to the surface.\r\n     */\r\n    @serialize()\r\n    public proximityNearRadius = 1.5;\r\n\r\n    /**\r\n     * Gets or sets the anisotropy of the proximity light.\r\n     */\r\n    @serialize()\r\n    public proximityAnisotropy = 1;\r\n\r\n    /**\r\n     * Gets or sets the amount of fuzzing in the selection focus.\r\n     */\r\n    @serialize()\r\n    public selectionFuzz = 0.5;\r\n\r\n    /**\r\n     * Gets or sets an override value to display the button as selected.\r\n     */\r\n    @serialize()\r\n    public selected = 0;\r\n\r\n    /**\r\n     * Gets or sets a value to manually fade the blob size.\r\n     */\r\n    @serialize()\r\n    public selectionFade = 0;\r\n\r\n    /**\r\n     * Gets or sets a value to manually shrink the blob size as it fades (see selectionFade).\r\n     */\r\n    @serialize()\r\n    public selectionFadeSize = 0.3;\r\n\r\n    /**\r\n     * Gets or sets the distance from the button the cursor should be for the button\r\n     * to appear selected (Default is 8cm).\r\n     */\r\n    @serialize()\r\n    public selectedDistance = 0.08;\r\n\r\n    /**\r\n     * Gets or sets the fall-off distance for the selection fade (Default is 8cm).\r\n     */\r\n    @serialize()\r\n    public selectedFadeLength = 0.08;\r\n\r\n    /**\r\n     * Gets or sets the intensity of the luminous blob (Ranges 0-1, default is 0.5).\r\n     */\r\n    @serialize()\r\n    public blobIntensity = 0.5;\r\n\r\n    /**\r\n     * The size of the blob when the pointer is at the blobFarDistance (Default is 5cm).\r\n     */\r\n    @serialize()\r\n    public blobFarSize = 0.05;\r\n\r\n    /**\r\n     * The distance at which the pointer is considered near. See [left|right]BlobNearSize. (Default is 0cm).\r\n     */\r\n    @serialize()\r\n    public blobNearDistance = 0;\r\n\r\n    /**\r\n     * The distance at which the pointer is considered far. See [left|right]BlobFarSize. (Default is 8cm).\r\n     */\r\n    @serialize()\r\n    public blobFarDistance = 0.08;\r\n\r\n    /**\r\n     * The distance over which the blob intensity fades from full to none (Default is 8cm).\r\n     */\r\n    @serialize()\r\n    public blobFadeLength = 0.08;\r\n\r\n    /**\r\n     * Gets or sets whether the blob corresponding to the left index finger is enabled.\r\n     */\r\n    @serialize()\r\n    public leftBlobEnable = true;\r\n\r\n    /**\r\n     * Gets or sets the size of the left blob when the left pointer is considered near. See blobNearDistance. (Default is 2.5cm).\r\n     */\r\n    @serialize()\r\n    public leftBlobNearSize = 0.025;\r\n\r\n    /**\r\n     * Gets or sets the progress of the pulse animation on the left blob (Ranges 0-1).\r\n     */\r\n    @serialize()\r\n    public leftBlobPulse = 0;\r\n\r\n    /**\r\n     * Gets or sets the fade factor on the left blob.\r\n     */\r\n    @serialize()\r\n    public leftBlobFade = 1;\r\n\r\n    /**\r\n     * Gets or sets the inner fade on the left blob;\r\n     */\r\n    @serialize()\r\n    public leftBlobInnerFade = 0.01;\r\n\r\n    /**\r\n     * Gets or sets whether the blob corresponding to the right index finger is enabled.\r\n     */\r\n    @serialize()\r\n    public rightBlobEnable = true;\r\n\r\n    /**\r\n     * Gets or sets the size of the right blob when the right pointer is considered near. See blobNearDistance. (Default is 2.5cm).\r\n     */\r\n    @serialize()\r\n    public rightBlobNearSize = 0.025;\r\n\r\n    /**\r\n     * Gets or sets the progress of the pulse animation on the right blob (Ranges 0-1).\r\n     */\r\n    @serialize()\r\n    public rightBlobPulse = 0;\r\n\r\n    /**\r\n     * Gets or sets the fade factor on the right blob.\r\n     */\r\n    @serialize()\r\n    public rightBlobFade = 1;\r\n\r\n    /**\r\n     * Gets or sets the inner fade on the right blob;\r\n     */\r\n    @serialize()\r\n    public rightBlobInnerFade = 0.01;\r\n\r\n    /**\r\n     * Gets or sets the direction of the active face before the world transform is applied.\r\n     * This should almost always be set to -z.\r\n     */\r\n    @serializeAsVector3()\r\n    public activeFaceDir = new Vector3(0, 0, -1);\r\n\r\n    /**\r\n     * Gets or sets the button's up direction before the world transform is applied.\r\n     * This should almost always be set to +y.\r\n     */\r\n    @serializeAsVector3()\r\n    public activeFaceUp = new Vector3(0, 1, 0);\r\n\r\n    /**\r\n     * Gets or sets whether the edge fade effect is enabled.\r\n     */\r\n    @serialize()\r\n    public enableFade = true;\r\n\r\n    /**\r\n     * Gets or sets a value corresponding to the width of the edge fade effect (Default 1.5).\r\n     */\r\n    @serialize()\r\n    public fadeWidth = 1.5;\r\n\r\n    /**\r\n     * Gets or sets whether the active face is smoothly interpolated.\r\n     */\r\n    @serialize()\r\n    public smoothActiveFace = true;\r\n\r\n    /**\r\n     * Gets or sets whether the frame of the fluent button model is visible.\r\n     * This is usually only enabled for debugging purposes.\r\n     */\r\n    @serialize()\r\n    public showFrame = false;\r\n\r\n    /**\r\n     * Gets or sets whether the blob color texture is used for the proximity\r\n     * light effect. This is usually only disabled for debugging purposes.\r\n     */\r\n    @serialize()\r\n    public useBlobTexture = true;\r\n\r\n    /**\r\n     * Gets or sets the world-space position of the tip of the left index finger.\r\n     */\r\n    @serializeAsVector3()\r\n    public globalLeftIndexTipPosition = Vector3.Zero();\r\n\r\n    /**\r\n     * Gets or sets the world-space position of the tip of the right index finger.\r\n     */\r\n    @serializeAsVector3()\r\n    public globalRightIndexTipPosition = Vector3.Zero();\r\n\r\n    private _blobTexture: Texture;\r\n\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n        this.alphaMode = Constants.ALPHA_ADD;\r\n        this.disableDepthWrite = true;\r\n        this.backFaceCulling = false;\r\n\r\n        this._blobTexture = new Texture(FluentButtonMaterial.BLOB_TEXTURE_URL, this.getScene(), true, false, Texture.NEAREST_SAMPLINGMODE);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new FluentButtonMaterialDefines();\r\n        }\r\n\r\n        const defines = <FluentButtonMaterialDefines>subMesh.materialDefines;\r\n        const scene = this.getScene();\r\n\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, false);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\r\n\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            if (defines.TANGENT) {\r\n                attribs.push(VertexBuffer.TangentKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            const shaderName = \"fluentButton\";\r\n            const join = defines.toString();\r\n\r\n            const uniforms = [\r\n                \"world\",\r\n                \"viewProjection\",\r\n                \"cameraPosition\",\r\n\r\n                \"_Edge_Width_\",\r\n                \"_Edge_Color_\",\r\n                \"_Relative_Width_\",\r\n                \"_Proximity_Max_Intensity_\",\r\n                \"_Proximity_Far_Distance_\",\r\n                \"_Proximity_Near_Radius_\",\r\n                \"_Proximity_Anisotropy_\",\r\n                \"_Selection_Fuzz_\",\r\n                \"_Selected_\",\r\n                \"_Selection_Fade_\",\r\n                \"_Selection_Fade_Size_\",\r\n                \"_Selected_Distance_\",\r\n                \"_Selected_Fade_Length_\",\r\n                \"_Blob_Enable_\",\r\n                \"_Blob_Position_\",\r\n                \"_Blob_Intensity_\",\r\n                \"_Blob_Near_Size_\",\r\n                \"_Blob_Far_Size_\",\r\n                \"_Blob_Near_Distance_\",\r\n                \"_Blob_Far_Distance_\",\r\n                \"_Blob_Fade_Length_\",\r\n                \"_Blob_Inner_Fade_\",\r\n                \"_Blob_Pulse_\",\r\n                \"_Blob_Fade_\",\r\n                \"_Blob_Texture_\",\r\n                \"_Blob_Enable_2_\",\r\n                \"_Blob_Position_2_\",\r\n                \"_Blob_Near_Size_2_\",\r\n                \"_Blob_Inner_Fade_2_\",\r\n                \"_Blob_Pulse_2_\",\r\n                \"_Blob_Fade_2_\",\r\n                \"_Active_Face_Dir_\",\r\n                \"_Active_Face_Up_\",\r\n                \"_Enable_Fade_\",\r\n                \"_Fade_Width_\",\r\n                \"_Smooth_Active_Face_\",\r\n                \"_Show_Frame_\",\r\n                \"_Use_Blob_Texture_\",\r\n\r\n                \"Use_Global_Left_Index\",\r\n                \"Use_Global_Right_Index\",\r\n                \"Global_Left_Index_Tip_Position\",\r\n                \"Global_Right_Index_Tip_Position\",\r\n                \"Global_Left_Thumb_Tip_Position\",\r\n                \"Global_Right_Thumb_Tip_Position\",\r\n                \"Global_Left_Index_Tip_Proximity\",\r\n                \"Global_Right_Index_Tip_Proximity\",\r\n            ];\r\n            const samplers: string[] = [\"_Blob_Texture_\"];\r\n            const uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4,\r\n            });\r\n\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: { maxSimultaneousLights: 4 },\r\n                    },\r\n                    engine\r\n                ),\r\n                defines,\r\n                this._materialContext\r\n            );\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const scene = this.getScene();\r\n\r\n        const defines = <FluentButtonMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n        this._activeEffect.setVector3(\"cameraPosition\", scene.activeCamera!.position);\r\n\r\n        // \"Blob Texture\"\r\n        this._activeEffect.setTexture(\"_Blob_Texture_\", this._blobTexture);\r\n\r\n        // \"Wireframe\"\r\n        this._activeEffect.setFloat(\"_Edge_Width_\", this.edgeWidth);\r\n        this._activeEffect.setColor4(\"_Edge_Color_\", new Color3(this.edgeColor.r, this.edgeColor.g, this.edgeColor.b), this.edgeColor.a);\r\n        //define _Relative_Width_ true;\r\n\r\n        // \"Proximity\"\r\n        this._activeEffect.setFloat(\"_Proximity_Max_Intensity_\", this.proximityMaxIntensity);\r\n        this._activeEffect.setFloat(\"_Proximity_Far_Distance_\", this.proximityFarDistance);\r\n        this._activeEffect.setFloat(\"_Proximity_Near_Radius_\", this.proximityNearRadius);\r\n        this._activeEffect.setFloat(\"_Proximity_Anisotropy_\", this.proximityAnisotropy);\r\n\r\n        // \"Selection\"\r\n        this._activeEffect.setFloat(\"_Selection_Fuzz_\", this.selectionFuzz);\r\n        this._activeEffect.setFloat(\"_Selected_\", this.selected);\r\n        this._activeEffect.setFloat(\"_Selection_Fade_\", this.selectionFade);\r\n        this._activeEffect.setFloat(\"_Selection_Fade_Size_\", this.selectionFadeSize);\r\n        this._activeEffect.setFloat(\"_Selected_Distance_\", this.selectedDistance);\r\n        this._activeEffect.setFloat(\"_Selected_Fade_Length_\", this.selectedFadeLength);\r\n\r\n        // \"Blob\"\r\n        this._activeEffect.setFloat(\"_Blob_Enable_\", this.leftBlobEnable ? 1.0 : 0.0);\r\n        this._activeEffect.setFloat(\"_Blob_Intensity_\", this.blobIntensity);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Size_\", this.leftBlobNearSize);\r\n        this._activeEffect.setFloat(\"_Blob_Far_Size_\", this.blobFarSize);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Distance_\", this.blobNearDistance);\r\n        this._activeEffect.setFloat(\"_Blob_Far_Distance_\", this.blobFarDistance);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_Length_\", this.blobFadeLength);\r\n        this._activeEffect.setFloat(\"_Blob_Inner_Fade_\", this.leftBlobInnerFade);\r\n        this._activeEffect.setFloat(\"_Blob_Pulse_\", this.leftBlobPulse);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_\", this.leftBlobFade);\r\n\r\n        // \"Blob 2\"\r\n        this._activeEffect.setFloat(\"_Blob_Enable_2_\", this.rightBlobEnable ? 1.0 : 0.0);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Size_2_\", this.rightBlobNearSize);\r\n        this._activeEffect.setFloat(\"_Blob_Inner_Fade_2_\", this.rightBlobInnerFade);\r\n        this._activeEffect.setFloat(\"_Blob_Pulse_2_\", this.rightBlobPulse);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_2_\", this.rightBlobFade);\r\n\r\n        // \"Active Face\"\r\n        this._activeEffect.setVector3(\"_Active_Face_Dir_\", this.activeFaceDir);\r\n        this._activeEffect.setVector3(\"_Active_Face_Up_\", this.activeFaceUp);\r\n\r\n        // \"Hololens Edge Fade\"\r\n        //define _Enable_Fade_ true;\r\n        this._activeEffect.setFloat(\"_Fade_Width_\", this.fadeWidth);\r\n        this._activeEffect.setFloat(\"_Smooth_Active_Face_\", this.smoothActiveFace ? 1.0 : 0.0);\r\n\r\n        // \"Debug\"\r\n        this._activeEffect.setFloat(\"_Show_Frame_\", this.showFrame ? 1.0 : 0.0);\r\n        this._activeEffect.setFloat(\"_Use_Blob_Texture_\", this.useBlobTexture ? 1.0 : 0.0);\r\n\r\n        // Global inputs\r\n        this._activeEffect.setFloat(\"Use_Global_Left_Index\", 1.0);\r\n        this._activeEffect.setFloat(\"Use_Global_Right_Index\", 1.0);\r\n\r\n        this._activeEffect.setVector4(\r\n            \"Global_Left_Index_Tip_Position\",\r\n            new Vector4(this.globalLeftIndexTipPosition.x, this.globalLeftIndexTipPosition.y, this.globalLeftIndexTipPosition.z, 1.0)\r\n        );\r\n        this._activeEffect.setVector4(\r\n            \"Global_Right_Index_Tip_Position\",\r\n            new Vector4(this.globalRightIndexTipPosition.x, this.globalRightIndexTipPosition.y, this.globalRightIndexTipPosition.z, 1.0)\r\n        );\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    /**\r\n     * Get the list of animatables in the material.\r\n     * @returns the list of animatables object used in the material\r\n     */\r\n    public getAnimatables(): IAnimatable[] {\r\n        return [];\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): FluentButtonMaterial {\r\n        return SerializationHelper.Clone(() => new FluentButtonMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n        serializationObject.customType = \"BABYLON.FluentButtonMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FluentButtonMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): FluentButtonMaterial {\r\n        return SerializationHelper.Parse(() => new FluentButtonMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.FluentButtonMaterial\", FluentButtonMaterial);\r\n","// Assumptions: absolute position of button mesh is inside the mesh\r\n\r\nimport { Vector3, TmpVectors } from \"core/Maths/math.vector\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport { PointerEventTypes } from \"core/Events/pointerEvents\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\nimport { Observable } from \"core/Misc/observable\";\r\n\r\nimport { Button3D } from \"./button3D\";\r\n\r\n/**\r\n * Class used to create a touchable button in 3D\r\n */\r\nexport class TouchButton3D extends Button3D {\r\n    private _collisionMesh: Mesh;\r\n\r\n    // 'front' direction. If Vector3.Zero, there is no front and all directions of interaction are accepted\r\n    private _collidableFrontDirection: Vector3;\r\n    private _isNearPressed = false;\r\n    private _interactionSurfaceHeight = 0;\r\n\r\n    private _isToggleButton = false;\r\n    private _toggleState = false;\r\n    private _toggleButtonCallback = () => {\r\n        this._onToggle(!this._toggleState);\r\n    };\r\n\r\n    /**\r\n     * An event triggered when the button is toggled. Only fired if 'isToggleButton' is true\r\n     */\r\n    public onToggleObservable = new Observable<boolean>();\r\n\r\n    /**\r\n     * Creates a new touchable button\r\n     * @param name defines the control name\r\n     * @param collisionMesh mesh to track collisions with\r\n     */\r\n    constructor(name?: string, collisionMesh?: Mesh) {\r\n        super(name);\r\n\r\n        this.collidableFrontDirection = Vector3.Zero();\r\n\r\n        if (collisionMesh) {\r\n            this.collisionMesh = collisionMesh;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Whether the current interaction is caused by near interaction or not\r\n     */\r\n    public get isActiveNearInteraction() {\r\n        return this._isNearPressed;\r\n    }\r\n\r\n    /**\r\n     * Sets the front-facing direction of the button. Pass in Vector3.Zero to allow interactions from any direction\r\n     * @param frontWorldDir the forward direction of the button\r\n     */\r\n    public set collidableFrontDirection(frontWorldDir: Vector3) {\r\n        this._collidableFrontDirection = frontWorldDir.normalize();\r\n\r\n        if (this._collisionMesh) {\r\n            const invert = TmpVectors.Matrix[0];\r\n\r\n            invert.copyFrom(this._collisionMesh.getWorldMatrix());\r\n            invert.invert();\r\n            Vector3.TransformNormalToRef(this._collidableFrontDirection, invert, this._collidableFrontDirection);\r\n            this._collidableFrontDirection.normalize();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the front-facing direction of the button, or Vector3.Zero if there is no 'front'\r\n     */\r\n    public get collidableFrontDirection() {\r\n        if (this._collisionMesh) {\r\n            // Update the front direction to reflect any rotations of the collision mesh\r\n            const transformedDirection = TmpVectors.Vector3[0];\r\n            Vector3.TransformNormalToRef(this._collidableFrontDirection, this._collisionMesh.getWorldMatrix(), transformedDirection);\r\n\r\n            return transformedDirection.normalize();\r\n        }\r\n\r\n        return this._collidableFrontDirection;\r\n    }\r\n\r\n    /**\r\n     * Sets the mesh used for testing input collision\r\n     * @param collisionMesh the new collision mesh for the button\r\n     */\r\n    public set collisionMesh(collisionMesh: Mesh) {\r\n        // Remove the GUI3DManager's data from the previous collision mesh's reserved data store, and reset interactability\r\n        if (this._collisionMesh) {\r\n            this._collisionMesh.isNearPickable = false;\r\n            if (this._collisionMesh.reservedDataStore?.GUI3D) {\r\n                this._collisionMesh.reservedDataStore.GUI3D = {};\r\n            }\r\n\r\n            this._collisionMesh.getChildMeshes().forEach((mesh) => {\r\n                mesh.isNearPickable = false;\r\n                if (mesh.reservedDataStore?.GUI3D) {\r\n                    mesh.reservedDataStore.GUI3D = {};\r\n                }\r\n            });\r\n        }\r\n\r\n        this._collisionMesh = collisionMesh;\r\n        this._injectGUI3DReservedDataStore(this._collisionMesh).control = this;\r\n        this._collisionMesh.isNearPickable = true;\r\n\r\n        this._collisionMesh.getChildMeshes().forEach((mesh) => {\r\n            this._injectGUI3DReservedDataStore(mesh).control = this;\r\n            mesh.isNearPickable = true;\r\n        });\r\n        this.collidableFrontDirection = collisionMesh.forward;\r\n    }\r\n\r\n    /**\r\n     * Setter for if this TouchButton3D should be treated as a toggle button\r\n     * @param value If this TouchHolographicButton should act like a toggle button\r\n     */\r\n    public set isToggleButton(value: boolean) {\r\n        if (value === this._isToggleButton) {\r\n            return;\r\n        }\r\n\r\n        this._isToggleButton = value;\r\n\r\n        if (value) {\r\n            this.onPointerUpObservable.add(this._toggleButtonCallback);\r\n        } else {\r\n            this.onPointerUpObservable.removeCallback(this._toggleButtonCallback);\r\n\r\n            // Safety check, reset the button if it's toggled on but no longer a toggle button\r\n            if (this._toggleState) {\r\n                this._onToggle(false);\r\n            }\r\n        }\r\n    }\r\n    public get isToggleButton() {\r\n        return this._isToggleButton;\r\n    }\r\n\r\n    /**\r\n     * A public entrypoint to set the toggle state of the TouchHolographicButton. Only works if 'isToggleButton' is true\r\n     * @param newState The new state to set the TouchHolographicButton's toggle state to\r\n     */\r\n    public set isToggled(newState: boolean) {\r\n        if (this._isToggleButton && this._toggleState !== newState) {\r\n            this._onToggle(newState);\r\n        }\r\n    }\r\n    public get isToggled() {\r\n        return this._toggleState;\r\n    }\r\n\r\n    protected _onToggle(newState: boolean) {\r\n        this._toggleState = newState;\r\n        this.onToggleObservable.notifyObservers(newState);\r\n    }\r\n\r\n    // Returns true if the collidable is in front of the button, or if the button has no front direction\r\n    private _isInteractionInFrontOfButton(collidablePos: Vector3) {\r\n        return this._getInteractionHeight(collidablePos, this._collisionMesh.getAbsolutePosition()) > 0;\r\n    }\r\n\r\n    /**\r\n     * Get the height of the touchPoint from the collidable part of the button\r\n     * @param touchPoint the point to compare to the button, in absolute position\r\n     * @returns the depth of the touch point into the front of the button\r\n     */\r\n    public getPressDepth(touchPoint: Vector3) {\r\n        if (!this._isNearPressed) {\r\n            return 0;\r\n        }\r\n        const interactionHeight = this._getInteractionHeight(touchPoint, this._collisionMesh.getAbsolutePosition());\r\n        return this._interactionSurfaceHeight - interactionHeight;\r\n    }\r\n\r\n    // Returns true if the collidable is in front of the button, or if the button has no front direction\r\n    protected _getInteractionHeight(interactionPos: Vector3, basePos: Vector3) {\r\n        const frontDir = this.collidableFrontDirection;\r\n        if (frontDir.length() === 0) {\r\n            // The button has no front, just return the distance to the base\r\n            return Vector3.Distance(interactionPos, basePos);\r\n        }\r\n        const d = Vector3.Dot(basePos, frontDir);\r\n        const abc = Vector3.Dot(interactionPos, frontDir);\r\n\r\n        return abc - d;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _generatePointerEventType(providedType: number, nearMeshPosition: Vector3, activeInteractionCount: number): number {\r\n        if (providedType === PointerEventTypes.POINTERDOWN || providedType === PointerEventTypes.POINTERMOVE) {\r\n            if (!this._isInteractionInFrontOfButton(nearMeshPosition)) {\r\n                // Near interaction mesh is behind the button, don't send a pointer down\r\n                return PointerEventTypes.POINTERMOVE;\r\n            } else {\r\n                this._isNearPressed = true;\r\n                this._interactionSurfaceHeight = this._getInteractionHeight(nearMeshPosition, this._collisionMesh.getAbsolutePosition());\r\n            }\r\n        }\r\n        if (providedType === PointerEventTypes.POINTERUP) {\r\n            if (activeInteractionCount == 0) {\r\n                // We get the release for the down we swallowed earlier, swallow as well\r\n                return PointerEventTypes.POINTERMOVE;\r\n            } else {\r\n                this._isNearPressed = false;\r\n            }\r\n        }\r\n\r\n        return providedType;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"TouchButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        return super._createNode(scene);\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        // Clean up toggle observables\r\n        this.onPointerUpObservable.removeCallback(this._toggleButtonCallback);\r\n        this.onToggleObservable.clear();\r\n\r\n        if (this._collisionMesh) {\r\n            this._collisionMesh.dispose();\r\n        }\r\n    }\r\n}\r\n","import type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport { StandardMaterial } from \"core/Materials/standardMaterial\";\r\nimport { TransformNode } from \"core/Meshes/transformNode\";\r\nimport { Mesh } from \"core/Meshes/mesh\";\r\nimport { CreatePlane } from \"core/Meshes/Builders/planeBuilder\";\r\nimport { CreateBox } from \"core/Meshes/Builders/boxBuilder\";\r\nimport { FadeInOutBehavior } from \"core/Behaviors/Meshes/fadeInOutBehavior\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { FluentMaterial } from \"../materials/fluent/fluentMaterial\";\r\nimport { FluentButtonMaterial } from \"../materials/fluentButton/fluentButtonMaterial\";\r\nimport { StackPanel } from \"../../2D/controls/stackPanel\";\r\nimport { Image } from \"../../2D/controls/image\";\r\nimport { TextBlock } from \"../../2D/controls/textBlock\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport type { Control3D } from \"./control3D\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { TouchButton3D } from \"./touchButton3D\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { SceneLoader } from \"core/Loading/sceneLoader\";\r\nimport { DomManagement } from \"core/Misc/domManagement\";\r\nimport { Scalar } from \"core/Maths/math.scalar\";\r\n\r\n/**\r\n * Class used to create a holographic button in 3D\r\n * @since 5.0.0\r\n */\r\nexport class TouchHolographicButton extends TouchButton3D {\r\n    /**\r\n     * Base Url for the button model.\r\n     */\r\n    public static MODEL_BASE_URL: string = \"https://assets.babylonjs.com/meshes/MRTK/\";\r\n    /**\r\n     * File name for the button model.\r\n     */\r\n    public static MODEL_FILENAME: string = \"mrtk-fluent-button.glb\";\r\n\r\n    private _backPlate: Mesh;\r\n    private _textPlate: Mesh;\r\n    private _frontPlate: AbstractMesh;\r\n    private _text: string;\r\n    private _imageUrl: string;\r\n    private _shareMaterials = true;\r\n    private _isBackplateVisible = true;\r\n    private _frontMaterial: FluentButtonMaterial;\r\n    private _backMaterial: FluentMaterial;\r\n    private _plateMaterial: StandardMaterial;\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<Vector3>>>;\r\n    private _pointerHoverObserver: Nullable<Observer<Vector3>>;\r\n    private _frontPlateDepth = 0.5;\r\n    private _backPlateDepth = 0.04;\r\n    private _backplateColor = new Color3(0.08, 0.15, 0.55);\r\n    private _backplateToggledColor = new Color3(0.25, 0.4, 0.95);\r\n\r\n    // Tooltip\r\n    private _tooltipFade: Nullable<FadeInOutBehavior>;\r\n    private _tooltipTextBlock: Nullable<TextBlock>;\r\n    private _tooltipTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _tooltipMesh: Nullable<Mesh>;\r\n    private _tooltipHoverObserver: Nullable<Observer<Control3D>>;\r\n    private _tooltipOutObserver: Nullable<Observer<Control3D>>;\r\n\r\n    private _disposeTooltip() {\r\n        this._tooltipFade = null;\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.dispose();\r\n        }\r\n        if (this._tooltipTexture) {\r\n            this._tooltipTexture.dispose();\r\n        }\r\n        if (this._tooltipMesh) {\r\n            this._tooltipMesh.dispose();\r\n        }\r\n        this.onPointerEnterObservable.remove(this._tooltipHoverObserver);\r\n        this.onPointerOutObservable.remove(this._tooltipOutObserver);\r\n    }\r\n\r\n    /**\r\n     * Rendering ground id of all the mesh in the button\r\n     */\r\n    public set renderingGroupId(id: number) {\r\n        this._backPlate.renderingGroupId = id;\r\n        this._textPlate.renderingGroupId = id;\r\n        this._frontPlate.renderingGroupId = id;\r\n\r\n        if (this._tooltipMesh) {\r\n            this._tooltipMesh.renderingGroupId = id;\r\n        }\r\n    }\r\n    public get renderingGroupId(): number {\r\n        return this._backPlate.renderingGroupId;\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh used to render this control\r\n     */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        return this._backPlate as AbstractMesh;\r\n    }\r\n\r\n    /**\r\n     * Text to be displayed on the tooltip shown when hovering on the button. When set to null tooltip is disabled. (Default: null)\r\n     */\r\n    public set tooltipText(text: Nullable<string>) {\r\n        if (!text) {\r\n            this._disposeTooltip();\r\n            return;\r\n        }\r\n        if (!this._tooltipFade) {\r\n            const rightHandedScene = this._backPlate._scene.useRightHandedSystem;\r\n            // Create tooltip with mesh and text\r\n            this._tooltipMesh = CreatePlane(\"\", { size: 1 }, this._backPlate._scene);\r\n            const tooltipBackground = CreatePlane(\"\", { size: 1, sideOrientation: Mesh.DOUBLESIDE }, this._backPlate._scene);\r\n            const mat = new StandardMaterial(\"\", this._backPlate._scene);\r\n            mat.diffuseColor = Color3.FromHexString(\"#212121\");\r\n            tooltipBackground.material = mat;\r\n            tooltipBackground.isPickable = false;\r\n            this._tooltipMesh.addChild(tooltipBackground);\r\n            tooltipBackground.position = Vector3.Forward(rightHandedScene).scale(0.05);\r\n            this._tooltipMesh.scaling.y = 1 / 3;\r\n            this._tooltipMesh.position = Vector3.Up().scale(0.7).add(Vector3.Forward(rightHandedScene).scale(-0.15));\r\n            this._tooltipMesh.isPickable = false;\r\n            this._tooltipMesh.parent = this._backPlate;\r\n\r\n            // Create text texture for the tooltip\r\n            this._tooltipTexture = AdvancedDynamicTexture.CreateForMesh(this._tooltipMesh);\r\n            this._tooltipTextBlock = new TextBlock();\r\n            this._tooltipTextBlock.scaleY = 3;\r\n            this._tooltipTextBlock.color = \"white\";\r\n            this._tooltipTextBlock.fontSize = 130;\r\n            this._tooltipTexture.addControl(this._tooltipTextBlock);\r\n\r\n            // Add hover action to tooltip\r\n            this._tooltipFade = new FadeInOutBehavior();\r\n            this._tooltipFade.delay = 500;\r\n            this._tooltipMesh.addBehavior(this._tooltipFade);\r\n            this._tooltipHoverObserver = this.onPointerEnterObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(true);\r\n                }\r\n            });\r\n            this._tooltipOutObserver = this.onPointerOutObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(false);\r\n                }\r\n            });\r\n        }\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.text = text;\r\n        }\r\n    }\r\n\r\n    public get tooltipText() {\r\n        if (this._tooltipTextBlock) {\r\n            return this._tooltipTextBlock.text;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text for the button\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n\r\n        this._text = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image url for the button\r\n     */\r\n    public get imageUrl(): string {\r\n        return this._imageUrl;\r\n    }\r\n\r\n    public set imageUrl(value: string) {\r\n        if (this._imageUrl === value) {\r\n            return;\r\n        }\r\n\r\n        this._imageUrl = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets the back material used by this button\r\n     */\r\n    public get backMaterial(): FluentMaterial {\r\n        return this._backMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the front material used by this button\r\n     */\r\n    public get frontMaterial(): FluentButtonMaterial {\r\n        return this._frontMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the plate material used by this button\r\n     */\r\n    public get plateMaterial(): StandardMaterial {\r\n        return this._plateMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this button shares its material with other HolographicButtons\r\n     */\r\n    public get shareMaterials(): boolean {\r\n        return this._shareMaterials;\r\n    }\r\n\r\n    /**\r\n     * Sets whether the backplate is visible or hidden. Hiding the backplate is not recommended without some sort of replacement\r\n     */\r\n    public set isBackplateVisible(isVisible: boolean) {\r\n        if (this.mesh && !!this._backMaterial) {\r\n            if (isVisible && !this._isBackplateVisible) {\r\n                this._backPlate.visibility = 1;\r\n            } else if (!isVisible && this._isBackplateVisible) {\r\n                this._backPlate.visibility = 0;\r\n            }\r\n        }\r\n\r\n        this._isBackplateVisible = isVisible;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     * @param shareMaterials\r\n     */\r\n    constructor(name?: string, shareMaterials = true) {\r\n        super(name);\r\n\r\n        this._shareMaterials = shareMaterials;\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            this._frontMaterial.leftBlobEnable = true;\r\n            this._frontMaterial.rightBlobEnable = true;\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            this._frontMaterial.leftBlobEnable = false;\r\n            this._frontMaterial.rightBlobEnable = false;\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (this._frontPlate && !this.isActiveNearInteraction) {\r\n                this._frontPlate.scaling.z = this._frontPlateDepth * 0.2;\r\n                this._frontPlate.position = Vector3.Forward(this._frontPlate._scene.useRightHandedSystem).scale((this._frontPlateDepth - 0.2 * this._frontPlateDepth) / 2);\r\n                this._textPlate.position = Vector3.Forward(this._textPlate._scene.useRightHandedSystem).scale(-(this._backPlateDepth + 0.2 * this._frontPlateDepth) / 2);\r\n            }\r\n        };\r\n        this.pointerUpAnimation = () => {\r\n            if (this._frontPlate) {\r\n                this._frontPlate.scaling.z = this._frontPlateDepth;\r\n                this._frontPlate.position = Vector3.Forward(this._frontPlate._scene.useRightHandedSystem).scale((this._frontPlateDepth - this._frontPlateDepth) / 2);\r\n                this._textPlate.position = Vector3.Forward(this._textPlate._scene.useRightHandedSystem).scale(-(this._backPlateDepth + this._frontPlateDepth) / 2);\r\n            }\r\n        };\r\n\r\n        this.onPointerMoveObservable.add((position) => {\r\n            if (this._frontPlate && this.isActiveNearInteraction) {\r\n                const scale = Vector3.Zero();\r\n                if (this._backPlate.getWorldMatrix().decompose(scale, undefined, undefined)) {\r\n                    let interactionHeight = this._getInteractionHeight(position, this._backPlate.getAbsolutePosition()) / scale.z;\r\n                    interactionHeight = Scalar.Clamp(interactionHeight - this._backPlateDepth / 2, 0.2 * this._frontPlateDepth, this._frontPlateDepth);\r\n\r\n                    this._frontPlate.scaling.z = interactionHeight;\r\n                    this._frontPlate.position = Vector3.Forward(this._frontPlate._scene.useRightHandedSystem).scale((this._frontPlateDepth - interactionHeight) / 2);\r\n                    this._textPlate.position = Vector3.Forward(this._textPlate._scene.useRightHandedSystem).scale(-(this._backPlateDepth + interactionHeight) / 2);\r\n                }\r\n            }\r\n        });\r\n\r\n        this._pointerHoverObserver = this.onPointerMoveObservable.add((hoverPosition: Vector3) => {\r\n            this._frontMaterial.globalLeftIndexTipPosition = hoverPosition;\r\n        });\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"TouchHolographicButton\";\r\n    }\r\n\r\n    private _rebuildContent(): void {\r\n        this._disposeFacadeTexture();\r\n\r\n        const panel = new StackPanel();\r\n        panel.isVertical = true;\r\n\r\n        if (DomManagement.IsDocumentAvailable() && !!document.createElement) {\r\n            if (this._imageUrl) {\r\n                const image = new Image();\r\n                image.source = this._imageUrl;\r\n                image.paddingTop = \"40px\";\r\n                image.height = \"180px\";\r\n                image.width = \"100px\";\r\n                image.paddingBottom = \"40px\";\r\n                panel.addControl(image);\r\n            }\r\n        }\r\n\r\n        if (this._text) {\r\n            const text = new TextBlock();\r\n            text.text = this._text;\r\n            text.color = \"white\";\r\n            text.height = \"30px\";\r\n            text.fontSize = 24;\r\n            panel.addControl(text);\r\n        }\r\n\r\n        this.content = panel;\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this.name = this.name ?? \"TouchHolographicButton\";\r\n        const collisionMesh = CreateBox(\r\n            `${this.name}_collisionMesh`,\r\n            {\r\n                width: 1.0,\r\n                height: 1.0,\r\n                depth: this._frontPlateDepth,\r\n            },\r\n            scene\r\n        );\r\n        collisionMesh.isPickable = true;\r\n        collisionMesh.isNearPickable = true;\r\n        collisionMesh.visibility = 0;\r\n        collisionMesh.position = Vector3.Forward(scene.useRightHandedSystem).scale(-this._frontPlateDepth / 2);\r\n\r\n        SceneLoader.ImportMeshAsync(undefined, TouchHolographicButton.MODEL_BASE_URL, TouchHolographicButton.MODEL_FILENAME, scene).then((result) => {\r\n            const alphaMesh = CreateBox(\r\n                \"${this.name}_alphaMesh\",\r\n                {\r\n                    width: 1.0,\r\n                    height: 1.0,\r\n                    depth: 1.0,\r\n                },\r\n                scene\r\n            );\r\n            alphaMesh.isPickable = false;\r\n            alphaMesh.material = new StandardMaterial(\"${this.name}_alphaMesh_material\", scene);\r\n            alphaMesh.material.alpha = 0.15;\r\n\r\n            const importedFrontPlate = result.meshes[1];\r\n            importedFrontPlate.name = `${this.name}_frontPlate`;\r\n            importedFrontPlate.isPickable = false;\r\n            importedFrontPlate.scaling.z = this._frontPlateDepth;\r\n            alphaMesh.parent = importedFrontPlate;\r\n            importedFrontPlate.parent = collisionMesh;\r\n            if (this._frontMaterial) {\r\n                importedFrontPlate.material = this._frontMaterial;\r\n            }\r\n            this._frontPlate = importedFrontPlate;\r\n        });\r\n\r\n        this._backPlate = CreateBox(\r\n            `${this.name}_backPlate`,\r\n            {\r\n                width: 1.0,\r\n                height: 1.0,\r\n                depth: this._backPlateDepth,\r\n            },\r\n            scene\r\n        );\r\n\r\n        this._backPlate.position = Vector3.Forward(scene.useRightHandedSystem).scale(this._backPlateDepth / 2);\r\n        this._backPlate.isPickable = false;\r\n\r\n        this._textPlate = <Mesh>super._createNode(scene);\r\n        this._textPlate.name = `${this.name}_textPlate`;\r\n        this._textPlate.isPickable = false;\r\n        this._textPlate.position = Vector3.Forward(scene.useRightHandedSystem).scale(-this._frontPlateDepth / 2);\r\n\r\n        this._backPlate.addChild(collisionMesh);\r\n        this._backPlate.addChild(this._textPlate);\r\n\r\n        const tn = new TransformNode(`{this.name}_root`, scene);\r\n        this._backPlate.setParent(tn);\r\n\r\n        this.collisionMesh = collisionMesh;\r\n        this.collidableFrontDirection = this._backPlate.forward.negate(); // Mesh is facing the wrong way\r\n\r\n        return tn;\r\n    }\r\n\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        this._plateMaterial.emissiveTexture = facadeTexture;\r\n        this._plateMaterial.opacityTexture = facadeTexture;\r\n        this._plateMaterial.diffuseColor = new Color3(0.4, 0.4, 0.4);\r\n    }\r\n\r\n    private _createBackMaterial(mesh: Mesh) {\r\n        this._backMaterial = new FluentMaterial(this.name + \"backPlateMaterial\", mesh.getScene());\r\n        this._backMaterial.albedoColor = this._backplateColor;\r\n        this._backMaterial.renderBorders = true;\r\n        this._backMaterial.renderHoverLight = false;\r\n    }\r\n\r\n    private _createFrontMaterial(mesh: Mesh) {\r\n        this._frontMaterial = new FluentButtonMaterial(this.name + \"Front Material\", mesh.getScene());\r\n    }\r\n\r\n    private _createPlateMaterial(mesh: Mesh) {\r\n        this._plateMaterial = new StandardMaterial(this.name + \"Plate Material\", mesh.getScene());\r\n        this._plateMaterial.specularColor = Color3.Black();\r\n    }\r\n\r\n    protected _onToggle(newState: boolean) {\r\n        if (this._backMaterial) {\r\n            if (newState) {\r\n                this._backMaterial.albedoColor = this._backplateToggledColor;\r\n            } else {\r\n                this._backMaterial.albedoColor = this._backplateColor;\r\n            }\r\n        }\r\n\r\n        super._onToggle(newState);\r\n    }\r\n\r\n    protected _affectMaterial(mesh: Mesh) {\r\n        if (this._shareMaterials) {\r\n            // Back\r\n            if (!this._host._touchSharedMaterials[\"backFluentMaterial\"]) {\r\n                this._createBackMaterial(mesh);\r\n                this._host._touchSharedMaterials[\"backFluentMaterial\"] = this._backMaterial;\r\n            } else {\r\n                this._backMaterial = this._host._touchSharedMaterials[\"backFluentMaterial\"] as FluentMaterial;\r\n            }\r\n\r\n            // Front\r\n            if (!this._host._touchSharedMaterials[\"frontFluentMaterial\"]) {\r\n                this._createFrontMaterial(mesh);\r\n                this._host._touchSharedMaterials[\"frontFluentMaterial\"] = this._frontMaterial;\r\n            } else {\r\n                this._frontMaterial = this._host._touchSharedMaterials[\"frontFluentMaterial\"] as FluentButtonMaterial;\r\n            }\r\n        } else {\r\n            this._createBackMaterial(mesh);\r\n            this._createFrontMaterial(mesh);\r\n        }\r\n\r\n        this._createPlateMaterial(mesh);\r\n        this._backPlate.material = this._backMaterial;\r\n        this._textPlate.material = this._plateMaterial;\r\n\r\n        if (!this._isBackplateVisible) {\r\n            this._backPlate.visibility = 0;\r\n        }\r\n        if (this._frontPlate) {\r\n            this._frontPlate.material = this._frontMaterial;\r\n        }\r\n\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose(); // will dispose main mesh ie. back plate\r\n\r\n        this._disposeTooltip();\r\n        this.onPointerMoveObservable.remove(this._pointerHoverObserver);\r\n\r\n        if (!this.shareMaterials) {\r\n            this._backMaterial.dispose();\r\n            this._frontMaterial.dispose();\r\n            this._plateMaterial.dispose();\r\n\r\n            if (this._pickedPointObserver) {\r\n                this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n                this._pickedPointObserver = null;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import type { Behavior } from \"core/Behaviors/behavior\";\r\nimport { FollowBehavior } from \"core/Behaviors/Meshes/followBehavior\";\r\nimport { SixDofDragBehavior } from \"core/Behaviors/Meshes/sixDofDragBehavior\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport type { Nullable } from \"core/types\";\r\nimport { SurfaceMagnetismBehavior } from \"core/Behaviors/Meshes/surfaceMagnetismBehavior\";\r\nimport type { Vector3 } from \"core/Maths/math.vector\";\r\nimport type { PickingInfo } from \"core/Collisions/pickingInfo\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\n\r\n/**\r\n * Default behavior for 3D UI elements.\r\n * Handles a FollowBehavior, SixDofBehavior and SurfaceMagnetismBehavior\r\n * @since 5.0.0\r\n */\r\nexport class DefaultBehavior implements Behavior<Mesh> {\r\n    private _scene: Scene;\r\n    private _followBehavior: FollowBehavior;\r\n    private _sixDofDragBehavior: SixDofDragBehavior;\r\n    private _surfaceMagnetismBehavior: SurfaceMagnetismBehavior;\r\n    private _onBeforeRenderObserver: Nullable<Observer<Scene>>;\r\n    private _onDragObserver: Nullable<Observer<{ delta: Vector3; position: Vector3; pickInfo: PickingInfo }>>;\r\n\r\n    /**\r\n     * Instantiates the default behavior\r\n     */\r\n    constructor() {\r\n        this._followBehavior = new FollowBehavior();\r\n        this._sixDofDragBehavior = new SixDofDragBehavior();\r\n        this._surfaceMagnetismBehavior = new SurfaceMagnetismBehavior();\r\n    }\r\n\r\n    /**\r\n     * Attached node of this behavior\r\n     */\r\n    public attachedNode: Nullable<Mesh>;\r\n\r\n    /**\r\n     *  The name of the behavior\r\n     */\r\n    public get name(): string {\r\n        return \"Default\";\r\n    }\r\n\r\n    /**\r\n     *  The follow behavior\r\n     */\r\n    public get followBehavior(): FollowBehavior {\r\n        return this._followBehavior;\r\n    }\r\n\r\n    /**\r\n     *  The six DoF drag behavior\r\n     */\r\n    public get sixDofDragBehavior(): SixDofDragBehavior {\r\n        return this._sixDofDragBehavior;\r\n    }\r\n\r\n    /**\r\n     * The surface magnetism behavior\r\n     */\r\n    public get surfaceMagnetismBehavior(): SurfaceMagnetismBehavior {\r\n        return this._surfaceMagnetismBehavior;\r\n    }\r\n\r\n    /**\r\n     * Enables the follow behavior\r\n     */\r\n    public followBehaviorEnabled: boolean = false;\r\n\r\n    /**\r\n     * Enables the six DoF drag behavior\r\n     */\r\n    public sixDofDragBehaviorEnabled: boolean = true;\r\n\r\n    /**\r\n     * Enables the surface magnetism behavior\r\n     */\r\n    public surfaceMagnetismBehaviorEnabled: boolean = true;\r\n\r\n    /**\r\n     *  Initializes the behavior\r\n     */\r\n    public init() {}\r\n\r\n    /**\r\n     * Attaches the default behavior\r\n     * @param ownerMesh The top level mesh\r\n     * @param draggablesMeshes Descendant meshes that can be used for dragging the owner mesh\r\n     * @param sceneUnderstandingMeshes Meshes from the scene understanding that will be used for surface magnetism\r\n     */\r\n    public attach(ownerMesh: Mesh, draggablesMeshes?: Mesh[], sceneUnderstandingMeshes?: AbstractMesh[]): void {\r\n        this._scene = ownerMesh.getScene();\r\n        this.attachedNode = ownerMesh;\r\n\r\n        this._addObservables();\r\n        // Since our observables are bound before the child behaviors', ours are called first\r\n        this._followBehavior.attach(ownerMesh);\r\n        this._sixDofDragBehavior.attach(ownerMesh);\r\n        this._sixDofDragBehavior.draggableMeshes = draggablesMeshes || null;\r\n        this._sixDofDragBehavior.faceCameraOnDragStart = true;\r\n        this._surfaceMagnetismBehavior.attach(ownerMesh, this._scene);\r\n        if (sceneUnderstandingMeshes) {\r\n            this._surfaceMagnetismBehavior.meshes = sceneUnderstandingMeshes;\r\n        }\r\n\r\n        // We disable this behavior because we will handle pose changing event manually with sixDofDragBehavior\r\n        this._surfaceMagnetismBehavior.enabled = false;\r\n    }\r\n\r\n    /**\r\n     *  Detaches the behavior from the mesh\r\n     */\r\n    public detach(): void {\r\n        this.attachedNode = null;\r\n        this._removeObservables();\r\n        this._followBehavior.detach();\r\n        this._sixDofDragBehavior.detach();\r\n        this._surfaceMagnetismBehavior.detach();\r\n    }\r\n\r\n    private _addObservables() {\r\n        this._onBeforeRenderObserver = this._scene.onBeforeRenderObservable.add(() => {\r\n            this._followBehavior._enabled = !this._sixDofDragBehavior.isMoving && this.followBehaviorEnabled;\r\n        });\r\n        this._onDragObserver = this._sixDofDragBehavior.onDragObservable.add((event: { pickInfo: PickingInfo }) => {\r\n            this._sixDofDragBehavior.disableMovement = this._surfaceMagnetismBehavior.findAndUpdateTarget(event.pickInfo);\r\n        });\r\n    }\r\n\r\n    private _removeObservables() {\r\n        this._scene.onBeforeRenderObservable.remove(this._onBeforeRenderObserver);\r\n        this._sixDofDragBehavior.onDragObservable.remove(this._onDragObserver);\r\n    }\r\n}\r\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"handleVertexShader\";\nconst shader = `precision highp float;\rattribute vec3 position;\runiform vec3 positionOffset;\runiform mat4 worldViewProjection;\runiform float scale;\rvoid main(void) {\rvec4 vPos=vec4((vec3(position)+positionOffset)*scale,1.0);\rgl_Position=worldViewProjection*vPos;\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const handleVertexShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"handlePixelShader\";\nconst shader = `uniform vec3 color;\rvoid main(void) {\rgl_FragColor=vec4(color,1.0);\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const handlePixelShader = { name, shader };\n","import { ShaderMaterial } from \"core/Materials/shaderMaterial\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Color3, TmpColors } from \"core/Maths/math.color\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\n\r\nimport \"./shaders/handle.vertex\";\r\nimport \"./shaders/handle.fragment\";\r\n\r\n/**\r\n * Class used to render gizmo handles with fluent design\r\n */\r\nexport class HandleMaterial extends ShaderMaterial {\r\n    private _hover: boolean = false;\r\n    private _drag: boolean = false;\r\n    private _onBeforeRender: Nullable<Observer<Scene>>;\r\n    private _color: Color3 = new Color3();\r\n    private _scale: number = 1;\r\n    private _targetColor: Color3;\r\n    private _targetScale: number;\r\n    private _lastTick = -1;\r\n\r\n    /**\r\n     * Is the material indicating hovering state\r\n     */\r\n    public get hover(): boolean {\r\n        return this._hover;\r\n    }\r\n\r\n    public set hover(b: boolean) {\r\n        this._hover = b;\r\n\r\n        this._updateInterpolationTarget();\r\n    }\r\n\r\n    /**\r\n     * Is the material indicating drag state\r\n     */\r\n    public get drag(): boolean {\r\n        return this._drag;\r\n    }\r\n\r\n    public set drag(b: boolean) {\r\n        this._drag = b;\r\n\r\n        this._updateInterpolationTarget();\r\n    }\r\n\r\n    /**\r\n     * Length of animation\r\n     */\r\n    public animationLength: number = 100;\r\n\r\n    /**\r\n     * Color of the handle when hovered\r\n     */\r\n    public hoverColor: Color3 = new Color3(0, 0.467, 0.84);\r\n\r\n    /**\r\n     * Color of the handle when idle\r\n     */\r\n    public baseColor: Color3 = new Color3(1, 1, 1);\r\n\r\n    /**\r\n     * Scale of the handle when hovered\r\n     */\r\n    public hoverScale: number = 0.75;\r\n\r\n    /**\r\n     * Scale of the handle when idle\r\n     */\r\n    public baseScale: number = 0.35;\r\n\r\n    /**\r\n     * Scale of the handle when dragged\r\n     */\r\n    public dragScale: number = 0.55;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _positionOffset: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * Creates a handle material\r\n     * @param name Name of the material\r\n     * @param scene Scene\r\n     */\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene, \"handle\", {\r\n            attributes: [\"position\"],\r\n            uniforms: [\"worldViewProjection\", \"color\", \"scale\", \"positionOffset\"],\r\n            needAlphaBlending: false,\r\n            needAlphaTesting: false,\r\n        });\r\n\r\n        this._updateInterpolationTarget();\r\n\r\n        // Register callback for scene after render\r\n        this._lastTick = Date.now();\r\n        this._onBeforeRender = this.getScene().onBeforeRenderObservable.add(() => {\r\n            const tick = Date.now();\r\n            const delta = tick - this._lastTick;\r\n\r\n            const scaleDiff = this._targetScale - this._scale;\r\n            const colorDiff = TmpColors.Color3[0].copyFrom(this._targetColor).subtractToRef(this._color, TmpColors.Color3[0]);\r\n\r\n            this._scale = this._scale + (scaleDiff * delta) / this.animationLength;\r\n            colorDiff.scaleToRef(delta / this.animationLength, colorDiff);\r\n            this._color.addToRef(colorDiff, this._color);\r\n\r\n            this.setColor3(\"color\", this._color);\r\n            this.setFloat(\"scale\", this._scale);\r\n            this.setVector3(\"positionOffset\", this._positionOffset);\r\n\r\n            this._lastTick = tick;\r\n        });\r\n    }\r\n\r\n    private _updateInterpolationTarget() {\r\n        if (this.drag) {\r\n            this._targetColor = this.hoverColor;\r\n            this._targetScale = this.dragScale;\r\n        } else if (this.hover) {\r\n            this._targetColor = this.hoverColor;\r\n            this._targetScale = this.hoverScale;\r\n        } else {\r\n            this._targetColor = this.baseColor;\r\n            this._targetScale = this.baseScale;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes the handle material\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n        this.getScene().onBeforeRenderObservable.remove(this._onBeforeRender);\r\n    }\r\n}\r\n","import type { Scene } from \"core/scene\";\r\nimport { CreateBox } from \"core/Meshes/Builders/boxBuilder\";\r\nimport { TransformNode } from \"core/Meshes/transformNode\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport { HandleMaterial } from \"../materials/handle/handleMaterial\";\r\nimport type { SlateGizmo } from \"./slateGizmo\";\r\nimport { BaseSixDofDragBehavior } from \"core/Behaviors/Meshes/baseSixDofDragBehavior\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\n\r\n/**\r\n * State of the handle regarding user interaction\r\n */\r\nexport enum HandleState {\r\n    /**\r\n     * Handle is idle\r\n     */\r\n    IDLE = 0,\r\n    /**\r\n     * Handle is hovered\r\n     */\r\n    HOVER = 1,\r\n    /**\r\n     * Handle is dragged\r\n     */\r\n    DRAG = 2,\r\n}\r\n\r\n/**\r\n * Base class for SlateGizmo handles\r\n */\r\nexport abstract class GizmoHandle {\r\n    protected _scene: Scene;\r\n    protected _state: HandleState = HandleState.IDLE;\r\n    protected _materials: HandleMaterial[] = [];\r\n\r\n    private _dragStartObserver: Nullable<Observer<any>>;\r\n    private _draggingObserver: Nullable<Observer<any>>;\r\n    private _dragEndObserver: Nullable<Observer<any>>;\r\n    /**\r\n     * @internal\r\n     */\r\n    public _dragBehavior: BaseSixDofDragBehavior;\r\n\r\n    /**\r\n     * The current state of the handle\r\n     */\r\n    public get state(): HandleState {\r\n        return this._state;\r\n    }\r\n\r\n    private _gizmo: SlateGizmo;\r\n\r\n    /**\r\n     * Returns the gizmo carrying this handle\r\n     */\r\n    public get gizmo() {\r\n        return this._gizmo;\r\n    }\r\n\r\n    /**\r\n     * Sets hover state\r\n     */\r\n    public set hover(value: boolean) {\r\n        if (value) {\r\n            this._state |= HandleState.HOVER;\r\n        } else {\r\n            this._state &= ~HandleState.HOVER;\r\n        }\r\n\r\n        this._updateMaterial();\r\n    }\r\n    /**\r\n     * Sets drag state\r\n     */\r\n    public set drag(value: boolean) {\r\n        if (value) {\r\n            this._state |= HandleState.DRAG;\r\n        } else {\r\n            this._state &= ~HandleState.DRAG;\r\n        }\r\n\r\n        this._updateMaterial();\r\n    }\r\n\r\n    /**\r\n     * Node of this handle\r\n     */\r\n    public node: TransformNode;\r\n\r\n    /**\r\n     * Creates a handle for a SlateGizmo\r\n     * @param gizmo associated SlateGizmo\r\n     * @param scene scene\r\n     */\r\n    constructor(gizmo: SlateGizmo, scene: Scene) {\r\n        this._scene = scene;\r\n        this._gizmo = gizmo;\r\n\r\n        this.node = this.createNode();\r\n        this.node.reservedDataStore = {\r\n            handle: this,\r\n        };\r\n    }\r\n\r\n    protected _createMaterial(positionOffset?: Vector3) {\r\n        const mat = new HandleMaterial(\"handle\", this._scene);\r\n        if (positionOffset) {\r\n            mat._positionOffset = positionOffset;\r\n        }\r\n        return mat;\r\n    }\r\n\r\n    private _updateMaterial() {\r\n        const state = this._state;\r\n        for (const mat of this._materials) {\r\n            mat.hover = false;\r\n            mat.drag = false;\r\n        }\r\n\r\n        if (state & HandleState.DRAG) {\r\n            for (const mat of this._materials) {\r\n                mat.drag = true;\r\n            }\r\n        } else if (state & HandleState.HOVER) {\r\n            for (const mat of this._materials) {\r\n                mat.hover = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Binds callbacks from dragging interaction\r\n     * @param dragStartFn Function to call on drag start\r\n     * @param dragFn Function to call on drag\r\n     * @param dragEndFn Function to call on drag end\r\n     */\r\n    public setDragBehavior(dragStartFn: (event: { position: Vector3 }) => void, dragFn: (event: { position: Vector3 }) => void, dragEndFn: () => void) {\r\n        const dragBehavior = new BaseSixDofDragBehavior();\r\n\r\n        this._dragBehavior = dragBehavior;\r\n\r\n        this._dragStartObserver = dragBehavior.onDragStartObservable.add(dragStartFn);\r\n        this._draggingObserver = dragBehavior.onDragObservable.add(dragFn);\r\n        this._dragEndObserver = dragBehavior.onDragEndObservable.add(dragEndFn);\r\n\r\n        this._dragBehavior.attach(this.node);\r\n    }\r\n\r\n    /**\r\n     * Creates the meshes and parent node of the handle\r\n     * Should be overridden by child classes\r\n     * @returns created node\r\n     */\r\n    public abstract createNode(): TransformNode;\r\n\r\n    /**\r\n     * Disposes the handle\r\n     */\r\n    public dispose() {\r\n        this._dragBehavior.onDragStartObservable.remove(this._dragStartObserver);\r\n        this._dragBehavior.onDragObservable.remove(this._draggingObserver);\r\n        this._dragBehavior.onDragEndObservable.remove(this._dragEndObserver);\r\n\r\n        this._dragBehavior.detach();\r\n\r\n        for (const material of this._materials) {\r\n            material.dispose();\r\n        }\r\n        this.node.dispose();\r\n    }\r\n}\r\n\r\n/**\r\n * Side handle class that rotates the slate\r\n */\r\nexport class SideHandle extends GizmoHandle {\r\n    /**\r\n     * Creates the meshes and parent node of the handle\r\n     * @returns created node\r\n     */\r\n    public createNode() {\r\n        // Create a simple vertical rectangle\r\n        const verticalBox = CreateBox(\"sideVert\", { width: 1, height: 10, depth: 0.1 }, this._scene);\r\n        const sideNode = new TransformNode(\"side\", this._scene);\r\n        verticalBox.parent = sideNode;\r\n\r\n        const mat = this._createMaterial();\r\n        verticalBox.material = mat;\r\n        verticalBox.isNearGrabbable = true;\r\n        this._materials.push(mat);\r\n\r\n        return sideNode;\r\n    }\r\n}\r\n\r\n/**\r\n * Corner handle that resizes the slate\r\n */\r\nexport class CornerHandle extends GizmoHandle {\r\n    /**\r\n     * Creates the meshes and parent node of the handle\r\n     * @returns created node\r\n     */\r\n    public createNode() {\r\n        // Create 2 boxes making a bottom left corner\r\n        const horizontalBox = CreateBox(\"angleHor\", { width: 3, height: 1, depth: 0.1 }, this._scene);\r\n        const verticalBox = CreateBox(\"angleVert\", { width: 1, height: 3, depth: 0.1 }, this._scene);\r\n\r\n        const angleNode = new TransformNode(\"angle\", this._scene);\r\n        horizontalBox.parent = angleNode;\r\n        verticalBox.parent = angleNode;\r\n\r\n        horizontalBox.material = this._createMaterial(new Vector3(1, 0, 0));\r\n        verticalBox.material = this._createMaterial(new Vector3(0, 1, 0));\r\n        verticalBox.isNearGrabbable = true;\r\n        horizontalBox.isNearGrabbable = true;\r\n\r\n        this._materials.push(horizontalBox.material as HandleMaterial);\r\n        this._materials.push(verticalBox.material as HandleMaterial);\r\n        return angleNode;\r\n    }\r\n}\r\n","import { Gizmo } from \"core/Gizmos/gizmo\";\r\nimport { Epsilon } from \"core/Maths/math.constants\";\r\nimport { Matrix, Quaternion, TmpVectors, Vector3 } from \"core/Maths/math.vector\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { PivotTools } from \"core/Misc/pivotTools\";\r\nimport type { UtilityLayerRenderer } from \"core/Rendering/utilityLayerRenderer\";\r\nimport type { Nullable } from \"core/types\";\r\n\r\nimport type { HolographicSlate } from \"../controls/holographicSlate\";\r\nimport type { GizmoHandle } from \"./gizmoHandle\";\r\nimport { CornerHandle, SideHandle } from \"./gizmoHandle\";\r\n\r\n// Mask contains the influence of the drag offset vectors on dimensions or origin of the slate\r\n// Mask vector is multiplied to the offset vector\r\ntype HandleMasks = {\r\n    dimensions: Vector3;\r\n    origin: Vector3;\r\n};\r\n\r\n/**\r\n * Gizmo to resize 2D slates\r\n */\r\nexport class SlateGizmo extends Gizmo {\r\n    private _boundingDimensions = new Vector3(0, 0, 0);\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<AbstractMesh>>>;\r\n    private _renderObserver: Nullable<Observer<Scene>> = null;\r\n\r\n    private _tmpQuaternion = new Quaternion();\r\n    private _tmpVector = new Vector3(0, 0, 0);\r\n\r\n    // Ordered bl, br, tr, tl\r\n    private _corners: CornerHandle[] = [];\r\n    // Ordered left, bottom, right, top\r\n    private _sides: SideHandle[] = [];\r\n    private _handlesParent: TransformNode;\r\n    private _handleHovered: Nullable<GizmoHandle>;\r\n    private _handleDragged: Nullable<GizmoHandle>;\r\n\r\n    private _boundingBoxGizmo = {\r\n        min: new Vector3(),\r\n        max: new Vector3(),\r\n    };\r\n\r\n    /**\r\n     * Value we use to offset handles from mesh\r\n     */\r\n    private _margin = 0.35;\r\n    private _handleSize = 0.075;\r\n    private _attachedSlate: Nullable<HolographicSlate> = null;\r\n    private _existingSlateScale = new Vector3();\r\n    /**\r\n     * If set, the handles will increase in size based on the distance away from the camera to have a consistent screen size (Default: true)\r\n     */\r\n    public fixedScreenSize = false;\r\n    /**\r\n     * The distance away from the object which the draggable meshes should appear world sized when fixedScreenSize is set to true (default: 10)\r\n     */\r\n    public fixedScreenSizeDistanceFactor = 10;\r\n\r\n    /**\r\n     * The slate attached to this gizmo\r\n     */\r\n    public set attachedSlate(control: Nullable<HolographicSlate>) {\r\n        if (control) {\r\n            this.attachedMesh = control.mesh;\r\n            this.updateBoundingBox();\r\n\r\n            this._pickedPointObserver = control._host.onPickingObservable.add((pickedMesh) => {\r\n                if (this._handleHovered && (!pickedMesh || pickedMesh.parent !== this._handleHovered.node)) {\r\n                    this._handleHovered.hover = false;\r\n                    this._handleHovered = null;\r\n                }\r\n\r\n                if (pickedMesh && pickedMesh.parent && pickedMesh.parent.reservedDataStore && pickedMesh.parent.reservedDataStore.handle) {\r\n                    const handle = pickedMesh.parent.reservedDataStore.handle as GizmoHandle;\r\n                    if (handle.gizmo === this) {\r\n                        this._handleHovered = handle;\r\n                        this._handleHovered.hover = true;\r\n                    }\r\n                }\r\n            });\r\n        } else if (this._attachedSlate) {\r\n            this._attachedSlate._host.onPickingObservable.remove(this._pickedPointObserver);\r\n        }\r\n        this._attachedSlate = control;\r\n    }\r\n\r\n    public get attachedSlate(): Nullable<HolographicSlate> {\r\n        return this._attachedSlate;\r\n    }\r\n\r\n    constructor(utilityLayer?: UtilityLayerRenderer) {\r\n        super(utilityLayer);\r\n\r\n        this._createNode();\r\n        this.updateScale = false;\r\n\r\n        this._renderObserver = this.gizmoLayer.originalScene.onBeforeRenderObservable.add(() => {\r\n            // Only update the bounding box if scaling has changed\r\n            if (this.attachedMesh && !this._existingSlateScale.equals(this.attachedMesh.scaling)) {\r\n                this.updateBoundingBox();\r\n            }\r\n        });\r\n    }\r\n\r\n    private _createNode() {\r\n        this._handlesParent = new TransformNode(\"handlesParent\", this.gizmoLayer.utilityLayerScene);\r\n        this._handlesParent.rotationQuaternion = Quaternion.Identity();\r\n\r\n        const masksCorners = [\r\n            {\r\n                dimensions: new Vector3(-1, -1, 0),\r\n                origin: new Vector3(1, 0, 0),\r\n            },\r\n            {\r\n                dimensions: new Vector3(1, -1, 0),\r\n                origin: new Vector3(0, 0, 0),\r\n            },\r\n            {\r\n                dimensions: new Vector3(1, 1, 0),\r\n                origin: new Vector3(0, 1, 0),\r\n            },\r\n            {\r\n                dimensions: new Vector3(-1, 1, 0),\r\n                origin: new Vector3(1, 1, 0),\r\n            },\r\n        ];\r\n\r\n        for (let i = 0; i < 4; i++) {\r\n            const corner = new CornerHandle(this, this.gizmoLayer.utilityLayerScene);\r\n            this._corners.push(corner);\r\n            corner.node.rotation.z = (Math.PI / 2) * i;\r\n\r\n            corner.node.parent = this._handlesParent;\r\n            this._assignDragBehaviorCorners(\r\n                corner,\r\n                (originStart: Vector3, dimensionsStart: Vector3, offset: Vector3, masks: HandleMasks) => this._moveHandle(originStart, dimensionsStart, offset, masks, true),\r\n                masksCorners[i]\r\n            );\r\n        }\r\n\r\n        for (let i = 0; i < 4; i++) {\r\n            const side = new SideHandle(this, this.gizmoLayer.utilityLayerScene);\r\n            this._sides.push(side);\r\n            side.node.rotation.z = (Math.PI / 2) * i;\r\n            side.node.parent = this._handlesParent;\r\n            this._assignDragBehaviorSides(side, i % 2 === 0 ? new Vector3(0, 1, 0) : new Vector3(1, 0, 0));\r\n        }\r\n\r\n        this._handlesParent.parent = this._rootMesh;\r\n    }\r\n\r\n    private _keepAspectRatio(vector: Vector3, aspectRatio: number, invertDiagonal: boolean = false) {\r\n        const axis = TmpVectors.Vector3[0];\r\n        axis.copyFromFloats(aspectRatio, 1, 0).normalize();\r\n        if (invertDiagonal) {\r\n            axis.y *= -1;\r\n        }\r\n        const dot = Vector3.Dot(vector, axis);\r\n        vector.copyFrom(axis).scaleInPlace(dot);\r\n    }\r\n\r\n    private _clampDimensions(vector: Vector3, dimensions: Vector3, mask: Vector3, keepAspectRatio: boolean = false) {\r\n        const impact = TmpVectors.Vector3[0];\r\n        impact.copyFrom(vector).multiplyInPlace(mask);\r\n\r\n        const clampedDimensions = TmpVectors.Vector3[1];\r\n        clampedDimensions.copyFromFloats(\r\n            Math.max(this._attachedSlate!.minDimensions.x, impact.x + dimensions.x),\r\n            Math.max(this._attachedSlate!.minDimensions.y, impact.y + dimensions.y),\r\n            0\r\n        );\r\n\r\n        if (keepAspectRatio) {\r\n            // Extra logic to ensure the ratio is maintained when the vector has been clamped\r\n            const ratio = dimensions.x / dimensions.y;\r\n            clampedDimensions.x = Math.max(clampedDimensions.x, clampedDimensions.y * ratio);\r\n            clampedDimensions.y = Math.max(clampedDimensions.y, clampedDimensions.x / ratio);\r\n        }\r\n\r\n        // Calculating the real impact of vector on clamped dimensions\r\n        impact.copyFrom(clampedDimensions).subtractInPlace(dimensions);\r\n\r\n        vector.x = Math.sign(vector.x) * Math.abs(impact.x);\r\n        vector.y = Math.sign(vector.y) * Math.abs(impact.y);\r\n    }\r\n\r\n    private _moveHandle(originStart: Vector3, dimensionsStart: Vector3, offset: Vector3, masks: HandleMasks, isCorner: boolean) {\r\n        if (!this._attachedSlate) {\r\n            return;\r\n        }\r\n\r\n        if (isCorner) {\r\n            const aspectRatio = dimensionsStart.x / dimensionsStart.y;\r\n            this._keepAspectRatio(offset, aspectRatio, masks.dimensions.x * masks.dimensions.y < 0);\r\n        }\r\n        this._clampDimensions(offset, dimensionsStart, masks.dimensions, isCorner);\r\n\r\n        const offsetOriginMasked = TmpVectors.Vector3[0];\r\n        const offsetDimensionsMasked = TmpVectors.Vector3[1];\r\n        offsetOriginMasked.copyFrom(offset).multiplyInPlace(masks.origin);\r\n        offsetDimensionsMasked.copyFrom(offset).multiplyInPlace(masks.dimensions);\r\n\r\n        this._attachedSlate.origin.copyFrom(originStart).addInPlace(offsetOriginMasked);\r\n        this._attachedSlate.dimensions.set(dimensionsStart.x + offsetDimensionsMasked.x, dimensionsStart.y + offsetDimensionsMasked.y);\r\n    }\r\n\r\n    private _assignDragBehaviorCorners(\r\n        handle: GizmoHandle,\r\n        moveFn: (originStart: Vector3, dimensionsStart: Vector3, offset: Vector3, masks: HandleMasks) => void,\r\n        masks: HandleMasks\r\n    ) {\r\n        const dimensionsStart = new Vector3();\r\n        const originStart = new Vector3();\r\n        const dragOrigin = new Vector3();\r\n        const toObjectFrame = new Matrix();\r\n        const dragPlaneNormal = new Vector3();\r\n\r\n        const projectToRef = (position: Vector3, normal: Vector3, origin: Vector3, ref: Vector3) => {\r\n            // Projects on the plane with its normal and origin\r\n            position.subtractToRef(origin, TmpVectors.Vector3[0]);\r\n            const dot = Vector3.Dot(TmpVectors.Vector3[0], normal);\r\n            TmpVectors.Vector3[1].copyFrom(normal).scaleInPlace(dot);\r\n            TmpVectors.Vector3[0].subtractInPlace(TmpVectors.Vector3[1]);\r\n            TmpVectors.Vector3[0].addToRef(origin, ref);\r\n        };\r\n\r\n        const dragStart = (event: { position: Vector3 }) => {\r\n            if (this.attachedSlate && this.attachedMesh) {\r\n                dimensionsStart.set(this.attachedSlate.dimensions.x, this.attachedSlate.dimensions.y, Epsilon);\r\n                originStart.copyFrom(this.attachedSlate.origin);\r\n                dragOrigin.copyFrom(event.position);\r\n                toObjectFrame.copyFrom(this.attachedMesh.computeWorldMatrix(true));\r\n                toObjectFrame.invert();\r\n                this.attachedSlate._followButton.isToggled = false;\r\n                Vector3.TransformNormalToRef(Vector3.Forward(), this.attachedMesh.getWorldMatrix(), dragPlaneNormal);\r\n                dragPlaneNormal.normalize();\r\n\r\n                if (this._handleHovered) {\r\n                    this._handleDragged = this._handleHovered;\r\n                    this._handleDragged.drag = true;\r\n                }\r\n            }\r\n        };\r\n\r\n        const dragging = (event: { position: Vector3 }) => {\r\n            if (this.attachedSlate && this.attachedMesh) {\r\n                projectToRef(event.position, dragPlaneNormal, dragOrigin, this._tmpVector);\r\n                this._tmpVector.subtractInPlace(dragOrigin);\r\n                Vector3.TransformNormalToRef(this._tmpVector, toObjectFrame, this._tmpVector);\r\n\r\n                moveFn(originStart, dimensionsStart, this._tmpVector, masks);\r\n                this.attachedSlate._positionElements();\r\n                this.updateBoundingBox();\r\n            }\r\n        };\r\n\r\n        const dragEnd = () => {\r\n            if (this.attachedSlate && this.attachedNode) {\r\n                this.attachedSlate._updatePivot();\r\n\r\n                if (this._handleDragged) {\r\n                    this._handleDragged.drag = false;\r\n                    this._handleDragged = null;\r\n                }\r\n            }\r\n        };\r\n\r\n        handle.setDragBehavior(dragStart, dragging, dragEnd);\r\n    }\r\n\r\n    private _assignDragBehaviorSides(handle: GizmoHandle, dragPlaneNormal: Vector3) {\r\n        const quaternionOrigin = new Quaternion();\r\n        const dragOrigin = new Vector3();\r\n        const directionOrigin = new Vector3();\r\n        const worldPivot = new Vector3();\r\n        const worldPlaneNormal = new Vector3();\r\n\r\n        const dragStart = (event: { position: Vector3 }) => {\r\n            if (this.attachedSlate && this.attachedMesh) {\r\n                quaternionOrigin.copyFrom(this.attachedMesh.rotationQuaternion!);\r\n                dragOrigin.copyFrom(event.position);\r\n                worldPivot.copyFrom(this.attachedMesh.getAbsolutePivotPoint());\r\n                directionOrigin.copyFrom(dragOrigin).subtractInPlace(worldPivot).normalize();\r\n                this.attachedSlate._followButton.isToggled = false;\r\n                Vector3.TransformNormalToRef(dragPlaneNormal, this.attachedMesh.getWorldMatrix(), worldPlaneNormal);\r\n                worldPlaneNormal.normalize();\r\n\r\n                if (this._handleHovered) {\r\n                    this._handleDragged = this._handleHovered;\r\n                    this._handleDragged.drag = true;\r\n                }\r\n            }\r\n        };\r\n\r\n        const dragging = (event: { position: Vector3 }) => {\r\n            if (this.attachedSlate && this.attachedMesh) {\r\n                this._tmpVector.copyFrom(event.position);\r\n                this._tmpVector.subtractInPlace(worldPivot);\r\n                this._tmpVector.normalize();\r\n\r\n                const angle = -Vector3.GetAngleBetweenVectorsOnPlane(this._tmpVector, directionOrigin, worldPlaneNormal);\r\n                Quaternion.RotationAxisToRef(dragPlaneNormal, angle, this._tmpQuaternion);\r\n                quaternionOrigin.multiplyToRef(this._tmpQuaternion, this.attachedMesh.rotationQuaternion!);\r\n            }\r\n        };\r\n\r\n        const dragEnd = () => {\r\n            if (this.attachedSlate && this.attachedNode) {\r\n                this.attachedSlate._updatePivot();\r\n\r\n                if (this._handleDragged) {\r\n                    this._handleDragged.drag = false;\r\n                    this._handleDragged = null;\r\n                }\r\n            }\r\n        };\r\n\r\n        handle.setDragBehavior(dragStart, dragging, dragEnd);\r\n    }\r\n\r\n    protected _attachedNodeChanged(value: Nullable<AbstractMesh>) {\r\n        if (value) {\r\n            this.updateBoundingBox();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the bounding box information for the gizmo\r\n     */\r\n    public updateBoundingBox() {\r\n        if (this.attachedMesh) {\r\n            PivotTools._RemoveAndStorePivotPoint(this.attachedMesh);\r\n\r\n            // Store original parent\r\n            const originalParent = this.attachedMesh.parent;\r\n            this.attachedMesh.setParent(null);\r\n\r\n            this._update();\r\n\r\n            // Rotate based on axis\r\n            if (!this.attachedMesh.rotationQuaternion) {\r\n                this.attachedMesh.rotationQuaternion = Quaternion.RotationYawPitchRoll(this.attachedMesh.rotation.y, this.attachedMesh.rotation.x, this.attachedMesh.rotation.z);\r\n            }\r\n\r\n            // Store original position and reset mesh to origin before computing the bounding box\r\n            this._tmpQuaternion.copyFrom(this.attachedMesh.rotationQuaternion);\r\n            this._tmpVector.copyFrom(this.attachedMesh.position);\r\n            this.attachedMesh.rotationQuaternion.set(0, 0, 0, 1);\r\n            this.attachedMesh.position.set(0, 0, 0);\r\n\r\n            // Update bounding dimensions/positions\r\n            const boundingMinMax = this.attachedMesh.getHierarchyBoundingVectors();\r\n            boundingMinMax.max.subtractToRef(boundingMinMax.min, this._boundingDimensions);\r\n            this._boundingBoxGizmo.min = boundingMinMax.min;\r\n            this._boundingBoxGizmo.max = boundingMinMax.max;\r\n\r\n            // Update handles of the gizmo\r\n            this._updateHandlesPosition();\r\n            this._updateHandlesScaling();\r\n\r\n            // Restore position/rotation values\r\n            this.attachedMesh.rotationQuaternion.copyFrom(this._tmpQuaternion);\r\n            this.attachedMesh.position.copyFrom(this._tmpVector);\r\n\r\n            PivotTools._RestorePivotPoint(this.attachedMesh);\r\n\r\n            // Restore original parent\r\n            this.attachedMesh.setParent(originalParent);\r\n            this.attachedMesh.computeWorldMatrix(true);\r\n\r\n            this._existingSlateScale.copyFrom(this.attachedMesh.scaling);\r\n        }\r\n    }\r\n\r\n    private _updateHandlesPosition() {\r\n        const min = this._boundingBoxGizmo.min.clone();\r\n        const max = this._boundingBoxGizmo.max.clone();\r\n\r\n        const handleScaling = this._corners[0].node.scaling.length();\r\n        min.x -= this._margin * handleScaling;\r\n        min.y -= this._margin * handleScaling;\r\n        max.x += this._margin * handleScaling;\r\n        max.y += this._margin * handleScaling;\r\n\r\n        const center = min.add(max).scaleInPlace(0.5);\r\n\r\n        this._corners[0].node.position.copyFromFloats(min.x, min.y, 0);\r\n        this._corners[1].node.position.copyFromFloats(max.x, min.y, 0);\r\n        this._corners[2].node.position.copyFromFloats(max.x, max.y, 0);\r\n        this._corners[3].node.position.copyFromFloats(min.x, max.y, 0);\r\n\r\n        this._sides[0].node.position.copyFromFloats(min.x, center.y, 0);\r\n        this._sides[1].node.position.copyFromFloats(center.x, min.y, 0);\r\n        this._sides[2].node.position.copyFromFloats(max.x, center.y, 0);\r\n        this._sides[3].node.position.copyFromFloats(center.x, max.y, 0);\r\n    }\r\n\r\n    private _updateHandlesScaling() {\r\n        if (this._attachedSlate && this._attachedSlate.mesh) {\r\n            const scaledWidth = this._attachedSlate.mesh.scaling.x * this._attachedSlate.dimensions.x;\r\n            const scaledHeight = this._attachedSlate.mesh.scaling.y * this._attachedSlate.dimensions.y;\r\n            const scale = Math.min(scaledWidth, scaledHeight) * this._handleSize;\r\n            for (let index = 0; index < this._corners.length; index++) {\r\n                this._corners[index].node.scaling.setAll(scale);\r\n            }\r\n            for (let index = 0; index < this._sides.length; index++) {\r\n                this._sides[index].node.scaling.setAll(scale);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected _update() {\r\n        super._update();\r\n\r\n        if (!this.gizmoLayer.utilityLayerScene.activeCamera) {\r\n            return;\r\n        }\r\n\r\n        if (this._attachedSlate && this._attachedSlate.mesh) {\r\n            if (this.fixedScreenSize) {\r\n                this._attachedSlate.mesh.absolutePosition.subtractToRef(this.gizmoLayer.utilityLayerScene.activeCamera.position, this._tmpVector);\r\n                const distanceFromCamera = (this._handleSize * this._tmpVector.length()) / this.fixedScreenSizeDistanceFactor;\r\n                for (let i = 0; i < this._corners.length; i++) {\r\n                    this._corners[i].node.scaling.set(distanceFromCamera, distanceFromCamera, distanceFromCamera);\r\n                }\r\n                for (let i = 0; i < this._sides.length; i++) {\r\n                    this._sides[i].node.scaling.set(distanceFromCamera, distanceFromCamera, distanceFromCamera);\r\n                }\r\n            }\r\n            this._updateHandlesPosition();\r\n        }\r\n    }\r\n\r\n    public dispose() {\r\n        this.gizmoLayer.originalScene.onBeforeRenderObservable.remove(this._renderObserver);\r\n\r\n        // Will dispose rootMesh and all descendants\r\n        super.dispose();\r\n\r\n        for (const corner of this._corners) {\r\n            corner.dispose();\r\n        }\r\n\r\n        for (const side of this._sides) {\r\n            side.dispose();\r\n        }\r\n    }\r\n}\r\n","import { ContentDisplay3D } from \"./contentDisplay3D\";\r\nimport type { Control3D } from \"./control3D\";\r\nimport { TouchHolographicButton } from \"./touchHolographicButton\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control } from \"../../2D/controls/control\";\r\nimport { TextBlock, TextWrapping } from \"../../2D/controls/textBlock\";\r\nimport { DefaultBehavior } from \"../behaviors/defaultBehavior\";\r\nimport { SlateGizmo } from \"../gizmos/slateGizmo\";\r\nimport { FluentMaterial } from \"../materials/fluent/fluentMaterial\";\r\nimport { FluentBackplateMaterial } from \"../materials/fluentBackplate/fluentBackplateMaterial\";\r\nimport { PointerDragBehavior } from \"core/Behaviors/Meshes/pointerDragBehavior\";\r\nimport type { Texture } from \"core/Materials/Textures/texture\";\r\nimport { Vector4 } from \"core/Maths/math\";\r\nimport { Epsilon } from \"core/Maths/math.constants\";\r\nimport { Scalar } from \"core/Maths/math.scalar\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport { Quaternion, Vector2, Vector3 } from \"core/Maths/math.vector\";\r\nimport { Viewport } from \"core/Maths/math.viewport\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { CreateBox } from \"core/Meshes/Builders/boxBuilder\";\r\nimport { CreatePlane } from \"core/Meshes/Builders/planeBuilder\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport { Mesh } from \"core/Meshes/mesh\";\r\nimport { VertexData } from \"core/Meshes/mesh.vertexData\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { Nullable } from \"core/types\";\r\n\r\n/**\r\n * Class used to create a holographic slate\r\n * @since 5.0.0\r\n */\r\nexport class HolographicSlate extends ContentDisplay3D {\r\n    /**\r\n     * Base Url for the assets.\r\n     */\r\n    public static ASSETS_BASE_URL: string = \"https://assets.babylonjs.com/meshes/MRTK/\";\r\n    /**\r\n     * File name for the close icon.\r\n     */\r\n    public static CLOSE_ICON_FILENAME: string = \"IconClose.png\";\r\n    /**\r\n     * File name for the close icon.\r\n     */\r\n    public static FOLLOW_ICON_FILENAME: string = \"IconFollowMe.png\";\r\n\r\n    private static _DEFAULT_TEXT_RESOLUTION_Y = 102.4;\r\n\r\n    /**\r\n     * Margin between title bar and contentplate\r\n     */\r\n    public titleBarMargin = 0.005;\r\n\r\n    /**\r\n     * Origin in local coordinates (top left corner)\r\n     */\r\n    public origin = new Vector3(0, 0, 0);\r\n\r\n    private _dimensions = new Vector2(21.875, 12.5);\r\n    private _titleBarHeight = 0.625;\r\n\r\n    private _titleBarMaterial: FluentBackplateMaterial;\r\n    private _backMaterial: FluentBackplateMaterial;\r\n    private _contentMaterial: FluentMaterial;\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<Vector3>>>;\r\n    private _positionChangedObserver: Nullable<Observer<{ position: Vector3 }>>;\r\n\r\n    private _titleText = \"\";\r\n    private _titleTextComponent: TextBlock;\r\n\r\n    private _contentViewport: Viewport;\r\n    private _contentDragBehavior: PointerDragBehavior;\r\n\r\n    private _defaultBehavior: DefaultBehavior;\r\n    /**\r\n     * Regroups all mesh behaviors for the slate\r\n     */\r\n    public get defaultBehavior(): DefaultBehavior {\r\n        return this._defaultBehavior;\r\n    }\r\n\r\n    /** @internal */\r\n    public _gizmo: SlateGizmo;\r\n\r\n    protected _titleBar: Mesh;\r\n    protected _titleBarTitle: Mesh;\r\n    protected _contentPlate: Mesh;\r\n    protected _backPlate: Mesh;\r\n    /** @internal */\r\n    public _followButton: TouchHolographicButton;\r\n    protected _closeButton: TouchHolographicButton;\r\n    protected _contentScaleRatio = 1;\r\n\r\n    /**\r\n     * 2D dimensions of the slate\r\n     */\r\n    public get dimensions() {\r\n        return this._dimensions;\r\n    }\r\n    public set dimensions(value) {\r\n        //clamp, respecting ratios\r\n        let scale = 1.0;\r\n        if (value.x < this.minDimensions.x || value.y < this.minDimensions.y) {\r\n            const newRatio = value.x / value.y;\r\n            const minRatio = this.minDimensions.x / this.minDimensions.y;\r\n            if (minRatio > newRatio) {\r\n                // We just need to make sure the x-val is greater than the min\r\n                scale = this.minDimensions.x / value.x;\r\n            } else {\r\n                // We just need to make sure the y-val is greater than the min\r\n                scale = this.minDimensions.y / value.y;\r\n            }\r\n        }\r\n\r\n        this._dimensions.copyFrom(value).scaleInPlace(scale);\r\n        this._updatePivot();\r\n        this._positionElements();\r\n    }\r\n\r\n    /**\r\n     * Minimum dimensions of the slate\r\n     */\r\n    public minDimensions = new Vector2(15.625, 6.25);\r\n\r\n    /**\r\n     * Default dimensions of the slate\r\n     */\r\n    public readonly defaultDimensions = this._dimensions.clone();\r\n\r\n    /**\r\n     * Height of the title bar component\r\n     */\r\n    public get titleBarHeight() {\r\n        return this._titleBarHeight;\r\n    }\r\n    public set titleBarHeight(value) {\r\n        this._titleBarHeight = value;\r\n    }\r\n\r\n    /**\r\n     * Rendering ground id of all the meshes\r\n     */\r\n    public set renderingGroupId(id: number) {\r\n        this._titleBar.renderingGroupId = id;\r\n        this._titleBarTitle.renderingGroupId = id;\r\n        this._contentPlate.renderingGroupId = id;\r\n        this._backPlate.renderingGroupId = id;\r\n    }\r\n    public get renderingGroupId(): number {\r\n        return this._titleBar.renderingGroupId;\r\n    }\r\n\r\n    /**\r\n     * The title text displayed at the top of the slate\r\n     */\r\n    public set title(title: string) {\r\n        this._titleText = title;\r\n        if (this._titleTextComponent) {\r\n            this._titleTextComponent.text = title;\r\n        }\r\n    }\r\n    public get title() {\r\n        return this._titleText;\r\n    }\r\n\r\n    /**\r\n     * Creates a new slate\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n\r\n        this._followButton = new TouchHolographicButton(\"followButton\" + this.name);\r\n        this._followButton.isToggleButton = true;\r\n        this._closeButton = new TouchHolographicButton(\"closeButton\" + this.name);\r\n\r\n        this._contentViewport = new Viewport(0, 0, 1, 1);\r\n        this._contentDragBehavior = new PointerDragBehavior({\r\n            dragPlaneNormal: new Vector3(0, 0, -1),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Apply the facade texture (created from the content property).\r\n     * This function can be overloaded by child classes\r\n     * @param facadeTexture defines the AdvancedDynamicTexture to use\r\n     */\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        this._contentMaterial.albedoTexture = facadeTexture;\r\n        this._resetContentPositionAndZoom();\r\n        this._applyContentViewport();\r\n\r\n        facadeTexture.attachToMesh(this._contentPlate, true);\r\n    }\r\n\r\n    private _addControl(control: Control3D): void {\r\n        control._host = this._host;\r\n        if (this._host.utilityLayer) {\r\n            control._prepareNode(this._host.utilityLayer.utilityLayerScene);\r\n        }\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"HolographicSlate\";\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _positionElements() {\r\n        const followButton = this._followButton;\r\n        const closeButton = this._closeButton;\r\n        const titleBar = this._titleBar;\r\n        const titleBarTitle = this._titleBarTitle;\r\n        const contentPlate = this._contentPlate;\r\n        const backPlate = this._backPlate;\r\n\r\n        if (followButton && closeButton && titleBar) {\r\n            closeButton.scaling.setAll(this.titleBarHeight);\r\n            followButton.scaling.setAll(this.titleBarHeight);\r\n            closeButton.position.copyFromFloats(this.dimensions.x - this.titleBarHeight / 2, -this.titleBarHeight / 2, 0).addInPlace(this.origin);\r\n            followButton.position.copyFromFloats(this.dimensions.x - (3 * this.titleBarHeight) / 2, -this.titleBarHeight / 2, 0).addInPlace(this.origin);\r\n\r\n            const contentPlateHeight = this.dimensions.y - this.titleBarHeight - this.titleBarMargin;\r\n            const rightHandScene = contentPlate.getScene().useRightHandedSystem;\r\n\r\n            titleBar.scaling.set(this.dimensions.x, this.titleBarHeight, Epsilon);\r\n            titleBarTitle.scaling.set(this.dimensions.x - 2 * this.titleBarHeight, this.titleBarHeight, Epsilon);\r\n            contentPlate.scaling.copyFromFloats(this.dimensions.x, contentPlateHeight, Epsilon);\r\n            backPlate.scaling.copyFromFloats(this.dimensions.x, contentPlateHeight, Epsilon);\r\n\r\n            titleBar.position.copyFromFloats(this.dimensions.x / 2, -(this.titleBarHeight / 2), 0).addInPlace(this.origin);\r\n            titleBarTitle.position\r\n                .copyFromFloats(this.dimensions.x / 2 - this.titleBarHeight, -(this.titleBarHeight / 2), rightHandScene ? Epsilon : -Epsilon)\r\n                .addInPlace(this.origin);\r\n            contentPlate.position.copyFromFloats(this.dimensions.x / 2, -(this.titleBarHeight + this.titleBarMargin + contentPlateHeight / 2), 0).addInPlace(this.origin);\r\n            backPlate.position\r\n                .copyFromFloats(this.dimensions.x / 2, -(this.titleBarHeight + this.titleBarMargin + contentPlateHeight / 2), rightHandScene ? -Epsilon : Epsilon)\r\n                .addInPlace(this.origin);\r\n\r\n            // Update the title's AdvancedDynamicTexture scale to avoid visual stretching\r\n            this._titleTextComponent.host.scaleTo(\r\n                (HolographicSlate._DEFAULT_TEXT_RESOLUTION_Y * titleBarTitle.scaling.x) / titleBarTitle.scaling.y,\r\n                HolographicSlate._DEFAULT_TEXT_RESOLUTION_Y\r\n            );\r\n\r\n            const aspectRatio = this.dimensions.x / contentPlateHeight;\r\n            this._contentViewport.width = this._contentScaleRatio;\r\n            this._contentViewport.height = this._contentScaleRatio / aspectRatio;\r\n\r\n            this._applyContentViewport();\r\n            if (this._gizmo) {\r\n                this._gizmo.updateBoundingBox();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _applyContentViewport() {\r\n        if (this._contentPlate?.material && (this._contentPlate.material as FluentMaterial).albedoTexture) {\r\n            const tex = (this._contentPlate.material as FluentMaterial).albedoTexture as Texture;\r\n            tex.uScale = this._contentScaleRatio;\r\n            tex.vScale = (this._contentScaleRatio / this._contentViewport.width) * this._contentViewport.height;\r\n            tex.uOffset = this._contentViewport.x;\r\n            tex.vOffset = this._contentViewport.y;\r\n        }\r\n    }\r\n\r\n    private _resetContentPositionAndZoom() {\r\n        this._contentViewport.x = 0;\r\n        this._contentViewport.y = 1 - this._contentViewport.height / this._contentViewport.width;\r\n        this._contentScaleRatio = 1;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _updatePivot() {\r\n        if (!this.mesh) {\r\n            return;\r\n        }\r\n\r\n        // Update pivot point so it is at the center of geometry\r\n        // As origin is topleft corner in 2D, dimensions are calculated towards bottom right corner, thus y axis is downwards\r\n        const center = new Vector3(this.dimensions.x * 0.5, -this.dimensions.y * 0.5, Epsilon);\r\n        center.addInPlace(this.origin);\r\n        center.z = 0;\r\n\r\n        const origin = new Vector3(0, 0, 0);\r\n        Vector3.TransformCoordinatesToRef(origin, this.mesh.computeWorldMatrix(true), origin);\r\n        this.mesh.setPivotPoint(center);\r\n        const origin2 = new Vector3(0, 0, 0);\r\n        Vector3.TransformCoordinatesToRef(origin2, this.mesh.computeWorldMatrix(true), origin2);\r\n        this.mesh.position.addInPlace(origin).subtractInPlace(origin2);\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        const node = new Mesh(\"slate_\" + this.name, scene);\r\n\r\n        this._titleBar = CreateBox(\"titleBar_\" + this.name, { size: 1 }, scene);\r\n        this._titleBarTitle = CreatePlane(\"titleText_\" + this.name, { size: 1 }, scene);\r\n        this._titleBarTitle.parent = node;\r\n        this._titleBarTitle.isPickable = false;\r\n\r\n        const adt = AdvancedDynamicTexture.CreateForMesh(this._titleBarTitle);\r\n        this._titleTextComponent = new TextBlock(\"titleText_\" + this.name, this._titleText);\r\n        this._titleTextComponent.textWrapping = TextWrapping.Ellipsis;\r\n        this._titleTextComponent.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._titleTextComponent.color = \"white\";\r\n        this._titleTextComponent.fontSize = HolographicSlate._DEFAULT_TEXT_RESOLUTION_Y / 2;\r\n        this._titleTextComponent.paddingLeft = HolographicSlate._DEFAULT_TEXT_RESOLUTION_Y / 4;\r\n        adt.addControl(this._titleTextComponent);\r\n\r\n        if (scene.useRightHandedSystem) {\r\n            const faceUV = new Vector4(0, 0, 1, 1);\r\n            this._contentPlate = CreatePlane(\"contentPlate_\" + this.name, { size: 1, sideOrientation: VertexData.BACKSIDE, frontUVs: faceUV }, scene);\r\n            this._backPlate = CreatePlane(\"backPlate_\" + this.name, { size: 1, sideOrientation: VertexData.FRONTSIDE }, scene);\r\n        } else {\r\n            const faceUV = new Vector4(0, 0, 1, 1);\r\n            this._contentPlate = CreatePlane(\"contentPlate_\" + this.name, { size: 1, sideOrientation: VertexData.FRONTSIDE, frontUVs: faceUV }, scene);\r\n            this._backPlate = CreatePlane(\"backPlate_\" + this.name, { size: 1, sideOrientation: VertexData.BACKSIDE }, scene);\r\n        }\r\n\r\n        this._titleBar.parent = node;\r\n        this._titleBar.isNearGrabbable = true;\r\n        this._contentPlate.parent = node;\r\n        this._backPlate.parent = node;\r\n        this._attachContentPlateBehavior();\r\n\r\n        this._addControl(this._followButton);\r\n        this._addControl(this._closeButton);\r\n\r\n        const followButton = this._followButton;\r\n        const closeButton = this._closeButton;\r\n\r\n        followButton.node!.parent = node;\r\n        closeButton.node!.parent = node;\r\n\r\n        this._positionElements();\r\n\r\n        this._followButton.imageUrl = HolographicSlate.ASSETS_BASE_URL + HolographicSlate.FOLLOW_ICON_FILENAME;\r\n        this._closeButton.imageUrl = HolographicSlate.ASSETS_BASE_URL + HolographicSlate.CLOSE_ICON_FILENAME;\r\n\r\n        this._followButton.isBackplateVisible = false;\r\n        this._closeButton.isBackplateVisible = false;\r\n\r\n        this._followButton.onToggleObservable.add((isToggled) => {\r\n            this._defaultBehavior.followBehaviorEnabled = isToggled;\r\n            if (this._defaultBehavior.followBehaviorEnabled) {\r\n                this._defaultBehavior.followBehavior.recenter();\r\n            }\r\n        });\r\n\r\n        this._closeButton.onPointerClickObservable.add(() => {\r\n            this.dispose();\r\n        });\r\n\r\n        node.rotationQuaternion = Quaternion.Identity();\r\n        node.isVisible = false;\r\n\r\n        return node;\r\n    }\r\n\r\n    private _attachContentPlateBehavior() {\r\n        this._contentDragBehavior.attach(this._contentPlate);\r\n        this._contentDragBehavior.moveAttached = false;\r\n        this._contentDragBehavior.useObjectOrientationForDragging = true;\r\n        this._contentDragBehavior.updateDragPlane = false;\r\n\r\n        const origin = new Vector3();\r\n        const worldDimensions = new Vector3();\r\n        const upWorld = new Vector3();\r\n        const rightWorld = new Vector3();\r\n        const projectedOffset = new Vector2();\r\n        let startViewport: Viewport;\r\n        let worldMatrix: Matrix;\r\n\r\n        this._contentDragBehavior.onDragStartObservable.add((event) => {\r\n            if (!this.node) {\r\n                return;\r\n            }\r\n            startViewport = this._contentViewport.clone();\r\n            worldMatrix = this.node.computeWorldMatrix(true);\r\n\r\n            origin.copyFrom(event.dragPlanePoint);\r\n            worldDimensions.set(this.dimensions.x, this.dimensions.y, Epsilon);\r\n            worldDimensions.y -= this.titleBarHeight + this.titleBarMargin;\r\n            Vector3.TransformNormalToRef(worldDimensions, worldMatrix, worldDimensions);\r\n            upWorld.copyFromFloats(0, 1, 0);\r\n            Vector3.TransformNormalToRef(upWorld, worldMatrix, upWorld);\r\n            rightWorld.copyFromFloats(1, 0, 0);\r\n            Vector3.TransformNormalToRef(rightWorld, worldMatrix, rightWorld);\r\n            upWorld.normalize();\r\n            upWorld.scaleInPlace(1 / Vector3.Dot(upWorld, worldDimensions));\r\n            rightWorld.normalize();\r\n            rightWorld.scaleInPlace(1 / Vector3.Dot(rightWorld, worldDimensions));\r\n        });\r\n\r\n        const offset = new Vector3();\r\n        this._contentDragBehavior.onDragObservable.add((event) => {\r\n            offset.copyFrom(event.dragPlanePoint);\r\n            offset.subtractInPlace(origin);\r\n            projectedOffset.copyFromFloats(Vector3.Dot(offset, rightWorld), Vector3.Dot(offset, upWorld));\r\n\r\n            // By default, content takes full width available and height is cropped to keep aspect ratio\r\n            this._contentViewport.x = Scalar.Clamp(startViewport.x - offset.x, 0, 1 - this._contentViewport.width * this._contentScaleRatio);\r\n            this._contentViewport.y = Scalar.Clamp(startViewport.y - offset.y, 0, 1 - this._contentViewport.height * this._contentScaleRatio);\r\n            this._applyContentViewport();\r\n        });\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        // TODO share materials\r\n        this._titleBarMaterial = new FluentBackplateMaterial(`${this.name} plateMaterial`, mesh.getScene());\r\n\r\n        this._contentMaterial = new FluentMaterial(`${this.name} contentMaterial`, mesh.getScene());\r\n        this._contentMaterial.renderBorders = true;\r\n\r\n        this._backMaterial = new FluentBackplateMaterial(`${this.name} backPlate`, mesh.getScene());\r\n        this._backMaterial.lineWidth = Epsilon;\r\n        this._backMaterial.radius = 0.005;\r\n        this._backMaterial.backFaceCulling = true;\r\n\r\n        this._titleBar.material = this._titleBarMaterial;\r\n        this._contentPlate.material = this._contentMaterial;\r\n        this._backPlate.material = this._backMaterial;\r\n\r\n        this._resetContent();\r\n        this._applyContentViewport();\r\n    }\r\n\r\n    /**\r\n     * @internal*\r\n     */\r\n    public _prepareNode(scene: Scene): void {\r\n        super._prepareNode(scene);\r\n        this._gizmo = new SlateGizmo(this._host.utilityLayer!);\r\n        this._gizmo.attachedSlate = this;\r\n        this._defaultBehavior = new DefaultBehavior();\r\n        this._defaultBehavior.attach(this.node as Mesh, [this._titleBar]);\r\n        this._defaultBehavior.sixDofDragBehavior.onDragStartObservable.add(() => {\r\n            this._followButton.isToggled = false;\r\n        });\r\n\r\n        this._positionChangedObserver = this._defaultBehavior.sixDofDragBehavior.onPositionChangedObservable.add(() => {\r\n            this._gizmo.updateBoundingBox();\r\n        });\r\n\r\n        this._updatePivot();\r\n        this.resetDefaultAspectAndPose(false);\r\n    }\r\n\r\n    /**\r\n     * Resets the aspect and pose of the slate so it is right in front of the active camera, facing towards it.\r\n     * @param resetAspect Should the slate's dimensions/aspect ratio be reset as well\r\n     */\r\n    public resetDefaultAspectAndPose(resetAspect: boolean = true) {\r\n        if (!this._host || !this._host.utilityLayer || !this.node) {\r\n            return;\r\n        }\r\n        const scene = this._host.utilityLayer.utilityLayerScene;\r\n        const camera = scene.activeCamera;\r\n        if (camera) {\r\n            const worldMatrix = camera.getWorldMatrix();\r\n            const backward = Vector3.TransformNormal(Vector3.Backward(scene.useRightHandedSystem), worldMatrix);\r\n            this.origin.setAll(0);\r\n            this._gizmo.updateBoundingBox();\r\n            const pivot = this.node.getAbsolutePivotPoint();\r\n            this.node.position.copyFrom(camera.position).subtractInPlace(backward).subtractInPlace(pivot);\r\n            this.node.rotationQuaternion = Quaternion.FromLookDirectionLH(backward, new Vector3(0, 1, 0));\r\n\r\n            if (resetAspect) {\r\n                this.dimensions = this.defaultDimensions;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n        this._titleBarMaterial.dispose();\r\n        this._contentMaterial.dispose();\r\n\r\n        this._titleBar.dispose();\r\n        this._titleBarTitle.dispose();\r\n        this._contentPlate.dispose();\r\n        this._backPlate.dispose();\r\n\r\n        this._followButton.dispose();\r\n        this._closeButton.dispose();\r\n\r\n        this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n        this._defaultBehavior.sixDofDragBehavior.onPositionChangedObservable.remove(this._positionChangedObserver);\r\n\r\n        this._defaultBehavior.detach();\r\n        this._gizmo.dispose();\r\n        this._contentDragBehavior.detach();\r\n    }\r\n}\r\n","import type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\nimport { Button3D } from \"./button3D\";\r\n\r\n/**\r\n * Class used to create an interactable object. It's a 3D button using a mesh coming from the current scene\r\n */\r\nexport class MeshButton3D extends Button3D {\r\n    /** @internal */\r\n    protected _currentMesh: Mesh;\r\n\r\n    /**\r\n     * Creates a new 3D button based on a mesh\r\n     * @param mesh mesh to become a 3D button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(mesh: Mesh, name?: string) {\r\n        super(name);\r\n        this._currentMesh = mesh;\r\n\r\n        /**\r\n         * Provides a default behavior on hover/out & up/down\r\n         * Override those function to create your own desired behavior specific to your mesh\r\n         */\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.1);\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 1.1);\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MeshButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._currentMesh.getChildMeshes().forEach((mesh) => {\r\n            this._injectGUI3DReservedDataStore(mesh).control = this;\r\n        });\r\n        return this._currentMesh;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected _affectMaterial(mesh: AbstractMesh) {}\r\n}\r\n","import type { Scene } from \"core/scene\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport { TouchHolographicButton } from \"./touchHolographicButton\";\r\nimport { DefaultBehavior } from \"../behaviors/defaultBehavior\";\r\nimport { TouchHolographicMenu } from \"./touchHolographicMenu\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport type { Vector3 } from \"core/Maths/math.vector\";\r\nimport type { PickingInfo } from \"core/Collisions/pickingInfo\";\r\n\r\n/**\r\n * NearMenu that displays buttons and follows the camera\r\n * @since 5.0.0\r\n */\r\nexport class NearMenu extends TouchHolographicMenu {\r\n    /**\r\n     * Base Url for the assets.\r\n     */\r\n    private static _ASSETS_BASE_URL: string = \"https://assets.babylonjs.com/meshes/MRTK/\";\r\n    /**\r\n     * File name for the close icon.\r\n     */\r\n    private static _PIN_ICON_FILENAME: string = \"IconPin.png\";\r\n\r\n    private _pinButton: TouchHolographicButton;\r\n    private _dragObserver: Nullable<\r\n        Observer<{\r\n            delta: Vector3;\r\n            position: Vector3;\r\n            pickInfo: PickingInfo;\r\n        }>\r\n    >;\r\n\r\n    private _defaultBehavior: DefaultBehavior;\r\n    /**\r\n     * Regroups all mesh behaviors for the near menu\r\n     */\r\n    public get defaultBehavior(): DefaultBehavior {\r\n        return this._defaultBehavior;\r\n    }\r\n\r\n    private _isPinned: boolean = false;\r\n    /**\r\n     * Indicates if the near menu is world-pinned\r\n     */\r\n    public get isPinned(): boolean {\r\n        return this._isPinned;\r\n    }\r\n\r\n    public set isPinned(value: boolean) {\r\n        // Tell the pin button to toggle if this was called manually, for clean state control\r\n        if (this._pinButton.isToggled !== value) {\r\n            this._pinButton.isToggled = value;\r\n            return;\r\n        }\r\n\r\n        this._isPinned = value;\r\n\r\n        if (value) {\r\n            this._defaultBehavior.followBehaviorEnabled = false;\r\n        } else {\r\n            this._defaultBehavior.followBehaviorEnabled = true;\r\n        }\r\n    }\r\n\r\n    private _createPinButton(parent: TransformNode) {\r\n        const control = new TouchHolographicButton(\"pin\" + this.name, false);\r\n        control.imageUrl = NearMenu._ASSETS_BASE_URL + NearMenu._PIN_ICON_FILENAME;\r\n        control.parent = this;\r\n        control._host = this._host;\r\n        control.isToggleButton = true;\r\n        control.onToggleObservable.add((newState) => {\r\n            this.isPinned = newState;\r\n        });\r\n\r\n        if (this._host.utilityLayer) {\r\n            control._prepareNode(this._host.utilityLayer.utilityLayerScene);\r\n            control.scaling.scaleInPlace(TouchHolographicMenu.MENU_BUTTON_SCALE);\r\n\r\n            if (control.node) {\r\n                control.node.parent = parent;\r\n            }\r\n        }\r\n\r\n        return control;\r\n    }\r\n\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        const node = super._createNode(scene)! as Mesh;\r\n\r\n        this._pinButton = this._createPinButton(node);\r\n        this.isPinned = false;\r\n\r\n        this._defaultBehavior.attach(node, [this._backPlate]);\r\n        this._defaultBehavior.followBehavior.ignoreCameraPitchAndRoll = true;\r\n        this._defaultBehavior.followBehavior.pitchOffset = -15;\r\n        this._defaultBehavior.followBehavior.minimumDistance = 0.3;\r\n        this._defaultBehavior.followBehavior.defaultDistance = 0.4;\r\n        this._defaultBehavior.followBehavior.maximumDistance = 0.6;\r\n\r\n        this._backPlate.isNearGrabbable = true;\r\n        node.isVisible = false;\r\n\r\n        return node;\r\n    }\r\n\r\n    protected _finalProcessing() {\r\n        super._finalProcessing();\r\n\r\n        this._pinButton.position.copyFromFloats((this._backPlate.scaling.x + TouchHolographicMenu.MENU_BUTTON_SCALE) / 2, this._backPlate.scaling.y / 2, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a near menu GUI 3D control\r\n     * @param name name of the near menu\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n\r\n        this._defaultBehavior = new DefaultBehavior();\r\n        this._dragObserver = this._defaultBehavior.sixDofDragBehavior.onDragObservable.add(() => {\r\n            this.isPinned = true;\r\n        });\r\n\r\n        this.backPlateMargin = 1;\r\n    }\r\n\r\n    /**\r\n     * Disposes the near menu\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this._defaultBehavior.sixDofDragBehavior.onDragObservable.remove(this._dragObserver);\r\n        this._defaultBehavior.detach();\r\n    }\r\n}\r\n","import { TmpVectors, Vector3 } from \"core/Maths/math.vector\";\r\n\r\nimport { Container3D } from \"./container3D\";\r\nimport type { Control3D } from \"./control3D\";\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a plane\r\n */\r\nexport class PlanePanel extends VolumeBasedPanel {\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        const mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        control.position = nodePosition.clone();\r\n        const target = TmpVectors.Vector3[0];\r\n\r\n        target.copyFrom(nodePosition);\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                target.addInPlace(new Vector3(0, 0, 1));\r\n                mesh.lookAt(target);\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                target.addInPlace(new Vector3(0, 0, -1));\r\n                mesh.lookAt(target);\r\n                break;\r\n        }\r\n    }\r\n}\r\n","import { Tools } from \"core/Misc/tools\";\r\nimport { TmpVectors, Vector3 } from \"core/Maths/math.vector\";\r\nimport type { float } from \"core/types\";\r\n\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport type { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel where items get randomized planar mapping\r\n */\r\nexport class ScatterPanel extends VolumeBasedPanel {\r\n    private _iteration = 100.0;\r\n\r\n    /**\r\n     * Gets or sets the number of iteration to use to scatter the controls (100 by default)\r\n     */\r\n    public get iteration(): float {\r\n        return this._iteration;\r\n    }\r\n\r\n    public set iteration(value: float) {\r\n        if (this._iteration === value) {\r\n            return;\r\n        }\r\n\r\n        this._iteration = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        const mesh = control.mesh;\r\n        const newPos = this._scatterMapping(nodePosition);\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, 1));\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, -1));\r\n                break;\r\n        }\r\n\r\n        control.position = newPos;\r\n    }\r\n\r\n    private _scatterMapping(source: Vector3): Vector3 {\r\n        source.x = (1.0 - Math.random() * 2.0) * this._cellWidth;\r\n        source.y = (1.0 - Math.random() * 2.0) * this._cellHeight;\r\n\r\n        return source;\r\n    }\r\n\r\n    protected _finalProcessing() {\r\n        const meshes = [];\r\n        for (const child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            meshes.push(child.mesh);\r\n        }\r\n\r\n        for (let count = 0; count < this._iteration; count++) {\r\n            meshes.sort((a, b) => {\r\n                const distance1 = a.position.lengthSquared();\r\n                const distance2 = b.position.lengthSquared();\r\n\r\n                if (distance1 < distance2) {\r\n                    return 1;\r\n                } else if (distance1 > distance2) {\r\n                    return -1;\r\n                }\r\n\r\n                return 0;\r\n            });\r\n\r\n            const radiusPaddingSquared = Math.pow(this.margin, 2.0);\r\n            const cellSize = Math.max(this._cellWidth, this._cellHeight);\r\n            const difference2D = TmpVectors.Vector2[0];\r\n            const difference = TmpVectors.Vector3[0];\r\n\r\n            for (let i = 0; i < meshes.length - 1; i++) {\r\n                for (let j = i + 1; j < meshes.length; j++) {\r\n                    if (i != j) {\r\n                        meshes[j].position.subtractToRef(meshes[i].position, difference);\r\n\r\n                        // Ignore Z axis\r\n                        difference2D.x = difference.x;\r\n                        difference2D.y = difference.y;\r\n                        const combinedRadius = cellSize;\r\n                        let distance = difference2D.lengthSquared() - radiusPaddingSquared;\r\n                        const minSeparation = Math.min(distance, radiusPaddingSquared);\r\n                        distance -= minSeparation;\r\n\r\n                        if (distance < Math.pow(combinedRadius, 2.0)) {\r\n                            difference2D.normalize();\r\n                            difference.scaleInPlace((combinedRadius - Math.sqrt(distance)) * 0.5);\r\n                            meshes[j].position.addInPlace(difference);\r\n                            meshes[i].position.subtractInPlace(difference);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"mrdlSliderBarPixelShader\";\nconst shader = `uniform vec3 cameraPosition;\rvarying vec3 vPosition;\rvarying vec3 vNormal;\rvarying vec2 vUV;\rvarying vec3 vTangent;\rvarying vec3 vBinormal;\rvarying vec4 vColor;\rvarying vec4 vExtra1;\rvarying vec4 vExtra2;\rvarying vec4 vExtra3;\runiform float _Radius_;\runiform float _Bevel_Front_;\runiform float _Bevel_Front_Stretch_;\runiform float _Bevel_Back_;\runiform float _Bevel_Back_Stretch_;\runiform float _Radius_Top_Left_;\runiform float _Radius_Top_Right_;\runiform float _Radius_Bottom_Left_;\runiform float _Radius_Bottom_Right_;\runiform bool _Bulge_Enabled_;\runiform float _Bulge_Height_;\runiform float _Bulge_Radius_;\runiform float _Sun_Intensity_;\runiform float _Sun_Theta_;\runiform float _Sun_Phi_;\runiform float _Indirect_Diffuse_;\runiform vec4 _Albedo_;\runiform float _Specular_;\runiform float _Shininess_;\runiform float _Sharpness_;\runiform float _Subsurface_;\runiform vec4 _Left_Color_;\runiform vec4 _Right_Color_;\runiform float _Reflection_;\runiform float _Front_Reflect_;\runiform float _Edge_Reflect_;\runiform float _Power_;\runiform vec4 _Sky_Color_;\runiform vec4 _Horizon_Color_;\runiform vec4 _Ground_Color_;\runiform float _Horizon_Power_;\runiform sampler2D _Reflection_Map_;\runiform sampler2D _Indirect_Environment_;\runiform float _Width_;\runiform float _Fuzz_;\runiform float _Min_Fuzz_;\runiform float _Clip_Fade_;\runiform float _Hue_Shift_;\runiform float _Saturation_Shift_;\runiform float _Value_Shift_;\runiform vec3 _Blob_Position_;\runiform float _Blob_Intensity_;\runiform float _Blob_Near_Size_;\runiform float _Blob_Far_Size_;\runiform float _Blob_Near_Distance_;\runiform float _Blob_Far_Distance_;\runiform float _Blob_Fade_Length_;\runiform float _Blob_Pulse_;\runiform float _Blob_Fade_;\runiform sampler2D _Blob_Texture_;\runiform vec3 _Blob_Position_2_;\runiform float _Blob_Near_Size_2_;\runiform float _Blob_Pulse_2_;\runiform float _Blob_Fade_2_;\runiform vec3 _Left_Index_Pos_;\runiform vec3 _Right_Index_Pos_;\runiform vec3 _Left_Index_Middle_Pos_;\runiform vec3 _Right_Index_Middle_Pos_;\runiform sampler2D _Decal_;\runiform vec2 _Decal_Scale_XY_;\runiform bool _Decal_Front_Only_;\runiform float _Rim_Intensity_;\runiform sampler2D _Rim_Texture_;\runiform float _Rim_Hue_Shift_;\runiform float _Rim_Saturation_Shift_;\runiform float _Rim_Value_Shift_;\runiform float _Iridescence_Intensity_;\runiform sampler2D _Iridescence_Texture_;\runiform bool Use_Global_Left_Index;\runiform bool Use_Global_Right_Index;\runiform vec4 Global_Left_Index_Tip_Position;\runiform vec4 Global_Right_Index_Tip_Position;\runiform vec4 Global_Left_Thumb_Tip_Position;\runiform vec4 Global_Right_Thumb_Tip_Position;\runiform vec4 Global_Left_Index_Middle_Position;\runiform vec4 Global_Right_Index_Middle_Position;\runiform float Global_Left_Index_Tip_Proximity;\runiform float Global_Right_Index_Tip_Proximity;\rvoid Blob_Fragment_B30(\rsampler2D Blob_Texture,\rvec4 Blob_Info1,\rvec4 Blob_Info2,\rout vec4 Blob_Color)\r{\rfloat k1=dot(Blob_Info1.xy,Blob_Info1.xy);\rfloat k2=dot(Blob_Info2.xy,Blob_Info2.xy);\rvec3 closer=k1<k2 ? vec3(k1,Blob_Info1.z,Blob_Info1.w) : vec3(k2,Blob_Info2.z,Blob_Info2.w);\rBlob_Color=closer.z*texture(Blob_Texture,vec2(vec2(sqrt(closer.x),closer.y).x,1.0-vec2(sqrt(closer.x),closer.y).y))*clamp(1.0-closer.x,0.0,1.0);\r}\rvoid FastLinearTosRGB_B42(\rvec4 Linear,\rout vec4 sRGB)\r{\rsRGB.rgb=sqrt(clamp(Linear.rgb,0.0,1.0));\rsRGB.a=Linear.a;\r}\rvoid Scale_RGB_B59(\rvec4 Color,\rfloat Scalar,\rout vec4 Result)\r{\rResult=vec4(Scalar,Scalar,Scalar,1)*Color;\r}\rvoid Fragment_Main_B121(\rfloat Sun_Intensity,\rfloat Sun_Theta,\rfloat Sun_Phi,\rvec3 Normal,\rvec4 Albedo,\rfloat Fresnel_Reflect,\rfloat Shininess,\rvec3 Incident,\rvec4 Horizon_Color,\rvec4 Sky_Color,\rvec4 Ground_Color,\rfloat Indirect_Diffuse,\rfloat Specular,\rfloat Horizon_Power,\rfloat Reflection,\rvec4 Reflection_Sample,\rvec4 Indirect_Sample,\rfloat Sharpness,\rfloat SSS,\rfloat Subsurface,\rvec4 Translucence,\rvec4 Rim_Light,\rvec4 Iridescence,\rout vec4 Result)\r{\rfloat theta=Sun_Theta*2.0*3.14159;\rfloat phi=Sun_Phi*3.14159;\rvec3 lightDir= vec3(cos(phi)*cos(theta),sin(phi),cos(phi)*sin(theta));\rfloat NdotL=max(dot(lightDir,Normal),0.0);\rvec3 R=reflect(Incident,Normal);\rfloat RdotL=max(0.0,dot(R,lightDir));\rfloat specular=pow(RdotL,Shininess);\rspecular=mix(specular,smoothstep(0.495*Sharpness,1.0-0.495*Sharpness,specular),Sharpness);\rvec4 gi=mix(Ground_Color,Sky_Color,Normal.y*0.5+0.5);\rResult=((Sun_Intensity*NdotL+Indirect_Sample*Indirect_Diffuse+Translucence)*(1.0+SSS*Subsurface))*Albedo*(1.0-Fresnel_Reflect)+(Sun_Intensity*specular*Specular+Fresnel_Reflect*Reflection*Reflection_Sample)+Fresnel_Reflect*Rim_Light+Iridescence;\r}\rvoid Bulge_B79(\rbool Enabled,\rvec3 Normal,\rvec3 Tangent,\rfloat Bulge_Height,\rvec4 UV,\rfloat Bulge_Radius,\rvec3 ButtonN,\rout vec3 New_Normal)\r{\rvec2 xy=clamp(UV.xy*2.0,vec2(-1,-1),vec2(1,1));\rvec3 B=(cross(Normal,Tangent));\rfloat k=-clamp(1.0-length(xy)/Bulge_Radius,0.0,1.0)*Bulge_Height;\rk=sin(k*3.14159*0.5);\rk*=smoothstep(0.9998,0.9999,abs(dot(ButtonN,Normal)));\rNew_Normal=Normal*sqrt(1.0-k*k)+(xy.x*Tangent+xy.y*B)*k;\rNew_Normal=Enabled ? New_Normal : Normal;\r}\rvoid SSS_B77(\rvec3 ButtonN,\rvec3 Normal,\rvec3 Incident,\rout float Result)\r{\rfloat NdotI=abs(dot(Normal,Incident));\rfloat BdotI=abs(dot(ButtonN,Incident));\rResult=(abs(NdotI-BdotI)); \r}\rvoid FingerOcclusion_B67(\rfloat Width,\rfloat DistToCenter,\rfloat Fuzz,\rfloat Min_Fuzz,\rvec3 Position,\rvec3 Forward,\rvec3 Nearest,\rfloat Fade_Out,\rout float NotInShadow)\r{\rfloat d=dot((Nearest-Position),Forward);\rfloat sh=smoothstep(Width*0.5,Width*0.5+Fuzz*max(d,0.0)+Min_Fuzz,DistToCenter);\rNotInShadow=1.0-(1.0-sh)*smoothstep(-Fade_Out,0.0,d);\r}\rvoid FingerOcclusion_B68(\rfloat Width,\rfloat DistToCenter,\rfloat Fuzz,\rfloat Min_Fuzz,\rvec3 Position,\rvec3 Forward,\rvec3 Nearest,\rfloat Fade_Out,\rout float NotInShadow)\r{\rfloat d=dot((Nearest-Position),Forward);\rfloat sh=smoothstep(Width*0.5,Width*0.5+Fuzz*max(d,0.0)+Min_Fuzz,DistToCenter);\rNotInShadow=1.0-(1.0-sh)*smoothstep(-Fade_Out,0.0,d);\r}\rvoid Scale_Color_B91(\rvec4 Color,\rfloat Scalar,\rout vec4 Result)\r{\rResult=Scalar*Color;\r}\rvoid From_HSV_B73(\rfloat Hue,\rfloat Saturation,\rfloat Value,\rfloat Alpha,\rout vec4 Color)\r{\rvec4 K=vec4(1.0,2.0/3.0,1.0/3.0,3.0);\rvec3 p=abs(fract(vec3(Hue,Hue,Hue)+K.xyz)*6.0-K.www);\rColor.rgb=Value*mix(K.xxx,clamp(p-K.xxx,0.0,1.0),Saturation);\rColor.a=Alpha;\r}\rvoid Fast_Fresnel_B122(\rfloat Front_Reflect,\rfloat Edge_Reflect,\rfloat Power,\rvec3 Normal,\rvec3 Incident,\rout float Transmit,\rout float Reflect)\r{\rfloat d=max(-dot(Incident,Normal),0.0);\rReflect=Front_Reflect+(Edge_Reflect-Front_Reflect)*pow(.01-d,Power);\rTransmit=1.0-Reflect;\r}\rvoid Mapped_Environment_B51(\rsampler2D Reflected_Environment,\rsampler2D Indirect_Environment,\rvec3 Dir,\rout vec4 Reflected_Color,\rout vec4 Indirect_Diffuse)\r{\rReflected_Color=texture(Reflected_Environment,vec2(atan(Dir.z,Dir.x)/3.14159*0.5,asin(Dir.y)/3.14159+0.5));\rIndirect_Diffuse=texture(Indirect_Environment,vec2(atan(Dir.z,Dir.x)/3.14159*0.5,asin(Dir.y)/3.14159+0.5));\r}\rvec4 SampleEnv_Bid50(vec3 D,vec4 S,vec4 H,vec4 G,float exponent)\r{\rfloat k=pow(abs(D.y),exponent);\rvec4 C;\rif (D.y>0.0) {\rC=mix(H,S,k);\r} else {\rC=mix(H,G,k); \r}\rreturn C;\r}\rvoid Sky_Environment_B50(\rvec3 Normal,\rvec3 Reflected,\rvec4 Sky_Color,\rvec4 Horizon_Color,\rvec4 Ground_Color,\rfloat Horizon_Power,\rout vec4 Reflected_Color,\rout vec4 Indirect_Color)\r{\rReflected_Color=SampleEnv_Bid50(Reflected,Sky_Color,Horizon_Color,Ground_Color,Horizon_Power);\rIndirect_Color=mix(Ground_Color,Sky_Color,Normal.y*0.5+0.5);\r}\rvoid Min_Segment_Distance_B65(\rvec3 P0,\rvec3 P1,\rvec3 Q0,\rvec3 Q1,\rout vec3 NearP,\rout vec3 NearQ,\rout float Distance)\r{\rvec3 u=P1-P0;\rvec3 v=Q1-Q0;\rvec3 w=P0-Q0;\rfloat a=dot(u,u);\rfloat b=dot(u,v);\rfloat c=dot(v,v);\rfloat d=dot(u,w);\rfloat e=dot(v,w);\rfloat D=a*c-b*b;\rfloat sD=D;\rfloat tD=D;\rfloat sc,sN,tc,tN;\rif (D<0.00001) {\rsN=0.0;\rsD=1.0;\rtN=e;\rtD=c;\r} else {\rsN=(b*e-c*d);\rtN=(a*e-b*d);\rif (sN<0.0) {\rsN=0.0;\rtN=e;\rtD=c;\r} else if (sN>sD) {\rsN=sD;\rtN=e+b;\rtD=c;\r}\r}\rif (tN<0.0) {\rtN=0.0;\rif (-d<0.0) {\rsN=0.0;\r} else if (-d>a) {\rsN=sD;\r} else {\rsN=-d;\rsD=a;\r}\r} else if (tN>tD) {\rtN=tD;\rif ((-d+b)<0.0) {\rsN=0.0;\r} else if ((-d+b)>a) {\rsN=sD;\r} else {\rsN=(-d+b);\rsD=a;\r}\r}\rsc=abs(sN)<0.000001 ? 0.0 : sN/sD;\rtc=abs(tN)<0.000001 ? 0.0 : tN/tD;\rNearP=P0+sc*u;\rNearQ=Q0+tc*v;\rDistance=distance(NearP,NearQ);\r}\rvoid To_XYZ_B74(\rvec3 Vec3,\rout float X,\rout float Y,\rout float Z)\r{\rX=Vec3.x;\rY=Vec3.y;\rZ=Vec3.z;\r}\rvoid Finger_Positions_B64(\rvec3 Left_Index_Pos,\rvec3 Right_Index_Pos,\rvec3 Left_Index_Middle_Pos,\rvec3 Right_Index_Middle_Pos,\rout vec3 Left_Index,\rout vec3 Right_Index,\rout vec3 Left_Index_Middle,\rout vec3 Right_Index_Middle)\r{\rLeft_Index= (Use_Global_Left_Index ? Global_Left_Index_Tip_Position.xyz : Left_Index_Pos);\rRight_Index= (Use_Global_Right_Index ? Global_Right_Index_Tip_Position.xyz : Right_Index_Pos);\rLeft_Index_Middle= (Use_Global_Left_Index ? Global_Left_Index_Middle_Position.xyz : Left_Index_Middle_Pos);\rRight_Index_Middle= (Use_Global_Right_Index ? Global_Right_Index_Middle_Position.xyz : Right_Index_Middle_Pos);\r}\rvoid VaryHSV_B108(\rvec3 HSV_In,\rfloat Hue_Shift,\rfloat Saturation_Shift,\rfloat Value_Shift,\rout vec3 HSV_Out)\r{\rHSV_Out=vec3(fract(HSV_In.x+Hue_Shift),clamp(HSV_In.y+Saturation_Shift,0.0,1.0),clamp(HSV_In.z+Value_Shift,0.0,1.0));\r}\rvoid Remap_Range_B114(\rfloat In_Min,\rfloat In_Max,\rfloat Out_Min,\rfloat Out_Max,\rfloat In,\rout float Out)\r{\rOut=mix(Out_Min,Out_Max,clamp((In-In_Min)/(In_Max-In_Min),0.0,1.0));\r}\rvoid To_HSV_B75(\rvec4 Color,\rout float Hue,\rout float Saturation,\rout float Value,\rout float Alpha,\rout vec3 HSV)\r{\rvec4 K=vec4(0.0,-1.0/3.0,2.0/3.0,-1.0);\rvec4 p=Color.g<Color.b ? vec4(Color.bg,K.wz) : vec4(Color.gb,K.xy);\rvec4 q=Color.r<p.x ? vec4(p.xyw,Color.r) : vec4(Color.r,p.yzx);\rfloat d=q.x-min(q.w,q.y);\rfloat e=1.0e-10;\rHue=abs(q.z+(q.w-q.y)/(6.0*d+e));\rSaturation=d/(q.x+e);\rValue=q.x;\rAlpha=Color.a;\rHSV=vec3(Hue,Saturation,Value);\r}\rvoid Code_B110(\rfloat X,\rout float Result)\r{\rResult=(acos(X)/3.14159-0.5)*2.0;\r}\rvoid Rim_Light_B132(\rvec3 Front,\rvec3 Normal,\rvec3 Incident,\rfloat Rim_Intensity,\rsampler2D Texture,\rout vec4 Result)\r{\rvec3 R=reflect(Incident,Normal);\rfloat RdotF=dot(R,Front);\rfloat RdotL=sqrt(1.0-RdotF*RdotF);\rvec2 UV=vec2(R.y*0.5+0.5,0.5);\rvec4 Color=texture(Texture,UV);\rResult=Color;\r}\rvoid main()\r{\rvec4 Blob_Color_Q30;\r#if BLOB_ENABLE\nBlob_Fragment_B30(_Blob_Texture_,vExtra2,vExtra3,Blob_Color_Q30);\r#else\nBlob_Color_Q30=vec4(0,0,0,0);\r#endif\nvec3 Incident_Q39=normalize(vPosition-cameraPosition);\rvec3 Normalized_Q38=normalize(vNormal);\rvec3 Normalized_Q71=normalize(vTangent);\rvec4 Color_Q83;\r#if DECAL_ENABLE\nColor_Q83=texture(_Decal_,vUV);\r#else\nColor_Q83=vec4(0,0,0,0);\r#endif\nfloat X_Q90;\rfloat Y_Q90;\rfloat Z_Q90;\rfloat W_Q90;\rX_Q90=vExtra1.x;\rY_Q90=vExtra1.y;\rZ_Q90=vExtra1.z;\rW_Q90=vExtra1.w;\rvec4 Linear_Q43;\rLinear_Q43.rgb=clamp(_Sky_Color_.rgb*_Sky_Color_.rgb,0.0,1.0);\rLinear_Q43.a=_Sky_Color_.a;\rvec4 Linear_Q44;\rLinear_Q44.rgb=clamp(_Horizon_Color_.rgb*_Horizon_Color_.rgb,0.0,1.0);\rLinear_Q44.a=_Horizon_Color_.a;\rvec4 Linear_Q45;\rLinear_Q45.rgb=clamp(_Ground_Color_.rgb*_Ground_Color_.rgb,0.0,1.0);\rLinear_Q45.a=_Ground_Color_.a;\rvec3 Left_Index_Q64;\rvec3 Right_Index_Q64;\rvec3 Left_Index_Middle_Q64;\rvec3 Right_Index_Middle_Q64;\rFinger_Positions_B64(_Left_Index_Pos_,_Right_Index_Pos_,_Left_Index_Middle_Pos_,_Right_Index_Middle_Pos_,Left_Index_Q64,Right_Index_Q64,Left_Index_Middle_Q64,Right_Index_Middle_Q64);\rvec4 Linear_Q46;\rLinear_Q46.rgb=clamp(_Albedo_.rgb*_Albedo_.rgb,0.0,1.0);\rLinear_Q46.a=_Albedo_.a;\rvec3 Normalized_Q107=normalize(vBinormal);\rvec3 Incident_Q70=normalize(vPosition-cameraPosition);\rvec3 New_Normal_Q79;\rBulge_B79(_Bulge_Enabled_,Normalized_Q38,Normalized_Q71,_Bulge_Height_,vColor,_Bulge_Radius_,vBinormal,New_Normal_Q79);\rfloat Result_Q77;\rSSS_B77(vBinormal,New_Normal_Q79,Incident_Q39,Result_Q77);\rvec4 Result_Q91;\rScale_Color_B91(Color_Q83,X_Q90,Result_Q91);\rfloat Transmit_Q122;\rfloat Reflect_Q122;\rFast_Fresnel_B122(_Front_Reflect_,_Edge_Reflect_,_Power_,New_Normal_Q79,Incident_Q39,Transmit_Q122,Reflect_Q122);\rfloat Product_Q125=Y_Q90*Y_Q90;\rvec3 NearP_Q65;\rvec3 NearQ_Q65;\rfloat Distance_Q65;\rMin_Segment_Distance_B65(Left_Index_Q64,Left_Index_Middle_Q64,vPosition,cameraPosition,NearP_Q65,NearQ_Q65,Distance_Q65);\rvec3 NearP_Q63;\rvec3 NearQ_Q63;\rfloat Distance_Q63;\rMin_Segment_Distance_B65(Right_Index_Q64,Right_Index_Middle_Q64,vPosition,cameraPosition,NearP_Q63,NearQ_Q63,Distance_Q63);\rvec3 Reflected_Q47=reflect(Incident_Q39,New_Normal_Q79);\rvec4 Product_Q103=Linear_Q46*vec4(1,1,1,1);\rvec4 Result_Q132;\rRim_Light_B132(Normalized_Q107,Normalized_Q38,Incident_Q70,_Rim_Intensity_,_Rim_Texture_,Result_Q132);\rfloat Dot_Q72=dot(Incident_Q70, Normalized_Q71);\rfloat MaxAB_Q123=max(Reflect_Q122,Product_Q125);\rfloat NotInShadow_Q67;\r#if OCCLUSION_ENABLED\nFingerOcclusion_B67(_Width_,Distance_Q65,_Fuzz_,_Min_Fuzz_,vPosition,vBinormal,NearP_Q65,_Clip_Fade_,NotInShadow_Q67);\r#else\nNotInShadow_Q67=1.0;\r#endif\nfloat NotInShadow_Q68;\r#if OCCLUSION_ENABLED\nFingerOcclusion_B68(_Width_,Distance_Q63,_Fuzz_,_Min_Fuzz_,vPosition,vBinormal,NearP_Q63,_Clip_Fade_,NotInShadow_Q68);\r#else\nNotInShadow_Q68=1.0;\r#endif\nvec4 Reflected_Color_Q51;\rvec4 Indirect_Diffuse_Q51;\r#if ENV_ENABLE\nMapped_Environment_B51(_Reflection_Map_,_Indirect_Environment_,Reflected_Q47,Reflected_Color_Q51,Indirect_Diffuse_Q51);\r#else\nReflected_Color_Q51=vec4(0,0,0,1);\rIndirect_Diffuse_Q51=vec4(0,0,0,1);\r#endif\nvec4 Reflected_Color_Q50;\rvec4 Indirect_Color_Q50;\r#if SKY_ENABLED\nSky_Environment_B50(New_Normal_Q79,Reflected_Q47,Linear_Q43,Linear_Q44,Linear_Q45,_Horizon_Power_,Reflected_Color_Q50,Indirect_Color_Q50);\r#else\nReflected_Color_Q50=vec4(0,0,0,1);\rIndirect_Color_Q50=vec4(0,0,0,1);\r#endif\nfloat Hue_Q75;\rfloat Saturation_Q75;\rfloat Value_Q75;\rfloat Alpha_Q75;\rvec3 HSV_Q75;\rTo_HSV_B75(Product_Q103,Hue_Q75,Saturation_Q75,Value_Q75,Alpha_Q75,HSV_Q75);\rfloat Hue_Q127;\rfloat Saturation_Q127;\rfloat Value_Q127;\rfloat Alpha_Q127;\rvec3 HSV_Q127;\rTo_HSV_B75(Result_Q132,Hue_Q127,Saturation_Q127,Value_Q127,Alpha_Q127,HSV_Q127);\rfloat Result_Q110;\rCode_B110(Dot_Q72,Result_Q110);\rfloat AbsA_Q76=abs(Result_Q110);\rfloat MinAB_Q58=min(NotInShadow_Q67,NotInShadow_Q68);\rvec4 Sum_Q48=Reflected_Color_Q51+Reflected_Color_Q50;\rvec4 Sum_Q49=Indirect_Diffuse_Q51+Indirect_Color_Q50;\rvec3 HSV_Out_Q126;\rVaryHSV_B108(HSV_Q127,_Rim_Hue_Shift_,_Rim_Saturation_Shift_,_Rim_Value_Shift_,HSV_Out_Q126);\rfloat Out_Q114;\rRemap_Range_B114(-1.0,1.0,0.0,1.0,Result_Q110,Out_Q114);\rfloat Product_Q106;\rProduct_Q106=AbsA_Q76*_Hue_Shift_;\rfloat X_Q128;\rfloat Y_Q128;\rfloat Z_Q128;\rTo_XYZ_B74(HSV_Out_Q126,X_Q128,Y_Q128,Z_Q128);\rvec2 Vec2_Q112=vec2(Out_Q114,0.5);\rvec3 HSV_Out_Q108;\rVaryHSV_B108(HSV_Q75,Product_Q106,_Saturation_Shift_,_Value_Shift_,HSV_Out_Q108);\rvec4 Color_Q129;\rFrom_HSV_B73(X_Q128,Y_Q128,Z_Q128,0.0,Color_Q129);\rvec4 Color_Q111;\r#if IRIDESCENCE_ENABLED\nColor_Q111=texture(_Iridescence_Texture_,Vec2_Q112);\r#else\nColor_Q111=vec4(0,0,0,0);\r#endif\nfloat X_Q74;\rfloat Y_Q74;\rfloat Z_Q74;\rTo_XYZ_B74(HSV_Out_Q108,X_Q74,Y_Q74,Z_Q74);\rvec4 Result_Q131=_Rim_Intensity_*Color_Q129;\rvec4 Result_Q113=_Iridescence_Intensity_*Color_Q111;\rvec4 Color_Q73;\rFrom_HSV_B73(X_Q74,Y_Q74,Z_Q74,0.0,Color_Q73);\rvec4 Result_Q84=Result_Q91+(1.0-Result_Q91.a)*Color_Q73;\rvec4 Result_Q121;\rFragment_Main_B121(_Sun_Intensity_,_Sun_Theta_,_Sun_Phi_,New_Normal_Q79,Result_Q84,MaxAB_Q123,_Shininess_,Incident_Q39,_Horizon_Color_,_Sky_Color_,_Ground_Color_,_Indirect_Diffuse_,_Specular_,_Horizon_Power_,_Reflection_,Sum_Q48,Sum_Q49,_Sharpness_,Result_Q77,_Subsurface_,vec4(0,0,0,0),Result_Q131,Result_Q113,Result_Q121);\rvec4 Result_Q59;\rScale_RGB_B59(Result_Q121,MinAB_Q58,Result_Q59);\rvec4 sRGB_Q42;\rFastLinearTosRGB_B42(Result_Q59,sRGB_Q42);\rvec4 Result_Q31=Blob_Color_Q30+(1.0-Blob_Color_Q30.a)*sRGB_Q42;\rvec4 Result_Q40=Result_Q31; Result_Q40.a=1.0;\rvec4 Out_Color=Result_Q40;\rfloat Clip_Threshold=0.001;\rbool To_sRGB=false;\rgl_FragColor=Out_Color;\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const mrdlSliderBarPixelShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"mrdlSliderBarVertexShader\";\nconst shader = `uniform mat4 world;\runiform mat4 viewProjection;\runiform vec3 cameraPosition;\rattribute vec3 position;\rattribute vec3 normal;\rattribute vec2 uv;\r#ifdef TANGENT\nattribute vec3 tangent;\r#else\nconst vec3 tangent=vec3(0.);\r#endif\nuniform float _Radius_;\runiform float _Bevel_Front_;\runiform float _Bevel_Front_Stretch_;\runiform float _Bevel_Back_;\runiform float _Bevel_Back_Stretch_;\runiform float _Radius_Top_Left_;\runiform float _Radius_Top_Right_;\runiform float _Radius_Bottom_Left_;\runiform float _Radius_Bottom_Right_;\runiform bool _Bulge_Enabled_;\runiform float _Bulge_Height_;\runiform float _Bulge_Radius_;\runiform float _Sun_Intensity_;\runiform float _Sun_Theta_;\runiform float _Sun_Phi_;\runiform float _Indirect_Diffuse_;\runiform vec4 _Albedo_;\runiform float _Specular_;\runiform float _Shininess_;\runiform float _Sharpness_;\runiform float _Subsurface_;\runiform vec4 _Left_Color_;\runiform vec4 _Right_Color_;\runiform float _Reflection_;\runiform float _Front_Reflect_;\runiform float _Edge_Reflect_;\runiform float _Power_;\runiform vec4 _Sky_Color_;\runiform vec4 _Horizon_Color_;\runiform vec4 _Ground_Color_;\runiform float _Horizon_Power_;\runiform sampler2D _Reflection_Map_;\runiform sampler2D _Indirect_Environment_;\runiform float _Width_;\runiform float _Fuzz_;\runiform float _Min_Fuzz_;\runiform float _Clip_Fade_;\runiform float _Hue_Shift_;\runiform float _Saturation_Shift_;\runiform float _Value_Shift_;\runiform vec3 _Blob_Position_;\runiform float _Blob_Intensity_;\runiform float _Blob_Near_Size_;\runiform float _Blob_Far_Size_;\runiform float _Blob_Near_Distance_;\runiform float _Blob_Far_Distance_;\runiform float _Blob_Fade_Length_;\runiform float _Blob_Pulse_;\runiform float _Blob_Fade_;\runiform sampler2D _Blob_Texture_;\runiform vec3 _Blob_Position_2_;\runiform float _Blob_Near_Size_2_;\runiform float _Blob_Pulse_2_;\runiform float _Blob_Fade_2_;\runiform vec3 _Left_Index_Pos_;\runiform vec3 _Right_Index_Pos_;\runiform vec3 _Left_Index_Middle_Pos_;\runiform vec3 _Right_Index_Middle_Pos_;\runiform sampler2D _Decal_;\runiform vec2 _Decal_Scale_XY_;\runiform bool _Decal_Front_Only_;\runiform float _Rim_Intensity_;\runiform sampler2D _Rim_Texture_;\runiform float _Rim_Hue_Shift_;\runiform float _Rim_Saturation_Shift_;\runiform float _Rim_Value_Shift_;\runiform float _Iridescence_Intensity_;\runiform sampler2D _Iridescence_Texture_;\runiform bool Use_Global_Left_Index;\runiform bool Use_Global_Right_Index;\runiform vec4 Global_Left_Index_Tip_Position;\runiform vec4 Global_Right_Index_Tip_Position;\runiform vec4 Global_Left_Thumb_Tip_Position;\runiform vec4 Global_Right_Thumb_Tip_Position;\runiform float Global_Left_Index_Tip_Proximity;\runiform float Global_Right_Index_Tip_Proximity;\rvarying vec3 vPosition;\rvarying vec3 vNormal;\rvarying vec2 vUV;\rvarying vec3 vTangent;\rvarying vec3 vBinormal;\rvarying vec4 vColor;\rvarying vec4 vExtra1;\rvarying vec4 vExtra2;\rvarying vec4 vExtra3;\rvoid Object_To_World_Pos_B12(\rvec3 Pos_Object,\rout vec3 Pos_World)\r{\rPos_World=(world*vec4(Pos_Object,1.0)).xyz;\r}\rvoid Object_To_World_Normal_B32(\rvec3 Nrm_Object,\rout vec3 Nrm_World)\r{\rNrm_World=(vec4(Nrm_Object,0.0)).xyz;\r}\rvoid Blob_Vertex_B23(\rvec3 Position,\rvec3 Normal,\rvec3 Tangent,\rvec3 Bitangent,\rvec3 Blob_Position,\rfloat Intensity,\rfloat Blob_Near_Size,\rfloat Blob_Far_Size,\rfloat Blob_Near_Distance,\rfloat Blob_Far_Distance,\rfloat Blob_Fade_Length,\rfloat Blob_Pulse,\rfloat Blob_Fade,\rout vec4 Blob_Info)\r{\rvec3 blob= (Use_Global_Left_Index ? Global_Left_Index_Tip_Position.xyz : Blob_Position);\rvec3 delta=blob-Position;\rfloat dist=dot(Normal,delta);\rfloat lerpValue=clamp((abs(dist)-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance),0.0,1.0);\rfloat fadeValue=1.0-clamp((abs(dist)-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);\rfloat size=Blob_Near_Size+(Blob_Far_Size-Blob_Near_Size)*lerpValue;\rvec2 blobXY=vec2(dot(delta,Tangent),dot(delta,Bitangent))/(0.0001+size);\rfloat Fade=fadeValue*Intensity*Blob_Fade;\rfloat Distance=(lerpValue*0.5+0.5)*(1.0-Blob_Pulse);\rBlob_Info=vec4(blobXY.x,blobXY.y,Distance,Fade);\r}\rvoid Blob_Vertex_B24(\rvec3 Position,\rvec3 Normal,\rvec3 Tangent,\rvec3 Bitangent,\rvec3 Blob_Position,\rfloat Intensity,\rfloat Blob_Near_Size,\rfloat Blob_Far_Size,\rfloat Blob_Near_Distance,\rfloat Blob_Far_Distance,\rfloat Blob_Fade_Length,\rfloat Blob_Pulse,\rfloat Blob_Fade,\rout vec4 Blob_Info)\r{\rvec3 blob= (Use_Global_Right_Index ? Global_Right_Index_Tip_Position.xyz : Blob_Position);\rvec3 delta=blob-Position;\rfloat dist=dot(Normal,delta);\rfloat lerpValue=clamp((abs(dist)-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance),0.0,1.0);\rfloat fadeValue=1.0-clamp((abs(dist)-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);\rfloat size=Blob_Near_Size+(Blob_Far_Size-Blob_Near_Size)*lerpValue;\rvec2 blobXY=vec2(dot(delta,Tangent),dot(delta,Bitangent))/(0.0001+size);\rfloat Fade=fadeValue*Intensity*Blob_Fade;\rfloat Distance=(lerpValue*0.5+0.5)*(1.0-Blob_Pulse);\rBlob_Info=vec4(blobXY.x,blobXY.y,Distance,Fade);\r}\rvoid Move_Verts_B130(\rfloat Anisotropy,\rvec3 P,\rfloat Radius,\rfloat Bevel,\rvec3 Normal_Object,\rfloat ScaleZ,\rfloat Stretch,\rout vec3 New_P,\rout vec2 New_UV,\rout float Radial_Gradient,\rout vec3 Radial_Dir,\rout vec3 New_Normal)\r{\rvec2 UV=P.xy*2.0+0.5;\rvec2 center=clamp(UV,0.0,1.0);\rvec2 delta=UV-center;\rfloat deltad=(length(delta)*2.0);\rfloat f=(Bevel+(Radius-Bevel)*Stretch)/Radius;\rfloat innerd=clamp(deltad*2.0,0.0,1.0);\rfloat outerd=clamp(deltad*2.0-1.0,0.0,1.0);\rfloat bevelAngle=outerd*3.14159*0.5;\rfloat sinb=sin(bevelAngle);\rfloat cosb=cos(bevelAngle);\rfloat beveld=(1.0-f)*innerd+f*sinb;\rfloat br=outerd;\rvec2 r2=2.0*vec2(Radius/Anisotropy,Radius);\rfloat dir=P.z<0.0001 ? 1.0 : -1.0;\rNew_UV=center+r2*((0.5-center)+normalize(delta+vec2(0.0,0.000001))*beveld*0.5);\rNew_P=vec3(New_UV-0.5,P.z+dir*(1.0-cosb)*Bevel*ScaleZ);\rRadial_Gradient=clamp((deltad-0.5)*2.0,0.0,1.0);\rRadial_Dir=vec3(delta*r2,0.0);\rvec3 beveledNormal=cosb*Normal_Object+sinb*vec3(delta.x,delta.y,0.0);\rNew_Normal=Normal_Object.z==0.0 ? Normal_Object : beveledNormal;\r}\rvoid Object_To_World_Dir_B60(\rvec3 Dir_Object,\rout vec3 Normal_World,\rout vec3 Normal_World_N,\rout float Normal_Length)\r{\rNormal_World=(world*vec4(Dir_Object,0.0)).xyz;\rNormal_Length=length(Normal_World);\rNormal_World_N=Normal_World/Normal_Length;\r}\rvoid To_XYZ_B78(\rvec3 Vec3,\rout float X,\rout float Y,\rout float Z)\r{\rX=Vec3.x;\rY=Vec3.y;\rZ=Vec3.z;\r}\rvoid Conditional_Float_B93(\rbool Which,\rfloat If_True,\rfloat If_False,\rout float Result)\r{\rResult=Which ? If_True : If_False;\r}\rvoid Object_To_World_Dir_B28(\rvec3 Dir_Object,\rout vec3 Binormal_World,\rout vec3 Binormal_World_N,\rout float Binormal_Length)\r{\rBinormal_World=(world*vec4(Dir_Object,0.0)).xyz;\rBinormal_Length=length(Binormal_World);\rBinormal_World_N=Binormal_World/Binormal_Length;\r}\rvoid Pick_Radius_B69(\rfloat Radius,\rfloat Radius_Top_Left,\rfloat Radius_Top_Right,\rfloat Radius_Bottom_Left,\rfloat Radius_Bottom_Right,\rvec3 Position,\rout float Result)\r{\rbool whichY=Position.y>0.0;\rResult=Position.x<0.0 ? (whichY ? Radius_Top_Left : Radius_Bottom_Left) : (whichY ? Radius_Top_Right : Radius_Bottom_Right);\rResult*=Radius;\r}\rvoid Conditional_Float_B36(\rbool Which,\rfloat If_True,\rfloat If_False,\rout float Result)\r{\rResult=Which ? If_True : If_False;\r}\rvoid Greater_Than_B37(\rfloat Left,\rfloat Right,\rout bool Not_Greater_Than,\rout bool Greater_Than)\r{\rGreater_Than=Left>Right;\rNot_Greater_Than=!Greater_Than;\r}\rvoid Remap_Range_B105(\rfloat In_Min,\rfloat In_Max,\rfloat Out_Min,\rfloat Out_Max,\rfloat In,\rout float Out)\r{\rOut=mix(Out_Min,Out_Max,clamp((In-In_Min)/(In_Max-In_Min),0.0,1.0));\r}\rvoid main()\r{\rvec2 XY_Q85;\rXY_Q85=(uv-vec2(0.5,0.5))*_Decal_Scale_XY_+vec2(0.5,0.5);\rvec3 Tangent_World_Q27;\rvec3 Tangent_World_N_Q27;\rfloat Tangent_Length_Q27;\rTangent_World_Q27=(world*vec4(vec3(1,0,0),0.0)).xyz;\rTangent_Length_Q27=length(Tangent_World_Q27);\rTangent_World_N_Q27=Tangent_World_Q27/Tangent_Length_Q27;\rvec3 Normal_World_Q60;\rvec3 Normal_World_N_Q60;\rfloat Normal_Length_Q60;\rObject_To_World_Dir_B60(vec3(0,0,1),Normal_World_Q60,Normal_World_N_Q60,Normal_Length_Q60);\rfloat X_Q78;\rfloat Y_Q78;\rfloat Z_Q78;\rTo_XYZ_B78(position,X_Q78,Y_Q78,Z_Q78);\rvec3 Nrm_World_Q26;\rNrm_World_Q26=normalize((world*vec4(normal,0.0)).xyz);\rvec3 Binormal_World_Q28;\rvec3 Binormal_World_N_Q28;\rfloat Binormal_Length_Q28;\rObject_To_World_Dir_B28(vec3(0,1,0),Binormal_World_Q28,Binormal_World_N_Q28,Binormal_Length_Q28);\rfloat Anisotropy_Q29=Tangent_Length_Q27/Binormal_Length_Q28;\rfloat Result_Q69;\rPick_Radius_B69(_Radius_,_Radius_Top_Left_,_Radius_Top_Right_,_Radius_Bottom_Left_,_Radius_Bottom_Right_,position,Result_Q69);\rfloat Anisotropy_Q53=Binormal_Length_Q28/Normal_Length_Q60;\rbool Not_Greater_Than_Q37;\rbool Greater_Than_Q37;\rGreater_Than_B37(Z_Q78,0.0,Not_Greater_Than_Q37,Greater_Than_Q37);\rvec4 Linear_Q101;\rLinear_Q101.rgb=clamp(_Left_Color_.rgb*_Left_Color_.rgb,0.0,1.0);\rLinear_Q101.a=_Left_Color_.a;\rvec4 Linear_Q102;\rLinear_Q102.rgb=clamp(_Right_Color_.rgb*_Right_Color_.rgb,0.0,1.0);\rLinear_Q102.a=_Right_Color_.a;\rvec3 Difference_Q61=vec3(0,0,0)-Normal_World_N_Q60;\rvec4 Out_Color_Q34=vec4(X_Q78,Y_Q78,Z_Q78,1);\rfloat Result_Q36;\rConditional_Float_B36(Greater_Than_Q37,_Bevel_Back_,_Bevel_Front_,Result_Q36);\rfloat Result_Q94;\rConditional_Float_B36(Greater_Than_Q37,_Bevel_Back_Stretch_,_Bevel_Front_Stretch_,Result_Q94);\rvec3 New_P_Q130;\rvec2 New_UV_Q130;\rfloat Radial_Gradient_Q130;\rvec3 Radial_Dir_Q130;\rvec3 New_Normal_Q130;\rMove_Verts_B130(Anisotropy_Q29,position,Result_Q69,Result_Q36,normal,Anisotropy_Q53,Result_Q94,New_P_Q130,New_UV_Q130,Radial_Gradient_Q130,Radial_Dir_Q130,New_Normal_Q130);\rfloat X_Q98;\rfloat Y_Q98;\rX_Q98=New_UV_Q130.x;\rY_Q98=New_UV_Q130.y;\rvec3 Pos_World_Q12;\rObject_To_World_Pos_B12(New_P_Q130,Pos_World_Q12);\rvec3 Nrm_World_Q32;\rObject_To_World_Normal_B32(New_Normal_Q130,Nrm_World_Q32);\rvec4 Blob_Info_Q23;\r#if BLOB_ENABLE\nBlob_Vertex_B23(Pos_World_Q12,Nrm_World_Q26,Tangent_World_N_Q27,Binormal_World_N_Q28,_Blob_Position_,_Blob_Intensity_,_Blob_Near_Size_,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,_Blob_Fade_Length_,_Blob_Pulse_,_Blob_Fade_,Blob_Info_Q23);\r#else\nBlob_Info_Q23=vec4(0,0,0,0);\r#endif\nvec4 Blob_Info_Q24;\r#if BLOB_ENABLE_2\nBlob_Vertex_B24(Pos_World_Q12,Nrm_World_Q26,Tangent_World_N_Q27,Binormal_World_N_Q28,_Blob_Position_2_,_Blob_Intensity_,_Blob_Near_Size_2_,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,_Blob_Fade_Length_,_Blob_Pulse_2_,_Blob_Fade_2_,Blob_Info_Q24);\r#else\nBlob_Info_Q24=vec4(0,0,0,0);\r#endif\nfloat Out_Q105;\rRemap_Range_B105(0.0,1.0,0.0,1.0,X_Q98,Out_Q105);\rfloat X_Q86;\rfloat Y_Q86;\rfloat Z_Q86;\rTo_XYZ_B78(Nrm_World_Q32,X_Q86,Y_Q86,Z_Q86);\rvec4 Color_At_T_Q97=mix(Linear_Q101,Linear_Q102,Out_Q105);\rfloat Minus_F_Q87=-Z_Q86;\rfloat R_Q99;\rfloat G_Q99;\rfloat B_Q99;\rfloat A_Q99;\rR_Q99=Color_At_T_Q97.r; G_Q99=Color_At_T_Q97.g; B_Q99=Color_At_T_Q97.b; A_Q99=Color_At_T_Q97.a;\rfloat ClampF_Q88=clamp(0.0,Minus_F_Q87,1.0);\rfloat Result_Q93;\rConditional_Float_B93(_Decal_Front_Only_,ClampF_Q88,1.0,Result_Q93);\rvec4 Vec4_Q89=vec4(Result_Q93,Radial_Gradient_Q130,G_Q99,B_Q99);\rvec3 Position=Pos_World_Q12;\rvec3 Normal=Nrm_World_Q32;\rvec2 UV=XY_Q85;\rvec3 Tangent=Tangent_World_N_Q27;\rvec3 Binormal=Difference_Q61;\rvec4 Color=Out_Color_Q34;\rvec4 Extra1=Vec4_Q89;\rvec4 Extra2=Blob_Info_Q23;\rvec4 Extra3=Blob_Info_Q24;\rgl_Position=viewProjection*vec4(Position,1);\rvPosition=Position;\rvNormal=Normal;\rvUV=UV;\rvTangent=Tangent;\rvBinormal=Binormal;\rvColor=Color;\rvExtra1=Extra1;\rvExtra2=Extra2;\rvExtra3=Extra3;\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const mrdlSliderBarVertexShader = { name, shader };\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { SerializationHelper, serialize } from \"core/Misc/decorators\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport { Vector2, Vector3, Vector4 } from \"core/Maths/math.vector\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"core/Materials/materialHelper\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { Color4 } from \"core/Maths/math.color\";\r\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\r\nimport { Constants } from \"core/Engines/constants\";\r\n\r\nimport \"./shaders/mrdlSliderBar.fragment\";\r\nimport \"./shaders/mrdlSliderBar.vertex\";\r\n\r\n/** @internal */\r\nclass MRDLSliderBarMaterialDefines extends MaterialDefines {\r\n    /*\r\n        \"SKY_ENABLED\", \"BLOB_ENABLE_2\", \"IRIDESCENCE_ENABLED\"\r\n    */\r\n    public SKY_ENABLED = true;\r\n    public BLOB_ENABLE_2 = true;\r\n    public IRIDESCENCE_ENABLED = true;\r\n\r\n    constructor() {\r\n        super();\r\n        this._needNormals = true;\r\n        this._needUVs = true;\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render Slider Bar material with MRDL\r\n */\r\nexport class MRDLSliderBarMaterial extends PushMaterial {\r\n    /**\r\n     * URL pointing to the texture used to define the coloring for the Iridescent Map effect.\r\n     */\r\n    public static BLUE_GRADIENT_TEXTURE_URL = \"https://assets.babylonjs.com/meshes/MRTK/MRDL/mrtk-mrdl-blue-gradient.png\";\r\n    private _blueGradientTexture: Texture;\r\n    private _decalTexture: Texture;\r\n    private _reflectionMapTexture: Texture;\r\n    private _indirectEnvTexture: Texture;\r\n\r\n    /**\r\n     * Gets or sets the corner Radius on the slider bar.\r\n     */\r\n    @serialize()\r\n    public radius = 0.6;\r\n\r\n    /**\r\n     * Gets or sets the Bevel Front on the slider bar.\r\n     */\r\n    @serialize()\r\n    public bevelFront = 0.6;\r\n\r\n    /**\r\n     * Gets or sets the Bevel Front Stretch on the slider bar.\r\n     */\r\n    @serialize()\r\n    public bevelFrontStretch = 0.077;\r\n\r\n    /**\r\n     * Gets or sets the Bevel Back on the slider bar.\r\n     */\r\n    @serialize()\r\n    public bevelBack = 0;\r\n\r\n    /**\r\n     * Gets or sets the Bevel Back Stretch on the slider bar.\r\n     */\r\n    @serialize()\r\n    public bevelBackStretch = 0;\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusTopLeft = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusTopRight = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusBottomLeft = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusBottomRight = 1.0;\r\n\r\n    /**\r\n     * Gets or sets whether Bulge is enabled.\r\n     * Default is false.\r\n     */\r\n    @serialize()\r\n    public bulgeEnabled = false;\r\n\r\n    /**\r\n     * Gets or sets the Bulge Height.\r\n     */\r\n    @serialize()\r\n    public bulgeHeight = -0.323;\r\n\r\n    /**\r\n     * Gets or sets the Bulge Radius.\r\n     */\r\n    @serialize()\r\n    public bulgeRadius = 0.73;\r\n\r\n    /**\r\n     * Gets or sets the Sun Intensity.\r\n     */\r\n    @serialize()\r\n    public sunIntensity = 1.102;\r\n\r\n    /**\r\n     * Gets or sets the Sun Theta.\r\n     */\r\n    @serialize()\r\n    public sunTheta = 0.76;\r\n\r\n    /**\r\n     * Gets or sets the Sun Phi.\r\n     */\r\n    @serialize()\r\n    public sunPhi = 0.526;\r\n\r\n    /**\r\n     * Gets or sets the Indirect Diffuse.\r\n     */\r\n    @serialize()\r\n    public indirectDiffuse = 0.658;\r\n\r\n    /**\r\n     * Gets or sets the base albedo.\r\n     */\r\n    @serialize()\r\n    public albedo = new Color4(0.0117647, 0.505882, 0.996078, 1);\r\n\r\n    /**\r\n     * Gets or sets the Specular value.\r\n     */\r\n    @serialize()\r\n    public specular = 0;\r\n\r\n    /**\r\n     * Gets or sets the Shininess value.\r\n     */\r\n    @serialize()\r\n    public shininess = 10;\r\n\r\n    /**\r\n     * Gets or sets the Sharpness value.\r\n     */\r\n    @serialize()\r\n    public sharpness = 0;\r\n\r\n    /**\r\n     * Gets or sets the Subsurface value.\r\n     */\r\n    @serialize()\r\n    public subsurface = 0;\r\n\r\n    /**\r\n     * Gets or sets the left gradient color.\r\n     */\r\n    @serialize()\r\n    public leftGradientColor = new Color4(0.0117647, 0.505882, 0.996078, 1);\r\n\r\n    /**\r\n     * Gets or sets the right gradient color.\r\n     */\r\n    @serialize()\r\n    public rightGradientColor = new Color4(0.0117647, 0.505882, 0.996078, 1);\r\n\r\n    /**\r\n     * Gets or sets the reflection value.\r\n     */\r\n    @serialize()\r\n    public reflection = 0.749;\r\n\r\n    /**\r\n     * Gets or sets the front reflect value.\r\n     */\r\n    @serialize()\r\n    public frontReflect = 0;\r\n\r\n    /**\r\n     * Gets or sets the edge reflect value.\r\n     */\r\n    @serialize()\r\n    public edgeReflect = 0.09;\r\n\r\n    /**\r\n     * Gets or sets the power value.\r\n     */\r\n    @serialize()\r\n    public power = 8.13;\r\n\r\n    /**\r\n     * Gets or sets the sky color.\r\n     */\r\n    @serialize()\r\n    public skyColor = new Color4(0.0117647, 0.964706, 0.996078, 1);\r\n\r\n    /**\r\n     * Gets or sets the horizon color.\r\n     */\r\n    @serialize()\r\n    public horizonColor = new Color4(0.0117647, 0.333333, 0.996078, 1);\r\n\r\n    /**\r\n     * Gets or sets the ground color.\r\n     */\r\n    @serialize()\r\n    public groundColor = new Color4(0, 0.254902, 0.996078, 1);\r\n\r\n    /**\r\n     * Gets or sets the horizon power value.\r\n     */\r\n    @serialize()\r\n    public horizonPower = 1;\r\n\r\n    /**\r\n     * Gets or sets the finger occlusion width value.\r\n     */\r\n    @serialize()\r\n    public width = 0.02;\r\n\r\n    /**\r\n     * Gets or sets the finger occlusion fuzz value.\r\n     */\r\n    @serialize()\r\n    public fuzz = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the minimum finger occlusion fuzz value.\r\n     */\r\n    @serialize()\r\n    public minFuzz = 0.001;\r\n\r\n    /**\r\n     * Gets or sets the finger occlusion clip fade value.\r\n     */\r\n    @serialize()\r\n    public clipFade = 0.01;\r\n\r\n    /**\r\n     * Gets or sets the hue shift value.\r\n     */\r\n    @serialize()\r\n    public hueShift = 0;\r\n\r\n    /**\r\n     * Gets or sets the saturation shift value.\r\n     */\r\n    @serialize()\r\n    public saturationShift = 0;\r\n\r\n    /**\r\n     * Gets or sets the value shift.\r\n     */\r\n    @serialize()\r\n    public valueShift = 0;\r\n\r\n    /**\r\n     * Gets or sets the position of the hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobPosition = new Vector3(0, 0, 0.1);\r\n\r\n    /**\r\n     * Gets or sets the intensity of the hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobIntensity = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the near size of the hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobNearSize = 0.01;\r\n    /**\r\n     * Gets or sets the far size of the hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobFarSize = 0.03;\r\n\r\n    /**\r\n     * Gets or sets the distance considered \"near\" to the mesh, which controls the size of the hover glow effect (see blobNearSize).\r\n     */\r\n    @serialize()\r\n    public blobNearDistance = 0;\r\n\r\n    /**\r\n     * Gets or sets the distance considered \"far\" from the mesh, which controls the size of the hover glow effect (see blobFarSize).\r\n     */\r\n    @serialize()\r\n    public blobFarDistance = 0.08;\r\n\r\n    /**\r\n     * Gets or sets the length of the hover glow effect fade.\r\n     */\r\n    @serialize()\r\n    public blobFadeLength = 0.576;\r\n\r\n    /**\r\n     * Gets or sets the progress of the hover glow effect selection animation corresponding to the left pointer (0.0 - 1.0).\r\n     */\r\n    @serialize()\r\n    public blobPulse = 0;\r\n\r\n    /**\r\n     * Gets or sets the opacity of the hover glow effect corresponding to the left pointer (0.0 - 1.0). Default is 0.\r\n     */\r\n    @serialize()\r\n    public blobFade = 1;\r\n\r\n    /**\r\n     * Gets or sets the position of the hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobPosition2 = new Vector3(0.2, 0, 0.1);\r\n\r\n    /**\r\n     * Gets or sets the size of the hover glow effect when the right pointer is considered \"near\" to the mesh (see blobNearDistance).\r\n     */\r\n    @serialize()\r\n    public blobNearSize2 = 0.01;\r\n\r\n    /**\r\n     * Gets or sets the progress of the hover glow effect selection animation corresponding to the right pointer (0.0 - 1.0).\r\n     */\r\n    @serialize()\r\n    public blobPulse2 = 0;\r\n\r\n    /**\r\n     * Gets or sets the opacity of the hover glow effect corresponding to the right pointer (0.0 - 1.0). Default is 1.\r\n     */\r\n    @serialize()\r\n    public blobFade2 = 1;\r\n\r\n    /**\r\n     * Gets or sets the texture of the hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobTexture = new Texture(\"\", this.getScene());\r\n\r\n    /**\r\n     * Gets or sets the finger position for left index.\r\n     */\r\n    @serialize()\r\n    public leftIndexPosition = new Vector3(0, 0, 1);\r\n\r\n    /**\r\n     * Gets or sets the finger position for right index.\r\n     */\r\n    @serialize()\r\n    public rightIndexPosition = new Vector3(-1, -1, -1);\r\n\r\n    /**\r\n     * Gets or sets the finger position for left index middle position.\r\n     */\r\n    @serialize()\r\n    public leftIndexMiddlePosition = new Vector3(0, 0, 0);\r\n\r\n    /**\r\n     * Gets or sets the finger position for right index middle position.\r\n     */\r\n    @serialize()\r\n    public rightIndexMiddlePosition = new Vector3(0, 0, 0);\r\n\r\n    /**\r\n     * Gets or sets the Decal Scle for XY.\r\n     */\r\n    @serialize()\r\n    public decalScaleXY = new Vector2(1.5, 1.5);\r\n\r\n    /**\r\n     * Gets or sets decalFrontOnly\r\n     * Default is true\r\n     */\r\n    @serialize()\r\n    public decalFrontOnly = true;\r\n\r\n    /**\r\n     * Gets or sets the Rim Light intensity.\r\n     */\r\n    @serialize()\r\n    public rimIntensity = 0.287;\r\n\r\n    /**\r\n     * Gets or sets the Rim Light hue shift value.\r\n     */\r\n    @serialize()\r\n    public rimHueShift = 0;\r\n\r\n    /**\r\n     * Gets or sets the Rim Light saturation shift value.\r\n     */\r\n    @serialize()\r\n    public rimSaturationShift = 0;\r\n\r\n    /**\r\n     * Gets or sets the Rim Light value shift.\r\n     */\r\n    @serialize()\r\n    public rimValueShift = -1;\r\n\r\n    /**\r\n     * Gets or sets the intensity of the iridescence effect.\r\n     */\r\n    @serialize()\r\n    public iridescenceIntensity = 0;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public useGlobalLeftIndex = 1.0;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public useGlobalRightIndex = 1.0;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalLeftIndexTipProximity = 0.0;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalRightIndexTipProximity = 0.0;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalLeftIndexTipPosition = new Vector4(0.5, 0.0, -0.55, 1.0);\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globaRightIndexTipPosition = new Vector4(0.0, 0.0, 0.0, 1.0);\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalLeftThumbTipPosition = new Vector4(0.5, 0.0, -0.55, 1.0);\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalRightThumbTipPosition = new Vector4(0.0, 0.0, 0.0, 1.0);\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalLeftIndexMiddlePosition = new Vector4(0.5, 0.0, -0.55, 1.0);\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalRightIndexMiddlePosition = new Vector4(0.0, 0.0, 0.0, 1.0);\r\n\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n        this.alphaMode = Constants.ALPHA_DISABLE;\r\n        this.backFaceCulling = false;\r\n        this._blueGradientTexture = new Texture(MRDLSliderBarMaterial.BLUE_GRADIENT_TEXTURE_URL, this.getScene(), true, false, Texture.NEAREST_SAMPLINGMODE);\r\n        this._decalTexture = new Texture(\"\", this.getScene());\r\n        this._reflectionMapTexture = new Texture(\"\", this.getScene());\r\n        this._indirectEnvTexture = new Texture(\"\", this.getScene());\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new MRDLSliderBarMaterialDefines();\r\n        }\r\n\r\n        const defines = <MRDLSliderBarMaterialDefines>subMesh.materialDefines;\r\n        const scene = this.getScene();\r\n\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, false);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\r\n\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            if (defines.TANGENT) {\r\n                attribs.push(VertexBuffer.TangentKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            const shaderName = \"mrdlSliderBar\";\r\n            const join = defines.toString();\r\n\r\n            const uniforms = [\r\n                \"world\",\r\n                \"viewProjection\",\r\n                \"cameraPosition\",\r\n                \"_Radius_\",\r\n                \"_Bevel_Front_\",\r\n                \"_Bevel_Front_Stretch_\",\r\n                \"_Bevel_Back_\",\r\n                \"_Bevel_Back_Stretch_\",\r\n                \"_Radius_Top_Left_\",\r\n                \"_Radius_Top_Right_\",\r\n                \"_Radius_Bottom_Left_\",\r\n                \"_Radius_Bottom_Right_\",\r\n                \"_Bulge_Enabled_\",\r\n                \"_Bulge_Height_\",\r\n                \"_Bulge_Radius_\",\r\n                \"_Sun_Intensity_\",\r\n                \"_Sun_Theta_\",\r\n                \"_Sun_Phi_\",\r\n                \"_Indirect_Diffuse_\",\r\n                \"_Albedo_\",\r\n                \"_Specular_\",\r\n                \"_Shininess_\",\r\n                \"_Sharpness_\",\r\n                \"_Subsurface_\",\r\n                \"_Left_Color_\",\r\n                \"_Right_Color_\",\r\n                \"_Reflection_\",\r\n                \"_Front_Reflect_\",\r\n                \"_Edge_Reflect_\",\r\n                \"_Power_\",\r\n                \"_Sky_Color_\",\r\n                \"_Horizon_Color_\",\r\n                \"_Ground_Color_\",\r\n                \"_Horizon_Power_\",\r\n                \"_Reflection_Map_\",\r\n                \"_Indirect_Environment_\",\r\n                \"_Width_\",\r\n                \"_Fuzz_\",\r\n                \"_Min_Fuzz_\",\r\n                \"_Clip_Fade_\",\r\n                \"_Hue_Shift_\",\r\n                \"_Saturation_Shift_\",\r\n                \"_Value_Shift_\",\r\n                \"_Blob_Position_\",\r\n                \"_Blob_Intensity_\",\r\n                \"_Blob_Near_Size_\",\r\n                \"_Blob_Far_Size_\",\r\n                \"_Blob_Near_Distance_\",\r\n                \"_Blob_Far_Distance_\",\r\n                \"_Blob_Fade_Length_\",\r\n                \"_Blob_Pulse_\",\r\n                \"_Blob_Fade_\",\r\n                \"_Blob_Texture_\",\r\n                \"_Blob_Position_2_\",\r\n                \"_Blob_Near_Size_2_\",\r\n                \"_Blob_Pulse_2_\",\r\n                \"_Blob_Fade_2_\",\r\n                \"_Left_Index_Pos_\",\r\n                \"_Right_Index_Pos_\",\r\n                \"_Left_Index_Middle_Pos_\",\r\n                \"_Right_Index_Middle_Pos_\",\r\n                \"_Decal_\",\r\n                \"_Decal_Scale_XY_\",\r\n                \"_Decal_Front_Only_\",\r\n                \"_Rim_Intensity_\",\r\n                \"_Rim_Texture_\",\r\n                \"_Rim_Hue_Shift_\",\r\n                \"_Rim_Saturation_Shift_\",\r\n                \"_Rim_Value_Shift_\",\r\n                \"_Iridescence_Intensity_\",\r\n                \"_Iridescence_Texture_\",\r\n                \"Use_Global_Left_Index\",\r\n                \"Use_Global_Right_Index\",\r\n                \"Global_Left_Index_Tip_Position\",\r\n                \"Global_Right_Index_Tip_Position\",\r\n                \"Global_Left_Thumb_Tip_Position\",\r\n                \"Global_Right_Thumb_Tip_Position\",\r\n                \"Global_Left_Index_Middle_Position;\",\r\n                \"Global_Right_Index_Middle_Position\",\r\n                \"Global_Left_Index_Tip_Proximity\",\r\n                \"Global_Right_Index_Tip_Proximity\",\r\n            ];\r\n            const samplers: string[] = [\"_Rim_Texture_\", \"_Iridescence_Texture_\"];\r\n            const uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4,\r\n            });\r\n\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: { maxSimultaneousLights: 4 },\r\n                    },\r\n                    engine\r\n                ),\r\n                defines,\r\n                this._materialContext\r\n            );\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const defines = <MRDLSliderBarMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", this.getScene().getTransformMatrix());\r\n        this._activeEffect.setVector3(\"cameraPosition\", this.getScene().activeCamera!.position);\r\n\r\n        // \"Round Rect\"\r\n        this._activeEffect.setFloat(\"_Radius_\", this.radius);\r\n        this._activeEffect.setFloat(\"_Bevel_Front_\", this.bevelFront);\r\n        this._activeEffect.setFloat(\"_Bevel_Front_Stretch_\", this.bevelFrontStretch);\r\n        this._activeEffect.setFloat(\"_Bevel_Back_\", this.bevelBack);\r\n        this._activeEffect.setFloat(\"_Bevel_Back_Stretch_\", this.bevelBackStretch);\r\n\r\n        // \"Radii Multipliers\"\r\n        this._activeEffect.setFloat(\"_Radius_Top_Left_\", this.radiusTopLeft);\r\n        this._activeEffect.setFloat(\"_Radius_Top_Right_\", this.radiusTopRight);\r\n        this._activeEffect.setFloat(\"_Radius_Bottom_Left_\", this.radiusBottomLeft);\r\n        this._activeEffect.setFloat(\"_Radius_Bottom_Right_\", this.radiusBottomRight);\r\n\r\n        // \"Bulge\"\r\n        this._activeEffect.setFloat(\"_Bulge_Enabled_\", this.bulgeEnabled ? 1.0 : 0.0);\r\n        this._activeEffect.setFloat(\"_Bulge_Height_\", this.bulgeHeight);\r\n        this._activeEffect.setFloat(\"_Bulge_Radius_\", this.bulgeRadius);\r\n\r\n        // \"Sun\"\r\n        this._activeEffect.setFloat(\"_Sun_Intensity_\", this.sunIntensity);\r\n        this._activeEffect.setFloat(\"_Sun_Theta_\", this.sunTheta);\r\n        this._activeEffect.setFloat(\"_Sun_Phi_\", this.sunPhi);\r\n        this._activeEffect.setFloat(\"_Indirect_Diffuse_\", this.indirectDiffuse);\r\n\r\n        // \"Diffuse And Specular\"\r\n        this._activeEffect.setDirectColor4(\"_Albedo_\", this.albedo);\r\n        this._activeEffect.setFloat(\"_Specular_\", this.specular);\r\n        this._activeEffect.setFloat(\"_Shininess_\", this.shininess);\r\n        this._activeEffect.setFloat(\"_Sharpness_\", this.sharpness);\r\n        this._activeEffect.setFloat(\"_Subsurface_\", this.subsurface);\r\n\r\n        // \"Gradient\"\r\n        this._activeEffect.setDirectColor4(\"_Left_Color_\", this.leftGradientColor);\r\n        this._activeEffect.setDirectColor4(\"_Right_Color_\", this.rightGradientColor);\r\n\r\n        // \"Reflection\"\r\n        this._activeEffect.setFloat(\"_Reflection_\", this.reflection);\r\n        this._activeEffect.setFloat(\"_Front_Reflect_\", this.frontReflect);\r\n        this._activeEffect.setFloat(\"_Edge_Reflect_\", this.edgeReflect);\r\n        this._activeEffect.setFloat(\"_Power_\", this.power);\r\n\r\n        // \"Sky Environment\"\r\n        //define SKY_ENABLED true;\r\n        this._activeEffect.setDirectColor4(\"_Sky_Color_\", this.skyColor);\r\n        this._activeEffect.setDirectColor4(\"_Horizon_Color_\", this.horizonColor);\r\n        this._activeEffect.setDirectColor4(\"_Ground_Color_\", this.groundColor);\r\n        this._activeEffect.setFloat(\"_Horizon_Power_\", this.horizonPower);\r\n\r\n        // \"Mapped Environment\"\r\n        //define ENV_ENABLE false;\r\n        this._activeEffect.setTexture(\"_Reflection_Map_\", this._reflectionMapTexture);\r\n        this._activeEffect.setTexture(\"_Indirect_Environment_\", this._indirectEnvTexture);\r\n\r\n        // \"FingerOcclusion\"\r\n        //define OCCLUSION_ENABLED false;\r\n        this._activeEffect.setFloat(\"_Width_\", this.width);\r\n        this._activeEffect.setFloat(\"_Fuzz_\", this.fuzz);\r\n        this._activeEffect.setFloat(\"_Min_Fuzz_\", this.minFuzz);\r\n        this._activeEffect.setFloat(\"_Clip_Fade_\", this.clipFade);\r\n\r\n        // \"View Based Color Shift\"\r\n        this._activeEffect.setFloat(\"_Hue_Shift_\", this.hueShift);\r\n        this._activeEffect.setFloat(\"_Saturation_Shift_\", this.saturationShift);\r\n        this._activeEffect.setFloat(\"_Value_Shift_\", this.valueShift);\r\n\r\n        // \"Blob\"\r\n        //define BLOB_ENABLE false;\r\n        this._activeEffect.setVector3(\"_Blob_Position_\", this.blobPosition);\r\n        this._activeEffect.setFloat(\"_Blob_Intensity_\", this.blobIntensity);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Size_\", this.blobNearSize);\r\n        this._activeEffect.setFloat(\"_Blob_Far_Size_\", this.blobFarSize);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Distance_\", this.blobNearDistance);\r\n        this._activeEffect.setFloat(\"_Blob_Far_Distance_\", this.blobFarDistance);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_Length_\", this.blobFadeLength);\r\n        this._activeEffect.setFloat(\"_Blob_Pulse_\", this.blobPulse);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_\", this.blobFade);\r\n\r\n        // \"Blob Texture\"\r\n        this._activeEffect.setTexture(\"_Blob_Texture_\", this.blobTexture);\r\n\r\n        // \"Blob 2\"\r\n        //define BLOB_ENABLE_2 true;\r\n        this._activeEffect.setVector3(\"_Blob_Position_2_\", this.blobPosition2);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Size_2_\", this.blobNearSize2);\r\n        this._activeEffect.setFloat(\"_Blob_Pulse_2_\", this.blobPulse2);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_2_\", this.blobFade2);\r\n\r\n        // \"Finger Positions\"\r\n        this._activeEffect.setVector3(\"_Left_Index_Pos_\", this.leftIndexPosition);\r\n        this._activeEffect.setVector3(\"_Right_Index_Pos_\", this.rightIndexPosition);\r\n        this._activeEffect.setVector3(\"_Left_Index_Middle_Pos_\", this.leftIndexMiddlePosition);\r\n        this._activeEffect.setVector3(\"_Right_Index_Middle_Pos_\", this.rightIndexMiddlePosition);\r\n\r\n        // \"Decal Texture\"\r\n        //define DECAL_ENABLE false;\r\n        this._activeEffect.setTexture(\"_Decal_\", this._decalTexture);\r\n        this._activeEffect.setVector2(\"_Decal_Scale_XY_\", this.decalScaleXY);\r\n        this._activeEffect.setFloat(\"_Decal_Front_Only_\", this.decalFrontOnly ? 1.0 : 0.0);\r\n\r\n        // \"Rim Light\"\r\n        this._activeEffect.setFloat(\"_Rim_Intensity_\", this.rimIntensity);\r\n        this._activeEffect.setTexture(\"_Rim_Texture_\", this._blueGradientTexture);\r\n        this._activeEffect.setFloat(\"_Rim_Hue_Shift_\", this.rimHueShift);\r\n        this._activeEffect.setFloat(\"_Rim_Saturation_Shift_\", this.rimSaturationShift);\r\n        this._activeEffect.setFloat(\"_Rim_Value_Shift_\", this.rimValueShift);\r\n\r\n        // \"Iridescence\"\r\n        //define IRIDESCENCE_ENABLED true;\r\n        this._activeEffect.setFloat(\"_Iridescence_Intensity_\", this.iridescenceIntensity);\r\n        this._activeEffect.setTexture(\"_Iridescence_Texture_\", this._blueGradientTexture);\r\n\r\n        // Global inputs\r\n        this._activeEffect.setFloat(\"Use_Global_Left_Index\", this.useGlobalLeftIndex);\r\n        this._activeEffect.setFloat(\"Use_Global_Right_Index\", this.useGlobalRightIndex);\r\n\r\n        this._activeEffect.setVector4(\"Global_Left_Index_Tip_Position\", this.globalLeftIndexTipPosition);\r\n        this._activeEffect.setVector4(\"Global_Right_Index_Tip_Position\", this.globaRightIndexTipPosition);\r\n\r\n        this._activeEffect.setVector4(\"Global_Left_Thumb_Tip_Position\", this.globalLeftThumbTipPosition);\r\n        this._activeEffect.setVector4(\"Global_Right_Thumb_Tip_Position\", this.globalRightThumbTipPosition);\r\n\r\n        this._activeEffect.setVector4(\"Global_Left_Index_Middle_Position\", this.globalLeftIndexMiddlePosition);\r\n        this._activeEffect.setVector4(\"Global_Right_Index_Middle_Position\", this.globalRightIndexMiddlePosition);\r\n\r\n        this._activeEffect.setFloat(\"Global_Left_Index_Tip_Proximity\", this.globalLeftIndexTipProximity);\r\n        this._activeEffect.setFloat(\"Global_Right_Index_Tip_Proximity\", this.globalRightIndexTipProximity);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    /**\r\n     * Get the list of animatables in the material.\r\n     * @returns the list of animatables object used in the material\r\n     */\r\n    public getAnimatables(): IAnimatable[] {\r\n        return [];\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n        this._reflectionMapTexture.dispose();\r\n        this._indirectEnvTexture.dispose();\r\n        this._blueGradientTexture.dispose();\r\n        this._decalTexture.dispose();\r\n    }\r\n\r\n    public clone(name: string): MRDLSliderBarMaterial {\r\n        return SerializationHelper.Clone(() => new MRDLSliderBarMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n        serializationObject.customType = \"BABYLON.MRDLSliderBarMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"MRDLSliderBarMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): MRDLSliderBarMaterial {\r\n        return SerializationHelper.Parse(() => new MRDLSliderBarMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.MRDLSliderBarMaterial\", MRDLSliderBarMaterial);\r\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"mrdlSliderThumbPixelShader\";\nconst shader = `uniform vec3 cameraPosition;\rvarying vec3 vPosition;\rvarying vec3 vNormal;\rvarying vec2 vUV;\rvarying vec3 vTangent;\rvarying vec3 vBinormal;\rvarying vec4 vColor;\rvarying vec4 vExtra1;\rvarying vec4 vExtra2;\rvarying vec4 vExtra3;\runiform float _Radius_;\runiform float _Bevel_Front_;\runiform float _Bevel_Front_Stretch_;\runiform float _Bevel_Back_;\runiform float _Bevel_Back_Stretch_;\runiform float _Radius_Top_Left_;\runiform float _Radius_Top_Right_;\runiform float _Radius_Bottom_Left_;\runiform float _Radius_Bottom_Right_;\runiform bool _Bulge_Enabled_;\runiform float _Bulge_Height_;\runiform float _Bulge_Radius_;\runiform float _Sun_Intensity_;\runiform float _Sun_Theta_;\runiform float _Sun_Phi_;\runiform float _Indirect_Diffuse_;\runiform vec4 _Albedo_;\runiform float _Specular_;\runiform float _Shininess_;\runiform float _Sharpness_;\runiform float _Subsurface_;\runiform vec4 _Left_Color_;\runiform vec4 _Right_Color_;\runiform float _Reflection_;\runiform float _Front_Reflect_;\runiform float _Edge_Reflect_;\runiform float _Power_;\runiform vec4 _Sky_Color_;\runiform vec4 _Horizon_Color_;\runiform vec4 _Ground_Color_;\runiform float _Horizon_Power_;\runiform sampler2D _Reflection_Map_;\runiform sampler2D _Indirect_Environment_;\runiform float _Width_;\runiform float _Fuzz_;\runiform float _Min_Fuzz_;\runiform float _Clip_Fade_;\runiform float _Hue_Shift_;\runiform float _Saturation_Shift_;\runiform float _Value_Shift_;\runiform vec3 _Blob_Position_;\runiform float _Blob_Intensity_;\runiform float _Blob_Near_Size_;\runiform float _Blob_Far_Size_;\runiform float _Blob_Near_Distance_;\runiform float _Blob_Far_Distance_;\runiform float _Blob_Fade_Length_;\runiform float _Blob_Pulse_;\runiform float _Blob_Fade_;\runiform sampler2D _Blob_Texture_;\runiform vec3 _Blob_Position_2_;\runiform float _Blob_Near_Size_2_;\runiform float _Blob_Pulse_2_;\runiform float _Blob_Fade_2_;\runiform vec3 _Left_Index_Pos_;\runiform vec3 _Right_Index_Pos_;\runiform vec3 _Left_Index_Middle_Pos_;\runiform vec3 _Right_Index_Middle_Pos_;\runiform sampler2D _Decal_;\runiform vec2 _Decal_Scale_XY_;\runiform bool _Decal_Front_Only_;\runiform float _Rim_Intensity_;\runiform sampler2D _Rim_Texture_;\runiform float _Rim_Hue_Shift_;\runiform float _Rim_Saturation_Shift_;\runiform float _Rim_Value_Shift_;\runiform float _Iridescence_Intensity_;\runiform sampler2D _Iridescence_Texture_;\runiform bool Use_Global_Left_Index;\runiform bool Use_Global_Right_Index;\runiform vec4 Global_Left_Index_Tip_Position;\runiform vec4 Global_Right_Index_Tip_Position;\runiform vec4 Global_Left_Thumb_Tip_Position;\runiform vec4 Global_Right_Thumb_Tip_Position;\runiform vec4 Global_Left_Index_Middle_Position;\runiform vec4 Global_Right_Index_Middle_Position;\runiform float Global_Left_Index_Tip_Proximity;\runiform float Global_Right_Index_Tip_Proximity;\rvoid Blob_Fragment_B180(\rsampler2D Blob_Texture,\rvec4 Blob_Info1,\rvec4 Blob_Info2,\rout vec4 Blob_Color)\r{\rfloat k1=dot(Blob_Info1.xy,Blob_Info1.xy);\rfloat k2=dot(Blob_Info2.xy,Blob_Info2.xy);\rvec3 closer=k1<k2 ? vec3(k1,Blob_Info1.z,Blob_Info1.w) : vec3(k2,Blob_Info2.z,Blob_Info2.w);\rBlob_Color=closer.z*texture(Blob_Texture,vec2(vec2(sqrt(closer.x),closer.y).x,1.0-vec2(sqrt(closer.x),closer.y).y))*clamp(1.0-closer.x,0.0,1.0);\r}\rvoid FastLinearTosRGB_B192(\rvec4 Linear,\rout vec4 sRGB)\r{\rsRGB.rgb=sqrt(clamp(Linear.rgb,0.0,1.0));\rsRGB.a=Linear.a;\r}\rvoid Scale_RGB_B209(\rvec4 Color,\rfloat Scalar,\rout vec4 Result)\r{\rResult=vec4(Scalar,Scalar,Scalar,1)*Color;\r}\rvoid Fragment_Main_B271(\rfloat Sun_Intensity,\rfloat Sun_Theta,\rfloat Sun_Phi,\rvec3 Normal,\rvec4 Albedo,\rfloat Fresnel_Reflect,\rfloat Shininess,\rvec3 Incident,\rvec4 Horizon_Color,\rvec4 Sky_Color,\rvec4 Ground_Color,\rfloat Indirect_Diffuse,\rfloat Specular,\rfloat Horizon_Power,\rfloat Reflection,\rvec4 Reflection_Sample,\rvec4 Indirect_Sample,\rfloat Sharpness,\rfloat SSS,\rfloat Subsurface,\rvec4 Translucence,\rvec4 Rim_Light,\rvec4 Iridescence,\rout vec4 Result)\r{\rfloat theta=Sun_Theta*2.0*3.14159;\rfloat phi=Sun_Phi*3.14159;\rvec3 lightDir= vec3(cos(phi)*cos(theta),sin(phi),cos(phi)*sin(theta));\rfloat NdotL=max(dot(lightDir,Normal),0.0);\rvec3 R=reflect(Incident,Normal);\rfloat RdotL=max(0.0,dot(R,lightDir));\rfloat specular=pow(RdotL,Shininess);\rspecular=mix(specular,smoothstep(0.495*Sharpness,1.0-0.495*Sharpness,specular),Sharpness);\rvec4 gi=mix(Ground_Color,Sky_Color,Normal.y*0.5+0.5);\rResult=((Sun_Intensity*NdotL+Indirect_Sample*Indirect_Diffuse+Translucence)*(1.0+SSS*Subsurface))*Albedo*(1.0-Fresnel_Reflect)+(Sun_Intensity*specular*Specular+Fresnel_Reflect*Reflection*Reflection_Sample)+Fresnel_Reflect*Rim_Light+Iridescence;\r}\rvoid Bulge_B229(\rbool Enabled,\rvec3 Normal,\rvec3 Tangent,\rfloat Bulge_Height,\rvec4 UV,\rfloat Bulge_Radius,\rvec3 ButtonN,\rout vec3 New_Normal)\r{\rvec2 xy=clamp(UV.xy*2.0,vec2(-1,-1),vec2(1,1));\rvec3 B=(cross(Normal,Tangent));\rfloat k=-clamp(1.0-length(xy)/Bulge_Radius,0.0,1.0)*Bulge_Height;\rk=sin(k*3.14159*0.5);\rk*=smoothstep(0.9998,0.9999,abs(dot(ButtonN,Normal)));\rNew_Normal=Normal*sqrt(1.0-k*k)+(xy.x*Tangent+xy.y*B)*k;\rNew_Normal=Enabled ? New_Normal : Normal;\r}\rvoid SSS_B227(\rvec3 ButtonN,\rvec3 Normal,\rvec3 Incident,\rout float Result)\r{\rfloat NdotI=abs(dot(Normal,Incident));\rfloat BdotI=abs(dot(ButtonN,Incident));\rResult=(abs(NdotI-BdotI)); \r}\rvoid FingerOcclusion_B217(\rfloat Width,\rfloat DistToCenter,\rfloat Fuzz,\rfloat Min_Fuzz,\rvec3 Position,\rvec3 Forward,\rvec3 Nearest,\rfloat Fade_Out,\rout float NotInShadow)\r{\rfloat d=dot((Nearest-Position),Forward);\rfloat sh=smoothstep(Width*0.5,Width*0.5+Fuzz*max(d,0.0)+Min_Fuzz,DistToCenter);\rNotInShadow=1.0-(1.0-sh)*smoothstep(-Fade_Out,0.0,d);\r}\rvoid FingerOcclusion_B218(\rfloat Width,\rfloat DistToCenter,\rfloat Fuzz,\rfloat Min_Fuzz,\rvec3 Position,\rvec3 Forward,\rvec3 Nearest,\rfloat Fade_Out,\rout float NotInShadow)\r{\rfloat d=dot((Nearest-Position),Forward);\rfloat sh=smoothstep(Width*0.5,Width*0.5+Fuzz*max(d,0.0)+Min_Fuzz,DistToCenter);\rNotInShadow=1.0-(1.0-sh)*smoothstep(-Fade_Out,0.0,d);\r}\rvoid Scale_Color_B241(\rvec4 Color,\rfloat Scalar,\rout vec4 Result)\r{\rResult=Scalar*Color;\r}\rvoid From_HSV_B223(\rfloat Hue,\rfloat Saturation,\rfloat Value,\rfloat Alpha,\rout vec4 Color)\r{\rvec4 K=vec4(1.0,2.0/3.0,1.0/3.0,3.0);\rvec3 p=abs(fract(vec3(Hue,Hue,Hue)+K.xyz)*6.0-K.www);\rColor.rgb=Value*mix(K.xxx,clamp(p-K.xxx,0.0,1.0),Saturation);\rColor.a=Alpha;\r}\rvoid Fast_Fresnel_B272(\rfloat Front_Reflect,\rfloat Edge_Reflect,\rfloat Power,\rvec3 Normal,\rvec3 Incident,\rout float Transmit,\rout float Reflect)\r{\rfloat d=max(-dot(Incident,Normal),0.0);\rReflect=Front_Reflect+(Edge_Reflect-Front_Reflect)*pow(1.0-d,Power);\rTransmit=1.0-Reflect;\r}\rvoid Mapped_Environment_B201(\rsampler2D Reflected_Environment,\rsampler2D Indirect_Environment,\rvec3 Dir,\rout vec4 Reflected_Color,\rout vec4 Indirect_Diffuse)\r{\rReflected_Color=texture(Reflected_Environment,vec2(atan(Dir.z,Dir.x)/3.14159*0.5,asin(Dir.y)/3.14159+0.5));\rIndirect_Diffuse=texture(Indirect_Environment,vec2(atan(Dir.z,Dir.x)/3.14159*0.5,asin(Dir.y)/3.14159+0.5));\r}\rvec4 SampleEnv_Bid200(vec3 D,vec4 S,vec4 H,vec4 G,float exponent)\r{\rfloat k=pow(abs(D.y),exponent);\rvec4 C;\rif (D.y>0.0) {\rC=mix(H,S,k);\r} else {\rC=mix(H,G,k); \r}\rreturn C;\r}\rvoid Sky_Environment_B200(\rvec3 Normal,\rvec3 Reflected,\rvec4 Sky_Color,\rvec4 Horizon_Color,\rvec4 Ground_Color,\rfloat Horizon_Power,\rout vec4 Reflected_Color,\rout vec4 Indirect_Color)\r{\rReflected_Color=SampleEnv_Bid200(Reflected,Sky_Color,Horizon_Color,Ground_Color,Horizon_Power);\rIndirect_Color=mix(Ground_Color,Sky_Color,Normal.y*0.5+0.5);\r}\rvoid Min_Segment_Distance_B215(\rvec3 P0,\rvec3 P1,\rvec3 Q0,\rvec3 Q1,\rout vec3 NearP,\rout vec3 NearQ,\rout float Distance)\r{\rvec3 u=P1-P0;\rvec3 v=Q1-Q0;\rvec3 w=P0-Q0;\rfloat a=dot(u,u);\rfloat b=dot(u,v);\rfloat c=dot(v,v);\rfloat d=dot(u,w);\rfloat e=dot(v,w);\rfloat D=a*c-b*b;\rfloat sD=D;\rfloat tD=D;\rfloat sc,sN,tc,tN;\rif (D<0.00001) {\rsN=0.0;\rsD=1.0;\rtN=e;\rtD=c;\r} else {\rsN=(b*e-c*d);\rtN=(a*e-b*d);\rif (sN<0.0) {\rsN=0.0;\rtN=e;\rtD=c;\r} else if (sN>sD) {\rsN=sD;\rtN=e+b;\rtD=c;\r}\r}\rif (tN<0.0) {\rtN=0.0;\rif (-d<0.0) {\rsN=0.0;\r} else if (-d>a) {\rsN=sD;\r} else {\rsN=-d;\rsD=a;\r}\r} else if (tN>tD) {\rtN=tD;\rif ((-d+b)<0.0) {\rsN=0.0;\r} else if ((-d+b)>a) {\rsN=sD;\r} else {\rsN=(-d+b);\rsD=a;\r}\r}\rsc=abs(sN)<0.000001 ? 0.0 : sN/sD;\rtc=abs(tN)<0.000001 ? 0.0 : tN/tD;\rNearP=P0+sc*u;\rNearQ=Q0+tc*v;\rDistance=distance(NearP,NearQ);\r}\rvoid To_XYZ_B224(\rvec3 Vec3,\rout float X,\rout float Y,\rout float Z)\r{\rX=Vec3.x;\rY=Vec3.y;\rZ=Vec3.z;\r}\rvoid Finger_Positions_B214(\rvec3 Left_Index_Pos,\rvec3 Right_Index_Pos,\rvec3 Left_Index_Middle_Pos,\rvec3 Right_Index_Middle_Pos,\rout vec3 Left_Index,\rout vec3 Right_Index,\rout vec3 Left_Index_Middle,\rout vec3 Right_Index_Middle)\r{\rLeft_Index= (Use_Global_Left_Index ? Global_Left_Index_Tip_Position.xyz : Left_Index_Pos);\rRight_Index= (Use_Global_Right_Index ? Global_Right_Index_Tip_Position.xyz : Right_Index_Pos);\rLeft_Index_Middle= (Use_Global_Left_Index ? Global_Left_Index_Middle_Position.xyz : Left_Index_Middle_Pos);\rRight_Index_Middle= (Use_Global_Right_Index ? Global_Right_Index_Middle_Position.xyz : Right_Index_Middle_Pos);\r}\rvoid VaryHSV_B258(\rvec3 HSV_In,\rfloat Hue_Shift,\rfloat Saturation_Shift,\rfloat Value_Shift,\rout vec3 HSV_Out)\r{\rHSV_Out=vec3(fract(HSV_In.x+Hue_Shift),clamp(HSV_In.y+Saturation_Shift,0.0,1.0),clamp(HSV_In.z+Value_Shift,0.0,1.0));\r}\rvoid Remap_Range_B264(\rfloat In_Min,\rfloat In_Max,\rfloat Out_Min,\rfloat Out_Max,\rfloat In,\rout float Out)\r{\rOut=mix(Out_Min,Out_Max,clamp((In-In_Min)/(In_Max-In_Min),0.0,1.0));\r}\rvoid To_HSV_B225(\rvec4 Color,\rout float Hue,\rout float Saturation,\rout float Value,\rout float Alpha,\rout vec3 HSV)\r{\rvec4 K=vec4(0.0,-1.0/3.0,2.0/3.0,-1.0);\rvec4 p=Color.g<Color.b ? vec4(Color.bg,K.wz) : vec4(Color.gb,K.xy);\rvec4 q=Color.r<p.x ? vec4(p.xyw,Color.r) : vec4(Color.r,p.yzx);\rfloat d=q.x-min(q.w,q.y);\rfloat e=1.0e-10;\rHue=abs(q.z+(q.w-q.y)/(6.0*d+e));\rSaturation=d/(q.x+e);\rValue=q.x;\rAlpha=Color.a;\rHSV=vec3(Hue,Saturation,Value);\r}\rvoid Code_B260(\rfloat X,\rout float Result)\r{\rResult=(acos(X)/3.14159-0.5)*2.0;\r}\rvoid Rim_Light_B282(\rvec3 Front,\rvec3 Normal,\rvec3 Incident,\rfloat Rim_Intensity,\rsampler2D Texture,\rout vec4 Result)\r{\rvec3 R=reflect(Incident,Normal);\rfloat RdotF=dot(R,Front);\rfloat RdotL=sqrt(1.0-RdotF*RdotF);\rvec2 UV=vec2(R.y*0.5+0.5,0.5);\rvec4 Color=texture(Texture,UV);\rResult=Color;\r}\rvoid main()\r{\rvec4 Blob_Color_Q180;\r#if BLOB_ENABLE\nBlob_Fragment_B180(_Blob_Texture_,vExtra2,vExtra3,Blob_Color_Q180);\r#else\nBlob_Color_Q180=vec4(0,0,0,0);\r#endif\nvec3 Incident_Q189=normalize(vPosition-cameraPosition);\rvec3 Normalized_Q188=normalize(vNormal);\rvec3 Normalized_Q221=normalize(vTangent);\rvec4 Color_Q233;\r#if DECAL_ENABLE\nColor_Q233=texture(_Decal_,vUV);\r#else\nColor_Q233=vec4(0,0,0,0);\r#endif\nfloat X_Q240;\rfloat Y_Q240;\rfloat Z_Q240;\rfloat W_Q240;\rX_Q240=vExtra1.x;\rY_Q240=vExtra1.y;\rZ_Q240=vExtra1.z;\rW_Q240=vExtra1.w;\rvec4 Linear_Q193;\rLinear_Q193.rgb=clamp(_Sky_Color_.rgb*_Sky_Color_.rgb,0.0,1.0);\rLinear_Q193.a=_Sky_Color_.a;\rvec4 Linear_Q194;\rLinear_Q194.rgb=clamp(_Horizon_Color_.rgb*_Horizon_Color_.rgb,0.0,1.0);\rLinear_Q194.a=_Horizon_Color_.a;\rvec4 Linear_Q195;\rLinear_Q195.rgb=clamp(_Ground_Color_.rgb*_Ground_Color_.rgb,0.0,1.0);\rLinear_Q195.a=_Ground_Color_.a;\rvec3 Left_Index_Q214;\rvec3 Right_Index_Q214;\rvec3 Left_Index_Middle_Q214;\rvec3 Right_Index_Middle_Q214;\rFinger_Positions_B214(_Left_Index_Pos_,_Right_Index_Pos_,_Left_Index_Middle_Pos_,_Right_Index_Middle_Pos_,Left_Index_Q214,Right_Index_Q214,Left_Index_Middle_Q214,Right_Index_Middle_Q214);\rvec4 Linear_Q196;\rLinear_Q196.rgb=clamp(_Albedo_.rgb*_Albedo_.rgb,0.0,1.0);\rLinear_Q196.a=_Albedo_.a;\rvec3 Normalized_Q257=normalize(vBinormal);\rvec3 Incident_Q220=normalize(vPosition-cameraPosition);\rvec3 New_Normal_Q229;\rBulge_B229(_Bulge_Enabled_,Normalized_Q188,Normalized_Q221,_Bulge_Height_,vColor,_Bulge_Radius_,vBinormal,New_Normal_Q229);\rfloat Result_Q227;\rSSS_B227(vBinormal,New_Normal_Q229,Incident_Q189,Result_Q227);\rvec4 Result_Q241;\rScale_Color_B241(Color_Q233,X_Q240,Result_Q241);\rfloat Transmit_Q272;\rfloat Reflect_Q272;\rFast_Fresnel_B272(_Front_Reflect_,_Edge_Reflect_,_Power_,New_Normal_Q229,Incident_Q189,Transmit_Q272,Reflect_Q272);\rfloat Product_Q275=Y_Q240*Y_Q240;\rvec3 NearP_Q215;\rvec3 NearQ_Q215;\rfloat Distance_Q215;\rMin_Segment_Distance_B215(Left_Index_Q214,Left_Index_Middle_Q214,vPosition,cameraPosition,NearP_Q215,NearQ_Q215,Distance_Q215);\rvec3 NearP_Q213;\rvec3 NearQ_Q213;\rfloat Distance_Q213;\rMin_Segment_Distance_B215(Right_Index_Q214,Right_Index_Middle_Q214,vPosition,cameraPosition,NearP_Q213,NearQ_Q213,Distance_Q213);\rvec3 Reflected_Q197=reflect(Incident_Q189,New_Normal_Q229);\rvec4 Product_Q253=Linear_Q196*vec4(1,1,1,1);\rvec4 Result_Q282;\rRim_Light_B282(Normalized_Q257,Normalized_Q188,Incident_Q220,_Rim_Intensity_,_Rim_Texture_,Result_Q282);\rfloat Dot_Q222=dot(Incident_Q220, Normalized_Q221);\rfloat MaxAB_Q273=max(Reflect_Q272,Product_Q275);\rfloat NotInShadow_Q217;\r#if OCCLUSION_ENABLED\nFingerOcclusion_B217(_Width_,Distance_Q215,_Fuzz_,_Min_Fuzz_,vPosition,vBinormal,NearP_Q215,_Clip_Fade_,NotInShadow_Q217);\r#else\nNotInShadow_Q217=1.0;\r#endif\nfloat NotInShadow_Q218;\r#if OCCLUSION_ENABLED\nFingerOcclusion_B218(_Width_,Distance_Q213,_Fuzz_,_Min_Fuzz_,vPosition,vBinormal,NearP_Q213,_Clip_Fade_,NotInShadow_Q218);\r#else\nNotInShadow_Q218=1.0;\r#endif\nvec4 Reflected_Color_Q201;\rvec4 Indirect_Diffuse_Q201;\r#if ENV_ENABLE\nMapped_Environment_B201(_Reflection_Map_,_Indirect_Environment_,Reflected_Q197,Reflected_Color_Q201,Indirect_Diffuse_Q201);\r#else\nReflected_Color_Q201=vec4(0,0,0,1);\rIndirect_Diffuse_Q201=vec4(0,0,0,1);\r#endif\nvec4 Reflected_Color_Q200;\rvec4 Indirect_Color_Q200;\r#if SKY_ENABLED\nSky_Environment_B200(New_Normal_Q229,Reflected_Q197,Linear_Q193,Linear_Q194,Linear_Q195,_Horizon_Power_,Reflected_Color_Q200,Indirect_Color_Q200);\r#else\nReflected_Color_Q200=vec4(0,0,0,1);\rIndirect_Color_Q200=vec4(0,0,0,1);\r#endif\nfloat Hue_Q225;\rfloat Saturation_Q225;\rfloat Value_Q225;\rfloat Alpha_Q225;\rvec3 HSV_Q225;\rTo_HSV_B225(Product_Q253,Hue_Q225,Saturation_Q225,Value_Q225,Alpha_Q225,HSV_Q225);\rfloat Hue_Q277;\rfloat Saturation_Q277;\rfloat Value_Q277;\rfloat Alpha_Q277;\rvec3 HSV_Q277;\rTo_HSV_B225(Result_Q282,Hue_Q277,Saturation_Q277,Value_Q277,Alpha_Q277,HSV_Q277);\rfloat Result_Q260;\rCode_B260(Dot_Q222,Result_Q260);\rfloat AbsA_Q226=abs(Result_Q260);\rfloat MinAB_Q208=min(NotInShadow_Q217,NotInShadow_Q218);\rvec4 Sum_Q198=Reflected_Color_Q201+Reflected_Color_Q200;\rvec4 Sum_Q199=Indirect_Diffuse_Q201+Indirect_Color_Q200;\rvec3 HSV_Out_Q276;\rVaryHSV_B258(HSV_Q277,_Rim_Hue_Shift_,_Rim_Saturation_Shift_,_Rim_Value_Shift_,HSV_Out_Q276);\rfloat Out_Q264;\rRemap_Range_B264(-1.0,1.0,0.0,1.0,Result_Q260,Out_Q264);\rfloat Product_Q256;\rProduct_Q256=AbsA_Q226*_Hue_Shift_;\rfloat X_Q278;\rfloat Y_Q278;\rfloat Z_Q278;\rTo_XYZ_B224(HSV_Out_Q276,X_Q278,Y_Q278,Z_Q278);\rvec2 Vec2_Q262=vec2(Out_Q264,0.5);\rvec3 HSV_Out_Q258;\rVaryHSV_B258(HSV_Q225,Product_Q256,_Saturation_Shift_,_Value_Shift_,HSV_Out_Q258);\rvec4 Color_Q279;\rFrom_HSV_B223(X_Q278,Y_Q278,Z_Q278,0.0,Color_Q279);\rvec4 Color_Q261;\r#if IRIDESCENCE_ENABLED\nColor_Q261=texture(_Iridescence_Texture_,Vec2_Q262);\r#else\nColor_Q261=vec4(0,0,0,0);\r#endif\nfloat X_Q224;\rfloat Y_Q224;\rfloat Z_Q224;\rTo_XYZ_B224(HSV_Out_Q258,X_Q224,Y_Q224,Z_Q224);\rvec4 Result_Q281=_Rim_Intensity_*Color_Q279;\rvec4 Result_Q263=_Iridescence_Intensity_*Color_Q261;\rvec4 Color_Q223;\rFrom_HSV_B223(X_Q224,Y_Q224,Z_Q224,0.0,Color_Q223);\rvec4 Result_Q234=Result_Q241+(1.0-Result_Q241.a)*Color_Q223;\rvec4 Result_Q271;\rFragment_Main_B271(_Sun_Intensity_,_Sun_Theta_,_Sun_Phi_,New_Normal_Q229,Result_Q234,MaxAB_Q273,_Shininess_,Incident_Q189,_Horizon_Color_,_Sky_Color_,_Ground_Color_,_Indirect_Diffuse_,_Specular_,_Horizon_Power_,_Reflection_,Sum_Q198,Sum_Q199,_Sharpness_,Result_Q227,_Subsurface_,vec4(0,0,0,0),Result_Q281,Result_Q263,Result_Q271);\rvec4 Result_Q209;\rScale_RGB_B209(Result_Q271,MinAB_Q208,Result_Q209);\rvec4 sRGB_Q192;\rFastLinearTosRGB_B192(Result_Q209,sRGB_Q192);\rvec4 Result_Q181=Blob_Color_Q180+(1.0-Blob_Color_Q180.a)*sRGB_Q192;\rvec4 Result_Q190=Result_Q181; Result_Q190.a=1.0;\rvec4 Out_Color=Result_Q190;\rfloat Clip_Threshold=0.001;\rbool To_sRGB=false;\rgl_FragColor=Out_Color;\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const mrdlSliderThumbPixelShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"mrdlSliderThumbVertexShader\";\nconst shader = `uniform mat4 world;\runiform mat4 viewProjection;\runiform vec3 cameraPosition;\rattribute vec3 position;\rattribute vec3 normal;\rattribute vec2 uv;\r#ifdef TANGENT\nattribute vec3 tangent;\r#else\nconst vec3 tangent=vec3(0.);\r#endif\nuniform float _Radius_;\runiform float _Bevel_Front_;\runiform float _Bevel_Front_Stretch_;\runiform float _Bevel_Back_;\runiform float _Bevel_Back_Stretch_;\runiform float _Radius_Top_Left_;\runiform float _Radius_Top_Right_;\runiform float _Radius_Bottom_Left_;\runiform float _Radius_Bottom_Right_;\runiform bool _Bulge_Enabled_;\runiform float _Bulge_Height_;\runiform float _Bulge_Radius_;\runiform float _Sun_Intensity_;\runiform float _Sun_Theta_;\runiform float _Sun_Phi_;\runiform float _Indirect_Diffuse_;\runiform vec4 _Albedo_;\runiform float _Specular_;\runiform float _Shininess_;\runiform float _Sharpness_;\runiform float _Subsurface_;\runiform vec4 _Left_Color_;\runiform vec4 _Right_Color_;\runiform float _Reflection_;\runiform float _Front_Reflect_;\runiform float _Edge_Reflect_;\runiform float _Power_;\runiform vec4 _Sky_Color_;\runiform vec4 _Horizon_Color_;\runiform vec4 _Ground_Color_;\runiform float _Horizon_Power_;\runiform sampler2D _Reflection_Map_;\runiform sampler2D _Indirect_Environment_;\runiform float _Width_;\runiform float _Fuzz_;\runiform float _Min_Fuzz_;\runiform float _Clip_Fade_;\runiform float _Hue_Shift_;\runiform float _Saturation_Shift_;\runiform float _Value_Shift_;\runiform vec3 _Blob_Position_;\runiform float _Blob_Intensity_;\runiform float _Blob_Near_Size_;\runiform float _Blob_Far_Size_;\runiform float _Blob_Near_Distance_;\runiform float _Blob_Far_Distance_;\runiform float _Blob_Fade_Length_;\runiform float _Blob_Pulse_;\runiform float _Blob_Fade_;\runiform sampler2D _Blob_Texture_;\runiform vec3 _Blob_Position_2_;\runiform float _Blob_Near_Size_2_;\runiform float _Blob_Pulse_2_;\runiform float _Blob_Fade_2_;\runiform vec3 _Left_Index_Pos_;\runiform vec3 _Right_Index_Pos_;\runiform vec3 _Left_Index_Middle_Pos_;\runiform vec3 _Right_Index_Middle_Pos_;\runiform sampler2D _Decal_;\runiform vec2 _Decal_Scale_XY_;\runiform bool _Decal_Front_Only_;\runiform float _Rim_Intensity_;\runiform sampler2D _Rim_Texture_;\runiform float _Rim_Hue_Shift_;\runiform float _Rim_Saturation_Shift_;\runiform float _Rim_Value_Shift_;\runiform float _Iridescence_Intensity_;\runiform sampler2D _Iridescence_Texture_;\runiform bool Use_Global_Left_Index;\runiform bool Use_Global_Right_Index;\runiform vec4 Global_Left_Index_Tip_Position;\runiform vec4 Global_Right_Index_Tip_Position;\runiform vec4 Global_Left_Thumb_Tip_Position;\runiform vec4 Global_Right_Thumb_Tip_Position;\runiform float Global_Left_Index_Tip_Proximity;\runiform float Global_Right_Index_Tip_Proximity;\rvarying vec3 vPosition;\rvarying vec3 vNormal;\rvarying vec2 vUV;\rvarying vec3 vTangent;\rvarying vec3 vBinormal;\rvarying vec4 vColor;\rvarying vec4 vExtra1;\rvarying vec4 vExtra2;\rvarying vec4 vExtra3;\rvoid Object_To_World_Pos_B162(\rvec3 Pos_Object,\rout vec3 Pos_World)\r{\rPos_World=(world*vec4(Pos_Object,1.0)).xyz;\r}\rvoid Object_To_World_Normal_B182(\rvec3 Nrm_Object,\rout vec3 Nrm_World)\r{\rNrm_World=(vec4(Nrm_Object,0.0)).xyz;\r}\rvoid Blob_Vertex_B173(\rvec3 Position,\rvec3 Normal,\rvec3 Tangent,\rvec3 Bitangent,\rvec3 Blob_Position,\rfloat Intensity,\rfloat Blob_Near_Size,\rfloat Blob_Far_Size,\rfloat Blob_Near_Distance,\rfloat Blob_Far_Distance,\rfloat Blob_Fade_Length,\rfloat Blob_Pulse,\rfloat Blob_Fade,\rout vec4 Blob_Info)\r{\rvec3 blob= (Use_Global_Left_Index ? Global_Left_Index_Tip_Position.xyz : Blob_Position);\rvec3 delta=blob-Position;\rfloat dist=dot(Normal,delta);\rfloat lerpValue=clamp((abs(dist)-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance),0.0,1.0);\rfloat fadeValue=1.0-clamp((abs(dist)-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);\rfloat size=Blob_Near_Size+(Blob_Far_Size-Blob_Near_Size)*lerpValue;\rvec2 blobXY=vec2(dot(delta,Tangent),dot(delta,Bitangent))/(0.0001+size);\rfloat Fade=fadeValue*Intensity*Blob_Fade;\rfloat Distance=(lerpValue*0.5+0.5)*(1.0-Blob_Pulse);\rBlob_Info=vec4(blobXY.x,blobXY.y,Distance,Fade);\r}\rvoid Blob_Vertex_B174(\rvec3 Position,\rvec3 Normal,\rvec3 Tangent,\rvec3 Bitangent,\rvec3 Blob_Position,\rfloat Intensity,\rfloat Blob_Near_Size,\rfloat Blob_Far_Size,\rfloat Blob_Near_Distance,\rfloat Blob_Far_Distance,\rfloat Blob_Fade_Length,\rfloat Blob_Pulse,\rfloat Blob_Fade,\rout vec4 Blob_Info)\r{\rvec3 blob= (Use_Global_Right_Index ? Global_Right_Index_Tip_Position.xyz : Blob_Position);\rvec3 delta=blob-Position;\rfloat dist=dot(Normal,delta);\rfloat lerpValue=clamp((abs(dist)-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance),0.0,1.0);\rfloat fadeValue=1.0-clamp((abs(dist)-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);\rfloat size=Blob_Near_Size+(Blob_Far_Size-Blob_Near_Size)*lerpValue;\rvec2 blobXY=vec2(dot(delta,Tangent),dot(delta,Bitangent))/(0.0001+size);\rfloat Fade=fadeValue*Intensity*Blob_Fade;\rfloat Distance=(lerpValue*0.5+0.5)*(1.0-Blob_Pulse);\rBlob_Info=vec4(blobXY.x,blobXY.y,Distance,Fade);\r}\rvoid Move_Verts_B280(\rfloat Anisotropy,\rvec3 P,\rfloat Radius,\rfloat Bevel,\rvec3 Normal_Object,\rfloat ScaleZ,\rfloat Stretch,\rout vec3 New_P,\rout vec2 New_UV,\rout float Radial_Gradient,\rout vec3 Radial_Dir,\rout vec3 New_Normal)\r{\rvec2 UV=P.xy*2.0+0.5;\rvec2 center=clamp(UV,0.0,1.0);\rvec2 delta=UV-center;\rfloat deltad=(length(delta)*2.0);\rfloat f=(Bevel+(Radius-Bevel)*Stretch)/Radius;\rfloat innerd=clamp(deltad*2.0,0.0,1.0);\rfloat outerd=clamp(deltad*2.0-1.0,0.0,1.0);\rfloat bevelAngle=outerd*3.14159*0.5;\rfloat sinb=sin(bevelAngle);\rfloat cosb=cos(bevelAngle);\rfloat beveld=(1.0-f)*innerd+f*sinb;\rfloat br=outerd;\rvec2 r2=2.0*vec2(Radius/Anisotropy,Radius);\rfloat dir=P.z<0.0001 ? 1.0 : -1.0;\rNew_UV=center+r2*((0.5-center)+normalize(delta+vec2(0.0,0.000001))*beveld*0.5);\rNew_P=vec3(New_UV-0.5,P.z+dir*(1.0-cosb)*Bevel*ScaleZ);\rRadial_Gradient=clamp((deltad-0.5)*2.0,0.0,1.0);\rRadial_Dir=vec3(delta*r2,0.0);\rvec3 beveledNormal=cosb*Normal_Object+sinb*vec3(delta.x,delta.y,0.0);\rNew_Normal=Normal_Object.z==0.0 ? Normal_Object : beveledNormal;\r}\rvoid Object_To_World_Dir_B210(\rvec3 Dir_Object,\rout vec3 Normal_World,\rout vec3 Normal_World_N,\rout float Normal_Length)\r{\rNormal_World=(world*vec4(Dir_Object,0.0)).xyz;\rNormal_Length=length(Normal_World);\rNormal_World_N=Normal_World/Normal_Length;\r}\rvoid To_XYZ_B228(\rvec3 Vec3,\rout float X,\rout float Y,\rout float Z)\r{\rX=Vec3.x;\rY=Vec3.y;\rZ=Vec3.z;\r}\rvoid Conditional_Float_B243(\rbool Which,\rfloat If_True,\rfloat If_False,\rout float Result)\r{\rResult=Which ? If_True : If_False;\r}\rvoid Object_To_World_Dir_B178(\rvec3 Dir_Object,\rout vec3 Binormal_World,\rout vec3 Binormal_World_N,\rout float Binormal_Length)\r{\rBinormal_World=(world*vec4(Dir_Object,0.0)).xyz;\rBinormal_Length=length(Binormal_World);\rBinormal_World_N=Binormal_World/Binormal_Length;\r}\rvoid Pick_Radius_B219(\rfloat Radius,\rfloat Radius_Top_Left,\rfloat Radius_Top_Right,\rfloat Radius_Bottom_Left,\rfloat Radius_Bottom_Right,\rvec3 Position,\rout float Result)\r{\rbool whichY=Position.y>0.0;\rResult=Position.x<0.0 ? (whichY ? Radius_Top_Left : Radius_Bottom_Left) : (whichY ? Radius_Top_Right : Radius_Bottom_Right);\rResult*=Radius;\r}\rvoid Conditional_Float_B186(\rbool Which,\rfloat If_True,\rfloat If_False,\rout float Result)\r{\rResult=Which ? If_True : If_False;\r}\rvoid Greater_Than_B187(\rfloat Left,\rfloat Right,\rout bool Not_Greater_Than,\rout bool Greater_Than)\r{\rGreater_Than=Left>Right;\rNot_Greater_Than=!Greater_Than;\r}\rvoid Remap_Range_B255(\rfloat In_Min,\rfloat In_Max,\rfloat Out_Min,\rfloat Out_Max,\rfloat In,\rout float Out)\r{\rOut=mix(Out_Min,Out_Max,clamp((In-In_Min)/(In_Max-In_Min),0.0,1.0));\r}\rvoid main()\r{\rvec2 XY_Q235;\rXY_Q235=(uv-vec2(0.5,0.5))*_Decal_Scale_XY_+vec2(0.5,0.5);\rvec3 Tangent_World_Q177;\rvec3 Tangent_World_N_Q177;\rfloat Tangent_Length_Q177;\rTangent_World_Q177=(world*vec4(vec3(1,0,0),0.0)).xyz;\rTangent_Length_Q177=length(Tangent_World_Q177);\rTangent_World_N_Q177=Tangent_World_Q177/Tangent_Length_Q177;\rvec3 Normal_World_Q210;\rvec3 Normal_World_N_Q210;\rfloat Normal_Length_Q210;\rObject_To_World_Dir_B210(vec3(0,0,1),Normal_World_Q210,Normal_World_N_Q210,Normal_Length_Q210);\rfloat X_Q228;\rfloat Y_Q228;\rfloat Z_Q228;\rTo_XYZ_B228(position,X_Q228,Y_Q228,Z_Q228);\rvec3 Nrm_World_Q176;\rNrm_World_Q176=normalize((world*vec4(normal,0.0)).xyz);\rvec3 Binormal_World_Q178;\rvec3 Binormal_World_N_Q178;\rfloat Binormal_Length_Q178;\rObject_To_World_Dir_B178(vec3(0,1,0),Binormal_World_Q178,Binormal_World_N_Q178,Binormal_Length_Q178);\rfloat Anisotropy_Q179=Tangent_Length_Q177/Binormal_Length_Q178;\rfloat Result_Q219;\rPick_Radius_B219(_Radius_,_Radius_Top_Left_,_Radius_Top_Right_,_Radius_Bottom_Left_,_Radius_Bottom_Right_,position,Result_Q219);\rfloat Anisotropy_Q203=Binormal_Length_Q178/Normal_Length_Q210;\rbool Not_Greater_Than_Q187;\rbool Greater_Than_Q187;\rGreater_Than_B187(Z_Q228,0.0,Not_Greater_Than_Q187,Greater_Than_Q187);\rvec4 Linear_Q251;\rLinear_Q251.rgb=clamp(_Left_Color_.rgb*_Left_Color_.rgb,0.0,1.0);\rLinear_Q251.a=_Left_Color_.a;\rvec4 Linear_Q252;\rLinear_Q252.rgb=clamp(_Right_Color_.rgb*_Right_Color_.rgb,0.0,1.0);\rLinear_Q252.a=_Right_Color_.a;\rvec3 Difference_Q211=vec3(0,0,0)-Normal_World_N_Q210;\rvec4 Out_Color_Q184=vec4(X_Q228,Y_Q228,Z_Q228,1);\rfloat Result_Q186;\rConditional_Float_B186(Greater_Than_Q187,_Bevel_Back_,_Bevel_Front_,Result_Q186);\rfloat Result_Q244;\rConditional_Float_B186(Greater_Than_Q187,_Bevel_Back_Stretch_,_Bevel_Front_Stretch_,Result_Q244);\rvec3 New_P_Q280;\rvec2 New_UV_Q280;\rfloat Radial_Gradient_Q280;\rvec3 Radial_Dir_Q280;\rvec3 New_Normal_Q280;\rMove_Verts_B280(Anisotropy_Q179,position,Result_Q219,Result_Q186,normal,Anisotropy_Q203,Result_Q244,New_P_Q280,New_UV_Q280,Radial_Gradient_Q280,Radial_Dir_Q280,New_Normal_Q280);\rfloat X_Q248;\rfloat Y_Q248;\rX_Q248=New_UV_Q280.x;\rY_Q248=New_UV_Q280.y;\rvec3 Pos_World_Q162;\rObject_To_World_Pos_B162(New_P_Q280,Pos_World_Q162);\rvec3 Nrm_World_Q182;\rObject_To_World_Normal_B182(New_Normal_Q280,Nrm_World_Q182);\rvec4 Blob_Info_Q173;\r#if BLOB_ENABLE\nBlob_Vertex_B173(Pos_World_Q162,Nrm_World_Q176,Tangent_World_N_Q177,Binormal_World_N_Q178,_Blob_Position_,_Blob_Intensity_,_Blob_Near_Size_,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,_Blob_Fade_Length_,_Blob_Pulse_,_Blob_Fade_,Blob_Info_Q173);\r#else\nBlob_Info_Q173=vec4(0,0,0,0);\r#endif\nvec4 Blob_Info_Q174;\r#if BLOB_ENABLE_2\nBlob_Vertex_B174(Pos_World_Q162,Nrm_World_Q176,Tangent_World_N_Q177,Binormal_World_N_Q178,_Blob_Position_2_,_Blob_Intensity_,_Blob_Near_Size_2_,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,_Blob_Fade_Length_,_Blob_Pulse_2_,_Blob_Fade_2_,Blob_Info_Q174);\r#else\nBlob_Info_Q174=vec4(0,0,0,0);\r#endif\nfloat Out_Q255;\rRemap_Range_B255(0.0,1.0,0.0,1.0,X_Q248,Out_Q255);\rfloat X_Q236;\rfloat Y_Q236;\rfloat Z_Q236;\rTo_XYZ_B228(Nrm_World_Q182,X_Q236,Y_Q236,Z_Q236);\rvec4 Color_At_T_Q247=mix(Linear_Q251,Linear_Q252,Out_Q255);\rfloat Minus_F_Q237=-Z_Q236;\rfloat R_Q249;\rfloat G_Q249;\rfloat B_Q249;\rfloat A_Q249;\rR_Q249=Color_At_T_Q247.r; G_Q249=Color_At_T_Q247.g; B_Q249=Color_At_T_Q247.b; A_Q249=Color_At_T_Q247.a;\rfloat ClampF_Q238=clamp(0.0,Minus_F_Q237,1.0);\rfloat Result_Q243;\rConditional_Float_B243(_Decal_Front_Only_,ClampF_Q238,1.0,Result_Q243);\rvec4 Vec4_Q239=vec4(Result_Q243,Radial_Gradient_Q280,G_Q249,B_Q249);\rvec3 Position=Pos_World_Q162;\rvec3 Normal=Nrm_World_Q182;\rvec2 UV=XY_Q235;\rvec3 Tangent=Tangent_World_N_Q177;\rvec3 Binormal=Difference_Q211;\rvec4 Color=Out_Color_Q184;\rvec4 Extra1=Vec4_Q239;\rvec4 Extra2=Blob_Info_Q173;\rvec4 Extra3=Blob_Info_Q174;\rgl_Position=viewProjection*vec4(Position,1);\rvPosition=Position;\rvNormal=Normal;\rvUV=UV;\rvTangent=Tangent;\rvBinormal=Binormal;\rvColor=Color;\rvExtra1=Extra1;\rvExtra2=Extra2;\rvExtra3=Extra3;\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const mrdlSliderThumbVertexShader = { name, shader };\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { SerializationHelper, serialize } from \"core/Misc/decorators\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport { Vector2, Vector3, Vector4 } from \"core/Maths/math.vector\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"core/Materials/materialHelper\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { Color4 } from \"core/Maths/math.color\";\r\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\r\nimport { Constants } from \"core/Engines/constants\";\r\n\r\nimport \"./shaders/mrdlSliderThumb.fragment\";\r\nimport \"./shaders/mrdlSliderThumb.vertex\";\r\n\r\n/** @internal */\r\nclass MRDLSliderThumbMaterialDefines extends MaterialDefines {\r\n    /*\r\n        \"SKY_ENABLED\", \"BLOB_ENABLE_2\", \"IRIDESCENCE_ENABLED\"\r\n    */\r\n    public SKY_ENABLED = true;\r\n    public BLOB_ENABLE_2 = true;\r\n    public IRIDESCENCE_ENABLED = true;\r\n\r\n    constructor() {\r\n        super();\r\n        this._needNormals = true;\r\n        this._needUVs = true;\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render Slider Thumb material with MRDL\r\n */\r\nexport class MRDLSliderThumbMaterial extends PushMaterial {\r\n    /**\r\n     * URL pointing to the texture used to define the coloring for the Iridescent Map effect.\r\n     */\r\n    public static BLUE_GRADIENT_TEXTURE_URL = \"https://assets.babylonjs.com/meshes/MRTK/MRDL/mrtk-mrdl-blue-gradient.png\";\r\n    private _blueGradientTexture: Texture;\r\n    private _decalTexture: Texture;\r\n    private _reflectionMapTexture: Texture;\r\n    private _indirectEnvTexture: Texture;\r\n\r\n    /**\r\n     * Gets or sets the corner Radius on the slider thumb.\r\n     */\r\n    @serialize()\r\n    public radius = 0.157;\r\n\r\n    /**\r\n     * Gets or sets the Bevel Front on the slider thumb.\r\n     */\r\n    @serialize()\r\n    public bevelFront = 0.065;\r\n\r\n    /**\r\n     * Gets or sets the Bevel Front Stretch on the slider thumb.\r\n     */\r\n    @serialize()\r\n    public bevelFrontStretch = 0.077;\r\n\r\n    /**\r\n     * Gets or sets the Bevel Back on the slider thumb.\r\n     */\r\n    @serialize()\r\n    public bevelBack = 0.031;\r\n\r\n    /**\r\n     * Gets or sets the Bevel Back Stretch on the slider thumb.\r\n     */\r\n    @serialize()\r\n    public bevelBackStretch = 0;\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusTopLeft = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusTopRight = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusBottomLeft = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusBottomRight = 1.0;\r\n\r\n    /**\r\n     * Gets or sets whether Bulge is enabled.\r\n     * Default is false.\r\n     */\r\n    @serialize()\r\n    public bulgeEnabled = false;\r\n\r\n    /**\r\n     * Gets or sets the Bulge Height.\r\n     */\r\n    @serialize()\r\n    public bulgeHeight = -0.323;\r\n\r\n    /**\r\n     * Gets or sets the Bulge Radius.\r\n     */\r\n    @serialize()\r\n    public bulgeRadius = 0.73;\r\n\r\n    /**\r\n     * Gets or sets the Sun Intensity.\r\n     */\r\n    @serialize()\r\n    public sunIntensity = 2;\r\n\r\n    /**\r\n     * Gets or sets the Sun Theta.\r\n     */\r\n    @serialize()\r\n    public sunTheta = 0.937;\r\n\r\n    /**\r\n     * Gets or sets the Sun Phi.\r\n     */\r\n    @serialize()\r\n    public sunPhi = 0.555;\r\n\r\n    /**\r\n     * Gets or sets the Indirect Diffuse.\r\n     */\r\n    @serialize()\r\n    public indirectDiffuse = 1;\r\n\r\n    /**\r\n     * Gets or sets the base albedo.\r\n     */\r\n    @serialize()\r\n    public albedo = new Color4(0.0117647, 0.505882, 0.996078, 1);\r\n\r\n    /**\r\n     * Gets or sets the Specular value.\r\n     */\r\n    @serialize()\r\n    public specular = 0;\r\n\r\n    /**\r\n     * Gets or sets the Shininess value.\r\n     */\r\n    @serialize()\r\n    public shininess = 10;\r\n\r\n    /**\r\n     * Gets or sets the Sharpness value.\r\n     */\r\n    @serialize()\r\n    public sharpness = 0;\r\n\r\n    /**\r\n     * Gets or sets the Subsurface value.\r\n     */\r\n    @serialize()\r\n    public subsurface = 0.31;\r\n\r\n    /**\r\n     * Gets or sets the left gradient color.\r\n     */\r\n    @serialize()\r\n    public leftGradientColor = new Color4(0.0117647, 0.505882, 0.996078, 1);\r\n\r\n    /**\r\n     * Gets or sets the right gradient color.\r\n     */\r\n    @serialize()\r\n    public rightGradientColor = new Color4(0.0117647, 0.505882, 0.996078, 1);\r\n\r\n    /**\r\n     * Gets or sets the reflection value.\r\n     */\r\n    @serialize()\r\n    public reflection = 0.749;\r\n\r\n    /**\r\n     * Gets or sets the front reflect value.\r\n     */\r\n    @serialize()\r\n    public frontReflect = 0;\r\n\r\n    /**\r\n     * Gets or sets the edge reflect value.\r\n     */\r\n    @serialize()\r\n    public edgeReflect = 0.09;\r\n\r\n    /**\r\n     * Gets or sets the power value.\r\n     */\r\n    @serialize()\r\n    public power = 8.1;\r\n\r\n    /**\r\n     * Gets or sets the sky color.\r\n     */\r\n    @serialize()\r\n    public skyColor = new Color4(0.0117647, 0.960784, 0.996078, 1);\r\n\r\n    /**\r\n     * Gets or sets the horizon color.\r\n     */\r\n    @serialize()\r\n    public horizonColor = new Color4(0.0117647, 0.333333, 0.996078, 1);\r\n\r\n    /**\r\n     * Gets or sets the ground color.\r\n     */\r\n    @serialize()\r\n    public groundColor = new Color4(0, 0.254902, 0.996078, 1);\r\n\r\n    /**\r\n     * Gets or sets the horizon power value.\r\n     */\r\n    @serialize()\r\n    public horizonPower = 1;\r\n\r\n    /**\r\n     * Gets or sets the finger occlusion width value.\r\n     */\r\n    @serialize()\r\n    public width = 0.02;\r\n\r\n    /**\r\n     * Gets or sets the finger occlusion fuzz value.\r\n     */\r\n    @serialize()\r\n    public fuzz = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the minimum finger occlusion fuzz value.\r\n     */\r\n    @serialize()\r\n    public minFuzz = 0.001;\r\n\r\n    /**\r\n     * Gets or sets the finger occlusion clip fade value.\r\n     */\r\n    @serialize()\r\n    public clipFade = 0.01;\r\n\r\n    /**\r\n     * Gets or sets the hue shift value.\r\n     */\r\n    @serialize()\r\n    public hueShift = 0;\r\n\r\n    /**\r\n     * Gets or sets the saturation shift value.\r\n     */\r\n    @serialize()\r\n    public saturationShift = 0;\r\n\r\n    /**\r\n     * Gets or sets the value shift.\r\n     */\r\n    @serialize()\r\n    public valueShift = 0;\r\n\r\n    /**\r\n     * Gets or sets the position of the hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobPosition = new Vector3(0, 0, 0.1);\r\n\r\n    /**\r\n     * Gets or sets the intensity of the hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobIntensity = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the near size of the hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobNearSize = 0.01;\r\n\r\n    /**\r\n     * Gets or sets the far size of the hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobFarSize = 0.03;\r\n\r\n    /**\r\n     * Gets or sets the distance considered \"near\" to the mesh, which controls the size of the hover glow effect (see blobNearSize).\r\n     */\r\n    @serialize()\r\n    public blobNearDistance = 0;\r\n\r\n    /**\r\n     * Gets or sets the distance considered \"far\" from the mesh, which controls the size of the hover glow effect (see blobFarSize).\r\n     */\r\n    @serialize()\r\n    public blobFarDistance = 0.08;\r\n\r\n    /**\r\n     * Gets or sets the length of the hover glow effect fade.\r\n     */\r\n    @serialize()\r\n    public blobFadeLength = 0.576;\r\n\r\n    /**\r\n     * Gets or sets the progress of the hover glow effect selection animation corresponding to the left pointer (0.0 - 1.0).\r\n     */\r\n    @serialize()\r\n    public blobPulse = 0;\r\n\r\n    /**\r\n     * Gets or sets the opacity of the hover glow effect corresponding to the left pointer (0.0 - 1.0). Default is 0.\r\n     */\r\n    @serialize()\r\n    public blobFade = 1;\r\n\r\n    /**\r\n     * Gets or sets the position of the hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobPosition2 = new Vector3(0.2, 0, 0.1);\r\n\r\n    /**\r\n     * Gets or sets the size of the hover glow effect when the right pointer is considered \"near\" to the mesh (see blobNearDistance).\r\n     */\r\n    @serialize()\r\n    public blobNearSize2 = 0.01;\r\n\r\n    /**\r\n     * Gets or sets the progress of the hover glow effect selection animation corresponding to the right pointer (0.0 - 1.0).\r\n     */\r\n    @serialize()\r\n    public blobPulse2 = 0;\r\n\r\n    /**\r\n     * Gets or sets the opacity of the hover glow effect corresponding to the right pointer (0.0 - 1.0). Default is 1.\r\n     */\r\n    @serialize()\r\n    public blobFade2 = 1;\r\n\r\n    /**\r\n     * Gets or sets the texture of the hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobTexture = new Texture(\"\", this.getScene());\r\n\r\n    /**\r\n     * Gets or sets the finger position for left index.\r\n     */\r\n    @serialize()\r\n    public leftIndexPosition = new Vector3(0, 0, 1);\r\n\r\n    /**\r\n     * Gets or sets the finger position for right index.\r\n     */\r\n    @serialize()\r\n    public rightIndexPosition = new Vector3(-1, -1, -1);\r\n\r\n    /**\r\n     * Gets or sets the finger position for left index middle position.\r\n     */\r\n    @serialize()\r\n    public leftIndexMiddlePosition = new Vector3(0, 0, 0);\r\n\r\n    /**\r\n     * Gets or sets the finger position for right index middle position.\r\n     */\r\n    @serialize()\r\n    public rightIndexMiddlePosition = new Vector3(0, 0, 0);\r\n\r\n    /**\r\n     * Gets or sets the Decal Scale for XY.\r\n     */\r\n    @serialize()\r\n    public decalScaleXY = new Vector2(1.5, 1.5);\r\n\r\n    /**\r\n     * Gets or sets decalFrontOnly\r\n     * Default is true\r\n     */\r\n    @serialize()\r\n    public decalFrontOnly = true;\r\n\r\n    /**\r\n     * Gets or sets the Rim Light intensity.\r\n     */\r\n    @serialize()\r\n    public rimIntensity = 0.287;\r\n\r\n    /**\r\n     * Gets or sets the Rim Light hue shift value.\r\n     */\r\n    @serialize()\r\n    public rimHueShift = 0;\r\n\r\n    /**\r\n     * Gets or sets the Rim Light saturation shift value.\r\n     */\r\n    @serialize()\r\n    public rimSaturationShift = 0;\r\n\r\n    /**\r\n     * Gets or sets the Rim Light value shift.\r\n     */\r\n    @serialize()\r\n    public rimValueShift = -1;\r\n\r\n    /**\r\n     * Gets or sets the intensity of the iridescence effect.\r\n     */\r\n    @serialize()\r\n    public iridescenceIntensity = 0;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public useGlobalLeftIndex = 1.0;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public useGlobalRightIndex = 1.0;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalLeftIndexTipProximity = 0.0;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalRightIndexTipProximity = 0.0;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalLeftIndexTipPosition = new Vector4(0.5, 0.0, -0.55, 1.0);\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globaRightIndexTipPosition = new Vector4(0.0, 0.0, 0.0, 1.0);\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalLeftThumbTipPosition = new Vector4(0.5, 0.0, -0.55, 1.0);\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalRightThumbTipPosition = new Vector4(0.0, 0.0, 0.0, 1.0);\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalLeftIndexMiddlePosition = new Vector4(0.5, 0.0, -0.55, 1.0);\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalRightIndexMiddlePosition = new Vector4(0.0, 0.0, 0.0, 1.0);\r\n\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n        this.alphaMode = Constants.ALPHA_DISABLE;\r\n        this.backFaceCulling = false;\r\n        this._blueGradientTexture = new Texture(MRDLSliderThumbMaterial.BLUE_GRADIENT_TEXTURE_URL, scene, true, false, Texture.NEAREST_SAMPLINGMODE);\r\n        this._decalTexture = new Texture(\"\", this.getScene());\r\n        this._reflectionMapTexture = new Texture(\"\", this.getScene());\r\n        this._indirectEnvTexture = new Texture(\"\", this.getScene());\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new MRDLSliderThumbMaterialDefines();\r\n        }\r\n\r\n        const defines = <MRDLSliderThumbMaterialDefines>subMesh.materialDefines;\r\n        const scene = this.getScene();\r\n\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, false);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\r\n\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            if (defines.TANGENT) {\r\n                attribs.push(VertexBuffer.TangentKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            const shaderName = \"mrdlSliderThumb\";\r\n            const join = defines.toString();\r\n\r\n            const uniforms = [\r\n                \"world\",\r\n                \"viewProjection\",\r\n                \"cameraPosition\",\r\n                \"_Radius_\",\r\n                \"_Bevel_Front_\",\r\n                \"_Bevel_Front_Stretch_\",\r\n                \"_Bevel_Back_\",\r\n                \"_Bevel_Back_Stretch_\",\r\n                \"_Radius_Top_Left_\",\r\n                \"_Radius_Top_Right_\",\r\n                \"_Radius_Bottom_Left_\",\r\n                \"_Radius_Bottom_Right_\",\r\n                \"_Bulge_Enabled_\",\r\n                \"_Bulge_Height_\",\r\n                \"_Bulge_Radius_\",\r\n                \"_Sun_Intensity_\",\r\n                \"_Sun_Theta_\",\r\n                \"_Sun_Phi_\",\r\n                \"_Indirect_Diffuse_\",\r\n                \"_Albedo_\",\r\n                \"_Specular_\",\r\n                \"_Shininess_\",\r\n                \"_Sharpness_\",\r\n                \"_Subsurface_\",\r\n                \"_Left_Color_\",\r\n                \"_Right_Color_\",\r\n                \"_Reflection_\",\r\n                \"_Front_Reflect_\",\r\n                \"_Edge_Reflect_\",\r\n                \"_Power_\",\r\n                \"_Sky_Color_\",\r\n                \"_Horizon_Color_\",\r\n                \"_Ground_Color_\",\r\n                \"_Horizon_Power_\",\r\n                \"_Reflection_Map_\",\r\n                \"_Indirect_Environment_\",\r\n                \"_Width_\",\r\n                \"_Fuzz_\",\r\n                \"_Min_Fuzz_\",\r\n                \"_Clip_Fade_\",\r\n                \"_Hue_Shift_\",\r\n                \"_Saturation_Shift_\",\r\n                \"_Value_Shift_\",\r\n                \"_Blob_Position_\",\r\n                \"_Blob_Intensity_\",\r\n                \"_Blob_Near_Size_\",\r\n                \"_Blob_Far_Size_\",\r\n                \"_Blob_Near_Distance_\",\r\n                \"_Blob_Far_Distance_\",\r\n                \"_Blob_Fade_Length_\",\r\n                \"_Blob_Pulse_\",\r\n                \"_Blob_Fade_\",\r\n                \"_Blob_Texture_\",\r\n                \"_Blob_Position_2_\",\r\n                \"_Blob_Near_Size_2_\",\r\n                \"_Blob_Pulse_2_\",\r\n                \"_Blob_Fade_2_\",\r\n                \"_Left_Index_Pos_\",\r\n                \"_Right_Index_Pos_\",\r\n                \"_Left_Index_Middle_Pos_\",\r\n                \"_Right_Index_Middle_Pos_\",\r\n                \"_Decal_\",\r\n                \"_Decal_Scale_XY_\",\r\n                \"_Decal_Front_Only_\",\r\n                \"_Rim_Intensity_\",\r\n                \"_Rim_Texture_\",\r\n                \"_Rim_Hue_Shift_\",\r\n                \"_Rim_Saturation_Shift_\",\r\n                \"_Rim_Value_Shift_\",\r\n                \"_Iridescence_Intensity_\",\r\n                \"_Iridescence_Texture_\",\r\n                \"Use_Global_Left_Index\",\r\n                \"Use_Global_Right_Index\",\r\n                \"Global_Left_Index_Tip_Position\",\r\n                \"Global_Right_Index_Tip_Position\",\r\n                \"Global_Left_Thumb_Tip_Position\",\r\n                \"Global_Right_Thumb_Tip_Position\",\r\n                \"Global_Left_Index_Middle_Position;\",\r\n                \"Global_Right_Index_Middle_Position\",\r\n                \"Global_Left_Index_Tip_Proximity\",\r\n                \"Global_Right_Index_Tip_Proximity\",\r\n            ];\r\n            const samplers: string[] = [\"_Rim_Texture_\", \"_Iridescence_Texture_\"];\r\n            const uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4,\r\n            });\r\n\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: { maxSimultaneousLights: 4 },\r\n                    },\r\n                    engine\r\n                ),\r\n                defines\r\n            );\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const defines = <MRDLSliderThumbMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", this.getScene().getTransformMatrix());\r\n        this._activeEffect.setVector3(\"cameraPosition\", this.getScene().activeCamera!.position);\r\n\r\n        // \"Round Rect\"\r\n        this._activeEffect.setFloat(\"_Radius_\", this.radius);\r\n        this._activeEffect.setFloat(\"_Bevel_Front_\", this.bevelFront);\r\n        this._activeEffect.setFloat(\"_Bevel_Front_Stretch_\", this.bevelFrontStretch);\r\n        this._activeEffect.setFloat(\"_Bevel_Back_\", this.bevelBack);\r\n        this._activeEffect.setFloat(\"_Bevel_Back_Stretch_\", this.bevelBackStretch);\r\n\r\n        // \"Radii Multipliers\"\r\n        this._activeEffect.setFloat(\"_Radius_Top_Left_\", this.radiusTopLeft);\r\n        this._activeEffect.setFloat(\"_Radius_Top_Right_\", this.radiusTopRight);\r\n        this._activeEffect.setFloat(\"_Radius_Bottom_Left_\", this.radiusBottomLeft);\r\n        this._activeEffect.setFloat(\"_Radius_Bottom_Right_\", this.radiusBottomRight);\r\n\r\n        // \"Bulge\"\r\n        this._activeEffect.setFloat(\"_Bulge_Enabled_\", this.bulgeEnabled ? 1.0 : 0.0);\r\n        this._activeEffect.setFloat(\"_Bulge_Height_\", this.bulgeHeight);\r\n        this._activeEffect.setFloat(\"_Bulge_Radius_\", this.bulgeRadius);\r\n\r\n        // \"Sun\"\r\n        this._activeEffect.setFloat(\"_Sun_Intensity_\", this.sunIntensity);\r\n        this._activeEffect.setFloat(\"_Sun_Theta_\", this.sunTheta);\r\n        this._activeEffect.setFloat(\"_Sun_Phi_\", this.sunPhi);\r\n        this._activeEffect.setFloat(\"_Indirect_Diffuse_\", this.indirectDiffuse);\r\n\r\n        // \"Diffuse And Specular\"\r\n        this._activeEffect.setDirectColor4(\"_Albedo_\", this.albedo);\r\n        this._activeEffect.setFloat(\"_Specular_\", this.specular);\r\n        this._activeEffect.setFloat(\"_Shininess_\", this.shininess);\r\n        this._activeEffect.setFloat(\"_Sharpness_\", this.sharpness);\r\n        this._activeEffect.setFloat(\"_Subsurface_\", this.subsurface);\r\n\r\n        // \"Gradient\"\r\n        this._activeEffect.setDirectColor4(\"_Left_Color_\", this.leftGradientColor);\r\n        this._activeEffect.setDirectColor4(\"_Right_Color_\", this.rightGradientColor);\r\n\r\n        // \"Reflection\"\r\n        this._activeEffect.setFloat(\"_Reflection_\", this.reflection);\r\n        this._activeEffect.setFloat(\"_Front_Reflect_\", this.frontReflect);\r\n        this._activeEffect.setFloat(\"_Edge_Reflect_\", this.edgeReflect);\r\n        this._activeEffect.setFloat(\"_Power_\", this.power);\r\n\r\n        // \"Sky Environment\"\r\n        //define SKY_ENABLED true;\r\n        this._activeEffect.setDirectColor4(\"_Sky_Color_\", this.skyColor);\r\n        this._activeEffect.setDirectColor4(\"_Horizon_Color_\", this.horizonColor);\r\n        this._activeEffect.setDirectColor4(\"_Ground_Color_\", this.groundColor);\r\n        this._activeEffect.setFloat(\"_Horizon_Power_\", this.horizonPower);\r\n\r\n        // \"Mapped Environment\"\r\n        //define ENV_ENABLE false;\r\n        this._activeEffect.setTexture(\"_Reflection_Map_\", this._reflectionMapTexture);\r\n        this._activeEffect.setTexture(\"_Indirect_Environment_\", this._indirectEnvTexture);\r\n\r\n        // \"FingerOcclusion\"\r\n        //define OCCLUSION_ENABLED false;\r\n        this._activeEffect.setFloat(\"_Width_\", this.width);\r\n        this._activeEffect.setFloat(\"_Fuzz_\", this.fuzz);\r\n        this._activeEffect.setFloat(\"_Min_Fuzz_\", this.minFuzz);\r\n        this._activeEffect.setFloat(\"_Clip_Fade_\", this.clipFade);\r\n\r\n        // \"View Based Color Shift\"\r\n        this._activeEffect.setFloat(\"_Hue_Shift_\", this.hueShift);\r\n        this._activeEffect.setFloat(\"_Saturation_Shift_\", this.saturationShift);\r\n        this._activeEffect.setFloat(\"_Value_Shift_\", this.valueShift);\r\n\r\n        // \"Blob\"\r\n        //define BLOB_ENABLE false;\r\n        this._activeEffect.setVector3(\"_Blob_Position_\", this.blobPosition);\r\n        this._activeEffect.setFloat(\"_Blob_Intensity_\", this.blobIntensity);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Size_\", this.blobNearSize);\r\n        this._activeEffect.setFloat(\"_Blob_Far_Size_\", this.blobFarSize);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Distance_\", this.blobNearDistance);\r\n        this._activeEffect.setFloat(\"_Blob_Far_Distance_\", this.blobFarDistance);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_Length_\", this.blobFadeLength);\r\n        this._activeEffect.setFloat(\"_Blob_Pulse_\", this.blobPulse);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_\", this.blobFade);\r\n\r\n        // \"Blob Texture\"\r\n        this._activeEffect.setTexture(\"_Blob_Texture_\", this.blobTexture);\r\n\r\n        // \"Blob 2\"\r\n        //define BLOB_ENABLE_2 true;\r\n        this._activeEffect.setVector3(\"_Blob_Position_2_\", this.blobPosition2);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Size_2_\", this.blobNearSize2);\r\n        this._activeEffect.setFloat(\"_Blob_Pulse_2_\", this.blobPulse2);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_2_\", this.blobFade2);\r\n\r\n        // \"Finger Positions\"\r\n        this._activeEffect.setVector3(\"_Left_Index_Pos_\", this.leftIndexPosition);\r\n        this._activeEffect.setVector3(\"_Right_Index_Pos_\", this.rightIndexPosition);\r\n        this._activeEffect.setVector3(\"_Left_Index_Middle_Pos_\", this.leftIndexMiddlePosition);\r\n        this._activeEffect.setVector3(\"_Right_Index_Middle_Pos_\", this.rightIndexMiddlePosition);\r\n\r\n        // \"Decal Texture\"\r\n        //define DECAL_ENABLE false;\r\n        this._activeEffect.setTexture(\"_Decal_\", this._decalTexture);\r\n        this._activeEffect.setVector2(\"_Decal_Scale_XY_\", this.decalScaleXY);\r\n        this._activeEffect.setFloat(\"_Decal_Front_Only_\", this.decalFrontOnly ? 1.0 : 0.0);\r\n\r\n        // \"Rim Light\"\r\n        this._activeEffect.setFloat(\"_Rim_Intensity_\", this.rimIntensity);\r\n        this._activeEffect.setTexture(\"_Rim_Texture_\", this._blueGradientTexture);\r\n        this._activeEffect.setFloat(\"_Rim_Hue_Shift_\", this.rimHueShift);\r\n        this._activeEffect.setFloat(\"_Rim_Saturation_Shift_\", this.rimSaturationShift);\r\n        this._activeEffect.setFloat(\"_Rim_Value_Shift_\", this.rimValueShift);\r\n\r\n        // \"Iridescence\"\r\n        //define IRIDESCENCE_ENABLED true;\r\n        this._activeEffect.setFloat(\"_Iridescence_Intensity_\", this.iridescenceIntensity);\r\n        this._activeEffect.setTexture(\"_Iridescence_Texture_\", this._blueGradientTexture);\r\n\r\n        // Global inputs\r\n        this._activeEffect.setFloat(\"Use_Global_Left_Index\", this.useGlobalLeftIndex);\r\n        this._activeEffect.setFloat(\"Use_Global_Right_Index\", this.useGlobalRightIndex);\r\n\r\n        this._activeEffect.setVector4(\"Global_Left_Index_Tip_Position\", this.globalLeftIndexTipPosition);\r\n        this._activeEffect.setVector4(\"Global_Right_Index_Tip_Position\", this.globaRightIndexTipPosition);\r\n\r\n        this._activeEffect.setVector4(\"Global_Left_Thumb_Tip_Position\", this.globalLeftThumbTipPosition);\r\n        this._activeEffect.setVector4(\"Global_Right_Thumb_Tip_Position\", this.globalRightThumbTipPosition);\r\n\r\n        this._activeEffect.setVector4(\"Global_Left_Index_Middle_Position\", this.globalLeftIndexMiddlePosition);\r\n        this._activeEffect.setVector4(\"Global_Right_Index_Middle_Position\", this.globalRightIndexMiddlePosition);\r\n\r\n        this._activeEffect.setFloat(\"Global_Left_Index_Tip_Proximity\", this.globalLeftIndexTipProximity);\r\n        this._activeEffect.setFloat(\"Global_Right_Index_Tip_Proximity\", this.globalRightIndexTipProximity);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    /**\r\n     * Get the list of animatables in the material.\r\n     * @returns the list of animatables object used in the material\r\n     */\r\n    public getAnimatables(): IAnimatable[] {\r\n        return [];\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n        this._reflectionMapTexture.dispose();\r\n        this._indirectEnvTexture.dispose();\r\n        this._blueGradientTexture.dispose();\r\n        this._decalTexture.dispose();\r\n    }\r\n\r\n    public clone(name: string): MRDLSliderThumbMaterial {\r\n        return SerializationHelper.Clone(() => new MRDLSliderThumbMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n        serializationObject.customType = \"BABYLON.MRDLSliderThumbMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"MRDLSliderThumbMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): MRDLSliderThumbMaterial {\r\n        return SerializationHelper.Parse(() => new MRDLSliderThumbMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.MRDLSliderThumbMaterial\", MRDLSliderThumbMaterial);\r\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { SerializationHelper, serialize } from \"core/Misc/decorators\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport { Vector4 } from \"core/Maths/math.vector\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"core/Materials/materialHelper\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { Color4 } from \"core/Maths/math.color\";\r\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\r\nimport { Constants } from \"core/Engines/constants\";\r\n\r\nimport \"./shaders/mrdlBackplate.fragment\";\r\nimport \"./shaders/mrdlBackplate.vertex\";\r\n\r\n/** @internal */\r\nclass MRDLBackplateMaterialDefines extends MaterialDefines {\r\n    /*\r\n        \"IRIDESCENCE_ENABLE\", \"SMOOTH_EDGES\"\r\n    */\r\n    public IRIDESCENCE_ENABLE = true;\r\n    public SMOOTH_EDGES = true;\r\n\r\n    constructor() {\r\n        super();\r\n        this._needNormals = true;\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render backplate material with MRDL\r\n */\r\nexport class MRDLBackplateMaterial extends PushMaterial {\r\n    /**\r\n     * URL pointing to the texture used to define the coloring for the Iridescent Map effect.\r\n     */\r\n    public static IRIDESCENT_MAP_TEXTURE_URL = \"https://assets.babylonjs.com/meshes/MRTK/MRDL/mrtk-mrdl-backplate-iridescence.png\";\r\n    private _iridescentMapTexture: Texture;\r\n\r\n    /**\r\n     * Gets or sets the corner radius on the backplate. If this value is changed, update the lineWidth to match.\r\n     */\r\n    @serialize()\r\n    public radius = 0.3;\r\n\r\n    /**\r\n     * Gets or sets the line width of the backplate.\r\n     */\r\n    @serialize()\r\n    public lineWidth = 0.003;\r\n\r\n    /**\r\n     * Gets or sets whether to use absolute sizes when calculating effects on the backplate.\r\n     * Since desktop and VR/AR have different relative sizes, it's usually best to keep this false.\r\n     */\r\n    @serialize()\r\n    public absoluteSizes = false;\r\n\r\n    /** @internal */\r\n    public _filterWidth = 1;\r\n\r\n    /**\r\n     * Gets or sets the base color of the backplate.\r\n     */\r\n    @serialize()\r\n    public baseColor = new Color4(0, 0, 0, 1);\r\n\r\n    /**\r\n     * Gets or sets the line color of the backplate.\r\n     */\r\n    @serialize()\r\n    public lineColor = new Color4(0.2, 0.262745, 0.4, 1);\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusTopLeft = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusTopRight = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusBottomLeft = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusBottomRight = 1.0;\r\n\r\n    /** @internal */\r\n    public _rate = 0;\r\n\r\n    /**\r\n     * Gets or sets the color of the highlights on the backplate line.\r\n     */\r\n    @serialize()\r\n    public highlightColor = new Color4(0.239216, 0.435294, 0.827451, 1);\r\n\r\n    /**\r\n     * Gets or sets the width of the highlights on the backplate line.\r\n     */\r\n    @serialize()\r\n    public highlightWidth = 0;\r\n\r\n    /** @internal */\r\n    public _highlightTransform = new Vector4(1, 1, 0, 0);\r\n\r\n    /** @internal */\r\n    public _highlight = 1;\r\n\r\n    /**\r\n     * Gets or sets the intensity of the iridescence effect.\r\n     */\r\n    @serialize()\r\n    public iridescenceIntensity = 0.45;\r\n\r\n    /**\r\n     * Gets or sets the intensity of the iridescence effect on the backplate edges.\r\n     */\r\n    @serialize()\r\n    public iridescenceEdgeIntensity = 1;\r\n\r\n    /**\r\n     * Gets or sets the Tint of the iridescence effect on the backplate.\r\n     */\r\n    @serialize()\r\n    public iridescenceTint = new Color4(1, 1, 1, 1);\r\n\r\n    /** @internal */\r\n    public _angle = -45;\r\n\r\n    /**\r\n     * Gets or sets the opacity of the backplate (0.0 - 1.0).\r\n     */\r\n    @serialize()\r\n    public fadeOut = 1;\r\n\r\n    /** @internal */\r\n    public _reflected = true;\r\n\r\n    /** @internal */\r\n    public _frequency = 1;\r\n\r\n    /** @internal */\r\n    public _verticalOffset = 0;\r\n\r\n    /**\r\n     * Gets or sets the gradient color effect on the backplate.\r\n     */\r\n    @serialize()\r\n    public gradientColor = new Color4(0.74902, 0.74902, 0.74902, 1);\r\n\r\n    /**\r\n     * Gets or sets the top left gradient color effect on the backplate.\r\n     */\r\n    @serialize()\r\n    public topLeftGradientColor = new Color4(0.00784314, 0.294118, 0.580392, 1);\r\n\r\n    /**\r\n     * Gets or sets the top right gradient color effect on the backplate.\r\n     */\r\n    @serialize()\r\n    public topRightGradientColor = new Color4(0.305882, 0, 1, 1);\r\n\r\n    /**\r\n     * Gets or sets the bottom left gradient color effect on the backplate.\r\n     */\r\n    @serialize()\r\n    public bottomLeftGradientColor = new Color4(0.133333, 0.258824, 0.992157, 1);\r\n\r\n    /**\r\n     * Gets or sets the bottom right gradient color effect on the backplate.\r\n     */\r\n    @serialize()\r\n    public bottomRightGradientColor = new Color4(0.176471, 0.176471, 0.619608, 1);\r\n\r\n    /**\r\n     * Gets or sets the edge width of the backplate.\r\n     */\r\n    @serialize()\r\n    public edgeWidth = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the edge width of the backplate.\r\n     */\r\n    @serialize()\r\n    public edgePower = 1;\r\n\r\n    /**\r\n     * Gets or sets the edge width of the backplate.\r\n     */\r\n    @serialize()\r\n    public edgeLineGradientBlend = 0.5;\r\n\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n        this.alphaMode = Constants.ALPHA_DISABLE;\r\n        this.backFaceCulling = false;\r\n\r\n        this._iridescentMapTexture = new Texture(MRDLBackplateMaterial.IRIDESCENT_MAP_TEXTURE_URL, this.getScene(), true, false, Texture.NEAREST_SAMPLINGMODE);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new MRDLBackplateMaterialDefines();\r\n        }\r\n\r\n        const defines = <MRDLBackplateMaterialDefines>subMesh.materialDefines;\r\n        const scene = this.getScene();\r\n\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, false);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\r\n\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            if (defines.TANGENT) {\r\n                attribs.push(VertexBuffer.TangentKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            const shaderName = \"mrdlBackplate\";\r\n            const join = defines.toString();\r\n\r\n            const uniforms = [\r\n                \"world\",\r\n                \"viewProjection\",\r\n                \"cameraPosition\",\r\n                \"_Radius_\",\r\n                \"_Line_Width_\",\r\n                \"_Absolute_Sizes_\",\r\n                \"_Filter_Width_\",\r\n                \"_Base_Color_\",\r\n                \"_Line_Color_\",\r\n                \"_Radius_Top_Left_\",\r\n                \"_Radius_Top_Right_\",\r\n                \"_Radius_Bottom_Left_\",\r\n                \"_Radius_Bottom_Right_\",\r\n                \"_Rate_\",\r\n                \"_Highlight_Color_\",\r\n                \"_Highlight_Width_\",\r\n                \"_Highlight_Transform_\",\r\n                \"_Highlight_\",\r\n                \"_Iridescence_Intensity_\",\r\n                \"_Iridescence_Edge_Intensity_\",\r\n                \"_Iridescence_Tint_\",\r\n                \"_Iridescent_Map_\",\r\n                \"_Angle_\",\r\n                \"_Reflected_\",\r\n                \"_Frequency_\",\r\n                \"_Vertical_Offset_\",\r\n                \"_Gradient_Color_\",\r\n                \"_Top_Left_\",\r\n                \"_Top_Right_\",\r\n                \"_Bottom_Left_\",\r\n                \"_Bottom_Right_\",\r\n                \"_Edge_Width_\",\r\n                \"_Edge_Power_\",\r\n                \"_Line_Gradient_Blend_\",\r\n                \"_Fade_Out_\",\r\n            ];\r\n            const samplers: string[] = [\"_Iridescent_Map_\"];\r\n            const uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4,\r\n            });\r\n\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: { maxSimultaneousLights: 4 },\r\n                    },\r\n                    engine\r\n                ),\r\n                defines\r\n            );\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const defines = <MRDLBackplateMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", this.getScene().getTransformMatrix());\r\n        this._activeEffect.setVector3(\"cameraPosition\", this.getScene().activeCamera!.position);\r\n\r\n        // \"Round Rect\"\r\n        this._activeEffect.setFloat(\"_Radius_\", this.radius);\r\n        this._activeEffect.setFloat(\"_Line_Width_\", this.lineWidth);\r\n        this._activeEffect.setFloat(\"_Absolute_Sizes_\", this.absoluteSizes ? 1.0 : 0.0);\r\n        this._activeEffect.setFloat(\"_Filter_Width_\", this._filterWidth);\r\n        this._activeEffect.setDirectColor4(\"_Base_Color_\", this.baseColor);\r\n        this._activeEffect.setDirectColor4(\"_Line_Color_\", this.lineColor);\r\n\r\n        // \"Radii Multipliers\"\r\n        this._activeEffect.setFloat(\"_Radius_Top_Left_\", this.radiusTopLeft);\r\n        this._activeEffect.setFloat(\"_Radius_Top_Right_\", this.radiusTopRight);\r\n        this._activeEffect.setFloat(\"_Radius_Bottom_Left_\", this.radiusBottomLeft);\r\n        this._activeEffect.setFloat(\"_Radius_Bottom_Right_\", this.radiusBottomRight);\r\n\r\n        // \"Line Highlight\"\r\n        this._activeEffect.setFloat(\"_Rate_\", this._rate);\r\n        this._activeEffect.setDirectColor4(\"_Highlight_Color_\", this.highlightColor);\r\n        this._activeEffect.setFloat(\"_Highlight_Width_\", this.highlightWidth);\r\n        this._activeEffect.setVector4(\"_Highlight_Transform_\", this._highlightTransform);\r\n        this._activeEffect.setFloat(\"_Highlight_\", this._highlight);\r\n\r\n        // \"Iridescence\"\r\n        //define IRIDESCENCE_ENABLE true;\r\n        this._activeEffect.setFloat(\"_Iridescence_Intensity_\", this.iridescenceIntensity);\r\n        this._activeEffect.setFloat(\"_Iridescence_Edge_Intensity_\", this.iridescenceEdgeIntensity);\r\n        this._activeEffect.setDirectColor4(\"_Iridescence_Tint_\", this.iridescenceTint);\r\n        this._activeEffect.setTexture(\"_Iridescent_Map_\", this._iridescentMapTexture);\r\n        this._activeEffect.setFloat(\"_Angle_\", this._angle);\r\n        this._activeEffect.setFloat(\"_Reflected_\", this._reflected ? 1.0 : 0.0);\r\n        this._activeEffect.setFloat(\"_Frequency_\", this._frequency);\r\n        this._activeEffect.setFloat(\"_Vertical_Offset_\", this._verticalOffset);\r\n\r\n        // \"Gradient\"\r\n        this._activeEffect.setDirectColor4(\"_Gradient_Color_\", this.gradientColor);\r\n        this._activeEffect.setDirectColor4(\"_Top_Left_\", this.topLeftGradientColor);\r\n        this._activeEffect.setDirectColor4(\"_Top_Right_\", this.topRightGradientColor);\r\n        this._activeEffect.setDirectColor4(\"_Bottom_Left_\", this.bottomLeftGradientColor);\r\n        this._activeEffect.setDirectColor4(\"_Bottom_Right_\", this.bottomRightGradientColor);\r\n        //define EDGE_ONLY false;\r\n        this._activeEffect.setFloat(\"_Edge_Width_\", this.edgeWidth);\r\n        this._activeEffect.setFloat(\"_Edge_Power_\", this.edgePower);\r\n        this._activeEffect.setFloat(\"_Line_Gradient_Blend_\", this.edgeLineGradientBlend);\r\n\r\n        // \"Fade\"\r\n        this._activeEffect.setFloat(\"_Fade_Out_\", this.fadeOut);\r\n\r\n        // \"Antialiasing\"\r\n        //define SMOOTH_EDGES true;\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    /**\r\n     * Get the list of animatables in the material.\r\n     * @returns the list of animatables object used in the material\r\n     */\r\n    public getAnimatables(): IAnimatable[] {\r\n        return [];\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): MRDLBackplateMaterial {\r\n        return SerializationHelper.Clone(() => new MRDLBackplateMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n        serializationObject.customType = \"BABYLON.MRDLBackplateMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"MRDLBackplateMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): MRDLBackplateMaterial {\r\n        return SerializationHelper.Parse(() => new MRDLBackplateMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.MRDLBackplateMaterial\", MRDLBackplateMaterial);\r\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { CreateBox } from \"core/Meshes/Builders/boxBuilder\";\r\nimport { PointerDragBehavior } from \"core/Behaviors/Meshes/pointerDragBehavior\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { SceneLoader } from \"core/Loading/sceneLoader\";\r\nimport { MRDLSliderBarMaterial } from \"../materials/mrdl/mrdlSliderBarMaterial\";\r\nimport { MRDLSliderThumbMaterial } from \"../materials/mrdl/mrdlSliderThumbMaterial\";\r\nimport { MRDLBackplateMaterial } from \"../materials/mrdl/mrdlBackplateMaterial\";\r\n\r\nconst SLIDER_MIN: number = 0;\r\nconst SLIDER_MAX: number = 100;\r\nconst SLIDER_VAL: number = 50;\r\nconst SLIDER_STEP: number = 0;\r\nconst SLIDER_SCALING: number = 1.0;\r\nconst SLIDER_MARGIN: number = 0.2;\r\n\r\n/**\r\n * Class used to create a slider in 3D\r\n */\r\nexport class Slider3D extends Control3D {\r\n    /**\r\n     * Base Url for the models.\r\n     */\r\n    public static MODEL_BASE_URL: string = \"https://assets.babylonjs.com/meshes/MRTK/\";\r\n\r\n    /**\r\n     * File name for the 8x4 model.\r\n     */\r\n    public static MODEL_FILENAME: string = \"mrtk-fluent-backplate.glb\";\r\n\r\n    private _sliderBackplate: AbstractMesh;\r\n    private _sliderBackplateMaterial: MRDLBackplateMaterial;\r\n    private _sliderBarMaterial: MRDLSliderBarMaterial;\r\n    private _sliderThumbMaterial: MRDLSliderThumbMaterial;\r\n    private _sliderThumb: AbstractMesh;\r\n    private _sliderBar: AbstractMesh;\r\n    private _sliderBackplateVisible: boolean;\r\n\r\n    private _minimum: number;\r\n    private _maximum: number;\r\n    private _value: number;\r\n    private _step: number;\r\n\r\n    private _draggedPosition: number;\r\n\r\n    /** Observable raised when the sldier value changes */\r\n    public onValueChangedObservable = new Observable<number>();\r\n\r\n    /**\r\n     * Creates a new slider\r\n     * @param name defines the control name\r\n     * @param sliderBackplateVisible defines if the control has a backplate, default is false\r\n     */\r\n    constructor(name?: string, sliderBackplateVisible?: boolean) {\r\n        super(name);\r\n        this._sliderBackplateVisible = sliderBackplateVisible || false;\r\n\r\n        this._minimum = SLIDER_MIN;\r\n        this._maximum = SLIDER_MAX;\r\n        this._step = SLIDER_STEP;\r\n        this._value = SLIDER_VAL;\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh used to render this control\r\n     */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        if (this.node) {\r\n            return this._sliderThumb;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /** Gets or sets minimum value */\r\n    public get minimum(): number {\r\n        return this._minimum;\r\n    }\r\n\r\n    public set minimum(value: number) {\r\n        if (this._minimum === value) {\r\n            return;\r\n        }\r\n\r\n        this._minimum = Math.max(value, SLIDER_MIN);\r\n        this._value = Math.max(Math.min(this._value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets maximum value */\r\n    public get maximum(): number {\r\n        return this._maximum;\r\n    }\r\n\r\n    public set maximum(value: number) {\r\n        if (this._maximum === value) {\r\n            return;\r\n        }\r\n\r\n        this._maximum = Math.max(value, this._minimum);\r\n        this._value = Math.max(Math.min(this._value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets step value */\r\n    public get step(): number {\r\n        return this._step;\r\n    }\r\n\r\n    public set step(value: number) {\r\n        if (this._step === value) {\r\n            return;\r\n        }\r\n\r\n        this._step = Math.max(Math.min(value, this._maximum - this._minimum), SLIDER_STEP);\r\n    }\r\n\r\n    /** Gets or sets current value */\r\n    public get value(): number {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: number) {\r\n        if (this._value === value) {\r\n            return;\r\n        }\r\n\r\n        this._value = Math.max(Math.min(value, this._maximum), this._minimum);\r\n        if (this._sliderThumb) {\r\n            this._sliderThumb.position.x = this._convertToPosition(this.value);\r\n        }\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    protected get start(): number {\r\n        if (!this.node) {\r\n            return -SLIDER_SCALING / 2;\r\n        }\r\n\r\n        return this._sliderBar.position.x - this._sliderBar.scaling.x / 2;\r\n    }\r\n\r\n    protected get end(): number {\r\n        if (!this.node) {\r\n            return SLIDER_SCALING / 2;\r\n        }\r\n\r\n        return this._sliderBar.position.x + this._sliderBar.scaling.x / 2;\r\n    }\r\n\r\n    /**\r\n     * Gets the slider bar material used by this control\r\n     */\r\n    public get sliderBarMaterial(): MRDLSliderBarMaterial {\r\n        return this._sliderBarMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the slider thumb material used by this control\r\n     */\r\n    public get sliderThumbMaterial(): MRDLSliderThumbMaterial {\r\n        return this._sliderThumbMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the slider backplate material used by this control\r\n     */\r\n    public get sliderBackplateMaterial(): MRDLBackplateMaterial {\r\n        return this._sliderBackplateMaterial;\r\n    }\r\n\r\n    /** Sets a boolean indicating if the control is visible */\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n\r\n        this.node?.setEnabled(value);\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        const sliderBackplate = CreateBox(\r\n            `${this.name}_sliderbackplate`,\r\n            {\r\n                width: 1.0,\r\n                height: 1.0,\r\n                depth: 1.0,\r\n            },\r\n            scene\r\n        );\r\n        sliderBackplate.isPickable = false;\r\n        sliderBackplate.visibility = 0;\r\n        sliderBackplate.scaling = new Vector3(1, 0.5, 0.8);\r\n\r\n        SceneLoader.ImportMeshAsync(undefined, Slider3D.MODEL_BASE_URL, Slider3D.MODEL_FILENAME, scene).then((result) => {\r\n            // make all meshes not pickable. Required meshes' pickable state will be set later.\r\n            result.meshes.forEach((m) => {\r\n                m.isPickable = false;\r\n            });\r\n            const sliderBackplateModel = result.meshes[1];\r\n            const sliderBarModel = result.meshes[1].clone(`${this.name}_sliderbar`, sliderBackplate);\r\n            const sliderThumbModel = result.meshes[1].clone(`${this.name}_sliderthumb`, sliderBackplate);\r\n            sliderBackplateModel.visibility = 0;\r\n\r\n            if (this._sliderBackplateVisible) {\r\n                sliderBackplateModel.visibility = 1;\r\n                sliderBackplateModel.name = `${this.name}_sliderbackplate`;\r\n                sliderBackplateModel.scaling.x = 1;\r\n                sliderBackplateModel.scaling.z = 0.2;\r\n                sliderBackplateModel.parent = sliderBackplate;\r\n                if (this._sliderBackplateMaterial) {\r\n                    sliderBackplateModel.material = this._sliderBackplateMaterial;\r\n                }\r\n                this._sliderBackplate = sliderBackplateModel;\r\n            }\r\n\r\n            if (sliderBarModel) {\r\n                sliderBarModel.parent = sliderBackplate;\r\n                sliderBarModel.position.z = -0.1;\r\n                sliderBarModel.scaling = new Vector3(SLIDER_SCALING - SLIDER_MARGIN, 0.04, 0.3);\r\n                if (this._sliderBarMaterial) {\r\n                    sliderBarModel.material = this._sliderBarMaterial;\r\n                }\r\n                this._sliderBar = sliderBarModel;\r\n            }\r\n\r\n            if (sliderThumbModel) {\r\n                sliderThumbModel.parent = sliderBackplate;\r\n                sliderThumbModel.isPickable = true;\r\n                sliderThumbModel.position.z = -0.115;\r\n                sliderThumbModel.scaling = new Vector3(0.025, 0.3, 0.6);\r\n                sliderThumbModel.position.x = this._convertToPosition(this.value);\r\n                sliderThumbModel.addBehavior(this._createBehavior());\r\n                if (this._sliderThumbMaterial) {\r\n                    sliderThumbModel.material = this._sliderThumbMaterial;\r\n                }\r\n                this._sliderThumb = sliderThumbModel;\r\n            }\r\n\r\n            this._injectGUI3DReservedDataStore(sliderBackplate).control = this;\r\n            sliderBackplate.getChildMeshes().forEach((mesh) => {\r\n                this._injectGUI3DReservedDataStore(mesh).control = this;\r\n            });\r\n        });\r\n\r\n        this._affectMaterial(sliderBackplate);\r\n        return sliderBackplate;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        this._sliderBackplateMaterial = this._sliderBackplateMaterial ?? new MRDLBackplateMaterial(`${this.name}_sliderbackplate_material`, mesh.getScene());\r\n        this._sliderBarMaterial = this._sliderBarMaterial ?? new MRDLSliderBarMaterial(`${this.name}_sliderbar_material`, mesh.getScene());\r\n        this._sliderThumbMaterial = this._sliderThumbMaterial ?? new MRDLSliderThumbMaterial(`${this.name}_sliderthumb_material`, mesh.getScene());\r\n    }\r\n\r\n    private _createBehavior(): PointerDragBehavior {\r\n        const pointerDragBehavior = new PointerDragBehavior({ dragAxis: Vector3.Right() });\r\n        pointerDragBehavior.moveAttached = false;\r\n\r\n        pointerDragBehavior.onDragStartObservable.add(() => {\r\n            this._draggedPosition = this._sliderThumb.position.x;\r\n        });\r\n\r\n        pointerDragBehavior.onDragObservable.add((event) => {\r\n            this._draggedPosition += event.dragDistance / this.scaling.x;\r\n            this.value = this._convertToValue(this._draggedPosition);\r\n        });\r\n\r\n        return pointerDragBehavior;\r\n    }\r\n\r\n    private _convertToPosition(value: number): number {\r\n        const position = ((value - this.minimum) / (this.maximum - this.minimum)) * (this.end - this.start) + this.start;\r\n        return Math.min(Math.max(position, this.start), this.end);\r\n    }\r\n\r\n    private _convertToValue(position: number): number {\r\n        let value = ((position - this.start) / (this.end - this.start)) * (this.maximum - this.minimum);\r\n        value = this.step ? Math.round(value / this.step) * this.step : value;\r\n\r\n        return Math.max(Math.min(this.minimum + value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n        this._sliderBar?.dispose();\r\n        this._sliderThumb?.dispose();\r\n        this._sliderBarMaterial?.dispose();\r\n        this._sliderThumbMaterial?.dispose();\r\n        this._sliderBackplate?.dispose();\r\n        this._sliderBackplateMaterial?.dispose();\r\n    }\r\n}\r\n","import { Tools } from \"core/Misc/tools\";\r\nimport { Matrix, TmpVectors, Vector3 } from \"core/Maths/math.vector\";\r\nimport type { float } from \"core/types\";\r\n\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport type { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\nimport { Axis, Space } from \"core/Maths/math.axis\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a sphere\r\n */\r\nexport class SpherePanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the sphere where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        const mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        const newPos = this._sphericalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new Vector3(2 * newPos.x, 2 * newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new Vector3(-newPos.x, -newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(Axis.Y, Math.PI, Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _sphericalMapping(source: Vector3) {\r\n        const newPos = new Vector3(0, 0, this._radius);\r\n\r\n        const xAngle = source.y / this._radius;\r\n        const yAngle = -(source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, xAngle, 0, TmpVectors.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, TmpVectors.Matrix[0]);\r\n    }\r\n}\r\n","import { Tools } from \"core/Misc/tools\";\r\nimport { Matrix, TmpVectors, Vector3 } from \"core/Maths/math.vector\";\r\n\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a stack panel in 3D on XY plane\r\n */\r\nexport class StackPanel3D extends Container3D {\r\n    private _isVertical = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the stack panel is vertical or horizontal (horizontal by default)\r\n     */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0.1;\r\n\r\n    /**\r\n     * Creates new StackPanel\r\n     * @param isVertical\r\n     */\r\n    public constructor(isVertical = false) {\r\n        super();\r\n\r\n        this._isVertical = isVertical;\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        let width = 0;\r\n        let height = 0;\r\n        let controlCount = 0;\r\n        const extendSizes = [];\r\n\r\n        const currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (const child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, TmpVectors.Matrix[0]);\r\n\r\n            const boundingBox = child.mesh.getBoundingInfo().boundingBox;\r\n            const extendSize = Vector3.TransformNormal(boundingBox.extendSize, TmpVectors.Matrix[0]);\r\n            extendSizes.push(extendSize);\r\n\r\n            if (this._isVertical) {\r\n                height += extendSize.y;\r\n            } else {\r\n                width += extendSize.x;\r\n            }\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            height += ((controlCount - 1) * this.margin) / 2;\r\n        } else {\r\n            width += ((controlCount - 1) * this.margin) / 2;\r\n        }\r\n\r\n        // Arrange\r\n        let offset: number;\r\n        if (this._isVertical) {\r\n            offset = -height;\r\n        } else {\r\n            offset = -width;\r\n        }\r\n\r\n        let index = 0;\r\n        for (const child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n            controlCount--;\r\n            const extendSize = extendSizes[index++];\r\n\r\n            if (this._isVertical) {\r\n                child.position.y = offset + extendSize.y;\r\n                child.position.x = 0;\r\n                offset += extendSize.y * 2;\r\n            } else {\r\n                child.position.x = offset + extendSize.x;\r\n                child.position.y = 0;\r\n                offset += extendSize.x * 2;\r\n            }\r\n\r\n            offset += controlCount > 0 ? this.margin : 0;\r\n        }\r\n    }\r\n}\r\n","import type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\n\r\nimport { TouchButton3D } from \"./touchButton3D\";\r\n\r\n/**\r\n * Class used to create an interactable object. It's a touchable 3D button using a mesh coming from the current scene\r\n * @since 5.0.0\r\n */\r\nexport class TouchMeshButton3D extends TouchButton3D {\r\n    /** @internal */\r\n    protected _currentMesh: Mesh;\r\n\r\n    /**\r\n     * Creates a new 3D button based on a mesh\r\n     * @param mesh mesh to become a 3D button. By default this is also the mesh for near interaction collision checking\r\n     * @param name defines the control name\r\n     */\r\n    constructor(mesh: Mesh, name?: string) {\r\n        super(name, mesh);\r\n\r\n        this._currentMesh = mesh;\r\n\r\n        /**\r\n         * Provides a default behavior on hover/out & up/down\r\n         * Override those function to create your own desired behavior specific to your mesh\r\n         */\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.1);\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 1.1);\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"TouchMeshButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(): TransformNode {\r\n        this._currentMesh.getChildMeshes().forEach((mesh) => {\r\n            this._injectGUI3DReservedDataStore(mesh).control = this;\r\n        });\r\n\r\n        return this._currentMesh;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected _affectMaterial(mesh: AbstractMesh) {}\r\n}\r\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"mrdlBackglowPixelShader\";\nconst shader = `uniform vec3 cameraPosition;\rvarying vec3 vNormal;\rvarying vec2 vUV;\runiform float _Bevel_Radius_;\runiform float _Line_Width_;\runiform bool _Absolute_Sizes_;\runiform float _Tuning_Motion_;\runiform float _Motion_;\runiform float _Max_Intensity_;\runiform float _Intensity_Fade_In_Exponent_;\runiform float _Outer_Fuzz_Start_;\runiform float _Outer_Fuzz_End_;\runiform vec4 _Color_;\runiform vec4 _Inner_Color_;\runiform float _Blend_Exponent_;\runiform float _Falloff_;\runiform float _Bias_;\rfloat BiasFunc(float b,float v) {\rreturn pow(v,log(clamp(b,0.001,0.999))/log(0.5));\r}\rvoid Fuzzy_Round_Rect_B33(\rfloat Size_X,\rfloat Size_Y,\rfloat Radius_X,\rfloat Radius_Y,\rfloat Line_Width,\rvec2 UV,\rfloat Outer_Fuzz,\rfloat Max_Outer_Fuzz,\rout float Rect_Distance,\rout float Inner_Distance)\r{\rvec2 halfSize=vec2(Size_X,Size_Y)*0.5;\rvec2 r=max(min(vec2(Radius_X,Radius_Y),halfSize),vec2(0.001,0.001));\rfloat radius=min(r.x,r.y)-Max_Outer_Fuzz;\rvec2 v=abs(UV);\rvec2 nearestp=min(v,halfSize-r);\rfloat d=distance(nearestp,v);\rInner_Distance=clamp(1.0-(radius-d)/Line_Width,0.0,1.0);\rRect_Distance=clamp(1.0-(d-radius)/Outer_Fuzz,0.0,1.0)*Inner_Distance;\r}\rvoid main()\r{\rfloat X_Q42;\rfloat Y_Q42;\rX_Q42=vNormal.x;\rY_Q42=vNormal.y;\rfloat MaxAB_Q24=max(_Tuning_Motion_,_Motion_);\rfloat Sqrt_F_Q27=sqrt(MaxAB_Q24);\rfloat Power_Q43=pow(MaxAB_Q24,_Intensity_Fade_In_Exponent_);\rfloat Value_At_T_Q26=mix(_Outer_Fuzz_Start_,_Outer_Fuzz_End_,Sqrt_F_Q27);\rfloat Product_Q23=_Max_Intensity_*Power_Q43;\rfloat Rect_Distance_Q33;\rfloat Inner_Distance_Q33;\rFuzzy_Round_Rect_B33(X_Q42,Y_Q42,_Bevel_Radius_,_Bevel_Radius_,_Line_Width_,vUV,Value_At_T_Q26,_Outer_Fuzz_Start_,Rect_Distance_Q33,Inner_Distance_Q33);\rfloat Power_Q44=pow(Inner_Distance_Q33,_Blend_Exponent_);\rfloat Result_Q45=pow(BiasFunc(_Bias_,Rect_Distance_Q33),_Falloff_);\rvec4 Color_At_T_Q25=mix(_Inner_Color_,_Color_,Power_Q44);\rfloat Product_Q22=Result_Q45*Product_Q23;\rvec4 Result_Q28=Product_Q22*Color_At_T_Q25;\rvec4 Out_Color=Result_Q28;\rfloat Clip_Threshold=0.0;\rgl_FragColor=Out_Color;\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const mrdlBackglowPixelShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"mrdlBackglowVertexShader\";\nconst shader = `uniform mat4 world;\runiform mat4 viewProjection;\runiform vec3 cameraPosition;\rattribute vec3 position;\rattribute vec3 normal;\rattribute vec2 uv;\rattribute vec3 tangent;\runiform float _Bevel_Radius_;\runiform float _Line_Width_;\runiform bool _Absolute_Sizes_;\runiform float _Tuning_Motion_;\runiform float _Motion_;\runiform float _Max_Intensity_;\runiform float _Intensity_Fade_In_Exponent_;\runiform float _Outer_Fuzz_Start_;\runiform float _Outer_Fuzz_End_;\runiform vec4 _Color_;\runiform vec4 _Inner_Color_;\runiform float _Blend_Exponent_;\runiform float _Falloff_;\runiform float _Bias_;\rvarying vec3 vNormal;\rvarying vec2 vUV;\rvoid main()\r{\rvec3 Dir_World_Q41=(world*vec4(tangent,0.0)).xyz;\rvec3 Dir_World_Q40=(world*vec4((cross(normal,tangent)),0.0)).xyz;\rfloat MaxAB_Q24=max(_Tuning_Motion_,_Motion_);\rfloat Length_Q16=length(Dir_World_Q41);\rfloat Length_Q17=length(Dir_World_Q40);\rbool Greater_Than_Q37=MaxAB_Q24>0.0;\rvec3 Sizes_Q35;\rvec2 XY_Q35;\rSizes_Q35=(_Absolute_Sizes_ ? vec3(Length_Q16,Length_Q17,0) : vec3(Length_Q16/Length_Q17,1,0));\rXY_Q35=(uv-vec2(0.5,0.5))*Sizes_Q35.xy;\rvec3 Result_Q38=Greater_Than_Q37 ? position : vec3(0,0,0);\rvec3 Pos_World_Q39=(world*vec4(Result_Q38,1.0)).xyz;\rvec3 Position=Pos_World_Q39;\rvec3 Normal=Sizes_Q35;\rvec2 UV=XY_Q35;\rvec3 Tangent=vec3(0,0,0);\rvec3 Binormal=vec3(0,0,0);\rvec4 Color=vec4(1,1,1,1);\rgl_Position=viewProjection*vec4(Position,1);\rvNormal=Normal;\rvUV=UV;\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const mrdlBackglowVertexShader = { name, shader };\n","import type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\n\r\nimport { Color4 } from \"core/Maths/math.color\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"core/Materials/materialHelper\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { SerializationHelper, serialize } from \"core/Misc/decorators\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\n\r\nimport \"./shaders/mrdlBackglow.fragment\";\r\nimport \"./shaders/mrdlBackglow.vertex\";\r\n\r\n/** @hidden */\r\nclass MRDLBackglowMaterialDefines extends MaterialDefines {\r\n    constructor() {\r\n        super();\r\n        this._needNormals = true;\r\n        this._needUVs = true;\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class MRDLBackglowMaterial extends PushMaterial {\r\n    /**\r\n     * Gets or sets the bevel radius on the backglow. If this value is changed, update the lineWidth to match.\r\n     */\r\n    @serialize()\r\n    public bevelRadius = 0.16;\r\n\r\n    /**\r\n     * Gets or sets the line width of the backglow.\r\n     */\r\n    @serialize()\r\n    public lineWidth = 0.16;\r\n\r\n    /**\r\n     * Gets or sets whether to use absolute sizes when calculating effects on the backglow.\r\n     * Since desktop and VR/AR have different relative sizes, it's usually best to keep this false.\r\n     */\r\n    @serialize()\r\n    public absoluteSizes = false;\r\n\r\n    /**\r\n     * Gets or sets the tuning motion of the backglow.\r\n     */\r\n    @serialize()\r\n    public tuningMotion = 0.0;\r\n\r\n    /**\r\n     * Gets or sets the motion of the backglow.\r\n     */\r\n    @serialize()\r\n    public motion = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the maximum intensity of the backglow.\r\n     */\r\n    @serialize()\r\n    public maxIntensity = 0.7;\r\n\r\n    /**\r\n     * Gets or sets the fade-in exponent of the intensity of the backglow.\r\n     */\r\n    @serialize()\r\n    public intensityFadeInExponent = 2.0;\r\n\r\n    /**\r\n     * Gets or sets the start of the outer fuzz effect on the backglow.\r\n     */\r\n    @serialize()\r\n    public outerFuzzStart = 0.04;\r\n\r\n    /**\r\n     * Gets or sets the end of the outer fuzz effect on the backglow.\r\n     */\r\n    @serialize()\r\n    public outerFuzzEnd = 0.04;\r\n\r\n    /**\r\n     * Gets or sets the color of the backglow.\r\n     */\r\n    @serialize()\r\n    public color: Color4 = new Color4(0.682353, 0.698039, 1, 1);\r\n\r\n    /**\r\n     * Gets or sets the inner color of the backglow.\r\n     */\r\n    @serialize()\r\n    public innerColor: Color4 = new Color4(0.356863, 0.392157, 0.796078, 1);\r\n\r\n    /**\r\n     * Gets or sets the blend exponent of the backglow.\r\n     */\r\n    @serialize()\r\n    public blendExponent = 1.5;\r\n\r\n    /**\r\n     * Gets or sets the falloff of the backglow.\r\n     */\r\n    @serialize()\r\n    public falloff = 2.0;\r\n\r\n    /**\r\n     * Gets or sets the bias of the backglow.\r\n     */\r\n    @serialize()\r\n    public bias = 0.5;\r\n\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n        this.alphaMode = Constants.ALPHA_ADD;\r\n        this.disableDepthWrite = true;\r\n        this.backFaceCulling = false;\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new MRDLBackglowMaterialDefines();\r\n        }\r\n\r\n        const defines = <MRDLBackglowMaterialDefines>subMesh.materialDefines;\r\n        const scene = this.getScene();\r\n\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, false);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\r\n\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            if (defines.TANGENT) {\r\n                attribs.push(VertexBuffer.TangentKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            const shaderName = \"mrdlBackglow\";\r\n            const join = defines.toString();\r\n\r\n            const uniforms = [\r\n                \"world\",\r\n                \"worldView\",\r\n                \"worldViewProjection\",\r\n                \"view\",\r\n                \"projection\",\r\n                \"viewProjection\",\r\n                \"cameraPosition\",\r\n                \"_Bevel_Radius_\",\r\n                \"_Line_Width_\",\r\n                \"_Absolute_Sizes_\",\r\n                \"_Tuning_Motion_\",\r\n                \"_Motion_\",\r\n                \"_Max_Intensity_\",\r\n                \"_Intensity_Fade_In_Exponent_\",\r\n                \"_Outer_Fuzz_Start_\",\r\n                \"_Outer_Fuzz_End_\",\r\n                \"_Color_\",\r\n                \"_Inner_Color_\",\r\n                \"_Blend_Exponent_\",\r\n                \"_Falloff_\",\r\n                \"_Bias_\",\r\n            ];\r\n            const samplers: string[] = [];\r\n            const uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4,\r\n            });\r\n\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: { maxSimultaneousLights: 4 },\r\n                    },\r\n                    engine\r\n                ),\r\n                defines\r\n            );\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const scene = this.getScene();\r\n\r\n        const defines = <MRDLBackglowMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n        this._activeEffect.setVector3(\"cameraPosition\", scene.activeCamera!.position);\r\n\r\n        // \"Rounded Rectangle\"\r\n        this._activeEffect.setFloat(\"_Bevel_Radius_\", this.bevelRadius);\r\n        this._activeEffect.setFloat(\"_Line_Width_\", this.lineWidth);\r\n        this._activeEffect.setFloat(\"_Absolute_Sizes_\", this.absoluteSizes ? 1.0 : 0.0);\r\n\r\n        // \"Animation\"\r\n        this._activeEffect.setFloat(\"_Tuning_Motion_\", this.tuningMotion);\r\n        this._activeEffect.setFloat(\"_Motion_\", this.motion);\r\n        this._activeEffect.setFloat(\"_Max_Intensity_\", this.maxIntensity);\r\n        this._activeEffect.setFloat(\"_Intensity_Fade_In_Exponent_\", this.intensityFadeInExponent);\r\n        this._activeEffect.setFloat(\"_Outer_Fuzz_Start_\", this.outerFuzzStart);\r\n        this._activeEffect.setFloat(\"_Outer_Fuzz_End_\", this.outerFuzzEnd);\r\n\r\n        // \"Color\"\r\n        this._activeEffect.setDirectColor4(\"_Color_\", this.color);\r\n        this._activeEffect.setDirectColor4(\"_Inner_Color_\", this.innerColor);\r\n        this._activeEffect.setFloat(\"_Blend_Exponent_\", this.blendExponent);\r\n\r\n        // \"Inner Transition\"\r\n        this._activeEffect.setFloat(\"_Falloff_\", this.falloff);\r\n        this._activeEffect.setFloat(\"_Bias_\", this.bias);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    /**\r\n     * Get the list of animatables in the material.\r\n     * @returns the list of animatables object used in the material\r\n     */\r\n    public getAnimatables(): IAnimatable[] {\r\n        return [];\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): MRDLBackglowMaterial {\r\n        return SerializationHelper.Clone(() => new MRDLBackglowMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): unknown {\r\n        const serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.MRDLBackglowMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"MRDLBackglowMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): MRDLBackglowMaterial {\r\n        return SerializationHelper.Parse(() => new MRDLBackglowMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.MRDLBackglowMaterial\", MRDLBackglowMaterial);\r\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\n\r\nimport { Color4 } from \"core/Maths/math.color\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"core/Materials/materialHelper\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { SerializationHelper, serialize } from \"core/Misc/decorators\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\n\r\nimport \"./shaders/mrdlFrontplate.fragment\";\r\nimport \"./shaders/mrdlFrontplate.vertex\";\r\n\r\n/** @hidden */\r\nclass MRDLFrontplateMaterialDefines extends MaterialDefines {\r\n    /**\r\n     * Sets default value for \"SMOOTH_EDGES\"\r\n     */\r\n    public SMOOTH_EDGES = true;\r\n\r\n    constructor() {\r\n        super();\r\n        this._needNormals = true;\r\n        this._needUVs = true;\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class MRDLFrontplateMaterial extends PushMaterial {\r\n    /**\r\n     * Gets or sets the corner radius on the frontplate. If this value is changed, update the lineWidth to match.\r\n     */\r\n    @serialize()\r\n    public radius = 0.12;\r\n\r\n    /**\r\n     * Gets or sets the line width of the frontplate.\r\n     */\r\n    @serialize()\r\n    public lineWidth = 0.01;\r\n\r\n    /**\r\n     * Gets or sets whether the scale is relative to the frontplate height.\r\n     */\r\n    @serialize()\r\n    public relativeToHeight = false;\r\n\r\n    /** @hidden */\r\n    public _filterWidth = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the edge color of the frontplate.\r\n     */\r\n    @serialize()\r\n    public edgeColor: Color4 = new Color4(0.53, 0.53, 0.53, 1);\r\n\r\n    /**\r\n     * Gets or sets whether to enable blob effects on the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobEnable = true;\r\n\r\n    /**\r\n     * Gets or sets the blob position on the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobPosition: Vector3 = new Vector3(100, 100, 100);\r\n\r\n    /**\r\n     * Gets or sets the blob intensity of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobIntensity = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the blob near size of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobNearSize = 0.032;\r\n\r\n    /**\r\n     * Gets or sets the blob far size of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobFarSize = 0.048;\r\n\r\n    /**\r\n     * Gets or sets the blob near distance of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobNearDistance = 0.008;\r\n\r\n    /**\r\n     * Gets or sets the blob far distance of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobFarDistance = 0.064;\r\n\r\n    /**\r\n     * Gets or sets the blob fade length of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobFadeLength = 0.04;\r\n\r\n    /**\r\n     * Gets or sets the blob inner fade of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobInnerFade = 0.01;\r\n\r\n    /**\r\n     * Gets or sets the blob pulse of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobPulse = 0.0;\r\n\r\n    /**\r\n     * Gets or sets the blob fade effect on the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobFade = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the maximum size of the blob pulse on the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobPulseMaxSize = 0.05;\r\n\r\n    /**\r\n     * Gets or sets whether to enable extra blob effects of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobEnable2 = true;\r\n\r\n    /**\r\n     * Gets or sets blob2 position of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobPosition2: Vector3 = new Vector3(10, 10.1, -0.6);\r\n\r\n    /**\r\n     * Gets or sets the blob2 near size of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobNearSize2 = 0.008;\r\n\r\n    /**\r\n     * Gets or sets the blob2 inner fade of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobInnerFade2 = 0.1;\r\n\r\n    /**\r\n     * Gets or sets the blob2 pulse of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobPulse2 = 0.0;\r\n\r\n    /**\r\n     * Gets or sets the blob2 fade effect on the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobFade2 = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the gaze intensity of the frontplate.\r\n     */\r\n    @serialize()\r\n    public gazeIntensity = 0.8;\r\n\r\n    /**\r\n     * Gets or sets the gaze focus of the frontplate.\r\n     */\r\n    @serialize()\r\n    public gazeFocus = 0.0;\r\n\r\n    /**\r\n     * Gets or sets the selection fuzz of the frontplate.\r\n     */\r\n    @serialize()\r\n    public selectionFuzz = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the fade intensity of the frontplate.\r\n     */\r\n    @serialize()\r\n    public selected = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the selection fade intensity of the frontplate.\r\n     */\r\n    @serialize()\r\n    public selectionFade = 0.2;\r\n\r\n    /**\r\n     * Gets or sets the selection fade size of the frontplate.\r\n     */\r\n    @serialize()\r\n    public selectionFadeSize = 0.0;\r\n\r\n    /**\r\n     * Gets or sets the selected distance of the frontplate.\r\n     */\r\n    @serialize()\r\n    public selectedDistance = 0.08;\r\n\r\n    /**\r\n     * Gets or sets the selected fade length of the frontplate.\r\n     */\r\n    @serialize()\r\n    public selectedFadeLength = 0.08;\r\n\r\n    /**\r\n     * Gets or sets the proximity maximum intensity of the frontplate.\r\n     */\r\n    @serialize()\r\n    public proximityMaxIntensity = 0.45;\r\n\r\n    /**\r\n     * Gets or sets the proximity far distance of the frontplate.\r\n     */\r\n    @serialize()\r\n    public proximityFarDistance = 0.16;\r\n\r\n    /**\r\n     * Gets or sets the proximity near radius of the frontplate.\r\n     */\r\n    @serialize()\r\n    public proximityNearRadius = 0.016;\r\n\r\n    /**\r\n     * Gets or sets the proximity anisotropy of the frontplate.\r\n     */\r\n    @serialize()\r\n    public proximityAnisotropy = 1.0;\r\n\r\n    /**\r\n     * Gets or sets whether to use global left index on the frontplate.\r\n     */\r\n    @serialize()\r\n    public useGlobalLeftIndex = true;\r\n\r\n    /**\r\n     * Gets or sets  whether to use global right index of the frontplate.\r\n     */\r\n    @serialize()\r\n    public useGlobalRightIndex = true;\r\n\r\n    /**\r\n     * URL pointing to the texture used to define the coloring for the BLOB.\r\n     */\r\n    public static BLOB_TEXTURE_URL = \"\";\r\n\r\n    /**\r\n     * Gets or sets the opacity of the frontplate (0.0 - 1.0).\r\n     */\r\n    public fadeOut = 1.0;\r\n\r\n    private _blobTexture: Texture;\r\n\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n        this.alphaMode = Constants.ALPHA_ADD;\r\n        this.disableDepthWrite = true;\r\n        this.backFaceCulling = false;\r\n        this._blobTexture = new Texture(MRDLFrontplateMaterial.BLOB_TEXTURE_URL, scene, true, false, Texture.NEAREST_SAMPLINGMODE);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new MRDLFrontplateMaterialDefines();\r\n        }\r\n\r\n        const defines = <MRDLFrontplateMaterialDefines>subMesh.materialDefines;\r\n        const scene = this.getScene();\r\n\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, false);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\r\n\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            if (defines.TANGENT) {\r\n                attribs.push(VertexBuffer.TangentKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            const shaderName = \"mrdlFrontplate\";\r\n            const join = defines.toString();\r\n\r\n            const uniforms = [\r\n                \"world\",\r\n                \"worldView\",\r\n                \"worldViewProjection\",\r\n                \"view\",\r\n                \"projection\",\r\n                \"viewProjection\",\r\n                \"cameraPosition\",\r\n                \"_Radius_\",\r\n                \"_Line_Width_\",\r\n                \"_Relative_To_Height_\",\r\n                \"_Filter_Width_\",\r\n                \"_Edge_Color_\",\r\n                \"_Fade_Out_\",\r\n                \"_Smooth_Edges_\",\r\n                \"_Blob_Enable_\",\r\n                \"_Blob_Position_\",\r\n                \"_Blob_Intensity_\",\r\n                \"_Blob_Near_Size_\",\r\n                \"_Blob_Far_Size_\",\r\n                \"_Blob_Near_Distance_\",\r\n                \"_Blob_Far_Distance_\",\r\n                \"_Blob_Fade_Length_\",\r\n                \"_Blob_Inner_Fade_\",\r\n                \"_Blob_Pulse_\",\r\n                \"_Blob_Fade_\",\r\n                \"_Blob_Pulse_Max_Size_\",\r\n                \"_Blob_Enable_2_\",\r\n                \"_Blob_Position_2_\",\r\n                \"_Blob_Near_Size_2_\",\r\n                \"_Blob_Inner_Fade_2_\",\r\n                \"_Blob_Pulse_2_\",\r\n                \"_Blob_Fade_2_\",\r\n                \"_Gaze_Intensity_\",\r\n                \"_Gaze_Focus_\",\r\n                \"_Blob_Texture_\",\r\n                \"_Selection_Fuzz_\",\r\n                \"_Selected_\",\r\n                \"_Selection_Fade_\",\r\n                \"_Selection_Fade_Size_\",\r\n                \"_Selected_Distance_\",\r\n                \"_Selected_Fade_Length_\",\r\n                \"_Proximity_Max_Intensity_\",\r\n                \"_Proximity_Far_Distance_\",\r\n                \"_Proximity_Near_Radius_\",\r\n                \"_Proximity_Anisotropy_\",\r\n                \"Global_Left_Index_Tip_Position\",\r\n                \"Global_Right_Index_Tip_Position\",\r\n                \"_Use_Global_Left_Index_\",\r\n                \"_Use_Global_Right_Index_\",\r\n            ];\r\n            const samplers: string[] = [];\r\n            const uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4,\r\n            });\r\n\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: { maxSimultaneousLights: 4 },\r\n                    },\r\n                    engine\r\n                ),\r\n                defines\r\n            );\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const scene = this.getScene();\r\n\r\n        const defines = <MRDLFrontplateMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n        this._activeEffect.setVector3(\"cameraPosition\", scene.activeCamera!.position);\r\n\r\n        // \"Round Rect\"\r\n        this._activeEffect.setFloat(\"_Radius_\", this.radius);\r\n        this._activeEffect.setFloat(\"_Line_Width_\", this.lineWidth);\r\n        this._activeEffect.setFloat(\"_Relative_To_Height_\", this.relativeToHeight ? 1.0 : 0.0);\r\n        this._activeEffect.setFloat(\"_Filter_Width_\", this._filterWidth);\r\n        this._activeEffect.setDirectColor4(\"_Edge_Color_\", this.edgeColor);\r\n\r\n        // \"Fade\"\r\n        this._activeEffect.setFloat(\"_Fade_Out_\", this.fadeOut);\r\n\r\n        // \"Blob\"\r\n        this._activeEffect.setFloat(\"_Blob_Enable_\", this.blobEnable ? 1.0 : 0.0);\r\n        this._activeEffect.setVector3(\"_Blob_Position_\", this.blobPosition);\r\n        this._activeEffect.setFloat(\"_Blob_Intensity_\", this.blobIntensity);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Size_\", this.blobNearSize);\r\n        this._activeEffect.setFloat(\"_Blob_Far_Size_\", this.blobFarSize);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Distance_\", this.blobNearDistance);\r\n        this._activeEffect.setFloat(\"_Blob_Far_Distance_\", this.blobFarDistance);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_Length_\", this.blobFadeLength);\r\n        this._activeEffect.setFloat(\"_Blob_Inner_Fade_\", this.blobInnerFade);\r\n        this._activeEffect.setFloat(\"_Blob_Pulse_\", this.blobPulse);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_\", this.blobFade);\r\n        this._activeEffect.setFloat(\"_Blob_Pulse_Max_Size_\", this.blobPulseMaxSize);\r\n\r\n        // \"Blob 2\"\r\n        this._activeEffect.setFloat(\"_Blob_Enable_2_\", this.blobEnable2 ? 1.0 : 0.0);\r\n        this._activeEffect.setVector3(\"_Blob_Position_2_\", this.blobPosition2);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Size_2_\", this.blobNearSize2);\r\n        this._activeEffect.setFloat(\"_Blob_Inner_Fade_2_\", this.blobInnerFade2);\r\n        this._activeEffect.setFloat(\"_Blob_Pulse_2_\", this.blobPulse2);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_2_\", this.blobFade2);\r\n\r\n        // \"Gaze\"\r\n        this._activeEffect.setFloat(\"_Gaze_Intensity_\", this.gazeIntensity);\r\n        this._activeEffect.setFloat(\"_Gaze_Focus_\", this.gazeFocus);\r\n\r\n        // \"Blob Texture\"\r\n        this._activeEffect.setTexture(\"_Blob_Texture_\", this._blobTexture);\r\n\r\n        // \"Selection\"\r\n        this._activeEffect.setFloat(\"_Selection_Fuzz_\", this.selectionFuzz);\r\n        this._activeEffect.setFloat(\"_Selected_\", this.selected);\r\n        this._activeEffect.setFloat(\"_Selection_Fade_\", this.selectionFade);\r\n        this._activeEffect.setFloat(\"_Selection_Fade_Size_\", this.selectionFadeSize);\r\n        this._activeEffect.setFloat(\"_Selected_Distance_\", this.selectedDistance);\r\n        this._activeEffect.setFloat(\"_Selected_Fade_Length_\", this.selectedFadeLength);\r\n\r\n        // \"Proximity\"\r\n        this._activeEffect.setFloat(\"_Proximity_Max_Intensity_\", this.proximityMaxIntensity);\r\n        this._activeEffect.setFloat(\"_Proximity_Far_Distance_\", this.proximityFarDistance);\r\n        this._activeEffect.setFloat(\"_Proximity_Near_Radius_\", this.proximityNearRadius);\r\n        this._activeEffect.setFloat(\"_Proximity_Anisotropy_\", this.proximityAnisotropy);\r\n\r\n        // \"Global\"\r\n        this._activeEffect.setFloat(\"_Use_Global_Left_Index_\", this.useGlobalLeftIndex ? 1.0 : 0.0);\r\n        this._activeEffect.setFloat(\"_Use_Global_Right_Index_\", this.useGlobalRightIndex ? 1.0 : 0.0);\r\n\r\n        // \"Antialiasing\"\r\n        //define SMOOTH_EDGES true;\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    /**\r\n     * Get the list of animatables in the material.\r\n     * @returns the list of animatables object used in the material\r\n     */\r\n    public getAnimatables(): IAnimatable[] {\r\n        return [];\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): MRDLFrontplateMaterial {\r\n        return SerializationHelper.Clone(() => new MRDLFrontplateMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): unknown {\r\n        const serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.MRDLFrontplateMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"MRDLFrontplateMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): MRDLFrontplateMaterial {\r\n        return SerializationHelper.Parse(() => new MRDLFrontplateMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.MRDLFrontplateMaterial\", MRDLFrontplateMaterial);\r\n","import type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { Control3D } from \"../control3D\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { Vector3WithInfo } from \"../../vector3WithInfo\";\r\n\r\nimport { AdvancedDynamicTexture } from \"../../../2D/advancedDynamicTexture\";\r\nimport { Animation } from \"core/Animations/animation\";\r\nimport { AnimationGroup } from \"core/Animations/animationGroup\";\r\nimport { Color3, Color4 } from \"core/Maths/math.color\";\r\nimport { Control } from \"../../../2D/controls/control\";\r\nimport { CreatePlane } from \"core/Meshes/Builders/planeBuilder\";\r\nimport { CreateBox } from \"core/Meshes/Builders/boxBuilder\";\r\nimport { DomManagement } from \"core/Misc/domManagement\";\r\nimport { FadeInOutBehavior } from \"core/Behaviors/Meshes/fadeInOutBehavior\";\r\nimport { Grid } from \"../../../2D/controls/grid\";\r\nimport { Image } from \"../../../2D/controls/image\";\r\nimport { MRDLBackglowMaterial } from \"../../materials/mrdl/mrdlBackglowMaterial\";\r\nimport { MRDLBackplateMaterial } from \"../../materials/mrdl/mrdlBackplateMaterial\";\r\nimport { MRDLFrontplateMaterial } from \"../../materials/mrdl/mrdlFrontplateMaterial\";\r\nimport { MRDLInnerquadMaterial } from \"../../materials/mrdl/mrdlInnerquadMaterial\";\r\nimport { Rectangle } from \"../../../2D/controls/rectangle\";\r\nimport { SceneLoader } from \"core/Loading/sceneLoader\";\r\nimport { StackPanel } from \"../../../2D/controls/stackPanel\";\r\nimport { StandardMaterial } from \"core/Materials/standardMaterial\";\r\nimport { TextBlock } from \"../../../2D/controls/textBlock\";\r\nimport { TouchButton3D } from \"../touchButton3D\";\r\nimport { TransformNode } from \"core/Meshes/transformNode\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\n\r\n/**\r\n * Class used to create the mrtkv3 button\r\n */\r\nexport class TouchHolographicButton extends TouchButton3D {\r\n    /**\r\n     * Base Url for the frontplate model.\r\n     */\r\n    public static MRTK_ASSET_BASE_URL = \"https://assets.babylonjs.com/meshes/MRTK/\";\r\n\r\n    /**\r\n     * File name for the frontplate model.\r\n     */\r\n    public static FRONTPLATE_MODEL_FILENAME = \"mrtk-fluent-frontplate.glb\";\r\n\r\n    /**\r\n     * File name for the backplate model.\r\n     */\r\n    public static BACKPLATE_MODEL_FILENAME = \"mrtk-fluent-backplate.glb\";\r\n\r\n    /**\r\n     * File name for the backglow model.\r\n     */\r\n    public static BACKGLOW_MODEL_FILENAME = \"mrtk-fluent-button.glb\";\r\n\r\n    /**\r\n     * File name for the innerquad model.\r\n     */\r\n    public static INNERQUAD_MODEL_FILENAME = \"SlateProximity.glb\";\r\n\r\n    /**\r\n     * Gets or sets the horizontal scaling for the button.\r\n     */\r\n    public width = 1;\r\n\r\n    /**\r\n     * Gets or sets the vertical scaling for the button.\r\n     */\r\n    public height = 1;\r\n\r\n    /**\r\n     * Gets or sets the bevel radius for the button.\r\n     */\r\n    public radius = 0.14;\r\n\r\n    /**\r\n     * Gets or sets the font size of the button text in pixels.\r\n     * This is only adjustable for a button with width to height ratio greater than 1.\r\n     */\r\n    public textSizeInPixels = 18;\r\n\r\n    /**\r\n     * Gets or sets the size of the button image in pixels.\r\n     * This is only adjustable for a button with width to height ratio greater than 1.\r\n     */\r\n    public imageSizeInPixels = 40;\r\n\r\n    /**\r\n     * Gets or sets the color of the button plate.\r\n     */\r\n    public plateMaterialColor = new Color3(0.4, 0.4, 0.4);\r\n\r\n    // Shared variables for meshes\r\n    /**\r\n     * Gets or sets the depth of the button's front plate.\r\n     * This variable determines the z scaling and z position for some of the button's meshes.\r\n     */\r\n    public frontPlateDepth = 0.2;\r\n\r\n    /**\r\n     * Gets or sets the depth of the button's back plate.\r\n     * This variable determines the z scaling and z position for some of the button's meshes.\r\n     */\r\n    public backPlateDepth = 0.04;\r\n\r\n    /**\r\n     * Gets or sets the offset value for button's back glow.\r\n     * This variable determines the x, y scaling of the button's meshes.\r\n     */\r\n    public backGlowOffset = 0.1;\r\n\r\n    /**\r\n     * Gets or sets the value that determines the z scaling and z position for the innerQuad and BackGlow meshes.\r\n     */\r\n    public flatPlaneDepth = 0.001;\r\n\r\n    /**\r\n     * Gets or sets the radius for FrontMaterial and innerQuadMaterial.\r\n     */\r\n    public innerQuadRadius = this.radius - 0.04;\r\n\r\n    /**\r\n     * Gets or sets the color for innerQuadMaterial.\r\n     */\r\n    public innerQuadColor = new Color4(0, 0, 0, 0);\r\n\r\n    /**\r\n     * Gets or sets the color for innerQuadMaterial for when it is toggled.\r\n     */\r\n    public innerQuadToggledColor = new Color4(0.5197843, 0.6485234, 0.9607843, 0.6);\r\n\r\n    /**\r\n     * Gets or sets the color for innerQuadMaterial for when it is hovered.\r\n     */\r\n    public innerQuadHoverColor = new Color4(1, 1, 1, 0.05);\r\n\r\n    /**\r\n     * Gets or sets the color for innerQuadMaterial for when it is toggled and hovered.\r\n     */\r\n    public innerQuadToggledHoverColor = new Color4(0.5197843, 0.6485234, 0.9607843, 1);\r\n\r\n    // Meshes\r\n    private _backPlate: AbstractMesh;\r\n    private _textPlate: Mesh;\r\n    private _frontPlate: AbstractMesh;\r\n    private _backGlow: AbstractMesh;\r\n    private _innerQuad: AbstractMesh;\r\n    private _collisionPlate: AbstractMesh;\r\n    private _frontPlateCollisionMesh: AbstractMesh;\r\n    private _isBackplateVisible = true;\r\n\r\n    // Content\r\n    private _text: string;\r\n    private _subtext: string;\r\n    private _imageUrl: string;\r\n\r\n    // Materials\r\n    private _shareMaterials = true;\r\n    private _frontMaterial: MRDLFrontplateMaterial;\r\n    private _backMaterial: MRDLBackplateMaterial;\r\n    private _backGlowMaterial: MRDLBackglowMaterial;\r\n    private _innerQuadMaterial: MRDLInnerquadMaterial;\r\n    private _plateMaterial: StandardMaterial;\r\n\r\n    // Events\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<Vector3>>>;\r\n    private _pointerClickObserver: Nullable<Observer<Vector3WithInfo>>;\r\n    private _pointerEnterObserver: Nullable<Observer<Control3D>>;\r\n    private _pointerOutObserver: Nullable<Observer<Control3D>>;\r\n    private _toggleObserver: Nullable<Observer<boolean>>;\r\n\r\n    // Tooltip\r\n    private _tooltipFade: Nullable<FadeInOutBehavior>;\r\n    private _tooltipTextBlock: Nullable<TextBlock>;\r\n    private _tooltipTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _tooltipMesh: Nullable<Mesh>;\r\n    private _tooltipHoverObserver: Nullable<Observer<Control3D>>;\r\n    private _tooltipOutObserver: Nullable<Observer<Control3D>>;\r\n\r\n    private _disposeTooltip() {\r\n        this._tooltipFade = null;\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.dispose();\r\n        }\r\n        if (this._tooltipTexture) {\r\n            this._tooltipTexture.dispose();\r\n        }\r\n        if (this._tooltipMesh) {\r\n            this._tooltipMesh.dispose();\r\n        }\r\n        this.onPointerEnterObservable.remove(this._tooltipHoverObserver);\r\n        this.onPointerOutObservable.remove(this._tooltipOutObserver);\r\n    }\r\n\r\n    /**\r\n     * Rendering ground id of all the mesh in the button\r\n     */\r\n    public set renderingGroupId(id: number) {\r\n        this._backPlate.renderingGroupId = id;\r\n        this._textPlate.renderingGroupId = id;\r\n        this._frontPlate.renderingGroupId = id;\r\n        this._backGlow.renderingGroupId = id;\r\n        this._innerQuad.renderingGroupId = id;\r\n\r\n        if (this._tooltipMesh) {\r\n            this._tooltipMesh.renderingGroupId = id;\r\n        }\r\n    }\r\n    public get renderingGroupId(): number {\r\n        return this._backPlate.renderingGroupId;\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh used to render this control\r\n     */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        return this._backPlate as AbstractMesh;\r\n    }\r\n\r\n    /**\r\n     * Text to be displayed on the tooltip shown when hovering on the button. When set to null tooltip is disabled. (Default: null)\r\n     * Set this property after adding the button to the GUI3DManager\r\n     */\r\n    public set tooltipText(text: Nullable<string>) {\r\n        if (!text) {\r\n            this._disposeTooltip();\r\n            return;\r\n        }\r\n        if (!this._tooltipFade) {\r\n            const rightHandedScene = this._backPlate._scene.useRightHandedSystem;\r\n            // Create tooltip with mesh and text\r\n            this._tooltipMesh = CreatePlane(\"\", { size: 1 }, this._backPlate._scene);\r\n            this._tooltipMesh.position = Vector3.Down().scale(0.7).add(Vector3.Forward(rightHandedScene).scale(-0.15));\r\n            this._tooltipMesh.isPickable = false;\r\n            this._tooltipMesh.parent = this._frontPlateCollisionMesh;\r\n\r\n            // Create text texture for the tooltip\r\n            this._tooltipTexture = AdvancedDynamicTexture.CreateForMesh(this._tooltipMesh);\r\n            const tooltipBackground = new Rectangle();\r\n            tooltipBackground.height = 0.25;\r\n            tooltipBackground.width = 0.8;\r\n            tooltipBackground.cornerRadius = 25;\r\n            tooltipBackground.color = \"#ffffff\";\r\n            tooltipBackground.thickness = 20;\r\n            tooltipBackground.background = \"#060668\";\r\n            this._tooltipTexture.addControl(tooltipBackground);\r\n\r\n            this._tooltipTextBlock = new TextBlock();\r\n            this._tooltipTextBlock.color = \"white\";\r\n            this._tooltipTextBlock.fontSize = 100;\r\n            this._tooltipTexture.addControl(this._tooltipTextBlock);\r\n\r\n            // Add hover action to tooltip\r\n            this._tooltipFade = new FadeInOutBehavior();\r\n            this._tooltipFade.delay = 500;\r\n            this._tooltipMesh.addBehavior(this._tooltipFade);\r\n            this._tooltipHoverObserver = this.onPointerEnterObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(true);\r\n                }\r\n            });\r\n            this._tooltipOutObserver = this.onPointerOutObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(false);\r\n                }\r\n            });\r\n        }\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.text = text;\r\n        }\r\n    }\r\n\r\n    public get tooltipText() {\r\n        return this._tooltipTextBlock?.text || null;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text for the button\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n\r\n        this._text = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets subtext for a button with larger width\r\n     */\r\n    public get subtext(): string {\r\n        return this._subtext;\r\n    }\r\n\r\n    public set subtext(value: string) {\r\n        if (this._subtext === value) {\r\n            return;\r\n        }\r\n\r\n        this._subtext = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image url for the button\r\n     */\r\n    public get imageUrl(): string {\r\n        return this._imageUrl;\r\n    }\r\n\r\n    public set imageUrl(value: string) {\r\n        if (this._imageUrl === value) {\r\n            return;\r\n        }\r\n\r\n        this._imageUrl = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets the back material used by this button\r\n     */\r\n    public get backMaterial(): MRDLBackplateMaterial {\r\n        return this._backMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the front material used by this button\r\n     */\r\n    public get frontMaterial(): MRDLFrontplateMaterial {\r\n        return this._frontMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the back glow material used by this button\r\n     */\r\n    public get backGlowMaterial(): MRDLBackglowMaterial {\r\n        return this._backGlowMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the inner quad material used by this button\r\n     */\r\n    public get innerQuadMaterial(): MRDLInnerquadMaterial {\r\n        return this._innerQuadMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the plate material used by this button\r\n     */\r\n    public get plateMaterial(): StandardMaterial {\r\n        return this._plateMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this button shares its material with other V3 Buttons\r\n     */\r\n    public get shareMaterials(): boolean {\r\n        return this._shareMaterials;\r\n    }\r\n\r\n    /**\r\n     * Sets whether the backplate is visible or hidden. Hiding the backplate is not recommended without some sort of replacement\r\n     */\r\n    public set isBackplateVisible(isVisible: boolean) {\r\n        if (this.mesh && this._backMaterial) {\r\n            if (isVisible && !this._isBackplateVisible) {\r\n                this._backPlate.visibility = 1;\r\n            } else if (!isVisible && this._isBackplateVisible) {\r\n                this._backPlate.visibility = 0;\r\n            }\r\n        }\r\n\r\n        this._isBackplateVisible = isVisible;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     * @param shareMaterials\r\n     */\r\n    constructor(name?: string, shareMaterials = true) {\r\n        super(name);\r\n\r\n        this._shareMaterials = shareMaterials;\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            if (this._frontPlate && this._textPlate && !this.isToggleButton) {\r\n                this._performEnterExitAnimation(1);\r\n            }\r\n\r\n            if (this.isToggleButton && this._innerQuadMaterial) {\r\n                if (this.isToggled) {\r\n                    this._innerQuadMaterial.color = this.innerQuadToggledHoverColor;\r\n                } else {\r\n                    this._innerQuadMaterial.color = this.innerQuadHoverColor;\r\n                }\r\n            }\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (this._frontPlate && this._textPlate && !this.isToggleButton) {\r\n                this._performEnterExitAnimation(-0.8);\r\n            }\r\n\r\n            if (this.isToggleButton && this._innerQuadMaterial) {\r\n                this._onToggle(this.isToggled);\r\n            }\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            // Do nothing\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            // Do nothing\r\n        };\r\n\r\n        this._pointerClickObserver = this.onPointerClickObservable.add(() => {\r\n            if (this._frontPlate && this._backGlow && !this.isActiveNearInteraction) {\r\n                this._performClickAnimation();\r\n            }\r\n\r\n            if (this.isToggleButton && this._innerQuadMaterial) {\r\n                this._onToggle(this.isToggled);\r\n            }\r\n        });\r\n\r\n        this._pointerEnterObserver = this.onPointerEnterObservable.add(() => {\r\n            this.pointerEnterAnimation();\r\n        });\r\n\r\n        this._pointerOutObserver = this.onPointerOutObservable.add(() => {\r\n            this.pointerOutAnimation();\r\n        });\r\n\r\n        this._toggleObserver = this.onToggleObservable.add((isToggled) => {\r\n            if (isToggled) {\r\n                this._innerQuadMaterial.color = this.innerQuadToggledColor;\r\n            } else {\r\n                this._innerQuadMaterial.color = this.innerQuadColor;\r\n            }\r\n        });\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"TouchHolographicButton\";\r\n    }\r\n\r\n    private _rebuildContent(): void {\r\n        let content: Control;\r\n\r\n        if (this._getAspectRatio() <= 1) {\r\n            // align text and image vertically\r\n            content = this._alignContentVertically();\r\n        } else {\r\n            // align text and image horizontally\r\n            content = this._alignContentHorizontally();\r\n        }\r\n\r\n        this.content = content;\r\n    }\r\n\r\n    private _getAspectRatio() {\r\n        return this.width / this.height;\r\n    }\r\n\r\n    private _alignContentVertically() {\r\n        const panel = new StackPanel();\r\n        panel.isVertical = true;\r\n\r\n        if (DomManagement.IsDocumentAvailable() && !!document.createElement) {\r\n            if (this._imageUrl) {\r\n                const image = new Image();\r\n                image.source = this._imageUrl;\r\n                image.heightInPixels = 180;\r\n                image.widthInPixels = 100;\r\n                image.paddingTopInPixels = 40;\r\n                image.paddingBottomInPixels = 40;\r\n                panel.addControl(image);\r\n            }\r\n        }\r\n\r\n        if (this._text) {\r\n            const text = new TextBlock();\r\n            text.text = this._text;\r\n            text.color = \"white\";\r\n            text.heightInPixels = 30;\r\n            text.fontSize = 24;\r\n            panel.addControl(text);\r\n        }\r\n\r\n        return panel;\r\n    }\r\n\r\n    private _alignContentHorizontally() {\r\n        let totalPanelWidthInPixels = 240;\r\n        const padding = 15;\r\n\r\n        const contentContainer = new Rectangle();\r\n        contentContainer.widthInPixels = totalPanelWidthInPixels;\r\n        contentContainer.heightInPixels = totalPanelWidthInPixels;\r\n        contentContainer.color = \"transparent\";\r\n        contentContainer.setPaddingInPixels(padding, padding, padding, padding);\r\n        totalPanelWidthInPixels -= padding * 2;\r\n\r\n        const panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.scaleY = this._getAspectRatio();\r\n\r\n        if (DomManagement.IsDocumentAvailable() && !!document.createElement) {\r\n            if (this._imageUrl) {\r\n                const imageContainer = new Rectangle(`${this.name}_image`);\r\n                imageContainer.widthInPixels = this.imageSizeInPixels;\r\n                imageContainer.heightInPixels = this.imageSizeInPixels;\r\n                imageContainer.color = \"transparent\";\r\n                totalPanelWidthInPixels -= this.imageSizeInPixels;\r\n\r\n                const image = new Image();\r\n                image.source = this._imageUrl;\r\n\r\n                imageContainer.addControl(image);\r\n                panel.addControl(imageContainer);\r\n            }\r\n        }\r\n\r\n        if (this._text) {\r\n            const text = new TextBlock(`${this.name}_text`);\r\n            text.text = this._text;\r\n            text.color = \"white\";\r\n            text.fontSize = this.textSizeInPixels;\r\n            text.widthInPixels = totalPanelWidthInPixels;\r\n\r\n            if (this._imageUrl) {\r\n                text.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n                text.paddingLeftInPixels = padding;\r\n            }\r\n\r\n            if (this._subtext) {\r\n                const textContainer = new Grid();\r\n                textContainer.addColumnDefinition(1);\r\n                textContainer.addRowDefinition(0.5);\r\n                textContainer.addRowDefinition(0.5);\r\n                textContainer.widthInPixels = totalPanelWidthInPixels;\r\n                textContainer.heightInPixels = 45;\r\n\r\n                const subtext = new TextBlock(`${this.name}_subtext`);\r\n                subtext.text = this._subtext;\r\n                subtext.color = \"#EEEEEEAB\";\r\n                subtext.fontSize = this.textSizeInPixels * 0.75;\r\n                subtext.fontWeight = \"600\";\r\n\r\n                if (this._imageUrl) {\r\n                    subtext.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n                    subtext.paddingLeftInPixels = padding;\r\n                }\r\n\r\n                textContainer.addControl(text, 0);\r\n                textContainer.addControl(subtext, 1);\r\n                panel.addControl(textContainer);\r\n            } else {\r\n                panel.addControl(text);\r\n            }\r\n        }\r\n\r\n        contentContainer.addControl(panel);\r\n        return contentContainer;\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this.name = this.name ?? \"TouchHolographicButton\";\r\n\r\n        const backPlateMesh = this._createBackPlate(scene);\r\n        const collisionMesh = this._createFrontPlate(scene);\r\n        const innerQuadMesh = this._createInnerQuad(scene);\r\n        const backGlowMesh = this._createBackGlow(scene);\r\n\r\n        this._frontPlateCollisionMesh = collisionMesh;\r\n        this._textPlate = <Mesh>super._createNode(scene);\r\n        this._textPlate.name = `${this.name}_textPlate`;\r\n        this._textPlate.isPickable = false;\r\n        this._textPlate.scaling.x = this.width;\r\n        this._textPlate.parent = collisionMesh;\r\n\r\n        this._backPlate = backPlateMesh;\r\n        this._backPlate.position = Vector3.Forward(scene.useRightHandedSystem).scale(this.backPlateDepth / 2);\r\n        this._backPlate.isPickable = false;\r\n\r\n        this._backPlate.addChild(collisionMesh);\r\n        this._backPlate.addChild(innerQuadMesh);\r\n\r\n        if (backGlowMesh) {\r\n            this._backPlate.addChild(backGlowMesh);\r\n        }\r\n\r\n        const tn = new TransformNode(`${this.name}_root`, scene);\r\n        this._backPlate.setParent(tn);\r\n\r\n        this.collisionMesh = collisionMesh;\r\n        this.collidableFrontDirection = this._backPlate.forward.negate(); // Mesh is facing the wrong way\r\n\r\n        return tn;\r\n    }\r\n\r\n    private _createBackPlate(scene: Scene) {\r\n        const backPlateMesh = CreateBox(`${this.name}_backPlate`, {}, scene);\r\n        backPlateMesh.isPickable = false;\r\n        backPlateMesh.visibility = 0;\r\n        backPlateMesh.scaling.z = 0.2;\r\n\r\n        SceneLoader.ImportMeshAsync(undefined, TouchHolographicButton.MRTK_ASSET_BASE_URL, TouchHolographicButton.BACKPLATE_MODEL_FILENAME, scene).then((result) => {\r\n            const backPlateModel = result.meshes[1];\r\n            backPlateModel.visibility = 0;\r\n\r\n            if (this._isBackplateVisible) {\r\n                backPlateModel.visibility = 1;\r\n                backPlateModel.name = `${this.name}_backPlate`;\r\n                backPlateModel.isPickable = false;\r\n                backPlateModel.scaling.x = this.width;\r\n                backPlateModel.scaling.y = this.height;\r\n                backPlateModel.parent = backPlateMesh;\r\n            }\r\n\r\n            if (this._backMaterial) {\r\n                backPlateModel.material = this._backMaterial;\r\n            }\r\n\r\n            this._backPlate = backPlateModel;\r\n        });\r\n\r\n        return backPlateMesh;\r\n    }\r\n\r\n    private _createFrontPlate(scene: Scene) {\r\n        const collisionMesh = CreateBox(\r\n            `${this.name}_frontPlate`,\r\n            {\r\n                width: this.width,\r\n                height: this.height,\r\n                depth: this.frontPlateDepth,\r\n            },\r\n            scene\r\n        );\r\n        collisionMesh.isPickable = true;\r\n        collisionMesh.isNearPickable = true;\r\n        collisionMesh.visibility = 0;\r\n        collisionMesh.position = Vector3.Forward(scene.useRightHandedSystem).scale((this.backPlateDepth - this.frontPlateDepth) / 2);\r\n\r\n        SceneLoader.ImportMeshAsync(undefined, TouchHolographicButton.MRTK_ASSET_BASE_URL, TouchHolographicButton.FRONTPLATE_MODEL_FILENAME, scene).then((result) => {\r\n            const collisionPlate = CreateBox(\r\n                `${this.name}_collisionPlate`,\r\n                {\r\n                    width: this.width,\r\n                    height: this.height,\r\n                },\r\n                scene\r\n            );\r\n            collisionPlate.isPickable = false;\r\n            collisionPlate.scaling.z = this.frontPlateDepth;\r\n            collisionPlate.visibility = 0;\r\n            collisionPlate.parent = collisionMesh;\r\n            this._collisionPlate = collisionPlate;\r\n\r\n            const frontPlateModel = result.meshes[1];\r\n            frontPlateModel.name = `${this.name}_frontPlate`;\r\n            frontPlateModel.isPickable = false;\r\n            frontPlateModel.scaling.x = this.width - this.backGlowOffset;\r\n            frontPlateModel.scaling.y = this.height - this.backGlowOffset;\r\n            frontPlateModel.position = Vector3.Forward(scene.useRightHandedSystem).scale(-0.5);\r\n            frontPlateModel.parent = collisionPlate;\r\n\r\n            if (this.isToggleButton) {\r\n                frontPlateModel.visibility = 0;\r\n            }\r\n\r\n            if (this._frontMaterial) {\r\n                frontPlateModel.material = this._frontMaterial;\r\n            }\r\n\r\n            this._textPlate.scaling.x = 1;\r\n            this._textPlate.parent = frontPlateModel;\r\n            this._frontPlate = frontPlateModel;\r\n        });\r\n\r\n        return collisionMesh;\r\n    }\r\n\r\n    private _createInnerQuad(scene: Scene) {\r\n        const innerQuadMesh = CreateBox(`${this.name}_innerQuad`, {}, scene);\r\n        innerQuadMesh.isPickable = false;\r\n        innerQuadMesh.visibility = 0;\r\n        innerQuadMesh.scaling.z = this.flatPlaneDepth;\r\n        innerQuadMesh.position.z += this.backPlateDepth / 2 - this.flatPlaneDepth;\r\n\r\n        SceneLoader.ImportMeshAsync(undefined, TouchHolographicButton.MRTK_ASSET_BASE_URL, TouchHolographicButton.INNERQUAD_MODEL_FILENAME, scene).then((result) => {\r\n            const innerQuadModel = result.meshes[1];\r\n            innerQuadModel.name = `${this.name}_innerQuad`;\r\n            innerQuadModel.isPickable = false;\r\n            innerQuadModel.scaling.x = this.width - this.backGlowOffset;\r\n            innerQuadModel.scaling.y = this.height - this.backGlowOffset;\r\n            innerQuadModel.parent = innerQuadMesh;\r\n\r\n            if (this._innerQuadMaterial) {\r\n                innerQuadModel.material = this._innerQuadMaterial;\r\n            }\r\n\r\n            this._innerQuad = innerQuadModel;\r\n        });\r\n\r\n        return innerQuadMesh;\r\n    }\r\n\r\n    private _createBackGlow(scene: Scene) {\r\n        if (this.isToggleButton) {\r\n            return;\r\n        }\r\n\r\n        const backGlowMesh = CreateBox(`${this.name}_backGlow`, {}, scene);\r\n        backGlowMesh.isPickable = false;\r\n        backGlowMesh.visibility = 0;\r\n        backGlowMesh.scaling.z = this.flatPlaneDepth;\r\n        backGlowMesh.position.z += this.backPlateDepth / 2 - this.flatPlaneDepth * 2;\r\n\r\n        SceneLoader.ImportMeshAsync(undefined, TouchHolographicButton.MRTK_ASSET_BASE_URL, TouchHolographicButton.BACKGLOW_MODEL_FILENAME, scene).then((result) => {\r\n            const backGlowModel = result.meshes[1];\r\n            backGlowModel.name = `${this.name}_backGlow`;\r\n            backGlowModel.isPickable = false;\r\n            backGlowModel.scaling.x = this.width - this.backGlowOffset;\r\n            backGlowModel.scaling.y = this.height - this.backGlowOffset;\r\n            backGlowModel.parent = backGlowMesh;\r\n\r\n            if (this._backGlowMaterial) {\r\n                backGlowModel.material = this._backGlowMaterial;\r\n            }\r\n\r\n            this._backGlow = backGlowModel;\r\n        });\r\n\r\n        return backGlowMesh;\r\n    }\r\n\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        this._plateMaterial.emissiveTexture = facadeTexture;\r\n        this._plateMaterial.opacityTexture = facadeTexture;\r\n        this._plateMaterial.diffuseColor = this.plateMaterialColor;\r\n    }\r\n\r\n    private _performClickAnimation() {\r\n        const frameRate = 60;\r\n        const animationGroup = new AnimationGroup(\"Click Animation Group\");\r\n\r\n        const animations = [\r\n            {\r\n                name: \"backGlowMotion\",\r\n                mesh: this._backGlow,\r\n                property: \"material.motion\",\r\n                keys: [\r\n                    {\r\n                        frame: 0,\r\n                        values: [0, 0, 0],\r\n                    },\r\n                    {\r\n                        frame: 20,\r\n                        values: [1, 0.0144, 0.0144],\r\n                    },\r\n                    {\r\n                        frame: 40,\r\n                        values: [0.0027713229489760476, 0, 0],\r\n                    },\r\n                    {\r\n                        frame: 45,\r\n                        values: [0.0027713229489760476],\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                name: \"_collisionPlateZSlide\",\r\n                mesh: this._collisionPlate,\r\n                property: \"position.z\",\r\n                keys: [\r\n                    {\r\n                        frame: 0,\r\n                        values: [0.0, 0.0, 0.0],\r\n                    },\r\n                    {\r\n                        frame: 20,\r\n                        values: [Vector3.Forward(this._collisionPlate._scene.useRightHandedSystem).scale(this.frontPlateDepth / 2).z, 0.0, 0.0],\r\n                    },\r\n                    {\r\n                        frame: 40,\r\n                        values: [0.0, 0.005403332496794331],\r\n                    },\r\n                    {\r\n                        frame: 45,\r\n                        values: [0.0],\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                name: \"_collisionPlateZScale\",\r\n                mesh: this._collisionPlate,\r\n                property: \"scaling.z\",\r\n                keys: [\r\n                    {\r\n                        frame: 0,\r\n                        values: [this.frontPlateDepth, 0.0, 0.0],\r\n                    },\r\n                    {\r\n                        frame: 20,\r\n                        values: [this.backPlateDepth, 0.0, 0.0],\r\n                    },\r\n                    {\r\n                        frame: 40,\r\n                        values: [this.frontPlateDepth, 0.0054],\r\n                    },\r\n                    {\r\n                        frame: 45,\r\n                        values: [this.frontPlateDepth],\r\n                    },\r\n                ],\r\n            },\r\n        ];\r\n\r\n        for (const animation of animations) {\r\n            const anim = new Animation(animation.name, animation.property, frameRate, Animation.ANIMATIONTYPE_FLOAT, Animation.ANIMATIONLOOPMODE_CYCLE);\r\n            const animkeyFrames = [];\r\n\r\n            for (const key of animation.keys) {\r\n                animkeyFrames.push({\r\n                    frame: key.frame,\r\n                    value: key.values[0],\r\n                    inTangent: key.values[1],\r\n                    outTangent: key.values[2],\r\n                    interpolation: key.values[3],\r\n                });\r\n            }\r\n\r\n            anim.setKeys(animkeyFrames);\r\n\r\n            if (!animation.mesh) {\r\n                continue;\r\n            }\r\n\r\n            animationGroup.addTargetedAnimation(anim, animation.mesh);\r\n        }\r\n\r\n        animationGroup.normalize(0, 45);\r\n        animationGroup.speedRatio = 1;\r\n\r\n        animationGroup.play();\r\n    }\r\n\r\n    private _performEnterExitAnimation(speedRatio: number) {\r\n        const frameRate = 60;\r\n        const animationGroup = new AnimationGroup(\"Enter Exit Animation Group\");\r\n\r\n        const animations = [\r\n            {\r\n                name: \"frontPlateFadeOut\",\r\n                mesh: this._frontPlate,\r\n                property: \"material.fadeOut\",\r\n                keys: [\r\n                    {\r\n                        frame: 0,\r\n                        values: [0, 0, 0.025045314830017686, 0],\r\n                    },\r\n                    {\r\n                        frame: 40,\r\n                        values: [1.00205599570012, 0.025045314830017686, 0, 0],\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                name: \"textPlateZSlide\",\r\n                mesh: this._textPlate,\r\n                property: \"position.z\",\r\n                keys: [\r\n                    {\r\n                        frame: 0,\r\n                        values: [0, 0.0, 0.0],\r\n                    },\r\n                    {\r\n                        frame: 40,\r\n                        values: [Vector3.Forward(this._textPlate._scene.useRightHandedSystem).scale(-0.15).z, 0.0, 0.0],\r\n                    },\r\n                ],\r\n            },\r\n        ];\r\n\r\n        for (const animation of animations) {\r\n            const anim = new Animation(animation.name, animation.property, frameRate, Animation.ANIMATIONTYPE_FLOAT, Animation.ANIMATIONLOOPMODE_CYCLE);\r\n            const animkeyFrames = [];\r\n\r\n            for (const key of animation.keys) {\r\n                animkeyFrames.push({\r\n                    frame: key.frame,\r\n                    value: key.values[0],\r\n                    inTangent: key.values[1],\r\n                    outTangent: key.values[2],\r\n                    interpolation: key.values[3],\r\n                });\r\n            }\r\n\r\n            anim.setKeys(animkeyFrames);\r\n\r\n            if (!animation.mesh) {\r\n                continue;\r\n            }\r\n\r\n            animationGroup.addTargetedAnimation(anim, animation.mesh);\r\n        }\r\n\r\n        animationGroup.normalize(0, 45);\r\n        animationGroup.speedRatio = speedRatio;\r\n\r\n        animationGroup.play();\r\n    }\r\n\r\n    private _createBackMaterial(mesh: Mesh) {\r\n        this._backMaterial = this._backMaterial ?? new MRDLBackplateMaterial(this.name + \"backPlateMaterial\", mesh.getScene());\r\n        this._backMaterial.absoluteSizes = true;\r\n        this._backMaterial.radius = this.radius;\r\n        this._backMaterial.lineWidth = 0.02;\r\n    }\r\n\r\n    private _createFrontMaterial(mesh: Mesh) {\r\n        this._frontMaterial = this._frontMaterial ?? new MRDLFrontplateMaterial(this.name + \"Front Material\", mesh.getScene());\r\n        this.frontMaterial.radius = this.innerQuadRadius;\r\n        this.frontMaterial.fadeOut = 0.0;\r\n    }\r\n\r\n    private _createBackGlowMaterial(mesh: Mesh) {\r\n        const glowRadius = this.radius + 0.04;\r\n        this._backGlowMaterial = this._backGlowMaterial ?? new MRDLBackglowMaterial(this.name + \"Back Glow Material\", mesh.getScene());\r\n        this._backGlowMaterial.bevelRadius = glowRadius;\r\n        this._backGlowMaterial.lineWidth = glowRadius;\r\n        this._backGlowMaterial.motion = 0.0;\r\n    }\r\n\r\n    private _createInnerQuadMaterial(mesh: Mesh) {\r\n        this._innerQuadMaterial = this._innerQuadMaterial ?? new MRDLInnerquadMaterial(\"inner_quad\", mesh.getScene());\r\n        this._innerQuadMaterial.radius = this.innerQuadRadius;\r\n\r\n        if (this.isToggleButton) {\r\n            this._innerQuadMaterial.color = this.innerQuadColor;\r\n        }\r\n    }\r\n\r\n    private _createPlateMaterial(mesh: Mesh) {\r\n        this._plateMaterial = this._plateMaterial ?? new StandardMaterial(this.name + \"Plate Material\", mesh.getScene());\r\n        this._plateMaterial.specularColor = Color3.Black();\r\n    }\r\n\r\n    protected _onToggle(newState: boolean) {\r\n        super._onToggle(newState);\r\n    }\r\n\r\n    protected _affectMaterial(mesh: Mesh) {\r\n        if (this._shareMaterials) {\r\n            // Back\r\n            if (!this._host._touchSharedMaterials[\"mrdlBackplateMaterial\"]) {\r\n                this._createBackMaterial(mesh);\r\n                this._host._touchSharedMaterials[\"mrdlBackplateMaterial\"] = this._backMaterial;\r\n            } else {\r\n                this._backMaterial = this._host._touchSharedMaterials[\"mrdlBackplateMaterial\"] as MRDLBackplateMaterial;\r\n            }\r\n\r\n            // Front\r\n            if (!this._host._touchSharedMaterials[\"mrdlFrontplateMaterial\"]) {\r\n                this._createFrontMaterial(mesh);\r\n                this._host._touchSharedMaterials[\"mrdlFrontplateMaterial\"] = this._frontMaterial;\r\n            } else {\r\n                this._frontMaterial = this._host._touchSharedMaterials[\"mrdlFrontplateMaterial\"] as MRDLFrontplateMaterial;\r\n            }\r\n\r\n            // Back glow\r\n            if (!this._host._touchSharedMaterials[\"mrdlBackglowMaterial\"]) {\r\n                this._createBackGlowMaterial(mesh);\r\n                this._host._touchSharedMaterials[\"mrdlBackglowMaterial\"] = this._backGlowMaterial;\r\n            } else {\r\n                this._backGlowMaterial = this._host._touchSharedMaterials[\"mrdlBackglowMaterial\"] as MRDLBackglowMaterial;\r\n            }\r\n\r\n            // Inner quad\r\n            if (!this._host._touchSharedMaterials[\"mrdlInnerQuadMaterial\"]) {\r\n                this._createInnerQuadMaterial(mesh);\r\n                this._host._touchSharedMaterials[\"mrdlInnerQuadMaterial\"] = this._innerQuadMaterial;\r\n            } else {\r\n                this._innerQuadMaterial = this._host._touchSharedMaterials[\"mrdlInnerQuadMaterial\"] as MRDLInnerquadMaterial;\r\n            }\r\n        } else {\r\n            this._createBackMaterial(mesh);\r\n            this._createFrontMaterial(mesh);\r\n            this._createBackGlowMaterial(mesh);\r\n            this._createInnerQuadMaterial(mesh);\r\n        }\r\n\r\n        this._createPlateMaterial(mesh);\r\n        this._backPlate.material = this._backMaterial;\r\n        this._textPlate.material = this._plateMaterial;\r\n\r\n        if (!this._isBackplateVisible) {\r\n            this._backPlate.visibility = 0;\r\n        }\r\n\r\n        if (this._frontPlate) {\r\n            this._frontPlate.material = this._frontMaterial;\r\n        }\r\n\r\n        if (this._backGlow) {\r\n            this._backGlow.material = this._backGlowMaterial;\r\n        }\r\n\r\n        if (this._innerQuad) {\r\n            this._innerQuad.material = this._innerQuadMaterial;\r\n        }\r\n\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose(); // will dispose main mesh ie. back plate\r\n\r\n        this._disposeTooltip();\r\n        this.onPointerClickObservable.remove(this._pointerClickObserver);\r\n        this.onPointerEnterObservable.remove(this._pointerEnterObserver);\r\n        this.onPointerOutObservable.remove(this._pointerOutObserver);\r\n        this.onToggleObservable.remove(this._toggleObserver);\r\n\r\n        if (!this.shareMaterials) {\r\n            this._backMaterial.dispose();\r\n            this._frontMaterial.dispose();\r\n            this._plateMaterial.dispose();\r\n            this._backGlowMaterial.dispose();\r\n            this._innerQuadMaterial.dispose();\r\n\r\n            if (this._pickedPointObserver) {\r\n                this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n                this._pickedPointObserver = null;\r\n            }\r\n        }\r\n    }\r\n}\r\n","export * from \"./abstractButton3D\";\r\nexport * from \"./button3D\";\r\nexport * from \"./container3D\";\r\nexport * from \"./control3D\";\r\nexport * from \"./cylinderPanel\";\r\nexport * from \"./handMenu\";\r\nexport * from \"./holographicBackplate\";\r\nexport * from \"./holographicButton\";\r\nexport * from \"./holographicSlate\";\r\nexport * from \"./meshButton3D\";\r\nexport * from \"./nearMenu\";\r\nexport * from \"./planePanel\";\r\nexport * from \"./scatterPanel\";\r\nexport * from \"./slider3D\";\r\nexport * from \"./spherePanel\";\r\nexport * from \"./stackPanel3D\";\r\nexport * from \"./touchButton3D\";\r\nexport * from \"./touchMeshButton3D\";\r\nexport * from \"./touchHolographicButton\";\r\nexport * from \"./touchHolographicMenu\";\r\nexport * from \"./volumeBasedPanel\";\r\n\r\n// MRTK3 Controls\r\nexport { TouchHolographicButton as TouchHolographicButtonV3 } from \"./MRTK3/touchHolographicButton\";\r\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { Mesh } from \"core/Meshes/mesh\";\r\nimport type { ISceneLoaderPlugin, ISceneLoaderPluginExtensions } from \"core/Loading/sceneLoader\";\r\nimport { SceneLoader } from \"core/Loading/sceneLoader\";\r\nimport { AssetContainer } from \"core/assetContainer\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\n/**\r\n * STL file type loader.\r\n * This is a babylon scene loader plugin.\r\n */\r\nexport class STLFileLoader implements ISceneLoaderPlugin {\r\n    /** @internal */\r\n    public solidPattern = /solid (\\S*)([\\S\\s]*?)endsolid[ ]*(\\S*)/g;\r\n\r\n    /** @internal */\r\n    public facetsPattern = /facet([\\s\\S]*?)endfacet/g;\r\n    /** @internal */\r\n    public normalPattern = /normal[\\s]+([-+]?[0-9]+\\.?[0-9]*([eE][-+]?[0-9]+)?)+[\\s]+([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)+[\\s]+([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)+/g;\r\n    /** @internal */\r\n    public vertexPattern = /vertex[\\s]+([-+]?[0-9]+\\.?[0-9]*([eE][-+]?[0-9]+)?)+[\\s]+([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)+[\\s]+([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)+/g;\r\n\r\n    /**\r\n     * Defines the name of the plugin.\r\n     */\r\n    public name = \"stl\";\r\n\r\n    /**\r\n     * Defines the extensions the stl loader is able to load.\r\n     * force data to come in as an ArrayBuffer\r\n     * we'll convert to string if it looks like it's an ASCII .stl\r\n     */\r\n    public extensions: ISceneLoaderPluginExtensions = {\r\n        \".stl\": { isBinary: true },\r\n    };\r\n\r\n    /**\r\n     * Defines if Y and Z axes are swapped or not when loading an STL file.\r\n     * The default is false to maintain backward compatibility. When set to\r\n     * true, coordinates from the STL file are used without change.\r\n     */\r\n    public static DO_NOT_ALTER_FILE_COORDINATES = false;\r\n\r\n    /**\r\n     * Import meshes into a scene.\r\n     * @param meshesNames An array of mesh names, a single mesh name, or empty string for all meshes that filter what meshes are imported\r\n     * @param scene The scene to import into\r\n     * @param data The data to import\r\n     * @param rootUrl The root url for scene and resources\r\n     * @param meshes The meshes array to import into\r\n     * @returns True if successful or false otherwise\r\n     */\r\n    public importMesh(meshesNames: any, scene: Scene, data: any, rootUrl: string, meshes: Nullable<AbstractMesh[]>): boolean {\r\n        let matches;\r\n\r\n        if (typeof data !== \"string\") {\r\n            if (this._isBinary(data)) {\r\n                // binary .stl\r\n                const babylonMesh = new Mesh(\"stlmesh\", scene);\r\n                this._parseBinary(babylonMesh, data);\r\n                if (meshes) {\r\n                    meshes.push(babylonMesh);\r\n                }\r\n                return true;\r\n            }\r\n\r\n            // ASCII .stl\r\n\r\n            // convert to string\r\n            const array_buffer = new Uint8Array(data);\r\n            let str = \"\";\r\n            for (let i = 0; i < data.byteLength; i++) {\r\n                str += String.fromCharCode(array_buffer[i]); // implicitly assumes little-endian\r\n            }\r\n            data = str;\r\n        }\r\n\r\n        //if arrived here, data is a string, containing the STLA data.\r\n\r\n        while ((matches = this.solidPattern.exec(data))) {\r\n            let meshName = matches[1];\r\n            const meshNameFromEnd = matches[3];\r\n            if (meshNameFromEnd && meshName != meshNameFromEnd) {\r\n                Tools.Error(\"Error in STL, solid name != endsolid name\");\r\n                return false;\r\n            }\r\n\r\n            // check meshesNames\r\n            if (meshesNames && meshName) {\r\n                if (meshesNames instanceof Array) {\r\n                    if (!meshesNames.indexOf(meshName)) {\r\n                        continue;\r\n                    }\r\n                } else {\r\n                    if (meshName !== meshesNames) {\r\n                        continue;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // stl mesh name can be empty as well\r\n            meshName = meshName || \"stlmesh\";\r\n\r\n            const babylonMesh = new Mesh(meshName, scene);\r\n            this._parseASCII(babylonMesh, matches[2]);\r\n            if (meshes) {\r\n                meshes.push(babylonMesh);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Load into a scene.\r\n     * @param scene The scene to load into\r\n     * @param data The data to import\r\n     * @param rootUrl The root url for scene and resources\r\n     * @returns true if successful or false otherwise\r\n     */\r\n    public load(scene: Scene, data: any, rootUrl: string): boolean {\r\n        const result = this.importMesh(null, scene, data, rootUrl, null);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Load into an asset container.\r\n     * @param scene The scene to load into\r\n     * @param data The data to import\r\n     * @param rootUrl The root url for scene and resources\r\n     * @returns The loaded asset container\r\n     */\r\n    public loadAssetContainer(scene: Scene, data: string, rootUrl: string): AssetContainer {\r\n        const container = new AssetContainer(scene);\r\n        scene._blockEntityCollection = true;\r\n        this.importMesh(null, scene, data, rootUrl, container.meshes);\r\n        scene._blockEntityCollection = false;\r\n        return container;\r\n    }\r\n\r\n    private _isBinary(data: any) {\r\n        // check if file size is correct for binary stl\r\n        const reader = new DataView(data);\r\n\r\n        // A Binary STL header is 80 bytes, if the data size is not great than\r\n        // that then it's not a binary STL.\r\n        if (reader.byteLength <= 80) {\r\n            return false;\r\n        }\r\n\r\n        const faceSize = (32 / 8) * 3 + (32 / 8) * 3 * 3 + 16 / 8;\r\n        const nFaces = reader.getUint32(80, true);\r\n\r\n        if (80 + 32 / 8 + nFaces * faceSize === reader.byteLength) {\r\n            return true;\r\n        }\r\n\r\n        // US-ASCII begin with 's', 'o', 'l', 'i', 'd'\r\n        const ascii = [115, 111, 108, 105, 100];\r\n        for (let off = 0; off < 5; off++) {\r\n            if (reader.getUint8(off) !== ascii[off]) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _parseBinary(mesh: Mesh, data: ArrayBuffer) {\r\n        const reader = new DataView(data);\r\n        const faces = reader.getUint32(80, true);\r\n\r\n        const dataOffset = 84;\r\n        const faceLength = 12 * 4 + 2;\r\n\r\n        let offset = 0;\r\n\r\n        const positions = new Float32Array(faces * 3 * 3);\r\n        const normals = new Float32Array(faces * 3 * 3);\r\n        const indices = new Uint32Array(faces * 3);\r\n        let indicesCount = 0;\r\n\r\n        for (let face = 0; face < faces; face++) {\r\n            const start = dataOffset + face * faceLength;\r\n            const normalX = reader.getFloat32(start, true);\r\n            const normalY = reader.getFloat32(start + 4, true);\r\n            const normalZ = reader.getFloat32(start + 8, true);\r\n\r\n            for (let i = 1; i <= 3; i++) {\r\n                const vertexstart = start + i * 12;\r\n\r\n                // ordering is intentional to match ascii import\r\n                positions[offset] = reader.getFloat32(vertexstart, true);\r\n                normals[offset] = normalX;\r\n\r\n                if (!STLFileLoader.DO_NOT_ALTER_FILE_COORDINATES) {\r\n                    positions[offset + 2] = reader.getFloat32(vertexstart + 4, true);\r\n                    positions[offset + 1] = reader.getFloat32(vertexstart + 8, true);\r\n\r\n                    normals[offset + 2] = normalY;\r\n                    normals[offset + 1] = normalZ;\r\n                } else {\r\n                    positions[offset + 1] = reader.getFloat32(vertexstart + 4, true);\r\n                    positions[offset + 2] = reader.getFloat32(vertexstart + 8, true);\r\n\r\n                    normals[offset + 1] = normalY;\r\n                    normals[offset + 2] = normalZ;\r\n                }\r\n\r\n                offset += 3;\r\n            }\r\n\r\n            if (STLFileLoader.DO_NOT_ALTER_FILE_COORDINATES) {\r\n                indices[indicesCount] = indicesCount;\r\n                indices[indicesCount + 1] = indicesCount + 2;\r\n                indices[indicesCount + 2] = indicesCount + 1;\r\n                indicesCount += 3;\r\n            } else {\r\n                indices[indicesCount] = indicesCount++;\r\n                indices[indicesCount] = indicesCount++;\r\n                indices[indicesCount] = indicesCount++;\r\n            }\r\n        }\r\n\r\n        mesh.setVerticesData(VertexBuffer.PositionKind, positions);\r\n        mesh.setVerticesData(VertexBuffer.NormalKind, normals);\r\n        mesh.setIndices(indices);\r\n        mesh.computeWorldMatrix(true);\r\n    }\r\n\r\n    private _parseASCII(mesh: Mesh, solidData: string) {\r\n        const positions = [];\r\n        const normals = [];\r\n        const indices = [];\r\n        let indicesCount = 0;\r\n\r\n        //load facets, ignoring loop as the standard doesn't define it can contain more than vertices\r\n        let matches;\r\n        while ((matches = this.facetsPattern.exec(solidData))) {\r\n            const facet = matches[1];\r\n            //one normal per face\r\n            const normalMatches = this.normalPattern.exec(facet);\r\n            this.normalPattern.lastIndex = 0;\r\n            if (!normalMatches) {\r\n                continue;\r\n            }\r\n            const normal = [Number(normalMatches[1]), Number(normalMatches[5]), Number(normalMatches[3])];\r\n\r\n            let vertexMatch;\r\n            while ((vertexMatch = this.vertexPattern.exec(facet))) {\r\n                if (!STLFileLoader.DO_NOT_ALTER_FILE_COORDINATES) {\r\n                    positions.push(Number(vertexMatch[1]), Number(vertexMatch[5]), Number(vertexMatch[3]));\r\n                    normals.push(normal[0], normal[1], normal[2]);\r\n                } else {\r\n                    positions.push(Number(vertexMatch[1]), Number(vertexMatch[3]), Number(vertexMatch[5]));\r\n\r\n                    // Flipping the second and third component because inverted\r\n                    // when normal was declared.\r\n                    normals.push(normal[0], normal[2], normal[1]);\r\n                }\r\n            }\r\n            if (STLFileLoader.DO_NOT_ALTER_FILE_COORDINATES) {\r\n                indices.push(indicesCount, indicesCount + 2, indicesCount + 1);\r\n                indicesCount += 3;\r\n            } else {\r\n                indices.push(indicesCount++, indicesCount++, indicesCount++);\r\n            }\r\n            this.vertexPattern.lastIndex = 0;\r\n        }\r\n\r\n        this.facetsPattern.lastIndex = 0;\r\n        mesh.setVerticesData(VertexBuffer.PositionKind, positions);\r\n        mesh.setVerticesData(VertexBuffer.NormalKind, normals);\r\n        mesh.setIndices(indices);\r\n        mesh.computeWorldMatrix(true);\r\n    }\r\n}\r\n\r\nif (SceneLoader) {\r\n    SceneLoader.RegisterPlugin(new STLFileLoader());\r\n}\r\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport type { PointerInfo } from \"core/Events/pointerEvents\";\r\nimport { PointerEventTypes } from \"core/Events/pointerEvents\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport { HemisphericLight } from \"core/Lights/hemisphericLight\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { UtilityLayerRenderer } from \"core/Rendering/utilityLayerRenderer\";\r\nimport { EngineStore } from \"core/Engines/engineStore\";\r\nimport type { IDisposable, Scene } from \"core/scene\";\r\n\r\nimport { Container3D } from \"./controls/container3D\";\r\nimport type { Control3D } from \"./controls/control3D\";\r\nimport type { IPointerEvent } from \"core/Events/deviceInputEvents\";\r\n\r\n/**\r\n * Class used to manage 3D user interface\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui3D\r\n */\r\nexport class GUI3DManager implements IDisposable {\r\n    private _scene: Scene;\r\n    private _sceneDisposeObserver: Nullable<Observer<Scene>>;\r\n    private _utilityLayer: Nullable<UtilityLayerRenderer>;\r\n    private _rootContainer: Container3D;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _pointerOutObserver: Nullable<Observer<number>>;\r\n    private _customControlScaling = 1.0;\r\n    /** @internal */\r\n    public _lastPickedControl: Control3D;\r\n    /** @internal */\r\n    public _lastControlOver: { [pointerId: number]: Control3D } = {};\r\n    /** @internal */\r\n    public _lastControlDown: { [pointerId: number]: Control3D } = {};\r\n\r\n    protected static MRTK_REALISTIC_SCALING: number = 0.032;\r\n\r\n    /**\r\n     * Observable raised when the point picked by the pointer events changed\r\n     */\r\n    public onPickedPointChangedObservable = new Observable<Nullable<Vector3>>();\r\n\r\n    /**\r\n     * Observable raised when a picking happens\r\n     */\r\n    public onPickingObservable = new Observable<Nullable<AbstractMesh>>();\r\n\r\n    // Shared resources\r\n    /** @internal */\r\n    public _sharedMaterials: { [key: string]: Material } = {};\r\n\r\n    /** @internal */\r\n    public _touchSharedMaterials: { [key: string]: Material } = {};\r\n\r\n    /** Gets the hosting scene */\r\n    public get scene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /** Gets associated utility layer */\r\n    public get utilityLayer(): Nullable<UtilityLayerRenderer> {\r\n        return this._utilityLayer;\r\n    }\r\n\r\n    /** Gets the scaling for all UI elements owned by this manager */\r\n    public get controlScaling() {\r\n        return this._customControlScaling;\r\n    }\r\n\r\n    /** Sets the scaling adjustment for all UI elements owned by this manager */\r\n    public set controlScaling(newScale: number) {\r\n        if (this._customControlScaling !== newScale && newScale > 0) {\r\n            const scaleRatio = newScale / this._customControlScaling;\r\n            this._customControlScaling = newScale;\r\n\r\n            this._rootContainer.children.forEach((control: Control3D) => {\r\n                control.scaling.scaleInPlace(scaleRatio);\r\n\r\n                if (newScale !== 1) {\r\n                    control._isScaledByManager = true;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /** Gets if controls attached to this manager are realistically sized, based on the fact that 1 unit length is 1 meter */\r\n    public get useRealisticScaling() {\r\n        return this.controlScaling === GUI3DManager.MRTK_REALISTIC_SCALING;\r\n    }\r\n\r\n    /** Sets if controls attached to this manager are realistically sized, based on the fact that 1 unit length is 1 meter */\r\n    public set useRealisticScaling(newValue: boolean) {\r\n        this.controlScaling = newValue ? GUI3DManager.MRTK_REALISTIC_SCALING : 1;\r\n    }\r\n\r\n    /**\r\n     * Creates a new GUI3DManager\r\n     * @param scene\r\n     */\r\n    public constructor(scene?: Scene) {\r\n        this._scene = scene || EngineStore.LastCreatedScene!;\r\n        this._sceneDisposeObserver = this._scene.onDisposeObservable.add(() => {\r\n            this._sceneDisposeObserver = null;\r\n            this._utilityLayer = null;\r\n            this.dispose();\r\n        });\r\n\r\n        this._utilityLayer = UtilityLayerRenderer._CreateDefaultUtilityLayerFromScene(this._scene);\r\n        this._utilityLayer.onlyCheckPointerDownEvents = false;\r\n        this._utilityLayer.pickUtilitySceneFirst = false;\r\n        this._utilityLayer.mainSceneTrackerPredicate = (mesh: Nullable<AbstractMesh>) => {\r\n            return mesh && mesh.reservedDataStore?.GUI3D?.control?._node;\r\n        };\r\n\r\n        // Root\r\n        this._rootContainer = new Container3D(\"RootContainer\");\r\n        this._rootContainer._host = this;\r\n        const utilityLayerScene = this._utilityLayer.utilityLayerScene;\r\n\r\n        // Events\r\n        this._pointerOutObserver = this._utilityLayer.onPointerOutObservable.add((pointerId) => {\r\n            this._handlePointerOut(pointerId, true);\r\n        });\r\n\r\n        this._pointerObserver = utilityLayerScene.onPointerObservable.add((pi) => {\r\n            this._doPicking(pi);\r\n        });\r\n\r\n        // Scene\r\n        this._utilityLayer.utilityLayerScene.autoClear = false;\r\n        this._utilityLayer.utilityLayerScene.autoClearDepthAndStencil = false;\r\n        new HemisphericLight(\"hemi\", Vector3.Up(), this._utilityLayer.utilityLayerScene);\r\n    }\r\n\r\n    private _handlePointerOut(pointerId: number, isPointerUp: boolean) {\r\n        const previousControlOver = this._lastControlOver[pointerId];\r\n        if (previousControlOver) {\r\n            previousControlOver._onPointerOut(previousControlOver);\r\n            delete this._lastControlOver[pointerId];\r\n        }\r\n\r\n        if (isPointerUp) {\r\n            if (this._lastControlDown[pointerId]) {\r\n                this._lastControlDown[pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerId];\r\n            }\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.notifyObservers(null);\r\n    }\r\n\r\n    private _doPicking(pi: PointerInfo): boolean {\r\n        if (!this._utilityLayer || !this._utilityLayer.shouldRender || !this._utilityLayer.utilityLayerScene.activeCamera) {\r\n            return false;\r\n        }\r\n\r\n        const pointerEvent = <IPointerEvent>pi.event;\r\n\r\n        const pointerId = pointerEvent.pointerId || 0;\r\n        const buttonIndex = pointerEvent.button;\r\n\r\n        const pickingInfo = pi.pickInfo;\r\n        if (pickingInfo) {\r\n            this.onPickingObservable.notifyObservers(pickingInfo.pickedMesh);\r\n        }\r\n\r\n        if (!pickingInfo || !pickingInfo.hit) {\r\n            this._handlePointerOut(pointerId, pi.type === PointerEventTypes.POINTERUP);\r\n            return false;\r\n        }\r\n\r\n        if (pickingInfo.pickedPoint) {\r\n            this.onPickedPointChangedObservable.notifyObservers(pickingInfo.pickedPoint);\r\n        }\r\n\r\n        const control = <Control3D>pickingInfo.pickedMesh!.reservedDataStore?.GUI3D?.control;\r\n        if (!!control && !control._processObservables(pi.type, pickingInfo.pickedPoint!, pickingInfo.originMesh?.position || null, pointerId, buttonIndex)) {\r\n            if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        }\r\n\r\n        if (pi.type === PointerEventTypes.POINTERUP) {\r\n            if (this._lastControlDown[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerEvent.pointerId];\r\n            }\r\n\r\n            if (pointerEvent.pointerType === \"touch\" || (pointerEvent.pointerType === \"xr\" && this._scene.getEngine().hostInformation.isMobile)) {\r\n                this._handlePointerOut(pointerId, false);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container\r\n     */\r\n    public get rootContainer(): Container3D {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the root child list\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the root child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._rootContainer.containsControl(control);\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the root child list\r\n     * @param control defines the control to add\r\n     * @returns the current manager\r\n     */\r\n    public addControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.addControl(control);\r\n        if (this._customControlScaling !== 1) {\r\n            control.scaling.scaleInPlace(this._customControlScaling);\r\n            control._isScaledByManager = true;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root child list\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.removeControl(control);\r\n        if (control._isScaledByManager) {\r\n            control.scaling.scaleInPlace(1 / this._customControlScaling);\r\n            control._isScaledByManager = false;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this._rootContainer.dispose();\r\n\r\n        for (const materialName in this._sharedMaterials) {\r\n            if (!Object.prototype.hasOwnProperty.call(this._sharedMaterials, materialName)) {\r\n                continue;\r\n            }\r\n\r\n            this._sharedMaterials[materialName].dispose();\r\n        }\r\n\r\n        this._sharedMaterials = {};\r\n\r\n        for (const materialName in this._touchSharedMaterials) {\r\n            if (!Object.prototype.hasOwnProperty.call(this._touchSharedMaterials, materialName)) {\r\n                continue;\r\n            }\r\n\r\n            this._touchSharedMaterials[materialName].dispose();\r\n        }\r\n\r\n        this._touchSharedMaterials = {};\r\n\r\n        if (this._pointerOutObserver && this._utilityLayer) {\r\n            this._utilityLayer.onPointerOutObservable.remove(this._pointerOutObserver);\r\n            this._pointerOutObserver = null;\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.clear();\r\n        this.onPickingObservable.clear();\r\n\r\n        const utilityLayerScene = this._utilityLayer ? this._utilityLayer.utilityLayerScene : null;\r\n\r\n        if (utilityLayerScene) {\r\n            if (this._pointerObserver) {\r\n                utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\r\n                this._pointerObserver = null;\r\n            }\r\n        }\r\n        if (this._scene) {\r\n            if (this._sceneDisposeObserver) {\r\n                this._scene.onDisposeObservable.remove(this._sceneDisposeObserver);\r\n                this._sceneDisposeObserver = null;\r\n            }\r\n        }\r\n\r\n        if (this._utilityLayer) {\r\n            this._utilityLayer.dispose();\r\n        }\r\n    }\r\n}\r\n"],"names":["ValueAndUnit","value","unit","UNITMODE_PIXEL","negativeValueAllowed","_value","_unit","ignoreAdaptiveScaling","onChangedObservable","this","_originalUnit","isPercentage","UNITMODE_PERCENTAGE","isPixel","internalValue","notifyObservers","getValueInPixel","host","refValue","getValue","updateInPlace","width","height","idealWidth","Math","ceil","getSize","idealHeight","useSmallestIdeal","window","innerWidth","innerHeight","toString","decimals","percentage","toFixed","pixels","fromString","source","match","_Regex","exec","length","sourceValue","parseFloat","sourceUnit","_UNITMODE_PERCENTAGE","_UNITMODE_PIXEL","tmpRect","tmpRect2","tmpV1","tmpV2","Measure","left","top","copyFrom","other","copyFromFloats","static","a","b","result","min","right","max","bottom","addAndTransformToRef","transform","addX","addY","addWidth","addHeight","Number","MAX_VALUE","i","transformCoordinates","x","y","floor","transformToRef","isEqualsTo","Vector2WithInfo","buttonIndex","super","Matrix2D","constructor","m00","m01","m10","m11","m20","m21","m","Float32Array","fromValues","determinant","invertToRef","l0","l1","l2","l3","l4","l5","det","detDiv","det4","det5","multiplyToRef","r0","r1","r2","r3","r4","r5","angle","s","sin","c","cos","tx","ty","scaleX","scaleY","parentMatrix","TranslationToRef","_TempPreTranslationMatrix","ScalingToRef","_TempScalingMatrix","RotationToRef","_TempRotationMatrix","_TempPostTranslationMatrix","_TempCompose0","_TempCompose1","_TempCompose2","Identity","MathTools","precision","DefaultRoundingPrecision","round","Control","isReadOnly","_isReadOnly","transformedMeasure","_evaluatedMeasure","clipChildren","_clipChildren","clipContent","_clipContent","shadowOffsetX","_shadowOffsetX","_markAsDirty","shadowOffsetY","_shadowOffsetY","shadowBlur","_shadowBlur","_previousShadowBlur","shadowColor","_shadowColor","typeName","_getTypeName","getClassName","accessibilityTag","_accessibilityTag","onAccessibilityTagChangedObservable","_host","fontOffset","_fontOffset","offset","alpha","_alpha","_alphaSet","highlightLineWidth","_highlightLineWidth","isHighlighted","_isHighlighted","highlightColor","_highlightColor","_scaleX","_markMatrixAsDirty","_scaleY","rotation","_rotation","transformCenterY","_transformCenterY","transformCenterX","_transformCenterX","horizontalAlignment","_horizontalAlignment","verticalAlignment","_verticalAlignment","fixedRatio","_fixedRatio","fixedRatioMasterIsWidth","_fixedRatioMasterIsWidth","_width","widthInPixels","_cachedParentMeasure","isNaN","_height","heightInPixels","fontFamily","_fontFamily","_resetFontCache","fontStyle","_fontStyle","fontWeight","_fontWeight","style","_style","remove","_styleObserver","add","_isFontSizeInPercentage","_fontSize","fontSizeInPixels","fontSizeToUse","_tempParentMeasure","fontSize","color","_color","gradient","_gradient","zIndex","_zIndex","parent","_reOrderControl","notRenderable","_doNotRender","isVisible","_isVisible","onIsVisibleChangedObservable","isDirty","_isDirty","linkedMesh","_linkedMesh","descendantsOnlyPadding","_descendantsOnlyPadding","paddingLeft","_paddingLeft","paddingLeftInPixels","_paddingLeftInPixels","paddingRight","_paddingRight","paddingRightInPixels","_paddingRightInPixels","paddingTop","_paddingTop","paddingTopInPixels","_paddingTopInPixels","paddingBottom","_paddingBottom","paddingBottomInPixels","_paddingBottomInPixels","_left","leftInPixels","_top","topInPixels","linkOffsetX","_linkOffsetX","linkOffsetXInPixels","linkOffsetY","_linkOffsetY","linkOffsetYInPixels","centerX","_currentMeasure","centerY","isEnabled","_isEnabled","recursivelyFirePointerOut","control","pointer","_lastControlOver","_onPointerOut","undefined","children","forEach","disabledColor","_disabledColor","disabledColorItem","_disabledColorItem","name","Empty","_tempPaddingMeasure","HORIZONTAL_ALIGNMENT_CENTER","VERTICAL_ALIGNMENT_CENTER","_wasDirty","_prevCurrentMeasureTransformedIntoGlobalSpace","_transformMatrix","_invertTransformMatrix","_transformedPosition","_isMatrixDirty","_fontSet","_dummyVector2","_downCount","_enterCount","_downPointerIds","_evaluatedParentMeasure","_rebuildLayout","_customData","_isClipped","_automaticSize","metadata","isHitTestVisible","isPointerBlocker","isFocusInvisible","useBitmapCache","hoverCursor","onWheelObservable","onPointerMoveObservable","onPointerOutObservable","onPointerDownObservable","onPointerUpObservable","onPointerClickObservable","onPointerEnterObservable","onDirtyObservable","onBeforeDrawObservable","onAfterDrawObservable","onDisposeObservable","animations","_tmpMeasureA","getAscendantOfClass","className","markAsDirty","force","markAllAsDirty","_markAllAsDirty","isAscendant","container","getLocalCoordinates","globalCoordinates","getLocalCoordinatesToRef","getParentLocalCoordinates","moveToVector3","position","scene","_rootContainer","HORIZONTAL_ALIGNMENT_LEFT","VERTICAL_ALIGNMENT_TOP","globalViewport","_getGlobalViewport","projectedPosition","getTransformMatrix","_moveToProjectedPosition","z","getDescendantsToRef","results","directDescendantsOnly","predicate","getDescendants","Array","linkWithMesh","mesh","index","_linkedControls","indexOf","splice","push","setPadding","setPaddingInPixels","oldLeft","oldTop","parentMeasure","_processMeasures","getContext","newLeft","newTop","leftAndTopIgnoreAdaptiveScaling","abs","_offsetLeft","_offsetTop","_flagDescendantsAsMatrixDirty","_intersectsRect","rect","context","_transform","_computeAdditionalOffsetX","_computeAdditionalOffsetY","invalidateRect","useInvalidateRectOptimization","CombineToRef","leftShadowOffset","rightShadowOffset","topShadowOffset","bottomShadowOffset","offsetX","offsetY","_font","_prepareFont","_link","uniqueId","getScene","getUniqueId","translate","rotate","scale","_cachedOffsetX","_cachedOffsetY","ComposeToRef","_renderHighlight","save","strokeStyle","lineWidth","_renderHighlightSpecific","restore","strokeRect","_getColor","getCanvasGradient","_applyStates","font","fillStyle","AllowAlphaInheritance","globalAlpha","renderToIntermediateTexture","_layout","_numLayoutCalls","rebuildCount","_evaluateClippingState","_preMeasure","_measure","_computeAlignment","_additionalProcessing","hasObservers","parentWidth","parentHeight","HORIZONTAL_ALIGNMENT_RIGHT","VERTICAL_ALIGNMENT_BOTTOM","_clipForChildren","_clip","invalidatedRectangle","beginPath","_ClipMeasure","intersection","clip","_render","_numRenderCalls","_cacheData","putImageData","_draw","getImageData","contains","_shouldBlockPointer","_processPicking","pi","type","pointerId","deltaX","deltaY","_processObservables","_onPointerMove","target","coordinates","_onPointerEnter","canNotify","_onPointerDown","rootContainer","_capturedPointerIds","event","_onPointerUp","notifyClick","canNotifyClick","delete","_forcePointerUp","key","_onWheelScroll","_onCanvasBlur","previousControlOver","_registerLastControlDown","_lastPickedControl","_lastControlDown","_GetFontOffset","child","clone","serialization","serialize","cloned","parse","serializedObject","_parseFromContent","serializationObject","animationIndex","parsedAnimation","internalClass","Parse","autoAnimate","beginAnimation","autoAnimateFrom","autoAnimateTo","autoAnimateLoop","autoAnimateSpeed","dispose","clear","removeControl","_HORIZONTAL_ALIGNMENT_LEFT","_HORIZONTAL_ALIGNMENT_RIGHT","_HORIZONTAL_ALIGNMENT_CENTER","_VERTICAL_ALIGNMENT_TOP","_VERTICAL_ALIGNMENT_BOTTOM","_VERTICAL_ALIGNMENT_CENTER","_FontHeightSizes","engine","Error","getFontOffset","controlType","arc","PI","closePath","isReady","AddHeader","TextWrapping","Container","_renderToIntermediateTexture","adaptHeightToChildren","_adaptHeightToChildren","adaptWidthToChildren","_adaptWidthToChildren","background","_background","backgroundGradient","_backgroundGradient","_children","_measureForChildren","_intermediateTexture","logLayoutCycleErrors","maxLayoutCycle","onControlAddedObservable","onControlRemovedObservable","_inverseTransformMatrix","_inverseMeasure","getChildByName","getChildByType","containsControl","addControl","clearControls","slice","_cleanControlAfterRemoval","wasAdded","_getBackgroundColor","_localDraw","fillRect","_beforeLayout","scaleTo","hasAlpha","computedWidth","computedHeight","_postMeasure","renderToIntermediateTextureThisDraw","contextToDrawTo","clearRect","drawImage","canvas","item","_changeCursor","childSerializationObject","childData","Rectangle","thickness","_thickness","cornerRadius","_cornerRadius","cornerRadiusX","cornerRadiusY","cornerRadiusZ","cornerRadiusW","_cachedRadius","additionalWidth","additionalHeight","_getRectangleFill","_drawRoundedRect","fill","stroke","moveTo","lineTo","TextBlock","lines","_lines","resizeToFit","_resizeToFit","textWrapping","_textWrapping","text","_text","onTextChangedObservable","textHorizontalAlignment","_textHorizontalAlignment","textVerticalAlignment","_textVerticalAlignment","lineSpacing","_lineSpacing","outlineWidth","_outlineWidth","underline","_underline","lineThrough","_lineThrough","applyOutlineToUnderline","_applyOutlineToUnderline","outlineColor","_outlineColor","wordDivider","_wordDivider","forceResizeWidth","_forceResizeWidth","Clip","onLinesReadyObservable","_linesTemp","_breakLines","maxLineWidth","line","newWidth","newHeight","_drawText","textWidth","strokeText","fillText","_drawLine","xFrom","yFrom","xTo","yTo","currentStroke","_renderLines","lineJoin","miterLimit","refWidth","refHeight","split","Ellipsis","_line","_parseLineEllipsis","WordWrap","_parseLineWordWrap","WordWrapEllipsis","_parseLineWordWrapEllipsis","_parseLine","_getTextMetricsWidth","measureText","_getCharsToRemove","lineLength","diff","charWidth","removeChars","characters","from","join","textMetrics","actualBoundingBoxLeft","actualBoundingBoxRight","words","wordSplittingFunction","n","testLine","testWidth","_computeHeightForLinesOf","lastLine","currentLine","linesToRemove","pop","rootY","ascent","descent","lineCount","computeExpectedHeight","createCanvas","Image","isLoaded","_loaded","detectPointerOnOpaqueOnly","_detectPointerOnOpaqueOnly","sliceLeft","_sliceLeft","sliceRight","_sliceRight","sliceTop","_sliceTop","sliceBottom","_sliceBottom","sourceLeft","_sourceLeft","sourceTop","_sourceTop","sourceWidth","_sourceWidth","sourceHeight","_sourceHeight","imageWidth","_imageWidth","imageHeight","_imageHeight","populateNinePatchSlicesFromImage","_populateNinePatchSlicesFromImage","_extractNinePatchSliceDataFromImage","isSVG","_isSVG","svgAttributesComputationCompleted","_svgAttributesComputationCompleted","autoScale","_autoScale","synchronizeSizeWithContent","stretch","_stretch","_rotate90","preserveProperties","_domImage","getEngine","dataUrl","toDataURL","rotatedImage","_cellId","_cellWidth","_cellHeight","_handleRotationForSVGImage","_imageDataCache","data","srcImage","dstImage","_rotate90SourceProperties","onSVGAttributesComputedObservable","addOnce","srcLeft","srcTop","srcWidth","domImage","srcHeight","dstLeft","dstTop","dstWidth","dstHeight","mult","_workingCanvas","imageData","_onImageLoaded","onload","onImageLoadedObservable","_source","SourceImgCache","_removeCacheUsage","get","timesUsed","_svgCheck","has","cachedData","img","loaded","waitingForLoadCallback","bind","createCanvasImage","set","waitingCallback","referrerPolicy","src","SVGSVGElement","search","lastIndexOf","svgsrc","elemid","svgExist","document","body","querySelector","svgDoc","contentDocument","documentElement","vb","getAttribute","docwidth","docheight","getElementById","_getSVGAttribs","addEventListener","svgImage","createElement","appendChild","svgobj","elem","vb_width","vb_height","elem_bbox","getBBox","elem_matrix_a","elem_matrix_d","elem_matrix_e","elem_matrix_f","mainMatrix","baseVal","consolidate","matrix","d","e","f","cellWidth","cellHeight","cellId","url","STRETCH_FILL","STRETCH_NONE","STRETCH_UNIFORM","STRETCH_NINE_PATCH","STRETCH_EXTEND","_prepareWorkingCanvasForOpaqueDetection","_drawImage","sx","sy","sw","sh","tw","th","rowCount","naturalWidth","column","row","hRatio","vRatio","ratio","_renderNinePatch","leftWidth","topHeight","bottomHeight","rightWidth","centerWidth","centerHeight","targetCenterWidth","targetCenterHeight","centerLeftOffset","centerTopOffset","rightOffset","bottomOffset","Map","Button","image","_image","textBlock","_textBlock","delegatePickingToChildren","alphaStore","pointerEnterAnimation","pointerOutAnimation","pointerDownAnimation","pointerUpAnimation","textBlockName","imageName","imageUrl","iconImage","StackPanel","isVertical","_isVertical","spacing","_spacing","_doNotTrackManualChanges","_manualWidth","_manualHeight","ignoreLayoutWarnings","stackWidth","stackHeight","childrenCount","panelWidthChanged","panelHeightChanged","previousHeight","previousWidth","manualWidth","manualHeight","Checkbox","checkSizeRatio","_checkSizeRatio","isChecked","_isChecked","onIsCheckedChangedObservable","actualWidth","actualHeight","offsetWidth","offsetHeight","title","onValueChanged","panel","checkbox","header","TextWrapper","_characters","txt","removePart","idxStart","idxEnd","insertTxt","newCharacters","charAt","idx","substr","temp","substring","to","isWord","rWord","InputText","maxWidth","_maxWidth","maxWidthInPixels","highligherOpacity","_highligherOpacity","onFocusSelectAll","_onFocusSelectAll","textHighlightColor","_textHighlightColor","margin","_margin","marginInPixels","autoStretchWidth","_autoStretchWidth","focusedBackground","_focusedBackground","focusedColor","_focusedColor","placeholderColor","_placeholderColor","placeholderText","_placeholderText","deadKey","_deadKey","flag","highlightedText","_highlightedText","addKey","_addKey","currentKey","_currentKey","_textWrapper","valueAsString","_textHasChanged","_isFocused","_blinkIsEven","_cursorOffset","_isTextHighlightOn","_startHighlightIndex","_endHighlightIndex","_cursorIndex","_isPointerDown","promptMessage","disableMobilePrompt","onBeforeKeyAddObservable","onFocusObservable","onBlurObservable","onTextHighlightObservable","onTextCopyObservable","onTextCutObservable","onTextPasteObservable","onKeyboardEventProcessedObservable","onBlur","_scrollLeft","clearTimeout","_blinkTimeout","unRegisterClipboardEvents","_onClipboardObserver","onClipboardObservable","_onPointerDblTapObserver","onPointerObservable","onFocus","_focusedBy","prompt","focusedControl","registerClipboardEvents","clipboardInfo","_onCopyText","_onCutText","_onPasteText","pointerInfo","_processDblClick","_selectAllText","focus","moveFocusToControl","blur","keepsFocusWith","_connectedVirtualKeyboard","processKey","keyCode","evt","ctrlKey","metaKey","preventDefault","isTextHighlightOn","deletePosition","shiftKey","insertPosition","_updateValueFromCursorIndex","moveLeft","moveRight","_clickedCoordinate","processKeyboard","ev","clipboardData","setData","types","getData","clipTextLeft","_beforeRenderText","_textWidth","marginWidth","availableWidth","textLeft","absoluteCursorPosition","currentSize","previousDist","cursorOffsetText","cursorOffsetWidth","cursorLeft","setTimeout","highlightCursorOffsetWidth","highlightCursorLeft","_capturingControl","pointerType","textWrapper","Grid","_cells","columnCount","_columnDefinitions","_rowDefinitions","_childControls","cells","getRowDefinition","getColumnDefinition","addRowDefinition","_rowDefinitionObservers","addColumnDefinition","_columnDefinitionObservers","setRowDefinition","current","setColumnDefinition","getChildrenAt","cell","getChildCellInfo","_tag","_removeCell","childIndex","_offsetCell","previousKey","removeColumnDefinition","removeRowDefinition","goodContainer","_getGridDefinitions","definitionCallback","widths","heights","lefts","tops","globalWidthPercentage","availableHeight","globalHeightPercentage","rowDefinition","columnDefinition","Object","prototype","hasOwnProperty","call","parseInt","columns","rows","tags","cd","rd","columnValue","rowValue","cellInfo","rowNumber","columnNumber","ColorPicker","equals","toHSVToRef","_tmpColor","_h","r","_s","g","_v","_Epsilon","onValueChangedObservable","size","_pointerStartedOnSquare","_pointerStartedOnWheel","_squareLeft","_squareTop","_squareSize","_lastPointerDownId","_pointerIsDown","_updateSquareProps","radius","squareSize","sqrt","_drawGradientSquare","hueValue","lgh","createLinearGradient","addColorStop","lgv","_drawCircle","_createColorWheelCanvas","maxDistSq","innerRadius","minDistSq","distSq","dist","ang","atan2","alphaRatio","alphaAmount","maxAlpha","minAlpha","lowerRadius","upperRadius","wheelThickness","_colorWheelCanvas","cx","cy","_updateValueFromPointer","_isPointOnSquare","_isPointOnWheel","dx","dy","advancedTexture","options","Promise","resolve","pickerWidth","pickerHeight","headerHeight","lastColor","swatchLimit","numSwatchesPerLine","drawerMaxRows","rawSwatchSize","gutterSize","colGutters","swatchSize","drawerMaxSize","containerSize","buttonColor","buttonBackgroundColor","buttonBackgroundHoverColor","buttonBackgroundClickColor","buttonDisabledColor","buttonDisabledBackgroundColor","luminanceLimitColor","luminanceLimit","iconColorDark","iconColorLight","buttonFontSize","butEdit","inputFieldLabels","inputTextBackgroundColor","inputTextColor","swatchNumber","swatchDrawer","butSave","lastVal","activeField","editSwatchMode","dialogContainer","savedColors","topRow","initialRows","gutterCount","pickerPanel","panelHead","pickerPanelRows","closeButton","CreateSimpleButton","headerColor3","closeIconColor","toHexString","closePicker","currentSwatch","dialogBody","dialogBodyCols","pickerGrid","picker","editSwatches","updateValues","pickerBodyRight","pickerBodyRightRows","pickerSwatchesButtons","pickerButtonsCol","pickerSwatches","pickeSwatchesRows","activeSwatches","labelWidth","labelHeight","labelTextSize","newText","newSwatch","swatchOutline","currentText","buttonGrid","buttonGridRows","buttonWidth","buttonHeight","butOK","butCancel","disableButton","setEditButtonVisibility","updateSwatches","pickerColorValues","currentColor","rgbValuesQuadrant","labelText","rValInt","updateInt","gValInt","bValInt","rValDec","updateFloat","gValDec","bValDec","hexValueQuadrant","hexVal","minusPound","inputField","pickedColor","field","channel","newValue","test","newSwatchRGB","createSwatch","icon","swatch","swatchColor","swatchLuminence","mode","thisButton","button","currentRows","thisRow","totalButtonsThisRow","buttonIterations","w","enableButton","disabled","val","newHexValue","checkHex","leadingZero","Ellipse","drawEllipse","FocusableButton","_unfocusedColor","displose","InputTextArea","autoStretchHeight","_autoStretchHeight","maxHeight","_maxHeight","maxHeightInPixels","_updateCursorPosition","_highlightCursorInfo","initialStartIndex","initialRelativeStartIndex","initialLineIndex","_cursorInfo","globalStartIndex","globalEndIndex","relativeEndIndex","relativeStartIndex","currentLineIndex","alternativeProcessKey","code","rightDelta","upperLine","tmpIndex","relativeIndex","currentWidth","_contextForBreakLines","upperWidth","lineEnding","upperLineRelativeIndex","underLine","underWidth","underLineRelativeIndex","flushedLine","map","char","longerString","reduce","acc","longerStringWidth","_availableWidth","totalHeight","_availableHeight","tmpLength","_computeScroll","_clipTextLeft","_clipTextTop","selectedHeight","textTop","_scrollTop","deltaIndex","cursorTop","_resetBlinking","startLineIndex","endLineIndex","highlightRootY","highlightRootX","begin","end","leftOffsetWidth","selectedText","hightlightWidth","_clickedCoordinateX","_clickedCoordinateY","movementX","movementY","globalIndex","lastClickedCoordinateY","relativeCoordinateY","relativeXPosition","_evt","dipose","InputPassword","pwdTextWrapper","Line","dash","_dash","connectedControl","_connectedControl","_connectedControlDirtyObserver","x1","_x1","y1","_y1","x2","_x2","y2","_y2","_lineWidth","_effectiveX2","_effectiveY2","setLineDash","MultiLinePoint","multiLine","_multiLine","_x","_y","_point","_control","_controlObserver","onPointUpdate","_mesh","_meshObserver","onAfterCameraRenderObservable","resetLinks","_translatePoint","getProjectedPositionWithZ","getBoundingInfo","boundingSphere","center","getWorldMatrix","xValue","_canvas","yValue","MultiLine","_points","getAt","items","point","reset","previousPoint","first","_minX","_minY","_maxX","_maxY","RadioButton","executeOnAllControls","group","childRadio","offseHeight","radio","BaseSlider","displayThumb","_displayThumb","step","_step","barOffset","_barOffset","barOffsetInPixels","thumbWidth","_thumbWidth","thumbWidthInPixels","minimum","_minimum","_maximum","maximum","isThumbClamped","_isThumbClamped","_effectiveBarOffset","_getThumbPosition","_backgroundBoxLength","_getThumbThickness","thumbThickness","_backgroundBoxThickness","_prepareRenderingData","_renderLeft","_renderTop","_renderWidth","_renderHeight","_effectiveThumbThickness","console","error","Slider","displayValueBar","_displayValueBar","borderColor","_borderColor","thumbColor","_thumbColor","isThumbCircle","_isThumbCircle","thumbPosition","SelectorGroup","_groupPanel","_selectors","_groupHeader","_addGroupHeader","groupPanel","selectors","label","groupHeading","_getSelector","selectorNb","removeSelector","CheckboxGroup","addCheckbox","func","checked","state","_selector","isHorizontal","controlFirst","buttonBackground","_setSelectorLabel","_setSelectorLabelColor","_setSelectorButtonColor","_setSelectorButtonBackground","RadioGroup","_selectNb","addRadio","nb","SliderGroup","addSlider","v","onValueChange","SelectionPanel","groups","_buttonColor","_buttonBackground","_headerColor","_barColor","_barHeight","_spacerHeight","_bars","_groups","_panel","_addSpacer","headerColor","_setHeaderColor","_setbuttonColor","j","labelColor","_labelColor","_setLabelColor","_setButtonBackground","barColor","_setBarColor","barHeight","_setBarHeight","spacerHeight","_setSpacerHeight","separator","bar","addGroup","removeGroup","groupNb","setHeaderName","relabel","removeFromGroupSelector","addToGroupCheckbox","addToGroupRadio","addToGroupSlider","onVal","_ScrollViewerWindow","freezeControls","_freezeControls","_restoreMeasures","textureSize","renderWidth","renderHeight","measure","_updateMeasures","_useBuckets","_makeBuckets","bucketWidth","_bucketWidth","bucketHeight","_bucketHeight","setBucketSizes","_buckets","_bucketLen","_dispatchInBuckets","_oldLeft","_oldTop","bStartX","_origLeft","origLeft","bEndX","bEndY","_origTop","origTop","bStartY","bucket","lstc","origLeftForChildren","origTopForChildren","_updateChildrenMeasures","_parentMeasure","_scrollChildren","_scrollChildrenWithBuckets","scrollLeft","scrollTop","parentClientWidth","parentClientHeight","ScrollBar","invertScrollDirection","_invertScrollDirection","invert","_tempMeasure","sign","_first","_originX","_originY","delta","ImageScrollBar","backgroundImage","_backgroundBaseImage","num90RotationInVerticalMode","_backgroundImage","rotatedValue","thumbImage","_thumbBaseImage","_thumbImage","thumbLength","_thumbLength","thumbHeight","_thumbHeight","barImageHeight","_barImageHeight","ScrollViewer","horizontalBar","_horizontalBar","verticalBar","_verticalBar","_window","forceHorizontalBar","_forceHorizontalBar","_grid","_barSize","forceVerticalBar","_forceVerticalBar","isImageBased","_pointerIsOver","_wheelPrecision","_horizontalBarImageHeight","_verticalBarImageHeight","_oldWindowContentsWidth","_oldWindowContentsHeight","_useImageBar","_horizontalBarSpace","_verticalBarSpace","_dragSpace","_addBar","barBackground","resetWindow","_buildClientSizes","idealRatio","_clientWidth","_clientHeight","_updateScroller","_setWindowPosition","wheelPrecision","scrollBackground","_barImage","hb","horizontalThumbImage","_horizontalBarImage","verticalThumbImage","_verticalBarImage","barSize","horizontalBarImageHeight","verticalBarImageHeight","_barBackground","barImage","_barBackgroundImage","horizontalBarImage","_horizontalBarBackgroundImage","verticalBarImage","_verticalBarBackgroundImage","windowContentsWidth","windowContentsHeight","_endLeft","_endTop","_attachWheel","barControl","barContainer","_onWheelObserver","ToggleButton","_group","isActive","_isActive","toActiveAnimation","toInactiveAnimation","onIsActiveChangedObservable","childToggle","pointerEnterActiveAnimation","pointerOutActiveAnimation","pointerDownActiveAnimation","pointerUpActiveAnimation","pointerEnterInactiveAnimation","pointerOutInactiveAnimation","pointerDownInactiveAnimation","pointerUpInactiveAnimation","KeyPropertySet","VirtualKeyboard","onKeyPressObservable","defaultButtonWidth","defaultButtonHeight","defaultButtonPaddingLeft","defaultButtonPaddingRight","defaultButtonPaddingTop","defaultButtonPaddingBottom","defaultButtonColor","defaultButtonBackground","shiftButtonColor","selectedShiftThickness","shiftState","_currentlyConnectedInputText","_connectedInputTexts","_onKeyPressObserver","_createKey","propertySet","addKeysRow","keys","propertySets","maxKey","properties","applyShiftState","rowContainer","button_tblock","toUpperCase","toLowerCase","connectedInputText","connect","input","some","onFocusObserver","onBlurObserver","disconnect","filtered","filter","_removeConnectedInputObservables","returnValue","stackPanel","DisplayGrid","displayMinorLines","_displayMinorLines","displayMajorLines","_displayMajorLines","minorLineTickness","_minorLineTickness","minorLineColor","_minorLineColor","majorLineTickness","_majorLineTickness","majorLineColor","_majorLineColor","majorLineFrequency","_majorLineFrequency","cellCountX","cellCountY","cellX","cellY","ImageBasedSlider","valueBarImage","_valueBarImage","BaseGradient","_colorStops","_gradientDirty","_addColorStopsToCanvasGradient","stop","_canvasGradient","_context","_createCanvasGradient","removeColorStop","colorStop","clearColorStops","colorStops","LinearGradient","x0","y0","_x0","_y0","RadialGradient","_r0","_r1","createRadialGradient","Style","AdvancedDynamicTexture","numLayoutCalls","numRenderCalls","renderScale","_renderScale","_onResize","_idealWidth","_idealHeight","_useSmallestIdeal","renderAtIdealSize","_renderAtIdealSize","rwidth","rheight","layer","_layerToDispose","getChildren","getControlsByType","getControlByName","_getControlByKey","find","_focusedControl","isForeground","isBackground","_clipboardData","generateMipMaps","samplingMode","invertY","onGuiReadyObservable","_isFullscreen","_fullscreenViewport","_blockNextFocusCheck","_cursorChanged","_defaultMousePointerId","_rootChildrenHaveChanged","Set","onControlPickedObservable","onBeginLayoutObservable","onEndLayoutObservable","onBeginRenderObservable","onEndRenderObservable","premulAlpha","applyYInversionOnUpdate","checkPointerEveryFrame","_useInvalidateRectOptimization","_invalidatedRectangle","_clearMeasure","_onClipboardCopy","rawEvt","_onClipboardCut","_onClipboardPaste","parseContent","parseSerializedObject","_texture","_rootElement","getInputElement","_renderObserver","onBeforeCameraRenderObservable","camera","_checkUpdate","_controlAddedObserver","_controlRemovedObserver","_preKeyboardObserver","onPreKeyboardObservable","info","skipOnPointerObservable","_resizeObserver","onResizeObservable","invalidMinX","invalidMinY","invalidMaxX","invalidMaxY","maxX","maxY","createStyle","moveToNonOverlappedPosition","overlapGroup","deltaStep","repelFactor","controlsForGroup","isArray","descendants","control1","velocity","control2","_Overlaps","subtract","diffLength","normalize","overlapDeltaMultiplier","_prePointerObserver","onPrePointerObservable","_sceneRenderObserver","onBeforeRenderObservable","_pointerObserver","_canvasPointerOutObserver","onCanvasPointerOutObservable","_canvasBlurObserver","onCanvasBlurObservable","texture","getRenderWidth","getRenderHeight","globalViewPort","toGlobal","targetX","targetY","getProjectedPosition","worldMatrix","skipUpdate","layerMask","isDisposed","update","AllowGPUOptimizations","skipRender","_checkGuiIsReady","activeCamera","cursor","_doPicking","cameraToUseForPointers","viewport","doNotHandleCursors","_manageFocus","_cleanControlAfterRemovalFromList","list","pick","_scene","_translateToPicking","tempViewport","pointerX","pointerY","originalCameraToUseForPointers","rigCameras","rigViewport","rigCamera","toGlobalToRef","transformedX","getHardwareScalingLevel","transformedY","attach","isPointerCaptured","_attachPickingToSceneRender","_attachToOnPointerOut","_attachToOnBlur","self","removeEventListener","_transformUvs","uv","textureMatrix","getTextureMatrix","isIdentityAs3x2","homogeneousTextureMatrix","getRowToRef","setRowFromFloats","wrapU","fX","trunc","wrapV","fY","attachToMesh","supportPointerMove","pickInfo","hit","pickedMesh","getTextureCoordinates","friendlyControls","canMoveFocus","otherHost","enablePointerMoveEvents","pickFunction","forcePicking","pointerEvent","entries","serializeContent","root","scaleToSize","newName","noMipmap","snippetId","appendToAdt","adt","CreateFullscreenUI","serialized","_LoadURLContentAsync","SnippetUrl","replace","parseFromSnippetAsync","ParseFromSnippetAsync","parseFromURLAsync","ParseFromFileAsync","snippet","reject","request","readyState","status","gui","payload","JSON","responseText","jsonPayload","encodedGui","TextDecoder","decode","open","send","onlyAlphaTesting","materialSetupCallback","_CreateMaterial","internalClassType","material","backFaceCulling","diffuseColor","specularColor","diffuseTexture","emissiveTexture","opacityTexture","foreground","sampling","adaptiveScaling","resultScene","newScale","guiIsReady","AdvancedDynamicTextureInstrumentation","renderTimeCounter","_renderTime","layoutTimeCounter","_layoutTime","captureRenderTime","_captureRenderTime","_onBeginRenderObserver","beginMonitoring","_onEndRenderObserver","endMonitoring","captureLayoutTime","_captureLayoutTime","_onBeginLayoutObserver","_onEndLayoutObserver","XmlLoaderError","XmlLoader","parentClass","_nodes","_nodeTypes","element","attribute","_isLoaded","_objectAttributes","_parentClass","_getChainElement","attributeValue","_getClassAttribute","attributeName","_createGuiElement","node","linkParent","guiNode","nodeName","attributes","includes","startsWith","endsWith","getNamedItem","id","exception","_parseGrid","cellNode","totalColumnsNumber","nodeType","nodeValue","k","firstChild","_parseXml","nextSibling","_parseElement","_prepareSourceElement","variable","iterator","_parseElementsFromSource","dataSource","splittedSource","generated","setAttribute","_rootNode","getNodeById","getNodes","loadLayout","xmlFile","rootNode","onSuccess","onError","xhttp","XMLHttpRequest","responseXML","xmlDoc","onerror","async","Vector3WithInfo","Control3D","_node","scaling","_isScaledByManager","behaviors","_behaviors","addBehavior","behavior","init","isLoading","onDataLoadedObservable","removeBehavior","detach","getBehaviorByName","setEnabled","linkToTransformNode","_prepareNode","_createNode","_injectGUI3DReservedDataStore","isPickable","_affectMaterial","reservedDataStore","GUI3D","_isTouchButton3D","_generatePointerEventType","forcePointerUp","pickedPoint","originMeshPosition","_disposeNode","ContentDisplay3D","_contentResolution","_contentScaleRatio","content","_content","utilityLayer","_facadeTexture","utilityLayerScene","_setFacadeTextureScaling","_applyFacade","_contentScaleRatioY","contentResolution","_resetContent","_disposeFacadeTexture","facadeTexture","AbstractButton3D","Button3D","_options","depth","_currentMaterial","emissiveColor","scaleInPlace","faceUV","useRightHandedSystem","wrap","Container3D","blockLayout","_blockLayout","_arrangeChildren","updateLayout","UNSET_ORIENTATION","FACEORIGIN_ORIENTATION","FACEORIGINREVERSED_ORIENTATION","FACEFORWARD_ORIENTATION","FACEFORWARDREVERSED_ORIENTATION","VolumeBasedPanel","orientation","_orientation","_columns","_rowThenColum","_rows","controlCount","currentInverseWorld","computeWorldMatrix","boundingBox","getHierarchyBoundingVectors","extendSize","subtractToRef","startOffsetX","startOffsetY","nodeGrid","cellCounter","_mapGridNode","_finalProcessing","CylinderPanel","_radius","nodePosition","newPos","_cylindricalMapping","lookAt","yAngle","H","_backPlate"],"sourceRoot":""}