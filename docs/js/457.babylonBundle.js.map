{"version":3,"file":"js/457.babylonBundle.js","mappings":"sTAEO,IAAIA,EACJ,MAAMC,EAAmB,IAAIC,SAASC,KACzC,IAAI,GAAOC,MAAMC,IACbL,EAAaK,EACbF,EAAQE,EAAI,GACd,IC0DN,MAjDA,oBACI,KAAAC,SAAW,CAACL,GAEZ,KAAAM,YAAcC,MAAOC,EAAgBC,KAEjC,MAAMC,EAAQ,IAAI,IAAMF,GAExBE,EAAMC,cAAc,KAAM,IAAI,KAAa,EAAMZ,IAGjD,MAAMa,EAAS,IAAI,IAAgB,kBAAmB,EAAGC,KAAKC,GAAK,EAAG,GAAI,IAAI,IAAQ,EAAG,EAAG,GAAIJ,GAGhGE,EAAOG,UAAU,IAAQC,QAGzBJ,EAAOK,cAAcR,GAAQ,GAGf,IAAI,IAAiB,QAAS,IAAI,IAAQ,EAAG,EAAG,GAAIC,GAG5DQ,UAAY,GAGlB,MAAMC,GAAS,QACX,SACA,CAAEC,SAAU,EAAGC,SAAU,IACzBX,GAGJS,EAAOG,gBAAkB,IAAI,IAAgBH,EAAQ,IAAgBI,eAAgB,CAAEC,KAAM,EAAGC,YAAa,IAAMf,GAGnHS,EAAOO,SAASC,EAAI,EAGpB,MAAMC,GAAS,QACX,SACA,CAAEC,MAAO,EAAGC,OAAQ,GACpBpB,GAKJ,OAFAkB,EAAON,gBAAkB,IAAI,IAAgBM,EAAQ,IAAgBG,YAAa,CAAEP,KAAM,EAAGC,YAAa,KAEnGf,CAAK,CAEpB,E","sources":["webpack://babylonjs-typescript-webpack-template/./src/externals/ammo.ts","webpack://babylonjs-typescript-webpack-template/./src/scenes/exampleScenes/physicsWithAmmo.ts"],"sourcesContent":["import * as Ammo from \"ammo.js\";\r\n\r\nexport let ammoModule: any;\r\nexport const ammoReadyPromise = new Promise((resolve) => {\r\n    new Ammo().then((res: unknown) => {\r\n        ammoModule = res;\r\n        resolve(res);\r\n    });\r\n});\r\n","import { Engine } from \"@babylonjs/core/Engines/engine\";\r\nimport { Scene } from \"@babylonjs/core/scene\";\r\nimport { ArcRotateCamera } from \"@babylonjs/core/Cameras/arcRotateCamera\";\r\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { HemisphericLight } from \"@babylonjs/core/Lights/hemisphericLight\";\r\nimport { CreateSphere } from \"@babylonjs/core/Meshes/Builders/sphereBuilder\";\r\nimport { CreateGround } from \"@babylonjs/core/Meshes/Builders/groundBuilder\";\r\nimport { AmmoJSPlugin } from \"@babylonjs/core/Physics/Plugins/ammoJSPlugin\";\r\nimport \"@babylonjs/core/Physics/physicsEngineComponent\";\r\n\r\n// If you don't need the standard material you will still need to import it since the scene requires it.\r\nimport \"@babylonjs/core/Materials/standardMaterial\";\r\nimport { PhysicsImpostor } from \"@babylonjs/core/Physics/physicsImpostor\";\r\nimport { ammoModule, ammoReadyPromise } from \"../../externals/ammo\";\r\nimport { CreateSceneClass } from \"../../createScene\";\r\n\r\nclass PhysicsSceneWithAmmo implements CreateSceneClass {\r\n    preTasks = [ammoReadyPromise];\r\n\r\n    createScene = async (engine: Engine, canvas: HTMLCanvasElement): Promise<Scene> => {\r\n        // This creates a basic Babylon Scene object (non-mesh)\r\n        const scene = new Scene(engine);\r\n    \r\n        scene.enablePhysics(null, new AmmoJSPlugin(true, ammoModule));\r\n    \r\n        // This creates and positions a free camera (non-mesh)\r\n        const camera = new ArcRotateCamera(\"my first camera\", 0, Math.PI / 3, 10, new Vector3(0, 0, 0), scene);\r\n    \r\n        // This targets the camera to scene origin\r\n        camera.setTarget(Vector3.Zero());\r\n    \r\n        // This attaches the camera to the canvas\r\n        camera.attachControl(canvas, true);\r\n    \r\n        // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\r\n        const light = new HemisphericLight(\"light\", new Vector3(0, 1, 0), scene);\r\n    \r\n        // Default intensity is 1. Let's dim the light a small amount\r\n        light.intensity = 0.7;\r\n    \r\n        // Our built-in 'sphere' shape.\r\n        const sphere = CreateSphere(\r\n            \"sphere\",\r\n            { diameter: 2, segments: 32 },\r\n            scene\r\n        );\r\n    \r\n        sphere.physicsImpostor = new PhysicsImpostor(sphere, PhysicsImpostor.SphereImpostor, { mass: 2, restitution: 0.8}, scene);\r\n    \r\n        // Move the sphere upward 1/2 its height\r\n        sphere.position.y = 5;\r\n    \r\n        // Our built-in 'ground' shape.\r\n        const ground = CreateGround(\r\n            \"ground\",\r\n            { width: 6, height: 6 },\r\n            scene\r\n        );\r\n        \r\n        ground.physicsImpostor = new PhysicsImpostor(ground, PhysicsImpostor.BoxImpostor, { mass: 0, restitution: 0.6});\r\n    \r\n        return scene;\r\n    };\r\n}\r\n\r\nexport default new PhysicsSceneWithAmmo();\r\n"],"names":["ammoModule","ammoReadyPromise","Promise","resolve","then","res","preTasks","createScene","async","engine","canvas","scene","enablePhysics","camera","Math","PI","setTarget","Zero","attachControl","intensity","sphere","diameter","segments","physicsImpostor","SphereImpostor","mass","restitution","position","y","ground","width","height","BoxImpostor"],"sourceRoot":""}