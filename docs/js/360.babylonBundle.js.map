{"version":3,"file":"js/360.babylonBundle.js","mappings":"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","sources":["webpack://babylonjs-typescript-webpack-template/./dev/core/src/Physics/v1/physicsJoint.ts","webpack://babylonjs-typescript-webpack-template/./dev/core/src/Physics/v2/IPhysicsEnginePlugin.ts","webpack://babylonjs-typescript-webpack-template/./dev/core/src/Physics/v2/Plugins/havokPlugin.ts","webpack://babylonjs-typescript-webpack-template/./dev/core/src/Physics/v2/physicsBody.ts","webpack://babylonjs-typescript-webpack-template/./dev/core/src/Physics/v2/physicsMaterial.ts","webpack://babylonjs-typescript-webpack-template/./dev/core/src/Physics/v2/physicsShape.ts"],"sourcesContent":["import type { Vector3 } from \"../../Maths/math.vector\";\r\nimport type { IPhysicsEnginePlugin } from \"./IPhysicsEnginePlugin\";\r\n/**\r\n * Interface for Physics-Joint data\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\nexport interface PhysicsJointData {\r\n    //Important for some engines, optional!\r\n    /**\r\n     * The main pivot of the joint\r\n     */\r\n    mainPivot?: Vector3;\r\n    /**\r\n     * The connected pivot of the joint\r\n     */\r\n    connectedPivot?: Vector3;\r\n    /**\r\n     * The main axis of the joint\r\n     */\r\n    mainAxis?: Vector3;\r\n    /**\r\n     * The connected axis of the joint\r\n     */\r\n    connectedAxis?: Vector3;\r\n    /**\r\n     * The collision of the joint\r\n     */\r\n    collision?: boolean;\r\n    /**\r\n     * Native Oimo/Cannon/Energy data\r\n     */\r\n    nativeParams?: any;\r\n}\r\n\r\n/**\r\n * This is a holder class for the physics joint created by the physics plugin\r\n * It holds a set of functions to control the underlying joint\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\nexport class PhysicsJoint {\r\n    private _physicsJoint: any;\r\n    protected _physicsPlugin: IPhysicsEnginePlugin;\r\n\r\n    /**\r\n     * Initializes the physics joint\r\n     * @param type The type of the physics joint\r\n     * @param jointData The data for the physics joint\r\n     */\r\n    constructor(\r\n        /**\r\n         * The type of the physics joint\r\n         */\r\n        public type: number,\r\n        /**\r\n         * The data for the physics joint\r\n         */\r\n        public jointData: PhysicsJointData\r\n    ) {\r\n        jointData.nativeParams = jointData.nativeParams || {};\r\n    }\r\n\r\n    /**\r\n     * Gets the physics joint\r\n     */\r\n    public get physicsJoint(): any {\r\n        return this._physicsJoint;\r\n    }\r\n\r\n    /**\r\n     * Sets the physics joint\r\n     */\r\n    public set physicsJoint(newJoint: any) {\r\n        if (this._physicsJoint) {\r\n            //remove from the world\r\n        }\r\n\r\n        this._physicsJoint = newJoint;\r\n    }\r\n\r\n    /**\r\n     * Sets the physics plugin\r\n     */\r\n    public set physicsPlugin(physicsPlugin: IPhysicsEnginePlugin) {\r\n        this._physicsPlugin = physicsPlugin;\r\n    }\r\n\r\n    /**\r\n     * Execute a function that is physics-plugin specific.\r\n     * @param {Function} func the function that will be executed.\r\n     *                        It accepts two parameters: the physics world and the physics joint\r\n     */\r\n    public executeNativeFunction(func: (world: any, physicsJoint: any) => void) {\r\n        func(this._physicsPlugin.world, this._physicsJoint);\r\n    }\r\n\r\n    //TODO check if the native joints are the same\r\n\r\n    //Joint Types\r\n    /**\r\n     * Distance-Joint type\r\n     */\r\n    public static DistanceJoint = 0;\r\n    /**\r\n     * Hinge-Joint type\r\n     */\r\n    public static HingeJoint = 1;\r\n    /**\r\n     * Ball-and-Socket joint type\r\n     */\r\n    public static BallAndSocketJoint = 2;\r\n    /**\r\n     * Wheel-Joint type\r\n     */\r\n    public static WheelJoint = 3;\r\n    /**\r\n     * Slider-Joint type\r\n     */\r\n    public static SliderJoint = 4;\r\n    //OIMO\r\n    /**\r\n     * Prismatic-Joint type\r\n     */\r\n    public static PrismaticJoint = 5;\r\n    //\r\n    /**\r\n     * Universal-Joint type\r\n     * ENERGY FTW! (compare with this - @see http://ode-wiki.org/wiki/index.php?title=Manual:_Joint_Types_and_Functions)\r\n     */\r\n    public static UniversalJoint = 6;\r\n    /**\r\n     * Hinge-Joint 2 type\r\n     */\r\n    public static Hinge2Joint = PhysicsJoint.WheelJoint;\r\n    //Cannon\r\n    /**\r\n     * Point to Point Joint type.  Similar to a Ball-Joint.  Different in parameters\r\n     */\r\n    public static PointToPointJoint = 8;\r\n    //Cannon only at the moment\r\n    /**\r\n     * Spring-Joint type\r\n     */\r\n    public static SpringJoint = 9;\r\n    /**\r\n     * Lock-Joint type\r\n     */\r\n    public static LockJoint = 10;\r\n}\r\n\r\n/**\r\n * A class representing a physics distance joint\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\nexport class DistanceJoint extends PhysicsJoint {\r\n    /**\r\n     *\r\n     * @param jointData The data for the Distance-Joint\r\n     */\r\n    constructor(jointData: DistanceJointData) {\r\n        super(PhysicsJoint.DistanceJoint, jointData);\r\n    }\r\n\r\n    /**\r\n     * Update the predefined distance.\r\n     * @param maxDistance The maximum preferred distance\r\n     * @param minDistance The minimum preferred distance\r\n     */\r\n    public updateDistance(maxDistance: number, minDistance?: number) {\r\n        this._physicsPlugin.updateDistanceJoint(this, maxDistance, minDistance);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents a Motor-Enabled Joint\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\nexport class MotorEnabledJoint extends PhysicsJoint implements IMotorEnabledJoint {\r\n    /**\r\n     * Initializes the Motor-Enabled Joint\r\n     * @param type The type of the joint\r\n     * @param jointData The physical joint data for the joint\r\n     */\r\n    constructor(type: number, jointData: PhysicsJointData) {\r\n        super(type, jointData);\r\n    }\r\n\r\n    /**\r\n     * Set the motor values.\r\n     * Attention, this function is plugin specific. Engines won't react 100% the same.\r\n     * @param force the force to apply\r\n     * @param maxForce max force for this motor.\r\n     */\r\n    public setMotor(force?: number, maxForce?: number) {\r\n        this._physicsPlugin.setMotor(this, force || 0, maxForce);\r\n    }\r\n\r\n    /**\r\n     * Set the motor's limits.\r\n     * Attention, this function is plugin specific. Engines won't react 100% the same.\r\n     * @param upperLimit The upper limit of the motor\r\n     * @param lowerLimit The lower limit of the motor\r\n     */\r\n    public setLimit(upperLimit: number, lowerLimit?: number) {\r\n        this._physicsPlugin.setLimit(this, upperLimit, lowerLimit);\r\n    }\r\n}\r\n\r\n/**\r\n * This class represents a single physics Hinge-Joint\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\nexport class HingeJoint extends MotorEnabledJoint {\r\n    /**\r\n     * Initializes the Hinge-Joint\r\n     * @param jointData The joint data for the Hinge-Joint\r\n     */\r\n    constructor(jointData: PhysicsJointData) {\r\n        super(PhysicsJoint.HingeJoint, jointData);\r\n    }\r\n\r\n    /**\r\n     * Set the motor values.\r\n     * Attention, this function is plugin specific. Engines won't react 100% the same.\r\n     * @param {number} force the force to apply\r\n     * @param {number} maxForce max force for this motor.\r\n     */\r\n    public setMotor(force?: number, maxForce?: number) {\r\n        this._physicsPlugin.setMotor(this, force || 0, maxForce);\r\n    }\r\n\r\n    /**\r\n     * Set the motor's limits.\r\n     * Attention, this function is plugin specific. Engines won't react 100% the same.\r\n     * @param upperLimit The upper limit of the motor\r\n     * @param lowerLimit The lower limit of the motor\r\n     */\r\n    public setLimit(upperLimit: number, lowerLimit?: number) {\r\n        this._physicsPlugin.setLimit(this, upperLimit, lowerLimit);\r\n    }\r\n}\r\n\r\n/**\r\n * This class represents a dual hinge physics joint (same as wheel joint)\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\nexport class Hinge2Joint extends MotorEnabledJoint {\r\n    /**\r\n     * Initializes the Hinge2-Joint\r\n     * @param jointData The joint data for the Hinge2-Joint\r\n     */\r\n    constructor(jointData: PhysicsJointData) {\r\n        super(PhysicsJoint.Hinge2Joint, jointData);\r\n    }\r\n\r\n    /**\r\n     * Set the motor values.\r\n     * Attention, this function is plugin specific. Engines won't react 100% the same.\r\n     * @param targetSpeed the speed the motor is to reach\r\n     * @param maxForce max force for this motor.\r\n     * @param motorIndex motor's index, 0 or 1.\r\n     */\r\n    public setMotor(targetSpeed?: number, maxForce?: number, motorIndex: number = 0) {\r\n        this._physicsPlugin.setMotor(this, targetSpeed || 0, maxForce, motorIndex);\r\n    }\r\n\r\n    /**\r\n     * Set the motor limits.\r\n     * Attention, this function is plugin specific. Engines won't react 100% the same.\r\n     * @param upperLimit the upper limit\r\n     * @param lowerLimit lower limit\r\n     * @param motorIndex the motor's index, 0 or 1.\r\n     */\r\n    public setLimit(upperLimit: number, lowerLimit?: number, motorIndex: number = 0) {\r\n        this._physicsPlugin.setLimit(this, upperLimit, lowerLimit, motorIndex);\r\n    }\r\n}\r\n\r\n/**\r\n * Interface for a motor enabled joint\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\nexport interface IMotorEnabledJoint {\r\n    /**\r\n     * Physics joint\r\n     */\r\n    physicsJoint: any;\r\n    /**\r\n     * Sets the motor of the motor-enabled joint\r\n     * @param force The force of the motor\r\n     * @param maxForce The maximum force of the motor\r\n     * @param motorIndex The index of the motor\r\n     */\r\n    setMotor(force?: number, maxForce?: number, motorIndex?: number): void;\r\n    /**\r\n     * Sets the limit of the motor\r\n     * @param upperLimit The upper limit of the motor\r\n     * @param lowerLimit The lower limit of the motor\r\n     * @param motorIndex The index of the motor\r\n     */\r\n    setLimit(upperLimit: number, lowerLimit?: number, motorIndex?: number): void;\r\n}\r\n\r\n/**\r\n * Joint data for a Distance-Joint\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\nexport interface DistanceJointData extends PhysicsJointData {\r\n    /**\r\n     * Max distance the 2 joint objects can be apart\r\n     */\r\n    maxDistance: number;\r\n    //Oimo - minDistance\r\n    //Cannon - maxForce\r\n}\r\n\r\n/**\r\n * Joint data from a spring joint\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\nexport interface SpringJointData extends PhysicsJointData {\r\n    /**\r\n     * Length of the spring\r\n     */\r\n    length: number;\r\n    /**\r\n     * Stiffness of the spring\r\n     */\r\n    stiffness: number;\r\n    /**\r\n     * Damping of the spring\r\n     */\r\n    damping: number;\r\n    /** this callback will be called when applying the force to the impostors. */\r\n    forceApplicationCallback: () => void;\r\n}\r\n","import type { Vector3, Quaternion } from \"../../Maths/math.vector\";\r\nimport type { IRaycastQuery, PhysicsRaycastResult } from \"../physicsRaycastResult\";\r\nimport type { PhysicsBody } from \"./physicsBody\";\r\nimport type { PhysicsShape } from \"./physicsShape\";\r\nimport type { PhysicsConstraint } from \"./physicsConstraint\";\r\nimport type { BoundingBox } from \"../../Culling/boundingBox\";\r\nimport type { TransformNode } from \"../../Meshes/transformNode\";\r\nimport type { PhysicsMaterial } from \"./physicsMaterial\";\r\nimport type { Mesh } from \"../../Meshes/mesh\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Observable } from \"core/Misc/observable\";\r\n\r\n/** How a specific axis can be constrained */\r\nexport enum PhysicsConstraintAxisLimitMode {\r\n    /*\r\n     * The axis is not restricted at all\r\n     */\r\n    FREE,\r\n    /*\r\n     * The axis has a minimum/maximum limit\r\n     */\r\n    LIMITED,\r\n    /*\r\n     * The axis allows no relative movement of the pivots\r\n     */\r\n    LOCKED,\r\n}\r\n\r\n/** The constraint specific axis to use when setting Friction, `ConstraintAxisLimitMode`, max force, ... */\r\nexport enum PhysicsConstraintAxis {\r\n    /*\r\n     * Translation along the primary axis of the constraint (i.e. the\r\n     * direction specified by PhysicsConstraintParameters.axisA/axisB)\r\n     */\r\n    LINEAR_X,\r\n    /*\r\n     * Translation along the second axis of the constraint (i.e. the\r\n     * direction specified by PhysicsConstraintParameters.perpAxisA/perpAxisB)\r\n     */\r\n    LINEAR_Y,\r\n    /*\r\n     * Translation along the third axis of the constraint. This axis is\r\n     * computed from the cross product of axisA/axisB and perpAxisA/perpAxisB)\r\n     */\r\n    LINEAR_Z,\r\n    /*\r\n     * Rotation around the primary axis of the constraint (i.e. the\r\n     * axis specified by PhysicsConstraintParameters.axisA/axisB)\r\n     */\r\n    ANGULAR_X,\r\n    /*\r\n     * Rotation around the second axis of the constraint (i.e. the\r\n     * axis specified by PhysicsConstraintParameters.perpAxisA/perpAxisB)\r\n     */\r\n    ANGULAR_Y,\r\n    /*\r\n     * Rotation around the third axis of the constraint. This axis is\r\n     * computed from the cross product of axisA/axisB and perpAxisA/perpAxisB)\r\n     */\r\n    ANGULAR_Z,\r\n    /*\r\n     * A 3D distance limit; similar to specifying the LINEAR_X/Y/Z axes\r\n     * individually, but the distance calculation uses all three axes\r\n     * simultaneously, instead of individually.\r\n     */\r\n    LINEAR_DISTANCE,\r\n}\r\n\r\n/** Type of Constraint */\r\nexport enum PhysicsConstraintType {\r\n    /**\r\n     * A ball and socket constraint will attempt to line up the pivot\r\n     * positions in each body, and have no restrictions on rotation\r\n     */\r\n    BALL_AND_SOCKET = 1,\r\n    /**\r\n     * A distance constraint will attempt to keep the pivot locations\r\n     * within a specified distance.\r\n     */\r\n    DISTANCE = 2,\r\n    /**\r\n     * A hinge constraint will keep the pivot positions aligned as well\r\n     * as two angular axes. The remaining angular axis will be free to rotate.\r\n     */\r\n    HINGE = 3,\r\n    /**\r\n     * A slider constraint allows bodies to translate along one axis and\r\n     * rotate about the same axis. The remaining two axes are locked in\r\n     * place\r\n     */\r\n    SLIDER = 4,\r\n    /**\r\n     * A lock constraint will attempt to keep the pivots completely lined\r\n     * up between both bodies, allowing no relative movement.\r\n     */\r\n    LOCK = 5,\r\n    /*\r\n     * A prismatic will lock the rotations of the bodies, and allow translation\r\n     * only along one axis\r\n     */\r\n    PRISMATIC = 6,\r\n    /*\r\n     * A generic constraint; this starts with no limits on how the bodies can\r\n     * move relative to each other, but limits can be added via the PhysicsConstraint\r\n     * interfaces. This can be used to specify a large variety of constraints\r\n     */\r\n    SIX_DOF = 7,\r\n}\r\n\r\n/** Type of Shape */\r\nexport enum PhysicsShapeType {\r\n    SPHERE,\r\n    CAPSULE,\r\n    CYLINDER,\r\n    BOX,\r\n    CONVEX_HULL,\r\n    CONTAINER,\r\n    MESH,\r\n    HEIGHTFIELD,\r\n}\r\n\r\n/** Optional motor which attempts to move a body at a specific velocity, or at a specific position */\r\nexport enum PhysicsConstraintMotorType {\r\n    NONE,\r\n    VELOCITY,\r\n    POSITION,\r\n}\r\n\r\nexport enum PhysicsEventType {\r\n    COLLISION_STARTED = \"COLLISION_STARTED\",\r\n    COLLISION_CONTINUED = \"COLLISION_CONTINUED\",\r\n    COLLISION_FINISHED = \"COLLISION_FINISHED\",\r\n    TRIGGER_ENTERED = \"TRIGGER_ENTERED\",\r\n    TRIGGER_EXITED = \"TRIGGER_EXITED\",\r\n}\r\n\r\n/**\r\n * Base collision object\r\n */\r\nexport interface IBasePhysicsCollisionEvent {\r\n    /**\r\n     * 1st physics body that collided\r\n     */\r\n    collider: PhysicsBody;\r\n    /**\r\n     * 2nd physics body that collided\r\n     */\r\n    collidedAgainst: PhysicsBody;\r\n    /**\r\n     * index in instances array for the collider\r\n     */\r\n    colliderIndex: number;\r\n    /**\r\n     * index in instances array for the collidedAgainst\r\n     */\r\n    collidedAgainstIndex: number;\r\n    /**\r\n     * Event type\r\n     */\r\n    type: PhysicsEventType;\r\n}\r\n\r\n/**\r\n * Collision object that is the parameter when notification for collision fires.\r\n */\r\nexport interface IPhysicsCollisionEvent extends IBasePhysicsCollisionEvent {\r\n    /**\r\n     * World position where the collision occured\r\n     */\r\n    point: Nullable<Vector3>;\r\n    /**\r\n     * Penetration distance\r\n     */\r\n    distance: number;\r\n    /**\r\n     * Impulse value computed by the solver response\r\n     */\r\n    impulse: number;\r\n    /**\r\n     * Collision world normal direction\r\n     */\r\n    normal: Nullable<Vector3>;\r\n}\r\n\r\n/**\r\n * Parameters used to describe the Shape\r\n */\r\nexport interface PhysicsShapeParameters {\r\n    /**\r\n     * Shape center position\r\n     */\r\n    center?: Vector3;\r\n    /**\r\n     * Radius for cylinder, shape and capsule\r\n     */\r\n    radius?: number;\r\n    /**\r\n     * First point position that defines the cylinder or capsule\r\n     */\r\n    pointA?: Vector3;\r\n    /**\r\n     * Second point position that defines the cylinder or capsule\r\n     */\r\n    pointB?: Vector3;\r\n    /**\r\n     * Shape orientation\r\n     */\r\n    rotation?: Quaternion;\r\n    /**\r\n     * Dimesion extention for the box\r\n     */\r\n    extents?: Vector3;\r\n    /**\r\n     * Mesh used for Mesh shape or convex hull. It can be different than the mesh the body is attached to.\r\n     */\r\n    mesh?: Mesh;\r\n    /**\r\n     * Use children hierarchy\r\n     */\r\n    includeChildMeshes?: boolean;\r\n}\r\n\r\n/**\r\n * Parameters used to describe a Constraint\r\n */\r\nexport interface PhysicsConstraintParameters {\r\n    /**\r\n     * Location of the constraint pivot in the space of first body\r\n     */\r\n    pivotA?: Vector3;\r\n    /**\r\n     * Location of the constraint pivot in the space of the second body\r\n     */\r\n    pivotB?: Vector3;\r\n    /**\r\n     * An axis in the space of the first body which determines how\r\n     * distances/angles are measured for LINEAR_X/ANGULAR_X limits.\r\n     */\r\n    axisA?: Vector3;\r\n    /**\r\n     * An axis in the space of the second body which determines how\r\n     * distances/angles are measured for LINEAR_X/ANGULAR_X limits.\r\n     */\r\n    axisB?: Vector3;\r\n\r\n    /**\r\n     * An axis in the space of the first body which determines how\r\n     * distances/angles are measured for LINEAR_Y/ANGULAR_Y limits.\r\n     */\r\n    perpAxisA?: Vector3;\r\n\r\n    /**\r\n     * An axis in the space of the second body which determines how\r\n     * distances/angles are measured for LINEAR_Y/ANGULAR_Y limits.\r\n     */\r\n    perpAxisB?: Vector3;\r\n\r\n    /**\r\n     * The maximum distance that can seperate the two pivots.\r\n     * Only used for DISTANCE constraints\r\n     */\r\n    maxDistance?: number;\r\n\r\n    /**\r\n     * Determines if the connected bodies should collide. Generally,\r\n     * it is preferable to set this to false, especially if the constraint\r\n     * positions the bodies so that they overlap. Otherwise, the constraint\r\n     * will \"fight\" the collision detection and may cause jitter.\r\n     */\r\n    collision?: boolean;\r\n}\r\n\r\n/**\r\n * Parameters used to describe mass and inertia of the Physics Body\r\n */\r\nexport interface PhysicsMassProperties {\r\n    /**\r\n     * The center of mass, in local space. This is The\r\n     * point the body will rotate around when applying\r\n     * an angular velocity.\r\n     *\r\n     * If not provided, the physics engine will compute\r\n     * an appropriate value.\r\n     */\r\n    centerOfMass?: Vector3;\r\n    /**\r\n     * The total mass of this object, in kilograms. This\r\n     * affects how easy it is to move the body. A value\r\n     * of zero will be used as an infinite mass.\r\n     *\r\n     * If not provided, the physics engine will compute\r\n     * an appropriate value.\r\n     */\r\n    mass?: number;\r\n    /**\r\n     * The principal moments of inertia of this object\r\n     * for a unit mass. This determines how easy it is\r\n     * for the body to rotate. A value of zero on any\r\n     * axis will be used as infinite interia about that\r\n     * axis.\r\n     *\r\n     * If not provided, the physics engine will compute\r\n     * an appropriate value.\r\n     */\r\n    inertia?: Vector3;\r\n    /**\r\n     * The rotation rotating from inertia major axis space\r\n     * to parent space (i.e., the rotation which, when\r\n     * applied to the 3x3 inertia tensor causes the inertia\r\n     * tensor to become a diagonal matrix). This determines\r\n     * how the values of inertia are aligned with the parent\r\n     * object.\r\n     *\r\n     * If not provided, the physics engine will compute\r\n     * an appropriate value.\r\n     */\r\n    inertiaOrientation?: Quaternion;\r\n}\r\n\r\n/**\r\n * Indicates how the body will behave.\r\n */\r\nexport enum PhysicsMotionType {\r\n    STATIC,\r\n    ANIMATED,\r\n    DYNAMIC,\r\n}\r\n\r\n/** @internal */\r\nexport interface IPhysicsEnginePluginV2 {\r\n    /**\r\n     * Physics plugin world instance\r\n     */\r\n    world: any;\r\n    /**\r\n     * Physics plugin name\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * Collision observable\r\n     */\r\n    onCollisionObservable: Observable<IPhysicsCollisionEvent>;\r\n\r\n    setGravity(gravity: Vector3): void;\r\n    setTimeStep(timeStep: number): void;\r\n    getTimeStep(): number;\r\n    executeStep(delta: number, bodies: Array<PhysicsBody>): void; //not forgetting pre and post events\r\n    getPluginVersion(): number;\r\n\r\n    // body\r\n    initBody(body: PhysicsBody, motionType: PhysicsMotionType, position: Vector3, orientation: Quaternion): void;\r\n    initBodyInstances(body: PhysicsBody, motionType: PhysicsMotionType, mesh: Mesh): void;\r\n    updateBodyInstances(body: PhysicsBody, mesh: Mesh): void;\r\n    removeBody(body: PhysicsBody): void;\r\n    sync(body: PhysicsBody): void;\r\n    syncTransform(body: PhysicsBody, transformNode: TransformNode): void;\r\n    setShape(body: PhysicsBody, shape: Nullable<PhysicsShape>): void;\r\n    getShape(body: PhysicsBody): Nullable<PhysicsShape>;\r\n    getShapeType(shape: PhysicsShape): PhysicsShapeType;\r\n    setEventMask(body: PhysicsBody, eventMask: number, instanceIndex?: number): void;\r\n    getEventMask(body: PhysicsBody, instanceIndex?: number): number;\r\n    setMotionType(body: PhysicsBody, motionType: PhysicsMotionType, instanceIndex?: number): void;\r\n    getMotionType(body: PhysicsBody, instanceIndex?: number): PhysicsMotionType;\r\n    computeMassProperties(body: PhysicsBody, instanceIndex?: number): PhysicsMassProperties;\r\n    setMassProperties(body: PhysicsBody, massProps: PhysicsMassProperties, instanceIndex?: number): void;\r\n    getMassProperties(body: PhysicsBody, instanceIndex?: number): PhysicsMassProperties;\r\n    setLinearDamping(body: PhysicsBody, damping: number, instanceIndex?: number): void;\r\n    getLinearDamping(body: PhysicsBody, instanceIndex?: number): number;\r\n    setAngularDamping(body: PhysicsBody, damping: number, instanceIndex?: number): void;\r\n    getAngularDamping(body: PhysicsBody, instanceIndex?: number): number;\r\n    setLinearVelocity(body: PhysicsBody, linVel: Vector3, instanceIndex?: number): void;\r\n    getLinearVelocityToRef(body: PhysicsBody, linVel: Vector3, instanceIndex?: number): void;\r\n    applyImpulse(body: PhysicsBody, impulse: Vector3, location: Vector3, instanceIndex?: number): void;\r\n    applyForce(body: PhysicsBody, force: Vector3, location: Vector3, instanceIndex?: number): void;\r\n    setAngularVelocity(body: PhysicsBody, angVel: Vector3, instanceIndex?: number): void;\r\n    getAngularVelocityToRef(body: PhysicsBody, angVel: Vector3, instanceIndex?: number): void;\r\n    getBodyGeometry(body: PhysicsBody): {};\r\n    disposeBody(body: PhysicsBody): void;\r\n    setCollisionCallbackEnabled(body: PhysicsBody, enabled: boolean, instanceIndex?: number): void;\r\n    setCollisionEndedCallbackEnabled(body: PhysicsBody, enabled: boolean, instanceIndex?: number): void;\r\n    addConstraint(body: PhysicsBody, childBody: PhysicsBody, constraint: PhysicsConstraint, instanceIndex?: number, childInstanceIndex?: number): void;\r\n    getCollisionObservable(body: PhysicsBody, instanceIndex?: number): Observable<IPhysicsCollisionEvent>;\r\n    getCollisionEndedObservable(body: PhysicsBody, instanceIndex?: number): Observable<IBasePhysicsCollisionEvent>;\r\n    setGravityFactor(body: PhysicsBody, factor: number, instanceIndex?: number): void;\r\n    getGravityFactor(body: PhysicsBody, instanceIndex?: number): number;\r\n    setTargetTransform(body: PhysicsBody, position: Vector3, rotation: Quaternion, instanceIndex?: number): void;\r\n\r\n    // shape\r\n    initShape(shape: PhysicsShape, type: PhysicsShapeType, options: PhysicsShapeParameters): void;\r\n    setShapeFilterMembershipMask(shape: PhysicsShape, membershipMask: number): void;\r\n    getShapeFilterMembershipMask(shape: PhysicsShape): number;\r\n    setShapeFilterCollideMask(shape: PhysicsShape, collideMask: number): void;\r\n    getShapeFilterCollideMask(shape: PhysicsShape): number;\r\n    setMaterial(shape: PhysicsShape, material: PhysicsMaterial): void;\r\n    setDensity(shape: PhysicsShape, density: number): void;\r\n    getDensity(shape: PhysicsShape): number;\r\n    addChild(shape: PhysicsShape, newChild: PhysicsShape, translation?: Vector3, rotation?: Quaternion, scale?: Vector3): void;\r\n    removeChild(shape: PhysicsShape, childIndex: number): void;\r\n    getNumChildren(shape: PhysicsShape): number;\r\n    getBoundingBox(shape: PhysicsShape): BoundingBox;\r\n    disposeShape(shape: PhysicsShape): void;\r\n    setTrigger(shape: PhysicsShape, isTrigger: boolean): void;\r\n\r\n    // constraint\r\n    initConstraint(constraint: PhysicsConstraint, body: PhysicsBody, childBody: PhysicsBody): void;\r\n    setEnabled(constraint: PhysicsConstraint, isEnabled: boolean): void;\r\n    getEnabled(constraint: PhysicsConstraint): boolean;\r\n    setCollisionsEnabled(constraint: PhysicsConstraint, isEnabled: boolean): void;\r\n    getCollisionsEnabled(constraint: PhysicsConstraint): boolean;\r\n    setAxisFriction(constraint: PhysicsConstraint, axis: PhysicsConstraintAxis, friction: number): void;\r\n    getAxisFriction(constraint: PhysicsConstraint, axis: PhysicsConstraintAxis): Nullable<number>;\r\n    setAxisMode(constraint: PhysicsConstraint, axis: PhysicsConstraintAxis, limitMode: PhysicsConstraintAxisLimitMode): void;\r\n    getAxisMode(constraint: PhysicsConstraint, axis: PhysicsConstraintAxis): Nullable<PhysicsConstraintAxisLimitMode>;\r\n    setAxisMinLimit(constraint: PhysicsConstraint, axis: PhysicsConstraintAxis, minLimit: number): void;\r\n    getAxisMinLimit(constraint: PhysicsConstraint, axis: PhysicsConstraintAxis): Nullable<number>;\r\n    setAxisMaxLimit(constraint: PhysicsConstraint, axis: PhysicsConstraintAxis, limit: number): void;\r\n    getAxisMaxLimit(constraint: PhysicsConstraint, axis: PhysicsConstraintAxis): Nullable<number>;\r\n    setAxisMotorType(constraint: PhysicsConstraint, axis: PhysicsConstraintAxis, motorType: PhysicsConstraintMotorType): void;\r\n    getAxisMotorType(constraint: PhysicsConstraint, axis: PhysicsConstraintAxis): Nullable<PhysicsConstraintMotorType>;\r\n    setAxisMotorTarget(constraint: PhysicsConstraint, axis: PhysicsConstraintAxis, target: number): void;\r\n    getAxisMotorTarget(constraint: PhysicsConstraint, axis: PhysicsConstraintAxis): Nullable<number>;\r\n    setAxisMotorMaxForce(constraint: PhysicsConstraint, axis: PhysicsConstraintAxis, maxForce: number): void;\r\n    getAxisMotorMaxForce(constraint: PhysicsConstraint, axis: PhysicsConstraintAxis): Nullable<number>;\r\n    disposeConstraint(constraint: PhysicsConstraint): void;\r\n\r\n    // raycast\r\n    raycast(from: Vector3, to: Vector3, result: PhysicsRaycastResult, query?: IRaycastQuery): void;\r\n\r\n    dispose(): void;\r\n}\r\n","import { Matrix, Quaternion, TmpVectors, Vector3 } from \"../../../Maths/math.vector\";\r\nimport {\r\n    PhysicsShapeType,\r\n    PhysicsConstraintType,\r\n    PhysicsMotionType,\r\n    PhysicsConstraintMotorType,\r\n    PhysicsConstraintAxis,\r\n    PhysicsConstraintAxisLimitMode,\r\n    PhysicsEventType,\r\n} from \"../IPhysicsEnginePlugin\";\r\nimport type { PhysicsShapeParameters, IPhysicsEnginePluginV2, PhysicsMassProperties, IPhysicsCollisionEvent, IBasePhysicsCollisionEvent } from \"../IPhysicsEnginePlugin\";\r\nimport type { IRaycastQuery, PhysicsRaycastResult } from \"../../physicsRaycastResult\";\r\nimport { Logger } from \"../../../Misc/logger\";\r\nimport type { PhysicsBody } from \"../physicsBody\";\r\nimport type { PhysicsConstraint, Physics6DoFConstraint } from \"../physicsConstraint\";\r\nimport type { PhysicsMaterial } from \"../physicsMaterial\";\r\nimport { PhysicsMaterialCombineMode } from \"../physicsMaterial\";\r\nimport { PhysicsShape } from \"../physicsShape\";\r\nimport type { BoundingBox } from \"../../../Culling/boundingBox\";\r\nimport type { TransformNode } from \"../../../Meshes/transformNode\";\r\nimport { Mesh } from \"../../../Meshes/mesh\";\r\nimport { InstancedMesh } from \"../../../Meshes/instancedMesh\";\r\nimport type { Scene } from \"../../../scene\";\r\nimport { VertexBuffer } from \"../../../Buffers/buffer\";\r\nimport { ArrayTools } from \"../../../Misc/arrayTools\";\r\nimport { Observable } from \"../../../Misc/observable\";\r\nimport type { Nullable } from \"../../../types\";\r\ndeclare let HK: any;\r\n\r\n/**\r\n * Helper to keep a reference to plugin memory.\r\n * Used to avoid https://github.com/emscripten-core/emscripten/issues/7294\r\n * @internal\r\n */\r\ninterface PluginMemoryRef {\r\n    /** The offset from the beginning of the plugin's heap */\r\n    offset: number;\r\n    /** The number of identically-sized objects the buffer contains */\r\n    numObjects: number;\r\n}\r\n\r\nclass MeshAccumulator {\r\n    /**\r\n     * Constructor of the mesh accumulator\r\n     * @param mesh - The mesh used to compute the world matrix.\r\n     * @param collectIndices - use mesh indices\r\n     * @param scene - The scene used to determine the right handed system.\r\n     *\r\n     * Merge mesh and its children so whole hierarchy can be used as a mesh shape or convex hull\r\n     */\r\n    public constructor(mesh: Mesh, collectIndices: boolean, scene: Scene) {\r\n        this._isRightHanded = scene.useRightHandedSystem;\r\n        this._collectIndices = collectIndices;\r\n    }\r\n\r\n    /**\r\n     * Adds a mesh to the physics engine.\r\n     * @param mesh The mesh to add.\r\n     * @param includeChildren Whether to include the children of the mesh.\r\n     *\r\n     * This method adds a mesh to the physics engine by computing the world matrix,\r\n     * multiplying it with the body from world matrix, and then transforming the\r\n     * coordinates of the mesh's vertices. It also adds the indices of the mesh\r\n     * to the physics engine. If includeChildren is true, it will also add the\r\n     * children of the mesh to the physics engine, ignoring any children which\r\n     * have a physics impostor. This is useful for creating a physics engine\r\n     * that accurately reflects the mesh and its children.\r\n     */\r\n    public addNodeMeshes(mesh: TransformNode, includeChildren: boolean): void {\r\n        // Force absoluteScaling to be computed; we're going to use that to bake\r\n        // the scale of any parent nodes into this shape, as physics engines\r\n        // usually use rigid transforms, so can't handle arbitrary scale.\r\n        mesh.computeWorldMatrix(true);\r\n        const rootScaled = TmpVectors.Matrix[0];\r\n        Matrix.ScalingToRef(mesh.absoluteScaling.x, mesh.absoluteScaling.y, mesh.absoluteScaling.z, rootScaled);\r\n\r\n        if (mesh instanceof Mesh) {\r\n            this._addMesh(mesh, rootScaled);\r\n        } else if (mesh instanceof InstancedMesh) {\r\n            this._addMesh(mesh.sourceMesh, rootScaled);\r\n        }\r\n\r\n        if (includeChildren) {\r\n            const worldToRoot = TmpVectors.Matrix[1];\r\n            mesh.computeWorldMatrix().invertToRef(worldToRoot);\r\n            const worldToRootScaled = TmpVectors.Matrix[2];\r\n            worldToRoot.multiplyToRef(rootScaled, worldToRootScaled);\r\n\r\n            const children = mesh.getChildMeshes(false);\r\n            //  Ignore any children which have a physics body.\r\n            //  Other plugin implementations do not have this check, which appears to be\r\n            //  a bug, as otherwise, the mesh will have a duplicate collider\r\n            children\r\n                .filter((m: any) => !m.physicsBody)\r\n                .forEach((m: TransformNode) => {\r\n                    const childToWorld = m.computeWorldMatrix();\r\n                    const childToRootScaled = TmpVectors.Matrix[3];\r\n                    childToWorld.multiplyToRef(worldToRootScaled, childToRootScaled);\r\n\r\n                    if (m instanceof Mesh) {\r\n                        this._addMesh(m, childToRootScaled);\r\n                    } else if (m instanceof InstancedMesh) {\r\n                        this._addMesh(m.sourceMesh, childToRootScaled);\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    private _addMesh(mesh: Mesh, meshToRoot: Matrix): void {\r\n        const vertexData = mesh.getVerticesData(VertexBuffer.PositionKind) || [];\r\n        const numVerts = vertexData.length / 3;\r\n        const indexOffset = this._vertices.length;\r\n        for (let v = 0; v < numVerts; v++) {\r\n            const pos = new Vector3(vertexData[v * 3 + 0], vertexData[v * 3 + 1], vertexData[v * 3 + 2]);\r\n            this._vertices.push(Vector3.TransformCoordinates(pos, meshToRoot));\r\n        }\r\n\r\n        if (this._collectIndices) {\r\n            const meshIndices = mesh.getIndices();\r\n            if (meshIndices) {\r\n                for (let i = 0; i < meshIndices.length; i += 3) {\r\n                    // Havok wants the correct triangle winding to enable the interior triangle optimization\r\n                    if (this._isRightHanded) {\r\n                        this._indices.push(meshIndices[i + 0] + indexOffset);\r\n                        this._indices.push(meshIndices[i + 1] + indexOffset);\r\n                        this._indices.push(meshIndices[i + 2] + indexOffset);\r\n                    } else {\r\n                        this._indices.push(meshIndices[i + 2] + indexOffset);\r\n                        this._indices.push(meshIndices[i + 1] + indexOffset);\r\n                        this._indices.push(meshIndices[i + 0] + indexOffset);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Allocate and populate the vertex positions inside the physics plugin.\r\n     *\r\n     * @returns An array of floats, whose backing memory is inside the plugin. The array contains the\r\n     * positions of the mesh vertices, where a position is defined by three floats. You must call\r\n     * freeBuffer() on the returned array once you have finished with it, in order to free the\r\n     * memory inside the plugin..\r\n     */\r\n    public getVertices(plugin: any): PluginMemoryRef {\r\n        const nFloats = this._vertices.length * 3;\r\n        const bytesPerFloat = 4;\r\n        const nBytes = nFloats * bytesPerFloat;\r\n        const bufferBegin = plugin._malloc(nBytes);\r\n\r\n        const ret = new Float32Array(plugin.HEAPU8.buffer, bufferBegin, nFloats);\r\n        for (let i = 0; i < this._vertices.length; i++) {\r\n            ret[i * 3 + 0] = this._vertices[i].x;\r\n            ret[i * 3 + 1] = this._vertices[i].y;\r\n            ret[i * 3 + 2] = this._vertices[i].z;\r\n        }\r\n\r\n        return { offset: bufferBegin, numObjects: nFloats };\r\n    }\r\n\r\n    public freeBuffer(plugin: any, arr: PluginMemoryRef) {\r\n        plugin._free(arr.offset);\r\n    }\r\n\r\n    /**\r\n     * Allocate and populate the triangle indices inside the physics plugin\r\n     *\r\n     * @returns A new Int32Array, whose backing memory is inside the plugin. The array contains the indices\r\n     * of the triangle positions, where a single triangle is defined by three indices. You must call\r\n     * freeBuffer() on this array once you have finished with it, to free the memory inside the plugin..\r\n     */\r\n    public getTriangles(plugin: any): PluginMemoryRef {\r\n        const bytesPerInt = 4;\r\n        const nBytes = this._indices.length * bytesPerInt;\r\n        const bufferBegin = plugin._malloc(nBytes);\r\n        const ret = new Int32Array(plugin.HEAPU8.buffer, bufferBegin, this._indices.length);\r\n        for (let i = 0; i < this._indices.length; i++) {\r\n            ret[i] = this._indices[i];\r\n        }\r\n\r\n        return { offset: bufferBegin, numObjects: this._indices.length };\r\n    }\r\n\r\n    private _isRightHanded: boolean;\r\n    private _collectIndices: boolean;\r\n    private _vertices: Vector3[] = []; /// Vertices in body space\r\n    private _indices: number[] = [];\r\n}\r\n\r\nclass BodyPluginData {\r\n    public constructor(bodyId: any) {\r\n        this.hpBodyId = bodyId;\r\n        this.userMassProps = { centerOfMass: undefined, mass: undefined, inertia: undefined, inertiaOrientation: undefined };\r\n    }\r\n\r\n    public hpBodyId: any;\r\n\r\n    public worldTransformOffset: number;\r\n\r\n    public userMassProps: PhysicsMassProperties;\r\n}\r\n\r\n/*\r\nclass ShapePath\r\n{\r\n    public colliderId: number;\r\n    public pathData: number;\r\n}\r\n*/\r\n\r\nclass ContactPoint {\r\n    public bodyId: bigint = BigInt(0); //0,2\r\n    //public colliderId: number = 0; //2,4\r\n    //public shapePath: ShapePath = new ShapePath(); //4,8\r\n    public position: Vector3 = new Vector3(); //8,11\r\n    public normal: Vector3 = new Vector3(); //11,14\r\n    //public triIdx: number = 0; //14,15\r\n}\r\n\r\nclass CollisionEvent {\r\n    public contactOnA: ContactPoint = new ContactPoint(); //1\r\n    public contactOnB: ContactPoint = new ContactPoint();\r\n    public impulseApplied: number = 0;\r\n    public type: number = 0;\r\n\r\n    static readToRef(buffer: any, offset: number, eventOut: CollisionEvent) {\r\n        const intBuf = new Int32Array(buffer, offset);\r\n        const floatBuf = new Float32Array(buffer, offset);\r\n        const offA = 2;\r\n        eventOut.contactOnA.bodyId = BigInt(intBuf[offA]); //<todo Need to get the high+low words!\r\n        eventOut.contactOnA.position.set(floatBuf[offA + 8], floatBuf[offA + 9], floatBuf[offA + 10]);\r\n        eventOut.contactOnA.normal.set(floatBuf[offA + 11], floatBuf[offA + 12], floatBuf[offA + 13]);\r\n        const offB = 18;\r\n        eventOut.contactOnB.bodyId = BigInt(intBuf[offB]);\r\n        eventOut.contactOnB.position.set(floatBuf[offB + 8], floatBuf[offB + 9], floatBuf[offB + 10]);\r\n        eventOut.contactOnB.normal.set(floatBuf[offB + 11], floatBuf[offB + 12], floatBuf[offB + 13]);\r\n        eventOut.impulseApplied = floatBuf[offB + 13 + 3];\r\n        eventOut.type = intBuf[0];\r\n    }\r\n}\r\n\r\nclass TriggerEvent {\r\n    public bodyIdA: bigint = BigInt(0);\r\n    public bodyIdB: bigint = BigInt(0);\r\n    public type: number = 0;\r\n\r\n    static readToRef(buffer: any, offset: number, eventOut: TriggerEvent) {\r\n        const intBuf = new Int32Array(buffer, offset);\r\n        eventOut.type = intBuf[0];\r\n        eventOut.bodyIdA = BigInt(intBuf[2]);\r\n        eventOut.bodyIdB = BigInt(intBuf[6]);\r\n    }\r\n}\r\n\r\n/**\r\n * The Havok Physics plugin\r\n */\r\nexport class HavokPlugin implements IPhysicsEnginePluginV2 {\r\n    /**\r\n     * Reference to the WASM library\r\n     */\r\n    public _hknp: any = {};\r\n    /**\r\n     * Created Havok world which physics bodies are added to\r\n     */\r\n    public world: any;\r\n    /**\r\n     * Name of the plugin\r\n     */\r\n    public name: string = \"HavokPlugin\";\r\n    /**\r\n     * We only have a single raycast in-flight right now\r\n     */\r\n    private _queryCollector: bigint;\r\n    private _fixedTimeStep: number = 1 / 60;\r\n    private _timeStep: number = 1 / 60;\r\n    private _tmpVec3 = ArrayTools.BuildArray(3, Vector3.Zero);\r\n    private _bodies = new Map<bigint, { body: PhysicsBody; index: number }>();\r\n    private _bodyBuffer: number;\r\n    private _bodyCollisionObservable = new Map<bigint, Observable<IPhysicsCollisionEvent>>();\r\n    private _bodyCollisionEndedObservable = new Map<bigint, Observable<IBasePhysicsCollisionEvent>>();\r\n    /**\r\n     * Observable for collision started and collision continued events\r\n     */\r\n    public onCollisionObservable = new Observable<IPhysicsCollisionEvent>();\r\n    /**\r\n     * Observable for collision ended events\r\n     */\r\n    public onCollisionEndedObservable = new Observable<IBasePhysicsCollisionEvent>();\r\n    /**\r\n     * Observable for trigger entered and trigger exited events\r\n     */\r\n    public onTriggerCollisionObservable = new Observable<IBasePhysicsCollisionEvent>();\r\n\r\n    public constructor(private _useDeltaForWorldStep: boolean = true, hpInjection: any = HK) {\r\n        if (typeof hpInjection === \"function\") {\r\n            Logger.Error(\"Havok is not ready. Please make sure you await HK() before using the plugin.\");\r\n            return;\r\n        } else {\r\n            this._hknp = hpInjection;\r\n        }\r\n\r\n        if (!this.isSupported()) {\r\n            Logger.Error(\"Havok is not available. Please make sure you included the js file.\");\r\n            return;\r\n        }\r\n        this.world = this._hknp.HP_World_Create()[1];\r\n        this._queryCollector = this._hknp.HP_QueryCollector_Create(1)[1];\r\n    }\r\n    /**\r\n     * If this plugin is supported\r\n     * @returns true if its supported\r\n     */\r\n    public isSupported(): boolean {\r\n        return this._hknp !== undefined;\r\n    }\r\n\r\n    /**\r\n     * Sets the gravity of the physics world.\r\n     *\r\n     * @param gravity - The gravity vector to set.\r\n     *\r\n     */\r\n    public setGravity(gravity: Vector3): void {\r\n        this._hknp.HP_World_SetGravity(this.world, this._bVecToV3(gravity));\r\n    }\r\n\r\n    /**\r\n     * Sets the fixed time step for the physics engine.\r\n     *\r\n     * @param timeStep - The fixed time step to use for the physics engine.\r\n     *\r\n     */\r\n    public setTimeStep(timeStep: number): void {\r\n        this._fixedTimeStep = timeStep;\r\n    }\r\n\r\n    /**\r\n     * Gets the fixed time step used by the physics engine.\r\n     *\r\n     * @returns The fixed time step used by the physics engine.\r\n     *\r\n     */\r\n    public getTimeStep(): number {\r\n        return this._fixedTimeStep;\r\n    }\r\n\r\n    /**\r\n     * Executes a single step of the physics engine.\r\n     *\r\n     * @param delta The time delta in seconds since the last step.\r\n     * @param physicsBodies An array of physics bodies to be simulated.\r\n     * @returns void\r\n     *\r\n     * This method is useful for simulating the physics engine. It sets the physics body transformation,\r\n     * steps the world, syncs the physics body, and notifies collisions. This allows for the physics engine\r\n     * to accurately simulate the physics bodies in the world.\r\n     */\r\n    public executeStep(delta: number, physicsBodies: Array<PhysicsBody>): void {\r\n        for (const physicsBody of physicsBodies) {\r\n            if (physicsBody.disablePreStep) {\r\n                continue;\r\n            }\r\n            this.setPhysicsBodyTransformation(physicsBody, physicsBody.transformNode);\r\n        }\r\n\r\n        this._hknp.HP_World_Step(this.world, this._useDeltaForWorldStep ? delta : this._timeStep);\r\n\r\n        this._bodyBuffer = this._hknp.HP_World_GetBodyBuffer(this.world)[1];\r\n        for (const physicsBody of physicsBodies) {\r\n            this.sync(physicsBody);\r\n        }\r\n\r\n        this._notifyCollisions();\r\n        this._notifyTriggers();\r\n    }\r\n\r\n    /**\r\n     * Returns the version of the physics engine plugin.\r\n     *\r\n     * @returns The version of the physics engine plugin.\r\n     *\r\n     * This method is useful for determining the version of the physics engine plugin that is currently running.\r\n     */\r\n    public getPluginVersion(): number {\r\n        return 2;\r\n    }\r\n\r\n    /**\r\n     * Initializes a physics body with the given position and orientation.\r\n     *\r\n     * @param body - The physics body to initialize.\r\n     * @param motionType - The motion type of the body.\r\n     * @param position - The position of the body.\r\n     * @param orientation - The orientation of the body.\r\n     * This code is useful for initializing a physics body with the given position and orientation.\r\n     * It creates a plugin data for the body and adds it to the world. It then converts the position\r\n     * and orientation to a transform and sets the body's transform to the given values.\r\n     */\r\n    public initBody(body: PhysicsBody, motionType: PhysicsMotionType, position: Vector3, orientation: Quaternion): void {\r\n        body._pluginData = new BodyPluginData(this._hknp.HP_Body_Create()[1]);\r\n\r\n        this._internalSetMotionType(body._pluginData, motionType);\r\n        const transform = [this._bVecToV3(position), this._bQuatToV4(orientation)]; //<todo temp transform?\r\n        this._hknp.HP_Body_SetQTransform(body._pluginData.hpBodyId, transform);\r\n\r\n        this._hknp.HP_World_AddBody(this.world, body._pluginData.hpBodyId, body.startAsleep);\r\n        this._bodies.set(body._pluginData.hpBodyId[0], { body: body, index: 0 });\r\n    }\r\n\r\n    /**\r\n     * Removes a body from the world. To dispose of a body, it is necessary to remove it from the world first.\r\n     *\r\n     * @param body - The body to remove.\r\n     */\r\n    public removeBody(body: PhysicsBody): void {\r\n        if (body._pluginDataInstances && body._pluginDataInstances.length > 0) {\r\n            for (const instance of body._pluginDataInstances) {\r\n                this._bodyCollisionObservable.delete(instance.hpBodyId[0]);\r\n                this._hknp.HP_World_RemoveBody(this.world, instance.hpBodyId);\r\n            }\r\n        }\r\n        if (body._pluginData) {\r\n            this._bodyCollisionObservable.delete(body._pluginData.hpBodyId[0]);\r\n            this._hknp.HP_World_RemoveBody(this.world, body._pluginData.hpBodyId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initializes the body instances for a given physics body and mesh.\r\n     *\r\n     * @param body - The physics body to initialize.\r\n     * @param motionType - How the body will be handled by the engine\r\n     * @param mesh - The mesh to initialize.\r\n     *\r\n     * This code is useful for creating a physics body from a mesh. It creates a\r\n     * body instance for each instance of the mesh and adds it to the world. It also\r\n     * sets the position of the body instance to the position of the mesh instance.\r\n     * This allows for the physics engine to accurately simulate the mesh in the\r\n     * world.\r\n     */\r\n    public initBodyInstances(body: PhysicsBody, motionType: PhysicsMotionType, mesh: Mesh): void {\r\n        const instancesCount = mesh._thinInstanceDataStorage?.instancesCount ?? 0;\r\n        const matrixData = mesh._thinInstanceDataStorage.matrixData;\r\n        if (!matrixData) {\r\n            return; // TODO: error handling\r\n        }\r\n        this._createOrUpdateBodyInstances(body, motionType, matrixData, 0, instancesCount, false);\r\n        body._pluginDataInstances.forEach((bodyId, index) => {\r\n            this._bodies.set(bodyId.hpBodyId[0], { body: body, index: index });\r\n        });\r\n    }\r\n\r\n    private _createOrUpdateBodyInstances(body: PhysicsBody, motionType: PhysicsMotionType, matrixData: Float32Array, startIndex: number, endIndex: number, update: boolean): void {\r\n        const rotation = TmpVectors.Quaternion[0];\r\n        const rotationMatrix = Matrix.Identity();\r\n        for (let i = startIndex; i < endIndex; i++) {\r\n            const position = [matrixData[i * 16 + 12], matrixData[i * 16 + 13], matrixData[i * 16 + 14]];\r\n            let hkbody;\r\n            if (!update) {\r\n                hkbody = this._hknp.HP_Body_Create()[1];\r\n            } else {\r\n                hkbody = body._pluginDataInstances[i].hpBodyId;\r\n            }\r\n            rotationMatrix.setRowFromFloats(0, matrixData[i * 16 + 0], matrixData[i * 16 + 1], matrixData[i * 16 + 2], 0);\r\n            rotationMatrix.setRowFromFloats(1, matrixData[i * 16 + 4], matrixData[i * 16 + 5], matrixData[i * 16 + 6], 0);\r\n            rotationMatrix.setRowFromFloats(2, matrixData[i * 16 + 8], matrixData[i * 16 + 9], matrixData[i * 16 + 10], 0);\r\n            Quaternion.FromRotationMatrixToRef(rotationMatrix, rotation);\r\n            const transform = [position, [rotation.x, rotation.y, rotation.z, rotation.w]];\r\n            this._hknp.HP_Body_SetQTransform(hkbody, transform);\r\n            if (!update) {\r\n                const pluginData = new BodyPluginData(hkbody);\r\n                if (body._pluginDataInstances.length) {\r\n                    // If an instance already exists, copy any user-provided mass properties\r\n                    pluginData.userMassProps = body._pluginDataInstances[0].userMassProps;\r\n                }\r\n                this._internalSetMotionType(pluginData, motionType);\r\n                this._internalUpdateMassProperties(pluginData);\r\n                body._pluginDataInstances.push(pluginData);\r\n                this._hknp.HP_World_AddBody(this.world, hkbody, body.startAsleep);\r\n                pluginData.worldTransformOffset = this._hknp.HP_Body_GetWorldTransformOffset(hkbody)[1];\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the internal body instances for a given physics body to match the instances in a mesh.\r\n     * @param body the body that will be updated\r\n     * @param mesh the mesh with reference instances\r\n     */\r\n    public updateBodyInstances(body: PhysicsBody, mesh: Mesh): void {\r\n        const instancesCount = mesh._thinInstanceDataStorage?.instancesCount ?? 0;\r\n        const matrixData = mesh._thinInstanceDataStorage.matrixData;\r\n        if (!matrixData) {\r\n            return; // TODO: error handling\r\n        }\r\n        const pluginInstancesCount = body._pluginDataInstances.length;\r\n        const motionType = this.getMotionType(body);\r\n\r\n        if (instancesCount > pluginInstancesCount) {\r\n            this._createOrUpdateBodyInstances(body, motionType, matrixData, pluginInstancesCount, instancesCount, false);\r\n            const firstBodyShape = this._hknp.HP_Body_GetShape(body._pluginDataInstances[0].hpBodyId)[1];\r\n            for (let i = pluginInstancesCount; i < instancesCount; i++) {\r\n                this._hknp.HP_Body_SetShape(body._pluginDataInstances[i].hpBodyId, firstBodyShape);\r\n                this._internalUpdateMassProperties(body._pluginDataInstances[i]);\r\n                this._bodies.set(body._pluginDataInstances[i].hpBodyId[0], { body: body, index: i });\r\n            }\r\n        } else if (instancesCount < pluginInstancesCount) {\r\n            const instancesToRemove = pluginInstancesCount - instancesCount;\r\n            for (let i = 0; i < instancesToRemove; i++) {\r\n                const hkbody = body._pluginDataInstances.pop();\r\n                this._bodies.delete(hkbody.hpBodyId[0]);\r\n                this._hknp.HP_World_RemoveBody(this.world, hkbody.hpBodyId);\r\n                this._hknp.HP_Body_Release(hkbody.hpBodyId);\r\n            }\r\n            this._createOrUpdateBodyInstances(body, motionType, matrixData, 0, instancesCount, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Synchronizes the transform of a physics body with its transform node.\r\n     * @param body - The physics body to synchronize.\r\n     *\r\n     * This function is useful for keeping the physics body's transform in sync with its transform node.\r\n     * This is important for ensuring that the physics body is accurately represented in the physics engine.\r\n     */\r\n    sync(body: PhysicsBody): void {\r\n        this.syncTransform(body, body.transformNode);\r\n    }\r\n\r\n    /**\r\n     * Synchronizes the transform of a physics body with the transform of its\r\n     * corresponding transform node.\r\n     *\r\n     * @param body - The physics body to synchronize.\r\n     * @param transformNode - The destination Transform Node.\r\n     *\r\n     * This code is useful for synchronizing the position and orientation of a\r\n     * physics body with the position and orientation of its corresponding\r\n     * transform node. This is important for ensuring that the physics body and\r\n     * the transform node are in the same position and orientation in the scene.\r\n     * This is necessary for the physics engine to accurately simulate the\r\n     * physical behavior of the body.\r\n     */\r\n    syncTransform(body: PhysicsBody, transformNode: TransformNode): void {\r\n        if (body._pluginDataInstances.length) {\r\n            // instances\r\n            const m = transformNode as Mesh;\r\n            const matrixData = m._thinInstanceDataStorage.matrixData;\r\n            if (!matrixData) {\r\n                return; // TODO: error handling\r\n            }\r\n            const instancesCount = body._pluginDataInstances.length;\r\n            for (let i = 0; i < instancesCount; i++) {\r\n                const bufOffset = body._pluginDataInstances[i].worldTransformOffset;\r\n                const transformBuffer = new Float32Array(this._hknp.HEAPU8.buffer, this._bodyBuffer + bufOffset, 16);\r\n                const index = i * 16;\r\n\r\n                for (let mi = 0; mi < 15; mi++) {\r\n                    if ((mi & 3) != 3) {\r\n                        matrixData[index + mi] = transformBuffer[mi];\r\n                    }\r\n                }\r\n                matrixData[index + 15] = 1;\r\n            }\r\n            m.thinInstanceBufferUpdated(\"matrix\");\r\n        } else {\r\n            try {\r\n                // regular\r\n                const bodyTransform = this._hknp.HP_Body_GetQTransform(body._pluginData.hpBodyId)[1];\r\n                const bodyTranslation = bodyTransform[0];\r\n                const bodyOrientation = bodyTransform[1];\r\n                const quat = TmpVectors.Quaternion[0];\r\n\r\n                quat.set(bodyOrientation[0], bodyOrientation[1], bodyOrientation[2], bodyOrientation[3]);\r\n\r\n                const parent = transformNode.parent as TransformNode;\r\n                // transform position/orientation in parent space\r\n                if (parent && !parent.getWorldMatrix().isIdentity()) {\r\n                    parent.computeWorldMatrix(true);\r\n\r\n                    quat.normalize();\r\n                    const finalTransform = TmpVectors.Matrix[0];\r\n                    const finalTranslation = TmpVectors.Vector3[0];\r\n                    finalTranslation.copyFromFloats(bodyTranslation[0], bodyTranslation[1], bodyTranslation[2]);\r\n                    Matrix.ComposeToRef(transformNode.absoluteScaling, quat, finalTranslation, finalTransform);\r\n\r\n                    const parentInverseTransform = TmpVectors.Matrix[1];\r\n                    parent.getWorldMatrix().invertToRef(parentInverseTransform);\r\n\r\n                    const localTransform = TmpVectors.Matrix[2];\r\n                    finalTransform.multiplyToRef(parentInverseTransform, localTransform);\r\n                    localTransform.decomposeToTransformNode(transformNode);\r\n                    transformNode.rotationQuaternion?.normalize();\r\n                } else {\r\n                    transformNode.position.set(bodyTranslation[0], bodyTranslation[1], bodyTranslation[2]);\r\n                    if (transformNode.rotationQuaternion) {\r\n                        transformNode.rotationQuaternion.copyFrom(quat);\r\n                    } else {\r\n                        quat.toEulerAnglesToRef(transformNode.rotation);\r\n                    }\r\n                }\r\n            } catch (e) {\r\n                console.log(`Syncing transform failed for node ${transformNode.name}: ${e.message}...`);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the shape of a physics body.\r\n     * @param body - The physics body to set the shape for.\r\n     * @param shape - The physics shape to set.\r\n     *\r\n     * This function is used to set the shape of a physics body. It is useful for\r\n     * creating a physics body with a specific shape, such as a box or a sphere,\r\n     * which can then be used to simulate physical interactions in a physics engine.\r\n     * This function is especially useful for meshes with multiple instances, as it\r\n     * will set the shape for each instance of the mesh.\r\n     */\r\n    public setShape(body: PhysicsBody, shape: Nullable<PhysicsShape>): void {\r\n        const shapeHandle = shape && shape._pluginData ? shape._pluginData : BigInt(0);\r\n        if (!(body.transformNode instanceof Mesh) || !body.transformNode._thinInstanceDataStorage?.matrixData) {\r\n            this._hknp.HP_Body_SetShape(body._pluginData.hpBodyId, shapeHandle);\r\n            this._internalUpdateMassProperties(body._pluginData);\r\n            return;\r\n        }\r\n        const m = body.transformNode as Mesh;\r\n        const instancesCount = m._thinInstanceDataStorage?.instancesCount ?? 0;\r\n        for (let i = 0; i < instancesCount; i++) {\r\n            this._hknp.HP_Body_SetShape(body._pluginDataInstances[i].hpBodyId, shapeHandle);\r\n            this._internalUpdateMassProperties(body._pluginDataInstances[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a reference to the first instance of the plugin data for a physics body.\r\n     * @param body\r\n     * @param instanceIndex\r\n     * @returns a reference to the first instance\r\n     */\r\n    private _getPluginReference(body: PhysicsBody, instanceIndex?: number): BodyPluginData {\r\n        return body._pluginDataInstances?.length ? body._pluginDataInstances[instanceIndex ?? 0] : body._pluginData;\r\n    }\r\n\r\n    /**\r\n     * Gets the shape of a physics body. This will create a new shape object\r\n     *\r\n     * @param body - The physics body.\r\n     * @returns The shape of the physics body.\r\n     *\r\n     */\r\n    public getShape(body: PhysicsBody): Nullable<PhysicsShape> {\r\n        const pluginRef = this._getPluginReference(body);\r\n        const shapePluginData = this._hknp.HP_Body_GetShape(pluginRef.hpBodyId)[1];\r\n        if (shapePluginData != 0) {\r\n            const scene = body.transformNode.getScene();\r\n            return new PhysicsShape({ pluginData: shapePluginData }, scene);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets the type of a physics shape.\r\n     * @param shape - The physics shape to get the type for.\r\n     * @returns The type of the physics shape.\r\n     *\r\n     */\r\n    public getShapeType(shape: PhysicsShape): PhysicsShapeType {\r\n        if (shape.type) {\r\n            return shape.type;\r\n        } else {\r\n            //<todo This returns a native type!\r\n            return this._hknp.HP_Shape_GetType(shape._pluginData);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the event mask of a physics body.\r\n     * @param body - The physics body to set the event mask for.\r\n     * @param eventMask - The event mask to set.\r\n     *\r\n     * This function is useful for setting the event mask of a physics body, which is used to determine which events the body will respond to. This is important for ensuring that the physics engine is able to accurately simulate the behavior of the body in the game world.\r\n     */\r\n    public setEventMask(body: PhysicsBody, eventMask: number, instanceIndex?: number): void {\r\n        this._applyToBodyOrInstances(\r\n            body,\r\n            (bodyPluginData) => {\r\n                this._hknp.HP_Body_SetEventMask(bodyPluginData.hpBodyId, eventMask);\r\n            },\r\n            instanceIndex\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Retrieves the event mask of a physics body.\r\n     *\r\n     * @param body - The physics body to retrieve the event mask from.\r\n     * @returns The event mask of the physics body.\r\n     *\r\n     */\r\n    public getEventMask(body: PhysicsBody, instanceIndex?: number): number {\r\n        const pluginRef = this._getPluginReference(body, instanceIndex);\r\n        return this._hknp.HP_Body_GetEventMask(pluginRef.hpBodyId)[1];\r\n    }\r\n\r\n    private _fromMassPropertiesTuple(massPropsTuple: any[]): PhysicsMassProperties {\r\n        return {\r\n            centerOfMass: Vector3.FromArray(massPropsTuple[0]),\r\n            mass: massPropsTuple[1],\r\n            inertia: Vector3.FromArray(massPropsTuple[2]),\r\n            inertiaOrientation: Quaternion.FromArray(massPropsTuple[3]),\r\n        };\r\n    }\r\n\r\n    private _internalUpdateMassProperties(pluginData: BodyPluginData) {\r\n        // Recompute the mass based on the shape\r\n        const newProps = this._internalComputeMassProperties(pluginData);\r\n        const massProps = pluginData.userMassProps;\r\n\r\n        // Override the computed values with any the user has set\r\n        if (massProps.centerOfMass) {\r\n            newProps[0] = massProps.centerOfMass.asArray();\r\n        }\r\n        if (massProps.mass != undefined) {\r\n            newProps[1] = massProps.mass;\r\n        }\r\n        if (massProps.inertia) {\r\n            newProps[2] = massProps.inertia.asArray();\r\n        }\r\n        if (massProps.inertiaOrientation) {\r\n            newProps[3] = massProps.inertiaOrientation.asArray();\r\n        }\r\n        this._hknp.HP_Body_SetMassProperties(pluginData.hpBodyId, newProps);\r\n    }\r\n\r\n    public _internalSetMotionType(pluginData: BodyPluginData, motionType: PhysicsMotionType): void {\r\n        switch (motionType) {\r\n            case PhysicsMotionType.STATIC:\r\n                this._hknp.HP_Body_SetMotionType(pluginData.hpBodyId, this._hknp.MotionType.STATIC);\r\n                break;\r\n            case PhysicsMotionType.ANIMATED:\r\n                this._hknp.HP_Body_SetMotionType(pluginData.hpBodyId, this._hknp.MotionType.KINEMATIC);\r\n                break;\r\n            case PhysicsMotionType.DYNAMIC:\r\n                this._hknp.HP_Body_SetMotionType(pluginData.hpBodyId, this._hknp.MotionType.DYNAMIC);\r\n                break;\r\n        }\r\n    }\r\n\r\n    public setMotionType(body: PhysicsBody, motionType: PhysicsMotionType, instanceIndex?: number): void {\r\n        this._applyToBodyOrInstances(\r\n            body,\r\n            (pluginData) => {\r\n                this._internalSetMotionType(pluginData, motionType);\r\n            },\r\n            instanceIndex\r\n        );\r\n    }\r\n\r\n    public getMotionType(body: PhysicsBody, instanceIndex?: number): PhysicsMotionType {\r\n        const pluginRef = this._getPluginReference(body, instanceIndex);\r\n        const type = this._hknp.HP_Body_GetMotionType(pluginRef.hpBodyId)[1];\r\n        switch (type) {\r\n            case this._hknp.MotionType.STATIC:\r\n                return PhysicsMotionType.STATIC;\r\n            case this._hknp.MotionType.KINEMATIC:\r\n                return PhysicsMotionType.ANIMATED;\r\n            case this._hknp.MotionType.DYNAMIC:\r\n                return PhysicsMotionType.DYNAMIC;\r\n        }\r\n        throw new Error(\"Unknown motion type: \" + type);\r\n    }\r\n\r\n    private _internalComputeMassProperties(pluginData: BodyPluginData): any[] {\r\n        const shapeRes = this._hknp.HP_Body_GetShape(pluginData.hpBodyId);\r\n        if (shapeRes[0] == this._hknp.Result.RESULT_OK) {\r\n            const shapeMass = this._hknp.HP_Shape_BuildMassProperties(shapeRes[1]);\r\n            if (shapeMass[0] == this._hknp.Result.RESULT_OK) {\r\n                return shapeMass[1];\r\n            }\r\n        }\r\n\r\n        // Failed; return a unit inertia\r\n        return [[0, 0, 0], 1, [1, 1, 1], [0, 0, 0, 1]];\r\n    }\r\n\r\n    /**\r\n     * Computes the mass properties of a physics body, from it's shape\r\n     *\r\n     * @param body - The physics body to copmute the mass properties of\r\n     */\r\n    public computeMassProperties(body: PhysicsBody, instanceIndex?: number): PhysicsMassProperties {\r\n        const pluginRef = this._getPluginReference(body, instanceIndex);\r\n        const computed = this._internalComputeMassProperties(pluginRef);\r\n        return this._fromMassPropertiesTuple(computed);\r\n    }\r\n\r\n    /**\r\n     * Sets the mass properties of a physics body.\r\n     *\r\n     * @param body - The physics body to set the mass properties of.\r\n     * @param massProps - The mass properties to set.\r\n     * @param instanceIndex - The index of the instance to set the mass properties of. If undefined, the mass properties of all the bodies will be set.\r\n     * This function is useful for setting the mass properties of a physics body,\r\n     * such as its mass, inertia, and center of mass. This is important for\r\n     * accurately simulating the physics of the body in the physics engine.\r\n     *\r\n     */\r\n    public setMassProperties(body: PhysicsBody, massProps: PhysicsMassProperties, instanceIndex?: number): void {\r\n        this._applyToBodyOrInstances(\r\n            body,\r\n            (pluginData) => {\r\n                pluginData.userMassProps = massProps;\r\n                this._internalUpdateMassProperties(pluginData);\r\n            },\r\n            instanceIndex\r\n        );\r\n    }\r\n    /**\r\n     *\r\n     */\r\n    public getMassProperties(body: PhysicsBody, instanceIndex?: number): PhysicsMassProperties {\r\n        const pluginRef = this._getPluginReference(body, instanceIndex);\r\n        const massPropsTuple = this._hknp.HP_Body_GetMassProperties(pluginRef.hpBodyId)[1];\r\n        return this._fromMassPropertiesTuple(massPropsTuple);\r\n    }\r\n\r\n    /**\r\n     * Sets the linear damping of the given body.\r\n     * @param body - The body to set the linear damping for.\r\n     * @param damping - The linear damping to set.\r\n     *\r\n     * This method is useful for controlling the linear damping of a body in a physics engine.\r\n     * Linear damping is a force that opposes the motion of the body, and is proportional to the velocity of the body.\r\n     * This method allows the user to set the linear damping of a body, which can be used to control the motion of the body.\r\n     */\r\n    public setLinearDamping(body: PhysicsBody, damping: number, instanceIndex?: number): void {\r\n        this._applyToBodyOrInstances(\r\n            body,\r\n            (pluginData) => {\r\n                this._hknp.HP_Body_SetLinearDamping(pluginData.hpBodyId, damping);\r\n            },\r\n            instanceIndex\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Gets the linear damping of the given body.\r\n     * @param body - The body to get the linear damping from.\r\n     * @returns The linear damping of the given body.\r\n     *\r\n     * This method is useful for getting the linear damping of a body in a physics engine.\r\n     * Linear damping is a force that opposes the motion of the body and is proportional to the velocity of the body.\r\n     * It is used to simulate the effects of air resistance and other forms of friction.\r\n     */\r\n    public getLinearDamping(body: PhysicsBody, instanceIndex?: number): number {\r\n        const pluginRef = this._getPluginReference(body, instanceIndex);\r\n        return this._hknp.HP_Body_GetLinearDamping(pluginRef.hpBodyId)[1];\r\n    }\r\n\r\n    /**\r\n     * Sets the angular damping of a physics body.\r\n     * @param body - The physics body to set the angular damping for.\r\n     * @param damping - The angular damping value to set.\r\n     *\r\n     * This function is useful for controlling the angular velocity of a physics body.\r\n     * By setting the angular damping, the body's angular velocity will be reduced over time, allowing for more realistic physics simulations.\r\n     */\r\n    public setAngularDamping(body: PhysicsBody, damping: number, instanceIndex?: number): void {\r\n        this._applyToBodyOrInstances(\r\n            body,\r\n            (pluginData) => {\r\n                this._hknp.HP_Body_SetAngularDamping(pluginData.hpBodyId, damping);\r\n            },\r\n            instanceIndex\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Gets the angular damping of a physics body.\r\n     * @param body - The physics body to get the angular damping from.\r\n     * @returns The angular damping of the body.\r\n     *\r\n     * This function is useful for retrieving the angular damping of a physics body,\r\n     * which is used to control the rotational motion of the body. The angular damping is a value between 0 and 1, where 0 is no damping and 1 is full damping.\r\n     */\r\n    public getAngularDamping(body: PhysicsBody, instanceIndex?: number): number {\r\n        const pluginRef = this._getPluginReference(body, instanceIndex);\r\n        return this._hknp.HP_Body_GetAngularDamping(pluginRef.hpBodyId)[1];\r\n    }\r\n\r\n    /**\r\n     * Sets the linear velocity of a physics body.\r\n     * @param body - The physics body to set the linear velocity of.\r\n     * @param linVel - The linear velocity to set.\r\n     *\r\n     * This function is useful for setting the linear velocity of a physics body, which is necessary for simulating\r\n     * motion in a physics engine. The linear velocity is the speed and direction of the body's movement.\r\n     */\r\n    public setLinearVelocity(body: PhysicsBody, linVel: Vector3, instanceIndex?: number): void {\r\n        this._applyToBodyOrInstances(\r\n            body,\r\n            (pluginData) => {\r\n                this._hknp.HP_Body_SetLinearVelocity(pluginData.hpBodyId, this._bVecToV3(linVel));\r\n            },\r\n            instanceIndex\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Gets the linear velocity of a physics body and stores it in a given vector.\r\n     * @param body - The physics body to get the linear velocity from.\r\n     * @param linVel - The vector to store the linear velocity in.\r\n     *\r\n     * This function is useful for retrieving the linear velocity of a physics body,\r\n     * which can be used to determine the speed and direction of the body. This\r\n     * information can be used to simulate realistic physics behavior in a game.\r\n     */\r\n    public getLinearVelocityToRef(body: PhysicsBody, linVel: Vector3, instanceIndex?: number): void {\r\n        const pluginRef = this._getPluginReference(body, instanceIndex);\r\n        const lv = this._hknp.HP_Body_GetLinearVelocity(pluginRef.hpBodyId)[1];\r\n        this._v3ToBvecRef(lv, linVel);\r\n    }\r\n\r\n    /*\r\n     * Apply an operation either to all instances of a body, if instanceIndex is not specified, or to a specific instance.\r\n     */\r\n    private _applyToBodyOrInstances(body: PhysicsBody, fnToApply: (pluginRef: any) => void, instanceIndex?: number): void {\r\n        if (body._pluginDataInstances?.length > 0 && instanceIndex === undefined) {\r\n            for (let i = 0; i < body._pluginDataInstances.length; i++) {\r\n                fnToApply(body._pluginDataInstances[i]);\r\n            }\r\n        } else {\r\n            fnToApply(this._getPluginReference(body, instanceIndex));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Applies an impulse to a physics body at a given location.\r\n     * @param body - The physics body to apply the impulse to.\r\n     * @param impulse - The impulse vector to apply.\r\n     * @param location - The location in world space to apply the impulse.\r\n     * @param instanceIndex - The index of the instance to apply the impulse to. If not specified, the impulse will be applied to all instances.\r\n     *\r\n     * This method is useful for applying an impulse to a physics body at a given location.\r\n     * This can be used to simulate physical forces such as explosions, collisions, and gravity.\r\n     */\r\n    public applyImpulse(body: PhysicsBody, impulse: Vector3, location: Vector3, instanceIndex?: number): void {\r\n        this._applyToBodyOrInstances(\r\n            body,\r\n            (pluginRef) => {\r\n                this._hknp.HP_Body_ApplyImpulse(pluginRef.hpBodyId, this._bVecToV3(location), this._bVecToV3(impulse));\r\n            },\r\n            instanceIndex\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Applies a force to a physics body at a given location.\r\n     * @param body - The physics body to apply the impulse to.\r\n     * @param force - The force vector to apply.\r\n     * @param location - The location in world space to apply the impulse.\r\n     * @param instanceIndex - The index of the instance to apply the force to. If not specified, the force will be applied to all instances.\r\n     *\r\n     * This method is useful for applying a force to a physics body at a given location.\r\n     * This can be used to simulate physical forces such as explosions, collisions, and gravity.\r\n     */\r\n    public applyForce(body: PhysicsBody, force: Vector3, location: Vector3, instanceIndex?: number): void {\r\n        force.scaleToRef(this.getTimeStep(), this._tmpVec3[0]);\r\n        this.applyImpulse(body, this._tmpVec3[0], location, instanceIndex);\r\n    }\r\n\r\n    /**\r\n     * Sets the angular velocity of a physics body.\r\n     *\r\n     * @param body - The physics body to set the angular velocity of.\r\n     * @param angVel - The angular velocity to set.\r\n     *\r\n     * This function is useful for setting the angular velocity of a physics body in a physics engine.\r\n     * This allows for more realistic simulations of physical objects, as they can be given a rotational velocity.\r\n     */\r\n    public setAngularVelocity(body: PhysicsBody, angVel: Vector3, instanceIndex?: number): void {\r\n        this._applyToBodyOrInstances(\r\n            body,\r\n            (pluginRef) => {\r\n                this._hknp.HP_Body_SetAngularVelocity(pluginRef.hpBodyId, this._bVecToV3(angVel));\r\n            },\r\n            instanceIndex\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Gets the angular velocity of a body.\r\n     * @param body - The body to get the angular velocity from.\r\n     * @param angVel - The vector3 to store the angular velocity.\r\n     *\r\n     * This method is useful for getting the angular velocity of a body in a physics engine. It\r\n     * takes the body and a vector3 as parameters and stores the angular velocity of the body\r\n     * in the vector3. This is useful for getting the angular velocity of a body in order to\r\n     * calculate the motion of the body in the physics engine.\r\n     */\r\n    public getAngularVelocityToRef(body: PhysicsBody, angVel: Vector3, instanceIndex?: number): void {\r\n        const pluginRef = this._getPluginReference(body, instanceIndex);\r\n        const av = this._hknp.HP_Body_GetAngularVelocity(pluginRef.hpBodyId)[1];\r\n        this._v3ToBvecRef(av, angVel);\r\n    }\r\n\r\n    /**\r\n     * Sets the transformation of the given physics body to the given transform node.\r\n     * @param body The physics body to set the transformation for.\r\n     * @param node The transform node to set the transformation from.\r\n     * Sets the transformation of the given physics body to the given transform node.\r\n     *\r\n     * This function is useful for setting the transformation of a physics body to a\r\n     * transform node, which is necessary for the physics engine to accurately simulate\r\n     * the motion of the body. It also takes into account instances of the transform\r\n     * node, which is necessary for accurate simulation of multiple bodies with the\r\n     * same transformation.\r\n     */\r\n    public setPhysicsBodyTransformation(body: PhysicsBody, node: TransformNode) {\r\n        const transformNode = body.transformNode;\r\n        if (body.numInstances > 0) {\r\n            // instances\r\n            const m = transformNode as Mesh;\r\n            const matrixData = m._thinInstanceDataStorage.matrixData;\r\n            if (!matrixData) {\r\n                return; // TODO: error handling\r\n            }\r\n            const instancesCount = body.numInstances;\r\n            this._createOrUpdateBodyInstances(body, body.getMotionType(), matrixData, 0, instancesCount, true);\r\n        } else {\r\n            // regular\r\n            this._hknp.HP_Body_SetQTransform(body._pluginData.hpBodyId, this._getTransformInfos(node));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the target transformation (position and rotation) of the body, such that the body will set its velocity to reach that target\r\n     * @param body The physics body to set the target transformation for.\r\n     * @param position The target position\r\n     * @param rotation The target rotation\r\n     * @param instanceIndex The index of the instance in an instanced body\r\n     */\r\n    public setTargetTransform(body: PhysicsBody, position: Vector3, rotation: Quaternion, instanceIndex?: number | undefined): void {\r\n        this._applyToBodyOrInstances(\r\n            body,\r\n            (pluginRef) => {\r\n                this._hknp.HP_Body_SetTargetQTransform(pluginRef.hpBodyId, [this._bVecToV3(position), this._bQuatToV4(rotation)]);\r\n            },\r\n            instanceIndex\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Sets the gravity factor of a body\r\n     * @param body the physics body to set the gravity factor for\r\n     * @param factor the gravity factor\r\n     * @param instanceIndex the index of the instance in an instanced body\r\n     */\r\n    public setGravityFactor(body: PhysicsBody, factor: number, instanceIndex?: number): void {\r\n        this._applyToBodyOrInstances(\r\n            body,\r\n            (pluginRef) => {\r\n                this._hknp.HP_Body_SetGravityFactor(pluginRef.hpBodyId, factor);\r\n            },\r\n            instanceIndex\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get the gravity factor of a body\r\n     * @param body the physics body to get the gravity factor from\r\n     * @param instanceIndex the index of the instance in an instanced body. If not specified, the gravity factor of the first instance will be returned.\r\n     * @returns the gravity factor\r\n     */\r\n    public getGravityFactor(body: PhysicsBody, instanceIndex?: number): number {\r\n        const pluginRef = this._getPluginReference(body, instanceIndex);\r\n        return this._hknp.HP_Body_GetGravityFactor(pluginRef.hpBodyId)[1];\r\n    }\r\n\r\n    /**\r\n     * Disposes a physics body.\r\n     *\r\n     * @param body - The physics body to dispose.\r\n     *\r\n     * This method is useful for releasing the resources associated with a physics body when it is no longer needed.\r\n     * This is important for avoiding memory leaks in the physics engine.\r\n     */\r\n    public disposeBody(body: PhysicsBody): void {\r\n        if (body._pluginDataInstances && body._pluginDataInstances.length > 0) {\r\n            for (const instance of body._pluginDataInstances) {\r\n                this._hknp.HP_Body_Release(instance.hpBodyId);\r\n                instance.hpBodyId = undefined;\r\n            }\r\n        }\r\n        if (body._pluginData) {\r\n            this._hknp.HP_Body_Release(body._pluginData.hpBodyId);\r\n            body._pluginData.hpBodyId = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initializes a physics shape with the given type and parameters.\r\n     * @param shape - The physics shape to initialize.\r\n     * @param type - The type of shape to initialize.\r\n     * @param options - The parameters for the shape.\r\n     *\r\n     * This code is useful for initializing a physics shape with the given type and parameters.\r\n     * It allows for the creation of a sphere, box, capsule, container, cylinder, mesh, and heightfield.\r\n     * Depending on the type of shape, different parameters are required.\r\n     * For example, a sphere requires a radius, while a box requires extents and a rotation.\r\n     */\r\n    public initShape(shape: PhysicsShape, type: PhysicsShapeType, options: PhysicsShapeParameters): void {\r\n        switch (type) {\r\n            case PhysicsShapeType.SPHERE:\r\n                {\r\n                    const radius = options.radius || 1;\r\n                    const center = options.center ? this._bVecToV3(options.center) : [0, 0, 0];\r\n                    shape._pluginData = this._hknp.HP_Shape_CreateSphere(center, radius)[1];\r\n                }\r\n                break;\r\n            case PhysicsShapeType.BOX:\r\n                {\r\n                    const rotation = options.rotation ? this._bQuatToV4(options.rotation) : [0, 0, 0, 1];\r\n                    const extent = options.extents ? this._bVecToV3(options.extents) : [1, 1, 1];\r\n                    const center = options.center ? this._bVecToV3(options.center) : [0, 0, 0];\r\n                    shape._pluginData = this._hknp.HP_Shape_CreateBox(center, rotation, extent)[1];\r\n                }\r\n                break;\r\n            case PhysicsShapeType.CAPSULE:\r\n                {\r\n                    const pointA = options.pointA ? this._bVecToV3(options.pointA) : [0, 0, 0];\r\n                    const pointB = options.pointB ? this._bVecToV3(options.pointB) : [0, 1, 0];\r\n                    const radius = options.radius || 0;\r\n                    shape._pluginData = this._hknp.HP_Shape_CreateCapsule(pointA, pointB, radius)[1];\r\n                }\r\n                break;\r\n            case PhysicsShapeType.CONTAINER:\r\n                {\r\n                    shape._pluginData = this._hknp.HP_Shape_CreateContainer()[1];\r\n                }\r\n                break;\r\n            case PhysicsShapeType.CYLINDER:\r\n                {\r\n                    const pointA = options.pointA ? this._bVecToV3(options.pointA) : [0, 0, 0];\r\n                    const pointB = options.pointB ? this._bVecToV3(options.pointB) : [0, 1, 0];\r\n                    const radius = options.radius || 0;\r\n                    shape._pluginData = this._hknp.HP_Shape_CreateCylinder(pointA, pointB, radius)[1];\r\n                }\r\n                break;\r\n            case PhysicsShapeType.CONVEX_HULL:\r\n            case PhysicsShapeType.MESH:\r\n                {\r\n                    const mesh = options.mesh;\r\n                    if (mesh) {\r\n                        const includeChildMeshes = !!options.includeChildMeshes;\r\n                        const needIndices = type != PhysicsShapeType.CONVEX_HULL;\r\n                        const accum = new MeshAccumulator(mesh, needIndices, mesh?.getScene());\r\n                        accum.addNodeMeshes(mesh, includeChildMeshes);\r\n\r\n                        const positions = accum.getVertices(this._hknp);\r\n                        const numVec3s = positions.numObjects / 3;\r\n\r\n                        if (type == PhysicsShapeType.CONVEX_HULL) {\r\n                            shape._pluginData = this._hknp.HP_Shape_CreateConvexHull(positions.offset, numVec3s)[1];\r\n                        } else {\r\n                            const triangles = accum.getTriangles(this._hknp);\r\n                            const numTriangles = triangles.numObjects / 3;\r\n                            shape._pluginData = this._hknp.HP_Shape_CreateMesh(positions.offset, numVec3s, triangles.offset, numTriangles)[1];\r\n                            accum.freeBuffer(this._hknp, triangles);\r\n                        }\r\n                        accum.freeBuffer(this._hknp, positions);\r\n                    } else {\r\n                        throw new Error(\"No mesh provided to create physics shape.\");\r\n                    }\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(\"Unsupported Shape Type.\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    public setShapeFilterMembershipMask(shape: PhysicsShape, membershipMask: number): void {\r\n        const collideWith = this._hknp.HP_Shape_GetFilterInfo(shape._pluginData)[1][1];\r\n        this._hknp.HP_Shape_SetFilterInfo(shape._pluginData, [membershipMask, collideWith]);\r\n    }\r\n\r\n    public getShapeFilterMembershipMask(shape: PhysicsShape): number {\r\n        return this._hknp.HP_Shape_GetFilterInfo(shape._pluginData)[1][0];\r\n    }\r\n\r\n    public setShapeFilterCollideMask(shape: PhysicsShape, collideMask: number): void {\r\n        const membership = this._hknp.HP_Shape_GetFilterInfo(shape._pluginData)[1][0];\r\n        this._hknp.HP_Shape_SetFilterInfo(shape._pluginData, [membership, collideMask]);\r\n    }\r\n\r\n    public getShapeFilterCollideMask(shape: PhysicsShape): number {\r\n        return this._hknp.HP_Shape_GetFilterInfo(shape._pluginData)[1][1];\r\n    }\r\n\r\n    /**\r\n     * Sets the material of a physics shape.\r\n     * @param shape - The physics shape to set the material of.\r\n     * @param material - The material to set.\r\n     *\r\n     */\r\n    public setMaterial(shape: PhysicsShape, material: PhysicsMaterial): void {\r\n        const dynamicFriction = material.friction ?? 0.5;\r\n        const staticFriction = material.staticFriction ?? dynamicFriction;\r\n        const restitution = material.restitution ?? 0.0;\r\n        const frictionCombine = material.frictionCombine ?? PhysicsMaterialCombineMode.MINIMUM;\r\n        const restitutionCombine = material.restitutionCombine ?? PhysicsMaterialCombineMode.MAXIMUM;\r\n\r\n        const hpMaterial = [staticFriction, dynamicFriction, restitution, this._materialCombineToNative(frictionCombine), this._materialCombineToNative(restitutionCombine)];\r\n        this._hknp.HP_Shape_SetMaterial(shape._pluginData, hpMaterial);\r\n    }\r\n\r\n    /**\r\n     * Sets the density of a physics shape.\r\n     * @param shape - The physics shape to set the density of.\r\n     * @param density - The density to set.\r\n     *\r\n     */\r\n    public setDensity(shape: PhysicsShape, density: number): void {\r\n        this._hknp.HP_Shape_SetDensity(shape._pluginData, density);\r\n    }\r\n\r\n    /**\r\n     * Calculates the density of a given physics shape.\r\n     *\r\n     * @param shape - The physics shape to calculate the density of.\r\n     * @returns The density of the given physics shape.\r\n     *\r\n     */\r\n    public getDensity(shape: PhysicsShape): number {\r\n        return this._hknp.HP_Shape_GetDensity(shape._pluginData)[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the transform infos of a given transform node.\r\n     * @param node - The transform node.\r\n     * @returns An array containing the position and orientation of the node.\r\n     * This code is useful for getting the position and orientation of a given transform node.\r\n     * It first checks if the node has a rotation quaternion, and if not, it creates one from the node's rotation.\r\n     * It then creates an array containing the position and orientation of the node and returns it.\r\n     */\r\n    private _getTransformInfos(node: TransformNode): any[] {\r\n        if (node.parent) {\r\n            node.computeWorldMatrix(true);\r\n            return [this._bVecToV3(node.absolutePosition), this._bQuatToV4(node.absoluteRotationQuaternion)];\r\n        }\r\n\r\n        let orientation = TmpVectors.Quaternion[0];\r\n        if (node.rotationQuaternion) {\r\n            orientation = node.rotationQuaternion;\r\n        } else {\r\n            const r = node.rotation;\r\n            Quaternion.FromEulerAnglesToRef(r.x, r.y, r.z, orientation);\r\n        }\r\n        const transform = [this._bVecToV3(node.position), this._bQuatToV4(orientation)];\r\n        return transform;\r\n    }\r\n\r\n    /**\r\n     * Adds a child shape to the given shape.\r\n     * @param shape - The parent shape.\r\n     * @param newChild - The child shape to add.\r\n     * @param translation - The relative translation of the child from the parent shape\r\n     * @param rotation - The relative rotation of the child from the parent shape\r\n     * @param scale - The relative scale scale of the child from the parent shaep\r\n     *\r\n     */\r\n    public addChild(shape: PhysicsShape, newChild: PhysicsShape, translation?: Vector3, rotation?: Quaternion, scale?: Vector3): void {\r\n        const transformNative = [\r\n            translation ? this._bVecToV3(translation) : [0, 0, 0],\r\n            rotation ? this._bQuatToV4(rotation) : [0, 0, 0, 1],\r\n            scale ? this._bVecToV3(scale) : [1, 1, 1],\r\n        ];\r\n        this._hknp.HP_Shape_AddChild(shape._pluginData, newChild._pluginData, transformNative);\r\n    }\r\n\r\n    /**\r\n     * Removes a child shape from a parent shape.\r\n     * @param shape - The parent shape.\r\n     * @param childIndex - The index of the child shape to remove.\r\n     *\r\n     */\r\n    public removeChild(shape: PhysicsShape, childIndex: number): void {\r\n        this._hknp.HP_Shape_RemoveChild(shape._pluginData, childIndex);\r\n    }\r\n\r\n    /**\r\n     * Returns the number of children of the given shape.\r\n     *\r\n     * @param shape - The shape to get the number of children from.\r\n     * @returns The number of children of the given shape.\r\n     *\r\n     */\r\n    public getNumChildren(shape: PhysicsShape): number {\r\n        return this._hknp.HP_Shape_GetNumChildren(shape._pluginData)[1];\r\n    }\r\n\r\n    /**\r\n     * Marks the shape as a trigger\r\n     * @param shape the shape to mark as a trigger\r\n     * @param isTrigger if the shape is a trigger\r\n     */\r\n    public setTrigger(shape: PhysicsShape, isTrigger: boolean): void {\r\n        this._hknp.HP_Shape_SetTrigger(shape._pluginData, isTrigger);\r\n    }\r\n\r\n    /**\r\n     * Calculates the bounding box of a given physics shape.\r\n     *\r\n     * @param _shape - The physics shape to calculate the bounding box for.\r\n     * @returns The calculated bounding box.\r\n     *\r\n     * This method is useful for physics engines as it allows to calculate the\r\n     * boundaries of a given shape. Knowing the boundaries of a shape is important\r\n     * for collision detection and other physics calculations.\r\n     */\r\n    public getBoundingBox(_shape: PhysicsShape): BoundingBox {\r\n        return {} as BoundingBox;\r\n    }\r\n\r\n    /**\r\n     * Gets the geometry of a physics body.\r\n     *\r\n     * @param body - The physics body.\r\n     * @returns An object containing the positions and indices of the body's geometry.\r\n     *\r\n     */\r\n    public getBodyGeometry(body: PhysicsBody) {\r\n        const dataInfo = body._pluginDataInstances?.length > 0 ? body._pluginDataInstances[0] : body._pluginData;\r\n        const shape = this._hknp.HP_Body_GetShape(dataInfo.hpBodyId)[1];\r\n        const geometryRes = this._hknp.HP_Shape_CreateDebugDisplayGeometry(shape);\r\n\r\n        if (geometryRes[0] != this._hknp.Result.RESULT_OK) {\r\n            return { positions: [], indices: [] };\r\n        }\r\n\r\n        const geometryInfo = this._hknp.HP_DebugGeometry_GetInfo(geometryRes[1])[1];\r\n        const positionsInPlugin = new Float32Array(this._hknp.HEAPU8.buffer, geometryInfo[0], geometryInfo[1] * 3); // 3 floats per position\r\n        const indicesInPlugin = new Uint32Array(this._hknp.HEAPU8.buffer, geometryInfo[2], geometryInfo[3] * 3); // 3 indices per triangle\r\n\r\n        // HP_DebugGeometry_Release will free the buffer in the plugin. To avoid a\r\n        // use-after-free, we need  to make a copy of the data here.\r\n        const positions = positionsInPlugin.slice(0);\r\n        const indices = indicesInPlugin.slice(0);\r\n        this._hknp.HP_DebugGeometry_Release(geometryRes[1]);\r\n        return { positions: positions, indices: indices };\r\n    }\r\n\r\n    /**\r\n     * Releases a physics shape from the physics engine.\r\n     *\r\n     * @param shape - The physics shape to be released.\r\n     * @returns void\r\n     *\r\n     * This method is useful for releasing a physics shape from the physics engine, freeing up resources and preventing memory leaks.\r\n     */\r\n    public disposeShape(shape: PhysicsShape): void {\r\n        this._hknp.HP_Shape_Release(shape._pluginData);\r\n        shape._pluginData = undefined;\r\n    }\r\n\r\n    // constraint\r\n\r\n    /**\r\n     * Initializes a physics constraint with the given parameters.\r\n     *\r\n     * @param constraint - The physics constraint to be initialized.\r\n     * @param body - The main body\r\n     * @param childBody - The child body.\r\n     * @param instanceIndex - If this body is instanced, the index of the instance to which the constraint will be applied. If not specified, no constraint will be applied.\r\n     * @param childInstanceIndex - If the child body is instanced, the index of the instance to which the constraint will be applied. If not specified, no constraint will be applied.\r\n     *\r\n     * This function is useful for setting up a physics constraint in a physics engine.\r\n     */\r\n    public initConstraint(constraint: PhysicsConstraint, body: PhysicsBody, childBody: PhysicsBody, instanceIndex?: number, childInstanceIndex?: number): void {\r\n        const type = constraint.type;\r\n        const options = constraint.options;\r\n        if (!type || !options) {\r\n            Logger.Warn(\"No constraint type or options. Constraint is invalid.\");\r\n            return;\r\n        }\r\n        if ((body._pluginDataInstances.length > 0 && instanceIndex === undefined) || (childBody._pluginDataInstances.length > 0 && childInstanceIndex === undefined)) {\r\n            Logger.Warn(\"Body is instanced but no instance index was specified. Constraint will not be applied.\");\r\n            return;\r\n        }\r\n\r\n        constraint._pluginData = constraint._pluginData ?? [];\r\n        const jointId = this._hknp.HP_Constraint_Create()[1];\r\n        constraint._pluginData.push(jointId);\r\n\r\n        // body parenting\r\n        const bodyA = this._getPluginReference(body, instanceIndex).hpBodyId;\r\n        const bodyB = this._getPluginReference(childBody, childInstanceIndex).hpBodyId;\r\n        this._hknp.HP_Constraint_SetParentBody(jointId, bodyA);\r\n        this._hknp.HP_Constraint_SetChildBody(jointId, bodyB);\r\n\r\n        // anchors\r\n        const pivotA = options.pivotA ? this._bVecToV3(options.pivotA) : this._bVecToV3(Vector3.Zero());\r\n        const axisA = options.axisA ?? new Vector3(1, 0, 0);\r\n        const perpAxisA = this._tmpVec3[0];\r\n        if (options.perpAxisA) {\r\n            perpAxisA.copyFrom(options.perpAxisA);\r\n        } else {\r\n            axisA.getNormalToRef(perpAxisA);\r\n        }\r\n        this._hknp.HP_Constraint_SetAnchorInParent(jointId, pivotA, this._bVecToV3(axisA), this._bVecToV3(perpAxisA));\r\n        const pivotB = options.pivotB ? this._bVecToV3(options.pivotB) : this._bVecToV3(Vector3.Zero());\r\n        const axisB = options.axisB ?? new Vector3(1, 0, 0);\r\n        const perpAxisB = this._tmpVec3[0];\r\n        if (options.perpAxisB) {\r\n            perpAxisB.copyFrom(options.perpAxisB);\r\n        } else {\r\n            axisB.getNormalToRef(perpAxisB);\r\n        }\r\n        this._hknp.HP_Constraint_SetAnchorInChild(jointId, pivotB, this._bVecToV3(axisB), this._bVecToV3(perpAxisB));\r\n\r\n        if (type == PhysicsConstraintType.LOCK) {\r\n            this._hknp.HP_Constraint_SetAxisMode(jointId, this._hknp.ConstraintAxis.LINEAR_X, this._hknp.ConstraintAxisLimitMode.LOCKED);\r\n            this._hknp.HP_Constraint_SetAxisMode(jointId, this._hknp.ConstraintAxis.LINEAR_Y, this._hknp.ConstraintAxisLimitMode.LOCKED);\r\n            this._hknp.HP_Constraint_SetAxisMode(jointId, this._hknp.ConstraintAxis.LINEAR_Z, this._hknp.ConstraintAxisLimitMode.LOCKED);\r\n            this._hknp.HP_Constraint_SetAxisMode(jointId, this._hknp.ConstraintAxis.ANGULAR_X, this._hknp.ConstraintAxisLimitMode.LOCKED);\r\n            this._hknp.HP_Constraint_SetAxisMode(jointId, this._hknp.ConstraintAxis.ANGULAR_Y, this._hknp.ConstraintAxisLimitMode.LOCKED);\r\n            this._hknp.HP_Constraint_SetAxisMode(jointId, this._hknp.ConstraintAxis.ANGULAR_Z, this._hknp.ConstraintAxisLimitMode.LOCKED);\r\n        } else if (type == PhysicsConstraintType.DISTANCE) {\r\n            const distance = options.maxDistance || 0;\r\n            const dist3d = this._hknp.ConstraintAxis.LINEAR_DISTANCE;\r\n            this._hknp.HP_Constraint_SetAxisMode(jointId, dist3d, this._hknp.ConstraintAxisLimitMode.LIMITED);\r\n            this._hknp.HP_Constraint_SetAxisMinLimit(jointId, dist3d, distance);\r\n            this._hknp.HP_Constraint_SetAxisMaxLimit(jointId, dist3d, distance);\r\n        } else if (type == PhysicsConstraintType.HINGE) {\r\n            this._hknp.HP_Constraint_SetAxisMode(jointId, this._hknp.ConstraintAxis.LINEAR_X, this._hknp.ConstraintAxisLimitMode.LOCKED);\r\n            this._hknp.HP_Constraint_SetAxisMode(jointId, this._hknp.ConstraintAxis.LINEAR_Y, this._hknp.ConstraintAxisLimitMode.LOCKED);\r\n            this._hknp.HP_Constraint_SetAxisMode(jointId, this._hknp.ConstraintAxis.LINEAR_Z, this._hknp.ConstraintAxisLimitMode.LOCKED);\r\n            this._hknp.HP_Constraint_SetAxisMode(jointId, this._hknp.ConstraintAxis.ANGULAR_Y, this._hknp.ConstraintAxisLimitMode.LOCKED);\r\n            this._hknp.HP_Constraint_SetAxisMode(jointId, this._hknp.ConstraintAxis.ANGULAR_Z, this._hknp.ConstraintAxisLimitMode.LOCKED);\r\n        } else if (type == PhysicsConstraintType.PRISMATIC) {\r\n            this._hknp.HP_Constraint_SetAxisMode(jointId, this._hknp.ConstraintAxis.LINEAR_Y, this._hknp.ConstraintAxisLimitMode.LOCKED);\r\n            this._hknp.HP_Constraint_SetAxisMode(jointId, this._hknp.ConstraintAxis.LINEAR_Z, this._hknp.ConstraintAxisLimitMode.LOCKED);\r\n            this._hknp.HP_Constraint_SetAxisMode(jointId, this._hknp.ConstraintAxis.ANGULAR_X, this._hknp.ConstraintAxisLimitMode.LOCKED);\r\n            this._hknp.HP_Constraint_SetAxisMode(jointId, this._hknp.ConstraintAxis.ANGULAR_Y, this._hknp.ConstraintAxisLimitMode.LOCKED);\r\n            this._hknp.HP_Constraint_SetAxisMode(jointId, this._hknp.ConstraintAxis.ANGULAR_Z, this._hknp.ConstraintAxisLimitMode.LOCKED);\r\n        } else if (type == PhysicsConstraintType.SLIDER) {\r\n            this._hknp.HP_Constraint_SetAxisMode(jointId, this._hknp.ConstraintAxis.LINEAR_Y, this._hknp.ConstraintAxisLimitMode.LOCKED);\r\n            this._hknp.HP_Constraint_SetAxisMode(jointId, this._hknp.ConstraintAxis.LINEAR_Z, this._hknp.ConstraintAxisLimitMode.LOCKED);\r\n            this._hknp.HP_Constraint_SetAxisMode(jointId, this._hknp.ConstraintAxis.ANGULAR_Y, this._hknp.ConstraintAxisLimitMode.LOCKED);\r\n            this._hknp.HP_Constraint_SetAxisMode(jointId, this._hknp.ConstraintAxis.ANGULAR_Z, this._hknp.ConstraintAxisLimitMode.LOCKED);\r\n        } else if (type == PhysicsConstraintType.BALL_AND_SOCKET) {\r\n            this._hknp.HP_Constraint_SetAxisMode(jointId, this._hknp.ConstraintAxis.LINEAR_X, this._hknp.ConstraintAxisLimitMode.LOCKED);\r\n            this._hknp.HP_Constraint_SetAxisMode(jointId, this._hknp.ConstraintAxis.LINEAR_Y, this._hknp.ConstraintAxisLimitMode.LOCKED);\r\n            this._hknp.HP_Constraint_SetAxisMode(jointId, this._hknp.ConstraintAxis.LINEAR_Z, this._hknp.ConstraintAxisLimitMode.LOCKED);\r\n        } else if (type == PhysicsConstraintType.SIX_DOF) {\r\n            const sixdofData: Physics6DoFConstraint = <Physics6DoFConstraint>constraint;\r\n            for (const l of sixdofData.limits) {\r\n                const axId = this._constraintAxisToNative(l.axis);\r\n                if ((l.minLimit ?? -1) == 0 && (l.maxLimit ?? -1) == 0) {\r\n                    this._hknp.HP_Constraint_SetAxisMode(jointId, axId, this._hknp.ConstraintAxisLimitMode.LOCKED);\r\n                } else {\r\n                    if (l.minLimit != undefined) {\r\n                        this._hknp.HP_Constraint_SetAxisMode(jointId, axId, this._hknp.ConstraintAxisLimitMode.LIMITED);\r\n                        this._hknp.HP_Constraint_SetAxisMinLimit(jointId, axId, l.minLimit);\r\n                    }\r\n\r\n                    if (l.maxLimit != undefined) {\r\n                        this._hknp.HP_Constraint_SetAxisMode(jointId, axId, this._hknp.ConstraintAxisLimitMode.LIMITED);\r\n                        this._hknp.HP_Constraint_SetAxisMaxLimit(jointId, axId, l.maxLimit);\r\n                    }\r\n                }\r\n                if (l.stiffness) {\r\n                    this._hknp.HP_Constraint_SetAxisStiffness(jointId, axId, l.stiffness);\r\n                }\r\n                if (l.damping) {\r\n                    this._hknp.HP_Constraint_SetAxisDamping(jointId, axId, l.damping);\r\n                }\r\n            }\r\n        } else {\r\n            throw new Error(\"Unsupported Constraint Type.\");\r\n        }\r\n\r\n        const collisionEnabled = !!options.collision;\r\n        this._hknp.HP_Constraint_SetCollisionsEnabled(jointId, collisionEnabled);\r\n        this._hknp.HP_Constraint_SetEnabled(jointId, true);\r\n    }\r\n\r\n    /**\r\n     * Adds a constraint to the physics engine.\r\n     *\r\n     * @param body - The main body to which the constraint is applied.\r\n     * @param childBody - The body to which the constraint is applied.\r\n     * @param constraint - The constraint to be applied.\r\n     * @param instanceIndex - If this body is instanced, the index of the instance to which the constraint will be applied. If not specified, no constraint will be applied.\r\n     * @param childInstanceIndex - If the child body is instanced, the index of the instance to which the constraint will be applied. If not specified, no constraint will be applied.\r\n     */\r\n    addConstraint(body: PhysicsBody, childBody: PhysicsBody, constraint: PhysicsConstraint, instanceIndex?: number, childInstanceIndex?: number): void {\r\n        //<todo It's real weird that initConstraint() is called only after adding to a body!\r\n        this.initConstraint(constraint, body, childBody, instanceIndex, childInstanceIndex);\r\n    }\r\n\r\n    /**\r\n     * Enables or disables a constraint in the physics engine.\r\n     * @param constraint - The constraint to enable or disable.\r\n     * @param isEnabled - Whether the constraint should be enabled or disabled.\r\n     *\r\n     */\r\n    public setEnabled(constraint: PhysicsConstraint, isEnabled: boolean): void {\r\n        for (const jointId of constraint._pluginData) {\r\n            this._hknp.HP_Constraint_SetEnabled(jointId, isEnabled);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the enabled state of the given constraint.\r\n     * @param constraint - The constraint to get the enabled state from.\r\n     * @returns The enabled state of the given constraint.\r\n     *\r\n     */\r\n    public getEnabled(constraint: PhysicsConstraint): boolean {\r\n        const firstId = constraint._pluginData && constraint._pluginData[0];\r\n        if (firstId) {\r\n            return this._hknp.HP_Constraint_GetEnabled(firstId)[1];\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Enables or disables collisions for the given constraint.\r\n     * @param constraint - The constraint to enable or disable collisions for.\r\n     * @param isEnabled - Whether collisions should be enabled or disabled.\r\n     *\r\n     */\r\n    public setCollisionsEnabled(constraint: PhysicsConstraint, isEnabled: boolean): void {\r\n        for (const jointId of constraint._pluginData) {\r\n            this._hknp.HP_Constraint_SetCollisionsEnabled(jointId, isEnabled);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets whether collisions are enabled for the given constraint.\r\n     * @param constraint - The constraint to get collisions enabled for.\r\n     * @returns Whether collisions are enabled for the given constraint.\r\n     *\r\n     */\r\n    public getCollisionsEnabled(constraint: PhysicsConstraint): boolean {\r\n        const firstId = constraint._pluginData && constraint._pluginData[0];\r\n        if (firstId) {\r\n            return this._hknp.HP_Constraint_GetCollisionsEnabled(firstId)[1];\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Sets the friction of the given axis of the given constraint.\r\n     *\r\n     * @param constraint - The constraint to set the friction of.\r\n     * @param axis - The axis of the constraint to set the friction of.\r\n     * @param friction - The friction to set.\r\n     * @returns void\r\n     *\r\n     */\r\n    public setAxisFriction(constraint: PhysicsConstraint, axis: PhysicsConstraintAxis, friction: number): void {\r\n        for (const jointId of constraint._pluginData) {\r\n            this._hknp.HP_Constraint_SetAxisFriction(jointId, this._constraintAxisToNative(axis), friction);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the friction value of the specified axis of the given constraint.\r\n     *\r\n     * @param constraint - The constraint to get the axis friction from.\r\n     * @param axis - The axis to get the friction from.\r\n     * @returns The friction value of the specified axis.\r\n     *\r\n     */\r\n    public getAxisFriction(constraint: PhysicsConstraint, axis: PhysicsConstraintAxis): Nullable<number> {\r\n        const firstId = constraint._pluginData && constraint._pluginData[0];\r\n        if (firstId) {\r\n            return this._hknp.HP_Constraint_GetAxisFriction(firstId, this._constraintAxisToNative(axis))[1];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Sets the limit mode of the specified axis of the given constraint.\r\n     * @param constraint - The constraint to set the axis mode of.\r\n     * @param axis - The axis to set the limit mode of.\r\n     * @param limitMode - The limit mode to set.\r\n     */\r\n    public setAxisMode(constraint: PhysicsConstraint, axis: PhysicsConstraintAxis, limitMode: PhysicsConstraintAxisLimitMode): void {\r\n        for (const jointId of constraint._pluginData) {\r\n            this._hknp.HP_Constraint_SetAxisMode(jointId, this._constraintAxisToNative(axis), this._limitModeToNative(limitMode));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the axis limit mode of the given constraint.\r\n     *\r\n     * @param constraint - The constraint to get the axis limit mode from.\r\n     * @param axis - The axis to get the limit mode from.\r\n     * @returns The axis limit mode of the given constraint.\r\n     *\r\n     */\r\n    public getAxisMode(constraint: PhysicsConstraint, axis: PhysicsConstraintAxis): Nullable<PhysicsConstraintAxisLimitMode> {\r\n        const firstId = constraint._pluginData && constraint._pluginData[0];\r\n        if (firstId) {\r\n            const mode = this._hknp.HP_Constraint_GetAxisMode(firstId, this._constraintAxisToNative(axis))[1];\r\n            return this._nativeToLimitMode(mode);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Sets the minimum limit of the given axis of the given constraint.\r\n     * @param constraint - The constraint to set the minimum limit of.\r\n     * @param axis - The axis to set the minimum limit of.\r\n     * @param limit - The minimum limit to set.\r\n     *\r\n     */\r\n    public setAxisMinLimit(constraint: PhysicsConstraint, axis: PhysicsConstraintAxis, limit: number): void {\r\n        for (const jointId of constraint._pluginData) {\r\n            this._hknp.HP_Constraint_SetAxisMinLimit(jointId, this._constraintAxisToNative(axis), limit);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the minimum limit of the specified axis of the given constraint.\r\n     * @param constraint - The constraint to get the minimum limit from.\r\n     * @param axis - The axis to get the minimum limit from.\r\n     * @returns The minimum limit of the specified axis of the given constraint.\r\n     *\r\n     */\r\n    public getAxisMinLimit(constraint: PhysicsConstraint, axis: PhysicsConstraintAxis): Nullable<number> {\r\n        const firstId = constraint._pluginData && constraint._pluginData[0];\r\n        if (firstId) {\r\n            return this._hknp.HP_Constraint_GetAxisMinLimit(firstId, this._constraintAxisToNative(axis))[1];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Sets the maximum limit of the given axis of the given constraint.\r\n     * @param constraint - The constraint to set the maximum limit of the given axis.\r\n     * @param axis - The axis to set the maximum limit of.\r\n     * @param limit - The maximum limit to set.\r\n     *\r\n     */\r\n    public setAxisMaxLimit(constraint: PhysicsConstraint, axis: PhysicsConstraintAxis, limit: number): void {\r\n        for (const jointId of constraint._pluginData) {\r\n            this._hknp.HP_Constraint_SetAxisMaxLimit(jointId, this._constraintAxisToNative(axis), limit);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the maximum limit of the given axis of the given constraint.\r\n     *\r\n     * @param constraint - The constraint to get the maximum limit from.\r\n     * @param axis - The axis to get the maximum limit from.\r\n     * @returns The maximum limit of the given axis of the given constraint.\r\n     *\r\n     */\r\n    public getAxisMaxLimit(constraint: PhysicsConstraint, axis: PhysicsConstraintAxis): Nullable<number> {\r\n        const firstId = constraint._pluginData && constraint._pluginData[0];\r\n        if (firstId) {\r\n            return this._hknp.HP_Constraint_GetAxisMaxLimit(firstId, this._constraintAxisToNative(axis))[1];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Sets the motor type of the given axis of the given constraint.\r\n     * @param constraint - The constraint to set the motor type of.\r\n     * @param axis - The axis of the constraint to set the motor type of.\r\n     * @param motorType - The motor type to set.\r\n     * @returns void\r\n     *\r\n     */\r\n    public setAxisMotorType(constraint: PhysicsConstraint, axis: PhysicsConstraintAxis, motorType: PhysicsConstraintMotorType): void {\r\n        for (const jointId of constraint._pluginData) {\r\n            this._hknp.HP_Constraint_SetAxisMotorType(jointId, this._constraintAxisToNative(axis), this._constraintMotorTypeToNative(motorType));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the motor type of the specified axis of the given constraint.\r\n     * @param constraint - The constraint to get the motor type from.\r\n     * @param axis - The axis of the constraint to get the motor type from.\r\n     * @returns The motor type of the specified axis of the given constraint.\r\n     *\r\n     */\r\n    public getAxisMotorType(constraint: PhysicsConstraint, axis: PhysicsConstraintAxis): Nullable<PhysicsConstraintMotorType> {\r\n        const firstId = constraint._pluginData && constraint._pluginData[0];\r\n        if (firstId) {\r\n            return this._nativeToMotorType(this._hknp.HP_Constraint_GetAxisMotorType(firstId, this._constraintAxisToNative(axis))[1]);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Sets the target of an axis motor of a constraint.\r\n     *\r\n     * @param constraint - The constraint to set the axis motor target of.\r\n     * @param axis - The axis of the constraint to set the motor target of.\r\n     * @param target - The target of the axis motor.\r\n     *\r\n     */\r\n    public setAxisMotorTarget(constraint: PhysicsConstraint, axis: PhysicsConstraintAxis, target: number): void {\r\n        for (const jointId of constraint._pluginData) {\r\n            this._hknp.HP_Constraint_SetAxisMotorTarget(jointId, this._constraintAxisToNative(axis), target);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the target of the motor of the given axis of the given constraint.\r\n     *\r\n     * @param constraint - The constraint to get the motor target from.\r\n     * @param axis - The axis of the constraint to get the motor target from.\r\n     * @returns The target of the motor of the given axis of the given constraint.\r\n     *\r\n     */\r\n    public getAxisMotorTarget(constraint: PhysicsConstraint, axis: PhysicsConstraintAxis): Nullable<number> {\r\n        const firstId = constraint._pluginData && constraint._pluginData[0];\r\n        if (firstId) {\r\n            return this._hknp.HP_Constraint_GetAxisMotorTarget(constraint._pluginData, this._constraintAxisToNative(axis))[1];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Sets the maximum force that can be applied by the motor of the given constraint axis.\r\n     * @param constraint - The constraint to set the motor max force for.\r\n     * @param axis - The axis of the constraint to set the motor max force for.\r\n     * @param maxForce - The maximum force that can be applied by the motor.\r\n     *\r\n     */\r\n    public setAxisMotorMaxForce(constraint: PhysicsConstraint, axis: PhysicsConstraintAxis, maxForce: number): void {\r\n        for (const jointId of constraint._pluginData) {\r\n            this._hknp.HP_Constraint_SetAxisMotorMaxForce(jointId, this._constraintAxisToNative(axis), maxForce);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the maximum force of the motor of the given constraint axis.\r\n     *\r\n     * @param constraint - The constraint to get the motor maximum force from.\r\n     * @param axis - The axis of the constraint to get the motor maximum force from.\r\n     * @returns The maximum force of the motor of the given constraint axis.\r\n     *\r\n     */\r\n    public getAxisMotorMaxForce(constraint: PhysicsConstraint, axis: PhysicsConstraintAxis): Nullable<number> {\r\n        const firstId = constraint._pluginData && constraint._pluginData[0];\r\n        if (firstId) {\r\n            return this._hknp.HP_Constraint_GetAxisMotorMaxForce(firstId, this._constraintAxisToNative(axis))[1];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Disposes a physics constraint.\r\n     *\r\n     * @param constraint - The physics constraint to dispose.\r\n     *\r\n     * This method is useful for releasing the resources associated with a physics constraint, such as\r\n     * the Havok constraint, when it is no longer needed. This is important for avoiding memory leaks.\r\n     */\r\n    public disposeConstraint(constraint: PhysicsConstraint): void {\r\n        for (const jointId of constraint._pluginData) {\r\n            this._hknp.HP_Constraint_SetEnabled(jointId, false);\r\n            this._hknp.HP_Constraint_Release(jointId);\r\n        }\r\n        constraint._pluginData.length = 0;\r\n    }\r\n\r\n    /**\r\n     * Performs a raycast from a given start point to a given end point and stores the result in a given PhysicsRaycastResult object.\r\n     *\r\n     * @param from - The start point of the raycast.\r\n     * @param to - The end point of the raycast.\r\n     * @param result - The PhysicsRaycastResult object to store the result of the raycast.\r\n     * @param query - The raycast query options. See [[IRaycastQuery]] for more information.\r\n     *\r\n     * Performs a raycast. It takes in two points, from and to, and a PhysicsRaycastResult object to store the result of the raycast.\r\n     * It then performs the raycast and stores the hit data in the PhysicsRaycastResult object.\r\n     */\r\n    public raycast(from: Vector3, to: Vector3, result: PhysicsRaycastResult, query?: IRaycastQuery): void {\r\n        const queryMembership = query?.membership ?? ~0;\r\n        const queryCollideWith = query?.collideWith ?? ~0;\r\n\r\n        result.reset(from, to);\r\n\r\n        const hkQuery = [this._bVecToV3(from), this._bVecToV3(to), [queryMembership, queryCollideWith]];\r\n        this._hknp.HP_World_CastRayWithCollector(this.world, this._queryCollector, hkQuery);\r\n\r\n        if (this._hknp.HP_QueryCollector_GetNumHits(this._queryCollector)[1] > 0) {\r\n            const hitData = this._hknp.HP_QueryCollector_GetCastRayResult(this._queryCollector, 0)[1];\r\n\r\n            const hitPos = hitData[1][3];\r\n            const hitNormal = hitData[1][4];\r\n            const hitTriangle = hitData[1][5];\r\n            result.setHitData({ x: hitNormal[0], y: hitNormal[1], z: hitNormal[2] }, { x: hitPos[0], y: hitPos[1], z: hitPos[2] }, hitTriangle);\r\n            result.calculateHitDistance();\r\n            const hitBody = this._bodies.get(hitData[1][0][0]);\r\n            result.body = hitBody?.body;\r\n            result.bodyIndex = hitBody?.index;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return the collision observable for a particular physics body.\r\n     * @param body the physics body\r\n     */\r\n    public getCollisionObservable(body: PhysicsBody): Observable<IPhysicsCollisionEvent> {\r\n        const bodyId = body._pluginData.hpBodyId[0];\r\n        let observable = this._bodyCollisionObservable.get(bodyId);\r\n        if (!observable) {\r\n            observable = new Observable<IPhysicsCollisionEvent>();\r\n            this._bodyCollisionObservable.set(bodyId, observable);\r\n        }\r\n        return observable;\r\n    }\r\n\r\n    /**\r\n     * Return the collision ended observable for a particular physics body.\r\n     * @param body the physics body\r\n     * @returns\r\n     */\r\n    public getCollisionEndedObservable(body: PhysicsBody): Observable<IBasePhysicsCollisionEvent> {\r\n        const bodyId = body._pluginData.hpBodyId[0];\r\n        let observable = this._bodyCollisionEndedObservable.get(bodyId);\r\n        if (!observable) {\r\n            observable = new Observable<IBasePhysicsCollisionEvent>();\r\n            this._bodyCollisionEndedObservable.set(bodyId, observable);\r\n        }\r\n        return observable;\r\n    }\r\n\r\n    /**\r\n     * Enable collision to be reported for a body when a callback is setup on the world\r\n     * @param body the physics body\r\n     * @param enabled\r\n     */\r\n    public setCollisionCallbackEnabled(body: PhysicsBody, enabled: boolean): void {\r\n        // Register for collide events by default\r\n        const collideEvents = this._hknp.EventType.COLLISION_STARTED.value | this._hknp.EventType.COLLISION_CONTINUED.value | this._hknp.EventType.COLLISION_FINISHED.value;\r\n        if (body._pluginDataInstances && body._pluginDataInstances.length) {\r\n            body._pluginDataInstances.forEach((bodyId) => {\r\n                this._hknp.HP_Body_SetEventMask(bodyId.hpBodyId, enabled ? collideEvents : 0);\r\n            });\r\n        } else if (body._pluginData) {\r\n            this._hknp.HP_Body_SetEventMask(body._pluginData.hpBodyId, enabled ? collideEvents : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enable collision ended to be reported for a body when a callback is setup on the world\r\n     * @param body\r\n     * @param enabled\r\n     */\r\n    public setCollisionEndedCallbackEnabled(body: PhysicsBody, enabled: boolean): void {\r\n        // Register to collide ended events\r\n        const pluginRef = this._getPluginReference(body);\r\n        let currentCollideEvents = this._hknp.HP_Body_GetEventMask(pluginRef.hpBodyId)[1];\r\n        // update with the ended mask\r\n        currentCollideEvents = enabled\r\n            ? currentCollideEvents | this._hknp.EventType.COLLISION_FINISHED.value\r\n            : currentCollideEvents & ~this._hknp.EventType.COLLISION_FINISHED.value;\r\n        if (body._pluginDataInstances && body._pluginDataInstances.length) {\r\n            body._pluginDataInstances.forEach((bodyId) => {\r\n                this._hknp.HP_Body_SetEventMask(bodyId.hpBodyId, currentCollideEvents);\r\n            });\r\n        } else if (body._pluginData) {\r\n            this._hknp.HP_Body_SetEventMask(body._pluginData.hpBodyId, currentCollideEvents);\r\n        }\r\n    }\r\n\r\n    private _notifyTriggers() {\r\n        let eventAddress = this._hknp.HP_World_GetTriggerEvents(this.world)[1];\r\n        const event = new TriggerEvent();\r\n        while (eventAddress) {\r\n            TriggerEvent.readToRef(this._hknp.HEAPU8.buffer, eventAddress, event);\r\n\r\n            const bodyInfoA = this._bodies.get(event.bodyIdA)!;\r\n            const bodyInfoB = this._bodies.get(event.bodyIdB)!;\r\n\r\n            const triggerCollisionInfo: IBasePhysicsCollisionEvent = {\r\n                collider: bodyInfoA.body,\r\n                colliderIndex: bodyInfoA.index,\r\n                collidedAgainst: bodyInfoB.body,\r\n                collidedAgainstIndex: bodyInfoB.index,\r\n                type: this._nativeTriggerCollisionValueToCollisionType(event.type),\r\n            };\r\n            this.onTriggerCollisionObservable.notifyObservers(triggerCollisionInfo);\r\n\r\n            eventAddress = this._hknp.HP_World_GetNextTriggerEvent(this.world, eventAddress);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Runs thru all detected collisions and filter by body\r\n     */\r\n    private _notifyCollisions() {\r\n        let eventAddress = this._hknp.HP_World_GetCollisionEvents(this.world)[1];\r\n        const event = new CollisionEvent();\r\n        const worldAddr = Number(this.world);\r\n        while (eventAddress) {\r\n            CollisionEvent.readToRef(this._hknp.HEAPU8.buffer, eventAddress, event);\r\n            const bodyInfoA = this._bodies.get(event.contactOnA.bodyId)!;\r\n            const bodyInfoB = this._bodies.get(event.contactOnB.bodyId)!;\r\n            const collisionInfo: any = {\r\n                collider: bodyInfoA.body,\r\n                colliderIndex: bodyInfoA.index,\r\n                collidedAgainst: bodyInfoB.body,\r\n                collidedAgainstIndex: bodyInfoB.index,\r\n                type: this._nativeCollisionValueToCollisionType(event.type),\r\n            };\r\n            if (collisionInfo.type === PhysicsEventType.COLLISION_FINISHED) {\r\n                this.onCollisionEndedObservable.notifyObservers(collisionInfo);\r\n            } else {\r\n                event.contactOnB.position.subtractToRef(event.contactOnA.position, this._tmpVec3[0]);\r\n                const distance = Vector3.Dot(this._tmpVec3[0], event.contactOnA.normal);\r\n                collisionInfo.point = event.contactOnA.position;\r\n                collisionInfo.distance = distance;\r\n                collisionInfo.impulse = event.impulseApplied;\r\n                collisionInfo.normal = event.contactOnA.normal;\r\n                this.onCollisionObservable.notifyObservers(collisionInfo);\r\n            }\r\n\r\n            if (this._bodyCollisionObservable.size && collisionInfo.type !== PhysicsEventType.COLLISION_FINISHED) {\r\n                const observableA = this._bodyCollisionObservable.get(event.contactOnA.bodyId);\r\n                const observableB = this._bodyCollisionObservable.get(event.contactOnB.bodyId);\r\n\r\n                if (observableA) {\r\n                    observableA.notifyObservers(collisionInfo);\r\n                } else if (observableB) {\r\n                    //<todo This seems like it would give unexpected results when both bodies have observers?\r\n                    // Flip collision info:\r\n                    collisionInfo.collider = bodyInfoB.body;\r\n                    collisionInfo.colliderIndex = bodyInfoB.index;\r\n                    collisionInfo.collidedAgainst = bodyInfoA.body;\r\n                    collisionInfo.collidedAgainstIndex = bodyInfoA.index;\r\n                    collisionInfo.normal = event.contactOnB.normal;\r\n                    observableB.notifyObservers(collisionInfo);\r\n                }\r\n            } else if (this._bodyCollisionEndedObservable.size) {\r\n                const observableA = this._bodyCollisionEndedObservable.get(event.contactOnA.bodyId);\r\n                const observableB = this._bodyCollisionEndedObservable.get(event.contactOnB.bodyId);\r\n\r\n                if (observableA) {\r\n                    observableA.notifyObservers(collisionInfo);\r\n                } else if (observableB) {\r\n                    //<todo This seems like it would give unexpected results when both bodies have observers?\r\n                    // Flip collision info:\r\n                    collisionInfo.collider = bodyInfoB.body;\r\n                    collisionInfo.colliderIndex = bodyInfoB.index;\r\n                    collisionInfo.collidedAgainst = bodyInfoA.body;\r\n                    collisionInfo.collidedAgainstIndex = bodyInfoA.index;\r\n                    collisionInfo.normal = event.contactOnB.normal;\r\n                    observableB.notifyObservers(collisionInfo);\r\n                }\r\n            }\r\n\r\n            eventAddress = this._hknp.HP_World_GetNextCollisionEvent(worldAddr, eventAddress);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the number of bodies in the world\r\n     */\r\n    public get numBodies() {\r\n        return this._hknp.HP_World_GetNumBodies(this.world)[1];\r\n    }\r\n\r\n    /**\r\n     * Dispose the world and free resources\r\n     */\r\n    public dispose(): void {\r\n        this._hknp.HP_QueryCollector_Release(this._queryCollector);\r\n        this._queryCollector = BigInt(0);\r\n        this._hknp.HP_World_Release(this.world);\r\n        this.world = undefined;\r\n    }\r\n\r\n    private _v3ToBvecRef(v: any, vec3: Vector3): void {\r\n        vec3.set(v[0], v[1], v[2]);\r\n    }\r\n\r\n    private _bVecToV3(v: any): any {\r\n        return [v._x, v._y, v._z];\r\n    }\r\n\r\n    private _bQuatToV4(q: Quaternion): Array<number> {\r\n        return [q._x, q._y, q._z, q._w];\r\n    }\r\n\r\n    private _constraintMotorTypeToNative(motorType: PhysicsConstraintMotorType): any {\r\n        switch (motorType) {\r\n            case PhysicsConstraintMotorType.POSITION:\r\n                return this._hknp.ConstraintMotorType.POSITION;\r\n            case PhysicsConstraintMotorType.VELOCITY:\r\n                return this._hknp.ConstraintMotorType.VELOCITY;\r\n        }\r\n        return this._hknp.ConstraintMotorType.NONE;\r\n    }\r\n\r\n    private _nativeToMotorType(motorType: any): PhysicsConstraintMotorType {\r\n        switch (motorType) {\r\n            case this._hknp.ConstraintMotorType.POSITION:\r\n                return PhysicsConstraintMotorType.POSITION;\r\n            case this._hknp.ConstraintMotorType.VELOCITY:\r\n                return PhysicsConstraintMotorType.VELOCITY;\r\n        }\r\n        return PhysicsConstraintMotorType.NONE;\r\n    }\r\n\r\n    private _materialCombineToNative(mat: PhysicsMaterialCombineMode): any {\r\n        switch (mat) {\r\n            case PhysicsMaterialCombineMode.GEOMETRIC_MEAN:\r\n                return this._hknp.MaterialCombine.GEOMETRIC_MEAN;\r\n            case PhysicsMaterialCombineMode.MINIMUM:\r\n                return this._hknp.MaterialCombine.MINIMUM;\r\n            case PhysicsMaterialCombineMode.MAXIMUM:\r\n                return this._hknp.MaterialCombine.MAXIMUM;\r\n            case PhysicsMaterialCombineMode.ARITHMETIC_MEAN:\r\n                return this._hknp.MaterialCombine.ARITHMETIC_MEAN;\r\n            case PhysicsMaterialCombineMode.MULTIPLY:\r\n                return this._hknp.MaterialCombine.MULTIPLY;\r\n        }\r\n    }\r\n\r\n    private _constraintAxisToNative(axId: PhysicsConstraintAxis): any {\r\n        switch (axId) {\r\n            case PhysicsConstraintAxis.LINEAR_X:\r\n                return this._hknp.ConstraintAxis.LINEAR_X;\r\n            case PhysicsConstraintAxis.LINEAR_Y:\r\n                return this._hknp.ConstraintAxis.LINEAR_Y;\r\n            case PhysicsConstraintAxis.LINEAR_Z:\r\n                return this._hknp.ConstraintAxis.LINEAR_Z;\r\n            case PhysicsConstraintAxis.ANGULAR_X:\r\n                return this._hknp.ConstraintAxis.ANGULAR_X;\r\n            case PhysicsConstraintAxis.ANGULAR_Y:\r\n                return this._hknp.ConstraintAxis.ANGULAR_Y;\r\n            case PhysicsConstraintAxis.ANGULAR_Z:\r\n                return this._hknp.ConstraintAxis.ANGULAR_Z;\r\n            case PhysicsConstraintAxis.LINEAR_DISTANCE:\r\n                return this._hknp.ConstraintAxis.LINEAR_DISTANCE;\r\n        }\r\n    }\r\n\r\n    private _nativeToLimitMode(mode: number): PhysicsConstraintAxisLimitMode {\r\n        switch (mode) {\r\n            case this._hknp.ConstraintAxisLimitMode.FREE:\r\n                return PhysicsConstraintAxisLimitMode.FREE;\r\n            case this._hknp.ConstraintAxisLimitMode.LIMITED:\r\n                return PhysicsConstraintAxisLimitMode.LIMITED;\r\n            case this._hknp.ConstraintAxisLimitMode.LOCKED:\r\n                return PhysicsConstraintAxisLimitMode.LOCKED;\r\n        }\r\n\r\n        return PhysicsConstraintAxisLimitMode.FREE;\r\n    }\r\n\r\n    private _limitModeToNative(mode: PhysicsConstraintAxisLimitMode): any {\r\n        switch (mode) {\r\n            case PhysicsConstraintAxisLimitMode.FREE:\r\n                return this._hknp.ConstraintAxisLimitMode.FREE;\r\n            case PhysicsConstraintAxisLimitMode.LIMITED:\r\n                return this._hknp.ConstraintAxisLimitMode.LIMITED;\r\n            case PhysicsConstraintAxisLimitMode.LOCKED:\r\n                return this._hknp.ConstraintAxisLimitMode.LOCKED;\r\n        }\r\n    }\r\n\r\n    private _nativeCollisionValueToCollisionType(type: number): PhysicsEventType {\r\n        switch (type) {\r\n            case this._hknp.EventType.COLLISION_STARTED.value:\r\n                return PhysicsEventType.COLLISION_STARTED;\r\n            case this._hknp.EventType.COLLISION_FINISHED.value:\r\n                return PhysicsEventType.COLLISION_FINISHED;\r\n            case this._hknp.EventType.COLLISION_CONTINUED.value:\r\n                return PhysicsEventType.COLLISION_CONTINUED;\r\n        }\r\n\r\n        return PhysicsEventType.COLLISION_STARTED;\r\n    }\r\n\r\n    private _nativeTriggerCollisionValueToCollisionType(type: number): PhysicsEventType {\r\n        switch (type) {\r\n            case 8:\r\n                return PhysicsEventType.TRIGGER_ENTERED;\r\n            case 16:\r\n                return PhysicsEventType.TRIGGER_EXITED;\r\n        }\r\n        return PhysicsEventType.TRIGGER_ENTERED;\r\n    }\r\n}\r\n","import type { IBasePhysicsCollisionEvent, IPhysicsCollisionEvent, IPhysicsEnginePluginV2, PhysicsMassProperties, PhysicsMotionType } from \"./IPhysicsEnginePlugin\";\r\nimport type { PhysicsShape } from \"./physicsShape\";\r\nimport { Vector3, Quaternion, TmpVectors } from \"../../Maths/math.vector\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { PhysicsEngine } from \"./physicsEngine\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { PhysicsConstraint } from \"./physicsConstraint\";\r\nimport type { Bone } from \"core/Bones/bone\";\r\nimport { Space } from \"core/Maths/math.axis\";\r\nimport type { Observable, Observer } from \"../../Misc/observable\";\r\nimport type { Node } from \"../../node\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport type { TransformNode } from \"../../Meshes/transformNode\";\r\n\r\n/**\r\n * PhysicsBody is useful for creating a physics body that can be used in a physics engine. It allows\r\n * the user to set the mass and velocity of the body, which can then be used to calculate the\r\n * motion of the body in the physics engine.\r\n */\r\nexport class PhysicsBody {\r\n    /**\r\n     * V2 Physics plugin private data for single Transform\r\n     */\r\n    public _pluginData: any = undefined;\r\n    /**\r\n     * V2 Physics plugin private data for instances\r\n     */\r\n    public _pluginDataInstances: Array<any> = [];\r\n    /**\r\n     * The V2 plugin used to create and manage this Physics Body\r\n     */\r\n    private _physicsPlugin: IPhysicsEnginePluginV2;\r\n    /**\r\n     * The engine used to create and manage this Physics Body\r\n     */\r\n    private _physicsEngine: PhysicsEngine;\r\n    /**\r\n     * If the collision callback is enabled\r\n     */\r\n    private _collisionCBEnabled: boolean = false;\r\n    /**\r\n     * If the collision ended callback is enabled\r\n     */\r\n    private _collisionEndedCBEnabled: boolean = false;\r\n    /**\r\n     * The transform node associated with this Physics Body\r\n     */\r\n    transformNode: TransformNode;\r\n    /**\r\n     * Disable pre-step that consists in updating Physics Body from Transform Node Translation/Orientation.\r\n     * True by default for maximum performance.\r\n     */\r\n    disablePreStep: boolean = true;\r\n\r\n    /**\r\n     * Physics engine will try to make this body sleeping and not active\r\n     */\r\n    public startAsleep: boolean;\r\n\r\n    private _nodeDisposeObserver: Nullable<Observer<Node>>;\r\n\r\n    /**\r\n     * Constructs a new physics body for the given node.\r\n     * @param transformNode - The Transform Node to construct the physics body for. For better performance, it is advised that this node does not have a parent.\r\n     * @param motionType - The motion type of the physics body. The options are:\r\n     *  - PhysicsMotionType.STATIC - Static bodies are not moving and unaffected by forces or collisions. They are good for level boundaries or terrain.\r\n     *  - PhysicsMotionType.DYNAMIC - Dynamic bodies are fully simulated. They can move and collide with other objects.\r\n     *  - PhysicsMotionType.ANIMATED - They behave like dynamic bodies, but they won't be affected by other bodies, but still push other bodies out of the way.\r\n     * @param startsAsleep - Whether the physics body should start in a sleeping state (not a guarantee). Defaults to false.\r\n     * @param scene - The scene containing the physics engine.\r\n     *\r\n     * This code is useful for creating a physics body for a given Transform Node in a scene.\r\n     * It checks the version of the physics engine and the physics plugin, and initializes the body accordingly.\r\n     * It also sets the node's rotation quaternion if it is not already set. Finally, it adds the body to the physics engine.\r\n     */\r\n    constructor(transformNode: TransformNode, motionType: PhysicsMotionType, startsAsleep: boolean, scene: Scene) {\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        const physicsEngine = scene.getPhysicsEngine() as PhysicsEngine;\r\n        if (!physicsEngine) {\r\n            throw new Error(\"No Physics Engine available.\");\r\n        }\r\n        this._physicsEngine = physicsEngine;\r\n        if (physicsEngine.getPluginVersion() != 2) {\r\n            throw new Error(\"Plugin version is incorrect. Expected version 2.\");\r\n        }\r\n        const physicsPlugin = physicsEngine.getPhysicsPlugin();\r\n        if (!physicsPlugin) {\r\n            throw new Error(\"No Physics Plugin available.\");\r\n        }\r\n\r\n        this._physicsPlugin = physicsPlugin as IPhysicsEnginePluginV2;\r\n        if (!transformNode.rotationQuaternion) {\r\n            transformNode.rotationQuaternion = Quaternion.FromEulerAngles(transformNode.rotation.x, transformNode.rotation.y, transformNode.rotation.z);\r\n        }\r\n\r\n        this.startAsleep = startsAsleep;\r\n\r\n        // instances?\r\n        const m = transformNode as Mesh;\r\n        if (m.hasThinInstances) {\r\n            this._physicsPlugin.initBodyInstances(this, motionType, m);\r\n        } else {\r\n            // single instance\r\n            if (transformNode.parent) {\r\n                // Force computation of world matrix so that the parent transforms are correctly reflected in absolutePosition/absoluteRotationQuaternion.\r\n                transformNode.computeWorldMatrix(true);\r\n            }\r\n            this._physicsPlugin.initBody(this, motionType, transformNode.absolutePosition, transformNode.absoluteRotationQuaternion);\r\n        }\r\n        this.transformNode = transformNode;\r\n        transformNode.physicsBody = this;\r\n        physicsEngine.addBody(this);\r\n\r\n        this._nodeDisposeObserver = transformNode.onDisposeObservable.add(() => {\r\n            this.dispose();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"PhysicsBody\".\r\n     * @returns \"PhysicsBody\"\r\n     */\r\n    public getClassName() {\r\n        return \"PhysicsBody\";\r\n    }\r\n\r\n    /**\r\n     * Clone the PhysicsBody to a new body and assign it to the transformNode parameter\r\n     * @param transformNode transformNode that will be used for the cloned PhysicsBody\r\n     * @returns the newly cloned PhysicsBody\r\n     */\r\n    public clone(transformNode: TransformNode): PhysicsBody {\r\n        const clonedBody = new PhysicsBody(transformNode, this.getMotionType(), this.startAsleep, this.transformNode.getScene());\r\n        clonedBody.shape = this.shape;\r\n        clonedBody.setMassProperties(this.getMassProperties());\r\n        clonedBody.setLinearDamping(this.getLinearDamping());\r\n        clonedBody.setAngularDamping(this.getAngularDamping());\r\n        return clonedBody;\r\n    }\r\n\r\n    /**\r\n     * If a physics body is connected to an instanced node, update the number physic instances to match the number of node instances.\r\n     */\r\n    public updateBodyInstances() {\r\n        const m = this.transformNode as Mesh;\r\n        if (m.hasThinInstances) {\r\n            this._physicsPlugin.updateBodyInstances(this, m);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This returns the number of internal instances of the physics body\r\n     */\r\n    public get numInstances(): number {\r\n        return this._pluginDataInstances.length;\r\n    }\r\n\r\n    /**\r\n     * Sets the shape of the physics body.\r\n     * @param shape - The shape of the physics body.\r\n     *\r\n     * This method is useful for setting the shape of the physics body, which is necessary for the physics engine to accurately simulate the body's behavior.\r\n     * The shape is used to calculate the body's mass, inertia, and other properties.\r\n     */\r\n    public set shape(shape: Nullable<PhysicsShape>) {\r\n        this._physicsPlugin.setShape(this, shape);\r\n    }\r\n\r\n    /**\r\n     * Retrieves the physics shape associated with this object.\r\n     *\r\n     * @returns The physics shape associated with this object, or `undefined` if no\r\n     * shape is associated.\r\n     *\r\n     * This method is useful for retrieving the physics shape associated with this object,\r\n     * which can be used to apply physical forces to the object or to detect collisions.\r\n     */\r\n    public get shape(): Nullable<PhysicsShape> {\r\n        return this._physicsPlugin.getShape(this);\r\n    }\r\n\r\n    /**\r\n     * Sets the event mask for the physics engine.\r\n     *\r\n     * @param eventMask - A bitmask that determines which events will be sent to the physics engine.\r\n     *\r\n     * This method is useful for setting the event mask for the physics engine, which determines which events\r\n     * will be sent to the physics engine. This allows the user to control which events the physics engine will respond to.\r\n     */\r\n    public setEventMask(eventMask: number, instanceIndex?: number) {\r\n        this._physicsPlugin.setEventMask(this, eventMask, instanceIndex);\r\n    }\r\n\r\n    /**\r\n     * Gets the event mask of the physics engine.\r\n     *\r\n     * @returns The event mask of the physics engine.\r\n     *\r\n     * This method is useful for getting the event mask of the physics engine,\r\n     * which is used to determine which events the engine will respond to.\r\n     * This is important for ensuring that the engine is responding to the correct events and not\r\n     * wasting resources on unnecessary events.\r\n     */\r\n    public getEventMask(instanceIndex?: number): number {\r\n        return this._physicsPlugin.getEventMask(this, instanceIndex);\r\n    }\r\n\r\n    /**\r\n     * Sets the motion type of the physics body. Can be STATIC, DYNAMIC, or ANIMATED.\r\n     */\r\n    public setMotionType(motionType: PhysicsMotionType, instanceIndex?: number) {\r\n        this._physicsPlugin.setMotionType(this, motionType, instanceIndex);\r\n    }\r\n\r\n    /**\r\n     * Gets the motion type of the physics body. Can be STATIC, DYNAMIC, or ANIMATED.\r\n     */\r\n    public getMotionType(instanceIndex?: number): PhysicsMotionType {\r\n        return this._physicsPlugin.getMotionType(this, instanceIndex);\r\n    }\r\n\r\n    /**\r\n     * Computes the mass properties of the physics object, based on the set of physics shapes this body uses.\r\n     * This method is useful for computing the initial mass properties of a physics object, such as its mass,\r\n     * inertia, and center of mass; these values are important for accurately simulating the physics of the\r\n     * object in the physics engine, and computing values based on the shape will provide you with reasonable\r\n     * intial values, which you can then customize.\r\n     */\r\n    public computeMassProperties(instanceIndex?: number): PhysicsMassProperties {\r\n        return this._physicsPlugin.computeMassProperties(this, instanceIndex);\r\n    }\r\n\r\n    /**\r\n     * Sets the mass properties of the physics object.\r\n     *\r\n     * @param massProps - The mass properties to set.\r\n     * @param instanceIndex - The index of the instance to set the mass properties for. If not defined, the mass properties will be set for all instances.\r\n     *\r\n     * This method is useful for setting the mass properties of a physics object, such as its mass,\r\n     * inertia, and center of mass. This is important for accurately simulating the physics of the object in the physics engine.\r\n     */\r\n    public setMassProperties(massProps: PhysicsMassProperties, instanceIndex?: number): void {\r\n        this._physicsPlugin.setMassProperties(this, massProps, instanceIndex);\r\n    }\r\n\r\n    /**\r\n     * Retrieves the mass properties of the object.\r\n     *\r\n     * @returns The mass properties of the object.\r\n     *\r\n     * This method is useful for physics simulations, as it allows the user to\r\n     * retrieve the mass properties of the object, such as its mass, center of mass,\r\n     * and moment of inertia. This information is necessary for accurate physics\r\n     * simulations.\r\n     */\r\n    public getMassProperties(instanceIndex?: number): PhysicsMassProperties {\r\n        return this._physicsPlugin.getMassProperties(this, instanceIndex);\r\n    }\r\n\r\n    /**\r\n     * Sets the linear damping of the physics body.\r\n     *\r\n     * @param damping - The linear damping value.\r\n     *\r\n     * This method is useful for controlling the linear damping of the physics body,\r\n     * which is the rate at which the body's velocity decreases over time. This is useful for simulating\r\n     * the effects of air resistance or other forms of friction.\r\n     */\r\n    public setLinearDamping(damping: number, instanceIndex?: number) {\r\n        this._physicsPlugin.setLinearDamping(this, damping, instanceIndex);\r\n    }\r\n\r\n    /**\r\n     * Gets the linear damping of the physics body.\r\n     * @returns The linear damping of the physics body.\r\n     *\r\n     * This method is useful for retrieving the linear damping of the physics body, which is the amount of\r\n     * resistance the body has to linear motion. This is useful for simulating realistic physics behavior\r\n     * in a game.\r\n     */\r\n    public getLinearDamping(instanceIndex?: number): number {\r\n        return this._physicsPlugin.getLinearDamping(this, instanceIndex);\r\n    }\r\n\r\n    /**\r\n     * Sets the angular damping of the physics body.\r\n     * @param damping The angular damping of the body.\r\n     *\r\n     * This method is useful for controlling the angular velocity of a physics body.\r\n     * By setting the damping, the body's angular velocity will be reduced over time, simulating the effect of friction.\r\n     * This can be used to create realistic physical behavior in a physics engine.\r\n     */\r\n    public setAngularDamping(damping: number, instanceIndex?: number) {\r\n        this._physicsPlugin.setAngularDamping(this, damping, instanceIndex);\r\n    }\r\n\r\n    /**\r\n     * Gets the angular damping of the physics body.\r\n     *\r\n     * @returns The angular damping of the physics body.\r\n     *\r\n     * This method is useful for getting the angular damping of the physics body,\r\n     * which is the rate of reduction of the angular velocity over time.\r\n     * This is important for simulating realistic physics behavior in a game.\r\n     */\r\n    public getAngularDamping(instanceIndex?: number): number {\r\n        return this._physicsPlugin.getAngularDamping(this, instanceIndex);\r\n    }\r\n\r\n    /**\r\n     * Sets the linear velocity of the physics object.\r\n     * @param linVel - The linear velocity to set.\r\n     *\r\n     * This method is useful for setting the linear velocity of a physics object,\r\n     * which is necessary for simulating realistic physics in a game engine.\r\n     * By setting the linear velocity, the physics object will move in the direction and speed specified by the vector.\r\n     * This allows for realistic physics simulations, such as simulating the motion of a ball rolling down a hill.\r\n     */\r\n    public setLinearVelocity(linVel: Vector3, instanceIndex?: number): void {\r\n        this._physicsPlugin.setLinearVelocity(this, linVel, instanceIndex);\r\n    }\r\n\r\n    /**\r\n     * Gets the linear velocity of the physics body and stores it in the given vector3.\r\n     * @param linVel - The vector3 to store the linear velocity in.\r\n     *\r\n     * This method is useful for getting the linear velocity of a physics body in a physics engine.\r\n     * This can be used to determine the speed and direction of the body, which can be used to calculate the motion of the body.\r\n     */\r\n    public getLinearVelocityToRef(linVel: Vector3, instanceIndex?: number): void {\r\n        return this._physicsPlugin.getLinearVelocityToRef(this, linVel, instanceIndex);\r\n    }\r\n\r\n    /**\r\n     * Gets the linear velocity of the physics body as a new vector3.\r\n     * @returns The linear velocity of the physics body.\r\n     *\r\n     * This method is useful for getting the linear velocity of a physics body in a physics engine.\r\n     * This can be used to determine the speed and direction of the body, which can be used to calculate the motion of the body.\r\n     */\r\n    public getLinearVelocity(instanceIndex?: number): Vector3 {\r\n        const ref = new Vector3();\r\n        this.getLinearVelocityToRef(ref, instanceIndex);\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Sets the angular velocity of the physics object.\r\n     * @param angVel - The angular velocity to set.\r\n     *\r\n     * This method is useful for setting the angular velocity of a physics object, which is necessary for\r\n     * simulating realistic physics behavior. The angular velocity is used to determine the rate of rotation of the object,\r\n     * which is important for simulating realistic motion.\r\n     */\r\n    public setAngularVelocity(angVel: Vector3, instanceIndex?: number): void {\r\n        this._physicsPlugin.setAngularVelocity(this, angVel, instanceIndex);\r\n    }\r\n\r\n    /**\r\n     * Gets the angular velocity of the physics body and stores it in the given vector3.\r\n     * @param angVel - The vector3 to store the angular velocity in.\r\n     *\r\n     * This method is useful for getting the angular velocity of a physics body, which can be used to determine the body's\r\n     * rotational speed. This information can be used to create realistic physics simulations.\r\n     */\r\n    public getAngularVelocityToRef(angVel: Vector3, instanceIndex?: number): void {\r\n        return this._physicsPlugin.getAngularVelocityToRef(this, angVel, instanceIndex);\r\n    }\r\n\r\n    /**\r\n     * Gets the angular velocity of the physics body as a new vector3.\r\n     * @returns The angular velocity of the physics body.\r\n     *\r\n     * This method is useful for getting the angular velocity of a physics body, which can be used to determine the body's\r\n     * rotational speed. This information can be used to create realistic physics simulations.\r\n     */\r\n    public getAngularVelocity(instanceIndex?: number): Vector3 {\r\n        const ref = new Vector3();\r\n        this.getAngularVelocityToRef(ref, instanceIndex);\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Applies an impulse to the physics object.\r\n     *\r\n     * @param impulse The impulse vector.\r\n     * @param location The location of the impulse.\r\n     * @param instanceIndex For a instanced body, the instance to where the impulse should be applied. If not specified, the impulse is applied to all instances.\r\n     *\r\n     * This method is useful for applying an impulse to a physics object, which can be used to simulate physical forces such as gravity,\r\n     * collisions, and explosions. This can be used to create realistic physics simulations in a game or other application.\r\n     */\r\n    public applyImpulse(impulse: Vector3, location: Vector3, instanceIndex?: number): void {\r\n        this._physicsPlugin.applyImpulse(this, impulse, location, instanceIndex);\r\n    }\r\n\r\n    /**\r\n     * Applies a force to the physics object.\r\n     *\r\n     * @param force The force vector.\r\n     * @param location The location of the force.\r\n     * @param instanceIndex For a instanced body, the instance to where the force should be applied. If not specified, the force is applied to all instances.\r\n     *\r\n     * This method is useful for applying a force to a physics object, which can be used to simulate physical forces such as gravity,\r\n     * collisions, and explosions. This can be used to create realistic physics simulations in a game or other application.\r\n     */\r\n    public applyForce(force: Vector3, location: Vector3, instanceIndex?: number): void {\r\n        this._physicsPlugin.applyForce(this, force, location, instanceIndex);\r\n    }\r\n\r\n    /**\r\n     * Retrieves the geometry of the body from the physics plugin.\r\n     *\r\n     * @returns The geometry of the body.\r\n     *\r\n     * This method is useful for retrieving the geometry of the body from the physics plugin, which can be used for various physics calculations.\r\n     */\r\n    public getGeometry(): {} {\r\n        return this._physicsPlugin.getBodyGeometry(this);\r\n    }\r\n\r\n    /**\r\n     * Returns an observable that will be notified for when a collision starts or continues for this PhysicsBody\r\n     * @returns Observable\r\n     */\r\n    public getCollisionObservable(): Observable<IPhysicsCollisionEvent> {\r\n        return this._physicsPlugin.getCollisionObservable(this);\r\n    }\r\n\r\n    /**\r\n     * Returns an observable that will be notified when the body has finished colliding with another body\r\n     * @returns\r\n     */\r\n    public getCollisionEndedObservable(): Observable<IBasePhysicsCollisionEvent> {\r\n        return this._physicsPlugin.getCollisionEndedObservable(this);\r\n    }\r\n\r\n    /**\r\n     * Enable or disable collision callback for this PhysicsBody.\r\n     * @param enabled true if PhysicsBody's collision will rise a collision event and notifies the observable\r\n     */\r\n    public setCollisionCallbackEnabled(enabled: boolean): void {\r\n        this._collisionCBEnabled = enabled;\r\n        this._physicsPlugin.setCollisionCallbackEnabled(this, enabled);\r\n    }\r\n\r\n    public setCollisionEndedCallbackEnabled(enabled: boolean): void {\r\n        this._collisionEndedCBEnabled = enabled;\r\n        this._physicsPlugin.setCollisionEndedCallbackEnabled(this, enabled);\r\n    }\r\n\r\n    /*\r\n     * Get the center of the object in world space.\r\n     * @param instanceIndex - If this body is instanced, the index of the instance to get the center for.\r\n     * @returns geometric center of the associated mesh\r\n     */\r\n    public getObjectCenterWorld(instanceIndex?: number): Vector3 {\r\n        const ref = new Vector3();\r\n        return this.getObjectCenterWorldToRef(ref, instanceIndex);\r\n    }\r\n\r\n    /*\r\n     * Get the center of the object in world space.\r\n     * @param ref - The vector3 to store the result in.\r\n     * @param instanceIndex - If this body is instanced, the index of the instance to get the center for.\r\n     * @returns geometric center of the associated mesh\r\n     */\r\n    public getObjectCenterWorldToRef(ref: Vector3, instanceIndex?: number): Vector3 {\r\n        if (this._pluginDataInstances?.length > 0) {\r\n            const index = instanceIndex || 0;\r\n            const matrixData = (this.transformNode as Mesh)._thinInstanceDataStorage.matrixData;\r\n            if (matrixData) {\r\n                ref.set(matrixData[index * 16 + 12], matrixData[index * 16 + 13], matrixData[index * 16 + 14]);\r\n            }\r\n        } else {\r\n            ref.copyFrom(this.transformNode.position);\r\n        }\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Adds a constraint to the physics engine.\r\n     *\r\n     * @param childBody - The body to which the constraint will be applied.\r\n     * @param constraint - The constraint to be applied.\r\n     * @param instanceIndex - If this body is instanced, the index of the instance to which the constraint will be applied. If not specified, no constraint will be applied.\r\n     * @param childInstanceIndex - If the child body is instanced, the index of the instance to which the constraint will be applied. If not specified, no constraint will be applied.\r\n     *\r\n     */\r\n    public addConstraint(childBody: PhysicsBody, constraint: PhysicsConstraint, instanceIndex?: number, childInstanceIndex?: number): void {\r\n        this._physicsPlugin.addConstraint(this, childBody, constraint, instanceIndex, childInstanceIndex);\r\n    }\r\n\r\n    /**\r\n     * Sync with a bone\r\n     * @param bone The bone that the impostor will be synced to.\r\n     * @param boneMesh The mesh that the bone is influencing.\r\n     * @param jointPivot The pivot of the joint / bone in local space.\r\n     * @param distToJoint Optional distance from the impostor to the joint.\r\n     * @param adjustRotation Optional quaternion for adjusting the local rotation of the bone.\r\n     * @param boneAxis Optional vector3 axis the bone is aligned with\r\n     */\r\n    public syncWithBone(bone: Bone, boneMesh: AbstractMesh, jointPivot: Vector3, distToJoint?: number, adjustRotation?: Quaternion, boneAxis?: Vector3) {\r\n        const mesh = this.transformNode;\r\n\r\n        if (mesh.rotationQuaternion) {\r\n            if (adjustRotation) {\r\n                const tempQuat = TmpVectors.Quaternion[0];\r\n                bone.getRotationQuaternionToRef(Space.WORLD, boneMesh, tempQuat);\r\n                tempQuat.multiplyToRef(adjustRotation, mesh.rotationQuaternion);\r\n            } else {\r\n                bone.getRotationQuaternionToRef(Space.WORLD, boneMesh, mesh.rotationQuaternion);\r\n            }\r\n        }\r\n\r\n        const pos = TmpVectors.Vector3[0];\r\n        const boneDir = TmpVectors.Vector3[1];\r\n\r\n        if (!boneAxis) {\r\n            boneAxis = TmpVectors.Vector3[2];\r\n            boneAxis.x = 0;\r\n            boneAxis.y = 1;\r\n            boneAxis.z = 0;\r\n        }\r\n\r\n        bone.getDirectionToRef(boneAxis, boneMesh, boneDir);\r\n        bone.getAbsolutePositionToRef(boneMesh, pos);\r\n\r\n        if ((distToJoint === undefined || distToJoint === null) && jointPivot) {\r\n            distToJoint = jointPivot.length();\r\n        }\r\n\r\n        if (distToJoint !== undefined && distToJoint !== null) {\r\n            pos.x += boneDir.x * distToJoint;\r\n            pos.y += boneDir.y * distToJoint;\r\n            pos.z += boneDir.z * distToJoint;\r\n        }\r\n\r\n        mesh.setAbsolutePosition(pos);\r\n    }\r\n\r\n    /**\r\n     * Executes a callback on the body or all of the instances of a body\r\n     * @param callback the callback to execute\r\n     */\r\n    public iterateOverAllInstances(callback: (body: PhysicsBody, instanceIndex?: number) => void) {\r\n        if (this._pluginDataInstances?.length > 0) {\r\n            for (let i = 0; i < this._pluginDataInstances.length; i++) {\r\n                callback(this, i);\r\n            }\r\n        } else {\r\n            callback(this, undefined);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the gravity factor of the physics body\r\n     * @param factor the gravity factor to set\r\n     * @param instanceIndex the instance of the body to set, if undefined all instances will be set\r\n     */\r\n    public setGravityFactor(factor: number, instanceIndex?: number) {\r\n        this._physicsPlugin.setGravityFactor(this, factor, instanceIndex);\r\n    }\r\n\r\n    /**\r\n     * Gets the gravity factor of the physics body\r\n     * @param instanceIndex the instance of the body to get, if undefined the value of first instance will be returned\r\n     * @returns the gravity factor\r\n     */\r\n    public getGravityFactor(instanceIndex?: number): number {\r\n        return this._physicsPlugin.getGravityFactor(this, instanceIndex);\r\n    }\r\n\r\n    /**\r\n     * Set the target transformation (position and rotation) of the body, such that the body will set its velocity to reach that target\r\n     * @param position The target position\r\n     * @param rotation The target rotation\r\n     * @param instanceIndex The index of the instance in an instanced body\r\n     */\r\n    public setTargetTransform(position: Vector3, rotation: Quaternion, instanceIndex?: number) {\r\n        this._physicsPlugin.setTargetTransform(this, position, rotation, instanceIndex);\r\n    }\r\n\r\n    /**\r\n     * Disposes the body from the physics engine.\r\n     *\r\n     * This method is useful for cleaning up the physics engine when a body is no longer needed. Disposing the body will free up resources and prevent memory leaks.\r\n     */\r\n    public dispose() {\r\n        // Disable collisions CB so it doesn't fire when the body is disposed\r\n        if (this._collisionCBEnabled) {\r\n            this.setCollisionCallbackEnabled(false);\r\n        }\r\n        if (this._collisionEndedCBEnabled) {\r\n            this.setCollisionEndedCallbackEnabled(false);\r\n        }\r\n        if (this._nodeDisposeObserver) {\r\n            this.transformNode.onDisposeObservable.remove(this._nodeDisposeObserver);\r\n            this._nodeDisposeObserver = null;\r\n        }\r\n        this._physicsEngine.removeBody(this);\r\n        this._physicsPlugin.removeBody(this);\r\n        this._physicsPlugin.disposeBody(this);\r\n        this.transformNode.physicsBody = null;\r\n        this._pluginData = null;\r\n        this._pluginDataInstances.length = 0;\r\n    }\r\n}\r\n","/**\r\n * Determines how values from the PhysicsMaterial are combined when\r\n * two objects are in contact. When each PhysicsMaterial specifies\r\n * a different combine mode for some property, the combine mode which\r\n * is used will be selected based on their order in this enum - i.e.\r\n * a value later in this list will be preferentially used.\r\n */\r\nexport enum PhysicsMaterialCombineMode {\r\n    /**\r\n     * The final value will be the geometric mean of the two values:\r\n     * sqrt( valueA *  valueB )\r\n     */\r\n    GEOMETRIC_MEAN,\r\n    /**\r\n     * The final value will be the smaller of the two:\r\n     * min( valueA , valueB )\r\n     */\r\n    MINIMUM,\r\n    /* The final value will be the larger of the two:\r\n     * max( valueA , valueB )\r\n     */\r\n    MAXIMUM,\r\n    /* The final value will be the arithmetic mean of the two values:\r\n     * (valueA + valueB) / 2\r\n     */\r\n    ARITHMETIC_MEAN,\r\n    /**\r\n     * The final value will be the product of the two values:\r\n     * valueA * valueB\r\n     */\r\n    MULTIPLY,\r\n}\r\n\r\n/**\r\n * Physics material class\r\n * Helps setting friction and restitution that are used to compute responding forces in collision response\r\n */\r\nexport interface PhysicsMaterial {\r\n    /**\r\n     * Sets the friction used by this material\r\n     *\r\n     * The friction determines how much an object will slow down when it is in contact with another object.\r\n     * This is important for simulating realistic physics, such as when an object slides across a surface.\r\n     *\r\n     * If not provided, a default value of 0.5 will be used.\r\n     */\r\n    friction?: number;\r\n\r\n    /**\r\n     * Sets the static friction used by this material.\r\n     *\r\n     * Static friction is the friction that must be overcome before a pair of objects can start sliding\r\n     * relative to each other; for physically-realistic behaviour, it should be at least as high as the\r\n     * normal friction value. If not provided, the friction value will be used\r\n     */\r\n    staticFriction?: number;\r\n\r\n    /**\r\n     * Sets the restitution of the physics material.\r\n     *\r\n     * The restitution is a factor which describes, the amount of energy that is retained after a collision,\r\n     * which should be a number between 0 and 1..\r\n     *\r\n     * A restitution of 0 means that no energy is retained and the objects will not bounce off each other,\r\n     * while a restitution of 1 means that all energy is retained and the objects will bounce.\r\n     *\r\n     * Note, though, due that due to the simulation implementation, an object with a restitution of 1 may\r\n     * still lose energy over time.\r\n     *\r\n     * If not provided, a default value of 0 will be used.\r\n     */\r\n    restitution?: number;\r\n\r\n    /**\r\n     * Describes how two different friction values should be combined. See PhysicsMaterialCombineMode for\r\n     * more details.\r\n     *\r\n     * If not provided, will use PhysicsMaterialCombineMode.MINIMUM\r\n     */\r\n    frictionCombine?: PhysicsMaterialCombineMode;\r\n\r\n    /**\r\n     * Describes how two different restitution values should be combined. See PhysicsMaterialCombineMode for\r\n     * more details.\r\n     *\r\n     * If not provided, will use PhysicsMaterialCombineMode.MAXIMUM\r\n     */\r\n    restitutionCombine?: PhysicsMaterialCombineMode;\r\n}\r\n","import type { TransformNode } from \"../../Meshes/transformNode\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport type { BoundingBox } from \"../../Culling/boundingBox\";\r\nimport { PhysicsShapeType } from \"./IPhysicsEnginePlugin\";\r\nimport type { IPhysicsEnginePluginV2, PhysicsShapeParameters } from \"./IPhysicsEnginePlugin\";\r\nimport type { PhysicsMaterial } from \"./physicsMaterial\";\r\nimport { Matrix, Vector3, Quaternion, TmpVectors } from \"../../Maths/math.vector\";\r\n\r\nimport type { Mesh } from \"../../Meshes/mesh\";\r\nimport type { Scene } from \"../../scene\";\r\n\r\n/**\r\n * Options for creating a physics shape\r\n */\r\nexport interface PhysicShapeOptions {\r\n    /**\r\n     * The type of the shape. This can be one of the following: SPHERE, BOX, CAPSULE, CYLINDER, CONVEX_HULL, MESH, HEIGHTFIELD, CONTAINER\r\n     */\r\n    type?: PhysicsShapeType;\r\n    /**\r\n     * The parameters of the shape. Varies depending of the shape type.\r\n     */\r\n    parameters?: PhysicsShapeParameters;\r\n    /**\r\n     * Reference to an already existing physics shape in the plugin.\r\n     */\r\n    pluginData?: any;\r\n}\r\n\r\n/**\r\n * PhysicsShape class.\r\n * This class is useful for creating a physics shape that can be used in a physics engine.\r\n * A Physic Shape determine how collision are computed. It must be attached to a body.\r\n */\r\nexport class PhysicsShape {\r\n    /**\r\n     * V2 Physics plugin private data for single shape\r\n     */\r\n    public _pluginData: any = undefined;\r\n    /**\r\n     * The V2 plugin used to create and manage this Physics Body\r\n     */\r\n    private _physicsPlugin: IPhysicsEnginePluginV2;\r\n\r\n    private _type: PhysicsShapeType;\r\n\r\n    private _material: PhysicsMaterial;\r\n\r\n    private _isTrigger: boolean = false;\r\n\r\n    /**\r\n     * Constructs a new physics shape.\r\n     * @param options The options for the physics shape. These are:\r\n     *  * type: The type of the shape. This can be one of the following: SPHERE, BOX, CAPSULE, CYLINDER, CONVEX_HULL, MESH, HEIGHTFIELD, CONTAINER\r\n     *  * parameters: The parameters of the shape.\r\n     *  * pluginData: The plugin data of the shape. This is used if you already have a reference to the object on the plugin side.\r\n     * You need to specify either type or pluginData.\r\n     * @param scene The scene the shape belongs to.\r\n     *\r\n     * This code is useful for creating a new physics shape with the given type, options, and scene.\r\n     * It also checks that the physics engine and plugin version are correct.\r\n     * If not, it throws an error. This ensures that the shape is created with the correct parameters and is compatible with the physics engine.\r\n     */\r\n    constructor(options: PhysicShapeOptions, scene: Scene) {\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        const physicsEngine = scene.getPhysicsEngine();\r\n        if (!physicsEngine) {\r\n            throw new Error(\"No Physics Engine available.\");\r\n        }\r\n        if (physicsEngine.getPluginVersion() != 2) {\r\n            throw new Error(\"Plugin version is incorrect. Expected version 2.\");\r\n        }\r\n        const physicsPlugin = physicsEngine.getPhysicsPlugin();\r\n        if (!physicsPlugin) {\r\n            throw new Error(\"No Physics Plugin available.\");\r\n        }\r\n        this._physicsPlugin = physicsPlugin as IPhysicsEnginePluginV2;\r\n\r\n        if (options.pluginData !== undefined && options.pluginData !== null) {\r\n            this._pluginData = options.pluginData;\r\n            this._type = this._physicsPlugin.getShapeType(this);\r\n        } else if (options.type !== undefined && options.type !== null) {\r\n            this._type = options.type;\r\n            const parameters = options.parameters ?? {};\r\n            this._physicsPlugin.initShape(this, options.type, parameters);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"PhysicsShape\".\r\n     * @returns \"PhysicsShape\"\r\n     */\r\n    public getClassName() {\r\n        return \"PhysicsShape\";\r\n    }\r\n\r\n    /**\r\n     * Returns the type of the physics shape.\r\n     * @returns The type of the physics shape.\r\n     */\r\n    public get type(): PhysicsShapeType {\r\n        return this._type;\r\n    }\r\n\r\n    /**\r\n     * Set the membership mask of a shape. This is a bitfield of arbitrary\r\n     * \"categories\" to which the shape is a member. This is used in combination\r\n     * with the collide mask to determine if this shape should collide with\r\n     * another.\r\n     *\r\n     * @param membershipMask Bitfield of categories of this shape.\r\n     */\r\n    public set filterMembershipMask(membershipMask: number) {\r\n        this._physicsPlugin.setShapeFilterMembershipMask(this, membershipMask);\r\n    }\r\n\r\n    /**\r\n     * Get the membership mask of a shape.\r\n     * @returns Bitmask of categories which this shape is a member of.\r\n     */\r\n    public get filterMembershipMask(): number {\r\n        return this._physicsPlugin.getShapeFilterMembershipMask(this);\r\n    }\r\n\r\n    /**\r\n     * Sets the collide mask of a shape. This is a bitfield of arbitrary\r\n     * \"categories\" to which this shape collides with. Given two shapes,\r\n     * the engine will check if the collide mask and membership overlap:\r\n     * shapeA.filterMembershipMask & shapeB.filterCollideMask\r\n     *\r\n     * If this value is zero (i.e. shapeB only collides with categories\r\n     * which shapeA is _not_ a member of) then the shapes will not collide.\r\n     *\r\n     * Note, the engine will also perform the same test with shapeA and\r\n     * shapeB swapped; the shapes will not collide if either shape has\r\n     * a collideMask which prevents collision with the other shape.\r\n     *\r\n     * @param collideMask Bitmask of categories this shape should collide with\r\n     */\r\n    public set filterCollideMask(collideMask: number) {\r\n        this._physicsPlugin.setShapeFilterCollideMask(this, collideMask);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns Bitmask of categories that this shape should collide with\r\n     */\r\n    public get filterCollideMask(): number {\r\n        return this._physicsPlugin.getShapeFilterCollideMask(this);\r\n    }\r\n    /**\r\n     *\r\n     * @param material\r\n     */\r\n    public set material(material: PhysicsMaterial) {\r\n        this._physicsPlugin.setMaterial(this, material);\r\n        this._material = material;\r\n    }\r\n\r\n    /**\r\n     * Returns the material of the physics shape.\r\n     * @returns The material of the physics shape.\r\n     */\r\n    public get material(): PhysicsMaterial {\r\n        return this._material;\r\n    }\r\n\r\n    /**\r\n     * Sets the density of the physics shape.\r\n     * @param density The density of the physics shape.\r\n     */\r\n    public set density(density: number) {\r\n        this._physicsPlugin.setDensity(this, density);\r\n    }\r\n\r\n    /**\r\n     * Returns the density of the physics shape.\r\n     * @returns The density of the physics shape.\r\n     */\r\n    public get density(): number {\r\n        return this._physicsPlugin.getDensity(this);\r\n    }\r\n\r\n    /**\r\n     * Utility to add a child shape to this container,\r\n     * automatically computing the relative transform between\r\n     * the container shape and the child instance.\r\n     *\r\n     * @param parentTransform The transform node associated with this shape\r\n     * @param newChild The new PhysicsShape to add\r\n     * @param childTransform The transform node associated with the child shape\r\n     */\r\n    public addChildFromParent(parentTransform: TransformNode, newChild: PhysicsShape, childTransform: TransformNode): void {\r\n        const childToWorld = childTransform.computeWorldMatrix(true);\r\n        const parentToWorld = parentTransform.computeWorldMatrix(true);\r\n        const childToParent = TmpVectors.Matrix[0];\r\n        childToWorld.multiplyToRef(Matrix.Invert(parentToWorld), childToParent);\r\n        const translation = TmpVectors.Vector3[0];\r\n        const rotation = TmpVectors.Quaternion[0];\r\n        const scale = TmpVectors.Vector3[1];\r\n        childToParent.decompose(scale, rotation, translation);\r\n        this._physicsPlugin.addChild(this, newChild, translation, rotation, scale);\r\n    }\r\n\r\n    /**\r\n     * Adds a child shape to a container with an optional transform\r\n     * @param newChild The new PhysicsShape to add\r\n     * @param translation Optional position of the child shape relative to this shape\r\n     * @param rotation Optional rotation of the child shape relative to this shape\r\n     * @param scale Optional scale of the child shape relative to this shape\r\n     */\r\n    public addChild(newChild: PhysicsShape, translation?: Vector3, rotation?: Quaternion, scale?: Vector3): void {\r\n        this._physicsPlugin.addChild(this, newChild, translation, rotation, scale);\r\n    }\r\n\r\n    /**\r\n     * Removes a child shape from this shape.\r\n     * @param childIndex The index of the child shape to remove\r\n     */\r\n    public removeChild(childIndex: number): void {\r\n        this._physicsPlugin.removeChild(this, childIndex);\r\n    }\r\n\r\n    /**\r\n     * Returns the number of children of a physics shape.\r\n     * @returns The number of children of a physics shape.\r\n     */\r\n    public getNumChildren(): number {\r\n        return this._physicsPlugin.getNumChildren(this);\r\n    }\r\n\r\n    /**\r\n     * Returns the bounding box of the physics shape.\r\n     * @returns The bounding box of the physics shape.\r\n     */\r\n    public getBoundingBox(): BoundingBox {\r\n        return this._physicsPlugin.getBoundingBox(this);\r\n    }\r\n\r\n    public set isTrigger(isTrigger: boolean) {\r\n        if (this._isTrigger === isTrigger) {\r\n            return;\r\n        }\r\n        this._isTrigger = isTrigger;\r\n        this._physicsPlugin.setTrigger(this, isTrigger);\r\n    }\r\n\r\n    public get isTrigger(): boolean {\r\n        return this._isTrigger;\r\n    }\r\n\r\n    /**\r\n     * Dispose the shape and release its associated resources.\r\n     */\r\n    public dispose() {\r\n        this._physicsPlugin.disposeShape(this);\r\n    }\r\n}\r\n\r\n/**\r\n * Helper object to create a sphere shape\r\n */\r\nexport class PhysicsShapeSphere extends PhysicsShape {\r\n    /**\r\n     * Constructor for the Sphere Shape\r\n     * @param center local center of the sphere\r\n     * @param radius radius\r\n     * @param scene scene to attach to\r\n     */\r\n    constructor(center: Vector3, radius: number, scene: Scene) {\r\n        super({ type: PhysicsShapeType.SPHERE, parameters: { center: center, radius: radius } }, scene);\r\n    }\r\n\r\n    /**\r\n     * Derive an approximate sphere from the mesh.\r\n     * @param mesh node from which to derive the sphere shape\r\n     * @returns PhysicsShapeSphere\r\n     */\r\n    static FromMesh(mesh: AbstractMesh) {\r\n        const bounds = mesh.getBoundingInfo();\r\n        const centerLocal = bounds.boundingSphere.center;\r\n        const he = bounds.boundingBox.extendSize;\r\n        const radius = Math.max(he.x, he.y, he.z);\r\n        return new PhysicsShapeSphere(centerLocal, radius, mesh.getScene());\r\n    }\r\n}\r\n\r\n/**\r\n * Helper object to create a capsule shape\r\n */\r\nexport class PhysicsShapeCapsule extends PhysicsShape {\r\n    /**\r\n     *\r\n     * @param pointA Starting point that defines the capsule segment\r\n     * @param pointB ending point of that same segment\r\n     * @param radius radius\r\n     * @param scene scene to attach to\r\n     */\r\n    constructor(pointA: Vector3, pointB: Vector3, radius: number, scene: Scene) {\r\n        super({ type: PhysicsShapeType.CAPSULE, parameters: { pointA: pointA, pointB: pointB, radius: radius } }, scene);\r\n    }\r\n\r\n    /**\r\n     * Derive an approximate capsule from the mesh. Note, this is\r\n     * not the optimal bounding capsule.\r\n     * @param mesh Node from which to derive a cylinder shape\r\n     */\r\n    static FromMesh(mesh: AbstractMesh): PhysicsShapeCapsule {\r\n        const boundsLocal = mesh.getBoundingInfo();\r\n        const radius = boundsLocal.boundingBox.extendSize.x;\r\n        const pointFromCenter = new Vector3(0, boundsLocal.boundingBox.extendSize.y - radius, 0);\r\n        const pointA = boundsLocal.boundingBox.center.add(pointFromCenter);\r\n        const pointB = boundsLocal.boundingBox.center.subtract(pointFromCenter);\r\n        return new PhysicsShapeCapsule(pointA, pointB, radius, mesh.getScene());\r\n    }\r\n}\r\n\r\n/**\r\n * Helper object to create a cylinder shape\r\n */\r\nexport class PhysicsShapeCylinder extends PhysicsShape {\r\n    /**\r\n     *\r\n     * @param pointA Starting point that defines the cylinder segment\r\n     * @param pointB ending point of that same segment\r\n     * @param radius radius\r\n     * @param scene scene to attach to\r\n     */\r\n    constructor(pointA: Vector3, pointB: Vector3, radius: number, scene: Scene) {\r\n        super({ type: PhysicsShapeType.CYLINDER, parameters: { pointA: pointA, pointB: pointB, radius: radius } }, scene);\r\n    }\r\n\r\n    /**\r\n     * Derive an approximate cylinder from the mesh. Note, this is\r\n     * not the optimal bounding cylinder.\r\n     * @param mesh Node from which to derive a cylinder shape\r\n     */\r\n    static FromMesh(mesh: AbstractMesh): PhysicsShapeCylinder {\r\n        const boundsLocal = mesh.getBoundingInfo();\r\n        const radius = boundsLocal.boundingBox.extendSize.x;\r\n        const pointFromCenter = new Vector3(0, boundsLocal.boundingBox.extendSize.y, 0);\r\n        const pointA = boundsLocal.boundingBox.center.add(pointFromCenter);\r\n        const pointB = boundsLocal.boundingBox.center.subtract(pointFromCenter);\r\n        return new PhysicsShapeCylinder(pointA, pointB, radius, mesh.getScene());\r\n    }\r\n}\r\n\r\n/**\r\n * Helper object to create a box shape\r\n */\r\nexport class PhysicsShapeBox extends PhysicsShape {\r\n    /**\r\n     *\r\n     * @param center local center of the box\r\n     * @param rotation local orientation\r\n     * @param extents size of the box in each direction\r\n     * @param scene scene to attach to\r\n     */\r\n    constructor(center: Vector3, rotation: Quaternion, extents: Vector3, scene: Scene) {\r\n        super({ type: PhysicsShapeType.BOX, parameters: { center: center, rotation: rotation, extents: extents } }, scene);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param mesh\r\n     * @returns PhysicsShapeBox\r\n     */\r\n    static FromMesh(mesh: AbstractMesh): PhysicsShapeBox {\r\n        const bounds = mesh.getBoundingInfo();\r\n        const centerLocal = bounds.boundingBox.center;\r\n        const extents = bounds.boundingBox.extendSize.scale(2.0); //<todo.eoin extendSize seems to really be half-extents?\r\n        return new PhysicsShapeBox(centerLocal, Quaternion.Identity(), extents, mesh.getScene());\r\n    }\r\n}\r\n\r\n/**\r\n * Helper object to create a convex hull shape\r\n */\r\nexport class PhysicsShapeConvexHull extends PhysicsShape {\r\n    /**\r\n     *\r\n     * @param mesh the mesh to be used as topology infos for the convex hull\r\n     * @param scene scene to attach to\r\n     */\r\n    constructor(mesh: Mesh, scene: Scene) {\r\n        super({ type: PhysicsShapeType.CONVEX_HULL, parameters: { mesh: mesh } }, scene);\r\n    }\r\n}\r\n\r\n/**\r\n * Helper object to create a mesh shape\r\n */\r\nexport class PhysicsShapeMesh extends PhysicsShape {\r\n    /**\r\n     *\r\n     * @param mesh the mesh topology that will be used to create the shape\r\n     * @param scene scene to attach to\r\n     */\r\n    constructor(mesh: Mesh, scene: Scene) {\r\n        super({ type: PhysicsShapeType.MESH, parameters: { mesh: mesh } }, scene);\r\n    }\r\n}\r\n\r\n/**\r\n * A shape container holds a variable number of shapes. Use AddChild to append to newly created parent container.\r\n */\r\nexport class PhysicsShapeContainer extends PhysicsShape {\r\n    /**\r\n     * Constructor of the Shape container\r\n     * @param scene scene to attach to\r\n     */\r\n    constructor(scene: Scene) {\r\n        super({ type: PhysicsShapeType.CONTAINER, parameters: {} }, scene);\r\n    }\r\n}\r\n"],"names":["PhysicsJoint","constructor","type","jointData","nativeParams","physicsJoint","this","_physicsJoint","newJoint","physicsPlugin","_physicsPlugin","executeNativeFunction","func","world","DistanceJoint","HingeJoint","BallAndSocketJoint","WheelJoint","SliderJoint","PrismaticJoint","UniversalJoint","Hinge2Joint","PointToPointJoint","SpringJoint","LockJoint","super","updateDistance","maxDistance","minDistance","updateDistanceJoint","MotorEnabledJoint","setMotor","force","maxForce","setLimit","upperLimit","lowerLimit","targetSpeed","motorIndex","PhysicsConstraintAxisLimitMode","PhysicsConstraintAxis","PhysicsConstraintType","PhysicsShapeType","PhysicsConstraintMotorType","PhysicsEventType","PhysicsMotionType","MeshAccumulator","mesh","collectIndices","scene","_vertices","_indices","_isRightHanded","useRightHandedSystem","_collectIndices","addNodeMeshes","includeChildren","computeWorldMatrix","rootScaled","Matrix","ScalingToRef","absoluteScaling","x","y","z","_addMesh","sourceMesh","worldToRoot","invertToRef","worldToRootScaled","multiplyToRef","getChildMeshes","filter","m","physicsBody","forEach","childToWorld","childToRootScaled","meshToRoot","vertexData","getVerticesData","PositionKind","numVerts","length","indexOffset","v","pos","push","TransformCoordinates","meshIndices","getIndices","i","getVertices","plugin","nFloats","nBytes","bufferBegin","_malloc","ret","Float32Array","HEAPU8","buffer","offset","numObjects","freeBuffer","arr","_free","getTriangles","Int32Array","BodyPluginData","bodyId","hpBodyId","userMassProps","centerOfMass","undefined","mass","inertia","inertiaOrientation","ContactPoint","BigInt","position","normal","CollisionEvent","contactOnA","contactOnB","impulseApplied","readToRef","eventOut","intBuf","floatBuf","set","offA","offB","TriggerEvent","bodyIdA","bodyIdB","HavokPlugin","_useDeltaForWorldStep","hpInjection","HK","_hknp","name","_fixedTimeStep","_timeStep","_tmpVec3","BuildArray","Zero","_bodies","Map","_bodyCollisionObservable","_bodyCollisionEndedObservable","onCollisionObservable","onCollisionEndedObservable","onTriggerCollisionObservable","isSupported","HP_World_Create","_queryCollector","HP_QueryCollector_Create","Error","setGravity","gravity","HP_World_SetGravity","_bVecToV3","setTimeStep","timeStep","getTimeStep","executeStep","delta","physicsBodies","disablePreStep","setPhysicsBodyTransformation","transformNode","HP_World_Step","_bodyBuffer","HP_World_GetBodyBuffer","sync","_notifyCollisions","_notifyTriggers","getPluginVersion","initBody","body","motionType","orientation","_pluginData","HP_Body_Create","_internalSetMotionType","transform","_bQuatToV4","HP_Body_SetQTransform","HP_World_AddBody","startAsleep","index","removeBody","_pluginDataInstances","instance","delete","HP_World_RemoveBody","initBodyInstances","instancesCount","_thinInstanceDataStorage","matrixData","_createOrUpdateBodyInstances","startIndex","endIndex","update","rotation","Quaternion","rotationMatrix","Identity","hkbody","setRowFromFloats","FromRotationMatrixToRef","w","pluginData","_internalUpdateMassProperties","worldTransformOffset","HP_Body_GetWorldTransformOffset","updateBodyInstances","pluginInstancesCount","getMotionType","firstBodyShape","HP_Body_GetShape","HP_Body_SetShape","instancesToRemove","pop","HP_Body_Release","syncTransform","bufOffset","transformBuffer","mi","thinInstanceBufferUpdated","bodyTransform","HP_Body_GetQTransform","bodyTranslation","bodyOrientation","quat","parent","getWorldMatrix","isIdentity","normalize","finalTransform","finalTranslation","Vector3","copyFromFloats","ComposeToRef","parentInverseTransform","localTransform","decomposeToTransformNode","rotationQuaternion","copyFrom","toEulerAnglesToRef","e","console","log","message","setShape","shape","shapeHandle","_getPluginReference","instanceIndex","getShape","pluginRef","shapePluginData","getScene","getShapeType","HP_Shape_GetType","setEventMask","eventMask","_applyToBodyOrInstances","bodyPluginData","HP_Body_SetEventMask","getEventMask","HP_Body_GetEventMask","_fromMassPropertiesTuple","massPropsTuple","FromArray","newProps","_internalComputeMassProperties","massProps","asArray","HP_Body_SetMassProperties","STATIC","HP_Body_SetMotionType","MotionType","ANIMATED","KINEMATIC","DYNAMIC","setMotionType","HP_Body_GetMotionType","shapeRes","Result","RESULT_OK","shapeMass","HP_Shape_BuildMassProperties","computeMassProperties","computed","setMassProperties","getMassProperties","HP_Body_GetMassProperties","setLinearDamping","damping","HP_Body_SetLinearDamping","getLinearDamping","HP_Body_GetLinearDamping","setAngularDamping","HP_Body_SetAngularDamping","getAngularDamping","HP_Body_GetAngularDamping","setLinearVelocity","linVel","HP_Body_SetLinearVelocity","getLinearVelocityToRef","lv","HP_Body_GetLinearVelocity","_v3ToBvecRef","fnToApply","applyImpulse","impulse","location","HP_Body_ApplyImpulse","applyForce","scaleToRef","setAngularVelocity","angVel","HP_Body_SetAngularVelocity","getAngularVelocityToRef","av","HP_Body_GetAngularVelocity","node","numInstances","_getTransformInfos","setTargetTransform","HP_Body_SetTargetQTransform","setGravityFactor","factor","HP_Body_SetGravityFactor","getGravityFactor","HP_Body_GetGravityFactor","disposeBody","initShape","options","SPHERE","radius","center","HP_Shape_CreateSphere","BOX","extent","extents","HP_Shape_CreateBox","CAPSULE","pointA","pointB","HP_Shape_CreateCapsule","CONTAINER","HP_Shape_CreateContainer","CYLINDER","HP_Shape_CreateCylinder","CONVEX_HULL","MESH","includeChildMeshes","needIndices","accum","positions","numVec3s","HP_Shape_CreateConvexHull","triangles","numTriangles","HP_Shape_CreateMesh","setShapeFilterMembershipMask","membershipMask","collideWith","HP_Shape_GetFilterInfo","HP_Shape_SetFilterInfo","getShapeFilterMembershipMask","setShapeFilterCollideMask","collideMask","membership","getShapeFilterCollideMask","setMaterial","material","dynamicFriction","friction","staticFriction","restitution","frictionCombine","MINIMUM","restitutionCombine","MAXIMUM","hpMaterial","_materialCombineToNative","HP_Shape_SetMaterial","setDensity","density","HP_Shape_SetDensity","getDensity","HP_Shape_GetDensity","absolutePosition","absoluteRotationQuaternion","r","FromEulerAnglesToRef","addChild","newChild","translation","scale","transformNative","HP_Shape_AddChild","removeChild","childIndex","HP_Shape_RemoveChild","getNumChildren","HP_Shape_GetNumChildren","setTrigger","isTrigger","HP_Shape_SetTrigger","getBoundingBox","_shape","getBodyGeometry","dataInfo","geometryRes","HP_Shape_CreateDebugDisplayGeometry","indices","geometryInfo","HP_DebugGeometry_GetInfo","positionsInPlugin","indicesInPlugin","Uint32Array","slice","HP_DebugGeometry_Release","disposeShape","HP_Shape_Release","initConstraint","constraint","childBody","childInstanceIndex","Warn","jointId","HP_Constraint_Create","bodyA","bodyB","HP_Constraint_SetParentBody","HP_Constraint_SetChildBody","pivotA","axisA","perpAxisA","getNormalToRef","HP_Constraint_SetAnchorInParent","pivotB","axisB","perpAxisB","HP_Constraint_SetAnchorInChild","LOCK","HP_Constraint_SetAxisMode","ConstraintAxis","LINEAR_X","ConstraintAxisLimitMode","LOCKED","LINEAR_Y","LINEAR_Z","ANGULAR_X","ANGULAR_Y","ANGULAR_Z","DISTANCE","distance","dist3d","LINEAR_DISTANCE","LIMITED","HP_Constraint_SetAxisMinLimit","HP_Constraint_SetAxisMaxLimit","HINGE","PRISMATIC","SLIDER","BALL_AND_SOCKET","SIX_DOF","sixdofData","l","limits","axId","_constraintAxisToNative","axis","minLimit","maxLimit","stiffness","HP_Constraint_SetAxisStiffness","HP_Constraint_SetAxisDamping","collisionEnabled","collision","HP_Constraint_SetCollisionsEnabled","HP_Constraint_SetEnabled","addConstraint","setEnabled","isEnabled","getEnabled","firstId","HP_Constraint_GetEnabled","setCollisionsEnabled","getCollisionsEnabled","HP_Constraint_GetCollisionsEnabled","setAxisFriction","HP_Constraint_SetAxisFriction","getAxisFriction","HP_Constraint_GetAxisFriction","setAxisMode","limitMode","_limitModeToNative","getAxisMode","mode","HP_Constraint_GetAxisMode","_nativeToLimitMode","setAxisMinLimit","limit","getAxisMinLimit","HP_Constraint_GetAxisMinLimit","setAxisMaxLimit","getAxisMaxLimit","HP_Constraint_GetAxisMaxLimit","setAxisMotorType","motorType","HP_Constraint_SetAxisMotorType","_constraintMotorTypeToNative","getAxisMotorType","_nativeToMotorType","HP_Constraint_GetAxisMotorType","setAxisMotorTarget","target","HP_Constraint_SetAxisMotorTarget","getAxisMotorTarget","HP_Constraint_GetAxisMotorTarget","setAxisMotorMaxForce","HP_Constraint_SetAxisMotorMaxForce","getAxisMotorMaxForce","HP_Constraint_GetAxisMotorMaxForce","disposeConstraint","HP_Constraint_Release","raycast","from","to","result","query","queryMembership","queryCollideWith","reset","hkQuery","HP_World_CastRayWithCollector","HP_QueryCollector_GetNumHits","hitData","HP_QueryCollector_GetCastRayResult","hitPos","hitNormal","hitTriangle","setHitData","calculateHitDistance","hitBody","get","bodyIndex","getCollisionObservable","observable","getCollisionEndedObservable","setCollisionCallbackEnabled","enabled","collideEvents","EventType","COLLISION_STARTED","value","COLLISION_CONTINUED","COLLISION_FINISHED","setCollisionEndedCallbackEnabled","currentCollideEvents","eventAddress","HP_World_GetTriggerEvents","event","bodyInfoA","bodyInfoB","triggerCollisionInfo","collider","colliderIndex","collidedAgainst","collidedAgainstIndex","_nativeTriggerCollisionValueToCollisionType","notifyObservers","HP_World_GetNextTriggerEvent","HP_World_GetCollisionEvents","worldAddr","Number","collisionInfo","_nativeCollisionValueToCollisionType","subtractToRef","Dot","point","size","observableA","observableB","HP_World_GetNextCollisionEvent","numBodies","HP_World_GetNumBodies","dispose","HP_QueryCollector_Release","HP_World_Release","vec3","_x","_y","_z","q","_w","POSITION","ConstraintMotorType","VELOCITY","NONE","mat","GEOMETRIC_MEAN","MaterialCombine","ARITHMETIC_MEAN","MULTIPLY","FREE","TRIGGER_ENTERED","TRIGGER_EXITED","PhysicsBody","startsAsleep","_collisionCBEnabled","_collisionEndedCBEnabled","physicsEngine","getPhysicsEngine","_physicsEngine","getPhysicsPlugin","FromEulerAngles","hasThinInstances","addBody","_nodeDisposeObserver","onDisposeObservable","add","getClassName","clone","clonedBody","getLinearVelocity","ref","getAngularVelocity","getGeometry","getObjectCenterWorld","getObjectCenterWorldToRef","syncWithBone","bone","boneMesh","jointPivot","distToJoint","adjustRotation","boneAxis","tempQuat","getRotationQuaternionToRef","WORLD","boneDir","getDirectionToRef","getAbsolutePositionToRef","setAbsolutePosition","iterateOverAllInstances","callback","remove","PhysicsMaterialCombineMode","PhysicsShape","_isTrigger","_type","parameters","filterMembershipMask","filterCollideMask","_material","addChildFromParent","parentTransform","childTransform","parentToWorld","childToParent","Invert","decompose","PhysicsShapeSphere","FromMesh","bounds","getBoundingInfo","centerLocal","boundingSphere","he","boundingBox","extendSize","Math","max","PhysicsShapeCapsule","boundsLocal","pointFromCenter","subtract","PhysicsShapeCylinder","PhysicsShapeBox","PhysicsShapeConvexHull","PhysicsShapeMesh","PhysicsShapeContainer"],"sourceRoot":""}