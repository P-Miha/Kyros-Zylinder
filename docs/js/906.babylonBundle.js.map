{"version":3,"file":"js/906.babylonBundle.js","mappings":"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","sources":["webpack://babylonjs-typescript-webpack-template/./dev/core/src/Meshes/instancedMesh.ts"],"sourcesContent":["import type { Nullable, FloatArray, IndicesArray } from \"../types\";\r\nimport type { Vector3 } from \"../Maths/math.vector\";\r\nimport { Matrix, TmpVectors } from \"../Maths/math.vector\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Node } from \"../node\";\r\nimport { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\nimport type { Material } from \"../Materials/material\";\r\nimport type { Skeleton } from \"../Bones/skeleton\";\r\nimport { DeepCopier } from \"../Misc/deepCopier\";\r\nimport { TransformNode } from \"./transformNode\";\r\nimport type { Light } from \"../Lights/light\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport { Tools } from \"../Misc/tools\";\r\n\r\nMesh._instancedMeshFactory = (name: string, mesh: Mesh): InstancedMesh => {\r\n    const instance = new InstancedMesh(name, mesh);\r\n\r\n    if (mesh.instancedBuffers) {\r\n        instance.instancedBuffers = {};\r\n\r\n        for (const key in mesh.instancedBuffers) {\r\n            instance.instancedBuffers[key] = mesh.instancedBuffers[key];\r\n        }\r\n    }\r\n\r\n    return instance;\r\n};\r\n\r\n/**\r\n * Creates an instance based on a source mesh.\r\n */\r\nexport class InstancedMesh extends AbstractMesh {\r\n    private _sourceMesh: Mesh;\r\n    private _currentLOD: Mesh;\r\n    private _billboardWorldMatrix: Matrix;\r\n\r\n    /** @internal */\r\n    public _indexInSourceMeshInstanceArray = -1;\r\n    /** @internal */\r\n    public _distanceToCamera: number = 0;\r\n    /** @internal */\r\n    public _previousWorldMatrix: Nullable<Matrix>;\r\n\r\n    /**\r\n     * Creates a new InstancedMesh object from the mesh source.\r\n     * @param name defines the name of the instance\r\n     * @param source the mesh to create the instance from\r\n     */\r\n    constructor(name: string, source: Mesh) {\r\n        super(name, source.getScene());\r\n\r\n        source.addInstance(this);\r\n\r\n        this._sourceMesh = source;\r\n\r\n        this._unIndexed = source._unIndexed;\r\n\r\n        this.position.copyFrom(source.position);\r\n        this.rotation.copyFrom(source.rotation);\r\n        this.scaling.copyFrom(source.scaling);\r\n\r\n        if (source.rotationQuaternion) {\r\n            this.rotationQuaternion = source.rotationQuaternion.clone();\r\n        }\r\n\r\n        this.animations = source.animations.slice();\r\n        for (const range of source.getAnimationRanges()) {\r\n            if (range != null) {\r\n                this.createAnimationRange(range.name, range.from, range.to);\r\n            }\r\n        }\r\n\r\n        this.infiniteDistance = source.infiniteDistance;\r\n\r\n        this.setPivotMatrix(source.getPivotMatrix());\r\n\r\n        this.refreshBoundingInfo(true, true);\r\n        this._syncSubMeshes();\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"InstancedMesh\".\r\n     */\r\n    public getClassName(): string {\r\n        return \"InstancedMesh\";\r\n    }\r\n\r\n    /** Gets the list of lights affecting that mesh */\r\n    public get lightSources(): Light[] {\r\n        return this._sourceMesh._lightSources;\r\n    }\r\n\r\n    public _resyncLightSources(): void {\r\n        // Do nothing as all the work will be done by source mesh\r\n    }\r\n\r\n    public _resyncLightSource(): void {\r\n        // Do nothing as all the work will be done by source mesh\r\n    }\r\n\r\n    public _removeLightSource(): void {\r\n        // Do nothing as all the work will be done by source mesh\r\n    }\r\n\r\n    // Methods\r\n    /**\r\n     * If the source mesh receives shadows\r\n     */\r\n    public get receiveShadows(): boolean {\r\n        return this._sourceMesh.receiveShadows;\r\n    }\r\n\r\n    public set receiveShadows(_value: boolean) {\r\n        if (this._sourceMesh?.receiveShadows !== _value) {\r\n            Tools.Warn(\"Setting receiveShadows on an instanced mesh has no effect\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The material of the source mesh\r\n     */\r\n    public get material(): Nullable<Material> {\r\n        return this._sourceMesh.material;\r\n    }\r\n\r\n    public set material(_value: Nullable<Material>) {\r\n        if (this._sourceMesh?.material !== _value) {\r\n            Tools.Warn(\"Setting material on an instanced mesh has no effect\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Visibility of the source mesh\r\n     */\r\n    public get visibility(): number {\r\n        return this._sourceMesh.visibility;\r\n    }\r\n\r\n    public set visibility(_value: number) {\r\n        if (this._sourceMesh?.visibility !== _value) {\r\n            Tools.Warn(\"Setting visibility on an instanced mesh has no effect\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Skeleton of the source mesh\r\n     */\r\n    public get skeleton(): Nullable<Skeleton> {\r\n        return this._sourceMesh.skeleton;\r\n    }\r\n\r\n    public set skeleton(_value: Nullable<Skeleton>) {\r\n        if (this._sourceMesh?.skeleton !== _value) {\r\n            Tools.Warn(\"Setting skeleton on an instanced mesh has no effect\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Rendering ground id of the source mesh\r\n     */\r\n    public get renderingGroupId(): number {\r\n        return this._sourceMesh.renderingGroupId;\r\n    }\r\n\r\n    public set renderingGroupId(value: number) {\r\n        if (!this._sourceMesh || value === this._sourceMesh.renderingGroupId) {\r\n            return;\r\n        }\r\n\r\n        //no-op with warning\r\n        Logger.Warn(\"Note - setting renderingGroupId of an instanced mesh has no effect on the scene\");\r\n    }\r\n\r\n    /**\r\n     * Returns the total number of vertices (integer).\r\n     */\r\n    public getTotalVertices(): number {\r\n        return this._sourceMesh ? this._sourceMesh.getTotalVertices() : 0;\r\n    }\r\n\r\n    /**\r\n     * Returns a positive integer : the total number of indices in this mesh geometry.\r\n     * @returns the number of indices or zero if the mesh has no geometry.\r\n     */\r\n    public getTotalIndices(): number {\r\n        return this._sourceMesh.getTotalIndices();\r\n    }\r\n\r\n    /**\r\n     * The source mesh of the instance\r\n     */\r\n    public get sourceMesh(): Mesh {\r\n        return this._sourceMesh;\r\n    }\r\n\r\n    /**\r\n     * Creates a new InstancedMesh object from the mesh model.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/copies/instances\r\n     * @param name defines the name of the new instance\r\n     * @returns a new InstancedMesh\r\n     */\r\n    public createInstance(name: string): InstancedMesh {\r\n        return this._sourceMesh.createInstance(name);\r\n    }\r\n\r\n    /**\r\n     * Is this node ready to be used/rendered\r\n     * @param completeCheck defines if a complete check (including materials and lights) has to be done (false by default)\r\n     * @returns {boolean} is it ready\r\n     */\r\n    public isReady(completeCheck = false): boolean {\r\n        return this._sourceMesh.isReady(completeCheck, true);\r\n    }\r\n\r\n    /**\r\n     * Returns an array of integers or a typed array (Int32Array, Uint32Array, Uint16Array) populated with the mesh indices.\r\n     * @param kind kind of verticies to retrieve (eg. positions, normals, uvs, etc.)\r\n     * @param copyWhenShared If true (default false) and and if the mesh geometry is shared among some other meshes, the returned array is a copy of the internal one.\r\n     * @param forceCopy defines a boolean forcing the copy of the buffer no matter what the value of copyWhenShared is\r\n     * @returns a float array or a Float32Array of the requested kind of data : positions, normals, uvs, etc.\r\n     */\r\n    public getVerticesData(kind: string, copyWhenShared?: boolean, forceCopy?: boolean): Nullable<FloatArray> {\r\n        return this._sourceMesh.getVerticesData(kind, copyWhenShared, forceCopy);\r\n    }\r\n\r\n    /**\r\n     * Sets the vertex data of the mesh geometry for the requested `kind`.\r\n     * If the mesh has no geometry, a new Geometry object is set to the mesh and then passed this vertex data.\r\n     * The `data` are either a numeric array either a Float32Array.\r\n     * The parameter `updatable` is passed as is to the underlying Geometry object constructor (if initially none) or updater.\r\n     * The parameter `stride` is an optional positive integer, it is usually automatically deducted from the `kind` (3 for positions or normals, 2 for UV, etc).\r\n     * Note that a new underlying VertexBuffer object is created each call.\r\n     * If the `kind` is the `PositionKind`, the mesh BoundingInfo is renewed, so the bounding box and sphere, and the mesh World Matrix is recomputed.\r\n     *\r\n     * Possible `kind` values :\r\n     * - VertexBuffer.PositionKind\r\n     * - VertexBuffer.UVKind\r\n     * - VertexBuffer.UV2Kind\r\n     * - VertexBuffer.UV3Kind\r\n     * - VertexBuffer.UV4Kind\r\n     * - VertexBuffer.UV5Kind\r\n     * - VertexBuffer.UV6Kind\r\n     * - VertexBuffer.ColorKind\r\n     * - VertexBuffer.MatricesIndicesKind\r\n     * - VertexBuffer.MatricesIndicesExtraKind\r\n     * - VertexBuffer.MatricesWeightsKind\r\n     * - VertexBuffer.MatricesWeightsExtraKind\r\n     *\r\n     * Returns the Mesh.\r\n     * @param kind\r\n     * @param data\r\n     * @param updatable\r\n     * @param stride\r\n     */\r\n    public setVerticesData(kind: string, data: FloatArray, updatable?: boolean, stride?: number): AbstractMesh {\r\n        if (this.sourceMesh) {\r\n            this.sourceMesh.setVerticesData(kind, data, updatable, stride);\r\n        }\r\n        return this.sourceMesh;\r\n    }\r\n\r\n    /**\r\n     * Updates the existing vertex data of the mesh geometry for the requested `kind`.\r\n     * If the mesh has no geometry, it is simply returned as it is.\r\n     * The `data` are either a numeric array either a Float32Array.\r\n     * No new underlying VertexBuffer object is created.\r\n     * If the `kind` is the `PositionKind` and if `updateExtends` is true, the mesh BoundingInfo is renewed, so the bounding box and sphere, and the mesh World Matrix is recomputed.\r\n     * If the parameter `makeItUnique` is true, a new global geometry is created from this positions and is set to the mesh.\r\n     *\r\n     * Possible `kind` values :\r\n     * - VertexBuffer.PositionKind\r\n     * - VertexBuffer.UVKind\r\n     * - VertexBuffer.UV2Kind\r\n     * - VertexBuffer.UV3Kind\r\n     * - VertexBuffer.UV4Kind\r\n     * - VertexBuffer.UV5Kind\r\n     * - VertexBuffer.UV6Kind\r\n     * - VertexBuffer.ColorKind\r\n     * - VertexBuffer.MatricesIndicesKind\r\n     * - VertexBuffer.MatricesIndicesExtraKind\r\n     * - VertexBuffer.MatricesWeightsKind\r\n     * - VertexBuffer.MatricesWeightsExtraKind\r\n     *\r\n     * Returns the Mesh.\r\n     * @param kind\r\n     * @param data\r\n     * @param updateExtends\r\n     * @param makeItUnique\r\n     */\r\n    public updateVerticesData(kind: string, data: FloatArray, updateExtends?: boolean, makeItUnique?: boolean): Mesh {\r\n        if (this.sourceMesh) {\r\n            this.sourceMesh.updateVerticesData(kind, data, updateExtends, makeItUnique);\r\n        }\r\n        return this.sourceMesh;\r\n    }\r\n\r\n    /**\r\n     * Sets the mesh indices.\r\n     * Expects an array populated with integers or a typed array (Int32Array, Uint32Array, Uint16Array).\r\n     * If the mesh has no geometry, a new Geometry object is created and set to the mesh.\r\n     * This method creates a new index buffer each call.\r\n     * Returns the Mesh.\r\n     * @param indices\r\n     * @param totalVertices\r\n     */\r\n    public setIndices(indices: IndicesArray, totalVertices: Nullable<number> = null): Mesh {\r\n        if (this.sourceMesh) {\r\n            this.sourceMesh.setIndices(indices, totalVertices);\r\n        }\r\n        return this.sourceMesh;\r\n    }\r\n\r\n    /**\r\n     * Boolean : True if the mesh owns the requested kind of data.\r\n     * @param kind\r\n     */\r\n    public isVerticesDataPresent(kind: string): boolean {\r\n        return this._sourceMesh.isVerticesDataPresent(kind);\r\n    }\r\n\r\n    /**\r\n     * Returns an array of indices (IndicesArray).\r\n     */\r\n    public getIndices(): Nullable<IndicesArray> {\r\n        return this._sourceMesh.getIndices();\r\n    }\r\n\r\n    public get _positions(): Nullable<Vector3[]> {\r\n        return this._sourceMesh._positions;\r\n    }\r\n\r\n    /**\r\n     * This method recomputes and sets a new BoundingInfo to the mesh unless it is locked.\r\n     * This means the mesh underlying bounding box and sphere are recomputed.\r\n     * @param applySkeleton defines whether to apply the skeleton before computing the bounding info\r\n     * @param applyMorph  defines whether to apply the morph target before computing the bounding info\r\n     * @returns the current mesh\r\n     */\r\n    public refreshBoundingInfo(applySkeleton: boolean = false, applyMorph: boolean = false): InstancedMesh {\r\n        if (this.hasBoundingInfo && this.getBoundingInfo().isLocked) {\r\n            return this;\r\n        }\r\n\r\n        const bias = this._sourceMesh.geometry ? this._sourceMesh.geometry.boundingBias : null;\r\n        this._refreshBoundingInfo(this._sourceMesh._getPositionData(applySkeleton, applyMorph), bias);\r\n        return this;\r\n    }\r\n\r\n    /** @internal */\r\n    public _preActivate(): InstancedMesh {\r\n        if (this._currentLOD) {\r\n            this._currentLOD._preActivate();\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _activate(renderId: number, intermediateRendering: boolean): boolean {\r\n        super._activate(renderId, intermediateRendering);\r\n\r\n        if (!this._sourceMesh.subMeshes) {\r\n            Logger.Warn(\"Instances should only be created for meshes with geometry.\");\r\n        }\r\n\r\n        if (this._currentLOD) {\r\n            const differentSign = this._currentLOD._getWorldMatrixDeterminant() >= 0 !== this._getWorldMatrixDeterminant() >= 0;\r\n            if (differentSign) {\r\n                this._internalAbstractMeshDataInfo._actAsRegularMesh = true;\r\n                return true;\r\n            }\r\n            this._internalAbstractMeshDataInfo._actAsRegularMesh = false;\r\n\r\n            this._currentLOD._registerInstanceForRenderId(this, renderId);\r\n\r\n            if (intermediateRendering) {\r\n                if (!this._currentLOD._internalAbstractMeshDataInfo._isActiveIntermediate) {\r\n                    this._currentLOD._internalAbstractMeshDataInfo._onlyForInstancesIntermediate = true;\r\n                    return true;\r\n                }\r\n            } else {\r\n                if (!this._currentLOD._internalAbstractMeshDataInfo._isActive) {\r\n                    this._currentLOD._internalAbstractMeshDataInfo._onlyForInstances = true;\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /** @internal */\r\n    public _postActivate(): void {\r\n        if (this._sourceMesh.edgesShareWithInstances && this._sourceMesh._edgesRenderer && this._sourceMesh._edgesRenderer.isEnabled && this._sourceMesh._renderingGroup) {\r\n            // we are using the edge renderer of the source mesh\r\n            this._sourceMesh._renderingGroup._edgesRenderers.pushNoDuplicate(this._sourceMesh._edgesRenderer);\r\n            this._sourceMesh._edgesRenderer.customInstances.push(this.getWorldMatrix());\r\n        } else if (this._edgesRenderer && this._edgesRenderer.isEnabled && this._sourceMesh._renderingGroup) {\r\n            // we are using the edge renderer defined for this instance\r\n            this._sourceMesh._renderingGroup._edgesRenderers.push(this._edgesRenderer);\r\n        }\r\n    }\r\n\r\n    public getWorldMatrix(): Matrix {\r\n        if (this._currentLOD && this._currentLOD.billboardMode !== TransformNode.BILLBOARDMODE_NONE && this._currentLOD._masterMesh !== this) {\r\n            if (!this._billboardWorldMatrix) {\r\n                this._billboardWorldMatrix = new Matrix();\r\n            }\r\n            const tempMaster = this._currentLOD._masterMesh;\r\n            this._currentLOD._masterMesh = this;\r\n            TmpVectors.Vector3[7].copyFrom(this._currentLOD.position);\r\n            this._currentLOD.position.set(0, 0, 0);\r\n            this._billboardWorldMatrix.copyFrom(this._currentLOD.computeWorldMatrix(true));\r\n            this._currentLOD.position.copyFrom(TmpVectors.Vector3[7]);\r\n            this._currentLOD._masterMesh = tempMaster;\r\n            return this._billboardWorldMatrix;\r\n        }\r\n\r\n        return super.getWorldMatrix();\r\n    }\r\n\r\n    public get isAnInstance(): boolean {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Returns the current associated LOD AbstractMesh.\r\n     * @param camera\r\n     */\r\n    public getLOD(camera: Camera): AbstractMesh {\r\n        if (!camera) {\r\n            return this;\r\n        }\r\n\r\n        const sourceMeshLODLevels = this.sourceMesh.getLODLevels();\r\n        if (!sourceMeshLODLevels || sourceMeshLODLevels.length === 0) {\r\n            this._currentLOD = this.sourceMesh;\r\n        } else {\r\n            const boundingInfo = this.getBoundingInfo();\r\n            this._currentLOD = <Mesh>this.sourceMesh.getLOD(camera, boundingInfo.boundingSphere);\r\n        }\r\n\r\n        return this._currentLOD;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _preActivateForIntermediateRendering(renderId: number): Mesh {\r\n        return <Mesh>this.sourceMesh._preActivateForIntermediateRendering(renderId);\r\n    }\r\n\r\n    /** @internal */\r\n    public _syncSubMeshes(): InstancedMesh {\r\n        this.releaseSubMeshes();\r\n        if (this._sourceMesh.subMeshes) {\r\n            for (let index = 0; index < this._sourceMesh.subMeshes.length; index++) {\r\n                this._sourceMesh.subMeshes[index].clone(this, this._sourceMesh);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @internal */\r\n    public _generatePointsArray(): boolean {\r\n        return this._sourceMesh._generatePointsArray();\r\n    }\r\n\r\n    /** @internal */\r\n    public _updateBoundingInfo(): AbstractMesh {\r\n        if (this.hasBoundingInfo) {\r\n            this.getBoundingInfo().update(this.worldMatrixFromCache);\r\n        } else {\r\n            this.buildBoundingInfo(this.absolutePosition, this.absolutePosition, this.worldMatrixFromCache);\r\n        }\r\n        this._updateSubMeshesBoundingInfo(this.worldMatrixFromCache);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a new InstancedMesh from the current mesh.\r\n     *\r\n     * Returns the clone.\r\n     * @param name the cloned mesh name\r\n     * @param newParent the optional Node to parent the clone to.\r\n     * @param doNotCloneChildren if `true` the model children aren't cloned.\r\n     * @param newSourceMesh if set this mesh will be used as the source mesh instead of ths instance's one\r\n     * @returns the clone\r\n     */\r\n    public clone(name: string, newParent: Nullable<Node> = null, doNotCloneChildren?: boolean, newSourceMesh?: Mesh): InstancedMesh {\r\n        const result = (newSourceMesh || this._sourceMesh).createInstance(name);\r\n\r\n        // Deep copy\r\n        DeepCopier.DeepCopy(\r\n            this,\r\n            result,\r\n            [\r\n                \"name\",\r\n                \"subMeshes\",\r\n                \"uniqueId\",\r\n                \"parent\",\r\n                \"lightSources\",\r\n                \"receiveShadows\",\r\n                \"material\",\r\n                \"visibility\",\r\n                \"skeleton\",\r\n                \"sourceMesh\",\r\n                \"isAnInstance\",\r\n                \"facetNb\",\r\n                \"isFacetDataEnabled\",\r\n                \"isBlocked\",\r\n                \"useBones\",\r\n                \"hasInstances\",\r\n                \"collider\",\r\n                \"edgesRenderer\",\r\n                \"forward\",\r\n                \"up\",\r\n                \"right\",\r\n                \"absolutePosition\",\r\n                \"absoluteScaling\",\r\n                \"absoluteRotationQuaternion\",\r\n                \"isWorldMatrixFrozen\",\r\n                \"nonUniformScaling\",\r\n                \"behaviors\",\r\n                \"worldMatrixFromCache\",\r\n                \"hasThinInstances\",\r\n                \"hasBoundingInfo\",\r\n            ],\r\n            []\r\n        );\r\n\r\n        // Bounding info\r\n        this.refreshBoundingInfo();\r\n\r\n        // Parent\r\n        if (newParent) {\r\n            result.parent = newParent;\r\n        }\r\n\r\n        if (!doNotCloneChildren) {\r\n            // Children\r\n            for (let index = 0; index < this.getScene().meshes.length; index++) {\r\n                const mesh = this.getScene().meshes[index];\r\n\r\n                if (mesh.parent === this) {\r\n                    mesh.clone(mesh.name, result);\r\n                }\r\n            }\r\n        }\r\n\r\n        result.computeWorldMatrix(true);\r\n\r\n        this.onClonedObservable.notifyObservers(result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Disposes the InstancedMesh.\r\n     * Returns nothing.\r\n     * @param doNotRecurse\r\n     * @param disposeMaterialAndTextures\r\n     */\r\n    public dispose(doNotRecurse?: boolean, disposeMaterialAndTextures = false): void {\r\n        // Remove from mesh\r\n        this._sourceMesh.removeInstance(this);\r\n        super.dispose(doNotRecurse, disposeMaterialAndTextures);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _serializeAsParent(serializationObject: any) {\r\n        super._serializeAsParent(serializationObject);\r\n\r\n        serializationObject.parentId = this._sourceMesh.uniqueId;\r\n        serializationObject.parentInstanceIndex = this._indexInSourceMeshInstanceArray;\r\n    }\r\n\r\n    /**\r\n     * Instantiate (when possible) or clone that node with its hierarchy\r\n     * @param newParent defines the new parent to use for the instance (or clone)\r\n     * @param options defines options to configure how copy is done\r\n     * @param options.doNotInstantiate defines if the model must be instantiated or just cloned\r\n     * @param options.newSourcedMesh newSourcedMesh the new source mesh for the instance (or clone)\r\n     * @param onNewNodeCreated defines an option callback to call when a clone or an instance is created\r\n     * @returns an instance (or a clone) of the current node with its hierarchy\r\n     */\r\n    public instantiateHierarchy(\r\n        newParent: Nullable<TransformNode> = null,\r\n        options?: { doNotInstantiate: boolean | ((node: TransformNode) => boolean); newSourcedMesh?: Mesh },\r\n        onNewNodeCreated?: (source: TransformNode, clone: TransformNode) => void\r\n    ): Nullable<TransformNode> {\r\n        const clone = this.clone(\"Clone of \" + (this.name || this.id), newParent || this.parent, true, options && options.newSourcedMesh);\r\n\r\n        if (clone) {\r\n            if (onNewNodeCreated) {\r\n                onNewNodeCreated(this, clone);\r\n            }\r\n        }\r\n\r\n        for (const child of this.getChildTransformNodes(true)) {\r\n            child.instantiateHierarchy(clone, options, onNewNodeCreated);\r\n        }\r\n\r\n        return clone;\r\n    }\r\n}\r\n\r\ndeclare module \"./mesh\" {\r\n    export interface Mesh {\r\n        /**\r\n         * Register a custom buffer that will be instanced\r\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/copies/instances#custom-buffers\r\n         * @param kind defines the buffer kind\r\n         * @param stride defines the stride in floats\r\n         */\r\n        registerInstancedBuffer(kind: string, stride: number): void;\r\n\r\n        /**\r\n         * Invalidate VertexArrayObjects belonging to the mesh (but not to the Geometry of the mesh).\r\n         */\r\n        _invalidateInstanceVertexArrayObject(): void;\r\n\r\n        /**\r\n         * true to use the edge renderer for all instances of this mesh\r\n         */\r\n        edgesShareWithInstances: boolean;\r\n\r\n        /** @internal */\r\n        _userInstancedBuffersStorage: {\r\n            data: { [key: string]: Float32Array };\r\n            sizes: { [key: string]: number };\r\n            vertexBuffers: { [key: string]: Nullable<VertexBuffer> };\r\n            strides: { [key: string]: number };\r\n            vertexArrayObjects?: { [key: string]: WebGLVertexArrayObject };\r\n        };\r\n    }\r\n}\r\n\r\ndeclare module \"./abstractMesh\" {\r\n    export interface AbstractMesh {\r\n        /**\r\n         * Object used to store instanced buffers defined by user\r\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/copies/instances#custom-buffers\r\n         */\r\n        instancedBuffers: { [key: string]: any };\r\n    }\r\n}\r\n\r\nMesh.prototype.registerInstancedBuffer = function (kind: string, stride: number): void {\r\n    // Remove existing one\r\n    this._userInstancedBuffersStorage?.vertexBuffers[kind]?.dispose();\r\n\r\n    // Creates the instancedBuffer field if not present\r\n    if (!this.instancedBuffers) {\r\n        this.instancedBuffers = {};\r\n\r\n        for (const instance of this.instances) {\r\n            instance.instancedBuffers = {};\r\n        }\r\n\r\n        if (!this._userInstancedBuffersStorage) {\r\n            this._userInstancedBuffersStorage = {\r\n                data: {},\r\n                vertexBuffers: {},\r\n                strides: {},\r\n                sizes: {},\r\n                vertexArrayObjects: this.getEngine().getCaps().vertexArrayObject ? {} : undefined,\r\n            };\r\n        }\r\n    }\r\n\r\n    // Creates an empty property for this kind\r\n    this.instancedBuffers[kind] = null;\r\n\r\n    this._userInstancedBuffersStorage.strides[kind] = stride;\r\n    this._userInstancedBuffersStorage.sizes[kind] = stride * 32; // Initial size\r\n    this._userInstancedBuffersStorage.data[kind] = new Float32Array(this._userInstancedBuffersStorage.sizes[kind]);\r\n    this._userInstancedBuffersStorage.vertexBuffers[kind] = new VertexBuffer(this.getEngine(), this._userInstancedBuffersStorage.data[kind], kind, true, false, stride, true);\r\n\r\n    for (const instance of this.instances) {\r\n        instance.instancedBuffers[kind] = null;\r\n    }\r\n\r\n    this._invalidateInstanceVertexArrayObject();\r\n\r\n    this._markSubMeshesAsAttributesDirty();\r\n};\r\n\r\nMesh.prototype._processInstancedBuffers = function (visibleInstances: Nullable<InstancedMesh[]>, renderSelf: boolean) {\r\n    const instanceCount = visibleInstances ? visibleInstances.length : 0;\r\n\r\n    for (const kind in this.instancedBuffers) {\r\n        let size = this._userInstancedBuffersStorage.sizes[kind];\r\n        const stride = this._userInstancedBuffersStorage.strides[kind];\r\n\r\n        // Resize if required\r\n        const expectedSize = (instanceCount + 1) * stride;\r\n\r\n        while (size < expectedSize) {\r\n            size *= 2;\r\n        }\r\n\r\n        if (this._userInstancedBuffersStorage.data[kind].length != size) {\r\n            this._userInstancedBuffersStorage.data[kind] = new Float32Array(size);\r\n            this._userInstancedBuffersStorage.sizes[kind] = size;\r\n            if (this._userInstancedBuffersStorage.vertexBuffers[kind]) {\r\n                this._userInstancedBuffersStorage.vertexBuffers[kind]!.dispose();\r\n                this._userInstancedBuffersStorage.vertexBuffers[kind] = null;\r\n            }\r\n        }\r\n\r\n        const data = this._userInstancedBuffersStorage.data[kind];\r\n\r\n        // Update data buffer\r\n        let offset = 0;\r\n        if (renderSelf) {\r\n            const value = this.instancedBuffers[kind];\r\n\r\n            if (value.toArray) {\r\n                value.toArray(data, offset);\r\n            } else if (value.copyToArray) {\r\n                value.copyToArray(data, offset);\r\n            } else {\r\n                data[offset] = value;\r\n            }\r\n\r\n            offset += stride;\r\n        }\r\n\r\n        for (let instanceIndex = 0; instanceIndex < instanceCount; instanceIndex++) {\r\n            const instance = visibleInstances![instanceIndex]!;\r\n\r\n            const value = instance.instancedBuffers[kind];\r\n\r\n            if (value.toArray) {\r\n                value.toArray(data, offset);\r\n            } else if (value.copyToArray) {\r\n                value.copyToArray(data, offset);\r\n            } else {\r\n                data[offset] = value;\r\n            }\r\n\r\n            offset += stride;\r\n        }\r\n\r\n        // Update vertex buffer\r\n        if (!this._userInstancedBuffersStorage.vertexBuffers[kind]) {\r\n            this._userInstancedBuffersStorage.vertexBuffers[kind] = new VertexBuffer(\r\n                this.getEngine(),\r\n                this._userInstancedBuffersStorage.data[kind],\r\n                kind,\r\n                true,\r\n                false,\r\n                stride,\r\n                true\r\n            );\r\n            this._invalidateInstanceVertexArrayObject();\r\n        } else {\r\n            this._userInstancedBuffersStorage.vertexBuffers[kind]!.updateDirectly(data, 0);\r\n        }\r\n    }\r\n};\r\n\r\nMesh.prototype._invalidateInstanceVertexArrayObject = function () {\r\n    if (!this._userInstancedBuffersStorage || this._userInstancedBuffersStorage.vertexArrayObjects === undefined) {\r\n        return;\r\n    }\r\n\r\n    for (const kind in this._userInstancedBuffersStorage.vertexArrayObjects) {\r\n        this.getEngine().releaseVertexArrayObject(this._userInstancedBuffersStorage.vertexArrayObjects[kind]);\r\n    }\r\n\r\n    this._userInstancedBuffersStorage.vertexArrayObjects = {};\r\n};\r\n\r\nMesh.prototype._disposeInstanceSpecificData = function () {\r\n    if (this._instanceDataStorage.instancesBuffer) {\r\n        this._instanceDataStorage.instancesBuffer.dispose();\r\n        this._instanceDataStorage.instancesBuffer = null;\r\n    }\r\n\r\n    while (this.instances.length) {\r\n        this.instances[0].dispose();\r\n    }\r\n\r\n    for (const kind in this.instancedBuffers) {\r\n        if (this._userInstancedBuffersStorage.vertexBuffers[kind]) {\r\n            this._userInstancedBuffersStorage.vertexBuffers[kind]!.dispose();\r\n        }\r\n    }\r\n\r\n    this._invalidateInstanceVertexArrayObject();\r\n\r\n    this.instancedBuffers = {};\r\n};\r\n"],"names":["_instancedMeshFactory","name","mesh","instance","InstancedMesh","instancedBuffers","key","constructor","source","super","getScene","_indexInSourceMeshInstanceArray","_distanceToCamera","addInstance","this","_sourceMesh","_unIndexed","position","copyFrom","rotation","scaling","rotationQuaternion","clone","animations","slice","range","getAnimationRanges","createAnimationRange","from","to","infiniteDistance","setPivotMatrix","getPivotMatrix","refreshBoundingInfo","_syncSubMeshes","getClassName","lightSources","_lightSources","_resyncLightSources","_resyncLightSource","_removeLightSource","receiveShadows","_value","Warn","material","visibility","skeleton","renderingGroupId","value","getTotalVertices","getTotalIndices","sourceMesh","createInstance","isReady","completeCheck","getVerticesData","kind","copyWhenShared","forceCopy","setVerticesData","data","updatable","stride","updateVerticesData","updateExtends","makeItUnique","setIndices","indices","totalVertices","isVerticesDataPresent","getIndices","_positions","applySkeleton","applyMorph","hasBoundingInfo","getBoundingInfo","isLocked","bias","geometry","boundingBias","_refreshBoundingInfo","_getPositionData","_preActivate","_currentLOD","_activate","renderId","intermediateRendering","subMeshes","_getWorldMatrixDeterminant","_internalAbstractMeshDataInfo","_actAsRegularMesh","_registerInstanceForRenderId","_isActiveIntermediate","_onlyForInstancesIntermediate","_isActive","_onlyForInstances","_postActivate","edgesShareWithInstances","_edgesRenderer","isEnabled","_renderingGroup","_edgesRenderers","pushNoDuplicate","customInstances","push","getWorldMatrix","billboardMode","BILLBOARDMODE_NONE","_masterMesh","_billboardWorldMatrix","tempMaster","Vector3","set","computeWorldMatrix","isAnInstance","getLOD","camera","sourceMeshLODLevels","getLODLevels","length","boundingInfo","boundingSphere","_preActivateForIntermediateRendering","releaseSubMeshes","index","_generatePointsArray","_updateBoundingInfo","update","worldMatrixFromCache","buildBoundingInfo","absolutePosition","_updateSubMeshesBoundingInfo","newParent","doNotCloneChildren","newSourceMesh","result","DeepCopy","parent","meshes","onClonedObservable","notifyObservers","dispose","doNotRecurse","disposeMaterialAndTextures","removeInstance","_serializeAsParent","serializationObject","parentId","uniqueId","parentInstanceIndex","instantiateHierarchy","options","onNewNodeCreated","id","newSourcedMesh","child","getChildTransformNodes","prototype","registerInstancedBuffer","_userInstancedBuffersStorage","vertexBuffers","instances","strides","sizes","vertexArrayObjects","getEngine","getCaps","vertexArrayObject","undefined","Float32Array","_invalidateInstanceVertexArrayObject","_markSubMeshesAsAttributesDirty","_processInstancedBuffers","visibleInstances","renderSelf","instanceCount","size","expectedSize","offset","toArray","copyToArray","instanceIndex","updateDirectly","releaseVertexArrayObject","_disposeInstanceSpecificData","_instanceDataStorage","instancesBuffer"],"sourceRoot":""}