{"version":3,"file":"js/247.babylonBundle.js","mappings":"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","sources":["webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/valueAndUnit.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/measure.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/math2D.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/control.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/textBlock.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/container.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/rectangle.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/image.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/button.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/stackPanel.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/checkbox.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/textWrapper.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/inputText.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/grid.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/colorpicker.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/ellipse.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/focusableButton.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/inputTextArea.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/inputPassword.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/line.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/multiLinePoint.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/multiLine.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/radioButton.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/sliders/baseSlider.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/sliders/slider.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/selector.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/scrollViewers/scrollViewerWindow.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/sliders/scrollBar.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/sliders/imageScrollBar.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/scrollViewers/scrollViewer.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/toggleButton.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/virtualKeyboard.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/displayGrid.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/sliders/imageBasedSlider.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/statics.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/gradient/BaseGradient.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/gradient/LinearGradient.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/controls/gradient/RadialGradient.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/style.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/advancedDynamicTexture.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/adtInstrumentation.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/2D/xmlLoader.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/vector3WithInfo.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/controls/control3D.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/controls/contentDisplay3D.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/controls/abstractButton3D.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/controls/button3D.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/controls/container3D.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/controls/volumeBasedPanel.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/controls/cylinderPanel.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/fluent/shaders/fluent.vertex.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/fluent/shaders/fluent.fragment.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/fluent/fluentMaterial.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/controls/touchHolographicMenu.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/controls/handMenu.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/fluentBackplate/shaders/fluentBackplate.fragment.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/fluentBackplate/shaders/fluentBackplate.vertex.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/fluentBackplate/fluentBackplateMaterial.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/controls/holographicBackplate.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/controls/holographicButton.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/fluentButton/shaders/fluentButton.fragment.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/fluentButton/shaders/fluentButton.vertex.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/fluentButton/fluentButtonMaterial.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/controls/touchButton3D.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/controls/touchHolographicButton.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/behaviors/defaultBehavior.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/handle/shaders/handle.vertex.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/handle/shaders/handle.fragment.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/handle/handleMaterial.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/gizmos/gizmoHandle.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/gizmos/slateGizmo.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/controls/holographicSlate.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/controls/meshButton3D.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/controls/nearMenu.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/controls/planePanel.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/controls/scatterPanel.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/mrdl/shaders/mrdlSliderBar.fragment.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/mrdl/shaders/mrdlSliderBar.vertex.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/mrdl/mrdlSliderBarMaterial.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/mrdl/shaders/mrdlSliderThumb.fragment.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/mrdl/shaders/mrdlSliderThumb.vertex.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/mrdl/mrdlSliderThumbMaterial.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/mrdl/shaders/mrdlBackplate.fragment.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/mrdl/shaders/mrdlBackplate.vertex.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/mrdl/mrdlBackplateMaterial.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/controls/slider3D.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/controls/spherePanel.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/controls/stackPanel3D.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/controls/touchMeshButton3D.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/mrdl/shaders/mrdlBackglow.fragment.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/mrdl/shaders/mrdlBackglow.vertex.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/mrdl/mrdlBackglowMaterial.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/mrdl/shaders/mrdlFrontplate.fragment.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/mrdl/shaders/mrdlFrontplate.vertex.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/mrdl/mrdlFrontplateMaterial.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/mrdl/shaders/mrdlInnerquad.fragment.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/mrdl/shaders/mrdlInnerquad.vertex.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/materials/mrdl/mrdlInnerquadMaterial.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/controls/MRTK3/touchHolographicButton.ts","webpack://babylonjs-typescript-webpack-template/./dev/gui/src/3D/gui3DManager.ts","webpack://babylonjs-typescript-webpack-template/./dev/loaders/src/STL/stlFileLoader.ts"],"sourcesContent":["import { Observable } from \"core/Misc/observable\";\r\nimport type { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\n\r\n/**\r\n * Class used to specific a value and its associated unit\r\n */\r\nexport class ValueAndUnit {\r\n    private _value = 1;\r\n    private _unit = ValueAndUnit.UNITMODE_PIXEL;\r\n    private _originalUnit: number;\r\n\r\n    /**\r\n     * Gets or sets a value indicating that this value will not scale accordingly with adaptive scaling property\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling\r\n     */\r\n    public ignoreAdaptiveScaling = false;\r\n\r\n    /**\r\n     * Observable event triggered each time the value or unit changes\r\n     */\r\n    public onChangedObservable = new Observable<void>();\r\n\r\n    /**\r\n     * Creates a new ValueAndUnit\r\n     * @param value defines the value to store\r\n     * @param unit defines the unit to store - defaults to ValueAndUnit.UNITMODE_PIXEL\r\n     * @param negativeValueAllowed defines a boolean indicating if the value can be negative\r\n     */\r\n    public constructor(\r\n        value: number,\r\n        /** defines the unit to store */\r\n        unit = ValueAndUnit.UNITMODE_PIXEL,\r\n        /** defines a boolean indicating if the value can be negative */\r\n        public negativeValueAllowed = true\r\n    ) {\r\n        this._value = value;\r\n        this._unit = unit;\r\n        this._originalUnit = unit;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is a percentage */\r\n    public get isPercentage(): boolean {\r\n        return this._unit === ValueAndUnit.UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is store as pixel */\r\n    public get isPixel(): boolean {\r\n        return this._unit === ValueAndUnit.UNITMODE_PIXEL;\r\n    }\r\n\r\n    /**\r\n     * Gets value (without units)\r\n     * @deprecated use value property instead\r\n     */\r\n    public get internalValue(): number {\r\n        return this._value;\r\n    }\r\n\r\n    /** Gets value (without units) */\r\n    public get value(): number {\r\n        return this._value;\r\n    }\r\n\r\n    /** Sets value (without units) */\r\n    public set value(value: number) {\r\n        if (value !== this._value) {\r\n            this._value = value;\r\n            this.onChangedObservable.notifyObservers();\r\n        }\r\n    }\r\n\r\n    /** Gets units (without value) */\r\n    public get unit(): number {\r\n        return this._unit;\r\n    }\r\n\r\n    /** Sets units (without value) */\r\n    public set unit(value: number) {\r\n        if (value !== this._unit) {\r\n            this._unit = value;\r\n            this.onChangedObservable.notifyObservers();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets value as pixel\r\n     * @param host defines the root host\r\n     * @param refValue defines the reference value for percentages\r\n     * @returns the value as pixel\r\n     */\r\n    public getValueInPixel(host: AdvancedDynamicTexture, refValue: number): number {\r\n        if (this.isPixel) {\r\n            return this.getValue(host);\r\n        }\r\n\r\n        return this.getValue(host) * refValue;\r\n    }\r\n\r\n    /**\r\n     * Update the current value and unit.\r\n     * @param value defines the value to store\r\n     * @param unit defines the unit to store\r\n     * @returns the current ValueAndUnit\r\n     */\r\n    public updateInPlace(value: number, unit = ValueAndUnit.UNITMODE_PIXEL): ValueAndUnit {\r\n        if (this.value !== value || this.unit !== unit) {\r\n            // set member variables to notify only once\r\n            this._value = value;\r\n            this._unit = unit;\r\n            this.onChangedObservable.notifyObservers();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the value accordingly to its unit\r\n     * @param host  defines the root host\r\n     * @returns the value\r\n     */\r\n    public getValue(host: AdvancedDynamicTexture): number {\r\n        if (host && !this.ignoreAdaptiveScaling && this.unit !== ValueAndUnit.UNITMODE_PERCENTAGE) {\r\n            let width: number = 0;\r\n            let height: number = 0;\r\n\r\n            if (host.idealWidth) {\r\n                width = Math.ceil((this._value * host.getSize().width) / host.idealWidth);\r\n            }\r\n\r\n            if (host.idealHeight) {\r\n                height = Math.ceil((this._value * host.getSize().height) / host.idealHeight);\r\n            }\r\n\r\n            if (host.useSmallestIdeal && host.idealWidth && host.idealHeight) {\r\n                return window.innerWidth < window.innerHeight ? width : height;\r\n            }\r\n\r\n            if (host.idealWidth) {\r\n                // horizontal\r\n                return width;\r\n            }\r\n\r\n            if (host.idealHeight) {\r\n                // vertical\r\n                return height;\r\n            }\r\n        }\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets a string representation of the value\r\n     * @param host defines the root host\r\n     * @param decimals defines an optional number of decimals to display\r\n     * @returns a string\r\n     */\r\n    public toString(host: AdvancedDynamicTexture, decimals?: number): string {\r\n        switch (this._unit) {\r\n            case ValueAndUnit.UNITMODE_PERCENTAGE: {\r\n                const percentage = this.getValue(host) * 100;\r\n                return (decimals ? percentage.toFixed(decimals) : percentage) + \"%\";\r\n            }\r\n            case ValueAndUnit.UNITMODE_PIXEL: {\r\n                const pixels = this.getValue(host);\r\n                return (decimals ? pixels.toFixed(decimals) : pixels) + \"px\";\r\n            }\r\n        }\r\n\r\n        return this._unit.toString();\r\n    }\r\n\r\n    /**\r\n     * Store a value parsed from a string\r\n     * @param source defines the source string\r\n     * @returns true if the value was successfully parsed and updated\r\n     */\r\n    public fromString(source: string | number): boolean {\r\n        const match = ValueAndUnit._Regex.exec(source.toString());\r\n\r\n        if (!match || match.length === 0) {\r\n            return false;\r\n        }\r\n\r\n        let sourceValue = parseFloat(match[1]);\r\n        let sourceUnit = this._originalUnit;\r\n\r\n        if (!this.negativeValueAllowed) {\r\n            if (sourceValue < 0) {\r\n                sourceValue = 0;\r\n            }\r\n        }\r\n\r\n        if (match.length === 4) {\r\n            switch (match[3]) {\r\n                case \"px\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PIXEL;\r\n                    break;\r\n                case \"%\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PERCENTAGE;\r\n                    sourceValue /= 100.0;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (sourceValue === this._value && sourceUnit === this._unit) {\r\n            return false;\r\n        }\r\n\r\n        this._value = sourceValue;\r\n        this._unit = sourceUnit;\r\n        this.onChangedObservable.notifyObservers();\r\n\r\n        return true;\r\n    }\r\n\r\n    // Static\r\n    private static _Regex = /(^-?\\d*(\\.\\d+)?)(%|px)?/;\r\n    private static _UNITMODE_PERCENTAGE = 0;\r\n    private static _UNITMODE_PIXEL = 1;\r\n\r\n    /** UNITMODE_PERCENTAGE */\r\n    public static get UNITMODE_PERCENTAGE(): number {\r\n        return ValueAndUnit._UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** UNITMODE_PIXEL */\r\n    public static get UNITMODE_PIXEL(): number {\r\n        return ValueAndUnit._UNITMODE_PIXEL;\r\n    }\r\n}\r\n","import type { Matrix2D } from \"./math2D\";\r\nimport { Vector2 } from \"core/Maths/math.vector\";\r\n\r\nconst tmpRect = [new Vector2(0, 0), new Vector2(0, 0), new Vector2(0, 0), new Vector2(0, 0)];\r\n\r\nconst tmpRect2 = [new Vector2(0, 0), new Vector2(0, 0), new Vector2(0, 0), new Vector2(0, 0)];\r\n\r\nconst tmpV1 = new Vector2(0, 0);\r\nconst tmpV2 = new Vector2(0, 0);\r\n\r\n/**\r\n * Class used to store 2D control sizes\r\n */\r\nexport class Measure {\r\n    /**\r\n     * Creates a new measure\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate\r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public constructor(\r\n        /** defines left coordinate */\r\n        public left: number,\r\n        /** defines top coordinate  */\r\n        public top: number,\r\n        /** defines width dimension  */\r\n        public width: number,\r\n        /** defines height dimension */\r\n        public height: number\r\n    ) {}\r\n\r\n    /**\r\n     * Copy from another measure\r\n     * @param other defines the other measure to copy from\r\n     */\r\n    public copyFrom(other: Measure): void {\r\n        this.left = other.left;\r\n        this.top = other.top;\r\n        this.width = other.width;\r\n        this.height = other.height;\r\n    }\r\n\r\n    /**\r\n     * Copy from a group of 4 floats\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate\r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public copyFromFloats(left: number, top: number, width: number, height: number): void {\r\n        this.left = left;\r\n        this.top = top;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    /**\r\n     * Computes the axis aligned bounding box measure for two given measures\r\n     * @param a Input measure\r\n     * @param b Input measure\r\n     * @param result the resulting bounding measure\r\n     */\r\n    public static CombineToRef(a: Measure, b: Measure, result: Measure) {\r\n        const left = Math.min(a.left, b.left);\r\n        const top = Math.min(a.top, b.top);\r\n        const right = Math.max(a.left + a.width, b.left + b.width);\r\n        const bottom = Math.max(a.top + a.height, b.top + b.height);\r\n        result.left = left;\r\n        result.top = top;\r\n        result.width = right - left;\r\n        result.height = bottom - top;\r\n    }\r\n\r\n    /**\r\n     * Computes the axis aligned bounding box of the measure after it is modified by a given transform\r\n     * @param transform the matrix to transform the measure before computing the AABB\r\n     * @param addX number to add to left\r\n     * @param addY number to add to top\r\n     * @param addWidth number to add to width\r\n     * @param addHeight number to add to height\r\n     * @param result the resulting AABB\r\n     */\r\n    public addAndTransformToRef(transform: Matrix2D, addX: number, addY: number, addWidth: number, addHeight: number, result: Measure) {\r\n        const left = this.left + addX;\r\n        const top = this.top + addY;\r\n        const width = this.width + addWidth;\r\n        const height = this.height + addHeight;\r\n\r\n        tmpRect[0].copyFromFloats(left, top);\r\n        tmpRect[1].copyFromFloats(left + width, top);\r\n        tmpRect[2].copyFromFloats(left + width, top + height);\r\n        tmpRect[3].copyFromFloats(left, top + height);\r\n\r\n        tmpV1.copyFromFloats(Number.MAX_VALUE, Number.MAX_VALUE);\r\n        tmpV2.copyFromFloats(0, 0);\r\n        for (let i = 0; i < 4; i++) {\r\n            transform.transformCoordinates(tmpRect[i].x, tmpRect[i].y, tmpRect2[i]);\r\n            tmpV1.x = Math.floor(Math.min(tmpV1.x, tmpRect2[i].x));\r\n            tmpV1.y = Math.floor(Math.min(tmpV1.y, tmpRect2[i].y));\r\n            tmpV2.x = Math.ceil(Math.max(tmpV2.x, tmpRect2[i].x));\r\n            tmpV2.y = Math.ceil(Math.max(tmpV2.y, tmpRect2[i].y));\r\n        }\r\n        result.left = tmpV1.x;\r\n        result.top = tmpV1.y;\r\n        result.width = tmpV2.x - tmpV1.x;\r\n        result.height = tmpV2.y - tmpV1.y;\r\n    }\r\n\r\n    /**\r\n     * Computes the axis aligned bounding box of the measure after it is modified by a given transform\r\n     * @param transform the matrix to transform the measure before computing the AABB\r\n     * @param result the resulting AABB\r\n     */\r\n    public transformToRef(transform: Matrix2D, result: Measure) {\r\n        this.addAndTransformToRef(transform, 0, 0, 0, 0, result);\r\n    }\r\n    /**\r\n     * Check equality between this measure and another one\r\n     * @param other defines the other measures\r\n     * @returns true if both measures are equals\r\n     */\r\n    public isEqualsTo(other: Measure): boolean {\r\n        if (this.left !== other.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this.top !== other.top) {\r\n            return false;\r\n        }\r\n\r\n        if (this.width !== other.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this.height !== other.height) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates an empty measure\r\n     * @returns a new measure\r\n     */\r\n    public static Empty(): Measure {\r\n        return new Measure(0, 0, 0, 0);\r\n    }\r\n}\r\n","import type { Nullable } from \"core/types\";\r\nimport { Vector2 } from \"core/Maths/math.vector\";\r\nimport { Epsilon } from \"core/Maths/math.constants\";\r\n\r\n/**\r\n * Class used to transport Vector2 information for pointer events\r\n */\r\nexport class Vector2WithInfo extends Vector2 {\r\n    /**\r\n     * Creates a new Vector2WithInfo\r\n     * @param source defines the vector2 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(\r\n        source: Vector2,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0\r\n    ) {\r\n        super(source.x, source.y);\r\n    }\r\n}\r\n\r\n/** Class used to provide 2D matrix features */\r\nexport class Matrix2D {\r\n    /** Gets the internal array of 6 floats used to store matrix data */\r\n    public m = new Float32Array(6);\r\n\r\n    /**\r\n     * Creates a new matrix\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     */\r\n    constructor(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number) {\r\n        this.fromValues(m00, m01, m10, m11, m20, m21);\r\n    }\r\n\r\n    /**\r\n     * Fills the matrix from direct values\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     * @returns the current modified matrix\r\n     */\r\n    public fromValues(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number): Matrix2D {\r\n        this.m[0] = m00;\r\n        this.m[1] = m01;\r\n        this.m[2] = m10;\r\n        this.m[3] = m11;\r\n        this.m[4] = m20;\r\n        this.m[5] = m21;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets matrix determinant\r\n     * @returns the determinant\r\n     */\r\n    public determinant(): number {\r\n        return this.m[0] * this.m[3] - this.m[1] * this.m[2];\r\n    }\r\n\r\n    /**\r\n     * Inverses the matrix and stores it in a target matrix\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public invertToRef(result: Matrix2D): Matrix2D {\r\n        const l0 = this.m[0];\r\n        const l1 = this.m[1];\r\n        const l2 = this.m[2];\r\n        const l3 = this.m[3];\r\n        const l4 = this.m[4];\r\n        const l5 = this.m[5];\r\n\r\n        const det = this.determinant();\r\n        if (det < Epsilon * Epsilon) {\r\n            result.m[0] = 0;\r\n            result.m[1] = 0;\r\n            result.m[2] = 0;\r\n            result.m[3] = 0;\r\n            result.m[4] = 0;\r\n            result.m[5] = 0;\r\n            return this;\r\n        }\r\n\r\n        const detDiv = 1 / det;\r\n\r\n        const det4 = l2 * l5 - l3 * l4;\r\n        const det5 = l1 * l4 - l0 * l5;\r\n\r\n        result.m[0] = l3 * detDiv;\r\n        result.m[1] = -l1 * detDiv;\r\n        result.m[2] = -l2 * detDiv;\r\n        result.m[3] = l0 * detDiv;\r\n        result.m[4] = det4 * detDiv;\r\n        result.m[5] = det5 * detDiv;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the current matrix with another one\r\n     * @param other defines the second operand\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public multiplyToRef(other: Matrix2D, result: Matrix2D): Matrix2D {\r\n        const l0 = this.m[0];\r\n        const l1 = this.m[1];\r\n        const l2 = this.m[2];\r\n        const l3 = this.m[3];\r\n        const l4 = this.m[4];\r\n        const l5 = this.m[5];\r\n\r\n        const r0 = other.m[0];\r\n        const r1 = other.m[1];\r\n        const r2 = other.m[2];\r\n        const r3 = other.m[3];\r\n        const r4 = other.m[4];\r\n        const r5 = other.m[5];\r\n\r\n        result.m[0] = l0 * r0 + l1 * r2;\r\n        result.m[1] = l0 * r1 + l1 * r3;\r\n        result.m[2] = l2 * r0 + l3 * r2;\r\n        result.m[3] = l2 * r1 + l3 * r3;\r\n        result.m[4] = l4 * r0 + l5 * r2 + r4;\r\n        result.m[5] = l4 * r1 + l5 * r3 + r5;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Applies the current matrix to a set of 2 floats and stores the result in a vector2\r\n     * @param x defines the x coordinate to transform\r\n     * @param y defines the x coordinate to transform\r\n     * @param result defines the target vector2\r\n     * @returns the current matrix\r\n     */\r\n    public transformCoordinates(x: number, y: number, result: Vector2): Matrix2D {\r\n        result.x = x * this.m[0] + y * this.m[2] + this.m[4];\r\n        result.y = x * this.m[1] + y * this.m[3] + this.m[5];\r\n\r\n        return this;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates an identity matrix\r\n     * @returns a new matrix\r\n     */\r\n    public static Identity(): Matrix2D {\r\n        return new Matrix2D(1, 0, 0, 1, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates an identity matrix and stores it in a target matrix\r\n     * @param result defines the target matrix\r\n     */\r\n    public static IdentityToRef(result: Matrix2D): void {\r\n        result.m[0] = 1;\r\n        result.m[1] = 0;\r\n        result.m[2] = 0;\r\n        result.m[3] = 1;\r\n        result.m[4] = 0;\r\n        result.m[5] = 0;\r\n    }\r\n\r\n    /**\r\n     * Creates a translation matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the translation\r\n     * @param y defines the y coordinate of the translation\r\n     * @param result defines the target matrix\r\n     */\r\n    public static TranslationToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(1, 0, 0, 1, x, y);\r\n    }\r\n\r\n    /**\r\n     * Creates a scaling matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the scaling\r\n     * @param y defines the y coordinate of the scaling\r\n     * @param result defines the target matrix\r\n     */\r\n    public static ScalingToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(x, 0, 0, y, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a rotation matrix and stores it in a target matrix\r\n     * @param angle defines the rotation angle\r\n     * @param result defines the target matrix\r\n     */\r\n    public static RotationToRef(angle: number, result: Matrix2D): void {\r\n        const s = Math.sin(angle);\r\n        const c = Math.cos(angle);\r\n\r\n        result.fromValues(c, s, -s, c, 0, 0);\r\n    }\r\n\r\n    private static _TempPreTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempPostTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempRotationMatrix = Matrix2D.Identity();\r\n    private static _TempScalingMatrix = Matrix2D.Identity();\r\n    private static _TempCompose0 = Matrix2D.Identity();\r\n    private static _TempCompose1 = Matrix2D.Identity();\r\n    private static _TempCompose2 = Matrix2D.Identity();\r\n\r\n    /**\r\n     * Composes a matrix from translation, rotation, scaling and parent matrix and stores it in a target matrix\r\n     * @param tx defines the x coordinate of the translation\r\n     * @param ty defines the y coordinate of the translation\r\n     * @param angle defines the rotation angle\r\n     * @param scaleX defines the x coordinate of the scaling\r\n     * @param scaleY defines the y coordinate of the scaling\r\n     * @param parentMatrix defines the parent matrix to multiply by (can be null)\r\n     * @param result defines the target matrix\r\n     */\r\n    public static ComposeToRef(tx: number, ty: number, angle: number, scaleX: number, scaleY: number, parentMatrix: Nullable<Matrix2D>, result: Matrix2D): void {\r\n        Matrix2D.TranslationToRef(tx, ty, Matrix2D._TempPreTranslationMatrix);\r\n\r\n        Matrix2D.ScalingToRef(scaleX, scaleY, Matrix2D._TempScalingMatrix);\r\n\r\n        Matrix2D.RotationToRef(angle, Matrix2D._TempRotationMatrix);\r\n\r\n        Matrix2D.TranslationToRef(-tx, -ty, Matrix2D._TempPostTranslationMatrix);\r\n\r\n        Matrix2D._TempPreTranslationMatrix.multiplyToRef(Matrix2D._TempScalingMatrix, Matrix2D._TempCompose0);\r\n        Matrix2D._TempCompose0.multiplyToRef(Matrix2D._TempRotationMatrix, Matrix2D._TempCompose1);\r\n        if (parentMatrix) {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, Matrix2D._TempCompose2);\r\n            Matrix2D._TempCompose2.multiplyToRef(parentMatrix, result);\r\n        } else {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, result);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Useful math functions\r\n */\r\nexport class MathTools {\r\n    /**\r\n     * Default rounding precision for GUI elements. It should be\r\n     * set to a power of ten, where the exponent means the number\r\n     * of decimal digits to round to, i.e, 100 means 2 decimal digits,\r\n     * 1000 means 3 decimal digits, etc. Default is 100 (2 decimal digits).\r\n     */\r\n    public static DefaultRoundingPrecision = 100;\r\n\r\n    /**\r\n     * Rounds a number to the nearest multiple of a given precision\r\n     * @param value the value to be rounded\r\n     * @param precision the multiple to which the value will be rounded. Default is 100 (2 decimal digits)\r\n     * @returns\r\n     */\r\n    public static Round(value: number, precision: number = MathTools.DefaultRoundingPrecision): number {\r\n        return Math.round(value * precision) / precision;\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/naming-convention */\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport { Vector2, Vector3, Matrix } from \"core/Maths/math.vector\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { PointerEventTypes } from \"core/Events/pointerEvents\";\r\nimport { Logger } from \"core/Misc/logger\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\nimport type { Container } from \"./container\";\r\nimport type { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Measure } from \"../measure\";\r\nimport type { Style } from \"../style\";\r\nimport { Matrix2D, Vector2WithInfo } from \"../math2D\";\r\nimport { GetClass, RegisterClass } from \"core/Misc/typeStore\";\r\nimport { SerializationHelper, serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasGradient, ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport { EngineStore } from \"core/Engines/engineStore\";\r\nimport type { IAccessibilityTag } from \"core/IAccessibilityTag\";\r\nimport type { IPointerEvent } from \"core/Events/deviceInputEvents\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { Animation } from \"core/Animations/animation\";\r\nimport type { BaseGradient } from \"./gradient/BaseGradient\";\r\n\r\n/**\r\n * Root class used for all 2D controls\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#controls\r\n */\r\nexport class Control implements IAnimatable {\r\n    /**\r\n     * Gets or sets a boolean indicating if alpha must be an inherited value (false by default)\r\n     */\r\n    public static AllowAlphaInheritance = false;\r\n\r\n    private _alpha = 1;\r\n    private _alphaSet = false;\r\n    private _zIndex = 0;\r\n    /** @internal */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** Gets or sets the control parent */\r\n    public parent: Nullable<Container>;\r\n    /** @internal */\r\n    public _currentMeasure = Measure.Empty();\r\n    /** @internal */\r\n    public _tempPaddingMeasure = Measure.Empty();\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    private _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _font: string;\r\n    /** @internal */\r\n    public _width = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @internal */\r\n    public _height = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @internal */\r\n    protected _fontOffset: { ascent: number; height: number; descent: number };\r\n    private _color = \"\";\r\n    private _style: Nullable<Style> = null;\r\n    private _styleObserver: Nullable<Observer<Style>>;\r\n    /** @internal */\r\n    protected _horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    /** @internal */\r\n    protected _verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n    /** @internal */\r\n    protected _isDirty = true;\r\n    /** @internal */\r\n    protected _wasDirty = false;\r\n    /** @internal */\r\n    public _tempParentMeasure = Measure.Empty();\r\n    /** @internal */\r\n    public _prevCurrentMeasureTransformedIntoGlobalSpace = Measure.Empty();\r\n    /** @internal */\r\n    public _cachedParentMeasure = Measure.Empty();\r\n    private _descendantsOnlyPadding = false;\r\n    private _paddingLeft = new ValueAndUnit(0);\r\n    private _paddingRight = new ValueAndUnit(0);\r\n    private _paddingTop = new ValueAndUnit(0);\r\n    private _paddingBottom = new ValueAndUnit(0);\r\n    /** @internal */\r\n    public _left = new ValueAndUnit(0);\r\n    /** @internal */\r\n    public _top = new ValueAndUnit(0);\r\n    private _scaleX = 1.0;\r\n    private _scaleY = 1.0;\r\n    private _rotation = 0;\r\n    private _transformCenterX = 0.5;\r\n    private _transformCenterY = 0.5;\r\n    /** @internal */\r\n    public _transformMatrix = Matrix2D.Identity();\r\n    /** @internal */\r\n    protected _invertTransformMatrix = Matrix2D.Identity();\r\n    /** @internal */\r\n    protected _transformedPosition = Vector2.Zero();\r\n    private _isMatrixDirty = true;\r\n    private _cachedOffsetX: number;\r\n    private _cachedOffsetY: number;\r\n    private _isVisible = true;\r\n    private _isHighlighted = false;\r\n    private _highlightColor = \"#4affff\";\r\n    protected _highlightLineWidth = 2;\r\n    /** @internal */\r\n    public _linkedMesh: Nullable<TransformNode>;\r\n    private _fontSet = false;\r\n    private _dummyVector2 = Vector2.Zero();\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _doNotRender = false;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    private _evaluatedMeasure = new Measure(0, 0, 0, 0);\r\n    private _evaluatedParentMeasure = new Measure(0, 0, 0, 0);\r\n    protected _isEnabled = true;\r\n    protected _disabledColor = \"#9a9a9a\";\r\n    protected _disabledColorItem = \"#6a6a6a\";\r\n    protected _isReadOnly = false;\r\n    private _gradient: Nullable<BaseGradient> = null;\r\n    /** @internal */\r\n    protected _rebuildLayout = false;\r\n\r\n    /** @internal */\r\n    public _customData: any = {};\r\n\r\n    /** @internal */\r\n    public _isClipped = false;\r\n\r\n    /** @internal */\r\n    public _automaticSize = false;\r\n\r\n    /** @internal */\r\n    public _tag: any;\r\n\r\n    /**\r\n     * Gets or sets the unique id of the node. Please note that this number will be updated when the control is added to a container\r\n     */\r\n    public uniqueId: number;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the control is readonly (default: false).\r\n     * A readonly control will still raise pointer events but will not react to them\r\n     */\r\n    public get isReadOnly() {\r\n        return this._isReadOnly;\r\n    }\r\n\r\n    public set isReadOnly(value: boolean) {\r\n        this._isReadOnly = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the transformed measure, that is the bounding box of the control after applying all transformations\r\n     */\r\n    public get transformedMeasure(): Measure {\r\n        return this._evaluatedMeasure;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an object used to store user defined information for the node\r\n     */\r\n    @serialize()\r\n    public metadata: any = null;\r\n\r\n    /** Gets or sets a boolean indicating if the control can be hit with pointer events */\r\n    @serialize()\r\n    public isHitTestVisible = true;\r\n    /** Gets or sets a boolean indicating if the control can block pointer events. False by default except on the following controls:\r\n     * * Button controls (Button, RadioButton, ToggleButton)\r\n     * * Checkbox\r\n     * * ColorPicker\r\n     * * InputText\r\n     * * Slider\r\n     */\r\n    @serialize()\r\n    public isPointerBlocker = false;\r\n    /** Gets or sets a boolean indicating if the control can be focusable */\r\n    @serialize()\r\n    public isFocusInvisible = false;\r\n\r\n    protected _clipChildren = true;\r\n    /**\r\n     * Sets/Gets a boolean indicating if the children are clipped to the current control bounds.\r\n     * Please note that not clipping children may generate issues with adt.useInvalidateRectOptimization so it is recommended to turn this optimization off if you want to use unclipped children\r\n     */\r\n    public set clipChildren(value: boolean) {\r\n        this._clipChildren = value;\r\n    }\r\n\r\n    @serialize()\r\n    public get clipChildren() {\r\n        return this._clipChildren;\r\n    }\r\n\r\n    protected _clipContent = true;\r\n    /**\r\n     * Sets/Gets a boolean indicating that control content must be clipped\r\n     * Please note that not clipping content may generate issues with adt.useInvalidateRectOptimization so it is recommended to turn this optimization off if you want to use unclipped children\r\n     */\r\n    public set clipContent(value: boolean) {\r\n        this._clipContent = value;\r\n    }\r\n\r\n    @serialize()\r\n    public get clipContent() {\r\n        return this._clipContent;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the current control should cache its rendering (useful when the control does not change often)\r\n     */\r\n    @serialize()\r\n    public useBitmapCache = false;\r\n\r\n    private _cacheData: Nullable<ImageData>;\r\n\r\n    private _shadowOffsetX = 0;\r\n    /** Gets or sets a value indicating the offset to apply on X axis to render the shadow */\r\n    @serialize()\r\n    public get shadowOffsetX() {\r\n        return this._shadowOffsetX;\r\n    }\r\n\r\n    public set shadowOffsetX(value: number) {\r\n        if (this._shadowOffsetX === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowOffsetX = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _shadowOffsetY = 0;\r\n    /** Gets or sets a value indicating the offset to apply on Y axis to render the shadow */\r\n    @serialize()\r\n    public get shadowOffsetY() {\r\n        return this._shadowOffsetY;\r\n    }\r\n\r\n    public set shadowOffsetY(value: number) {\r\n        if (this._shadowOffsetY === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowOffsetY = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _shadowBlur = 0;\r\n    private _previousShadowBlur = 0;\r\n    /** Gets or sets a value indicating the amount of blur to use to render the shadow */\r\n    @serialize()\r\n    public get shadowBlur() {\r\n        return this._shadowBlur;\r\n    }\r\n\r\n    public set shadowBlur(value: number) {\r\n        if (this._shadowBlur === value) {\r\n            return;\r\n        }\r\n\r\n        this._previousShadowBlur = this._shadowBlur;\r\n\r\n        this._shadowBlur = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _shadowColor = \"black\";\r\n    /** Gets or sets a value indicating the color of the shadow (black by default ie. \"#000\") */\r\n    @serialize()\r\n    public get shadowColor() {\r\n        return this._shadowColor;\r\n    }\r\n\r\n    public set shadowColor(value: string) {\r\n        if (this._shadowColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the cursor to use when the control is hovered */\r\n    @serialize()\r\n    public hoverCursor = \"\";\r\n\r\n    /** @internal */\r\n    protected _linkOffsetX = new ValueAndUnit(0);\r\n    /** @internal */\r\n    protected _linkOffsetY = new ValueAndUnit(0);\r\n\r\n    // Properties\r\n\r\n    /** Gets the control type name */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n     * Get the current class name of the control.\r\n     * @returns current class name\r\n     */\r\n    public getClassName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the accessibility tag to describe the control for accessibility purpose.\r\n     * By default, GUI controls already indicate accessibility info, but one can override the info using this tag.\r\n     */\r\n    public set accessibilityTag(value: Nullable<IAccessibilityTag>) {\r\n        this._accessibilityTag = value;\r\n        this.onAccessibilityTagChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    public get accessibilityTag() {\r\n        return this._accessibilityTag;\r\n    }\r\n\r\n    protected _accessibilityTag: Nullable<IAccessibilityTag> = null;\r\n\r\n    public onAccessibilityTagChangedObservable = new Observable<Nullable<IAccessibilityTag>>();\r\n\r\n    /**\r\n     * An event triggered when pointer wheel is scrolled\r\n     */\r\n    public onWheelObservable = new Observable<Vector2>();\r\n    /**\r\n     * An event triggered when the pointer moves over the control.\r\n     */\r\n    public onPointerMoveObservable = new Observable<Vector2>();\r\n\r\n    /**\r\n     * An event triggered when the pointer moves out of the control.\r\n     */\r\n    public onPointerOutObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered when the pointer taps the control\r\n     */\r\n    public onPointerDownObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer up\r\n     */\r\n    public onPointerUpObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when a control is clicked on\r\n     */\r\n    public onPointerClickObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer enters the control\r\n     */\r\n    public onPointerEnterObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered when the control is marked as dirty\r\n     */\r\n    public onDirtyObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered before drawing the control\r\n     */\r\n    public onBeforeDrawObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered after the control was drawn\r\n     */\r\n    public onAfterDrawObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered when the control has been disposed\r\n     */\r\n    public onDisposeObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered when the control isVisible is changed\r\n     */\r\n    public onIsVisibleChangedObservable = new Observable<boolean>();\r\n\r\n    /**\r\n     * Get the hosting AdvancedDynamicTexture\r\n     */\r\n    public get host(): AdvancedDynamicTexture {\r\n        return this._host;\r\n    }\r\n\r\n    /** Gets or set information about font offsets (used to render and align text) */\r\n    @serialize()\r\n    public get fontOffset(): { ascent: number; height: number; descent: number } {\r\n        return this._fontOffset;\r\n    }\r\n\r\n    public set fontOffset(offset: { ascent: number; height: number; descent: number }) {\r\n        this._fontOffset = offset;\r\n    }\r\n\r\n    /** Gets or sets alpha value for the control (1 means opaque and 0 means entirely transparent) */\r\n    @serialize()\r\n    public get alpha(): number {\r\n        return this._alpha;\r\n    }\r\n\r\n    public set alpha(value: number) {\r\n        if (this._alpha === value) {\r\n            return;\r\n        }\r\n        this._alphaSet = true;\r\n        this._alpha = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a number indicating size of stroke we want to highlight the control with (mostly for debugging purpose)\r\n     */\r\n    public get highlightLineWidth(): number {\r\n        return this._highlightLineWidth;\r\n    }\r\n\r\n    public set highlightLineWidth(value: number) {\r\n        if (this._highlightLineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._highlightLineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that we want to highlight the control (mostly for debugging purpose)\r\n     */\r\n    public get isHighlighted(): boolean {\r\n        return this._isHighlighted;\r\n    }\r\n\r\n    public set isHighlighted(value: boolean) {\r\n        if (this._isHighlighted === value) {\r\n            return;\r\n        }\r\n\r\n        this._isHighlighted = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a string defining the color to use for highlighting this control\r\n     */\r\n    public get highlightColor(): string {\r\n        return this._highlightColor;\r\n    }\r\n\r\n    public set highlightColor(value: string) {\r\n        if (this._highlightColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._highlightColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on X axis (1 by default)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling\r\n     */\r\n    @serialize()\r\n    public get scaleX(): number {\r\n        return this._scaleX;\r\n    }\r\n\r\n    public set scaleX(value: number) {\r\n        if (this._scaleX === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on Y axis (1 by default)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling\r\n     */\r\n    @serialize()\r\n    public get scaleY(): number {\r\n        return this._scaleY;\r\n    }\r\n\r\n    public set scaleY(value: number) {\r\n        if (this._scaleY === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the rotation angle (0 by default)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling\r\n     */\r\n    @serialize()\r\n    public get rotation(): number {\r\n        return this._rotation;\r\n    }\r\n\r\n    public set rotation(value: number) {\r\n        if (this._rotation === value) {\r\n            return;\r\n        }\r\n\r\n        this._rotation = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on Y axis (0 by default)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling\r\n     */\r\n    @serialize()\r\n    public get transformCenterY(): number {\r\n        return this._transformCenterY;\r\n    }\r\n\r\n    public set transformCenterY(value: number) {\r\n        if (this._transformCenterY === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on X axis (0 by default)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling\r\n     */\r\n    @serialize()\r\n    public get transformCenterX(): number {\r\n        return this._transformCenterX;\r\n    }\r\n\r\n    public set transformCenterX(value: number) {\r\n        if (this._transformCenterX === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the horizontal alignment\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#alignments\r\n     */\r\n    @serialize()\r\n    public get horizontalAlignment(): number {\r\n        return this._horizontalAlignment;\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        if (this._horizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._horizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the vertical alignment\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#alignments\r\n     */\r\n    @serialize()\r\n    public get verticalAlignment(): number {\r\n        return this._verticalAlignment;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        if (this._verticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._verticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _fixedRatio = 0;\r\n    public set fixedRatio(value: number) {\r\n        if (this._fixedRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._fixedRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a fixed ratio for this control.\r\n     * When different from 0, the ratio is used to compute the \"second\" dimension.\r\n     * The first dimension used in the computation is the last one set (by setting width / widthInPixels or height / heightInPixels), and the\r\n     * second dimension is computed as first dimension * fixedRatio\r\n     */\r\n    @serialize()\r\n    public get fixedRatio(): number {\r\n        return this._fixedRatio;\r\n    }\r\n\r\n    private _fixedRatioMasterIsWidth = true;\r\n    set fixedRatioMasterIsWidth(value: boolean) {\r\n        if (this._fixedRatioMasterIsWidth === value) {\r\n            return;\r\n        }\r\n        this._fixedRatioMasterIsWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the fixed ratio is set on the width instead of the height. True by default.\r\n     * When the height of a control is set, this property is changed to false.\r\n     */\r\n    @serialize()\r\n    get fixedRatioMasterIsWidth(): boolean {\r\n        return this._fixedRatioMasterIsWidth;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control width\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        this._fixedRatioMasterIsWidth = true;\r\n\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the control width in pixel\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public get widthInPixels(): number {\r\n        return this._width.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set widthInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this._fixedRatioMasterIsWidth = true;\r\n        this.width = value + \"px\";\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control height\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    public set height(value: string | number) {\r\n        this._fixedRatioMasterIsWidth = false;\r\n\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control height in pixel\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public get heightInPixels(): number {\r\n        return this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set heightInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this._fixedRatioMasterIsWidth = false;\r\n        this.height = value + \"px\";\r\n    }\r\n\r\n    /** Gets or set font family */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font style */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets style\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#styles\r\n     */\r\n    @serialize()\r\n    public get style(): Nullable<Style> {\r\n        return this._style;\r\n    }\r\n\r\n    public set style(value: Nullable<Style>) {\r\n        if (this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        this._style = value;\r\n\r\n        if (this._style) {\r\n            this._styleObserver = this._style.onChangedObservable.add(() => {\r\n                this._markAsDirty();\r\n                this._resetFontCache();\r\n            });\r\n        }\r\n\r\n        this._markAsDirty();\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** @internal */\r\n    public get _isFontSizeInPercentage(): boolean {\r\n        return this._fontSize.isPercentage;\r\n    }\r\n\r\n    /** Gets or sets font size in pixels */\r\n    public get fontSizeInPixels(): number {\r\n        const fontSizeToUse = this._style ? this._style._fontSize : this._fontSize;\r\n\r\n        if (fontSizeToUse.isPixel) {\r\n            return fontSizeToUse.getValue(this._host);\r\n        }\r\n\r\n        return fontSizeToUse.getValueInPixel(this._host, this._tempParentMeasure.height || this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set fontSizeInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.fontSize = value + \"px\";\r\n    }\r\n\r\n    /** Gets or sets font size */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this._markAsDirty();\r\n            this._resetFontCache();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets foreground color */\r\n    @serialize()\r\n    public get color(): string {\r\n        return this._color;\r\n    }\r\n\r\n    public set color(value: string) {\r\n        if (this._color === value) {\r\n            return;\r\n        }\r\n\r\n        this._color = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets gradient. Setting a gradient will override the color */\r\n    @serialize()\r\n    public get gradient(): Nullable<BaseGradient> {\r\n        return this._gradient;\r\n    }\r\n\r\n    public set gradient(value: Nullable<BaseGradient>) {\r\n        if (this._gradient === value) {\r\n            return;\r\n        }\r\n\r\n        this._gradient = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets z index which is used to reorder controls on the z axis */\r\n    @serialize()\r\n    public get zIndex(): number {\r\n        return this._zIndex;\r\n    }\r\n\r\n    public set zIndex(value: number) {\r\n        if (this.zIndex === value) {\r\n            return;\r\n        }\r\n\r\n        this._zIndex = value;\r\n\r\n        if (this.parent) {\r\n            this.parent._reOrderControl(this);\r\n        }\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can be rendered */\r\n    @serialize()\r\n    public get notRenderable(): boolean {\r\n        return this._doNotRender;\r\n    }\r\n\r\n    public set notRenderable(value: boolean) {\r\n        if (this._doNotRender === value) {\r\n            return;\r\n        }\r\n\r\n        this._doNotRender = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    @serialize()\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n        this._markAsDirty(true);\r\n\r\n        this.onIsVisibleChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    /** Gets a boolean indicating that the control needs to update its rendering */\r\n    public get isDirty(): boolean {\r\n        return this._isDirty;\r\n    }\r\n\r\n    /**\r\n     * Gets the current linked mesh (or null if none)\r\n     */\r\n    public get linkedMesh(): Nullable<TransformNode> {\r\n        return this._linkedMesh;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding should work like in CSS.\r\n     * Basically, it will add the padding amount on each side of the parent control for its children.\r\n     */\r\n    @serialize()\r\n    public get descendantsOnlyPadding(): boolean {\r\n        return this._descendantsOnlyPadding;\r\n    }\r\n\r\n    public set descendantsOnlyPadding(value: boolean) {\r\n        if (this._descendantsOnlyPadding === value) {\r\n            return;\r\n        }\r\n\r\n        this._descendantsOnlyPadding = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the left of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get paddingLeft(): string | number {\r\n        return this._paddingLeft.toString(this._host);\r\n    }\r\n\r\n    public set paddingLeft(value: string | number) {\r\n        if (this._paddingLeft.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding in pixels to use on the left of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public get paddingLeftInPixels(): number {\r\n        return this._paddingLeft.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingLeftInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.paddingLeft = value + \"px\";\r\n    }\r\n\r\n    /** @internal */\r\n    public get _paddingLeftInPixels(): number {\r\n        if (this._descendantsOnlyPadding) {\r\n            return 0;\r\n        }\r\n\r\n        return this.paddingLeftInPixels;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the right of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get paddingRight(): string | number {\r\n        return this._paddingRight.toString(this._host);\r\n    }\r\n\r\n    public set paddingRight(value: string | number) {\r\n        if (this._paddingRight.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding in pixels to use on the right of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public get paddingRightInPixels(): number {\r\n        return this._paddingRight.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingRightInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.paddingRight = value + \"px\";\r\n    }\r\n\r\n    /** @internal */\r\n    public get _paddingRightInPixels(): number {\r\n        if (this._descendantsOnlyPadding) {\r\n            return 0;\r\n        }\r\n\r\n        return this.paddingRightInPixels;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the top of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get paddingTop(): string | number {\r\n        return this._paddingTop.toString(this._host);\r\n    }\r\n\r\n    public set paddingTop(value: string | number) {\r\n        if (this._paddingTop.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding in pixels to use on the top of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public get paddingTopInPixels(): number {\r\n        return this._paddingTop.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingTopInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.paddingTop = value + \"px\";\r\n    }\r\n\r\n    /** @internal */\r\n    public get _paddingTopInPixels(): number {\r\n        if (this._descendantsOnlyPadding) {\r\n            return 0;\r\n        }\r\n\r\n        return this.paddingTopInPixels;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the bottom of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get paddingBottom(): string | number {\r\n        return this._paddingBottom.toString(this._host);\r\n    }\r\n\r\n    public set paddingBottom(value: string | number) {\r\n        if (this._paddingBottom.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding in pixels to use on the bottom of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public get paddingBottomInPixels(): number {\r\n        return this._paddingBottom.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingBottomInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.paddingBottom = value + \"px\";\r\n    }\r\n\r\n    /** @internal */\r\n    public get _paddingBottomInPixels(): number {\r\n        if (this._descendantsOnlyPadding) {\r\n            return 0;\r\n        }\r\n\r\n        return this.paddingBottomInPixels;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the left coordinate of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get left(): string | number {\r\n        return this._left.toString(this._host);\r\n    }\r\n\r\n    public set left(value: string | number) {\r\n        if (this._left.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the left coordinate in pixels of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public get leftInPixels(): number {\r\n        return this._left.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set leftInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.left = value + \"px\";\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the top coordinate of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get top(): string | number {\r\n        return this._top.toString(this._host);\r\n    }\r\n\r\n    public set top(value: string | number) {\r\n        if (this._top.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the top coordinate in pixels of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public get topInPixels(): number {\r\n        return this._top.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set topInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.top = value + \"px\";\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on X axis to the linked mesh\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions\r\n     */\r\n    @serialize()\r\n    public get linkOffsetX(): string | number {\r\n        return this._linkOffsetX.toString(this._host);\r\n    }\r\n\r\n    public set linkOffsetX(value: string | number) {\r\n        if (this._linkOffsetX.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset in pixels on X axis to the linked mesh\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions\r\n     */\r\n    public get linkOffsetXInPixels(): number {\r\n        return this._linkOffsetX.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set linkOffsetXInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.linkOffsetX = value + \"px\";\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on Y axis to the linked mesh\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions\r\n     */\r\n    @serialize()\r\n    public get linkOffsetY(): string | number {\r\n        return this._linkOffsetY.toString(this._host);\r\n    }\r\n\r\n    public set linkOffsetY(value: string | number) {\r\n        if (this._linkOffsetY.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset in pixels on Y axis to the linked mesh\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions\r\n     */\r\n    public get linkOffsetYInPixels(): number {\r\n        return this._linkOffsetY.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set linkOffsetYInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.linkOffsetY = value + \"px\";\r\n    }\r\n\r\n    /** Gets the center coordinate on X axis */\r\n    public get centerX(): number {\r\n        return this._currentMeasure.left + this._currentMeasure.width / 2;\r\n    }\r\n\r\n    /** Gets the center coordinate on Y axis */\r\n    public get centerY(): number {\r\n        return this._currentMeasure.top + this._currentMeasure.height / 2;\r\n    }\r\n\r\n    /** Gets or sets if control is Enabled */\r\n    @serialize()\r\n    public get isEnabled(): boolean {\r\n        return this._isEnabled;\r\n    }\r\n\r\n    public set isEnabled(value: boolean) {\r\n        if (this._isEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._isEnabled = value;\r\n        this._markAsDirty();\r\n        // if this control or any of it's descendants are under a pointer, we need to fire a pointerOut event\r\n        const recursivelyFirePointerOut = (control: Control) => {\r\n            if (!control.host) {\r\n                return;\r\n            }\r\n            for (const pointer in control.host._lastControlOver) {\r\n                if (control === this.host._lastControlOver[pointer]) {\r\n                    control._onPointerOut(control, null, true);\r\n                    delete control.host._lastControlOver[pointer];\r\n                }\r\n            }\r\n            if ((control as Container).children !== undefined) {\r\n                (control as Container).children.forEach(recursivelyFirePointerOut);\r\n            }\r\n        };\r\n        recursivelyFirePointerOut(this);\r\n    }\r\n    /** Gets or sets background color of control if it's disabled. Only applies to Button class. */\r\n    @serialize()\r\n    public get disabledColor(): string {\r\n        return this._disabledColor;\r\n    }\r\n\r\n    public set disabledColor(value: string) {\r\n        if (this._disabledColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._disabledColor = value;\r\n        this._markAsDirty();\r\n    }\r\n    /** Gets or sets front color of control if it's disabled. Only applies to Checkbox class. */\r\n    @serialize()\r\n    public get disabledColorItem(): string {\r\n        return this._disabledColorItem;\r\n    }\r\n\r\n    public set disabledColorItem(value: string) {\r\n        if (this._disabledColorItem === value) {\r\n            return;\r\n        }\r\n\r\n        this._disabledColorItem = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets/sets the overlap group of the control.\r\n     * Controls with overlapGroup set to a number can be deoverlapped.\r\n     * Controls with overlapGroup set to undefined are not deoverlapped.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#deoverlapping\r\n     */\r\n    @serialize()\r\n    public overlapGroup?: number;\r\n    /**\r\n     * Gets/sets the deoverlap movement multiplier\r\n     */\r\n    @serialize()\r\n    public overlapDeltaMultiplier?: number;\r\n\r\n    /**\r\n     * Array of animations\r\n     */\r\n    animations: Nullable<Animation[]> = null;\r\n\r\n    // Functions\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the name of the control\r\n     */\r\n    constructor(\r\n        /** defines the name of the control */\r\n        public name?: string\r\n    ) {}\r\n\r\n    /** @internal */\r\n    protected _getTypeName(): string {\r\n        return \"Control\";\r\n    }\r\n\r\n    /**\r\n     * Gets the first ascendant in the hierarchy of the given type\r\n     * @param className defines the required type\r\n     * @returns the ascendant or null if not found\r\n     */\r\n    public getAscendantOfClass(className: string): Nullable<Control> {\r\n        if (!this.parent) {\r\n            return null;\r\n        }\r\n\r\n        if (this.parent.getClassName() === className) {\r\n            return this.parent;\r\n        }\r\n\r\n        return this.parent.getAscendantOfClass(className);\r\n    }\r\n\r\n    /**\r\n     * Mark control element as dirty\r\n     * @param force force non visible elements to be marked too\r\n     */\r\n    public markAsDirty(force = false): void {\r\n        this._markAsDirty(force);\r\n    }\r\n\r\n    /**\r\n     * Mark the element and its children as dirty\r\n     */\r\n    public markAllAsDirty(): void {\r\n        this._markAllAsDirty();\r\n    }\r\n\r\n    /** @internal */\r\n    public _resetFontCache(): void {\r\n        this._fontSet = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Determines if a container is an ascendant of the current control\r\n     * @param container defines the container to look for\r\n     * @returns true if the container is one of the ascendant of the control\r\n     */\r\n    public isAscendant(container: Control): boolean {\r\n        if (!this.parent) {\r\n            return false;\r\n        }\r\n\r\n        if (this.parent === container) {\r\n            return true;\r\n        }\r\n\r\n        return this.parent.isAscendant(container);\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in local space\r\n     */\r\n    public getLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        const result = Vector2.Zero();\r\n\r\n        this.getLocalCoordinatesToRef(globalCoordinates, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @param result defines the target vector2 where to store the result\r\n     * @returns the current control\r\n     */\r\n    public getLocalCoordinatesToRef(globalCoordinates: Vector2, result: Vector2): Control {\r\n        result.x = globalCoordinates.x - this._currentMeasure.left;\r\n        result.y = globalCoordinates.y - this._currentMeasure.top;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in parent local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in parent local space\r\n     */\r\n    public getParentLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        const result = Vector2.Zero();\r\n\r\n        result.x = globalCoordinates.x - this._cachedParentMeasure.left;\r\n        result.y = globalCoordinates.y - this._cachedParentMeasure.top;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Move the current control to a vector3 position projected onto the screen.\r\n     * @param position defines the target position\r\n     * @param scene defines the hosting scene\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene): void {\r\n        if (!this._host || this.parent !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        const globalViewport = this._host._getGlobalViewport();\r\n        const projectedPosition = Vector3.Project(position, Matrix.IdentityReadOnly, scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Will store all controls that have this control as ascendant in a given array\r\n     * @param results defines the array where to store the descendants\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     */\r\n    public getDescendantsToRef(results: Control[], directDescendantsOnly: boolean = false, predicate?: (control: Control) => boolean): void {\r\n        // Do nothing by default\r\n    }\r\n\r\n    /**\r\n     * Will return all controls that have this control as ascendant\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @returns all child controls\r\n     */\r\n    public getDescendants(directDescendantsOnly?: boolean, predicate?: (control: Control) => boolean): Control[] {\r\n        const results = new Array<Control>();\r\n\r\n        this.getDescendantsToRef(results, directDescendantsOnly, predicate);\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Link current control with a target mesh\r\n     * @param mesh defines the mesh to link with\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions\r\n     */\r\n    public linkWithMesh(mesh: Nullable<TransformNode>): void {\r\n        if (!this._host || (this.parent && this.parent !== this._host._rootContainer)) {\r\n            if (mesh) {\r\n                Tools.Error(\"Cannot link a control to a mesh if the control is not at root level\");\r\n            }\r\n            return;\r\n        }\r\n\r\n        const index = this._host._linkedControls.indexOf(this);\r\n        if (index !== -1) {\r\n            this._linkedMesh = mesh;\r\n            if (!mesh) {\r\n                this._host._linkedControls.splice(index, 1);\r\n            }\r\n            return;\r\n        } else if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._linkedMesh = mesh;\r\n        this._host._linkedControls.push(this);\r\n    }\r\n\r\n    /**\r\n     * Shorthand function to set the top, right, bottom, and left padding values on the control.\r\n     * @param { string | number} paddingTop - The value of the top padding.\r\n     * @param { string | number} paddingRight - The value of the right padding. If omitted, top is used.\r\n     * @param { string | number} paddingBottom - The value of the bottom padding. If omitted, top is used.\r\n     * @param { string | number} paddingLeft - The value of the left padding. If omitted, right is used.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public setPadding(paddingTop: string | number, paddingRight?: string | number, paddingBottom?: string | number, paddingLeft?: string | number) {\r\n        const top = paddingTop;\r\n        const right = paddingRight ?? top;\r\n        const bottom = paddingBottom ?? top;\r\n        const left = paddingLeft ?? right;\r\n\r\n        this.paddingTop = top;\r\n        this.paddingRight = right;\r\n        this.paddingBottom = bottom;\r\n        this.paddingLeft = left;\r\n    }\r\n\r\n    /**\r\n     * Shorthand funtion to set the top, right, bottom, and left padding values in pixels on the control.\r\n     * @param { number} paddingTop - The value in pixels of the top padding.\r\n     * @param { number} paddingRight - The value in pixels of the right padding. If omitted, top is used.\r\n     * @param { number} paddingBottom - The value in pixels of the bottom padding. If omitted, top is used.\r\n     * @param { number} paddingLeft - The value in pixels of the left padding. If omitted, right is used.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public setPaddingInPixels(paddingTop: number, paddingRight?: number, paddingBottom?: number, paddingLeft?: number) {\r\n        const top = paddingTop;\r\n        const right = paddingRight ?? top;\r\n        const bottom = paddingBottom ?? top;\r\n        const left = paddingLeft ?? right;\r\n\r\n        this.paddingTopInPixels = top;\r\n        this.paddingRightInPixels = right;\r\n        this.paddingBottomInPixels = bottom;\r\n        this.paddingLeftInPixels = left;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3): void {\r\n        const oldLeft = this._left.getValue(this._host);\r\n        const oldTop = this._top.getValue(this._host);\r\n\r\n        const parentMeasure = this.parent?._currentMeasure;\r\n        if (parentMeasure) {\r\n            this._processMeasures(parentMeasure, this._host.getContext());\r\n        }\r\n\r\n        let newLeft = projectedPosition.x + this._linkOffsetX.getValue(this._host) - this._currentMeasure.width / 2;\r\n        let newTop = projectedPosition.y + this._linkOffsetY.getValue(this._host) - this._currentMeasure.height / 2;\r\n\r\n        const leftAndTopIgnoreAdaptiveScaling = this._left.ignoreAdaptiveScaling && this._top.ignoreAdaptiveScaling;\r\n        if (leftAndTopIgnoreAdaptiveScaling) {\r\n            if (Math.abs(newLeft - oldLeft) < 0.5) {\r\n                newLeft = oldLeft;\r\n            }\r\n\r\n            if (Math.abs(newTop - oldTop) < 0.5) {\r\n                newTop = oldTop;\r\n            }\r\n        }\r\n\r\n        if (!leftAndTopIgnoreAdaptiveScaling && oldLeft === newLeft && oldTop === newTop) {\r\n            return;\r\n        }\r\n\r\n        this.left = newLeft + \"px\";\r\n        this.top = newTop + \"px\";\r\n\r\n        this._left.ignoreAdaptiveScaling = true;\r\n        this._top.ignoreAdaptiveScaling = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _offsetLeft(offset: number) {\r\n        this._isDirty = true;\r\n        this._currentMeasure.left += offset;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _offsetTop(offset: number) {\r\n        this._isDirty = true;\r\n        this._currentMeasure.top += offset;\r\n    }\r\n\r\n    /** @internal */\r\n    public _markMatrixAsDirty(): void {\r\n        this._isMatrixDirty = true;\r\n        this._flagDescendantsAsMatrixDirty();\r\n    }\r\n\r\n    /** @internal */\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        // No child\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _intersectsRect(rect: Measure, context?: ICanvasRenderingContext) {\r\n        // make sure we are transformed correctly before checking intersections. no-op if nothing is dirty.\r\n        this._transform(context);\r\n        if (this._evaluatedMeasure.left >= rect.left + rect.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this._evaluatedMeasure.top >= rect.top + rect.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this._evaluatedMeasure.left + this._evaluatedMeasure.width <= rect.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this._evaluatedMeasure.top + this._evaluatedMeasure.height <= rect.top) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @internal */\r\n    protected _computeAdditionalOffsetX() {\r\n        return 0;\r\n    }\r\n\r\n    /** @internal */\r\n    protected _computeAdditionalOffsetY() {\r\n        return 0;\r\n    }\r\n\r\n    /** @internal */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public invalidateRect() {\r\n        this._transform();\r\n        if (this.host && this.host.useInvalidateRectOptimization) {\r\n            // Rotate by transform to get the measure transformed to global space\r\n            this._currentMeasure.transformToRef(this._transformMatrix, this._tmpMeasureA);\r\n            // get the boudning box of the current measure and last frames measure in global space and invalidate it\r\n            // the previous measure is used to properly clear a control that is scaled down\r\n            Measure.CombineToRef(this._tmpMeasureA, this._prevCurrentMeasureTransformedIntoGlobalSpace, this._tmpMeasureA);\r\n\r\n            // Expand rect based on shadows\r\n            const shadowOffsetX = this.shadowOffsetX;\r\n            const shadowOffsetY = this.shadowOffsetY;\r\n            const shadowBlur = Math.max(this._previousShadowBlur, this.shadowBlur);\r\n\r\n            const leftShadowOffset = Math.min(Math.min(shadowOffsetX, 0) - shadowBlur * 2, 0);\r\n            const rightShadowOffset = Math.max(Math.max(shadowOffsetX, 0) + shadowBlur * 2, 0);\r\n            const topShadowOffset = Math.min(Math.min(shadowOffsetY, 0) - shadowBlur * 2, 0);\r\n            const bottomShadowOffset = Math.max(Math.max(shadowOffsetY, 0) + shadowBlur * 2, 0);\r\n\r\n            const offsetX = this._computeAdditionalOffsetX();\r\n            const offsetY = this._computeAdditionalOffsetY();\r\n\r\n            this.host.invalidateRect(\r\n                Math.floor(this._tmpMeasureA.left + leftShadowOffset - offsetX),\r\n                Math.floor(this._tmpMeasureA.top + topShadowOffset - offsetY),\r\n                Math.ceil(this._tmpMeasureA.left + this._tmpMeasureA.width + rightShadowOffset + offsetX),\r\n                Math.ceil(this._tmpMeasureA.top + this._tmpMeasureA.height + bottomShadowOffset + offsetY)\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _markAsDirty(force = false): void {\r\n        if (!this._isVisible && !force) {\r\n            return;\r\n        }\r\n\r\n        this._isDirty = true;\r\n        this._markMatrixAsDirty();\r\n\r\n        // Redraw only this rectangle\r\n        if (this._host) {\r\n            this._host.markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _markAllAsDirty(): void {\r\n        this._markAsDirty();\r\n\r\n        if (this._font) {\r\n            this._prepareFont();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _link(host: AdvancedDynamicTexture): void {\r\n        this._host = host;\r\n        if (this._host) {\r\n            this.uniqueId = this._host.getScene()!.getUniqueId();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _transform(context?: ICanvasRenderingContext): void {\r\n        if (!this._isMatrixDirty && this._scaleX === 1 && this._scaleY === 1 && this._rotation === 0) {\r\n            return;\r\n        }\r\n\r\n        // postTranslate\r\n        const offsetX = this._currentMeasure.width * this._transformCenterX + this._currentMeasure.left;\r\n        const offsetY = this._currentMeasure.height * this._transformCenterY + this._currentMeasure.top;\r\n        if (context) {\r\n            context.translate(offsetX, offsetY);\r\n\r\n            // rotate\r\n            context.rotate(this._rotation);\r\n\r\n            // scale\r\n            context.scale(this._scaleX, this._scaleY);\r\n\r\n            // preTranslate\r\n            context.translate(-offsetX, -offsetY);\r\n        }\r\n        // Need to update matrices?\r\n        if (this._isMatrixDirty || this._cachedOffsetX !== offsetX || this._cachedOffsetY !== offsetY) {\r\n            this._cachedOffsetX = offsetX;\r\n            this._cachedOffsetY = offsetY;\r\n            this._isMatrixDirty = false;\r\n            this._flagDescendantsAsMatrixDirty();\r\n\r\n            Matrix2D.ComposeToRef(-offsetX, -offsetY, this._rotation, this._scaleX, this._scaleY, this.parent ? this.parent._transformMatrix : null, this._transformMatrix);\r\n\r\n            this._transformMatrix.invertToRef(this._invertTransformMatrix);\r\n            this._currentMeasure.transformToRef(this._transformMatrix, this._evaluatedMeasure);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _renderHighlight(context: ICanvasRenderingContext): void {\r\n        if (!this.isHighlighted) {\r\n            return;\r\n        }\r\n\r\n        context.save();\r\n        context.strokeStyle = this._highlightColor;\r\n        context.lineWidth = this._highlightLineWidth;\r\n\r\n        this._renderHighlightSpecific(context);\r\n        context.restore();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _renderHighlightSpecific(context: ICanvasRenderingContext): void {\r\n        context.strokeRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n    }\r\n\r\n    protected _getColor(context: ICanvasRenderingContext): string | ICanvasGradient {\r\n        return this.gradient ? this.gradient.getCanvasGradient(context) : this.color;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _applyStates(context: ICanvasRenderingContext): void {\r\n        if (this._isFontSizeInPercentage) {\r\n            this._fontSet = true;\r\n        }\r\n\r\n        if (this._host && this._host.useSmallestIdeal && !this._font) {\r\n            this._fontSet = true;\r\n        }\r\n\r\n        if (this._fontSet) {\r\n            this._prepareFont();\r\n            this._fontSet = false;\r\n        }\r\n\r\n        if (this._font) {\r\n            context.font = this._font;\r\n        }\r\n\r\n        if (this._color || this.gradient) {\r\n            context.fillStyle = this._getColor(context);\r\n        }\r\n\r\n        if (Control.AllowAlphaInheritance) {\r\n            context.globalAlpha *= this._alpha;\r\n        } else if (this._alphaSet) {\r\n            context.globalAlpha = this.parent && !this.parent.renderToIntermediateTexture ? this.parent.alpha * this._alpha : this._alpha;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _layout(parentMeasure: Measure, context: ICanvasRenderingContext): boolean {\r\n        if (!this.isDirty && (!this.isVisible || this.notRenderable)) {\r\n            return false;\r\n        }\r\n\r\n        if (this._isDirty || !this._cachedParentMeasure.isEqualsTo(parentMeasure)) {\r\n            this.host._numLayoutCalls++;\r\n\r\n            this._currentMeasure.addAndTransformToRef(\r\n                this._transformMatrix,\r\n                -this._paddingLeftInPixels | 0,\r\n                -this._paddingTopInPixels | 0,\r\n                this._paddingRightInPixels | 0,\r\n                this._paddingBottomInPixels | 0,\r\n                this._prevCurrentMeasureTransformedIntoGlobalSpace\r\n            );\r\n\r\n            context.save();\r\n\r\n            this._applyStates(context);\r\n\r\n            let rebuildCount = 0;\r\n            do {\r\n                this._rebuildLayout = false;\r\n                this._processMeasures(parentMeasure, context);\r\n                rebuildCount++;\r\n            } while (this._rebuildLayout && rebuildCount < 3);\r\n\r\n            if (rebuildCount >= 3) {\r\n                Logger.Error(`Layout cycle detected in GUI (Control name=${this.name}, uniqueId=${this.uniqueId})`);\r\n            }\r\n\r\n            context.restore();\r\n            this.invalidateRect();\r\n            this._evaluateClippingState(parentMeasure);\r\n        }\r\n\r\n        this._wasDirty = this._isDirty;\r\n        this._isDirty = false;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _processMeasures(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        this._tempPaddingMeasure.copyFrom(parentMeasure);\r\n\r\n        // Apply padding if in correct mode\r\n        if (this.parent && this.parent.descendantsOnlyPadding) {\r\n            this._tempPaddingMeasure.left += this.parent.paddingLeftInPixels;\r\n            this._tempPaddingMeasure.top += this.parent.paddingTopInPixels;\r\n            this._tempPaddingMeasure.width -= this.parent.paddingLeftInPixels + this.parent.paddingRightInPixels;\r\n            this._tempPaddingMeasure.height -= this.parent.paddingTopInPixels + this.parent.paddingBottomInPixels;\r\n        }\r\n\r\n        this._currentMeasure.copyFrom(this._tempPaddingMeasure);\r\n\r\n        // Let children take some pre-measurement actions\r\n        this._preMeasure(this._tempPaddingMeasure, context);\r\n\r\n        this._measure();\r\n        this._computeAlignment(this._tempPaddingMeasure, context);\r\n\r\n        // Convert to int values\r\n        this._currentMeasure.left = this._currentMeasure.left | 0;\r\n        this._currentMeasure.top = this._currentMeasure.top | 0;\r\n        this._currentMeasure.width = this._currentMeasure.width | 0;\r\n        this._currentMeasure.height = this._currentMeasure.height | 0;\r\n\r\n        // Let children add more features\r\n        this._additionalProcessing(this._tempPaddingMeasure, context);\r\n\r\n        this._cachedParentMeasure.copyFrom(this._tempPaddingMeasure);\r\n\r\n        this._currentMeasure.transformToRef(this._transformMatrix, this._evaluatedMeasure);\r\n        if (this.onDirtyObservable.hasObservers()) {\r\n            this.onDirtyObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    protected _evaluateClippingState(parentMeasure: Measure) {\r\n        // Since transformMatrix is used here, we need to have it freshly computed\r\n        this._transform();\r\n        this._currentMeasure.transformToRef(this._transformMatrix, this._evaluatedMeasure);\r\n        if (this.parent && this.parent.clipChildren) {\r\n            parentMeasure.transformToRef(this.parent._transformMatrix, this._evaluatedParentMeasure);\r\n            // Early clip\r\n            if (this._evaluatedMeasure.left > this._evaluatedParentMeasure.left + this._evaluatedParentMeasure.width) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n\r\n            if (this._evaluatedMeasure.left + this._evaluatedMeasure.width < this._evaluatedParentMeasure.left) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n\r\n            if (this._evaluatedMeasure.top > this._evaluatedParentMeasure.top + this._evaluatedParentMeasure.height) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n\r\n            if (this._evaluatedMeasure.top + this._evaluatedMeasure.height < this._evaluatedParentMeasure.top) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n        }\r\n\r\n        this._isClipped = false;\r\n    }\r\n\r\n    /** @internal */\r\n    public _measure(): void {\r\n        // Width / Height\r\n        if (this._width.isPixel) {\r\n            this._currentMeasure.width = this._width.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width *= this._width.getValue(this._host);\r\n        }\r\n\r\n        if (this._height.isPixel) {\r\n            this._currentMeasure.height = this._height.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height *= this._height.getValue(this._host);\r\n        }\r\n\r\n        if (this._fixedRatio !== 0) {\r\n            if (this._fixedRatioMasterIsWidth) {\r\n                this._currentMeasure.height = this._currentMeasure.width * this._fixedRatio;\r\n            } else {\r\n                this._currentMeasure.width = this._currentMeasure.height * this._fixedRatio;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _computeAlignment(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        const width = this._currentMeasure.width;\r\n        const height = this._currentMeasure.height;\r\n\r\n        const parentWidth = parentMeasure.width;\r\n        const parentHeight = parentMeasure.height;\r\n\r\n        // Left / top\r\n        let x = 0;\r\n        let y = 0;\r\n\r\n        switch (this.horizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = parentWidth - width;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (parentWidth - width) / 2;\r\n                break;\r\n        }\r\n\r\n        switch (this.verticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                y = 0;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                y = parentHeight - height;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                y = (parentHeight - height) / 2;\r\n                break;\r\n        }\r\n\r\n        if (!this.descendantsOnlyPadding) {\r\n            if (this._paddingLeft.isPixel) {\r\n                this._currentMeasure.left += this._paddingLeft.getValue(this._host);\r\n                this._currentMeasure.width -= this._paddingLeft.getValue(this._host);\r\n            } else {\r\n                this._currentMeasure.left += parentWidth * this._paddingLeft.getValue(this._host);\r\n                this._currentMeasure.width -= parentWidth * this._paddingLeft.getValue(this._host);\r\n            }\r\n\r\n            if (this._paddingRight.isPixel) {\r\n                this._currentMeasure.width -= this._paddingRight.getValue(this._host);\r\n            } else {\r\n                this._currentMeasure.width -= parentWidth * this._paddingRight.getValue(this._host);\r\n            }\r\n\r\n            if (this._paddingTop.isPixel) {\r\n                this._currentMeasure.top += this._paddingTop.getValue(this._host);\r\n                this._currentMeasure.height -= this._paddingTop.getValue(this._host);\r\n            } else {\r\n                this._currentMeasure.top += parentHeight * this._paddingTop.getValue(this._host);\r\n                this._currentMeasure.height -= parentHeight * this._paddingTop.getValue(this._host);\r\n            }\r\n\r\n            if (this._paddingBottom.isPixel) {\r\n                this._currentMeasure.height -= this._paddingBottom.getValue(this._host);\r\n            } else {\r\n                this._currentMeasure.height -= parentHeight * this._paddingBottom.getValue(this._host);\r\n            }\r\n        }\r\n\r\n        if (this._left.isPixel) {\r\n            this._currentMeasure.left += this._left.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._left.getValue(this._host);\r\n        }\r\n\r\n        if (this._top.isPixel) {\r\n            this._currentMeasure.top += this._top.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._top.getValue(this._host);\r\n        }\r\n\r\n        this._currentMeasure.left += x;\r\n        this._currentMeasure.top += y;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _preMeasure(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _clipForChildren(context: ICanvasRenderingContext): void {\r\n        // DO nothing\r\n    }\r\n\r\n    private static _ClipMeasure = new Measure(0, 0, 0, 0);\r\n    private _tmpMeasureA = new Measure(0, 0, 0, 0);\r\n    private _clip(context: ICanvasRenderingContext, invalidatedRectangle?: Nullable<Measure>) {\r\n        context.beginPath();\r\n        Control._ClipMeasure.copyFrom(this._currentMeasure);\r\n        if (invalidatedRectangle) {\r\n            // Rotate the invalidated rect into the control's space\r\n            invalidatedRectangle.transformToRef(this._invertTransformMatrix, this._tmpMeasureA);\r\n\r\n            // Get the intersection of the rect in context space and the current context\r\n            const intersection = new Measure(0, 0, 0, 0);\r\n            intersection.left = Math.max(this._tmpMeasureA.left, this._currentMeasure.left);\r\n            intersection.top = Math.max(this._tmpMeasureA.top, this._currentMeasure.top);\r\n            intersection.width = Math.min(this._tmpMeasureA.left + this._tmpMeasureA.width, this._currentMeasure.left + this._currentMeasure.width) - intersection.left;\r\n            intersection.height = Math.min(this._tmpMeasureA.top + this._tmpMeasureA.height, this._currentMeasure.top + this._currentMeasure.height) - intersection.top;\r\n            Control._ClipMeasure.copyFrom(intersection);\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            const shadowOffsetX = this.shadowOffsetX;\r\n            const shadowOffsetY = this.shadowOffsetY;\r\n            const shadowBlur = this.shadowBlur;\r\n\r\n            const leftShadowOffset = Math.min(Math.min(shadowOffsetX, 0) - shadowBlur * 2, 0);\r\n            const rightShadowOffset = Math.max(Math.max(shadowOffsetX, 0) + shadowBlur * 2, 0);\r\n            const topShadowOffset = Math.min(Math.min(shadowOffsetY, 0) - shadowBlur * 2, 0);\r\n            const bottomShadowOffset = Math.max(Math.max(shadowOffsetY, 0) + shadowBlur * 2, 0);\r\n\r\n            context.rect(\r\n                Control._ClipMeasure.left + leftShadowOffset,\r\n                Control._ClipMeasure.top + topShadowOffset,\r\n                Control._ClipMeasure.width + rightShadowOffset - leftShadowOffset,\r\n                Control._ClipMeasure.height + bottomShadowOffset - topShadowOffset\r\n            );\r\n        } else {\r\n            context.rect(Control._ClipMeasure.left, Control._ClipMeasure.top, Control._ClipMeasure.width, Control._ClipMeasure.height);\r\n        }\r\n\r\n        context.clip();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _render(context: ICanvasRenderingContext, invalidatedRectangle?: Nullable<Measure>): boolean {\r\n        if (!this.isVisible || this.notRenderable || this._isClipped) {\r\n            this._isDirty = false;\r\n            return false;\r\n        }\r\n\r\n        this.host._numRenderCalls++;\r\n\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        // Transform\r\n        this._transform(context);\r\n\r\n        // Clip\r\n        if (this.clipContent) {\r\n            this._clip(context, invalidatedRectangle);\r\n        }\r\n\r\n        if (this.onBeforeDrawObservable.hasObservers()) {\r\n            this.onBeforeDrawObservable.notifyObservers(this);\r\n        }\r\n\r\n        if (this.useBitmapCache && !this._wasDirty && this._cacheData) {\r\n            context.putImageData(this._cacheData, this._currentMeasure.left, this._currentMeasure.top);\r\n        } else {\r\n            this._draw(context, invalidatedRectangle);\r\n        }\r\n\r\n        if (this.useBitmapCache && this._wasDirty) {\r\n            this._cacheData = context.getImageData(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n        }\r\n\r\n        this._renderHighlight(context);\r\n\r\n        if (this.onAfterDrawObservable.hasObservers()) {\r\n            this.onAfterDrawObservable.notifyObservers(this);\r\n        }\r\n\r\n        context.restore();\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _draw(context: ICanvasRenderingContext, invalidatedRectangle?: Nullable<Measure>): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Tests if a given coordinates belong to the current control\r\n     * @param x defines x coordinate to test\r\n     * @param y defines y coordinate to test\r\n     * @returns true if the coordinates are inside the control\r\n     */\r\n    public contains(x: number, y: number): boolean {\r\n        // Invert transform\r\n        this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n\r\n        x = this._transformedPosition.x;\r\n        y = this._transformedPosition.y;\r\n\r\n        // Check\r\n        if (x < this._currentMeasure.left) {\r\n            return false;\r\n        }\r\n\r\n        if (x > this._currentMeasure.left + this._currentMeasure.width) {\r\n            return false;\r\n        }\r\n\r\n        if (y < this._currentMeasure.top) {\r\n            return false;\r\n        }\r\n\r\n        if (y > this._currentMeasure.top + this._currentMeasure.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isPointerBlocker) {\r\n            this._host._shouldBlockPointer = true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _processPicking(x: number, y: number, pi: Nullable<PointerInfoBase>, type: number, pointerId: number, buttonIndex: number, deltaX?: number, deltaY?: number): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        if (!this.isHitTestVisible || !this.isVisible || this._doNotRender) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pi, pointerId, buttonIndex, deltaX, deltaY);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerMove(target: Control, coordinates: Vector2, pointerId: number, pi: Nullable<PointerInfoBase>): void {\r\n        const canNotify: boolean = this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this, pi);\r\n\r\n        if (canNotify && this.parent != null && !this.isPointerBlocker) {\r\n            this.parent._onPointerMove(target, coordinates, pointerId, pi);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerEnter(target: Control, pi: Nullable<PointerInfoBase>): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) {\r\n            // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n        this._enterCount++;\r\n\r\n        const canNotify: boolean = this.onPointerEnterObservable.notifyObservers(this, -1, target, this, pi);\r\n\r\n        if (canNotify && this.parent != null && !this.isPointerBlocker) {\r\n            this.parent._onPointerEnter(target, pi);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerOut(target: Control, pi: Nullable<PointerInfoBase>, force = false): void {\r\n        if (!force && (!this._isEnabled || target === this)) {\r\n            return;\r\n        }\r\n        this._enterCount = 0;\r\n\r\n        let canNotify: boolean = true;\r\n\r\n        if (!target.isAscendant(this)) {\r\n            canNotify = this.onPointerOutObservable.notifyObservers(this, -1, target, this, pi);\r\n        }\r\n\r\n        if (canNotify && this.parent != null && !this.isPointerBlocker) {\r\n            this.parent._onPointerOut(target, pi, force);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: Nullable<PointerInfoBase>): boolean {\r\n        // Prevent pointerout to lose control context.\r\n        // Event redundancy is checked inside the function.\r\n        this._onPointerEnter(this, pi);\r\n\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        const canNotify: boolean = this.onPointerDownObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this, pi);\r\n\r\n        if (canNotify && this.parent != null && !this.isPointerBlocker) {\r\n            this.parent._onPointerDown(target, coordinates, pointerId, buttonIndex, pi);\r\n        }\r\n\r\n        if (pi && this.uniqueId !== this._host.rootContainer.uniqueId) {\r\n            this._host._capturedPointerIds.add((pi.event as IPointerEvent).pointerId);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean, pi?: Nullable<PointerInfoBase>): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        let canNotifyClick: boolean = notifyClick;\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            canNotifyClick = this.onPointerClickObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this, pi);\r\n        }\r\n        const canNotify: boolean = this.onPointerUpObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this, pi);\r\n\r\n        if (canNotify && this.parent != null && !this.isPointerBlocker) {\r\n            this.parent._onPointerUp(target, coordinates, pointerId, buttonIndex, canNotifyClick, pi);\r\n        }\r\n\r\n        if (pi && this.uniqueId !== this._host.rootContainer.uniqueId) {\r\n            this._host._capturedPointerIds.delete((pi.event as IPointerEvent).pointerId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector2.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (const key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector2.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onWheelScroll(deltaX?: number, deltaY?: number): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n        const canNotify: boolean = this.onWheelObservable.notifyObservers(new Vector2(deltaX, deltaY));\r\n\r\n        if (canNotify && this.parent != null) {\r\n            this.parent._onWheelScroll(deltaX, deltaY);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _onCanvasBlur(): void {}\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _processObservables(\r\n        type: number,\r\n        x: number,\r\n        y: number,\r\n        pi: Nullable<PointerInfoBase>,\r\n        pointerId: number,\r\n        buttonIndex: number,\r\n        deltaX?: number,\r\n        deltaY?: number\r\n    ): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        this._dummyVector2.copyFromFloats(x, y);\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, this._dummyVector2, pointerId, pi);\r\n\r\n            const previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this, pi);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this, pi);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, this._dummyVector2, pointerId, buttonIndex, pi);\r\n            this._host._registerLastControlDown(this, pointerId);\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, this._dummyVector2, pointerId, buttonIndex, true, pi);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERWHEEL) {\r\n            if (this._host._lastControlOver[pointerId]) {\r\n                this._host._lastControlOver[pointerId]._onWheelScroll(deltaX, deltaY);\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _prepareFont() {\r\n        if (!this._font && !this._fontSet) {\r\n            return;\r\n        }\r\n\r\n        if (this._style) {\r\n            this._font = this._style.fontStyle + \" \" + this._style.fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._style.fontFamily;\r\n        } else {\r\n            this._font = this._fontStyle + \" \" + this._fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._fontFamily;\r\n        }\r\n\r\n        this._fontOffset = Control._GetFontOffset(this._font);\r\n\r\n        //children need to be refreshed\r\n        this.getDescendants().forEach((child) => child._markAllAsDirty());\r\n    }\r\n\r\n    /**\r\n     * Clones a control and its descendants\r\n     * @param host the texture where the control will be instantiated. Can be empty, in which case the control will be created on the same texture\r\n     * @returns the cloned control\r\n     */\r\n    public clone(host?: AdvancedDynamicTexture): Control {\r\n        const serialization: any = {};\r\n        this.serialize(serialization);\r\n\r\n        const controlType = Tools.Instantiate(\"BABYLON.GUI.\" + serialization.className);\r\n        const cloned = new controlType();\r\n        cloned.parse(serialization, host);\r\n\r\n        return cloned;\r\n    }\r\n\r\n    /**\r\n     * Parses a serialized object into this control\r\n     * @param serializedObject the object with the serialized properties\r\n     * @param host the texture where the control will be instantiated. Can be empty, in which case the control will be created on the same texture\r\n     * @returns this control\r\n     */\r\n    public parse(serializedObject: any, host?: AdvancedDynamicTexture): Control {\r\n        SerializationHelper.Parse(() => this, serializedObject, null);\r\n\r\n        this.name = serializedObject.name;\r\n\r\n        this._parseFromContent(serializedObject, host ?? this._host);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Serializes the current control\r\n     * @param serializationObject defined the JSON serialized object\r\n     */\r\n    public serialize(serializationObject: any) {\r\n        SerializationHelper.Serialize(this, serializationObject);\r\n        serializationObject.name = this.name;\r\n        serializationObject.className = this.getClassName();\r\n\r\n        // Call prepareFont to guarantee the font is properly set before serializing\r\n        this._prepareFont();\r\n        if (this._font) {\r\n            serializationObject.fontFamily = this._fontFamily;\r\n            serializationObject.fontSize = this.fontSize;\r\n            serializationObject.fontWeight = this.fontWeight;\r\n            serializationObject.fontStyle = this.fontStyle;\r\n        }\r\n\r\n        if (this._gradient) {\r\n            serializationObject.gradient = {};\r\n            this._gradient.serialize(serializationObject.gradient);\r\n        }\r\n\r\n        // Animations\r\n        SerializationHelper.AppendSerializedAnimations(this, serializationObject);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _parseFromContent(serializedObject: any, host: AdvancedDynamicTexture) {\r\n        if (serializedObject.fontFamily) {\r\n            this.fontFamily = serializedObject.fontFamily;\r\n        }\r\n\r\n        if (serializedObject.fontSize) {\r\n            this.fontSize = serializedObject.fontSize;\r\n        }\r\n\r\n        if (serializedObject.fontWeight) {\r\n            this.fontWeight = serializedObject.fontWeight;\r\n        }\r\n\r\n        if (serializedObject.fontStyle) {\r\n            this.fontStyle = serializedObject.fontStyle;\r\n        }\r\n\r\n        // Gradient\r\n        if (serializedObject.gradient) {\r\n            const className = Tools.Instantiate(\"BABYLON.GUI.\" + serializedObject.gradient.className);\r\n            this._gradient = new className();\r\n            this._gradient?.parse(serializedObject.gradient);\r\n        }\r\n\r\n        // Animations\r\n        if (serializedObject.animations) {\r\n            this.animations = [];\r\n            for (let animationIndex = 0; animationIndex < serializedObject.animations.length; animationIndex++) {\r\n                const parsedAnimation = serializedObject.animations[animationIndex];\r\n                const internalClass = GetClass(\"BABYLON.Animation\");\r\n                if (internalClass) {\r\n                    this.animations.push(internalClass.Parse(parsedAnimation));\r\n                }\r\n            }\r\n\r\n            if (serializedObject.autoAnimate && this._host && this._host.getScene()) {\r\n                this._host\r\n                    .getScene()!\r\n                    .beginAnimation(\r\n                        this,\r\n                        serializedObject.autoAnimateFrom,\r\n                        serializedObject.autoAnimateTo,\r\n                        serializedObject.autoAnimateLoop,\r\n                        serializedObject.autoAnimateSpeed || 1.0\r\n                    );\r\n            }\r\n        }\r\n\r\n        this.fixedRatioMasterIsWidth = serializedObject.fixedRatioMasterIsWidth ?? this.fixedRatioMasterIsWidth;\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        this.onDirtyObservable.clear();\r\n        this.onBeforeDrawObservable.clear();\r\n        this.onAfterDrawObservable.clear();\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n        this.onWheelObservable.clear();\r\n\r\n        if (this._styleObserver && this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        if (this.parent) {\r\n            this.parent.removeControl(this);\r\n            this.parent = null;\r\n        }\r\n\r\n        if (this._host) {\r\n            const index = this._host._linkedControls.indexOf(this);\r\n            if (index > -1) {\r\n                this.linkWithMesh(null);\r\n            }\r\n        }\r\n\r\n        // Callback\r\n        this.onDisposeObservable.notifyObservers(this);\r\n        this.onDisposeObservable.clear();\r\n    }\r\n\r\n    // Statics\r\n    private static _HORIZONTAL_ALIGNMENT_LEFT = 0;\r\n    private static _HORIZONTAL_ALIGNMENT_RIGHT = 1;\r\n    private static _HORIZONTAL_ALIGNMENT_CENTER = 2;\r\n\r\n    private static _VERTICAL_ALIGNMENT_TOP = 0;\r\n    private static _VERTICAL_ALIGNMENT_BOTTOM = 1;\r\n    private static _VERTICAL_ALIGNMENT_CENTER = 2;\r\n\r\n    /** HORIZONTAL_ALIGNMENT_LEFT */\r\n    public static get HORIZONTAL_ALIGNMENT_LEFT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_LEFT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_RIGHT */\r\n    public static get HORIZONTAL_ALIGNMENT_RIGHT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_RIGHT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_CENTER */\r\n    public static get HORIZONTAL_ALIGNMENT_CENTER(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_TOP */\r\n    public static get VERTICAL_ALIGNMENT_TOP(): number {\r\n        return Control._VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_BOTTOM */\r\n    public static get VERTICAL_ALIGNMENT_BOTTOM(): number {\r\n        return Control._VERTICAL_ALIGNMENT_BOTTOM;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_CENTER */\r\n    public static get VERTICAL_ALIGNMENT_CENTER(): number {\r\n        return Control._VERTICAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    private static _FontHeightSizes: { [key: string]: { ascent: number; height: number; descent: number } } = {};\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _GetFontOffset(font: string): { ascent: number; height: number; descent: number } {\r\n        if (Control._FontHeightSizes[font]) {\r\n            return Control._FontHeightSizes[font];\r\n        }\r\n\r\n        const engine = EngineStore.LastCreatedEngine;\r\n        if (!engine) {\r\n            throw new Error(\"Invalid engine. Unable to create a canvas.\");\r\n        }\r\n\r\n        const result = engine.getFontOffset(font);\r\n        Control._FontHeightSizes[font] = result;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a Control from parsed data\r\n     * @param serializedObject defines parsed data\r\n     * @param host defines the hosting AdvancedDynamicTexture\r\n     * @returns a new Control\r\n     */\r\n    public static Parse(serializedObject: any, host: AdvancedDynamicTexture): Control {\r\n        const controlType = Tools.Instantiate(\"BABYLON.GUI.\" + serializedObject.className);\r\n        const control = SerializationHelper.Parse(() => new controlType(), serializedObject, null);\r\n\r\n        control.name = serializedObject.name;\r\n\r\n        control._parseFromContent(serializedObject, host);\r\n\r\n        return control;\r\n    }\r\n\r\n    public static AddHeader: (control: Control, text: string, size: string | number, options: { isHorizontal: boolean; controlFirst: boolean }) => any = () => {};\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected static drawEllipse(x: number, y: number, width: number, height: number, context: ICanvasRenderingContext): void {\r\n        context.translate(x, y);\r\n        context.scale(width, height);\r\n\r\n        context.beginPath();\r\n        context.arc(0, 0, 1, 0, 2 * Math.PI);\r\n        context.closePath();\r\n\r\n        context.scale(1 / width, 1 / height);\r\n        context.translate(-x, -y);\r\n    }\r\n\r\n    /**\r\n     * Returns true if the control is ready to be used\r\n     * @returns\r\n     */\r\n    public isReady(): boolean {\r\n        // Most controls are ready by default, so the default implementation is to return true\r\n        return true;\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Control\", Control);\r\n","import { Observable } from \"core/Misc/observable\";\r\nimport type { Measure } from \"../measure\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { Nullable } from \"core/types\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext, ITextMetrics } from \"core/Engines/ICanvas\";\r\nimport { EngineStore } from \"core/Engines/engineStore\";\r\n\r\n/**\r\n * Enum that determines the text-wrapping mode to use.\r\n */\r\nexport enum TextWrapping {\r\n    /**\r\n     * Clip the text when it's larger than Control.width; this is the default mode.\r\n     */\r\n    Clip = 0,\r\n\r\n    /**\r\n     * Wrap the text word-wise, i.e. try to add line-breaks at word boundary to fit within Control.width.\r\n     */\r\n    WordWrap = 1,\r\n\r\n    /**\r\n     * Ellipsize the text, i.e. shrink with trailing … when text is larger than Control.width.\r\n     */\r\n    Ellipsis = 2,\r\n\r\n    /**\r\n     * Wrap the text word-wise and clip the text when the text's height is larger than the Control.height, and shrink the last line with trailing … .\r\n     */\r\n    WordWrapEllipsis,\r\n}\r\n\r\n/**\r\n * Class used to create text block control\r\n */\r\nexport class TextBlock extends Control {\r\n    private _text = \"\";\r\n    private _textWrapping = TextWrapping.Clip;\r\n    private _textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    private _textVerticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n\r\n    private _lines: any[];\r\n    private _resizeToFit: boolean = false;\r\n    private _lineSpacing: ValueAndUnit = new ValueAndUnit(0);\r\n    private _outlineWidth: number = 0;\r\n    private _outlineColor: string = \"white\";\r\n    private _underline: boolean = false;\r\n    private _lineThrough: boolean = false;\r\n    private _wordDivider: string = \" \";\r\n    private _forceResizeWidth: boolean = false;\r\n    private _applyOutlineToUnderline: boolean = false;\r\n\r\n    /**\r\n     * An event triggered after the text is changed\r\n     */\r\n    public onTextChangedObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n     * An event triggered after the text was broken up into lines\r\n     */\r\n    public onLinesReadyObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n     * Function used to split a string into words. By default, a string is split at each space character found\r\n     */\r\n    public wordSplittingFunction: Nullable<(line: string) => string[]>;\r\n\r\n    /**\r\n     * Return the line list (you may need to use the onLinesReadyObservable to make sure the list is ready)\r\n     */\r\n    public get lines(): any[] {\r\n        return this._lines;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    @serialize()\r\n    public get resizeToFit(): boolean {\r\n        return this._resizeToFit;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public set resizeToFit(value: boolean) {\r\n        if (this._resizeToFit === value) {\r\n            return;\r\n        }\r\n        this._resizeToFit = value;\r\n\r\n        if (this._resizeToFit) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    @serialize()\r\n    public get textWrapping(): TextWrapping | boolean {\r\n        return this._textWrapping;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public set textWrapping(value: TextWrapping | boolean) {\r\n        if (this._textWrapping === value) {\r\n            return;\r\n        }\r\n        this._textWrapping = +value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    @serialize()\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n        this._text = value + \"\"; // Making sure it is a text\r\n        this._markAsDirty();\r\n\r\n        this.onTextChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    @serialize()\r\n    public get textHorizontalAlignment(): number {\r\n        return this._textHorizontalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textHorizontalAlignment(value: number) {\r\n        if (this._textHorizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textHorizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    @serialize()\r\n    public get textVerticalAlignment(): number {\r\n        return this._textVerticalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textVerticalAlignment(value: number) {\r\n        if (this._textVerticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textVerticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    @serialize()\r\n    public set lineSpacing(value: string | number) {\r\n        if (this._lineSpacing.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public get lineSpacing(): string | number {\r\n        return this._lineSpacing.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    @serialize()\r\n    public get outlineWidth(): number {\r\n        return this._outlineWidth;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public set outlineWidth(value: number) {\r\n        if (this._outlineWidth === value) {\r\n            return;\r\n        }\r\n        this._outlineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that text must have underline\r\n     */\r\n    @serialize()\r\n    public get underline(): boolean {\r\n        return this._underline;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that text must have underline\r\n     */\r\n    public set underline(value: boolean) {\r\n        if (this._underline === value) {\r\n            return;\r\n        }\r\n        this._underline = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that text must be crossed out\r\n     */\r\n    @serialize()\r\n    public get lineThrough(): boolean {\r\n        return this._lineThrough;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that text must be crossed out\r\n     */\r\n    public set lineThrough(value: boolean) {\r\n        if (this._lineThrough === value) {\r\n            return;\r\n        }\r\n        this._lineThrough = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * If the outline should be applied to the underline/strike-through too. Has different behavior in Edge/Chrome vs Firefox.\r\n     */\r\n    @serialize()\r\n    public get applyOutlineToUnderline(): boolean {\r\n        return this._applyOutlineToUnderline;\r\n    }\r\n\r\n    public set applyOutlineToUnderline(value: boolean) {\r\n        if (this._applyOutlineToUnderline === value) {\r\n            return;\r\n        }\r\n        this._applyOutlineToUnderline = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    @serialize()\r\n    public get outlineColor(): string {\r\n        return this._outlineColor;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public set outlineColor(value: string) {\r\n        if (this._outlineColor === value) {\r\n            return;\r\n        }\r\n        this._outlineColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets word divider\r\n     */\r\n    @serialize()\r\n    public get wordDivider(): string {\r\n        return this._wordDivider;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets word divider\r\n     */\r\n    public set wordDivider(value: string) {\r\n        if (this._wordDivider === value) {\r\n            return;\r\n        }\r\n        this._wordDivider = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * By default, if a text block has text wrapping other than Clip, its width\r\n     * is not resized even if resizeToFit = true. This parameter forces the width\r\n     * to be resized.\r\n     */\r\n    @serialize()\r\n    public get forceResizeWidth(): boolean {\r\n        return this._forceResizeWidth;\r\n    }\r\n\r\n    public set forceResizeWidth(value: boolean) {\r\n        if (this._forceResizeWidth === value) {\r\n            return;\r\n        }\r\n        this._forceResizeWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new TextBlock object\r\n     * @param name defines the name of the control\r\n     * @param text defines the text to display (empty string by default)\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the name of the control\r\n         */\r\n        public name?: string,\r\n        text: string = \"\"\r\n    ) {\r\n        super(name);\r\n\r\n        this.text = text;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"TextBlock\";\r\n    }\r\n\r\n    protected _processMeasures(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        if (!this._fontOffset || this.isDirty) {\r\n            this._fontOffset = Control._GetFontOffset(context.font);\r\n        }\r\n        super._processMeasures(parentMeasure, context);\r\n\r\n        // Prepare lines\r\n        this._lines = this._breakLines(this._currentMeasure.width, this._currentMeasure.height, context);\r\n        this.onLinesReadyObservable.notifyObservers(this);\r\n\r\n        let maxLineWidth: number = 0;\r\n\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n\r\n            if (line.width > maxLineWidth) {\r\n                maxLineWidth = line.width;\r\n            }\r\n        }\r\n\r\n        if (this._resizeToFit) {\r\n            if (this._textWrapping === TextWrapping.Clip || this._forceResizeWidth) {\r\n                const newWidth = Math.ceil(this._paddingLeftInPixels) + Math.ceil(this._paddingRightInPixels) + Math.ceil(maxLineWidth);\r\n                if (newWidth !== this._width.getValueInPixel(this._host, this._tempParentMeasure.width)) {\r\n                    this._width.updateInPlace(newWidth, ValueAndUnit.UNITMODE_PIXEL);\r\n                    this._rebuildLayout = true;\r\n                }\r\n            }\r\n            let newHeight = (this._paddingTopInPixels + this._paddingBottomInPixels + this._fontOffset.height * this._lines.length) | 0;\r\n\r\n            if (this._lines.length > 0 && this._lineSpacing.internalValue !== 0) {\r\n                let lineSpacing = 0;\r\n                if (this._lineSpacing.isPixel) {\r\n                    lineSpacing = this._lineSpacing.getValue(this._host);\r\n                } else {\r\n                    lineSpacing = this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n                }\r\n\r\n                newHeight += (this._lines.length - 1) * lineSpacing;\r\n            }\r\n\r\n            if (newHeight !== this._height.internalValue) {\r\n                this._height.updateInPlace(newHeight, ValueAndUnit.UNITMODE_PIXEL);\r\n                this._rebuildLayout = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _drawText(text: string, textWidth: number, y: number, context: ICanvasRenderingContext): void {\r\n        const width = this._currentMeasure.width;\r\n        let x = 0;\r\n        switch (this._textHorizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = width - textWidth;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (width - textWidth) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this.outlineWidth) {\r\n            context.strokeText(text, this._currentMeasure.left + x, y);\r\n        }\r\n        context.fillText(text, this._currentMeasure.left + x, y);\r\n\r\n        if (this._underline) {\r\n            this._drawLine(this._currentMeasure.left + x, y + 3, this._currentMeasure.left + x + textWidth, y + 3, context);\r\n        }\r\n\r\n        if (this._lineThrough) {\r\n            this._drawLine(this._currentMeasure.left + x, y - this.fontSizeInPixels / 3, this._currentMeasure.left + x + textWidth, y - this.fontSizeInPixels / 3, context);\r\n        }\r\n    }\r\n\r\n    private _drawLine(xFrom: number, yFrom: number, xTo: number, yTo: number, context: ICanvasRenderingContext): void {\r\n        context.beginPath();\r\n        context.lineWidth = Math.round(this.fontSizeInPixels * 0.05);\r\n        context.moveTo(xFrom, yFrom);\r\n        context.lineTo(xTo, yTo);\r\n        if (this.outlineWidth && this.applyOutlineToUnderline) {\r\n            context.stroke();\r\n            context.fill();\r\n        } else {\r\n            const currentStroke = context.strokeStyle;\r\n            context.strokeStyle = context.fillStyle;\r\n            context.stroke();\r\n            context.strokeStyle = currentStroke;\r\n        }\r\n        context.closePath();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        // Render lines\r\n        this._renderLines(context);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _applyStates(context: ICanvasRenderingContext): void {\r\n        super._applyStates(context);\r\n        if (this.outlineWidth) {\r\n            context.lineWidth = this.outlineWidth;\r\n            context.strokeStyle = this.outlineColor;\r\n            context.lineJoin = \"miter\";\r\n            context.miterLimit = 2;\r\n        }\r\n    }\r\n\r\n    private _linesTemp: object[] = [];\r\n\r\n    protected _breakLines(refWidth: number, refHeight: number, context: ICanvasRenderingContext): object[] {\r\n        this._linesTemp.length = 0;\r\n        const _lines = this.text.split(\"\\n\");\r\n\r\n        if (this._textWrapping === TextWrapping.Ellipsis) {\r\n            for (const _line of _lines) {\r\n                this._linesTemp.push(this._parseLineEllipsis(_line, refWidth, context));\r\n            }\r\n        } else if (this._textWrapping === TextWrapping.WordWrap) {\r\n            for (const _line of _lines) {\r\n                this._linesTemp.push(...this._parseLineWordWrap(_line, refWidth, context));\r\n            }\r\n        } else if (this._textWrapping === TextWrapping.WordWrapEllipsis) {\r\n            for (const _line of _lines) {\r\n                this._linesTemp.push(...this._parseLineWordWrapEllipsis(_line, refWidth, refHeight!, context));\r\n            }\r\n        } else {\r\n            for (const _line of _lines) {\r\n                this._linesTemp.push(this._parseLine(_line, context));\r\n            }\r\n        }\r\n\r\n        return this._linesTemp;\r\n    }\r\n\r\n    protected _parseLine(line: string = \"\", context: ICanvasRenderingContext): object {\r\n        return { text: line, width: this._getTextMetricsWidth(context.measureText(line)) };\r\n    }\r\n\r\n    //Calculate how many characters approximately we need to remove\r\n    private _getCharsToRemove(lineWidth: number, width: number, lineLength: number) {\r\n        const diff = lineWidth > width ? lineWidth - width : 0;\r\n        // This isn't exact unless the font is monospaced\r\n        const charWidth = lineWidth / lineLength;\r\n        const removeChars = Math.max(Math.floor(diff / charWidth), 1);\r\n        return removeChars;\r\n    }\r\n\r\n    protected _parseLineEllipsis(line: string = \"\", width: number, context: ICanvasRenderingContext): object {\r\n        let lineWidth = this._getTextMetricsWidth(context.measureText(line));\r\n\r\n        let removeChars = this._getCharsToRemove(lineWidth, width, line.length);\r\n\r\n        // unicode support. split('') does not work with unicode!\r\n        // make sure Array.from is available\r\n        const characters = Array.from && Array.from(line);\r\n        if (!characters) {\r\n            // no array.from, use the old method\r\n            while (line.length > 2 && lineWidth > width) {\r\n                line = line.slice(0, -removeChars);\r\n                lineWidth = this._getTextMetricsWidth(context.measureText(line + \"…\"));\r\n\r\n                removeChars = this._getCharsToRemove(lineWidth, width, line.length);\r\n            }\r\n            // Add on the end\r\n            line += \"…\";\r\n        } else {\r\n            while (characters.length && lineWidth > width) {\r\n                characters.splice(characters.length - removeChars, removeChars);\r\n                line = `${characters.join(\"\")}…`;\r\n                lineWidth = this._getTextMetricsWidth(context.measureText(line));\r\n\r\n                removeChars = this._getCharsToRemove(lineWidth, width, line.length);\r\n            }\r\n        }\r\n\r\n        return { text: line, width: lineWidth };\r\n    }\r\n\r\n    private _getTextMetricsWidth(textMetrics: ITextMetrics) {\r\n        if (textMetrics.actualBoundingBoxLeft !== undefined) {\r\n            return Math.abs(textMetrics.actualBoundingBoxLeft) + Math.abs(textMetrics.actualBoundingBoxRight);\r\n        }\r\n        return textMetrics.width;\r\n    }\r\n\r\n    protected _parseLineWordWrap(line: string = \"\", width: number, context: ICanvasRenderingContext): object[] {\r\n        const lines = [];\r\n        const words = this.wordSplittingFunction ? this.wordSplittingFunction(line) : line.split(this._wordDivider);\r\n        let lineWidth = this._getTextMetricsWidth(context.measureText(line));\r\n\r\n        for (let n = 0; n < words.length; n++) {\r\n            const testLine = n > 0 ? line + this._wordDivider + words[n] : words[0];\r\n            const testWidth = this._getTextMetricsWidth(context.measureText(testLine));\r\n            if (testWidth > width && n > 0) {\r\n                lines.push({ text: line, width: lineWidth });\r\n                line = words[n];\r\n                lineWidth = this._getTextMetricsWidth(context.measureText(line));\r\n            } else {\r\n                lineWidth = testWidth;\r\n                line = testLine;\r\n            }\r\n        }\r\n        lines.push({ text: line, width: lineWidth });\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _parseLineWordWrapEllipsis(line: string = \"\", width: number, height: number, context: ICanvasRenderingContext): object[] {\r\n        const lines = this._parseLineWordWrap(line, width, context);\r\n        for (let n = 1; n <= lines.length; n++) {\r\n            const currentHeight = this._computeHeightForLinesOf(n);\r\n            if (currentHeight > height && n > 1) {\r\n                const lastLine = lines[n - 2] as { text: string; width: number };\r\n                const currentLine = lines[n - 1] as { text: string; width: number };\r\n                lines[n - 2] = this._parseLineEllipsis(lastLine.text + this._wordDivider + currentLine.text, width, context);\r\n                const linesToRemove = lines.length - n + 1;\r\n                for (let i = 0; i < linesToRemove; i++) {\r\n                    lines.pop();\r\n                }\r\n                return lines;\r\n            }\r\n        }\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _renderLines(context: ICanvasRenderingContext): void {\r\n        if (!this._fontOffset || !this._lines) {\r\n            return;\r\n        }\r\n        const height = this._currentMeasure.height;\r\n        let rootY = 0;\r\n        switch (this._textVerticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                rootY = this._fontOffset.ascent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                rootY = height - this._fontOffset.height * (this._lines.length - 1) - this._fontOffset.descent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                rootY = this._fontOffset.ascent + (height - this._fontOffset.height * this._lines.length) / 2;\r\n                break;\r\n        }\r\n\r\n        rootY += this._currentMeasure.top;\r\n\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n\r\n            if (i !== 0 && this._lineSpacing.internalValue !== 0) {\r\n                if (this._lineSpacing.isPixel) {\r\n                    rootY += this._lineSpacing.getValue(this._host);\r\n                } else {\r\n                    rootY = rootY + this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n                }\r\n            }\r\n\r\n            this._drawText(line.text, line.width, rootY, context);\r\n            rootY += this._fontOffset.height;\r\n        }\r\n    }\r\n\r\n    private _computeHeightForLinesOf(lineCount: number): number {\r\n        let newHeight = this._paddingTopInPixels + this._paddingBottomInPixels + this._fontOffset.height * lineCount;\r\n\r\n        if (lineCount > 0 && this._lineSpacing.internalValue !== 0) {\r\n            let lineSpacing = 0;\r\n            if (this._lineSpacing.isPixel) {\r\n                lineSpacing = this._lineSpacing.getValue(this._host);\r\n            } else {\r\n                lineSpacing = this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n            }\r\n\r\n            newHeight += (lineCount - 1) * lineSpacing;\r\n        }\r\n\r\n        return newHeight;\r\n    }\r\n\r\n    /**\r\n     * Given a width constraint applied on the text block, find the expected height\r\n     * @returns expected height\r\n     */\r\n    public computeExpectedHeight(): number {\r\n        if (this.text && this.widthInPixels) {\r\n            // Should abstract platform instead of using LastCreatedEngine\r\n            const context = EngineStore.LastCreatedEngine?.createCanvas(0, 0).getContext(\"2d\");\r\n            if (context) {\r\n                this._applyStates(context);\r\n                if (!this._fontOffset) {\r\n                    this._fontOffset = Control._GetFontOffset(context.font);\r\n                }\r\n                const lines = this._lines\r\n                    ? this._lines\r\n                    : this._breakLines(\r\n                          this.widthInPixels - this._paddingLeftInPixels - this._paddingRightInPixels,\r\n                          this.heightInPixels - this._paddingTopInPixels - this._paddingBottomInPixels,\r\n                          context\r\n                      );\r\n                return this._computeHeightForLinesOf(lines.length);\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    dispose(): void {\r\n        super.dispose();\r\n\r\n        this.onTextChangedObservable.clear();\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.TextBlock\", TextBlock);\r\n","import type { Nullable } from \"core/types\";\r\nimport { Logger } from \"core/Misc/logger\";\r\n\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport type { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport { DynamicTexture } from \"core/Materials/Textures/dynamicTexture\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport type { BaseGradient } from \"./gradient/BaseGradient\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport { Matrix2D } from \"../math2D\";\r\n\r\n/**\r\n * Root class for 2D containers\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#containers\r\n */\r\nexport class Container extends Control {\r\n    /** @internal */\r\n    public _children = new Array<Control>();\r\n    /** @internal */\r\n    protected _measureForChildren = Measure.Empty();\r\n    /** @internal */\r\n    protected _background = \"\";\r\n    /** @internal */\r\n    protected _backgroundGradient: Nullable<BaseGradient> = null;\r\n    /** @internal */\r\n    protected _adaptWidthToChildren = false;\r\n    /** @internal */\r\n    protected _adaptHeightToChildren = false;\r\n    /** @internal */\r\n    protected _renderToIntermediateTexture: boolean = false;\r\n    /** @internal */\r\n    protected _intermediateTexture: Nullable<DynamicTexture> = null;\r\n\r\n    /** Gets or sets boolean indicating if children should be rendered to an intermediate texture rather than directly to host, useful for alpha blending */\r\n    @serialize()\r\n    public get renderToIntermediateTexture(): boolean {\r\n        return this._renderToIntermediateTexture;\r\n    }\r\n    public set renderToIntermediateTexture(value: boolean) {\r\n        if (this._renderToIntermediateTexture === value) {\r\n            return;\r\n        }\r\n        this._renderToIntermediateTexture = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that layout cycle errors should be displayed on the console\r\n     */\r\n    public logLayoutCycleErrors = false;\r\n\r\n    /**\r\n     * Gets or sets the number of layout cycles (a change involved by a control while evaluating the layout) allowed\r\n     */\r\n    @serialize()\r\n    public maxLayoutCycle = 3;\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children height */\r\n    @serialize()\r\n    public get adaptHeightToChildren(): boolean {\r\n        return this._adaptHeightToChildren;\r\n    }\r\n\r\n    public set adaptHeightToChildren(value: boolean) {\r\n        if (this._adaptHeightToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptHeightToChildren = value;\r\n\r\n        if (value) {\r\n            this.height = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children width */\r\n    @serialize()\r\n    public get adaptWidthToChildren(): boolean {\r\n        return this._adaptWidthToChildren;\r\n    }\r\n\r\n    public set adaptWidthToChildren(value: boolean) {\r\n        if (this._adaptWidthToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptWidthToChildren = value;\r\n\r\n        if (value) {\r\n            this.width = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    @serialize()\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background gradient color. Takes precedence over background */\r\n    @serialize()\r\n    public get backgroundGradient() {\r\n        return this._backgroundGradient;\r\n    }\r\n\r\n    public set backgroundGradient(value: Nullable<BaseGradient>) {\r\n        if (this._backgroundGradient === value) {\r\n            return;\r\n        }\r\n        this._backgroundGradient = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._children;\r\n    }\r\n\r\n    public get isReadOnly() {\r\n        return this._isReadOnly;\r\n    }\r\n\r\n    public set isReadOnly(value: boolean) {\r\n        this._isReadOnly = value;\r\n\r\n        for (const child of this._children) {\r\n            child.isReadOnly = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new Container\r\n     * @param name defines the name of the container\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container\";\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (const child of this.children) {\r\n            child._isClipped = false;\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its name\r\n     * @param name defines the child name to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByName(name: string): Nullable<Control> {\r\n        for (const child of this.children) {\r\n            if (child.name === name) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its type and its name\r\n     * @param name defines the child name to look for\r\n     * @param type defines the child type to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByType(name: string, type: string): Nullable<Control> {\r\n        for (const child of this.children) {\r\n            if (child.typeName === type) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Search for a specific control in children\r\n     * @param control defines the control to look for\r\n     * @returns true if the control is in child list\r\n     */\r\n    public containsControl(control: Control): boolean {\r\n        return this.children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current container\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Nullable<Control>): Container {\r\n        if (!control) {\r\n            return this;\r\n        }\r\n\r\n        const index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control._link(this._host);\r\n\r\n        control._markAllAsDirty();\r\n\r\n        this._reOrderControl(control);\r\n\r\n        this._markAsDirty();\r\n\r\n        this.onControlAddedObservable.notifyObservers(control);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes all controls from the current container\r\n     * @returns the current container\r\n     */\r\n    public clearControls(): Container {\r\n        const children = this.children.slice();\r\n\r\n        for (const child of children) {\r\n            this.removeControl(child);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        const index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n        }\r\n\r\n        control.linkWithMesh(null);\r\n\r\n        if (this._host) {\r\n            this._host._cleanControlAfterRemoval(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n\r\n        this.onControlRemovedObservable.notifyObservers(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * An event triggered when any control is added to this container.\r\n     */\r\n    public onControlAddedObservable = new Observable<Nullable<Control>>();\r\n\r\n    /**\r\n     * An event triggered when any control is removed from this container.\r\n     */\r\n    public onControlRemovedObservable = new Observable<Nullable<Control>>();\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _reOrderControl(control: Control): void {\r\n        const linkedMesh = control.linkedMesh;\r\n\r\n        this.removeControl(control);\r\n\r\n        let wasAdded = false;\r\n        for (let index = 0; index < this._children.length; index++) {\r\n            if (this._children[index].zIndex > control.zIndex) {\r\n                this._children.splice(index, 0, control);\r\n                wasAdded = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (!wasAdded) {\r\n            this._children.push(control);\r\n        }\r\n\r\n        control.parent = this;\r\n\r\n        if (linkedMesh) {\r\n            control.linkWithMesh(linkedMesh);\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _offsetLeft(offset: number) {\r\n        super._offsetLeft(offset);\r\n\r\n        for (const child of this._children) {\r\n            child._offsetLeft(offset);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _offsetTop(offset: number) {\r\n        super._offsetTop(offset);\r\n\r\n        for (const child of this._children) {\r\n            child._offsetTop(offset);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _markAllAsDirty(): void {\r\n        super._markAllAsDirty();\r\n\r\n        for (let index = 0; index < this._children.length; index++) {\r\n            this._children[index]._markAllAsDirty();\r\n        }\r\n    }\r\n\r\n    protected _getBackgroundColor(context: ICanvasRenderingContext) {\r\n        return this._backgroundGradient ? this._backgroundGradient.getCanvasGradient(context) : this._background;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _localDraw(context: ICanvasRenderingContext): void {\r\n        if (this._background || this._backgroundGradient) {\r\n            context.save();\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            context.fillStyle = this._getBackgroundColor(context);\r\n\r\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            context.restore();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _link(host: AdvancedDynamicTexture): void {\r\n        super._link(host);\r\n\r\n        for (const child of this._children) {\r\n            child._link(host);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    protected _beforeLayout() {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _processMeasures(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        if (this._isDirty || !this._cachedParentMeasure.isEqualsTo(parentMeasure)) {\r\n            super._processMeasures(parentMeasure, context);\r\n            this._evaluateClippingState(parentMeasure);\r\n            if (this._renderToIntermediateTexture) {\r\n                if (this._intermediateTexture && this._host.getScene() != this._intermediateTexture.getScene()) {\r\n                    this._intermediateTexture.dispose();\r\n                    this._intermediateTexture = null;\r\n                }\r\n                if (!this._intermediateTexture) {\r\n                    this._intermediateTexture = new DynamicTexture(\r\n                        \"\",\r\n                        { width: this._currentMeasure.width, height: this._currentMeasure.height },\r\n                        this._host.getScene(),\r\n                        false,\r\n                        Texture.NEAREST_SAMPLINGMODE,\r\n                        Constants.TEXTUREFORMAT_RGBA,\r\n                        false\r\n                    );\r\n                    this._intermediateTexture.hasAlpha = true;\r\n                } else {\r\n                    this._intermediateTexture.scaleTo(this._currentMeasure.width, this._currentMeasure.height);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _layout(parentMeasure: Measure, context: ICanvasRenderingContext): boolean {\r\n        if (!this.isDirty && (!this.isVisible || this.notRenderable)) {\r\n            return false;\r\n        }\r\n\r\n        this.host._numLayoutCalls++;\r\n\r\n        if (this._isDirty) {\r\n            this._currentMeasure.transformToRef(this._transformMatrix, this._prevCurrentMeasureTransformedIntoGlobalSpace);\r\n        }\r\n\r\n        let rebuildCount = 0;\r\n\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        this._beforeLayout();\r\n\r\n        do {\r\n            let computedWidth = -1;\r\n            let computedHeight = -1;\r\n            this._rebuildLayout = false;\r\n            this._processMeasures(parentMeasure, context);\r\n\r\n            if (!this._isClipped) {\r\n                for (const child of this._children) {\r\n                    child._tempParentMeasure.copyFrom(this._measureForChildren);\r\n\r\n                    if (child._layout(this._measureForChildren, context)) {\r\n                        if (child.isVisible && !child.notRenderable) {\r\n                            if (this.adaptWidthToChildren && child._width.isPixel) {\r\n                                computedWidth = Math.max(computedWidth, child._currentMeasure.width + child._paddingLeftInPixels + child._paddingRightInPixels);\r\n                            }\r\n                            if (this.adaptHeightToChildren && child._height.isPixel) {\r\n                                computedHeight = Math.max(computedHeight, child._currentMeasure.height + child._paddingTopInPixels + child._paddingBottomInPixels);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (this.adaptWidthToChildren && computedWidth >= 0) {\r\n                    computedWidth += this.paddingLeftInPixels + this.paddingRightInPixels;\r\n                    if (this.width !== computedWidth + \"px\") {\r\n                        this.parent?._markAsDirty();\r\n                        this.width = computedWidth + \"px\";\r\n                        this._width.ignoreAdaptiveScaling = true;\r\n                        this._rebuildLayout = true;\r\n                    }\r\n                }\r\n                if (this.adaptHeightToChildren && computedHeight >= 0) {\r\n                    computedHeight += this.paddingTopInPixels + this.paddingBottomInPixels;\r\n                    if (this.height !== computedHeight + \"px\") {\r\n                        this.parent?._markAsDirty();\r\n                        this.height = computedHeight + \"px\";\r\n                        this._height.ignoreAdaptiveScaling = true;\r\n                        this._rebuildLayout = true;\r\n                    }\r\n                }\r\n\r\n                this._postMeasure();\r\n            }\r\n            rebuildCount++;\r\n        } while (this._rebuildLayout && rebuildCount < this.maxLayoutCycle);\r\n\r\n        if (rebuildCount >= 3 && this.logLayoutCycleErrors) {\r\n            Logger.Error(`Layout cycle detected in GUI (Container name=${this.name}, uniqueId=${this.uniqueId})`);\r\n        }\r\n\r\n        context.restore();\r\n\r\n        if (this._isDirty) {\r\n            this.invalidateRect();\r\n\r\n            this._isDirty = false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    protected _postMeasure() {\r\n        // Do nothing by default\r\n    }\r\n\r\n    private _inverseTransformMatrix = Matrix2D.Identity();\r\n    private _inverseMeasure = new Measure(0, 0, 0, 0);\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _draw(context: ICanvasRenderingContext, invalidatedRectangle?: Measure): void {\r\n        const renderToIntermediateTextureThisDraw = this._renderToIntermediateTexture && this._intermediateTexture;\r\n        const contextToDrawTo = renderToIntermediateTextureThisDraw ? (<DynamicTexture>this._intermediateTexture).getContext() : context;\r\n\r\n        if (renderToIntermediateTextureThisDraw) {\r\n            contextToDrawTo.save();\r\n            contextToDrawTo.translate(-this._currentMeasure.left, -this._currentMeasure.top);\r\n            if (invalidatedRectangle) {\r\n                this._transformMatrix.invertToRef(this._inverseTransformMatrix);\r\n                invalidatedRectangle.transformToRef(this._inverseTransformMatrix, this._inverseMeasure);\r\n                contextToDrawTo.clearRect(this._inverseMeasure.left, this._inverseMeasure.top, this._inverseMeasure.width, this._inverseMeasure.height);\r\n            } else {\r\n                contextToDrawTo.clearRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n        }\r\n\r\n        this._localDraw(contextToDrawTo);\r\n\r\n        context.save();\r\n\r\n        if (this.clipChildren) {\r\n            this._clipForChildren(contextToDrawTo);\r\n        }\r\n\r\n        for (const child of this._children) {\r\n            // Only redraw parts of the screen that are invalidated\r\n            if (invalidatedRectangle) {\r\n                if (!child._intersectsRect(invalidatedRectangle)) {\r\n                    continue;\r\n                }\r\n            }\r\n            child._render(contextToDrawTo, invalidatedRectangle);\r\n        }\r\n\r\n        if (renderToIntermediateTextureThisDraw) {\r\n            contextToDrawTo.restore();\r\n            context.save();\r\n            context.globalAlpha = this.alpha;\r\n            context.drawImage(contextToDrawTo.canvas, this._currentMeasure.left, this._currentMeasure.top);\r\n            context.restore();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    public getDescendantsToRef(results: Control[], directDescendantsOnly: boolean = false, predicate?: (control: Control) => boolean): void {\r\n        if (!this.children) {\r\n            return;\r\n        }\r\n\r\n        for (let index = 0; index < this.children.length; index++) {\r\n            const item = this.children[index];\r\n\r\n            if (!predicate || predicate(item)) {\r\n                results.push(item);\r\n            }\r\n\r\n            if (!directDescendantsOnly) {\r\n                item.getDescendantsToRef(results, false, predicate);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _processPicking(x: number, y: number, pi: Nullable<PointerInfoBase>, type: number, pointerId: number, buttonIndex: number, deltaX?: number, deltaY?: number): boolean {\r\n        if (!this._isEnabled || !this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        // checks if the picking position is within the container\r\n        const contains = super.contains(x, y);\r\n\r\n        // if clipChildren is off, we should still pass picking events to children even if we don't contain the pointer\r\n        if (!contains && this.clipChildren) {\r\n            return false;\r\n        }\r\n\r\n        // Checking backwards to pick closest first\r\n        for (let index = this._children.length - 1; index >= 0; index--) {\r\n            const child = this._children[index];\r\n            if (child._processPicking(x, y, pi, type, pointerId, buttonIndex, deltaX, deltaY)) {\r\n                if (child.hoverCursor) {\r\n                    this._host._changeCursor(child.hoverCursor);\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!contains) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.isHitTestVisible) {\r\n            return false;\r\n        }\r\n\r\n        return this._processObservables(type, x, y, pi, pointerId, buttonIndex, deltaX, deltaY);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.copyFrom(this._currentMeasure);\r\n    }\r\n\r\n    /**\r\n     * Serializes the current control\r\n     * @param serializationObject defined the JSON serialized object\r\n     */\r\n    public serialize(serializationObject: any) {\r\n        super.serialize(serializationObject);\r\n\r\n        if (this.backgroundGradient) {\r\n            serializationObject.backgroundGradient = {};\r\n            this.backgroundGradient.serialize(serializationObject.backgroundGradient);\r\n        }\r\n\r\n        if (!this.children.length) {\r\n            return;\r\n        }\r\n\r\n        serializationObject.children = [];\r\n\r\n        for (const child of this.children) {\r\n            const childSerializationObject = {};\r\n            child.serialize(childSerializationObject);\r\n            serializationObject.children.push(childSerializationObject);\r\n        }\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (let index = this.children.length - 1; index >= 0; index--) {\r\n            this.children[index].dispose();\r\n        }\r\n        this._intermediateTexture?.dispose();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _parseFromContent(serializedObject: any, host: AdvancedDynamicTexture) {\r\n        super._parseFromContent(serializedObject, host);\r\n        this._link(host);\r\n\r\n        // Gradient\r\n        if (serializedObject.backgroundGradient) {\r\n            const className = Tools.Instantiate(\"BABYLON.GUI.\" + serializedObject.backgroundGradient.className);\r\n            this._backgroundGradient = new className();\r\n            this._backgroundGradient?.parse(serializedObject.backgroundGradient);\r\n        }\r\n\r\n        if (!serializedObject.children) {\r\n            return;\r\n        }\r\n\r\n        for (const childData of serializedObject.children) {\r\n            this.addControl(Control.Parse(childData, host));\r\n        }\r\n    }\r\n\r\n    public isReady(): boolean {\r\n        for (const child of this.children) {\r\n            if (!child.isReady()) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Container\", Container);\r\n","import { Container } from \"./container\";\r\nimport type { Measure } from \"../measure\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/** Class used to create rectangle container */\r\nexport class Rectangle extends Container {\r\n    private _thickness = 1;\r\n    private _cornerRadius = [0, 0, 0, 0];\r\n    private _cachedRadius = [0, 0, 0, 0];\r\n\r\n    /** Gets or sets border thickness */\r\n    @serialize()\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the corner radius of all angles */\r\n    @serialize()\r\n    public get cornerRadius(): number {\r\n        return this._cornerRadius[0];\r\n    }\r\n\r\n    public set cornerRadius(value: number) {\r\n        if (value < 0) {\r\n            value = 0;\r\n        }\r\n\r\n        if (this._cornerRadius[0] === value && this._cornerRadius[1] === value && this._cornerRadius[2] === value && this._cornerRadius[3] === value) {\r\n            return;\r\n        }\r\n\r\n        this._cornerRadius[0] = this._cornerRadius[1] = this._cornerRadius[2] = this._cornerRadius[3] = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the corner radius top left angle */\r\n    @serialize()\r\n    public get cornerRadiusX(): number {\r\n        return this._cornerRadius[0];\r\n    }\r\n\r\n    public set cornerRadiusX(value: number) {\r\n        if (this._cornerRadius[0] === value) {\r\n            return;\r\n        }\r\n        this._cornerRadius[0] = value;\r\n    }\r\n\r\n    /** Gets or sets the corner radius top right angle */\r\n    @serialize()\r\n    public get cornerRadiusY(): number {\r\n        return this._cornerRadius[1];\r\n    }\r\n\r\n    public set cornerRadiusY(value: number) {\r\n        if (this._cornerRadius[1] === value) {\r\n            return;\r\n        }\r\n        this._cornerRadius[1] = value;\r\n    }\r\n\r\n    /** Gets or sets the corner radius bottom left angle */\r\n    @serialize()\r\n    public get cornerRadiusZ(): number {\r\n        return this._cornerRadius[2];\r\n    }\r\n\r\n    public set cornerRadiusZ(value: number) {\r\n        if (this._cornerRadius[2] === value) {\r\n            return;\r\n        }\r\n        this._cornerRadius[2] = value;\r\n    }\r\n\r\n    /** Gets or sets the corner radius bottom right angle */\r\n    @serialize()\r\n    public get cornerRadiusW(): number {\r\n        return this._cornerRadius[3];\r\n    }\r\n\r\n    public set cornerRadiusW(value: number) {\r\n        if (this._cornerRadius[3] === value) {\r\n            return;\r\n        }\r\n        this._cornerRadius[3] = value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Rectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Rectangle\";\r\n    }\r\n\r\n    /** @internal */\r\n    protected _computeAdditionalOffsetX() {\r\n        let additionalWidth = 0;\r\n        if (this._cornerRadius[0] !== 0 || this._cornerRadius[1] !== 0 || this._cornerRadius[2] !== 0 || this._cornerRadius[3] !== 0) {\r\n            // Take in account the aliasing\r\n            additionalWidth += 1;\r\n        }\r\n        if (this.thickness) {\r\n            additionalWidth += this.thickness / 2;\r\n        }\r\n        return additionalWidth;\r\n    }\r\n\r\n    /** @internal */\r\n    protected _computeAdditionalOffsetY() {\r\n        let additionalHeight = 0;\r\n        if (this._cornerRadius[0] !== 0 || this._cornerRadius[1] !== 0 || this._cornerRadius[2] !== 0 || this._cornerRadius[3] !== 0) {\r\n            // Take in account the aliasing\r\n            additionalHeight += 1;\r\n        }\r\n        if (this.thickness) {\r\n            additionalHeight += this.thickness / 2;\r\n        }\r\n        return additionalHeight;\r\n    }\r\n\r\n    protected _getRectangleFill(context: ICanvasRenderingContext) {\r\n        return this._getBackgroundColor(context);\r\n    }\r\n\r\n    protected _localDraw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this._background || this._backgroundGradient) {\r\n            context.fillStyle = this._getRectangleFill(context);\r\n\r\n            if (this._cornerRadius[0] !== 0 || this._cornerRadius[1] !== 0 || this._cornerRadius[2] !== 0 || this._cornerRadius[3] !== 0) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.fill();\r\n            } else {\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n        }\r\n\r\n        if (this._thickness) {\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (this.color || this.gradient) {\r\n                context.strokeStyle = this.gradient ? this.gradient.getCanvasGradient(context) : this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            if (this._cornerRadius[0] !== 0 || this._cornerRadius[1] !== 0 || this._cornerRadius[2] !== 0 || this._cornerRadius[3] !== 0) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.stroke();\r\n            } else {\r\n                context.strokeRect(\r\n                    this._currentMeasure.left + this._thickness / 2,\r\n                    this._currentMeasure.top + this._thickness / 2,\r\n                    this._currentMeasure.width - this._thickness,\r\n                    this._currentMeasure.height - this._thickness\r\n                );\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    private _drawRoundedRect(context: ICanvasRenderingContext, offset: number = 0): void {\r\n        const x = this._currentMeasure.left + offset;\r\n        const y = this._currentMeasure.top + offset;\r\n        const width = this._currentMeasure.width - offset * 2;\r\n        const height = this._currentMeasure.height - offset * 2;\r\n\r\n        for (let index = 0; index < this._cornerRadius.length; index++) {\r\n            this._cachedRadius[index] = Math.abs(Math.min(height / 2, Math.min(width / 2, this._cornerRadius[index])));\r\n        }\r\n\r\n        context.beginPath();\r\n        context.moveTo(x + this._cachedRadius[0], y);\r\n        context.lineTo(x + width - this._cachedRadius[1], y);\r\n        context.arc(x + width - this._cachedRadius[1], y + this._cachedRadius[1], this._cachedRadius[1], (3 * Math.PI) / 2, Math.PI * 2);\r\n        context.lineTo(x + width, y + height - this._cachedRadius[2]);\r\n        context.arc(x + width - this._cachedRadius[2], y + height - this._cachedRadius[2], this._cachedRadius[2], 0, Math.PI / 2);\r\n        context.lineTo(x + this._cachedRadius[3], y + height);\r\n        context.arc(x + this._cachedRadius[3], y + height - this._cachedRadius[3], this._cachedRadius[3], Math.PI / 2, Math.PI);\r\n        context.lineTo(x, y + this._cachedRadius[0]);\r\n        context.arc(x + this._cachedRadius[0], y + this._cachedRadius[0], this._cachedRadius[0], Math.PI, (3 * Math.PI) / 2);\r\n        context.closePath();\r\n    }\r\n\r\n    protected _clipForChildren(context: ICanvasRenderingContext) {\r\n        if (this._cornerRadius[0] !== 0 || this._cornerRadius[1] !== 0 || this._cornerRadius[2] !== 0 || this._cornerRadius[3] !== 0) {\r\n            this._drawRoundedRect(context, this._thickness);\r\n            context.clip();\r\n        }\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Rectangle\", Rectangle);\r\n","import type { Nullable } from \"core/types\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport { Tools } from \"core/Misc/tools\";\r\n\r\nimport { Control } from \"./control\";\r\nimport type { Measure } from \"../measure\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvas, ICanvasRenderingContext, IImage } from \"core/Engines/ICanvas\";\r\nimport { EngineStore } from \"core/Engines/engineStore\";\r\n\r\n/**\r\n * Class used to create 2D images\r\n */\r\nexport class Image extends Control {\r\n    /**\r\n     *  Specifies an alternate text for the image, if the image for some reason cannot be displayed.\r\n     */\r\n    public alt?: string;\r\n\r\n    private _workingCanvas: Nullable<ICanvas> = null;\r\n\r\n    private _domImage: IImage;\r\n    private _imageWidth: number;\r\n    private _imageHeight: number;\r\n    private _loaded = false;\r\n    private _stretch = Image.STRETCH_FILL;\r\n    private _source: Nullable<string>;\r\n    private _autoScale = false;\r\n\r\n    private _sourceLeft = 0;\r\n    private _sourceTop = 0;\r\n    private _sourceWidth = 0;\r\n    private _sourceHeight = 0;\r\n    private _svgAttributesComputationCompleted: boolean = false;\r\n    private _isSVG: boolean = false;\r\n\r\n    private _cellWidth: number = 0;\r\n    private _cellHeight: number = 0;\r\n    private _cellId: number = -1;\r\n\r\n    private _sliceLeft: number;\r\n    private _sliceRight: number;\r\n    private _sliceTop: number;\r\n    private _sliceBottom: number;\r\n\r\n    private _populateNinePatchSlicesFromImage = false;\r\n\r\n    private _detectPointerOnOpaqueOnly: boolean;\r\n\r\n    private _imageDataCache: {\r\n        data: Uint8ClampedArray | null;\r\n        key: string;\r\n    } = { data: null, key: \"\" };\r\n\r\n    /**\r\n     * Cache of images to avoid loading the same image multiple times\r\n     */\r\n    public static SourceImgCache = new Map<string, { img: IImage; timesUsed: number; loaded: boolean; waitingForLoadCallback: Array<() => void> }>();\r\n\r\n    /**\r\n     * Observable notified when the content is loaded\r\n     */\r\n    public onImageLoadedObservable = new Observable<Image>();\r\n\r\n    /**\r\n     * Observable notified when _sourceLeft, _sourceTop, _sourceWidth and _sourceHeight are computed\r\n     */\r\n    public onSVGAttributesComputedObservable = new Observable<Image>();\r\n\r\n    /**\r\n     * Gets or sets the referrer policy to apply on the img element load request.\r\n     * You should set referrerPolicy before set the source of the image if you want to ensure the header will be present on the xhr loading request\r\n     */\r\n    public referrerPolicy: Nullable<ReferrerPolicy>;\r\n\r\n    /**\r\n     * Gets a boolean indicating that the content is loaded\r\n     */\r\n    public get isLoaded(): boolean {\r\n        return this._loaded;\r\n    }\r\n\r\n    public isReady(): boolean {\r\n        return this.isLoaded;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if pointers should only be validated on pixels with alpha > 0.\r\n     * Beware using this as this will consume more memory as the image has to be stored twice\r\n     */\r\n    @serialize()\r\n    public get detectPointerOnOpaqueOnly(): boolean {\r\n        return this._detectPointerOnOpaqueOnly;\r\n    }\r\n\r\n    public set detectPointerOnOpaqueOnly(value: boolean) {\r\n        if (this._detectPointerOnOpaqueOnly === value) {\r\n            return;\r\n        }\r\n\r\n        this._detectPointerOnOpaqueOnly = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the left value for slicing (9-patch)\r\n     */\r\n    @serialize()\r\n    public get sliceLeft(): number {\r\n        return this._sliceLeft;\r\n    }\r\n\r\n    public set sliceLeft(value: number) {\r\n        if (this._sliceLeft === value) {\r\n            return;\r\n        }\r\n\r\n        this._sliceLeft = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the right value for slicing (9-patch)\r\n     */\r\n    @serialize()\r\n    public get sliceRight(): number {\r\n        return this._sliceRight;\r\n    }\r\n\r\n    public set sliceRight(value: number) {\r\n        if (this._sliceRight === value) {\r\n            return;\r\n        }\r\n\r\n        this._sliceRight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the top value for slicing (9-patch)\r\n     */\r\n    @serialize()\r\n    public get sliceTop(): number {\r\n        return this._sliceTop;\r\n    }\r\n\r\n    public set sliceTop(value: number) {\r\n        if (this._sliceTop === value) {\r\n            return;\r\n        }\r\n\r\n        this._sliceTop = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the bottom value for slicing (9-patch)\r\n     */\r\n    @serialize()\r\n    public get sliceBottom(): number {\r\n        return this._sliceBottom;\r\n    }\r\n\r\n    public set sliceBottom(value: number) {\r\n        if (this._sliceBottom === value) {\r\n            return;\r\n        }\r\n\r\n        this._sliceBottom = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the left coordinate in the source image\r\n     */\r\n    @serialize()\r\n    public get sourceLeft(): number {\r\n        return this._sourceLeft;\r\n    }\r\n\r\n    public set sourceLeft(value: number) {\r\n        if (this._sourceLeft === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceLeft = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the top coordinate in the source image\r\n     */\r\n    @serialize()\r\n    public get sourceTop(): number {\r\n        return this._sourceTop;\r\n    }\r\n\r\n    public set sourceTop(value: number) {\r\n        if (this._sourceTop === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceTop = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the width to capture in the source image\r\n     */\r\n    @serialize()\r\n    public get sourceWidth(): number {\r\n        return this._sourceWidth;\r\n    }\r\n\r\n    public set sourceWidth(value: number) {\r\n        if (this._sourceWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the height to capture in the source image\r\n     */\r\n    @serialize()\r\n    public get sourceHeight(): number {\r\n        return this._sourceHeight;\r\n    }\r\n\r\n    public set sourceHeight(value: number) {\r\n        if (this._sourceHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets the image width\r\n     */\r\n    public get imageWidth(): number {\r\n        return this._imageWidth;\r\n    }\r\n\r\n    /**\r\n     * Gets the image height\r\n     */\r\n    public get imageHeight(): number {\r\n        return this._imageHeight;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if nine patch slices (left, top, right, bottom) should be read from image data\r\n     */\r\n    @serialize()\r\n    public get populateNinePatchSlicesFromImage(): boolean {\r\n        return this._populateNinePatchSlicesFromImage;\r\n    }\r\n\r\n    public set populateNinePatchSlicesFromImage(value: boolean) {\r\n        if (this._populateNinePatchSlicesFromImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._populateNinePatchSlicesFromImage = value;\r\n\r\n        if (this._populateNinePatchSlicesFromImage && this._loaded) {\r\n            this._extractNinePatchSliceDataFromImage();\r\n        }\r\n    }\r\n\r\n    /** Indicates if the format of the image is SVG */\r\n    public get isSVG(): boolean {\r\n        return this._isSVG;\r\n    }\r\n\r\n    /** Gets the status of the SVG attributes computation (sourceLeft, sourceTop, sourceWidth, sourceHeight) */\r\n    public get svgAttributesComputationCompleted(): boolean {\r\n        return this._svgAttributesComputationCompleted;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the image can force its container to adapt its size\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#image\r\n     */\r\n    @serialize()\r\n    public get autoScale(): boolean {\r\n        return this._autoScale;\r\n    }\r\n\r\n    public set autoScale(value: boolean) {\r\n        if (this._autoScale === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoScale = value;\r\n\r\n        if (value && this._loaded) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the stretching mode used by the image */\r\n    @serialize()\r\n    public get stretch(): number {\r\n        return this._stretch;\r\n    }\r\n\r\n    public set stretch(value: number) {\r\n        if (this._stretch === value) {\r\n            return;\r\n        }\r\n\r\n        this._stretch = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _rotate90(n: number, preserveProperties: boolean = false): Image {\r\n        const width = this._domImage.width;\r\n        const height = this._domImage.height;\r\n\r\n        // Should abstract platform instead of using LastCreatedEngine\r\n        const engine = this._host?.getScene()?.getEngine() || EngineStore.LastCreatedEngine;\r\n        if (!engine) {\r\n            throw new Error(\"Invalid engine. Unable to create a canvas.\");\r\n        }\r\n        const canvas = engine.createCanvas(height, width);\r\n\r\n        const context = canvas.getContext(\"2d\")!;\r\n\r\n        context.translate(canvas.width / 2, canvas.height / 2);\r\n        context.rotate((n * Math.PI) / 2);\r\n\r\n        context.drawImage(this._domImage, 0, 0, width, height, -width / 2, -height / 2, width, height);\r\n\r\n        const dataUrl: string = canvas.toDataURL(\"image/jpg\");\r\n        const rotatedImage = new Image(this.name + \"rotated\", dataUrl);\r\n\r\n        if (preserveProperties) {\r\n            rotatedImage._stretch = this._stretch;\r\n            rotatedImage._autoScale = this._autoScale;\r\n            rotatedImage._cellId = this._cellId;\r\n            rotatedImage._cellWidth = n % 1 ? this._cellHeight : this._cellWidth;\r\n            rotatedImage._cellHeight = n % 1 ? this._cellWidth : this._cellHeight;\r\n        }\r\n\r\n        this._handleRotationForSVGImage(this, rotatedImage, n);\r\n\r\n        this._imageDataCache.data = null;\r\n\r\n        return rotatedImage;\r\n    }\r\n\r\n    private _handleRotationForSVGImage(srcImage: Image, dstImage: Image, n: number): void {\r\n        if (!srcImage._isSVG) {\r\n            return;\r\n        }\r\n\r\n        if (srcImage._svgAttributesComputationCompleted) {\r\n            this._rotate90SourceProperties(srcImage, dstImage, n);\r\n            this._markAsDirty();\r\n        } else {\r\n            srcImage.onSVGAttributesComputedObservable.addOnce(() => {\r\n                this._rotate90SourceProperties(srcImage, dstImage, n);\r\n                this._markAsDirty();\r\n            });\r\n        }\r\n    }\r\n\r\n    private _rotate90SourceProperties(srcImage: Image, dstImage: Image, n: number): void {\r\n        let srcLeft = srcImage.sourceLeft,\r\n            srcTop = srcImage.sourceTop,\r\n            srcWidth = srcImage.domImage.width,\r\n            srcHeight = srcImage.domImage.height;\r\n\r\n        let dstLeft = srcLeft,\r\n            dstTop = srcTop,\r\n            dstWidth = srcImage.sourceWidth,\r\n            dstHeight = srcImage.sourceHeight;\r\n\r\n        if (n != 0) {\r\n            const mult = n < 0 ? -1 : 1;\r\n            n = n % 4;\r\n            for (let i = 0; i < Math.abs(n); ++i) {\r\n                dstLeft = -(srcTop - srcHeight / 2) * mult + srcHeight / 2;\r\n                dstTop = (srcLeft - srcWidth / 2) * mult + srcWidth / 2;\r\n                [dstWidth, dstHeight] = [dstHeight, dstWidth];\r\n                if (n < 0) {\r\n                    dstTop -= dstHeight;\r\n                } else {\r\n                    dstLeft -= dstWidth;\r\n                }\r\n                srcLeft = dstLeft;\r\n                srcTop = dstTop;\r\n                [srcWidth, srcHeight] = [srcHeight, srcWidth];\r\n            }\r\n        }\r\n\r\n        dstImage.sourceLeft = dstLeft;\r\n        dstImage.sourceTop = dstTop;\r\n        dstImage.sourceWidth = dstWidth;\r\n        dstImage.sourceHeight = dstHeight;\r\n    }\r\n\r\n    private _extractNinePatchSliceDataFromImage() {\r\n        const width = this._domImage.width;\r\n        const height = this._domImage.height;\r\n\r\n        if (!this._workingCanvas) {\r\n            const engine = this._host?.getScene()?.getEngine() || EngineStore.LastCreatedEngine;\r\n            if (!engine) {\r\n                throw new Error(\"Invalid engine. Unable to create a canvas.\");\r\n            }\r\n            this._workingCanvas = engine.createCanvas(width, height);\r\n        }\r\n        const canvas = this._workingCanvas;\r\n        const context = canvas.getContext(\"2d\")!;\r\n\r\n        context.drawImage(this._domImage, 0, 0, width, height);\r\n        const imageData = context.getImageData(0, 0, width, height);\r\n\r\n        // Left and right\r\n        this._sliceLeft = -1;\r\n        this._sliceRight = -1;\r\n        for (let x = 0; x < width; x++) {\r\n            const alpha = imageData.data[x * 4 + 3];\r\n\r\n            if (alpha > 127 && this._sliceLeft === -1) {\r\n                this._sliceLeft = x;\r\n                continue;\r\n            }\r\n\r\n            if (alpha < 127 && this._sliceLeft > -1) {\r\n                this._sliceRight = x;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // top and bottom\r\n        this._sliceTop = -1;\r\n        this._sliceBottom = -1;\r\n        for (let y = 0; y < height; y++) {\r\n            const alpha = imageData.data[y * width * 4 + 3];\r\n\r\n            if (alpha > 127 && this._sliceTop === -1) {\r\n                this._sliceTop = y;\r\n                continue;\r\n            }\r\n\r\n            if (alpha < 127 && this._sliceTop > -1) {\r\n                this._sliceBottom = y;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the internal DOM image used to render the control\r\n     */\r\n    public set domImage(value: IImage) {\r\n        this._domImage = value;\r\n        this._loaded = false;\r\n        this._imageDataCache.data = null;\r\n\r\n        if (this._domImage.width) {\r\n            this._onImageLoaded();\r\n        } else {\r\n            this._domImage.onload = () => {\r\n                this._onImageLoaded();\r\n            };\r\n        }\r\n    }\r\n\r\n    public get domImage(): IImage {\r\n        return this._domImage;\r\n    }\r\n\r\n    private _onImageLoaded(): void {\r\n        this._imageDataCache.data = null;\r\n        this._imageWidth = this._domImage.width;\r\n        this._imageHeight = this._domImage.height;\r\n        this._loaded = true;\r\n\r\n        if (this._populateNinePatchSlicesFromImage) {\r\n            this._extractNinePatchSliceDataFromImage();\r\n        }\r\n\r\n        if (this._autoScale) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n\r\n        this.onImageLoadedObservable.notifyObservers(this);\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets the image source url\r\n     */\r\n    @serialize()\r\n    public get source() {\r\n        return this._source;\r\n    }\r\n\r\n    /**\r\n     * Resets the internal Image Element cache. Can reduce memory usage.\r\n     */\r\n    public static ResetImageCache() {\r\n        Image.SourceImgCache.clear();\r\n    }\r\n\r\n    private _removeCacheUsage(source: Nullable<string>) {\r\n        const value = source && Image.SourceImgCache.get(source);\r\n        if (value) {\r\n            value.timesUsed -= 1;\r\n            // Since the image isn't being used anymore, we can clean it from the cache\r\n            if (value.timesUsed === 0) {\r\n                Image.SourceImgCache.delete(source);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets image source url\r\n     */\r\n    public set source(value: Nullable<string>) {\r\n        if (this._source === value) {\r\n            return;\r\n        }\r\n\r\n        this._removeCacheUsage(this._source);\r\n\r\n        this._loaded = false;\r\n        this._source = value;\r\n        this._imageDataCache.data = null;\r\n\r\n        if (value) {\r\n            value = this._svgCheck(value);\r\n        }\r\n\r\n        // Should abstract platform instead of using LastCreatedEngine\r\n        const engine = this._host?.getScene()?.getEngine() || EngineStore.LastCreatedEngine;\r\n        if (!engine) {\r\n            throw new Error(\"Invalid engine. Unable to create a canvas.\");\r\n        }\r\n        if (value && Image.SourceImgCache.has(value)) {\r\n            const cachedData = Image.SourceImgCache.get(value)!;\r\n            this._domImage = cachedData.img;\r\n            cachedData.timesUsed += 1;\r\n            if (cachedData.loaded) {\r\n                this._onImageLoaded();\r\n            } else {\r\n                cachedData.waitingForLoadCallback.push(this._onImageLoaded.bind(this));\r\n            }\r\n            return;\r\n        }\r\n        this._domImage = engine.createCanvasImage();\r\n        if (value) {\r\n            Image.SourceImgCache.set(value, { img: this._domImage, timesUsed: 1, loaded: false, waitingForLoadCallback: [this._onImageLoaded.bind(this)] });\r\n        }\r\n\r\n        this._domImage.onload = () => {\r\n            if (value) {\r\n                const cachedData = Image.SourceImgCache.get(value);\r\n                if (cachedData) {\r\n                    cachedData.loaded = true;\r\n                    for (const waitingCallback of cachedData.waitingForLoadCallback) {\r\n                        waitingCallback();\r\n                    }\r\n                    cachedData.waitingForLoadCallback.length = 0;\r\n                    return;\r\n                }\r\n            }\r\n            this._onImageLoaded();\r\n        };\r\n        if (value) {\r\n            Tools.SetCorsBehavior(value, this._domImage);\r\n            Tools.SetReferrerPolicyBehavior(this.referrerPolicy, this._domImage);\r\n            this._domImage.src = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks for svg document with icon id present\r\n     * @param value\r\n     */\r\n    private _svgCheck(value: string): string {\r\n        if (window.SVGSVGElement && value.search(/.svg#/gi) !== -1 && value.indexOf(\"#\") === value.lastIndexOf(\"#\")) {\r\n            this._isSVG = true;\r\n            const svgsrc = value.split(\"#\")[0];\r\n            const elemid = value.split(\"#\")[1];\r\n            // check if object alr exist in document\r\n            const svgExist = <HTMLObjectElement>document.body.querySelector('object[data=\"' + svgsrc + '\"]');\r\n            if (svgExist) {\r\n                const svgDoc = svgExist.contentDocument;\r\n                // get viewbox width and height, get svg document width and height in px\r\n                if (svgDoc && svgDoc.documentElement) {\r\n                    const vb = svgDoc.documentElement.getAttribute(\"viewBox\");\r\n                    const docwidth = Number(svgDoc.documentElement.getAttribute(\"width\"));\r\n                    const docheight = Number(svgDoc.documentElement.getAttribute(\"height\"));\r\n                    const elem = <SVGGraphicsElement>(<unknown>svgDoc.getElementById(elemid));\r\n                    if (elem && vb && docwidth && docheight) {\r\n                        this._getSVGAttribs(svgExist, elemid);\r\n                        return value;\r\n                    }\r\n                }\r\n\r\n                // wait for object to load\r\n                svgExist.addEventListener(\"load\", () => {\r\n                    this._getSVGAttribs(svgExist, elemid);\r\n                });\r\n            } else {\r\n                // create document object\r\n                const svgImage = document.createElement(\"object\");\r\n                svgImage.data = svgsrc;\r\n                svgImage.type = \"image/svg+xml\";\r\n                svgImage.width = \"0%\";\r\n                svgImage.height = \"0%\";\r\n                document.body.appendChild(svgImage);\r\n                // when the object has loaded, get the element attribs\r\n                svgImage.onload = () => {\r\n                    const svgobj = <HTMLObjectElement>document.body.querySelector('object[data=\"' + svgsrc + '\"]');\r\n                    if (svgobj) {\r\n                        this._getSVGAttribs(svgobj, elemid);\r\n                    }\r\n                };\r\n            }\r\n            return svgsrc;\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets sourceLeft, sourceTop, sourceWidth, sourceHeight automatically\r\n     * given external svg file and icon id\r\n     * @param svgsrc\r\n     * @param elemid\r\n     */\r\n    private _getSVGAttribs(svgsrc: HTMLObjectElement, elemid: string) {\r\n        const svgDoc = svgsrc.contentDocument;\r\n        // get viewbox width and height, get svg document width and height in px\r\n        if (svgDoc && svgDoc.documentElement) {\r\n            const vb = svgDoc.documentElement.getAttribute(\"viewBox\");\r\n            const docwidth = Number(svgDoc.documentElement.getAttribute(\"width\"));\r\n            const docheight = Number(svgDoc.documentElement.getAttribute(\"height\"));\r\n            // get element bbox and matrix transform\r\n            const elem = svgDoc.getElementById(elemid) as Nullable<SVGGraphicsElement>;\r\n            if (vb && docwidth && docheight && elem) {\r\n                const vb_width = Number(vb.split(\" \")[2]);\r\n                const vb_height = Number(vb.split(\" \")[3]);\r\n                const elem_bbox = elem.getBBox();\r\n                let elem_matrix_a = 1;\r\n                let elem_matrix_d = 1;\r\n                let elem_matrix_e = 0;\r\n                let elem_matrix_f = 0;\r\n                const mainMatrix = elem.transform.baseVal.consolidate()!.matrix;\r\n                if (elem.transform && elem.transform.baseVal.consolidate()) {\r\n                    elem_matrix_a = mainMatrix.a;\r\n                    elem_matrix_d = mainMatrix.d;\r\n                    elem_matrix_e = mainMatrix.e;\r\n                    elem_matrix_f = mainMatrix.f;\r\n                }\r\n\r\n                // compute source coordinates and dimensions\r\n                this.sourceLeft = ((elem_matrix_a * elem_bbox.x + elem_matrix_e) * docwidth) / vb_width;\r\n                this.sourceTop = ((elem_matrix_d * elem_bbox.y + elem_matrix_f) * docheight) / vb_height;\r\n                this.sourceWidth = elem_bbox.width * elem_matrix_a * (docwidth / vb_width);\r\n                this.sourceHeight = elem_bbox.height * elem_matrix_d * (docheight / vb_height);\r\n                this._svgAttributesComputationCompleted = true;\r\n                this.onSVGAttributesComputedObservable.notifyObservers(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell width to use when animation sheet is enabled\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#image\r\n     */\r\n    @serialize()\r\n    get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n    set cellWidth(value: number) {\r\n        if (this._cellWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell height to use when animation sheet is enabled\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#image\r\n     */\r\n    @serialize()\r\n    get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n    set cellHeight(value: number) {\r\n        if (this._cellHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell id to use (this will turn on the animation sheet mode)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#image\r\n     */\r\n    @serialize()\r\n    get cellId(): number {\r\n        return this._cellId;\r\n    }\r\n    set cellId(value: number) {\r\n        if (this._cellId === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellId = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Image\r\n     * @param name defines the control name\r\n     * @param url defines the image url\r\n     */\r\n    constructor(public name?: string, url: Nullable<string> = null) {\r\n        super(name);\r\n        this.source = url;\r\n    }\r\n\r\n    /**\r\n     * Tests if a given coordinates belong to the current control\r\n     * @param x defines x coordinate to test\r\n     * @param y defines y coordinate to test\r\n     * @returns true if the coordinates are inside the control\r\n     */\r\n    public contains(x: number, y: number): boolean {\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this._detectPointerOnOpaqueOnly || !this._workingCanvas) {\r\n            return true;\r\n        }\r\n\r\n        const width = this._currentMeasure.width | 0;\r\n        const height = this._currentMeasure.height | 0;\r\n        const key = width + \"_\" + height;\r\n\r\n        let imageData = this._imageDataCache.data;\r\n\r\n        if (!imageData || this._imageDataCache.key !== key) {\r\n            const canvas = this._workingCanvas;\r\n            const context = canvas.getContext(\"2d\")!;\r\n\r\n            this._imageDataCache.data = imageData = context.getImageData(0, 0, width, height).data;\r\n            this._imageDataCache.key = key;\r\n        }\r\n\r\n        x = (x - this._currentMeasure.left) | 0;\r\n        y = (y - this._currentMeasure.top) | 0;\r\n\r\n        const pickedPixel = imageData[(x + y * width) * 4 + 3];\r\n\r\n        return pickedPixel > 0;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Image\";\r\n    }\r\n\r\n    /** Force the control to synchronize with its content */\r\n    public synchronizeSizeWithContent() {\r\n        if (!this._loaded) {\r\n            return;\r\n        }\r\n\r\n        this.width = this._domImage.width + \"px\";\r\n        this.height = this._domImage.height + \"px\";\r\n    }\r\n\r\n    protected _processMeasures(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        if (this._loaded) {\r\n            switch (this._stretch) {\r\n                case Image.STRETCH_NONE:\r\n                    break;\r\n                case Image.STRETCH_FILL:\r\n                    break;\r\n                case Image.STRETCH_UNIFORM:\r\n                    break;\r\n                case Image.STRETCH_NINE_PATCH:\r\n                    break;\r\n                case Image.STRETCH_EXTEND:\r\n                    if (this._autoScale) {\r\n                        this.synchronizeSizeWithContent();\r\n                    }\r\n                    if (this.parent && this.parent.parent) {\r\n                        // Will update root size if root is not the top root\r\n                        this.parent.adaptWidthToChildren = true;\r\n                        this.parent.adaptHeightToChildren = true;\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        super._processMeasures(parentMeasure, context);\r\n    }\r\n\r\n    private _prepareWorkingCanvasForOpaqueDetection() {\r\n        if (!this._detectPointerOnOpaqueOnly) {\r\n            return;\r\n        }\r\n\r\n        const width = this._currentMeasure.width;\r\n        const height = this._currentMeasure.height;\r\n\r\n        if (!this._workingCanvas) {\r\n            const engine = this._host?.getScene()?.getEngine() || EngineStore.LastCreatedEngine;\r\n            if (!engine) {\r\n                throw new Error(\"Invalid engine. Unable to create a canvas.\");\r\n            }\r\n            this._workingCanvas = engine.createCanvas(width, height);\r\n        }\r\n        const canvas = this._workingCanvas;\r\n\r\n        const context = canvas.getContext(\"2d\")!;\r\n\r\n        context.clearRect(0, 0, width, height);\r\n    }\r\n\r\n    private _drawImage(context: ICanvasRenderingContext, sx: number, sy: number, sw: number, sh: number, tx: number, ty: number, tw: number, th: number) {\r\n        context.drawImage(this._domImage, sx, sy, sw, sh, tx, ty, tw, th);\r\n\r\n        if (!this._detectPointerOnOpaqueOnly) {\r\n            return;\r\n        }\r\n\r\n        const canvas = this._workingCanvas!;\r\n        context = canvas.getContext(\"2d\")!;\r\n\r\n        context.drawImage(this._domImage, sx, sy, sw, sh, tx - this._currentMeasure.left, ty - this._currentMeasure.top, tw, th);\r\n    }\r\n\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        let x, y, width, height;\r\n        if (this.cellId == -1) {\r\n            x = this._sourceLeft;\r\n            y = this._sourceTop;\r\n\r\n            width = this._sourceWidth ? this._sourceWidth : this._imageWidth;\r\n            height = this._sourceHeight ? this._sourceHeight : this._imageHeight;\r\n        } else {\r\n            const rowCount = this._domImage.naturalWidth / this.cellWidth;\r\n            const column = (this.cellId / rowCount) >> 0;\r\n            const row = this.cellId % rowCount;\r\n\r\n            x = this.cellWidth * row;\r\n            y = this.cellHeight * column;\r\n            width = this.cellWidth;\r\n            height = this.cellHeight;\r\n        }\r\n\r\n        this._prepareWorkingCanvasForOpaqueDetection();\r\n\r\n        this._applyStates(context);\r\n        if (this._loaded) {\r\n            switch (this._stretch) {\r\n                case Image.STRETCH_NONE:\r\n                    this._drawImage(context, x, y, width, height, this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                    break;\r\n                case Image.STRETCH_FILL:\r\n                    this._drawImage(context, x, y, width, height, this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                    break;\r\n                case Image.STRETCH_UNIFORM: {\r\n                    const hRatio = this._currentMeasure.width / width;\r\n                    const vRatio = this._currentMeasure.height / height;\r\n                    const ratio = Math.min(hRatio, vRatio);\r\n                    const centerX = (this._currentMeasure.width - width * ratio) / 2;\r\n                    const centerY = (this._currentMeasure.height - height * ratio) / 2;\r\n\r\n                    this._drawImage(context, x, y, width, height, this._currentMeasure.left + centerX, this._currentMeasure.top + centerY, width * ratio, height * ratio);\r\n                    break;\r\n                }\r\n                case Image.STRETCH_EXTEND:\r\n                    this._drawImage(context, x, y, width, height, this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                    break;\r\n                case Image.STRETCH_NINE_PATCH:\r\n                    this._renderNinePatch(context, x, y, width, height);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    private _renderNinePatch(context: ICanvasRenderingContext, sx: number, sy: number, sw: number, sh: number): void {\r\n        const leftWidth = this._sliceLeft;\r\n        const topHeight = this._sliceTop;\r\n        const bottomHeight = sh - this._sliceBottom;\r\n        const rightWidth = sw - this._sliceRight;\r\n        const centerWidth = this._sliceRight - this._sliceLeft;\r\n        const centerHeight = this._sliceBottom - this._sliceTop;\r\n        const targetCenterWidth = this._currentMeasure.width - rightWidth - leftWidth + 2;\r\n        const targetCenterHeight = this._currentMeasure.height - bottomHeight - topHeight + 2;\r\n        const centerLeftOffset = this._currentMeasure.left + leftWidth - 1;\r\n        const centerTopOffset = this._currentMeasure.top + topHeight - 1;\r\n        const rightOffset = this._currentMeasure.left + this._currentMeasure.width - rightWidth;\r\n        const bottomOffset = this._currentMeasure.top + this._currentMeasure.height - bottomHeight;\r\n\r\n        //Top Left\r\n        this._drawImage(context, sx, sy, leftWidth, topHeight, this._currentMeasure.left, this._currentMeasure.top, leftWidth, topHeight);\r\n        //Top\r\n        context.clearRect(centerLeftOffset, this._currentMeasure.top, targetCenterWidth, topHeight);\r\n        this._drawImage(context, sx + this._sliceLeft, sy, centerWidth, topHeight, centerLeftOffset, this._currentMeasure.top, targetCenterWidth, topHeight);\r\n        //Top Right\r\n        context.clearRect(rightOffset, this._currentMeasure.top, rightWidth, topHeight);\r\n        this._drawImage(context, sx + this._sliceRight, sy, rightWidth, topHeight, rightOffset, this._currentMeasure.top, rightWidth, topHeight);\r\n        //Left\r\n        context.clearRect(this._currentMeasure.left, centerTopOffset, leftWidth, targetCenterHeight);\r\n        this._drawImage(context, sx, sy + this._sliceTop, leftWidth, centerHeight, this._currentMeasure.left, centerTopOffset, leftWidth, targetCenterHeight);\r\n        // Center\r\n        context.clearRect(centerLeftOffset, centerTopOffset, targetCenterWidth, targetCenterHeight);\r\n        this._drawImage(context, sx + this._sliceLeft, sy + this._sliceTop, centerWidth, centerHeight, centerLeftOffset, centerTopOffset, targetCenterWidth, targetCenterHeight);\r\n        //Right\r\n        context.clearRect(rightOffset, centerTopOffset, rightWidth, targetCenterHeight);\r\n        this._drawImage(context, sx + this._sliceRight, sy + this._sliceTop, rightWidth, centerHeight, rightOffset, centerTopOffset, rightWidth, targetCenterHeight);\r\n        //Bottom Left\r\n        context.clearRect(this._currentMeasure.left, bottomOffset, leftWidth, bottomHeight);\r\n        this._drawImage(context, sx, sy + this._sliceBottom, leftWidth, bottomHeight, this._currentMeasure.left, bottomOffset, leftWidth, bottomHeight);\r\n        //Bottom\r\n        context.clearRect(centerLeftOffset, bottomOffset, targetCenterWidth, bottomHeight);\r\n        this._drawImage(context, sx + this.sliceLeft, sy + this._sliceBottom, centerWidth, bottomHeight, centerLeftOffset, bottomOffset, targetCenterWidth, bottomHeight);\r\n        //Bottom Right\r\n        context.clearRect(rightOffset, bottomOffset, rightWidth, bottomHeight);\r\n        this._drawImage(context, sx + this._sliceRight, sy + this._sliceBottom, rightWidth, bottomHeight, rightOffset, bottomOffset, rightWidth, bottomHeight);\r\n    }\r\n\r\n    public dispose() {\r\n        super.dispose();\r\n        this.onImageLoadedObservable.clear();\r\n        this.onSVGAttributesComputedObservable.clear();\r\n        this._removeCacheUsage(this._source);\r\n    }\r\n\r\n    // Static\r\n    /** STRETCH_NONE */\r\n    public static readonly STRETCH_NONE = 0;\r\n    /** STRETCH_FILL */\r\n    public static readonly STRETCH_FILL = 1;\r\n    /** STRETCH_UNIFORM */\r\n    public static readonly STRETCH_UNIFORM = 2;\r\n    /** STRETCH_EXTEND */\r\n    public static readonly STRETCH_EXTEND = 3;\r\n    /** NINE_PATCH */\r\n    public static readonly STRETCH_NINE_PATCH = 4;\r\n}\r\nRegisterClass(\"BABYLON.GUI.Image\", Image);\r\n","import type { Nullable } from \"core/types\";\r\nimport type { Vector2 } from \"core/Maths/math.vector\";\r\n\r\nimport { Rectangle } from \"./rectangle\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Image } from \"./image\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport type { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/**\r\n * Class used to create 2D buttons\r\n */\r\nexport class Button extends Rectangle {\r\n    /**\r\n     * Function called to generate a pointer enter animation\r\n     */\r\n    public pointerEnterAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer out animation\r\n     */\r\n    public pointerOutAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer down animation\r\n     */\r\n    public pointerDownAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer up animation\r\n     */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the button will let internal controls handle picking instead of doing it directly using its bounding info\r\n     */\r\n    public delegatePickingToChildren = false;\r\n\r\n    private _image: Nullable<Image>;\r\n    /**\r\n     * Returns the image part of the button (if any)\r\n     */\r\n    public get image(): Nullable<Image> {\r\n        return this._image;\r\n    }\r\n\r\n    private _textBlock: Nullable<TextBlock>;\r\n    /**\r\n     * Returns the TextBlock part of the button (if any)\r\n     */\r\n    public get textBlock(): Nullable<TextBlock> {\r\n        return this._textBlock;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Button\r\n     * @param name defines the name of the button\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.thickness = 1;\r\n        this.isPointerBlocker = true;\r\n\r\n        let alphaStore: Nullable<number> = null;\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            alphaStore = this.alpha;\r\n            this.alpha -= 0.1;\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (alphaStore !== null) {\r\n                this.alpha = alphaStore;\r\n            }\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            this.scaleX -= 0.05;\r\n            this.scaleY -= 0.05;\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            this.scaleX += 0.05;\r\n            this.scaleY += 0.05;\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button\";\r\n    }\r\n\r\n    // While being a container, the button behaves like a control.\r\n    /**\r\n     * @internal\r\n     */\r\n    public _processPicking(x: number, y: number, pi: PointerInfoBase, type: number, pointerId: number, buttonIndex: number, deltaX?: number, deltaY?: number): boolean {\r\n        if (!this._isEnabled || !this.isHitTestVisible || !this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.delegatePickingToChildren) {\r\n            let contains = false;\r\n            for (let index = this._children.length - 1; index >= 0; index--) {\r\n                const child = this._children[index];\r\n                if (child.isEnabled && child.isHitTestVisible && child.isVisible && !child.notRenderable && child.contains(x, y)) {\r\n                    contains = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!contains) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        this._processObservables(type, x, y, pi, pointerId, buttonIndex, deltaX, deltaY);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerEnter(target: Control, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerEnter(target, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.isReadOnly && this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerOut(target: Control, pi: PointerInfoBase, force = false): void {\r\n        if (!this.isReadOnly && this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n\r\n        super._onPointerOut(target, pi, force);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.isReadOnly && this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    protected _getRectangleFill(context: ICanvasRenderingContext) {\r\n        if (this.isEnabled) {\r\n            return this._getBackgroundColor(context);\r\n        } else {\r\n            return this._disabledColor;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean, pi: PointerInfoBase): void {\r\n        if (!this.isReadOnly && this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick, pi);\r\n    }\r\n\r\n    /**\r\n     * Serializes the current button\r\n     * @param serializationObject defines the JSON serialized object\r\n     */\r\n    public serialize(serializationObject: any) {\r\n        super.serialize(serializationObject);\r\n\r\n        if (this._textBlock) {\r\n            serializationObject.textBlockName = this._textBlock.name;\r\n        }\r\n        if (this._image) {\r\n            serializationObject.imageName = this._image.name;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _parseFromContent(serializedObject: any, host: AdvancedDynamicTexture) {\r\n        super._parseFromContent(serializedObject, host);\r\n\r\n        if (serializedObject.textBlockName) {\r\n            this._textBlock = this.getChildByName(serializedObject.textBlockName) as Nullable<TextBlock>;\r\n        }\r\n\r\n        if (serializedObject.imageName) {\r\n            this._image = this.getChildByName(serializedObject.imageName) as Nullable<Image>;\r\n        }\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new button made with an image and a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageButton(name: string, text: string, imageUrl: string): Button {\r\n        const result = new this(name);\r\n\r\n        // Adding text\r\n        const textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        textBlock.paddingLeft = \"20%\";\r\n        result.addControl(textBlock);\r\n\r\n        // Adding image\r\n        const iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.width = \"20%\";\r\n        iconImage.stretch = Image.STRETCH_UNIFORM;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image\r\n     * @param name defines the name of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageOnlyButton(name: string, imageUrl: string): Button {\r\n        const result = new this(name);\r\n\r\n        // Adding image\r\n        const iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @returns a new Button\r\n     */\r\n    public static CreateSimpleButton(name: string, text: string): Button {\r\n        const result = new this(name);\r\n\r\n        // Adding text\r\n        const textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        // Store\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image and a centered text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageWithCenterTextButton(name: string, text: string, imageUrl: string): Button {\r\n        const result = new this(name);\r\n\r\n        // Adding image\r\n        const iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        result.addControl(iconImage);\r\n\r\n        // Adding text\r\n        const textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Button\", Button);\r\n","import { Tools } from \"core/Misc/tools\";\r\n\r\nimport { Container } from \"./container\";\r\nimport type { Measure } from \"../measure\";\r\nimport { Control } from \"./control\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport type { TextBlock } from \"./textBlock\";\r\nimport { TextWrapping } from \"./textBlock\";\r\n\r\n/**\r\n * Class used to create a 2D stack panel container\r\n */\r\nexport class StackPanel extends Container {\r\n    private _isVertical = true;\r\n    private _manualWidth = false;\r\n    private _manualHeight = false;\r\n    private _doNotTrackManualChanges = false;\r\n    private _spacing = 0;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that layout warnings should be ignored\r\n     */\r\n    @serialize()\r\n    public ignoreLayoutWarnings = false;\r\n\r\n    /** Gets or sets a boolean indicating if the stack panel is vertical or horizontal*/\r\n    @serialize()\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the spacing (in pixels) between each child.\r\n     */\r\n    @serialize()\r\n    public get spacing(): number {\r\n        return this._spacing;\r\n    }\r\n\r\n    public set spacing(value: number) {\r\n        if (this._spacing === value) {\r\n            return;\r\n        }\r\n\r\n        this._spacing = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets panel width.\r\n     * This value should not be set when in horizontal mode as it will be computed automatically\r\n     */\r\n    @serialize()\r\n    public set width(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualWidth = true;\r\n        }\r\n\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets panel height.\r\n     * This value should not be set when in vertical mode as it will be computed automatically\r\n     */\r\n    @serialize()\r\n    public set height(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualHeight = true;\r\n        }\r\n\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new StackPanel\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"StackPanel\";\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _preMeasure(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        for (const child of this._children) {\r\n            if (this._isVertical) {\r\n                child.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            } else {\r\n                child.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            }\r\n        }\r\n\r\n        super._preMeasure(parentMeasure, context);\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.copyFrom(parentMeasure);\r\n\r\n        this._measureForChildren.left = this._currentMeasure.left;\r\n        this._measureForChildren.top = this._currentMeasure.top;\r\n\r\n        if (!this.isVertical || this._manualWidth) {\r\n            this._measureForChildren.width = this._currentMeasure.width;\r\n        }\r\n\r\n        if (this.isVertical || this._manualHeight) {\r\n            this._measureForChildren.height = this._currentMeasure.height;\r\n        }\r\n    }\r\n\r\n    protected _postMeasure(): void {\r\n        let stackWidth = 0;\r\n        let stackHeight = 0;\r\n        const childrenCount = this._children.length;\r\n        for (let index = 0; index < childrenCount; index++) {\r\n            const child = this._children[index];\r\n            if (!child.isVisible || child.notRenderable) {\r\n                continue;\r\n            }\r\n\r\n            if (this._isVertical) {\r\n                if (child.top !== stackHeight + \"px\") {\r\n                    child.top = stackHeight + \"px\";\r\n                    this._rebuildLayout = true;\r\n                    child._top.ignoreAdaptiveScaling = true;\r\n                }\r\n\r\n                if (child._height.isPercentage && !child._automaticSize) {\r\n                    if (!this.ignoreLayoutWarnings) {\r\n                        Tools.Warn(`Control (Name:${child.name}, UniqueId:${child.uniqueId}) is using height in percentage mode inside a vertical StackPanel`);\r\n                    }\r\n                } else {\r\n                    stackHeight += child._currentMeasure.height + child._paddingTopInPixels + child._paddingBottomInPixels + (index < childrenCount - 1 ? this._spacing : 0);\r\n                }\r\n            } else {\r\n                if (child.left !== stackWidth + \"px\") {\r\n                    child.left = stackWidth + \"px\";\r\n                    this._rebuildLayout = true;\r\n                    child._left.ignoreAdaptiveScaling = true;\r\n                }\r\n\r\n                if (\r\n                    child._width.isPercentage &&\r\n                    !child._automaticSize &&\r\n                    child.getClassName() === \"TextBlock\" &&\r\n                    (child as TextBlock).textWrapping !== TextWrapping.Clip &&\r\n                    !(child as TextBlock).forceResizeWidth\r\n                ) {\r\n                    if (!this.ignoreLayoutWarnings) {\r\n                        Tools.Warn(`Control (Name:${child.name}, UniqueId:${child.uniqueId}) is using width in percentage mode inside a horizontal StackPanel`);\r\n                    }\r\n                } else {\r\n                    stackWidth += child._currentMeasure.width + child._paddingLeftInPixels + child._paddingRightInPixels + (index < childrenCount - 1 ? this._spacing : 0);\r\n                }\r\n            }\r\n        }\r\n\r\n        stackWidth += this._paddingLeftInPixels + this._paddingRightInPixels;\r\n        stackHeight += this._paddingTopInPixels + this._paddingBottomInPixels;\r\n\r\n        this._doNotTrackManualChanges = true;\r\n\r\n        // Let stack panel width or height default to stackHeight and stackWidth if dimensions are not specified.\r\n        // User can now define their own height and width for stack panel.\r\n\r\n        let panelWidthChanged = false;\r\n        let panelHeightChanged = false;\r\n\r\n        if ((!this._manualHeight || this.adaptHeightToChildren) && this._isVertical) {\r\n            // do not specify height if strictly defined by user\r\n            const previousHeight = this.height;\r\n            this.height = stackHeight + \"px\";\r\n            panelHeightChanged = previousHeight !== this.height || !this._height.ignoreAdaptiveScaling;\r\n        }\r\n        if ((!this._manualWidth || this.adaptWidthToChildren) && !this._isVertical) {\r\n            // do not specify width if strictly defined by user\r\n            const previousWidth = this.width;\r\n            this.width = stackWidth + \"px\";\r\n            panelWidthChanged = previousWidth !== this.width || !this._width.ignoreAdaptiveScaling;\r\n        }\r\n\r\n        if (panelHeightChanged) {\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        if (panelWidthChanged) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        this._doNotTrackManualChanges = false;\r\n\r\n        if (panelWidthChanged || panelHeightChanged) {\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        super._postMeasure();\r\n    }\r\n\r\n    /**\r\n     * Serializes the current control\r\n     * @param serializationObject defined the JSON serialized object\r\n     */\r\n    public serialize(serializationObject: any) {\r\n        super.serialize(serializationObject);\r\n        serializationObject.manualWidth = this._manualWidth;\r\n        serializationObject.manualHeight = this._manualHeight;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _parseFromContent(serializedObject: any, host: AdvancedDynamicTexture) {\r\n        this._manualWidth = serializedObject.manualWidth;\r\n        this._manualHeight = serializedObject.manualHeight;\r\n\r\n        super._parseFromContent(serializedObject, host);\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.StackPanel\", StackPanel);\r\n","import { Observable } from \"core/Misc/observable\";\r\nimport type { Vector2 } from \"core/Maths/math.vector\";\r\n\r\nimport { Control } from \"./control\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/**\r\n * Class used to represent a 2D checkbox\r\n */\r\nexport class Checkbox extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness  */\r\n    @serialize()\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Observable raised when isChecked property changes\r\n     */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    @serialize()\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    @serialize()\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    @serialize()\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    /**\r\n     * Creates a new CheckBox\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Checkbox\";\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        const actualWidth = this._currentMeasure.width - this._thickness;\r\n        const actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n        context.fillRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (this._isChecked) {\r\n            context.fillStyle = this._isEnabled ? this.color : this._disabledColorItem;\r\n            const offsetWidth = actualWidth * this._checkSizeRatio;\r\n            const offsetHeight = actualHeight * this._checkSizeRatio;\r\n\r\n            context.fillRect(\r\n                this._currentMeasure.left + this._thickness / 2 + (actualWidth - offsetWidth) / 2,\r\n                this._currentMeasure.top + this._thickness / 2 + (actualHeight - offsetHeight) / 2,\r\n                offsetWidth,\r\n                offsetHeight\r\n            );\r\n        }\r\n\r\n        context.strokeStyle = this.color;\r\n        context.lineWidth = this._thickness;\r\n\r\n        context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.isReadOnly) {\r\n            this.isChecked = !this.isChecked;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a checkbox with a header\r\n     * @param title defines the label to use for the header\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the checkbox and a textBlock\r\n     */\r\n    public static AddCheckBoxWithHeader(title: string, onValueChanged: (value: boolean) => void): StackPanel {\r\n        const panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        const checkbox = new Checkbox();\r\n        checkbox.width = \"20px\";\r\n        checkbox.height = \"20px\";\r\n        checkbox.isChecked = true;\r\n        checkbox.color = \"green\";\r\n        checkbox.onIsCheckedChangedObservable.add(onValueChanged);\r\n        panel.addControl(checkbox);\r\n\r\n        const header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header);\r\n\r\n        return panel;\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Checkbox\", Checkbox);\r\n","/** @internal */\r\nexport class TextWrapper {\r\n    private _text: string;\r\n    private _characters: string[] | undefined;\r\n\r\n    public get text(): string {\r\n        return this._characters ? this._characters.join(\"\") : this._text;\r\n    }\r\n\r\n    public set text(txt: string) {\r\n        this._text = txt;\r\n        this._characters = Array.from && Array.from(txt);\r\n    }\r\n\r\n    public get length(): number {\r\n        return this._characters ? this._characters.length : this._text.length;\r\n    }\r\n\r\n    public removePart(idxStart: number, idxEnd: number, insertTxt?: string): void {\r\n        this._text = this._text.slice(0, idxStart) + (insertTxt ? insertTxt : \"\") + this._text.slice(idxEnd);\r\n        if (this._characters) {\r\n            const newCharacters = insertTxt ? Array.from(insertTxt) : [];\r\n            this._characters.splice(idxStart, idxEnd - idxStart, ...newCharacters);\r\n        }\r\n    }\r\n\r\n    public charAt(idx: number): string {\r\n        return this._characters ? this._characters[idx] : this._text.charAt(idx);\r\n    }\r\n\r\n    public substr(from: number, length?: number): string {\r\n        if (this._characters) {\r\n            if (isNaN(from)) {\r\n                from = 0;\r\n            } else if (from >= 0) {\r\n                from = Math.min(from, this._characters.length);\r\n            } else {\r\n                from = this._characters.length + Math.max(from, -this._characters.length);\r\n            }\r\n            if (length === undefined) {\r\n                length = this._characters.length - from;\r\n            } else if (isNaN(length)) {\r\n                length = 0;\r\n            } else if (length < 0) {\r\n                length = 0;\r\n            }\r\n            const temp = [];\r\n            while (--length >= 0) {\r\n                temp[length] = this._characters[from + length];\r\n            }\r\n            return temp.join(\"\");\r\n        }\r\n\r\n        return this._text.substr(from, length);\r\n    }\r\n\r\n    public substring(from: number, to?: number): string {\r\n        if (this._characters) {\r\n            if (isNaN(from)) {\r\n                from = 0;\r\n            } else if (from > this._characters.length) {\r\n                from = this._characters.length;\r\n            } else if (from < 0) {\r\n                from = 0;\r\n            }\r\n            if (to === undefined) {\r\n                to = this._characters.length;\r\n            } else if (isNaN(to)) {\r\n                to = 0;\r\n            } else if (to > this._characters.length) {\r\n                to = this._characters.length;\r\n            } else if (to < 0) {\r\n                to = 0;\r\n            }\r\n            const temp = [];\r\n            let idx = 0;\r\n            while (from < to) {\r\n                temp[idx++] = this._characters[from++];\r\n            }\r\n            return temp.join(\"\");\r\n        }\r\n\r\n        return this._text.substring(from, to);\r\n    }\r\n\r\n    public isWord(index: number): boolean {\r\n        const rWord = /\\w/g;\r\n        return this._characters ? this._characters[index].search(rWord) !== -1 : this._text.search(rWord) !== -1;\r\n    }\r\n}\r\n","import type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport type { Vector2 } from \"core/Maths/math.vector\";\r\nimport type { ClipboardInfo } from \"core/Events/clipboardEvents\";\r\nimport { ClipboardEventTypes } from \"core/Events/clipboardEvents\";\r\nimport type { PointerInfo, PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { PointerEventTypes } from \"core/Events/pointerEvents\";\r\n\r\nimport { Control } from \"./control\";\r\nimport type { IFocusableControl } from \"./focusableControl\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport type { VirtualKeyboard } from \"./virtualKeyboard\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { TextWrapper } from \"./textWrapper\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { IKeyboardEvent, IPointerEvent } from \"core/Events/deviceInputEvents\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/**\r\n * Class used to create input text control\r\n */\r\nexport class InputText extends Control implements IFocusableControl {\r\n    protected _textWrapper: TextWrapper;\r\n    protected _placeholderText = \"\";\r\n    protected _background = \"#222222\";\r\n    protected _focusedBackground = \"#000000\";\r\n    protected _focusedColor = \"white\";\r\n    protected _placeholderColor = \"gray\";\r\n    protected _thickness = 1;\r\n    protected _margin = new ValueAndUnit(10, ValueAndUnit.UNITMODE_PIXEL);\r\n    protected _autoStretchWidth = true;\r\n    protected _maxWidth = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    protected _isFocused = false;\r\n    /** the type of device that most recently focused the input: \"mouse\", \"touch\" or \"pen\" */\r\n    protected _focusedBy: string;\r\n    protected _blinkTimeout: number;\r\n    protected _blinkIsEven = false;\r\n    private _cursorOffset = 0;\r\n    protected _scrollLeft: Nullable<number>;\r\n    protected _textWidth: number;\r\n    protected _clickedCoordinate: Nullable<number>;\r\n    protected _deadKey = false;\r\n    protected _addKey = true;\r\n    protected _currentKey = \"\";\r\n    protected _isTextHighlightOn = false;\r\n    protected _textHighlightColor = \"#d5e0ff\";\r\n    protected _highligherOpacity = 0.4;\r\n    protected _highlightedText = \"\";\r\n    private _startHighlightIndex = 0;\r\n    private _endHighlightIndex = 0;\r\n    private _cursorIndex = -1;\r\n    protected _onFocusSelectAll = false;\r\n    protected _isPointerDown = false;\r\n    protected _onClipboardObserver: Nullable<Observer<ClipboardInfo>>;\r\n    protected _onPointerDblTapObserver: Nullable<Observer<PointerInfo>>;\r\n\r\n    /** @internal */\r\n    public _connectedVirtualKeyboard: Nullable<VirtualKeyboard>;\r\n\r\n    /** Gets or sets a string representing the message displayed on mobile when the control gets the focus */\r\n    @serialize()\r\n    public promptMessage = \"Please enter text:\";\r\n    /** Force disable prompt on mobile device */\r\n    @serialize()\r\n    public disableMobilePrompt = false;\r\n\r\n    /** Observable raised when the text changes */\r\n    public onTextChangedObservable = new Observable<InputText>();\r\n    /** Observable raised just before an entered character is to be added */\r\n    public onBeforeKeyAddObservable = new Observable<InputText>();\r\n    /** Observable raised when the control gets the focus */\r\n    public onFocusObservable = new Observable<InputText>();\r\n    /** Observable raised when the control loses the focus */\r\n    public onBlurObservable = new Observable<InputText>();\r\n    /**Observable raised when the text is highlighted */\r\n    public onTextHighlightObservable = new Observable<InputText>();\r\n    /**Observable raised when copy event is triggered */\r\n    public onTextCopyObservable = new Observable<InputText>();\r\n    /** Observable raised when cut event is triggered */\r\n    public onTextCutObservable = new Observable<InputText>();\r\n    /** Observable raised when paste event is triggered */\r\n    public onTextPasteObservable = new Observable<InputText>();\r\n    /** Observable raised when a key event was processed */\r\n    public onKeyboardEventProcessedObservable = new Observable<IKeyboardEvent>();\r\n\r\n    /** Gets or sets the maximum width allowed by the control */\r\n    @serialize()\r\n    public get maxWidth(): string | number {\r\n        return this._maxWidth.toString(this._host);\r\n    }\r\n\r\n    /** Gets the maximum width allowed by the control in pixels */\r\n    public get maxWidthInPixels(): number {\r\n        return this._maxWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set maxWidth(value: string | number) {\r\n        if (this._maxWidth.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._maxWidth.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the text highlighter transparency; default: 0.4 */\r\n    @serialize()\r\n    public get highligherOpacity(): number {\r\n        return this._highligherOpacity;\r\n    }\r\n\r\n    public set highligherOpacity(value: number) {\r\n        if (this._highligherOpacity === value) {\r\n            return;\r\n        }\r\n        this._highligherOpacity = value;\r\n        this._markAsDirty();\r\n    }\r\n    /** Gets or sets a boolean indicating whether to select complete text by default on input focus */\r\n    @serialize()\r\n    public get onFocusSelectAll(): boolean {\r\n        return this._onFocusSelectAll;\r\n    }\r\n\r\n    public set onFocusSelectAll(value: boolean) {\r\n        if (this._onFocusSelectAll === value) {\r\n            return;\r\n        }\r\n\r\n        this._onFocusSelectAll = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the text hightlight color */\r\n    @serialize()\r\n    public get textHighlightColor(): string {\r\n        return this._textHighlightColor;\r\n    }\r\n\r\n    public set textHighlightColor(value: string) {\r\n        if (this._textHighlightColor === value) {\r\n            return;\r\n        }\r\n        this._textHighlightColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets control margin */\r\n    @serialize()\r\n    public get margin(): string {\r\n        return this._margin.toString(this._host);\r\n    }\r\n\r\n    /** Gets control margin in pixels */\r\n    public get marginInPixels(): number {\r\n        return this._margin.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set margin(value: string) {\r\n        if (this._margin.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._margin.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can auto stretch its width to adapt to the text */\r\n    @serialize()\r\n    public get autoStretchWidth(): boolean {\r\n        return this._autoStretchWidth;\r\n    }\r\n\r\n    public set autoStretchWidth(value: boolean) {\r\n        if (this._autoStretchWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoStretchWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets border thickness */\r\n    @serialize()\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the background color when focused */\r\n    @serialize()\r\n    public get focusedBackground(): string {\r\n        return this._focusedBackground;\r\n    }\r\n\r\n    public set focusedBackground(value: string) {\r\n        if (this._focusedBackground === value) {\r\n            return;\r\n        }\r\n\r\n        this._focusedBackground = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the background color when focused */\r\n    @serialize()\r\n    public get focusedColor(): string {\r\n        return this._focusedColor;\r\n    }\r\n\r\n    public set focusedColor(value: string) {\r\n        if (this._focusedColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._focusedColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the background color */\r\n    @serialize()\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the placeholder color */\r\n    @serialize()\r\n    public get placeholderColor(): string {\r\n        return this._placeholderColor;\r\n    }\r\n\r\n    public set placeholderColor(value: string) {\r\n        if (this._placeholderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._placeholderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the text displayed when the control is empty */\r\n    @serialize()\r\n    public get placeholderText(): string {\r\n        return this._placeholderText;\r\n    }\r\n\r\n    public set placeholderText(value: string) {\r\n        if (this._placeholderText === value) {\r\n            return;\r\n        }\r\n        this._placeholderText = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the dead key. 0 to disable. */\r\n    @serialize()\r\n    public get deadKey(): boolean {\r\n        return this._deadKey;\r\n    }\r\n\r\n    public set deadKey(flag: boolean) {\r\n        this._deadKey = flag;\r\n    }\r\n\r\n    /** Gets or sets the highlight text */\r\n    public get highlightedText(): string {\r\n        return this._highlightedText;\r\n    }\r\n    public set highlightedText(text: string) {\r\n        if (this._highlightedText === text) {\r\n            return;\r\n        }\r\n        this._highlightedText = text;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets if the current key should be added */\r\n    public get addKey(): boolean {\r\n        return this._addKey;\r\n    }\r\n\r\n    public set addKey(flag: boolean) {\r\n        this._addKey = flag;\r\n    }\r\n\r\n    /** Gets or sets the value of the current key being entered */\r\n    public get currentKey(): string {\r\n        return this._currentKey;\r\n    }\r\n\r\n    public set currentKey(key: string) {\r\n        this._currentKey = key;\r\n    }\r\n\r\n    /** Gets or sets the text displayed in the control */\r\n    @serialize()\r\n    public get text(): string {\r\n        return this._textWrapper.text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        const valueAsString = value.toString(); // Forcing convertion\r\n\r\n        if (!this._textWrapper) {\r\n            this._textWrapper = new TextWrapper();\r\n        }\r\n\r\n        if (this._textWrapper.text === valueAsString) {\r\n            return;\r\n        }\r\n        this._textWrapper.text = valueAsString;\r\n        this._textHasChanged();\r\n    }\r\n\r\n    protected _textHasChanged(): void {\r\n        this._markAsDirty();\r\n        this.onTextChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Gets or sets control width */\r\n    @serialize()\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n\r\n        this.autoStretchWidth = false;\r\n    }\r\n\r\n    /**\r\n     * Creates a new InputText\r\n     * @param name defines the control name\r\n     * @param text defines the text of the control\r\n     */\r\n    constructor(public name?: string, text: string = \"\") {\r\n        super(name);\r\n\r\n        this.text = text;\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    /** @internal */\r\n    public onBlur(): void {\r\n        this._isFocused = false;\r\n        this._scrollLeft = null;\r\n        this._cursorOffset = 0;\r\n        clearTimeout(this._blinkTimeout);\r\n        this._markAsDirty();\r\n\r\n        this.onBlurObservable.notifyObservers(this);\r\n\r\n        this._host.unRegisterClipboardEvents();\r\n        if (this._onClipboardObserver) {\r\n            this._host.onClipboardObservable.remove(this._onClipboardObserver);\r\n        }\r\n        const scene = this._host.getScene();\r\n        if (this._onPointerDblTapObserver && scene) {\r\n            scene.onPointerObservable.remove(this._onPointerDblTapObserver);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public onFocus(): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n        this._scrollLeft = null;\r\n        this._isFocused = true;\r\n        this._blinkIsEven = false;\r\n        this._cursorOffset = 0;\r\n        this._markAsDirty();\r\n\r\n        this.onFocusObservable.notifyObservers(this);\r\n\r\n        if (this._focusedBy === \"touch\" && !this.disableMobilePrompt) {\r\n            const value = prompt(this.promptMessage);\r\n\r\n            if (value !== null) {\r\n                this.text = value;\r\n            }\r\n            this._host.focusedControl = null;\r\n            return;\r\n        }\r\n\r\n        this._host.registerClipboardEvents();\r\n\r\n        this._onClipboardObserver = this._host.onClipboardObservable.add((clipboardInfo) => {\r\n            // process clipboard event, can be configured.\r\n            switch (clipboardInfo.type) {\r\n                case ClipboardEventTypes.COPY:\r\n                    this._onCopyText(clipboardInfo.event);\r\n                    this.onTextCopyObservable.notifyObservers(this);\r\n                    break;\r\n                case ClipboardEventTypes.CUT:\r\n                    this._onCutText(clipboardInfo.event);\r\n                    this.onTextCutObservable.notifyObservers(this);\r\n                    break;\r\n                case ClipboardEventTypes.PASTE:\r\n                    this._onPasteText(clipboardInfo.event);\r\n                    this.onTextPasteObservable.notifyObservers(this);\r\n                    break;\r\n                default:\r\n                    return;\r\n            }\r\n        });\r\n\r\n        const scene = this._host.getScene();\r\n        if (scene) {\r\n            //register the pointer double tap event\r\n            this._onPointerDblTapObserver = scene.onPointerObservable.add((pointerInfo) => {\r\n                if (!this._isFocused) {\r\n                    return;\r\n                }\r\n                if (pointerInfo.type === PointerEventTypes.POINTERDOUBLETAP) {\r\n                    this._processDblClick(pointerInfo);\r\n                }\r\n            });\r\n        }\r\n\r\n        if (this._onFocusSelectAll) {\r\n            this._selectAllText();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Function to focus an inputText programmatically\r\n     */\r\n    public focus() {\r\n        this._host.moveFocusToControl(this);\r\n    }\r\n\r\n    /**\r\n     * Function to unfocus an inputText programmatically\r\n     */\r\n    public blur() {\r\n        this._host.focusedControl = null;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"InputText\";\r\n    }\r\n\r\n    /**\r\n     * Function called to get the list of controls that should not steal the focus from this control\r\n     * @returns an array of controls\r\n     */\r\n    public keepsFocusWith(): Nullable<Control[]> {\r\n        if (!this._connectedVirtualKeyboard) {\r\n            return null;\r\n        }\r\n        return [this._connectedVirtualKeyboard];\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public processKey(keyCode: number, key?: string, evt?: IKeyboardEvent) {\r\n        if (this.isReadOnly) {\r\n            return;\r\n        }\r\n\r\n        //return if clipboard event keys (i.e -ctr/cmd + c,v,x)\r\n        if (evt && (evt.ctrlKey || evt.metaKey) && (keyCode === 67 || keyCode === 86 || keyCode === 88)) {\r\n            return;\r\n        }\r\n\r\n        //select all\r\n        if (evt && (evt.ctrlKey || evt.metaKey) && keyCode === 65) {\r\n            this._selectAllText();\r\n            evt.preventDefault();\r\n            return;\r\n        }\r\n        // Specific cases\r\n        switch (keyCode) {\r\n            case 32: //SPACE\r\n                key = \" \"; //ie11 key for space is \"Spacebar\"\r\n                break;\r\n            case 191: //SLASH\r\n                if (evt) {\r\n                    evt.preventDefault();\r\n                }\r\n                break;\r\n            case 8: // BACKSPACE\r\n                if (this._textWrapper.text && this._textWrapper.length > 0) {\r\n                    //delete the highlighted text\r\n                    if (this.isTextHighlightOn) {\r\n                        this._textWrapper.removePart(this._startHighlightIndex, this._endHighlightIndex);\r\n                        this._textHasChanged();\r\n                        this.isTextHighlightOn = false;\r\n                        this._cursorOffset = this._textWrapper.length - this._startHighlightIndex;\r\n                        this._blinkIsEven = false;\r\n                        if (evt) {\r\n                            evt.preventDefault();\r\n                        }\r\n                        return;\r\n                    }\r\n                    //delete single character\r\n                    if (this._cursorOffset === 0) {\r\n                        this.text = this._textWrapper.substr(0, this._textWrapper.length - 1);\r\n                    } else {\r\n                        const deletePosition = this._textWrapper.length - this._cursorOffset;\r\n                        if (deletePosition > 0) {\r\n                            this._textWrapper.removePart(deletePosition - 1, deletePosition);\r\n                            this._textHasChanged();\r\n                        }\r\n                    }\r\n                }\r\n                if (evt) {\r\n                    evt.preventDefault();\r\n                }\r\n                return;\r\n            case 46: // DELETE\r\n                if (this.isTextHighlightOn) {\r\n                    this._textWrapper.removePart(this._startHighlightIndex, this._endHighlightIndex);\r\n                    this._textHasChanged();\r\n                    this.isTextHighlightOn = false;\r\n                    this._cursorOffset = this._textWrapper.length - this._startHighlightIndex;\r\n                    if (evt) {\r\n                        evt.preventDefault();\r\n                    }\r\n                    return;\r\n                }\r\n                if (this._textWrapper.text && this._textWrapper.length > 0 && this._cursorOffset > 0) {\r\n                    const deletePosition = this._textWrapper.length - this._cursorOffset;\r\n                    this._textWrapper.removePart(deletePosition, deletePosition + 1);\r\n                    this._textHasChanged();\r\n                    this._cursorOffset--;\r\n                }\r\n                if (evt) {\r\n                    evt.preventDefault();\r\n                }\r\n                return;\r\n            case 13: // RETURN\r\n                this._host.focusedControl = null;\r\n                this.isTextHighlightOn = false;\r\n                return;\r\n            case 35: // END\r\n                this._cursorOffset = 0;\r\n                this._blinkIsEven = false;\r\n                this.isTextHighlightOn = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 36: // HOME\r\n                this._cursorOffset = this._textWrapper.length;\r\n                this._blinkIsEven = false;\r\n                this.isTextHighlightOn = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 37: // LEFT\r\n                this._cursorOffset++;\r\n                if (this._cursorOffset > this._textWrapper.length) {\r\n                    this._cursorOffset = this._textWrapper.length;\r\n                }\r\n\r\n                if (evt && evt.shiftKey) {\r\n                    // update the cursor\r\n                    this._blinkIsEven = false;\r\n                    // shift + ctrl/cmd + <-\r\n                    if (evt.ctrlKey || evt.metaKey) {\r\n                        if (!this.isTextHighlightOn) {\r\n                            if (this._textWrapper.length === this._cursorOffset) {\r\n                                return;\r\n                            } else {\r\n                                this._endHighlightIndex = this._textWrapper.length - this._cursorOffset + 1;\r\n                            }\r\n                        }\r\n                        this._startHighlightIndex = 0;\r\n                        this._cursorIndex = this._textWrapper.length - this._endHighlightIndex;\r\n                        this._cursorOffset = this._textWrapper.length;\r\n                        this.isTextHighlightOn = true;\r\n                        this._markAsDirty();\r\n                        return;\r\n                    }\r\n                    //store the starting point\r\n                    if (!this.isTextHighlightOn) {\r\n                        this.isTextHighlightOn = true;\r\n                        this._cursorIndex = this._cursorOffset >= this._textWrapper.length ? this._textWrapper.length : this._cursorOffset - 1;\r\n                    }\r\n                    //if text is already highlighted\r\n                    else if (this._cursorIndex === -1) {\r\n                        this._cursorIndex = this._textWrapper.length - this._endHighlightIndex;\r\n                        this._cursorOffset = this._startHighlightIndex === 0 ? this._textWrapper.length : this._textWrapper.length - this._startHighlightIndex + 1;\r\n                    }\r\n                    //set the highlight indexes\r\n                    if (this._cursorIndex < this._cursorOffset) {\r\n                        this._endHighlightIndex = this._textWrapper.length - this._cursorIndex;\r\n                        this._startHighlightIndex = this._textWrapper.length - this._cursorOffset;\r\n                    } else if (this._cursorIndex > this._cursorOffset) {\r\n                        this._endHighlightIndex = this._textWrapper.length - this._cursorOffset;\r\n                        this._startHighlightIndex = this._textWrapper.length - this._cursorIndex;\r\n                    } else {\r\n                        this.isTextHighlightOn = false;\r\n                    }\r\n                    this._markAsDirty();\r\n                    return;\r\n                }\r\n                if (this.isTextHighlightOn) {\r\n                    this._cursorOffset = this._textWrapper.length - this._startHighlightIndex;\r\n                    this.isTextHighlightOn = false;\r\n                }\r\n                if (evt && (evt.ctrlKey || evt.metaKey)) {\r\n                    this._cursorOffset = this._textWrapper.length;\r\n                    evt.preventDefault();\r\n                }\r\n                this._blinkIsEven = false;\r\n                this.isTextHighlightOn = false;\r\n                this._cursorIndex = -1;\r\n                this._markAsDirty();\r\n                return;\r\n            case 39: // RIGHT\r\n                this._cursorOffset--;\r\n                if (this._cursorOffset < 0) {\r\n                    this._cursorOffset = 0;\r\n                }\r\n                if (evt && evt.shiftKey) {\r\n                    //update the cursor\r\n                    this._blinkIsEven = false;\r\n                    //shift + ctrl/cmd + ->\r\n                    if (evt.ctrlKey || evt.metaKey) {\r\n                        if (!this.isTextHighlightOn) {\r\n                            if (this._cursorOffset === 0) {\r\n                                return;\r\n                            } else {\r\n                                this._startHighlightIndex = this._textWrapper.length - this._cursorOffset - 1;\r\n                            }\r\n                        }\r\n                        this._endHighlightIndex = this._textWrapper.length;\r\n                        this.isTextHighlightOn = true;\r\n                        this._cursorIndex = this._textWrapper.length - this._startHighlightIndex;\r\n                        this._cursorOffset = 0;\r\n                        this._markAsDirty();\r\n                        return;\r\n                    }\r\n\r\n                    if (!this.isTextHighlightOn) {\r\n                        this.isTextHighlightOn = true;\r\n                        this._cursorIndex = this._cursorOffset <= 0 ? 0 : this._cursorOffset + 1;\r\n                    }\r\n                    //if text is already highlighted\r\n                    else if (this._cursorIndex === -1) {\r\n                        this._cursorIndex = this._textWrapper.length - this._startHighlightIndex;\r\n                        this._cursorOffset = this._textWrapper.length === this._endHighlightIndex ? 0 : this._textWrapper.length - this._endHighlightIndex - 1;\r\n                    }\r\n                    //set the highlight indexes\r\n                    if (this._cursorIndex < this._cursorOffset) {\r\n                        this._endHighlightIndex = this._textWrapper.length - this._cursorIndex;\r\n                        this._startHighlightIndex = this._textWrapper.length - this._cursorOffset;\r\n                    } else if (this._cursorIndex > this._cursorOffset) {\r\n                        this._endHighlightIndex = this._textWrapper.length - this._cursorOffset;\r\n                        this._startHighlightIndex = this._textWrapper.length - this._cursorIndex;\r\n                    } else {\r\n                        this.isTextHighlightOn = false;\r\n                    }\r\n                    this._markAsDirty();\r\n                    return;\r\n                }\r\n                if (this.isTextHighlightOn) {\r\n                    this._cursorOffset = this._textWrapper.length - this._endHighlightIndex;\r\n                    this.isTextHighlightOn = false;\r\n                }\r\n                //ctr + ->\r\n                if (evt && (evt.ctrlKey || evt.metaKey)) {\r\n                    this._cursorOffset = 0;\r\n                    evt.preventDefault();\r\n                }\r\n                this._blinkIsEven = false;\r\n                this.isTextHighlightOn = false;\r\n                this._cursorIndex = -1;\r\n                this._markAsDirty();\r\n                return;\r\n        }\r\n        if (keyCode === 32) {\r\n            key = evt?.key ?? \" \";\r\n        }\r\n        this._deadKey = key === \"Dead\";\r\n        // Printable characters\r\n        if (\r\n            key &&\r\n            (keyCode === -1 || // Direct access\r\n                keyCode === 32 || // Space\r\n                keyCode === 34 || // \"    add support for single and double quotes\r\n                keyCode === 39 || // '\r\n                (keyCode > 47 && keyCode < 64) || // Numbers\r\n                (keyCode > 64 && keyCode < 91) || // Letters\r\n                (keyCode > 159 && keyCode < 193) || // Special characters\r\n                (keyCode > 218 && keyCode < 223) || // Special characters\r\n                (keyCode > 95 && keyCode < 112))\r\n        ) {\r\n            // Numpad\r\n            this._currentKey = key;\r\n            this.onBeforeKeyAddObservable.notifyObservers(this);\r\n            key = this._currentKey;\r\n            if (this._addKey && !this._deadKey) {\r\n                if (this.isTextHighlightOn) {\r\n                    this._textWrapper.removePart(this._startHighlightIndex, this._endHighlightIndex, key);\r\n                    this._textHasChanged();\r\n                    this._cursorOffset = this._textWrapper.length - (this._startHighlightIndex + 1);\r\n                    this.isTextHighlightOn = false;\r\n                    this._blinkIsEven = false;\r\n                    this._markAsDirty();\r\n                } else if (this._cursorOffset === 0) {\r\n                    this.text += this._deadKey && evt?.key ? evt.key : key;\r\n                } else {\r\n                    const insertPosition = this._textWrapper.length - this._cursorOffset;\r\n                    this._textWrapper.removePart(insertPosition, insertPosition, key);\r\n                    this._textHasChanged();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _updateValueFromCursorIndex(offset: number) {\r\n        //update the cursor\r\n        this._blinkIsEven = false;\r\n\r\n        if (this._cursorIndex === -1) {\r\n            this._cursorIndex = offset;\r\n        } else {\r\n            if (this._cursorIndex < this._cursorOffset) {\r\n                this._endHighlightIndex = this._textWrapper.length - this._cursorIndex;\r\n                this._startHighlightIndex = this._textWrapper.length - this._cursorOffset;\r\n            } else if (this._cursorIndex > this._cursorOffset) {\r\n                this._endHighlightIndex = this._textWrapper.length - this._cursorOffset;\r\n                this._startHighlightIndex = this._textWrapper.length - this._cursorIndex;\r\n            } else {\r\n                this.isTextHighlightOn = false;\r\n                this._markAsDirty();\r\n                return;\r\n            }\r\n        }\r\n        this.isTextHighlightOn = true;\r\n        this._markAsDirty();\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected _processDblClick(evt: PointerInfo) {\r\n        //pre-find the start and end index of the word under cursor, speeds up the rendering\r\n        this._startHighlightIndex = this._textWrapper.length - this._cursorOffset;\r\n        this._endHighlightIndex = this._startHighlightIndex;\r\n        let moveLeft, moveRight;\r\n        do {\r\n            moveRight = this._endHighlightIndex < this._textWrapper.length && this._textWrapper.isWord(this._endHighlightIndex) ? ++this._endHighlightIndex : 0;\r\n            moveLeft = this._startHighlightIndex > 0 && this._textWrapper.isWord(this._startHighlightIndex - 1) ? --this._startHighlightIndex : 0;\r\n        } while (moveLeft || moveRight);\r\n\r\n        this._cursorOffset = this._textWrapper.length - this._startHighlightIndex;\r\n\r\n        this.isTextHighlightOn = true;\r\n        this._clickedCoordinate = null;\r\n        this._blinkIsEven = true;\r\n        this._cursorIndex = -1;\r\n        this._markAsDirty();\r\n    }\r\n    /** @internal */\r\n    protected _selectAllText() {\r\n        this._blinkIsEven = true;\r\n        this.isTextHighlightOn = true;\r\n\r\n        this._startHighlightIndex = 0;\r\n        this._endHighlightIndex = this._textWrapper.length;\r\n        this._cursorOffset = this._textWrapper.length;\r\n        this._cursorIndex = -1;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Handles the keyboard event\r\n     * @param evt Defines the KeyboardEvent\r\n     */\r\n    public processKeyboard(evt: IKeyboardEvent): void {\r\n        // process pressed key\r\n        this.processKey(evt.keyCode, evt.key, evt);\r\n\r\n        this.onKeyboardEventProcessedObservable.notifyObservers(evt);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _onCopyText(ev: ClipboardEvent): void {\r\n        this.isTextHighlightOn = false;\r\n        //when write permission to clipbaord data is denied\r\n        try {\r\n            ev.clipboardData && ev.clipboardData.setData(\"text/plain\", this._highlightedText);\r\n        } catch {} //pass\r\n        this._host.clipboardData = this._highlightedText;\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _onCutText(ev: ClipboardEvent): void {\r\n        if (!this._highlightedText) {\r\n            return;\r\n        }\r\n        this._textWrapper.removePart(this._startHighlightIndex, this._endHighlightIndex);\r\n        this._textHasChanged();\r\n        this.isTextHighlightOn = false;\r\n        this._cursorOffset = this._textWrapper.length - this._startHighlightIndex;\r\n        //when write permission to clipbaord data is denied\r\n        try {\r\n            ev.clipboardData && ev.clipboardData.setData(\"text/plain\", this._highlightedText);\r\n        } catch {} //pass\r\n\r\n        this._host.clipboardData = this._highlightedText;\r\n        this._highlightedText = \"\";\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _onPasteText(ev: ClipboardEvent): void {\r\n        let data: string = \"\";\r\n        if (ev.clipboardData && ev.clipboardData.types.indexOf(\"text/plain\") !== -1) {\r\n            data = ev.clipboardData.getData(\"text/plain\");\r\n        } else {\r\n            //get the cached data; returns blank string by default\r\n            data = this._host.clipboardData;\r\n        }\r\n        const insertPosition = this._textWrapper.length - this._cursorOffset;\r\n        this._textWrapper.removePart(insertPosition, insertPosition, data);\r\n        this._textHasChanged();\r\n    }\r\n\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        // Background\r\n        if (this._isFocused) {\r\n            if (this._focusedBackground) {\r\n                context.fillStyle = this._isEnabled ? this._focusedBackground : this._disabledColor;\r\n\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n        } else if (this._background) {\r\n            context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n\r\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (!this._fontOffset || this._wasDirty) {\r\n            this._fontOffset = Control._GetFontOffset(context.font);\r\n        }\r\n\r\n        // Text\r\n        const clipTextLeft = this._currentMeasure.left + this._margin.getValueInPixel(this._host, this._tempParentMeasure.width);\r\n        if (this.color) {\r\n            context.fillStyle = this.color;\r\n        }\r\n\r\n        let text = this._beforeRenderText(this._textWrapper);\r\n\r\n        if (!this._isFocused && !this._textWrapper.text && this._placeholderText) {\r\n            text = new TextWrapper();\r\n            text.text = this._placeholderText;\r\n\r\n            if (this._placeholderColor) {\r\n                context.fillStyle = this._placeholderColor;\r\n            }\r\n        }\r\n\r\n        this._textWidth = context.measureText(text.text).width;\r\n        const marginWidth = this._margin.getValueInPixel(this._host, this._tempParentMeasure.width) * 2;\r\n        if (this._autoStretchWidth) {\r\n            this.width = Math.min(this._maxWidth.getValueInPixel(this._host, this._tempParentMeasure.width), this._textWidth + marginWidth) + \"px\";\r\n            this._autoStretchWidth = true; // setting the width will have reset _autoStretchWidth to false!\r\n        }\r\n\r\n        const rootY = this._fontOffset.ascent + (this._currentMeasure.height - this._fontOffset.height) / 2;\r\n        const availableWidth = this._width.getValueInPixel(this._host, this._tempParentMeasure.width) - marginWidth;\r\n\r\n        context.save();\r\n        context.beginPath();\r\n        context.rect(clipTextLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, availableWidth + 2, this._currentMeasure.height);\r\n        context.clip();\r\n\r\n        if (this._isFocused && this._textWidth > availableWidth) {\r\n            const textLeft = clipTextLeft - this._textWidth + availableWidth;\r\n            if (!this._scrollLeft) {\r\n                this._scrollLeft = textLeft;\r\n            }\r\n        } else {\r\n            this._scrollLeft = clipTextLeft;\r\n        }\r\n\r\n        context.fillText(text.text, this._scrollLeft, this._currentMeasure.top + rootY);\r\n\r\n        // Cursor\r\n        if (this._isFocused) {\r\n            // Need to move cursor\r\n            if (this._clickedCoordinate) {\r\n                const rightPosition = this._scrollLeft + this._textWidth;\r\n                const absoluteCursorPosition = rightPosition - this._clickedCoordinate;\r\n                let currentSize = 0;\r\n                this._cursorOffset = 0;\r\n                let previousDist = 0;\r\n                do {\r\n                    if (this._cursorOffset) {\r\n                        previousDist = Math.abs(absoluteCursorPosition - currentSize);\r\n                    }\r\n                    this._cursorOffset++;\r\n                    currentSize = context.measureText(text.substr(text.length - this._cursorOffset, this._cursorOffset)).width;\r\n                } while (currentSize < absoluteCursorPosition && text.length >= this._cursorOffset);\r\n\r\n                // Find closest move\r\n                if (Math.abs(absoluteCursorPosition - currentSize) > previousDist) {\r\n                    this._cursorOffset--;\r\n                }\r\n\r\n                this._blinkIsEven = false;\r\n                this._clickedCoordinate = null;\r\n            }\r\n\r\n            // Render cursor\r\n            if (!this._blinkIsEven) {\r\n                const cursorOffsetText = text.substr(text.length - this._cursorOffset);\r\n                const cursorOffsetWidth = context.measureText(cursorOffsetText).width;\r\n                let cursorLeft = this._scrollLeft + this._textWidth - cursorOffsetWidth;\r\n\r\n                if (cursorLeft < clipTextLeft) {\r\n                    this._scrollLeft += clipTextLeft - cursorLeft;\r\n                    cursorLeft = clipTextLeft;\r\n                    this._markAsDirty();\r\n                } else if (cursorLeft > clipTextLeft + availableWidth) {\r\n                    this._scrollLeft += clipTextLeft + availableWidth - cursorLeft;\r\n                    cursorLeft = clipTextLeft + availableWidth;\r\n                    this._markAsDirty();\r\n                }\r\n                if (!this.isTextHighlightOn) {\r\n                    context.fillRect(cursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, 2, this._fontOffset.height);\r\n                }\r\n            }\r\n\r\n            clearTimeout(this._blinkTimeout);\r\n            this._blinkTimeout = <any>setTimeout(() => {\r\n                this._blinkIsEven = !this._blinkIsEven;\r\n                this._markAsDirty();\r\n            }, 500);\r\n\r\n            //show the highlighted text\r\n            if (this.isTextHighlightOn) {\r\n                clearTimeout(this._blinkTimeout);\r\n                const highlightCursorOffsetWidth = context.measureText(text.substring(this._startHighlightIndex)).width;\r\n                let highlightCursorLeft = this._scrollLeft + this._textWidth - highlightCursorOffsetWidth;\r\n                this._highlightedText = text.substring(this._startHighlightIndex, this._endHighlightIndex);\r\n                let width = context.measureText(text.substring(this._startHighlightIndex, this._endHighlightIndex)).width;\r\n                if (highlightCursorLeft < clipTextLeft) {\r\n                    width = width - (clipTextLeft - highlightCursorLeft);\r\n                    if (!width) {\r\n                        // when using left arrow on text.length > availableWidth;\r\n                        // assigns the width of the first letter after clipTextLeft\r\n                        width = context.measureText(text.charAt(text.length - this._cursorOffset)).width;\r\n                    }\r\n                    highlightCursorLeft = clipTextLeft;\r\n                }\r\n                //for transparancy\r\n                context.globalAlpha = this._highligherOpacity;\r\n                context.fillStyle = this._textHighlightColor;\r\n                context.fillRect(highlightCursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, width, this._fontOffset.height);\r\n                context.globalAlpha = 1.0;\r\n            }\r\n        }\r\n        context.restore();\r\n\r\n        // Border\r\n        if (this._thickness) {\r\n            if (this._isFocused) {\r\n                if (this.focusedColor) {\r\n                    context.strokeStyle = this.focusedColor;\r\n                }\r\n            } else {\r\n                if (this.color) {\r\n                    context.strokeStyle = this.color;\r\n                }\r\n            }\r\n\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.strokeRect(\r\n                this._currentMeasure.left + this._thickness / 2,\r\n                this._currentMeasure.top + this._thickness / 2,\r\n                this._currentMeasure.width - this._thickness,\r\n                this._currentMeasure.height - this._thickness\r\n            );\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isReadOnly) {\r\n            return true;\r\n        }\r\n\r\n        this._clickedCoordinate = coordinates.x;\r\n        this.isTextHighlightOn = false;\r\n        this._highlightedText = \"\";\r\n        this._cursorIndex = -1;\r\n        this._isPointerDown = true;\r\n        this._host._capturingControl[pointerId] = this;\r\n        this._focusedBy = (pi.event as IPointerEvent).pointerType;\r\n        if (this._host.focusedControl === this) {\r\n            // Move cursor\r\n            clearTimeout(this._blinkTimeout);\r\n            this._markAsDirty();\r\n            return true;\r\n        }\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        this._host.focusedControl = this;\r\n\r\n        return true;\r\n    }\r\n    public _onPointerMove(target: Control, coordinates: Vector2, pointerId: number, pi: PointerInfoBase): void {\r\n        if (this._host.focusedControl === this && this._isPointerDown && !this.isReadOnly) {\r\n            this._clickedCoordinate = coordinates.x;\r\n            this._markAsDirty();\r\n            this._updateValueFromCursorIndex(this._cursorOffset);\r\n        }\r\n        super._onPointerMove(target, coordinates, pointerId, pi);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._isPointerDown = false;\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n\r\n    protected _beforeRenderText(textWrapper: TextWrapper): TextWrapper {\r\n        return textWrapper;\r\n    }\r\n\r\n    /** @internal */\r\n    private set isTextHighlightOn(value: boolean) {\r\n        if (this._isTextHighlightOn === value) {\r\n            return;\r\n        }\r\n        if (value) {\r\n            this.onTextHighlightObservable.notifyObservers(this);\r\n        }\r\n        this._isTextHighlightOn = value;\r\n    }\r\n\r\n    /** @internal */\r\n    private get isTextHighlightOn(): boolean {\r\n        return this._isTextHighlightOn;\r\n    }\r\n\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this.onBlurObservable.clear();\r\n        this.onFocusObservable.clear();\r\n        this.onTextChangedObservable.clear();\r\n        this.onTextCopyObservable.clear();\r\n        this.onTextCutObservable.clear();\r\n        this.onTextPasteObservable.clear();\r\n        this.onTextHighlightObservable.clear();\r\n        this.onKeyboardEventProcessedObservable.clear();\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.InputText\", InputText);\r\n","import type { Nullable } from \"core/types\";\r\n\r\nimport { Container } from \"./container\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\nimport type { Measure } from \"../measure\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport type { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\n\r\n/**\r\n * Class used to create a 2D grid container\r\n */\r\nexport class Grid extends Container {\r\n    private _rowDefinitions = new Array<ValueAndUnit>();\r\n    private _rowDefinitionObservers: Observer<void>[] = [];\r\n    private _columnDefinitions = new Array<ValueAndUnit>();\r\n    private _columnDefinitionObservers: Observer<void>[] = [];\r\n    private _cells: { [key: string]: Container } = {};\r\n    private _childControls = new Array<Control>();\r\n\r\n    /**\r\n     * Sets/Gets a boolean indicating that control content must be clipped\r\n     * Please note that not clipping content may generate issues with adt.useInvalidateRectOptimization so it is recommended to turn this optimization off if you want to use unclipped children\r\n     */\r\n    public set clipContent(value: boolean) {\r\n        this._clipContent = value;\r\n\r\n        // This value has to be replicated on all of the container cells\r\n        for (const key in this._cells) {\r\n            this._cells[key].clipContent = value;\r\n        }\r\n    }\r\n\r\n    @serialize()\r\n    public get clipContent(): boolean {\r\n        return this._clipContent;\r\n    }\r\n\r\n    /**\r\n     * Sets/Gets a boolean indicating if the children are clipped to the current control bounds.\r\n     * Please note that not clipping children may generate issues with adt.useInvalidateRectOptimization so it is recommended to turn this optimization off if you want to use unclipped children\r\n     */\r\n    public set clipChildren(value: boolean) {\r\n        this._clipChildren = value;\r\n\r\n        // This value has to be replicated on all of the container cells\r\n        for (const key in this._cells) {\r\n            this._cells[key].clipChildren = value;\r\n        }\r\n    }\r\n\r\n    public get clipChildren(): boolean {\r\n        return this._clipChildren;\r\n    }\r\n\r\n    /**\r\n     * Gets the number of columns\r\n     */\r\n    public get columnCount(): number {\r\n        return this._columnDefinitions.length;\r\n    }\r\n\r\n    /**\r\n     * Gets the number of rows\r\n     */\r\n    public get rowCount(): number {\r\n        return this._rowDefinitions.length;\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._childControls;\r\n    }\r\n\r\n    /** Gets the list of cells (e.g. the containers) */\r\n    public get cells(): { [key: string]: Container } {\r\n        return this._cells;\r\n    }\r\n\r\n    /**\r\n     * Gets the definition of a specific row\r\n     * @param index defines the index of the row\r\n     * @returns the row definition\r\n     */\r\n    public getRowDefinition(index: number): Nullable<ValueAndUnit> {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return null;\r\n        }\r\n\r\n        return this._rowDefinitions[index];\r\n    }\r\n\r\n    /**\r\n     * Gets the definition of a specific column\r\n     * @param index defines the index of the column\r\n     * @returns the column definition\r\n     */\r\n    public getColumnDefinition(index: number): Nullable<ValueAndUnit> {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return null;\r\n        }\r\n\r\n        return this._columnDefinitions[index];\r\n    }\r\n\r\n    /**\r\n     * Adds a new row to the grid\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the height is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addRowDefinition(height: number, isPixel = false): Grid {\r\n        this._rowDefinitions.push(new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n        this._rowDefinitionObservers.push(this._rowDefinitions[this.rowCount - 1].onChangedObservable.add(() => this._markAsDirty())!);\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new column to the grid\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addColumnDefinition(width: number, isPixel = false): Grid {\r\n        this._columnDefinitions.push(new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n        this._columnDefinitionObservers.push(this._columnDefinitions[this.columnCount - 1].onChangedObservable.add(() => this._markAsDirty())!);\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a row definition\r\n     * @param index defines the index of the row to update\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the weight is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setRowDefinition(index: number, height: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        const current = this._rowDefinitions[index];\r\n        if (current && current.isPixel === isPixel && current.value === height) {\r\n            return this;\r\n        }\r\n\r\n        this._rowDefinitions[index].onChangedObservable.remove(this._rowDefinitionObservers[index]);\r\n        this._rowDefinitions[index] = new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n        this._rowDefinitionObservers[index] = this._rowDefinitions[index].onChangedObservable.add(() => this._markAsDirty())!;\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a column definition\r\n     * @param index defines the index of the column to update\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setColumnDefinition(index: number, width: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        const current = this._columnDefinitions[index];\r\n        if (current && current.isPixel === isPixel && current.value === width) {\r\n            return this;\r\n        }\r\n\r\n        this._columnDefinitions[index].onChangedObservable.remove(this._columnDefinitionObservers[index]);\r\n        this._columnDefinitions[index] = new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n        this._columnDefinitionObservers[index] = this._columnDefinitions[index].onChangedObservable.add(() => this._markAsDirty())!;\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of children stored in a specific cell\r\n     * @param row defines the row to check\r\n     * @param column defines the column to check\r\n     * @returns the list of controls\r\n     */\r\n    public getChildrenAt(row: number, column: number): Nullable<Array<Control>> {\r\n        const cell = this._cells[`${row}:${column}`];\r\n\r\n        if (!cell) {\r\n            return null;\r\n        }\r\n\r\n        return cell.children;\r\n    }\r\n\r\n    /**\r\n     * Gets a string representing the child cell info (row x column)\r\n     * @param child defines the control to get info from\r\n     * @returns a string containing the child cell info (row x column)\r\n     */\r\n    public getChildCellInfo(child: Control): string {\r\n        return child._tag;\r\n    }\r\n\r\n    private _removeCell(cell: Container, key: string) {\r\n        if (!cell) {\r\n            return;\r\n        }\r\n\r\n        super.removeControl(cell);\r\n\r\n        for (const control of cell.children) {\r\n            const childIndex = this._childControls.indexOf(control);\r\n\r\n            if (childIndex !== -1) {\r\n                this._childControls.splice(childIndex, 1);\r\n            }\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    private _offsetCell(previousKey: string, key: string) {\r\n        if (!this._cells[key]) {\r\n            return;\r\n        }\r\n\r\n        this._cells[previousKey] = this._cells[key];\r\n\r\n        for (const control of this._cells[previousKey].children) {\r\n            control._tag = previousKey;\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    /**\r\n     * Remove a column definition at specified index\r\n     * @param index defines the index of the column to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeColumnDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (let x = 0; x < this._rowDefinitions.length; x++) {\r\n            const key = `${x}:${index}`;\r\n            const cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (let x = 0; x < this._rowDefinitions.length; x++) {\r\n            for (let y = index + 1; y < this._columnDefinitions.length; y++) {\r\n                const previousKey = `${x}:${y - 1}`;\r\n                const key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._columnDefinitions[index].onChangedObservable.remove(this._columnDefinitionObservers[index]);\r\n        this._columnDefinitions.splice(index, 1);\r\n        this._columnDefinitionObservers.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a row definition at specified index\r\n     * @param index defines the index of the row to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeRowDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (let y = 0; y < this._columnDefinitions.length; y++) {\r\n            const key = `${index}:${y}`;\r\n            const cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (let y = 0; y < this._columnDefinitions.length; y++) {\r\n            for (let x = index + 1; x < this._rowDefinitions.length; x++) {\r\n                const previousKey = `${x - 1}:${y}`;\r\n                const key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._rowDefinitions[index].onChangedObservable.remove(this._rowDefinitionObservers[index]);\r\n        this._rowDefinitions.splice(index, 1);\r\n        this._rowDefinitionObservers.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current grid\r\n     * @param control defines the control to add\r\n     * @param row defines the row where to add the control (0 by default)\r\n     * @param column defines the column where to add the control (0 by default)\r\n     * @returns the current grid\r\n     */\r\n    public addControl(control: Control, row: number = 0, column: number = 0): Grid {\r\n        if (this._rowDefinitions.length === 0) {\r\n            // Add default row definition\r\n            this.addRowDefinition(1, false);\r\n        }\r\n\r\n        if (this._columnDefinitions.length === 0) {\r\n            // Add default column definition\r\n            this.addColumnDefinition(1, false);\r\n        }\r\n\r\n        if (this._childControls.indexOf(control) !== -1) {\r\n            Tools.Warn(`Control (Name:${control.name}, UniqueId:${control.uniqueId}) is already associated with this grid. You must remove it before reattaching it`);\r\n            return this;\r\n        }\r\n\r\n        const x = Math.min(row, this._rowDefinitions.length - 1);\r\n        const y = Math.min(column, this._columnDefinitions.length - 1);\r\n        const key = `${x}:${y}`;\r\n        let goodContainer = this._cells[key];\r\n\r\n        if (!goodContainer) {\r\n            goodContainer = new Container(key);\r\n            this._cells[key] = goodContainer;\r\n            goodContainer.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            goodContainer.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            goodContainer.clipContent = this.clipContent;\r\n            goodContainer.clipChildren = this.clipChildren;\r\n            super.addControl(goodContainer);\r\n        }\r\n\r\n        goodContainer.addControl(control);\r\n        this._childControls.push(control);\r\n        control._tag = key;\r\n        control.parent = this;\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        const index = this._childControls.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._childControls.splice(index, 1);\r\n        }\r\n\r\n        const cell = this._cells[control._tag];\r\n\r\n        if (cell) {\r\n            cell.removeControl(control);\r\n            control._tag = null;\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Grid\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Grid\";\r\n    }\r\n\r\n    protected _getGridDefinitions(definitionCallback: (lefts: number[], tops: number[], widths: number[], heights: number[]) => void) {\r\n        const widths = [];\r\n        const heights = [];\r\n        const lefts = [];\r\n        const tops = [];\r\n\r\n        let availableWidth = this._currentMeasure.width;\r\n        let globalWidthPercentage = 0;\r\n        let availableHeight = this._currentMeasure.height;\r\n        let globalHeightPercentage = 0;\r\n\r\n        // Heights\r\n        let index = 0;\r\n        for (const rowDefinition of this._rowDefinitions) {\r\n            if (rowDefinition.isPixel) {\r\n                const height = rowDefinition.getValue(this._host);\r\n                availableHeight -= height;\r\n                heights[index] = height;\r\n            } else {\r\n                globalHeightPercentage += rowDefinition.value;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let top = 0;\r\n        index = 0;\r\n        for (const rowDefinition of this._rowDefinitions) {\r\n            tops.push(top);\r\n\r\n            if (!rowDefinition.isPixel) {\r\n                const height = Math.round((rowDefinition.value / globalHeightPercentage) * availableHeight);\r\n                top += height;\r\n                heights[index] = height;\r\n            } else {\r\n                top += rowDefinition.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        // Widths\r\n        index = 0;\r\n        for (const columnDefinition of this._columnDefinitions) {\r\n            if (columnDefinition.isPixel) {\r\n                const width = columnDefinition.getValue(this._host);\r\n                availableWidth -= width;\r\n                widths[index] = width;\r\n            } else {\r\n                globalWidthPercentage += columnDefinition.value;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let left = 0;\r\n        index = 0;\r\n        for (const columnDefinition of this._columnDefinitions) {\r\n            lefts.push(left);\r\n            if (!columnDefinition.isPixel) {\r\n                const width = Math.round((columnDefinition.value / globalWidthPercentage) * availableWidth);\r\n                left += width;\r\n                widths[index] = width;\r\n            } else {\r\n                left += columnDefinition.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        definitionCallback(lefts, tops, widths, heights);\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        this._getGridDefinitions((lefts: number[], tops: number[], widths: number[], heights: number[]) => {\r\n            // Setting child sizes\r\n            for (const key in this._cells) {\r\n                if (!Object.prototype.hasOwnProperty.call(this._cells, key)) {\r\n                    continue;\r\n                }\r\n                const split = key.split(\":\");\r\n                const x = parseInt(split[0]);\r\n                const y = parseInt(split[1]);\r\n                const cell = this._cells[key];\r\n\r\n                cell.leftInPixels = lefts[y];\r\n                cell.topInPixels = tops[x];\r\n                cell.widthInPixels = widths[y];\r\n                cell.heightInPixels = heights[x];\r\n                cell._left.ignoreAdaptiveScaling = true;\r\n                cell._top.ignoreAdaptiveScaling = true;\r\n                cell._width.ignoreAdaptiveScaling = true;\r\n                cell._height.ignoreAdaptiveScaling = true;\r\n            }\r\n        });\r\n\r\n        super._additionalProcessing(parentMeasure, context);\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (const key in this._cells) {\r\n            if (!Object.prototype.hasOwnProperty.call(this._cells, key)) {\r\n                continue;\r\n            }\r\n\r\n            const child = this._cells[key];\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    public _renderHighlightSpecific(context: ICanvasRenderingContext): void {\r\n        super._renderHighlightSpecific(context);\r\n\r\n        this._getGridDefinitions((lefts: number[], tops: number[], widths: number[], heights: number[]) => {\r\n            // Columns\r\n            for (let index = 0; index < lefts.length; index++) {\r\n                const left = this._currentMeasure.left + lefts[index] + widths[index];\r\n                context.beginPath();\r\n                context.moveTo(left, this._currentMeasure.top);\r\n                context.lineTo(left, this._currentMeasure.top + this._currentMeasure.height);\r\n                context.stroke();\r\n            }\r\n\r\n            // Rows\r\n            for (let index = 0; index < tops.length; index++) {\r\n                const top = this._currentMeasure.top + tops[index] + heights[index];\r\n                context.beginPath();\r\n                context.moveTo(this._currentMeasure.left, top);\r\n                context.lineTo(this._currentMeasure.left + this._currentMeasure.width, top);\r\n                context.stroke();\r\n            }\r\n        });\r\n\r\n        context.restore();\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (const control of this._childControls) {\r\n            control.dispose();\r\n        }\r\n        for (let index = 0; index < this._rowDefinitions.length; index++) {\r\n            this._rowDefinitions[index].onChangedObservable.remove(this._rowDefinitionObservers[index]);\r\n        }\r\n        for (let index = 0; index < this._columnDefinitions.length; index++) {\r\n            this._columnDefinitions[index].onChangedObservable.remove(this._columnDefinitionObservers[index]);\r\n        }\r\n        this._rowDefinitionObservers.length = 0;\r\n        this._rowDefinitions.length = 0;\r\n        this._columnDefinitionObservers.length = 0;\r\n        this._columnDefinitions.length = 0;\r\n        this._cells = {};\r\n        this._childControls.length = 0;\r\n    }\r\n\r\n    /**\r\n     * Serializes the current control\r\n     * @param serializationObject defined the JSON serialized object\r\n     */\r\n    public serialize(serializationObject: any) {\r\n        super.serialize(serializationObject);\r\n        serializationObject.columnCount = this.columnCount;\r\n        serializationObject.rowCount = this.rowCount;\r\n        serializationObject.columns = [];\r\n        serializationObject.rows = [];\r\n        serializationObject.tags = [];\r\n        for (let i = 0; i < this.columnCount; ++i) {\r\n            const cd = this.getColumnDefinition(i);\r\n            const childSerializationObject = { value: cd?.getValue(this.host), unit: cd?.unit };\r\n            serializationObject.columns.push(childSerializationObject);\r\n        }\r\n        for (let i = 0; i < this.rowCount; ++i) {\r\n            const rd = this.getRowDefinition(i);\r\n            const childSerializationObject = { value: rd?.getValue(this.host), unit: rd?.unit };\r\n            serializationObject.rows.push(childSerializationObject);\r\n        }\r\n        this.children.forEach((child) => {\r\n            serializationObject.tags.push(child._tag);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _parseFromContent(serializedObject: any, host: AdvancedDynamicTexture) {\r\n        super._parseFromContent(serializedObject, host);\r\n        const children: Control[] = [];\r\n        this.children.forEach((child) => {\r\n            children.push(child);\r\n        });\r\n        this.removeRowDefinition(0);\r\n        this.removeColumnDefinition(0);\r\n        for (let i = 0; i < serializedObject.columnCount; ++i) {\r\n            const columnValue = serializedObject.columns[i].value;\r\n            const unit = serializedObject.columns[i].unit;\r\n            this.addColumnDefinition(columnValue, unit === 1 ? true : false);\r\n        }\r\n        for (let i = 0; i < serializedObject.rowCount; ++i) {\r\n            const rowValue = serializedObject.rows[i].value;\r\n            const unit = serializedObject.rows[i].unit;\r\n            this.addRowDefinition(rowValue, unit === 1 ? true : false);\r\n        }\r\n\r\n        for (let i = 0; i < children.length; ++i) {\r\n            const cellInfo = serializedObject.tags[i];\r\n            let rowNumber = parseInt(cellInfo.substring(0, cellInfo.search(\":\")));\r\n            if (isNaN(rowNumber)) {\r\n                rowNumber = 0;\r\n            }\r\n            let columnNumber = parseInt(cellInfo.substring(cellInfo.search(\":\") + 1));\r\n            if (isNaN(columnNumber)) {\r\n                columnNumber = 0;\r\n            }\r\n            this.addControl(children[i], rowNumber, columnNumber);\r\n        }\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Grid\", Grid);\r\n","import { Observable } from \"core/Misc/observable\";\r\nimport type { Vector2 } from \"core/Maths/math.vector\";\r\n\r\nimport { Control } from \"./control\";\r\nimport type { Measure } from \"../measure\";\r\nimport { InputText } from \"./inputText\";\r\nimport { Rectangle } from \"./rectangle\";\r\nimport { Button } from \"./button\";\r\nimport { Grid } from \"./grid\";\r\nimport type { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport { TextBlock } from \"../controls/textBlock\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvas, ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport { EngineStore } from \"core/Engines/engineStore\";\r\n\r\n/** Class used to create color pickers */\r\nexport class ColorPicker extends Control {\r\n    private static _Epsilon = 0.000001;\r\n    private _colorWheelCanvas: ICanvas;\r\n\r\n    private _value: Color3 = Color3.Red();\r\n    private _tmpColor = new Color3();\r\n\r\n    private _pointerStartedOnSquare = false;\r\n    private _pointerStartedOnWheel = false;\r\n\r\n    private _squareLeft = 0;\r\n    private _squareTop = 0;\r\n    private _squareSize = 0;\r\n\r\n    private _h = 360;\r\n    private _s = 1;\r\n    private _v = 1;\r\n\r\n    private _lastPointerDownId = -1;\r\n\r\n    /**\r\n     * Observable raised when the value changes\r\n     */\r\n    public onValueChangedObservable = new Observable<Color3>();\r\n\r\n    /** Gets or sets the color of the color picker */\r\n    @serialize()\r\n    public get value(): Color3 {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: Color3) {\r\n        if (this._value.equals(value)) {\r\n            return;\r\n        }\r\n\r\n        this._value.copyFrom(value);\r\n\r\n        this._value.toHSVToRef(this._tmpColor);\r\n\r\n        this._h = this._tmpColor.r;\r\n        this._s = Math.max(this._tmpColor.g, 0.00001);\r\n        this._v = Math.max(this._tmpColor.b, 0.00001);\r\n\r\n        this._markAsDirty();\r\n\r\n        if (this._value.r <= ColorPicker._Epsilon) {\r\n            this._value.r = 0;\r\n        }\r\n\r\n        if (this._value.g <= ColorPicker._Epsilon) {\r\n            this._value.g = 0;\r\n        }\r\n\r\n        if (this._value.b <= ColorPicker._Epsilon) {\r\n            this._value.b = 0;\r\n        }\r\n\r\n        if (this._value.r >= 1.0 - ColorPicker._Epsilon) {\r\n            this._value.r = 1.0;\r\n        }\r\n\r\n        if (this._value.g >= 1.0 - ColorPicker._Epsilon) {\r\n            this._value.g = 1.0;\r\n        }\r\n\r\n        if (this._value.b >= 1.0 - ColorPicker._Epsilon) {\r\n            this._value.b = 1.0;\r\n        }\r\n\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control width\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            if (this._width.getValue(this._host) === 0) {\r\n                value = \"1px\";\r\n                this._width.fromString(value);\r\n            }\r\n            this._height.fromString(value);\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control height\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /** Gets or sets control height */\r\n    public set height(value: string | number) {\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            if (this._height.getValue(this._host) === 0) {\r\n                value = \"1px\";\r\n                this._height.fromString(value);\r\n            }\r\n            this._width.fromString(value);\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control size */\r\n    @serialize()\r\n    public get size(): string | number {\r\n        return this.width;\r\n    }\r\n\r\n    public set size(value: string | number) {\r\n        this.width = value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new ColorPicker\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.value = new Color3(0.88, 0.1, 0.1);\r\n        this.size = \"200px\";\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ColorPicker\";\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _preMeasure(parentMeasure: Measure): void {\r\n        if (parentMeasure.width < parentMeasure.height) {\r\n            this._currentMeasure.height = parentMeasure.width;\r\n        } else {\r\n            this._currentMeasure.width = parentMeasure.height;\r\n        }\r\n    }\r\n\r\n    private _updateSquareProps(): void {\r\n        const radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * 0.5;\r\n        const wheelThickness = radius * 0.2;\r\n        const innerDiameter = (radius - wheelThickness) * 2;\r\n        const squareSize = innerDiameter / Math.sqrt(2);\r\n        const offset = radius - squareSize * 0.5;\r\n\r\n        this._squareLeft = this._currentMeasure.left + offset;\r\n        this._squareTop = this._currentMeasure.top + offset;\r\n        this._squareSize = squareSize;\r\n    }\r\n\r\n    private _drawGradientSquare(hueValue: number, left: number, top: number, width: number, height: number, context: ICanvasRenderingContext) {\r\n        const lgh = context.createLinearGradient(left, top, width + left, top);\r\n        lgh.addColorStop(0, \"#fff\");\r\n        lgh.addColorStop(1, \"hsl(\" + hueValue + \", 100%, 50%)\");\r\n\r\n        context.fillStyle = lgh;\r\n        context.fillRect(left, top, width, height);\r\n\r\n        const lgv = context.createLinearGradient(left, top, left, height + top);\r\n        lgv.addColorStop(0, \"rgba(0,0,0,0)\");\r\n        lgv.addColorStop(1, \"#000\");\r\n\r\n        context.fillStyle = lgv;\r\n        context.fillRect(left, top, width, height);\r\n    }\r\n\r\n    private _drawCircle(centerX: number, centerY: number, radius: number, context: ICanvasRenderingContext) {\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius + 1, 0, 2 * Math.PI, false);\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = \"#333333\";\r\n        context.stroke();\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = \"#ffffff\";\r\n        context.stroke();\r\n    }\r\n\r\n    private _createColorWheelCanvas(radius: number, thickness: number): ICanvas {\r\n        // Shoudl abstract platform instead of using LastCreatedEngine\r\n        const engine = EngineStore.LastCreatedEngine;\r\n        if (!engine) {\r\n            throw new Error(\"Invalid engine. Unable to create a canvas.\");\r\n        }\r\n        const canvas = engine.createCanvas(radius * 2, radius * 2);\r\n        const context = canvas.getContext(\"2d\");\r\n        const image = context.getImageData(0, 0, radius * 2, radius * 2);\r\n        const data = image.data;\r\n\r\n        const color = this._tmpColor;\r\n        const maxDistSq = radius * radius;\r\n        const innerRadius = radius - thickness;\r\n        const minDistSq = innerRadius * innerRadius;\r\n\r\n        for (let x = -radius; x < radius; x++) {\r\n            for (let y = -radius; y < radius; y++) {\r\n                const distSq = x * x + y * y;\r\n\r\n                if (distSq > maxDistSq || distSq < minDistSq) {\r\n                    continue;\r\n                }\r\n\r\n                const dist = Math.sqrt(distSq);\r\n                const ang = Math.atan2(y, x);\r\n\r\n                Color3.HSVtoRGBToRef((ang * 180) / Math.PI + 180, dist / radius, 1, color);\r\n\r\n                const index = (x + radius + (y + radius) * 2 * radius) * 4;\r\n\r\n                data[index] = color.r * 255;\r\n                data[index + 1] = color.g * 255;\r\n                data[index + 2] = color.b * 255;\r\n                let alphaRatio = (dist - innerRadius) / (radius - innerRadius);\r\n\r\n                //apply less alpha to bigger color pickers\r\n                let alphaAmount = 0.2;\r\n                const maxAlpha = 0.2;\r\n                const minAlpha = 0.04;\r\n                const lowerRadius = 50;\r\n                const upperRadius = 150;\r\n\r\n                if (radius < lowerRadius) {\r\n                    alphaAmount = maxAlpha;\r\n                } else if (radius > upperRadius) {\r\n                    alphaAmount = minAlpha;\r\n                } else {\r\n                    alphaAmount = ((minAlpha - maxAlpha) * (radius - lowerRadius)) / (upperRadius - lowerRadius) + maxAlpha;\r\n                }\r\n\r\n                alphaRatio = (dist - innerRadius) / (radius - innerRadius);\r\n\r\n                if (alphaRatio < alphaAmount) {\r\n                    data[index + 3] = 255 * (alphaRatio / alphaAmount);\r\n                } else if (alphaRatio > 1 - alphaAmount) {\r\n                    data[index + 3] = 255 * (1.0 - (alphaRatio - (1 - alphaAmount)) / alphaAmount);\r\n                } else {\r\n                    data[index + 3] = 255;\r\n                }\r\n            }\r\n        }\r\n\r\n        context.putImageData(image, 0, 0);\r\n\r\n        return canvas;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        const radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * 0.5;\r\n        const wheelThickness = radius * 0.2;\r\n        const left = this._currentMeasure.left;\r\n        const top = this._currentMeasure.top;\r\n\r\n        if (!this._colorWheelCanvas || this._colorWheelCanvas.width != radius * 2) {\r\n            this._colorWheelCanvas = this._createColorWheelCanvas(radius, wheelThickness);\r\n        }\r\n\r\n        this._updateSquareProps();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n\r\n            context.fillRect(this._squareLeft, this._squareTop, this._squareSize, this._squareSize);\r\n        }\r\n\r\n        context.drawImage(this._colorWheelCanvas, left, top);\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        this._drawGradientSquare(this._h, this._squareLeft, this._squareTop, this._squareSize, this._squareSize, context);\r\n\r\n        let cx = this._squareLeft + this._squareSize * this._s;\r\n        let cy = this._squareTop + this._squareSize * (1 - this._v);\r\n\r\n        this._drawCircle(cx, cy, radius * 0.04, context);\r\n\r\n        const dist = radius - wheelThickness * 0.5;\r\n        cx = left + radius + Math.cos(((this._h - 180) * Math.PI) / 180) * dist;\r\n        cy = top + radius + Math.sin(((this._h - 180) * Math.PI) / 180) * dist;\r\n        this._drawCircle(cx, cy, wheelThickness * 0.35, context);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    private _updateValueFromPointer(x: number, y: number): void {\r\n        if (this._pointerStartedOnWheel) {\r\n            const radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * 0.5;\r\n            const centerX = radius + this._currentMeasure.left;\r\n            const centerY = radius + this._currentMeasure.top;\r\n            this._h = (Math.atan2(y - centerY, x - centerX) * 180) / Math.PI + 180;\r\n        } else if (this._pointerStartedOnSquare) {\r\n            this._updateSquareProps();\r\n            this._s = (x - this._squareLeft) / this._squareSize;\r\n            this._v = 1 - (y - this._squareTop) / this._squareSize;\r\n            this._s = Math.min(this._s, 1);\r\n            this._s = Math.max(this._s, ColorPicker._Epsilon);\r\n            this._v = Math.min(this._v, 1);\r\n            this._v = Math.max(this._v, ColorPicker._Epsilon);\r\n        }\r\n\r\n        Color3.HSVtoRGBToRef(this._h, this._s, this._v, this._tmpColor);\r\n\r\n        this.value = this._tmpColor;\r\n    }\r\n\r\n    private _isPointOnSquare(x: number, y: number): boolean {\r\n        this._updateSquareProps();\r\n\r\n        const left = this._squareLeft;\r\n        const top = this._squareTop;\r\n        const size = this._squareSize;\r\n\r\n        if (x >= left && x <= left + size && y >= top && y <= top + size) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _isPointOnWheel(x: number, y: number): boolean {\r\n        const radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * 0.5;\r\n        const centerX = radius + this._currentMeasure.left;\r\n        const centerY = radius + this._currentMeasure.top;\r\n        const wheelThickness = radius * 0.2;\r\n        const innerRadius = radius - wheelThickness;\r\n        const radiusSq = radius * radius;\r\n        const innerRadiusSq = innerRadius * innerRadius;\r\n\r\n        const dx = x - centerX;\r\n        const dy = y - centerY;\r\n\r\n        const distSq = dx * dx + dy * dy;\r\n\r\n        if (distSq <= radiusSq && distSq >= innerRadiusSq) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isReadOnly) {\r\n            return true;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._pointerStartedOnSquare = false;\r\n        this._pointerStartedOnWheel = false;\r\n\r\n        // Invert transform\r\n        this._invertTransformMatrix.transformCoordinates(coordinates.x, coordinates.y, this._transformedPosition);\r\n\r\n        const x = this._transformedPosition.x;\r\n        const y = this._transformedPosition.y;\r\n\r\n        if (this._isPointOnSquare(x, y)) {\r\n            this._pointerStartedOnSquare = true;\r\n        } else if (this._isPointOnWheel(x, y)) {\r\n            this._pointerStartedOnWheel = true;\r\n        }\r\n\r\n        this._updateValueFromPointer(x, y);\r\n        this._host._capturingControl[pointerId] = this;\r\n        this._lastPointerDownId = pointerId;\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2, pointerId: number, pi: PointerInfoBase): void {\r\n        // Only listen to pointer move events coming from the last pointer to click on the element (To support dual vr controller interaction)\r\n        if (pointerId != this._lastPointerDownId) {\r\n            return;\r\n        }\r\n\r\n        if (!this.isReadOnly) {\r\n            // Invert transform\r\n            this._invertTransformMatrix.transformCoordinates(coordinates.x, coordinates.y, this._transformedPosition);\r\n\r\n            const x = this._transformedPosition.x;\r\n            const y = this._transformedPosition.y;\r\n\r\n            if (this._pointerIsDown) {\r\n                this._updateValueFromPointer(x, y);\r\n            }\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates, pointerId, pi);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean, pi: PointerInfoBase): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick, pi);\r\n    }\r\n\r\n    public _onCanvasBlur() {\r\n        this._forcePointerUp();\r\n        super._onCanvasBlur();\r\n    }\r\n\r\n    /**\r\n     * This function expands the color picker by creating a color picker dialog with manual\r\n     * color value input and the ability to save colors into an array to be used later in\r\n     * subsequent launches of the dialogue.\r\n     * @param advancedTexture defines the AdvancedDynamicTexture the dialog is assigned to\r\n     * @param options defines size for dialog and options for saved colors. Also accepts last color picked as hex string and saved colors array as hex strings.\r\n     * @param options.pickerWidth\r\n     * @param options.pickerHeight\r\n     * @param options.headerHeight\r\n     * @param options.lastColor\r\n     * @param options.swatchLimit\r\n     * @param options.numSwatchesPerLine\r\n     * @param options.savedColors\r\n     * @returns picked color as a hex string and the saved colors array as hex strings.\r\n     */\r\n    public static ShowPickerDialogAsync(\r\n        advancedTexture: AdvancedDynamicTexture,\r\n        options: {\r\n            pickerWidth?: string;\r\n            pickerHeight?: string;\r\n            headerHeight?: string;\r\n            lastColor?: string;\r\n            swatchLimit?: number;\r\n            numSwatchesPerLine?: number;\r\n            savedColors?: Array<string>;\r\n        }\r\n    ): Promise<{\r\n        savedColors?: string[];\r\n        pickedColor: string;\r\n    }> {\r\n        return new Promise((resolve) => {\r\n            // Default options\r\n            options.pickerWidth = options.pickerWidth || \"640px\";\r\n            options.pickerHeight = options.pickerHeight || \"400px\";\r\n            options.headerHeight = options.headerHeight || \"35px\";\r\n            options.lastColor = options.lastColor || \"#000000\";\r\n            options.swatchLimit = options.swatchLimit || 20;\r\n            options.numSwatchesPerLine = options.numSwatchesPerLine || 10;\r\n\r\n            // Window size settings\r\n            const drawerMaxRows: number = options.swatchLimit / options.numSwatchesPerLine;\r\n            const rawSwatchSize: number = parseFloat(<string>options.pickerWidth) / options.numSwatchesPerLine;\r\n            const gutterSize: number = Math.floor(rawSwatchSize * 0.25);\r\n            const colGutters: number = gutterSize * (options.numSwatchesPerLine + 1);\r\n            const swatchSize: number = Math.floor((parseFloat(<string>options.pickerWidth) - colGutters) / options.numSwatchesPerLine);\r\n            const drawerMaxSize: number = swatchSize * drawerMaxRows + gutterSize * (drawerMaxRows + 1);\r\n            const containerSize: string = (parseInt(options.pickerHeight) + drawerMaxSize + Math.floor(swatchSize * 0.25)).toString() + \"px\";\r\n\r\n            // Button Colors\r\n            const buttonColor: string = \"#c0c0c0\";\r\n            const buttonBackgroundColor: string = \"#535353\";\r\n            const buttonBackgroundHoverColor: string = \"#414141\";\r\n            const buttonBackgroundClickColor: string = \"515151\";\r\n            const buttonDisabledColor: string = \"#555555\";\r\n            const buttonDisabledBackgroundColor: string = \"#454545\";\r\n            const currentSwatchesOutlineColor: string = \"#404040\";\r\n            const luminanceLimitColor: Color3 = Color3.FromHexString(\"#dddddd\");\r\n            const luminanceLimit: number = luminanceLimitColor.r + luminanceLimitColor.g + luminanceLimitColor.b;\r\n            const iconColorDark: string = \"#aaaaaa\";\r\n            const iconColorLight: string = \"#ffffff\";\r\n\r\n            // Button settings\r\n            let buttonFontSize: number;\r\n            let butEdit: Button;\r\n\r\n            // Input Text Colors\r\n            const inputFieldLabels: string[] = [\"R\", \"G\", \"B\"];\r\n            const inputTextBackgroundColor: string = \"#454545\";\r\n            const inputTextColor: string = \"#f0f0f0\";\r\n\r\n            // This int is used for naming swatches and serves as the index for calling them from the list\r\n            let swatchNumber: number;\r\n\r\n            // Menu Panel options. We need to know if the swatchDrawer exists so we can create it if needed.\r\n            let swatchDrawer: Grid;\r\n            let editSwatchMode: boolean = false;\r\n\r\n            // Color InputText fields that will be updated upon value change\r\n            let butSave: Button;\r\n            let lastVal: string;\r\n            let activeField: string;\r\n\r\n            // Dialog menu container which will contain both the main dialogue window and the swatch drawer which opens once a color is saved.\r\n            const dialogContainer: Grid = new Grid();\r\n            dialogContainer.name = \"Dialog Container\";\r\n            dialogContainer.width = options.pickerWidth;\r\n            if (options.savedColors) {\r\n                dialogContainer.height = containerSize;\r\n                const topRow: number = parseInt(options.pickerHeight) / parseInt(containerSize);\r\n                dialogContainer.addRowDefinition(topRow, false);\r\n                dialogContainer.addRowDefinition(1.0 - topRow, false);\r\n            } else {\r\n                dialogContainer.height = options.pickerHeight;\r\n                dialogContainer.addRowDefinition(1.0, false);\r\n            }\r\n            advancedTexture.addControl(dialogContainer);\r\n\r\n            // Swatch drawer which contains all saved color buttons\r\n            if (options.savedColors) {\r\n                swatchDrawer = new Grid();\r\n                swatchDrawer.name = \"Swatch Drawer\";\r\n                swatchDrawer.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n                swatchDrawer.background = buttonBackgroundColor;\r\n                swatchDrawer.width = options.pickerWidth!;\r\n                const initialRows: number = options.savedColors.length / options.numSwatchesPerLine;\r\n                let gutterCount: number;\r\n                if (initialRows == 0) {\r\n                    gutterCount = 0;\r\n                } else {\r\n                    gutterCount = initialRows + 1;\r\n                }\r\n                swatchDrawer.height = (swatchSize * initialRows + gutterCount * gutterSize).toString() + \"px\";\r\n                swatchDrawer.top = Math.floor(swatchSize * 0.25).toString() + \"px\";\r\n                for (let i = 0; i < Math.ceil(options.savedColors.length / options.numSwatchesPerLine) * 2 + 1; i++) {\r\n                    if (i % 2 != 0) {\r\n                        swatchDrawer.addRowDefinition(swatchSize, true);\r\n                    } else {\r\n                        swatchDrawer.addRowDefinition(gutterSize, true);\r\n                    }\r\n                }\r\n                for (let i = 0; i < options.numSwatchesPerLine! * 2 + 1; i++) {\r\n                    if (i % 2 != 0) {\r\n                        swatchDrawer.addColumnDefinition(swatchSize, true);\r\n                    } else {\r\n                        swatchDrawer.addColumnDefinition(gutterSize, true);\r\n                    }\r\n                }\r\n                dialogContainer.addControl(swatchDrawer, 1, 0);\r\n            }\r\n\r\n            // Picker container\r\n            const pickerPanel: Grid = new Grid();\r\n            pickerPanel.name = \"Picker Panel\";\r\n            pickerPanel.height = options.pickerHeight;\r\n            const panelHead: number = parseInt(options.headerHeight) / parseInt(options.pickerHeight);\r\n            const pickerPanelRows: number[] = [panelHead, 1.0 - panelHead];\r\n            pickerPanel.addRowDefinition(pickerPanelRows[0], false);\r\n            pickerPanel.addRowDefinition(pickerPanelRows[1], false);\r\n            dialogContainer.addControl(pickerPanel, 0, 0);\r\n\r\n            // Picker container header\r\n            const header: Rectangle = new Rectangle();\r\n            header.name = \"Dialogue Header Bar\";\r\n            header.background = \"#cccccc\";\r\n            header.thickness = 0;\r\n            pickerPanel.addControl(header, 0, 0);\r\n\r\n            // Header close button\r\n            const closeButton: Button = Button.CreateSimpleButton(\"closeButton\", \"a\");\r\n            closeButton.fontFamily = \"coreglyphs\";\r\n            const headerColor3: Color3 = Color3.FromHexString(header.background);\r\n            const closeIconColor = new Color3(1.0 - headerColor3.r, 1.0 - headerColor3.g, 1.0 - headerColor3.b);\r\n            closeButton.color = closeIconColor.toHexString();\r\n            closeButton.fontSize = Math.floor(parseInt(options.headerHeight!) * 0.6);\r\n            closeButton.textBlock!.textVerticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n            closeButton.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_RIGHT;\r\n            closeButton.height = closeButton.width = options.headerHeight;\r\n            closeButton.background = header.background;\r\n            closeButton.thickness = 0;\r\n            closeButton.pointerDownAnimation = () => {};\r\n            closeButton.pointerUpAnimation = () => {\r\n                closeButton.background = header.background;\r\n            };\r\n            closeButton.pointerEnterAnimation = () => {\r\n                closeButton.color = header.background;\r\n                closeButton.background = \"red\";\r\n            };\r\n            closeButton.pointerOutAnimation = () => {\r\n                closeButton.color = closeIconColor.toHexString();\r\n                closeButton.background = header.background;\r\n            };\r\n            closeButton.onPointerClickObservable.add(() => {\r\n                closePicker(currentSwatch.background);\r\n            });\r\n            pickerPanel.addControl(closeButton, 0, 0);\r\n\r\n            // Dialog container body\r\n            const dialogBody: Grid = new Grid();\r\n            dialogBody.name = \"Dialogue Body\";\r\n            dialogBody.background = buttonBackgroundColor;\r\n            const dialogBodyCols: number[] = [0.4375, 0.5625];\r\n            dialogBody.addRowDefinition(1.0, false);\r\n            dialogBody.addColumnDefinition(dialogBodyCols[0], false);\r\n            dialogBody.addColumnDefinition(dialogBodyCols[1], false);\r\n            pickerPanel.addControl(dialogBody, 1, 0);\r\n\r\n            // Picker grid\r\n            const pickerGrid: Grid = new Grid();\r\n            pickerGrid.name = \"Picker Grid\";\r\n            pickerGrid.addRowDefinition(0.85, false);\r\n            pickerGrid.addRowDefinition(0.15, false);\r\n            dialogBody.addControl(pickerGrid, 0, 0);\r\n\r\n            //  Picker control\r\n            const picker = new ColorPicker();\r\n            picker.name = \"GUI Color Picker\";\r\n            if (options.pickerHeight < options.pickerWidth) {\r\n                picker.width = 0.89;\r\n            } else {\r\n                picker.height = 0.89;\r\n            }\r\n            picker.value = Color3.FromHexString(options.lastColor);\r\n            picker.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n            picker.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n            picker.onPointerDownObservable.add(() => {\r\n                activeField = picker.name!;\r\n                lastVal = \"\";\r\n                editSwatches(false);\r\n            });\r\n            picker.onValueChangedObservable.add(function (value) {\r\n                // value is a color3\r\n                if (activeField == picker.name) {\r\n                    updateValues(value, picker.name);\r\n                }\r\n            });\r\n            pickerGrid.addControl(picker, 0, 0);\r\n\r\n            // Picker body right quarant\r\n            const pickerBodyRight: Grid = new Grid();\r\n            pickerBodyRight.name = \"Dialogue Right Half\";\r\n            pickerBodyRight.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            const pickerBodyRightRows: number[] = [0.514, 0.486];\r\n            pickerBodyRight.addRowDefinition(pickerBodyRightRows[0], false);\r\n            pickerBodyRight.addRowDefinition(pickerBodyRightRows[1], false);\r\n            dialogBody.addControl(pickerBodyRight, 1, 1);\r\n\r\n            // Picker container swatches and buttons\r\n            const pickerSwatchesButtons: Grid = new Grid();\r\n            pickerSwatchesButtons.name = \"Swatches and Buttons\";\r\n            const pickerButtonsCol: number[] = [0.417, 0.583];\r\n            pickerSwatchesButtons.addRowDefinition(1.0, false);\r\n            pickerSwatchesButtons.addColumnDefinition(pickerButtonsCol[0], false);\r\n            pickerSwatchesButtons.addColumnDefinition(pickerButtonsCol[1], false);\r\n            pickerBodyRight.addControl(pickerSwatchesButtons, 0, 0);\r\n\r\n            // Picker Swatches quadrant\r\n            const pickerSwatches: Grid = new Grid();\r\n            pickerSwatches.name = \"New and Current Swatches\";\r\n            const pickeSwatchesRows: number[] = [0.04, 0.16, 0.64, 0.16];\r\n            pickerSwatches.addRowDefinition(pickeSwatchesRows[0], false);\r\n            pickerSwatches.addRowDefinition(pickeSwatchesRows[1], false);\r\n            pickerSwatches.addRowDefinition(pickeSwatchesRows[2], false);\r\n            pickerSwatches.addRowDefinition(pickeSwatchesRows[3], false);\r\n            pickerSwatchesButtons.addControl(pickerSwatches, 0, 0);\r\n\r\n            // Active swatches\r\n            const activeSwatches: Grid = new Grid();\r\n            activeSwatches.name = \"Active Swatches\";\r\n            activeSwatches.width = 0.67;\r\n            activeSwatches.addRowDefinition(0.5, false);\r\n            activeSwatches.addRowDefinition(0.5, false);\r\n            pickerSwatches.addControl(activeSwatches, 2, 0);\r\n\r\n            const labelWidth: number = Math.floor(parseInt(options.pickerWidth) * dialogBodyCols[1] * pickerButtonsCol[0] * 0.11);\r\n            const labelHeight: number = Math.floor(parseInt(options.pickerHeight) * pickerPanelRows[1] * pickerBodyRightRows[0] * pickeSwatchesRows[1] * 0.5);\r\n\r\n            let labelTextSize: number;\r\n            if (options.pickerWidth > options.pickerHeight) {\r\n                labelTextSize = labelHeight;\r\n            } else {\r\n                labelTextSize = labelWidth;\r\n            }\r\n            // New color swatch and previous color button\r\n            const newText: TextBlock = new TextBlock();\r\n            newText.text = \"new\";\r\n            newText.name = \"New Color Label\";\r\n            newText.color = buttonColor;\r\n            newText.fontSize = labelTextSize;\r\n            pickerSwatches.addControl(newText, 1, 0);\r\n\r\n            const newSwatch = new Rectangle();\r\n            newSwatch.name = \"New Color Swatch\";\r\n            newSwatch.background = options.lastColor;\r\n            newSwatch.thickness = 0;\r\n            activeSwatches.addControl(newSwatch, 0, 0);\r\n\r\n            const currentSwatch: Button = Button.CreateSimpleButton(\"currentSwatch\", \"\");\r\n            currentSwatch.background = options.lastColor;\r\n            currentSwatch.thickness = 0;\r\n            currentSwatch.onPointerClickObservable.add(() => {\r\n                const revertColor = Color3.FromHexString(currentSwatch.background);\r\n                updateValues(revertColor, currentSwatch.name!);\r\n                editSwatches(false);\r\n            });\r\n            currentSwatch.pointerDownAnimation = () => {};\r\n            currentSwatch.pointerUpAnimation = () => {};\r\n            currentSwatch.pointerEnterAnimation = () => {};\r\n            currentSwatch.pointerOutAnimation = () => {};\r\n            activeSwatches.addControl(currentSwatch, 1, 0);\r\n\r\n            const swatchOutline: Rectangle = new Rectangle();\r\n            swatchOutline.name = \"Swatch Outline\";\r\n            swatchOutline.width = 0.67;\r\n            swatchOutline.thickness = 2;\r\n            swatchOutline.color = currentSwatchesOutlineColor;\r\n            swatchOutline.isHitTestVisible = false;\r\n            pickerSwatches.addControl(swatchOutline, 2, 0);\r\n\r\n            const currentText: TextBlock = new TextBlock();\r\n            currentText.name = \"Current Color Label\";\r\n            currentText.text = \"current\";\r\n            currentText.color = buttonColor;\r\n            currentText.fontSize = labelTextSize;\r\n            pickerSwatches.addControl(currentText, 3, 0);\r\n\r\n            // Buttons grid\r\n            const buttonGrid: Grid = new Grid();\r\n            buttonGrid.name = \"Button Grid\";\r\n            buttonGrid.height = 0.8;\r\n            const buttonGridRows: number = 1 / 3;\r\n            buttonGrid.addRowDefinition(buttonGridRows, false);\r\n            buttonGrid.addRowDefinition(buttonGridRows, false);\r\n            buttonGrid.addRowDefinition(buttonGridRows, false);\r\n            pickerSwatchesButtons.addControl(buttonGrid, 0, 1);\r\n\r\n            // Determine pixel width and height for all buttons from overall panel dimensions\r\n            const buttonWidth = Math.floor(parseInt(options.pickerWidth) * dialogBodyCols[1] * pickerButtonsCol[1] * 0.67).toString() + \"px\";\r\n            const buttonHeight =\r\n                Math.floor(\r\n                    parseInt(options.pickerHeight) * pickerPanelRows[1] * pickerBodyRightRows[0] * (parseFloat(buttonGrid.height.toString()) / 100) * buttonGridRows * 0.7\r\n                ).toString() + \"px\";\r\n\r\n            // Determine button type size\r\n            if (parseFloat(buttonWidth) > parseFloat(buttonHeight)) {\r\n                buttonFontSize = Math.floor(parseFloat(buttonHeight) * 0.45);\r\n            } else {\r\n                buttonFontSize = Math.floor(parseFloat(buttonWidth) * 0.11);\r\n            }\r\n\r\n            // Panel Buttons\r\n            const butOK: Button = Button.CreateSimpleButton(\"butOK\", \"OK\");\r\n            butOK.width = buttonWidth;\r\n            butOK.height = buttonHeight;\r\n            butOK.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n            butOK.thickness = 2;\r\n            butOK.color = buttonColor;\r\n            butOK.fontSize = buttonFontSize;\r\n            butOK.background = buttonBackgroundColor;\r\n            butOK.onPointerEnterObservable.add(() => {\r\n                butOK.background = buttonBackgroundHoverColor;\r\n            });\r\n            butOK.onPointerOutObservable.add(() => {\r\n                butOK.background = buttonBackgroundColor;\r\n            });\r\n            butOK.pointerDownAnimation = () => {\r\n                butOK.background = buttonBackgroundClickColor;\r\n            };\r\n            butOK.pointerUpAnimation = () => {\r\n                butOK.background = buttonBackgroundHoverColor;\r\n            };\r\n            butOK.onPointerClickObservable.add(() => {\r\n                editSwatches(false);\r\n                closePicker(newSwatch.background);\r\n            });\r\n            buttonGrid.addControl(butOK, 0, 0);\r\n\r\n            const butCancel: Button = Button.CreateSimpleButton(\"butCancel\", \"Cancel\");\r\n            butCancel.width = buttonWidth;\r\n            butCancel.height = buttonHeight;\r\n            butCancel.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n            butCancel.thickness = 2;\r\n            butCancel.color = buttonColor;\r\n            butCancel.fontSize = buttonFontSize;\r\n            butCancel.background = buttonBackgroundColor;\r\n            butCancel.onPointerEnterObservable.add(() => {\r\n                butCancel.background = buttonBackgroundHoverColor;\r\n            });\r\n            butCancel.onPointerOutObservable.add(() => {\r\n                butCancel.background = buttonBackgroundColor;\r\n            });\r\n            butCancel.pointerDownAnimation = () => {\r\n                butCancel.background = buttonBackgroundClickColor;\r\n            };\r\n            butCancel.pointerUpAnimation = () => {\r\n                butCancel.background = buttonBackgroundHoverColor;\r\n            };\r\n            butCancel.onPointerClickObservable.add(() => {\r\n                editSwatches(false);\r\n                closePicker(currentSwatch.background);\r\n            });\r\n            buttonGrid.addControl(butCancel, 1, 0);\r\n\r\n            if (options.savedColors) {\r\n                butSave = Button.CreateSimpleButton(\"butSave\", \"Save\");\r\n                butSave.width = buttonWidth;\r\n                butSave.height = buttonHeight;\r\n                butSave.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n                butSave.thickness = 2;\r\n                butSave.fontSize = buttonFontSize;\r\n                if (options.savedColors.length < options.swatchLimit!) {\r\n                    butSave.color = buttonColor;\r\n                    butSave.background = buttonBackgroundColor;\r\n                } else {\r\n                    disableButton(butSave, true);\r\n                }\r\n                butSave.onPointerEnterObservable.add(() => {\r\n                    if (options.savedColors) {\r\n                        if (options.savedColors.length < options.swatchLimit!) {\r\n                            butSave.background = buttonBackgroundHoverColor;\r\n                        }\r\n                    }\r\n                });\r\n                butSave.onPointerOutObservable.add(() => {\r\n                    if (options.savedColors) {\r\n                        if (options.savedColors.length < options.swatchLimit!) {\r\n                            butSave.background = buttonBackgroundColor;\r\n                        }\r\n                    }\r\n                });\r\n                butSave.pointerDownAnimation = () => {\r\n                    if (options.savedColors) {\r\n                        if (options.savedColors.length < options.swatchLimit!) {\r\n                            butSave.background = buttonBackgroundClickColor;\r\n                        }\r\n                    }\r\n                };\r\n                butSave.pointerUpAnimation = () => {\r\n                    if (options.savedColors) {\r\n                        if (options.savedColors.length < options.swatchLimit!) {\r\n                            butSave.background = buttonBackgroundHoverColor;\r\n                        }\r\n                    }\r\n                };\r\n                butSave.onPointerClickObservable.add(() => {\r\n                    if (options.savedColors) {\r\n                        if (options.savedColors.length == 0) {\r\n                            setEditButtonVisibility(true);\r\n                        }\r\n                        if (options.savedColors.length < options.swatchLimit!) {\r\n                            updateSwatches(newSwatch.background, butSave);\r\n                        }\r\n                        editSwatches(false);\r\n                    }\r\n                });\r\n                if (options.savedColors.length > 0) {\r\n                    setEditButtonVisibility(true);\r\n                }\r\n                buttonGrid.addControl(butSave, 2, 0);\r\n            }\r\n\r\n            // Picker color values input\r\n            const pickerColorValues: Grid = new Grid();\r\n            pickerColorValues.name = \"Dialog Lower Right\";\r\n            pickerColorValues.addRowDefinition(0.02, false);\r\n            pickerColorValues.addRowDefinition(0.63, false);\r\n            pickerColorValues.addRowDefinition(0.21, false);\r\n            pickerColorValues.addRowDefinition(0.14, false);\r\n            pickerBodyRight.addControl(pickerColorValues, 1, 0);\r\n\r\n            // RGB values text boxes\r\n            const currentColor = Color3.FromHexString(options.lastColor);\r\n            const rgbValuesQuadrant: Grid = new Grid();\r\n            rgbValuesQuadrant.name = \"RGB Values\";\r\n            rgbValuesQuadrant.width = 0.82;\r\n            rgbValuesQuadrant.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n            rgbValuesQuadrant.addRowDefinition(1 / 3, false);\r\n            rgbValuesQuadrant.addRowDefinition(1 / 3, false);\r\n            rgbValuesQuadrant.addRowDefinition(1 / 3, false);\r\n            rgbValuesQuadrant.addColumnDefinition(0.1, false);\r\n            rgbValuesQuadrant.addColumnDefinition(0.2, false);\r\n            rgbValuesQuadrant.addColumnDefinition(0.7, false);\r\n            pickerColorValues.addControl(rgbValuesQuadrant, 1, 0);\r\n\r\n            for (let i = 0; i < inputFieldLabels.length; i++) {\r\n                const labelText: TextBlock = new TextBlock();\r\n                labelText.text = inputFieldLabels[i];\r\n                labelText.color = buttonColor;\r\n                labelText.fontSize = buttonFontSize;\r\n                rgbValuesQuadrant.addControl(labelText, i, 0);\r\n            }\r\n\r\n            // Input fields for RGB values\r\n            const rValInt = new InputText();\r\n            rValInt.width = 0.83;\r\n            rValInt.height = 0.72;\r\n            rValInt.name = \"rIntField\";\r\n            rValInt.fontSize = buttonFontSize;\r\n            rValInt.text = (currentColor.r * 255).toString();\r\n            rValInt.color = inputTextColor;\r\n            rValInt.background = inputTextBackgroundColor;\r\n            rValInt.onFocusObservable.add(() => {\r\n                activeField = rValInt.name!;\r\n                lastVal = rValInt.text;\r\n                editSwatches(false);\r\n            });\r\n            rValInt.onBlurObservable.add(() => {\r\n                if (rValInt.text == \"\") {\r\n                    rValInt.text = \"0\";\r\n                }\r\n                updateInt(rValInt, \"r\");\r\n                if (activeField == rValInt.name) {\r\n                    activeField = \"\";\r\n                }\r\n            });\r\n            rValInt.onTextChangedObservable.add(() => {\r\n                if (activeField == rValInt.name) {\r\n                    updateInt(rValInt, \"r\");\r\n                }\r\n            });\r\n            rgbValuesQuadrant.addControl(rValInt, 0, 1);\r\n\r\n            const gValInt = new InputText();\r\n            gValInt.width = 0.83;\r\n            gValInt.height = 0.72;\r\n            gValInt.name = \"gIntField\";\r\n            gValInt.fontSize = buttonFontSize;\r\n            gValInt.text = (currentColor.g * 255).toString();\r\n            gValInt.color = inputTextColor;\r\n            gValInt.background = inputTextBackgroundColor;\r\n            gValInt.onFocusObservable.add(() => {\r\n                activeField = gValInt.name!;\r\n                lastVal = gValInt.text;\r\n                editSwatches(false);\r\n            });\r\n            gValInt.onBlurObservable.add(() => {\r\n                if (gValInt.text == \"\") {\r\n                    gValInt.text = \"0\";\r\n                }\r\n                updateInt(gValInt, \"g\");\r\n                if (activeField == gValInt.name) {\r\n                    activeField = \"\";\r\n                }\r\n            });\r\n            gValInt.onTextChangedObservable.add(() => {\r\n                if (activeField == gValInt.name) {\r\n                    updateInt(gValInt, \"g\");\r\n                }\r\n            });\r\n            rgbValuesQuadrant.addControl(gValInt, 1, 1);\r\n\r\n            const bValInt = new InputText();\r\n            bValInt.width = 0.83;\r\n            bValInt.height = 0.72;\r\n            bValInt.name = \"bIntField\";\r\n            bValInt.fontSize = buttonFontSize;\r\n            bValInt.text = (currentColor.b * 255).toString();\r\n            bValInt.color = inputTextColor;\r\n            bValInt.background = inputTextBackgroundColor;\r\n            bValInt.onFocusObservable.add(() => {\r\n                activeField = bValInt.name!;\r\n                lastVal = bValInt.text;\r\n                editSwatches(false);\r\n            });\r\n            bValInt.onBlurObservable.add(() => {\r\n                if (bValInt.text == \"\") {\r\n                    bValInt.text = \"0\";\r\n                }\r\n                updateInt(bValInt, \"b\");\r\n                if (activeField == bValInt.name) {\r\n                    activeField = \"\";\r\n                }\r\n            });\r\n            bValInt.onTextChangedObservable.add(() => {\r\n                if (activeField == bValInt.name) {\r\n                    updateInt(bValInt, \"b\");\r\n                }\r\n            });\r\n            rgbValuesQuadrant.addControl(bValInt, 2, 1);\r\n\r\n            const rValDec = new InputText();\r\n            rValDec.width = 0.95;\r\n            rValDec.height = 0.72;\r\n            rValDec.name = \"rDecField\";\r\n            rValDec.fontSize = buttonFontSize;\r\n            rValDec.text = currentColor.r.toString();\r\n            rValDec.color = inputTextColor;\r\n            rValDec.background = inputTextBackgroundColor;\r\n            rValDec.onFocusObservable.add(() => {\r\n                activeField = rValDec.name!;\r\n                lastVal = rValDec.text;\r\n                editSwatches(false);\r\n            });\r\n            rValDec.onBlurObservable.add(() => {\r\n                if (parseFloat(rValDec.text) == 0 || rValDec.text == \"\") {\r\n                    rValDec.text = \"0\";\r\n                    updateFloat(rValDec, \"r\");\r\n                }\r\n                if (activeField == rValDec.name) {\r\n                    activeField = \"\";\r\n                }\r\n            });\r\n            rValDec.onTextChangedObservable.add(() => {\r\n                if (activeField == rValDec.name) {\r\n                    updateFloat(rValDec, \"r\");\r\n                }\r\n            });\r\n            rgbValuesQuadrant.addControl(rValDec, 0, 2);\r\n\r\n            const gValDec = new InputText();\r\n            gValDec.width = 0.95;\r\n            gValDec.height = 0.72;\r\n            gValDec.name = \"gDecField\";\r\n            gValDec.fontSize = buttonFontSize;\r\n            gValDec.text = currentColor.g.toString();\r\n            gValDec.color = inputTextColor;\r\n            gValDec.background = inputTextBackgroundColor;\r\n            gValDec.onFocusObservable.add(() => {\r\n                activeField = gValDec.name!;\r\n                lastVal = gValDec.text;\r\n                editSwatches(false);\r\n            });\r\n            gValDec.onBlurObservable.add(() => {\r\n                if (parseFloat(gValDec.text) == 0 || gValDec.text == \"\") {\r\n                    gValDec.text = \"0\";\r\n                    updateFloat(gValDec, \"g\");\r\n                }\r\n                if (activeField == gValDec.name) {\r\n                    activeField = \"\";\r\n                }\r\n            });\r\n            gValDec.onTextChangedObservable.add(() => {\r\n                if (activeField == gValDec.name) {\r\n                    updateFloat(gValDec, \"g\");\r\n                }\r\n            });\r\n            rgbValuesQuadrant.addControl(gValDec, 1, 2);\r\n\r\n            const bValDec = new InputText();\r\n            bValDec.width = 0.95;\r\n            bValDec.height = 0.72;\r\n            bValDec.name = \"bDecField\";\r\n            bValDec.fontSize = buttonFontSize;\r\n            bValDec.text = currentColor.b.toString();\r\n            bValDec.color = inputTextColor;\r\n            bValDec.background = inputTextBackgroundColor;\r\n            bValDec.onFocusObservable.add(() => {\r\n                activeField = bValDec.name!;\r\n                lastVal = bValDec.text;\r\n                editSwatches(false);\r\n            });\r\n            bValDec.onBlurObservable.add(() => {\r\n                if (parseFloat(bValDec.text) == 0 || bValDec.text == \"\") {\r\n                    bValDec.text = \"0\";\r\n                    updateFloat(bValDec, \"b\");\r\n                }\r\n                if (activeField == bValDec.name) {\r\n                    activeField = \"\";\r\n                }\r\n            });\r\n            bValDec.onTextChangedObservable.add(() => {\r\n                if (activeField == bValDec.name) {\r\n                    updateFloat(bValDec, \"b\");\r\n                }\r\n            });\r\n            rgbValuesQuadrant.addControl(bValDec, 2, 2);\r\n\r\n            // Hex value input\r\n            const hexValueQuadrant: Grid = new Grid();\r\n            hexValueQuadrant.name = \"Hex Value\";\r\n            hexValueQuadrant.width = 0.82;\r\n            hexValueQuadrant.addRowDefinition(1.0, false);\r\n            hexValueQuadrant.addColumnDefinition(0.1, false);\r\n            hexValueQuadrant.addColumnDefinition(0.9, false);\r\n            pickerColorValues.addControl(hexValueQuadrant, 2, 0);\r\n\r\n            const labelText: TextBlock = new TextBlock();\r\n            labelText.text = \"#\";\r\n            labelText.color = buttonColor;\r\n            labelText.fontSize = buttonFontSize;\r\n            hexValueQuadrant.addControl(labelText, 0, 0);\r\n\r\n            const hexVal = new InputText();\r\n            hexVal.width = 0.96;\r\n            hexVal.height = 0.72;\r\n            hexVal.name = \"hexField\";\r\n            hexVal.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n            hexVal.fontSize = buttonFontSize;\r\n            const minusPound = options.lastColor.split(\"#\");\r\n            hexVal.text = minusPound[1];\r\n            hexVal.color = inputTextColor;\r\n            hexVal.background = inputTextBackgroundColor;\r\n            hexVal.onFocusObservable.add(() => {\r\n                activeField = hexVal.name!;\r\n                lastVal = hexVal.text;\r\n                editSwatches(false);\r\n            });\r\n            hexVal.onBlurObservable.add(() => {\r\n                if (hexVal.text.length == 3) {\r\n                    const val = hexVal.text.split(\"\");\r\n                    hexVal.text = val[0] + val[0] + val[1] + val[1] + val[2] + val[2];\r\n                }\r\n                if (hexVal.text == \"\") {\r\n                    hexVal.text = \"000000\";\r\n                    updateValues(Color3.FromHexString(hexVal.text), \"b\");\r\n                }\r\n                if (activeField == hexVal.name) {\r\n                    activeField = \"\";\r\n                }\r\n            });\r\n            hexVal.onTextChangedObservable.add(() => {\r\n                let newHexValue: string = hexVal.text;\r\n                const checkHex: boolean = /[^0-9A-F]/i.test(newHexValue);\r\n                if ((hexVal.text.length > 6 || checkHex) && activeField == hexVal.name) {\r\n                    hexVal.text = lastVal;\r\n                } else {\r\n                    if (hexVal.text.length < 6) {\r\n                        const leadingZero: number = 6 - hexVal.text.length;\r\n                        for (let i = 0; i < leadingZero; i++) {\r\n                            newHexValue = \"0\" + newHexValue;\r\n                        }\r\n                    }\r\n                    if (hexVal.text.length == 3) {\r\n                        const val: string[] = hexVal.text.split(\"\");\r\n                        newHexValue = val[0] + val[0] + val[1] + val[1] + val[2] + val[2];\r\n                    }\r\n                    newHexValue = \"#\" + newHexValue;\r\n                    if (activeField == hexVal.name) {\r\n                        lastVal = hexVal.text;\r\n                        updateValues(Color3.FromHexString(newHexValue), hexVal.name);\r\n                    }\r\n                }\r\n            });\r\n            hexValueQuadrant.addControl(hexVal, 0, 1);\r\n\r\n            if (options.savedColors && options.savedColors.length > 0) {\r\n                updateSwatches(\"\", butSave!);\r\n            }\r\n\r\n            /**\r\n             * Will update all values for InputText and ColorPicker controls based on the BABYLON.Color3 passed to this function.\r\n             * Each InputText control and the ColorPicker control will be tested to see if they are the activeField and if they\r\n             * are will receive no update. This is to prevent the input from the user being overwritten.\r\n             * @param value\r\n             * @param inputField\r\n             */\r\n            function updateValues(value: Color3, inputField: string) {\r\n                activeField = inputField;\r\n                const pickedColor: string = value.toHexString();\r\n                newSwatch.background = pickedColor;\r\n                if (rValInt.name != activeField) {\r\n                    rValInt.text = Math.floor(value.r * 255).toString();\r\n                }\r\n                if (gValInt.name != activeField) {\r\n                    gValInt.text = Math.floor(value.g * 255).toString();\r\n                }\r\n                if (bValInt.name != activeField) {\r\n                    bValInt.text = Math.floor(value.b * 255).toString();\r\n                }\r\n                if (rValDec.name != activeField) {\r\n                    rValDec.text = value.r.toString();\r\n                }\r\n                if (gValDec.name != activeField) {\r\n                    gValDec.text = value.g.toString();\r\n                }\r\n                if (bValDec.name != activeField) {\r\n                    bValDec.text = value.b.toString();\r\n                }\r\n                if (hexVal.name != activeField) {\r\n                    const minusPound: string[] = pickedColor.split(\"#\");\r\n                    hexVal.text = minusPound[1];\r\n                }\r\n                if (picker.name != activeField) {\r\n                    picker.value = value;\r\n                }\r\n            }\r\n\r\n            // When the user enters an integer for R, G, or B we check to make sure it is a valid number and replace if not.\r\n            function updateInt(field: InputText, channel: string) {\r\n                let newValue: string = field.text;\r\n                const checkVal: boolean = /[^0-9]/g.test(newValue);\r\n                if (checkVal) {\r\n                    field.text = lastVal;\r\n                    return;\r\n                } else {\r\n                    if (newValue != \"\") {\r\n                        if (Math.floor(parseInt(newValue)) < 0) {\r\n                            newValue = \"0\";\r\n                        } else if (Math.floor(parseInt(newValue)) > 255) {\r\n                            newValue = \"255\";\r\n                        } else if (isNaN(parseInt(newValue))) {\r\n                            newValue = \"0\";\r\n                        }\r\n                    }\r\n                    if (activeField == field.name) {\r\n                        lastVal = newValue;\r\n                    }\r\n                }\r\n                if (newValue != \"\") {\r\n                    newValue = parseInt(newValue).toString();\r\n                    field.text = newValue;\r\n                    const newSwatchRGB: Color3 = Color3.FromHexString(newSwatch.background);\r\n                    if (activeField == field.name) {\r\n                        if (channel == \"r\") {\r\n                            updateValues(new Color3(parseInt(newValue) / 255, newSwatchRGB.g, newSwatchRGB.b), field.name);\r\n                        } else if (channel == \"g\") {\r\n                            updateValues(new Color3(newSwatchRGB.r, parseInt(newValue) / 255, newSwatchRGB.b), field.name);\r\n                        } else {\r\n                            updateValues(new Color3(newSwatchRGB.r, newSwatchRGB.g, parseInt(newValue) / 255), field.name);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // When the user enters a float for R, G, or B we check to make sure it is a valid number and replace if not.\r\n            function updateFloat(field: InputText, channel: string) {\r\n                let newValue: string = field.text;\r\n                const checkVal: boolean = /[^0-9.]/g.test(newValue);\r\n                if (checkVal) {\r\n                    field.text = lastVal;\r\n                    return;\r\n                } else {\r\n                    if (newValue != \"\" && newValue != \".\" && parseFloat(newValue) != 0) {\r\n                        if (parseFloat(newValue) < 0.0) {\r\n                            newValue = \"0.0\";\r\n                        } else if (parseFloat(newValue) > 1.0) {\r\n                            newValue = \"1.0\";\r\n                        } else if (isNaN(parseFloat(newValue))) {\r\n                            newValue = \"0.0\";\r\n                        }\r\n                    }\r\n                    if (activeField == field.name) {\r\n                        lastVal = newValue;\r\n                    }\r\n                }\r\n                if (newValue != \"\" && newValue != \".\" && parseFloat(newValue) != 0) {\r\n                    newValue = parseFloat(newValue).toString();\r\n                    field.text = newValue;\r\n                } else {\r\n                    newValue = \"0.0\";\r\n                }\r\n                const newSwatchRGB = Color3.FromHexString(newSwatch.background);\r\n                if (activeField == field.name) {\r\n                    if (channel == \"r\") {\r\n                        updateValues(new Color3(parseFloat(newValue), newSwatchRGB.g, newSwatchRGB.b), field.name);\r\n                    } else if (channel == \"g\") {\r\n                        updateValues(new Color3(newSwatchRGB.r, parseFloat(newValue), newSwatchRGB.b), field.name);\r\n                    } else {\r\n                        updateValues(new Color3(newSwatchRGB.r, newSwatchRGB.g, parseFloat(newValue)), field.name);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Removes the current index from the savedColors array. Drawer can then be regenerated.\r\n            function deleteSwatch(index: number) {\r\n                if (options.savedColors) {\r\n                    options.savedColors.splice(index, 1);\r\n                }\r\n                if (options.savedColors && options.savedColors.length == 0) {\r\n                    setEditButtonVisibility(false);\r\n                    editSwatchMode = false;\r\n                }\r\n            }\r\n\r\n            // Creates and styles an individual swatch when updateSwatches is called.\r\n            function createSwatch() {\r\n                if (options.savedColors && options.savedColors[swatchNumber]) {\r\n                    let icon: string;\r\n                    if (editSwatchMode) {\r\n                        icon = \"b\";\r\n                    } else {\r\n                        icon = \"\";\r\n                    }\r\n                    const swatch: Button = Button.CreateSimpleButton(\"Swatch_\" + swatchNumber, icon);\r\n                    swatch.fontFamily = \"coreglyphs\";\r\n                    const swatchColor: Color3 = Color3.FromHexString(options.savedColors[swatchNumber]);\r\n                    const swatchLuminence: number = swatchColor.r + swatchColor.g + swatchColor.b;\r\n\r\n                    // Set color of outline and textBlock based on luminance of the color swatch so feedback always visible\r\n                    if (swatchLuminence > luminanceLimit) {\r\n                        swatch.color = iconColorDark;\r\n                    } else {\r\n                        swatch.color = iconColorLight;\r\n                    }\r\n                    swatch.fontSize = Math.floor(swatchSize * 0.7);\r\n                    swatch.textBlock!.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n                    swatch.height = swatch.width = swatchSize.toString() + \"px\";\r\n                    swatch.background = options.savedColors[swatchNumber];\r\n                    swatch.thickness = 2;\r\n                    const metadata = swatchNumber;\r\n                    swatch.pointerDownAnimation = () => {\r\n                        swatch.thickness = 4;\r\n                    };\r\n                    swatch.pointerUpAnimation = () => {\r\n                        swatch.thickness = 3;\r\n                    };\r\n                    swatch.pointerEnterAnimation = () => {\r\n                        swatch.thickness = 3;\r\n                    };\r\n                    swatch.pointerOutAnimation = () => {\r\n                        swatch.thickness = 2;\r\n                    };\r\n                    swatch.onPointerClickObservable.add(() => {\r\n                        if (!editSwatchMode) {\r\n                            if (options.savedColors) {\r\n                                updateValues(Color3.FromHexString(options.savedColors[metadata]), swatch.name!);\r\n                            }\r\n                        } else {\r\n                            deleteSwatch(metadata);\r\n                            updateSwatches(\"\", butSave);\r\n                        }\r\n                    });\r\n                    return swatch;\r\n                } else {\r\n                    return null;\r\n                }\r\n            }\r\n\r\n            // Mode switch to render button text and close symbols on swatch controls\r\n            function editSwatches(mode?: boolean) {\r\n                if (mode !== undefined) {\r\n                    editSwatchMode = mode;\r\n                }\r\n                let thisButton: Button;\r\n                if (editSwatchMode) {\r\n                    for (let i = 0; i < swatchDrawer.children.length; i++) {\r\n                        thisButton = swatchDrawer.children[i] as Button;\r\n                        thisButton.textBlock!.text = \"b\";\r\n                    }\r\n                    if (butEdit !== undefined) {\r\n                        butEdit.textBlock!.text = \"Done\";\r\n                    }\r\n                } else {\r\n                    for (let i = 0; i < swatchDrawer.children.length; i++) {\r\n                        thisButton = swatchDrawer.children[i] as Button;\r\n                        thisButton.textBlock!.text = \"\";\r\n                    }\r\n                    if (butEdit !== undefined) {\r\n                        butEdit.textBlock!.text = \"Edit\";\r\n                    }\r\n                }\r\n            }\r\n\r\n            /**\r\n             * When Save Color button is pressed this function will first create a swatch drawer if one is not already\r\n             * made. Then all controls are removed from the drawer and we step through the savedColors array and\r\n             * creates one swatch per color. It will also set the height of the drawer control based on how many\r\n             * saved colors there are and how many can be stored per row.\r\n             * @param color\r\n             * @param button\r\n             */\r\n            function updateSwatches(color: string, button: Button) {\r\n                if (options.savedColors) {\r\n                    if (color != \"\") {\r\n                        options.savedColors.push(color);\r\n                    }\r\n                    swatchNumber = 0;\r\n                    swatchDrawer.clearControls();\r\n                    const rowCount: number = Math.ceil(options.savedColors.length / options.numSwatchesPerLine!);\r\n                    let gutterCount: number;\r\n                    if (rowCount == 0) {\r\n                        gutterCount = 0;\r\n                    } else {\r\n                        gutterCount = rowCount + 1;\r\n                    }\r\n                    if (swatchDrawer.rowCount != rowCount + gutterCount) {\r\n                        const currentRows: number = swatchDrawer.rowCount;\r\n                        for (let i = 0; i < currentRows; i++) {\r\n                            swatchDrawer.removeRowDefinition(0);\r\n                        }\r\n                        for (let i = 0; i < rowCount + gutterCount; i++) {\r\n                            if (i % 2) {\r\n                                swatchDrawer.addRowDefinition(swatchSize, true);\r\n                            } else {\r\n                                swatchDrawer.addRowDefinition(gutterSize, true);\r\n                            }\r\n                        }\r\n                    }\r\n                    swatchDrawer.height = (swatchSize * rowCount + gutterCount * gutterSize).toString() + \"px\";\r\n\r\n                    for (let y = 1, thisRow = 1; y < rowCount + gutterCount; y += 2, thisRow++) {\r\n                        // Determine number of buttons to create per row based on the button limit per row and number of saved colors\r\n                        let totalButtonsThisRow: number;\r\n                        if (options.savedColors.length > thisRow * options.numSwatchesPerLine!) {\r\n                            totalButtonsThisRow = options.numSwatchesPerLine!;\r\n                        } else {\r\n                            totalButtonsThisRow = options.savedColors.length - (thisRow - 1) * options.numSwatchesPerLine!;\r\n                        }\r\n                        const buttonIterations: number = Math.min(Math.max(totalButtonsThisRow, 0), options.numSwatchesPerLine!);\r\n                        for (let x = 0, w = 1; x < buttonIterations; x++) {\r\n                            if (x > options.numSwatchesPerLine!) {\r\n                                continue;\r\n                            }\r\n                            const swatch: Button | null = createSwatch();\r\n                            if (swatch != null) {\r\n                                swatchDrawer.addControl(swatch, y, w);\r\n                                w += 2;\r\n                                swatchNumber++;\r\n                            } else {\r\n                                continue;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (options.savedColors.length >= options.swatchLimit!) {\r\n                        disableButton(button, true);\r\n                    } else {\r\n                        disableButton(button, false);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Shows or hides edit swatches button depending on if there are saved swatches\r\n            function setEditButtonVisibility(enableButton: boolean) {\r\n                if (enableButton) {\r\n                    butEdit = Button.CreateSimpleButton(\"butEdit\", \"Edit\");\r\n                    butEdit.width = buttonWidth;\r\n                    butEdit.height = buttonHeight;\r\n                    butEdit.left = Math.floor(parseInt(buttonWidth) * 0.1).toString() + \"px\";\r\n                    butEdit.top = (parseFloat(butEdit.left) * -1).toString() + \"px\";\r\n                    butEdit.verticalAlignment = Control.VERTICAL_ALIGNMENT_BOTTOM;\r\n                    butEdit.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n                    butEdit.thickness = 2;\r\n                    butEdit.color = buttonColor;\r\n                    butEdit.fontSize = buttonFontSize;\r\n                    butEdit.background = buttonBackgroundColor;\r\n                    butEdit.onPointerEnterObservable.add(() => {\r\n                        butEdit.background = buttonBackgroundHoverColor;\r\n                    });\r\n                    butEdit.onPointerOutObservable.add(() => {\r\n                        butEdit.background = buttonBackgroundColor;\r\n                    });\r\n                    butEdit.pointerDownAnimation = () => {\r\n                        butEdit.background = buttonBackgroundClickColor;\r\n                    };\r\n                    butEdit.pointerUpAnimation = () => {\r\n                        butEdit.background = buttonBackgroundHoverColor;\r\n                    };\r\n                    butEdit.onPointerClickObservable.add(() => {\r\n                        if (editSwatchMode) {\r\n                            editSwatchMode = false;\r\n                        } else {\r\n                            editSwatchMode = true;\r\n                        }\r\n                        editSwatches();\r\n                    });\r\n                    pickerGrid.addControl(butEdit, 1, 0);\r\n                } else {\r\n                    pickerGrid.removeControl(butEdit);\r\n                }\r\n            }\r\n\r\n            // Called when the user hits the limit of saved colors in the drawer.\r\n            function disableButton(button: Button, disabled: boolean) {\r\n                if (disabled) {\r\n                    button.color = buttonDisabledColor;\r\n                    button.background = buttonDisabledBackgroundColor;\r\n                } else {\r\n                    button.color = buttonColor;\r\n                    button.background = buttonBackgroundColor;\r\n                }\r\n            }\r\n\r\n            // Passes last chosen color back to scene and kills dialog by removing from AdvancedDynamicTexture\r\n            function closePicker(color: string) {\r\n                if (options.savedColors && options.savedColors.length > 0) {\r\n                    resolve({\r\n                        savedColors: options.savedColors,\r\n                        pickedColor: color,\r\n                    });\r\n                } else {\r\n                    resolve({\r\n                        pickedColor: color,\r\n                    });\r\n                }\r\n                advancedTexture.removeControl(dialogContainer);\r\n            }\r\n        });\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.ColorPicker\", ColorPicker);\r\n","import { Container } from \"./container\";\r\nimport { Control } from \"./control\";\r\nimport type { Measure } from \"../measure\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/** Class used to create 2D ellipse containers */\r\nexport class Ellipse extends Container {\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    @serialize()\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Ellipse\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Ellipse\";\r\n    }\r\n\r\n    protected _localDraw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        Control.drawEllipse(\r\n            this._currentMeasure.left + this._currentMeasure.width / 2,\r\n            this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._thickness / 2,\r\n            this._currentMeasure.height / 2 - this._thickness / 2,\r\n            context\r\n        );\r\n\r\n        if (this._backgroundGradient || this._background) {\r\n            context.fillStyle = this._getBackgroundColor(context);\r\n\r\n            context.fill();\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (this._thickness) {\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    protected _clipForChildren(context: ICanvasRenderingContext) {\r\n        Control.drawEllipse(\r\n            this._currentMeasure.left + this._currentMeasure.width / 2,\r\n            this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2,\r\n            this._currentMeasure.height / 2,\r\n            context\r\n        );\r\n\r\n        context.clip();\r\n    }\r\n\r\n    public _renderHighlightSpecific(context: ICanvasRenderingContext): void {\r\n        Control.drawEllipse(\r\n            this._currentMeasure.left + this._currentMeasure.width / 2,\r\n            this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._highlightLineWidth / 2,\r\n            this._currentMeasure.height / 2 - this._highlightLineWidth / 2,\r\n            context\r\n        );\r\n        context.stroke();\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Ellipse\", Ellipse);\r\n","import type { Nullable } from \"core/types\";\r\nimport type { Vector2 } from \"core/Maths/math.vector\";\r\n\r\nimport { Button } from \"./button\";\r\nimport type { Control } from \"./control\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport type { IFocusableControl } from \"./focusableControl\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport type { IKeyboardEvent } from \"core/Events/deviceInputEvents\";\r\n\r\n/**\r\n * Class used to create a focusable button that can easily handle keyboard events\r\n * @since 5.0.0\r\n */\r\nexport class FocusableButton extends Button implements IFocusableControl {\r\n    /** Highlight color when button is focused */\r\n    public focusedColor: Nullable<string> = null;\r\n    private _isFocused = false;\r\n    private _unfocusedColor: Nullable<string> = null;\r\n\r\n    /** Observable raised when the control gets the focus */\r\n    public onFocusObservable = new Observable<Button>();\r\n    /** Observable raised when the control loses the focus */\r\n    public onBlurObservable = new Observable<Button>();\r\n    /** Observable raised when a key event was processed */\r\n    public onKeyboardEventProcessedObservable = new Observable<IKeyboardEvent>();\r\n\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this._unfocusedColor = this.color;\r\n    }\r\n\r\n    /** @internal */\r\n    public onBlur(): void {\r\n        if (this._isFocused) {\r\n            this._isFocused = false;\r\n            if (this.focusedColor && this._unfocusedColor != null) {\r\n                // Set color back to saved unfocused color\r\n                this.color = this._unfocusedColor;\r\n            }\r\n            this.onBlurObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public onFocus(): void {\r\n        this._isFocused = true;\r\n\r\n        if (this.focusedColor) {\r\n            // Save the unfocused color\r\n            this._unfocusedColor = this.color;\r\n            this.color = this.focusedColor;\r\n        }\r\n        this.onFocusObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Function called to get the list of controls that should not steal the focus from this control\r\n     * @returns an array of controls\r\n     */\r\n    public keepsFocusWith(): Nullable<Control[]> {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Function to focus a button programmatically\r\n     */\r\n    public focus() {\r\n        this._host.moveFocusToControl(this);\r\n    }\r\n\r\n    /**\r\n     * Function to unfocus a button programmatically\r\n     */\r\n    public blur() {\r\n        this._host.focusedControl = null;\r\n    }\r\n\r\n    /**\r\n     * Handles the keyboard event\r\n     * @param evt Defines the KeyboardEvent\r\n     */\r\n    public processKeyboard(evt: IKeyboardEvent): void {\r\n        this.onKeyboardEventProcessedObservable.notifyObservers(evt, -1, this);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!this.isReadOnly) {\r\n            // Clicking on button should focus\r\n            this.focus();\r\n        }\r\n\r\n        return super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi);\r\n    }\r\n\r\n    /** @internal */\r\n    public displose() {\r\n        super.dispose();\r\n\r\n        this.onBlurObservable.clear();\r\n        this.onFocusObservable.clear();\r\n        this.onKeyboardEventProcessedObservable.clear();\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.FocusableButton\", FocusableButton);\r\n","import type { Nullable } from \"core/types\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport type { Vector2 } from \"core/Maths/math.vector\";\r\n\r\nimport { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport type { VirtualKeyboard } from \"./virtualKeyboard\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { Measure } from \"../measure\";\r\nimport { InputText } from \"./inputText\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport type { PointerInfo, PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport type { IKeyboardEvent } from \"core/Events/deviceInputEvents\";\r\n\r\nimport { serialize } from \"core/Misc/decorators\";\r\n\r\n/**\r\n * Class used to create input text control\r\n */\r\nexport class InputTextArea extends InputText {\r\n    private _textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    private _textVerticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n    private _lines: any[];\r\n    private _lineSpacing: ValueAndUnit = new ValueAndUnit(0);\r\n    private _outlineWidth: number = 0;\r\n    private _outlineColor: string = \"white\";\r\n    private _maxHeight = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n\r\n    private _clipTextTop: number;\r\n    private _clipTextLeft: number;\r\n\r\n    private _cursorInfo: { globalStartIndex: number; globalEndIndex: number; relativeStartIndex: number; relativeEndIndex: number; currentLineIndex: number };\r\n    private _highlightCursorInfo: { initialStartIndex: number; initialRelativeStartIndex: number; initialLineIndex: number };\r\n\r\n    /**\r\n     * An event triggered after the text was broken up into lines\r\n     */\r\n    public onLinesReadyObservable = new Observable<InputTextArea>();\r\n\r\n    /** @internal */\r\n    public _connectedVirtualKeyboard: Nullable<VirtualKeyboard>;\r\n    private _contextForBreakLines: ICanvasRenderingContext;\r\n    private _clickedCoordinateX: Nullable<number>;\r\n    private _clickedCoordinateY: Nullable<number>;\r\n\r\n    private _availableWidth: number;\r\n    private _availableHeight: number;\r\n\r\n    private _scrollTop: Nullable<number>;\r\n\r\n    private _autoStretchHeight: boolean;\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public get outlineWidth(): number {\r\n        return this._outlineWidth;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public set outlineWidth(value: number) {\r\n        if (this._outlineWidth === value) {\r\n            return;\r\n        }\r\n        this._outlineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public get outlineColor(): string {\r\n        return this._outlineColor;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public set outlineColor(value: string) {\r\n        if (this._outlineColor === value) {\r\n            return;\r\n        }\r\n        this._outlineColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can auto stretch its height to adapt to the text */\r\n    @serialize()\r\n    public get autoStretchHeight(): boolean {\r\n        return this._autoStretchHeight;\r\n    }\r\n\r\n    public set autoStretchHeight(value: boolean) {\r\n        if (this._autoStretchHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoStretchHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    public set height(value: string | number) {\r\n        this.fixedRatioMasterIsWidth = false;\r\n\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n\r\n        this._autoStretchHeight = false;\r\n    }\r\n\r\n    @serialize()\r\n    public get maxHeight(): string | number {\r\n        return this._maxHeight.toString(this._host);\r\n    }\r\n\r\n    /** Gets the maximum width allowed by the control in pixels */\r\n    public get maxHeightInPixels(): number {\r\n        return this._maxHeight.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set maxHeight(value: string | number) {\r\n        if (this._maxHeight.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._maxHeight.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new InputTextArea\r\n     * @param name defines the control name\r\n     * @param text defines the text of the control\r\n     */\r\n    constructor(public name?: string, text: string = \"\") {\r\n        super(name);\r\n\r\n        this.text = text;\r\n\r\n        this.isPointerBlocker = true;\r\n\r\n        this.onLinesReadyObservable.add(() => this._updateCursorPosition());\r\n\r\n        this._highlightCursorInfo = {\r\n            initialStartIndex: -1,\r\n            initialRelativeStartIndex: -1,\r\n            initialLineIndex: -1,\r\n        };\r\n\r\n        this._cursorInfo = {\r\n            globalStartIndex: 0,\r\n            globalEndIndex: 0,\r\n            relativeEndIndex: 0,\r\n            relativeStartIndex: 0,\r\n            currentLineIndex: 0,\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"InputTextArea\";\r\n    }\r\n\r\n    /**\r\n     * Handles the keyboard event\r\n     * @param evt Defines the KeyboardEvent\r\n     */\r\n    public processKeyboard(evt: IKeyboardEvent): void {\r\n        // process pressed key\r\n        this.alternativeProcessKey(evt.code, evt.key, evt);\r\n\r\n        this.onKeyboardEventProcessedObservable.notifyObservers(evt);\r\n    }\r\n\r\n    /**\r\n     * Process the last keyboard input\r\n     *\r\n     * @param code The ascii input number\r\n     * @param key The key string representation\r\n     * @param evt The keyboard event emits with input\r\n     * @internal\r\n     */\r\n    public alternativeProcessKey(code: string, key?: string, evt?: IKeyboardEvent) {\r\n        //return if clipboard event keys (i.e -ctr/cmd + c,v,x)\r\n        if (evt && (evt.ctrlKey || evt.metaKey) && (code === \"KeyC\" || code === \"KeyV\" || code === \"KeyX\")) {\r\n            return;\r\n        }\r\n\r\n        // Specific cases\r\n        switch (code) {\r\n            case \"KeyA\": // A - select all\r\n                if (evt && (evt.ctrlKey || evt.metaKey)) {\r\n                    this._selectAllText();\r\n                    evt.preventDefault();\r\n                    return;\r\n                }\r\n                break;\r\n            case \"Period\": //SLASH\r\n                if (evt && evt.shiftKey) {\r\n                    evt.preventDefault();\r\n                }\r\n                break;\r\n            case \"Backspace\": // BACKSPACE\r\n                if (!this._isTextHighlightOn && this._cursorInfo.globalStartIndex > 0) {\r\n                    this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n                    this._cursorInfo.globalStartIndex--;\r\n                }\r\n\r\n                this._textWrapper.removePart(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex);\r\n\r\n                this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n\r\n                if (evt) {\r\n                    evt.preventDefault();\r\n                }\r\n\r\n                this._blinkIsEven = false;\r\n                this._isTextHighlightOn = false;\r\n\r\n                this._textHasChanged();\r\n                break;\r\n            case \"Delete\": // DELETE\r\n                if (!this._isTextHighlightOn && this._cursorInfo.globalEndIndex < this.text.length) {\r\n                    this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex + 1;\r\n                }\r\n\r\n                this._textWrapper.removePart(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex);\r\n\r\n                this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n\r\n                if (evt) {\r\n                    evt.preventDefault();\r\n                }\r\n\r\n                this._blinkIsEven = false;\r\n                this._isTextHighlightOn = false;\r\n\r\n                this._textHasChanged();\r\n                break;\r\n            case \"Enter\": // RETURN\r\n                this._textWrapper.removePart(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex, \"\\n\");\r\n                this._cursorInfo.globalStartIndex++;\r\n                this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n\r\n                this._blinkIsEven = false;\r\n                this._isTextHighlightOn = false;\r\n\r\n                this._textHasChanged();\r\n                return;\r\n            case \"End\": // END\r\n                this._cursorInfo.globalStartIndex = this.text.length;\r\n                this._blinkIsEven = false;\r\n                this._isTextHighlightOn = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case \"Home\": // HOME\r\n                this._cursorInfo.globalStartIndex = 0;\r\n                this._blinkIsEven = false;\r\n                this._isTextHighlightOn = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case \"ArrowLeft\": // LEFT\r\n                this._markAsDirty();\r\n\r\n                if (evt && evt.shiftKey) {\r\n                    // shift + ctrl/cmd + <-\r\n                    if (evt.ctrlKey || evt.metaKey) {\r\n                        // Go to line's start by substract the relativeStartIndex to the globalStartIndex\r\n                        this._cursorInfo.globalStartIndex -= this._cursorInfo.relativeStartIndex;\r\n                        this._cursorInfo.globalEndIndex = this._highlightCursorInfo.initialStartIndex;\r\n                    }\r\n                    // store the starting point\r\n                    if (!this._isTextHighlightOn) {\r\n                        this._highlightCursorInfo.initialLineIndex = this._cursorInfo.currentLineIndex;\r\n                        this._highlightCursorInfo.initialStartIndex = this._cursorInfo.globalStartIndex;\r\n                        this._highlightCursorInfo.initialRelativeStartIndex = this._cursorInfo.relativeStartIndex;\r\n\r\n                        this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n                        this._cursorInfo.globalStartIndex--;\r\n                        this._isTextHighlightOn = true;\r\n                    } else {\r\n                        if (this._cursorInfo.globalEndIndex > this._highlightCursorInfo.initialStartIndex) {\r\n                            this._cursorInfo.globalEndIndex--;\r\n                        } else {\r\n                            this._cursorInfo.globalStartIndex--;\r\n                        }\r\n                    }\r\n                    this._blinkIsEven = true;\r\n                    evt.preventDefault();\r\n                    return;\r\n                }\r\n\r\n                if (this._isTextHighlightOn) {\r\n                    this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n                } else if (evt && (evt.ctrlKey || evt.metaKey)) {\r\n                    // ctr + <-\r\n                    this._cursorInfo.globalStartIndex -= this._cursorInfo.relativeStartIndex;\r\n                    evt.preventDefault();\r\n                } else if (this._cursorInfo.globalStartIndex > 0) {\r\n                    this._cursorInfo.globalStartIndex--;\r\n                }\r\n\r\n                // update the cursor\r\n                this._blinkIsEven = false;\r\n                this._isTextHighlightOn = false;\r\n                return;\r\n            case \"ArrowRight\": // RIGHT\r\n                this._markAsDirty();\r\n\r\n                if (evt && evt.shiftKey) {\r\n                    // shift + ctrl/cmd + ->\r\n                    if (evt.ctrlKey || evt.metaKey) {\r\n                        const rightDelta = this._lines[this._cursorInfo.currentLineIndex].text.length - this._cursorInfo.relativeEndIndex - 1;\r\n                        this._cursorInfo.globalEndIndex += rightDelta;\r\n                        this._cursorInfo.globalStartIndex = this._highlightCursorInfo.initialStartIndex;\r\n                    }\r\n                    // store the starting point\r\n                    if (!this._isTextHighlightOn) {\r\n                        this._highlightCursorInfo.initialLineIndex = this._cursorInfo.currentLineIndex;\r\n                        this._highlightCursorInfo.initialStartIndex = this._cursorInfo.globalStartIndex;\r\n                        this._highlightCursorInfo.initialRelativeStartIndex = this._cursorInfo.relativeStartIndex;\r\n\r\n                        this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n                        this._cursorInfo.globalEndIndex++;\r\n                        this._isTextHighlightOn = true;\r\n                    } else {\r\n                        if (this._cursorInfo.globalStartIndex < this._highlightCursorInfo.initialStartIndex) {\r\n                            this._cursorInfo.globalStartIndex++;\r\n                        } else {\r\n                            this._cursorInfo.globalEndIndex++;\r\n                        }\r\n                    }\r\n                    this._blinkIsEven = true;\r\n                    evt.preventDefault();\r\n                    return;\r\n                }\r\n                if (this._isTextHighlightOn) {\r\n                    this._cursorInfo.globalStartIndex = this._cursorInfo.globalEndIndex;\r\n                } else if (evt && (evt.ctrlKey || evt.metaKey)) {\r\n                    //ctr + ->\r\n                    const rightDelta = this._lines[this._cursorInfo.currentLineIndex].text.length - this._cursorInfo.relativeEndIndex;\r\n                    this._cursorInfo.globalStartIndex += rightDelta;\r\n                } else if (this._cursorInfo.globalStartIndex < this.text.length) {\r\n                    this._cursorInfo.globalStartIndex++;\r\n                }\r\n\r\n                // update the cursor\r\n                this._blinkIsEven = false;\r\n                this._isTextHighlightOn = false;\r\n                return;\r\n            case \"ArrowUp\": // UP\r\n                // update the cursor\r\n                this._blinkIsEven = false;\r\n\r\n                if (evt) {\r\n                    if (evt.shiftKey) {\r\n                        if (!this._isTextHighlightOn) {\r\n                            this._highlightCursorInfo.initialLineIndex = this._cursorInfo.currentLineIndex;\r\n                            this._highlightCursorInfo.initialStartIndex = this._cursorInfo.globalStartIndex;\r\n                            this._highlightCursorInfo.initialRelativeStartIndex = this._cursorInfo.relativeStartIndex;\r\n                        }\r\n                        this._isTextHighlightOn = true;\r\n                        this._blinkIsEven = true;\r\n                    } else {\r\n                        this._isTextHighlightOn = false;\r\n                    }\r\n                    evt.preventDefault();\r\n                }\r\n\r\n                if (this._cursorInfo.currentLineIndex === 0) {\r\n                    // First line\r\n                    this._cursorInfo.globalStartIndex = 0;\r\n                } else {\r\n                    const currentLine = this._lines[this._cursorInfo.currentLineIndex];\r\n                    const upperLine = this._lines[this._cursorInfo.currentLineIndex - 1];\r\n\r\n                    let tmpIndex = 0;\r\n                    let relativeIndex = 0;\r\n                    if (!this._isTextHighlightOn || this._cursorInfo.currentLineIndex < this._highlightCursorInfo.initialLineIndex) {\r\n                        tmpIndex = this._cursorInfo.globalStartIndex;\r\n                        relativeIndex = this._cursorInfo.relativeStartIndex;\r\n                    } else {\r\n                        tmpIndex = this._cursorInfo.globalEndIndex;\r\n                        relativeIndex = this._cursorInfo.relativeEndIndex;\r\n                    }\r\n\r\n                    const currentText = currentLine.text.substr(0, relativeIndex);\r\n                    const currentWidth = this._contextForBreakLines.measureText(currentText).width;\r\n\r\n                    let upperWidth = 0;\r\n                    let previousWidth = 0;\r\n\r\n                    tmpIndex -= relativeIndex; // Start of current line\r\n                    tmpIndex -= upperLine.text.length + upperLine.lineEnding.length; // Start of upper line\r\n                    let upperLineRelativeIndex = 0;\r\n\r\n                    while (upperWidth < currentWidth && upperLineRelativeIndex < upperLine.text.length) {\r\n                        tmpIndex++;\r\n                        upperLineRelativeIndex++;\r\n                        previousWidth = Math.abs(currentWidth - upperWidth);\r\n                        upperWidth = this._contextForBreakLines.measureText(upperLine.text.substr(0, upperLineRelativeIndex)).width;\r\n                    }\r\n\r\n                    // Find closest move\r\n                    if (Math.abs(currentWidth - upperWidth) > previousWidth && upperLineRelativeIndex > 0) {\r\n                        tmpIndex--;\r\n                    }\r\n\r\n                    if (!this._isTextHighlightOn) {\r\n                        this._cursorInfo.globalStartIndex = tmpIndex;\r\n                    } else if (this._cursorInfo.currentLineIndex <= this._highlightCursorInfo.initialLineIndex) {\r\n                        this._cursorInfo.globalStartIndex = tmpIndex;\r\n                        this._cursorInfo.globalEndIndex = this._highlightCursorInfo.initialStartIndex;\r\n                        this._cursorInfo.relativeEndIndex = this._highlightCursorInfo.initialRelativeStartIndex;\r\n                    } else {\r\n                        this._cursorInfo.globalEndIndex = tmpIndex;\r\n                    }\r\n                }\r\n\r\n                this._markAsDirty();\r\n                return;\r\n            case \"ArrowDown\": // DOWN\r\n                // update the cursor\r\n                this._blinkIsEven = false;\r\n\r\n                if (evt) {\r\n                    if (evt.shiftKey) {\r\n                        if (!this._isTextHighlightOn) {\r\n                            this._highlightCursorInfo.initialLineIndex = this._cursorInfo.currentLineIndex;\r\n                            this._highlightCursorInfo.initialStartIndex = this._cursorInfo.globalStartIndex;\r\n                            this._highlightCursorInfo.initialRelativeStartIndex = this._cursorInfo.relativeStartIndex;\r\n                        }\r\n\r\n                        this._isTextHighlightOn = true;\r\n                        this._blinkIsEven = true;\r\n                    } else {\r\n                        this._isTextHighlightOn = false;\r\n                    }\r\n                    evt.preventDefault();\r\n                }\r\n\r\n                if (this._cursorInfo.currentLineIndex === this._lines.length - 1) {\r\n                    // Last line\r\n                    this._cursorInfo.globalStartIndex = this.text.length;\r\n                } else {\r\n                    const currentLine = this._lines[this._cursorInfo.currentLineIndex];\r\n                    const underLine = this._lines[this._cursorInfo.currentLineIndex + 1];\r\n\r\n                    let tmpIndex = 0;\r\n                    let relativeIndex = 0;\r\n                    if (!this._isTextHighlightOn || this._cursorInfo.currentLineIndex < this._highlightCursorInfo.initialLineIndex) {\r\n                        tmpIndex = this._cursorInfo.globalStartIndex;\r\n                        relativeIndex = this._cursorInfo.relativeStartIndex;\r\n                    } else {\r\n                        tmpIndex = this._cursorInfo.globalEndIndex;\r\n                        relativeIndex = this._cursorInfo.relativeEndIndex;\r\n                    }\r\n\r\n                    const currentText = currentLine.text.substr(0, relativeIndex);\r\n                    const currentWidth = this._contextForBreakLines.measureText(currentText).width;\r\n\r\n                    let underWidth = 0;\r\n                    let previousWidth = 0;\r\n\r\n                    tmpIndex += currentLine.text.length - relativeIndex + currentLine.lineEnding.length; // Start of current line\r\n                    let underLineRelativeIndex = 0;\r\n\r\n                    while (underWidth < currentWidth && underLineRelativeIndex < underLine.text.length) {\r\n                        tmpIndex++;\r\n                        underLineRelativeIndex++;\r\n                        previousWidth = Math.abs(currentWidth - underWidth);\r\n                        underWidth = this._contextForBreakLines.measureText(underLine.text.substr(0, underLineRelativeIndex)).width;\r\n                    }\r\n\r\n                    // Find closest move\r\n                    if (Math.abs(currentWidth - underWidth) > previousWidth && underLineRelativeIndex > 0) {\r\n                        tmpIndex--;\r\n                    }\r\n\r\n                    if (!this._isTextHighlightOn) {\r\n                        this._cursorInfo.globalStartIndex = tmpIndex;\r\n                    } else if (this._cursorInfo.currentLineIndex < this._highlightCursorInfo.initialLineIndex) {\r\n                        this._cursorInfo.globalStartIndex = tmpIndex;\r\n                        if (this._cursorInfo.globalStartIndex > this._cursorInfo.globalEndIndex) {\r\n                            this._cursorInfo.globalEndIndex += this._cursorInfo.globalStartIndex;\r\n                            this._cursorInfo.globalStartIndex = this._cursorInfo.globalEndIndex - this._cursorInfo.globalStartIndex;\r\n                            this._cursorInfo.globalEndIndex -= this._cursorInfo.globalStartIndex;\r\n                        }\r\n                    } else {\r\n                        this._cursorInfo.globalEndIndex = tmpIndex;\r\n                        this._cursorInfo.globalStartIndex = this._highlightCursorInfo.initialStartIndex;\r\n                    }\r\n                }\r\n\r\n                this._markAsDirty();\r\n                return;\r\n        }\r\n\r\n        // Printable characters\r\n        if (key?.length === 1) {\r\n            evt?.preventDefault();\r\n            this._currentKey = key;\r\n            this.onBeforeKeyAddObservable.notifyObservers(this);\r\n            key = this._currentKey;\r\n            if (this._addKey) {\r\n                this._isTextHighlightOn = false;\r\n                this._blinkIsEven = false;\r\n\r\n                this._textWrapper.removePart(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex, key);\r\n                this._cursorInfo.globalStartIndex += key.length;\r\n                this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n\r\n                this._textHasChanged();\r\n            }\r\n        }\r\n    }\r\n\r\n    protected _parseLineWordWrap(line: string = \"\", width: number, context: ICanvasRenderingContext): { text: string; width: number; lineEnding: string }[] {\r\n        const lines = [];\r\n        const words = line.split(\" \");\r\n        let lineWidth = 0;\r\n\r\n        for (let n = 0; n < words.length; n++) {\r\n            const testLine = n > 0 ? line + \" \" + words[n] : words[0];\r\n            const metrics = context.measureText(testLine);\r\n            const testWidth = metrics.width;\r\n            if (testWidth > width) {\r\n                if (n > 0) {\r\n                    // Avoid first word duplication if of too long\r\n                    lineWidth = context.measureText(line).width;\r\n                    lines.push({ text: line, width: lineWidth, lineEnding: \" \" });\r\n                }\r\n\r\n                line = words[n];\r\n\r\n                let flushedLine = \"\";\r\n\r\n                line.split(\"\").map((char) => {\r\n                    if (context.measureText(flushedLine + char).width > width) {\r\n                        lines.push({ text: flushedLine, width: context.measureText(flushedLine).width, lineEnding: \"\" });\r\n                        flushedLine = \"\";\r\n                    }\r\n                    flushedLine += char;\r\n                });\r\n\r\n                line = flushedLine;\r\n                // Measure remaining characters\r\n                lineWidth = context.measureText(line).width;\r\n            } else {\r\n                lineWidth = testWidth;\r\n                line = testLine;\r\n            }\r\n        }\r\n        lines.push({ text: line, width: lineWidth, lineEnding: \" \" });\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _breakLines(refWidth: number, context: ICanvasRenderingContext): object[] {\r\n        const lines: { text: string; width: number; lineEnding: string }[] = [];\r\n        const _lines = this.text.split(\"\\n\");\r\n\r\n        if (this.clipContent) {\r\n            for (const _line of _lines) {\r\n                lines.push(...this._parseLineWordWrap(_line, refWidth, context));\r\n            }\r\n        } else {\r\n            for (const _line of _lines) {\r\n                lines.push(this._parseLine(_line, context));\r\n            }\r\n        }\r\n\r\n        lines[lines.length - 1].lineEnding = \"\\n\";\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _parseLine(line: string = \"\", context: ICanvasRenderingContext): { text: string; width: number; lineEnding: string } {\r\n        return { text: line, width: context.measureText(line).width, lineEnding: \" \" };\r\n    }\r\n\r\n    /**\r\n     * Processing of child right before the parent measurement update\r\n     *\r\n     * @param parentMeasure The parent measure\r\n     * @param context The rendering canvas\r\n     * @internal\r\n     */\r\n    protected _preMeasure(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        if (!this._fontOffset || this._wasDirty) {\r\n            this._fontOffset = Control._GetFontOffset(context.font);\r\n        }\r\n\r\n        let text = this._beforeRenderText(this._textWrapper).text;\r\n\r\n        // placeholder conditions and color setting\r\n        if (!this._isFocused && !this.text && this._placeholderText) {\r\n            text = this._placeholderText;\r\n\r\n            if (this._placeholderColor) {\r\n                context.fillStyle = this._placeholderColor;\r\n            }\r\n        }\r\n\r\n        // measures the textlength -> this.measure.width\r\n        this._textWidth = context.measureText(text).width;\r\n        // we double up the margin width\r\n        const marginWidth = this._margin.getValueInPixel(this._host, parentMeasure.width) * 2;\r\n\r\n        if (this._autoStretchWidth) {\r\n            const tmpLines = text.split(\"\\n\");\r\n            const longerString = tmpLines.reduce((acc: string, val: string) => {\r\n                const valueLength = context.measureText(val).width;\r\n                const accLength = context.measureText(acc).width;\r\n                return valueLength > accLength ? val : acc;\r\n            }, \"\");\r\n\r\n            const longerStringWidth = context.measureText(longerString).width;\r\n            this.width = Math.min(this._maxWidth.getValueInPixel(this._host, parentMeasure.width), longerStringWidth + marginWidth) + \"px\";\r\n\r\n            this.autoStretchWidth = true;\r\n        }\r\n\r\n        this._availableWidth = this._width.getValueInPixel(this._host, parentMeasure.width) - marginWidth;\r\n\r\n        // Prepare lines\r\n        this._lines = this._breakLines(this._availableWidth, context);\r\n        // can we find a cleaner implementation here?\r\n        this._contextForBreakLines = context;\r\n\r\n        if (this._autoStretchHeight) {\r\n            const textHeight = this._lines.length * this._fontOffset.height;\r\n            const totalHeight = textHeight + this._margin.getValueInPixel(this._host, parentMeasure.height) * 2;\r\n            this.height = Math.min(this._maxHeight.getValueInPixel(this._host, parentMeasure.height), totalHeight) + \"px\";\r\n\r\n            this._autoStretchHeight = true;\r\n        }\r\n\r\n        this._availableHeight = this._height.getValueInPixel(this._host, parentMeasure.height) - marginWidth;\r\n\r\n        if (this._isFocused) {\r\n            this._cursorInfo.currentLineIndex = 0;\r\n\r\n            let lineLength = this._lines[this._cursorInfo.currentLineIndex].text.length + this._lines[this._cursorInfo.currentLineIndex].lineEnding.length;\r\n            let tmpLength = 0;\r\n\r\n            while (tmpLength + lineLength <= this._cursorInfo.globalStartIndex) {\r\n                tmpLength += lineLength;\r\n\r\n                if (this._cursorInfo.currentLineIndex < this._lines.length - 1) {\r\n                    this._cursorInfo.currentLineIndex++;\r\n                    lineLength = this._lines[this._cursorInfo.currentLineIndex].text.length + this._lines[this._cursorInfo.currentLineIndex].lineEnding.length;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private _computeScroll() {\r\n        this._clipTextLeft = this._currentMeasure.left + this._margin.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n        this._clipTextTop = this._currentMeasure.top + this._margin.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n\r\n        if (this._isFocused && this._lines[this._cursorInfo.currentLineIndex].width > this._availableWidth) {\r\n            const textLeft = this._clipTextLeft - this._lines[this._cursorInfo.currentLineIndex].width + this._availableWidth;\r\n\r\n            if (!this._scrollLeft) {\r\n                this._scrollLeft = textLeft;\r\n            }\r\n        } else {\r\n            this._scrollLeft = this._clipTextLeft;\r\n        }\r\n\r\n        if (this._isFocused && !this._autoStretchHeight) {\r\n            const selectedHeight = (this._cursorInfo.currentLineIndex + 1) * this._fontOffset.height;\r\n            const textTop = this._clipTextTop - selectedHeight;\r\n\r\n            if (!this._scrollTop) {\r\n                this._scrollTop = textTop;\r\n            }\r\n        } else {\r\n            this._scrollTop = this._clipTextTop;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Processing of child after the parent measurement update\r\n     *\r\n     * @internal\r\n     */\r\n    protected _additionalProcessing(): void {\r\n        // Flush the highlighted text each frame\r\n        this.highlightedText = \"\";\r\n\r\n        this.onLinesReadyObservable.notifyObservers(this);\r\n    }\r\n\r\n    private _drawText(text: string, textWidth: number, y: number, context: ICanvasRenderingContext): void {\r\n        const width = this._currentMeasure.width;\r\n        let x = this._scrollLeft as number;\r\n        switch (this._textHorizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x += 0;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x += width - textWidth;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x += (width - textWidth) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this.outlineWidth) {\r\n            context.strokeText(text, this._currentMeasure.left + x, y);\r\n        }\r\n        context.fillText(text, x, y);\r\n    }\r\n\r\n    /**\r\n     * Copy the text in the clipboard\r\n     *\r\n     * @param ev The clipboard event\r\n     * @internal\r\n     */\r\n    protected _onCopyText(ev: ClipboardEvent): void {\r\n        this._isTextHighlightOn = false;\r\n        //when write permission to clipbaord data is denied\r\n        try {\r\n            ev.clipboardData && ev.clipboardData.setData(\"text/plain\", this._highlightedText);\r\n        } catch {} //pass\r\n        this._host.clipboardData = this._highlightedText;\r\n    }\r\n\r\n    /**\r\n     * Cut the text and copy it in the clipboard\r\n     *\r\n     * @param ev The clipboard event\r\n     * @internal\r\n     */\r\n    protected _onCutText(ev: ClipboardEvent): void {\r\n        if (!this._highlightedText) {\r\n            return;\r\n        }\r\n        //when write permission to clipbaord data is denied\r\n        try {\r\n            ev.clipboardData && ev.clipboardData.setData(\"text/plain\", this._highlightedText);\r\n        } catch {} //pass\r\n\r\n        this._host.clipboardData = this._highlightedText;\r\n\r\n        this._textWrapper.removePart(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex);\r\n\r\n        this._textHasChanged();\r\n    }\r\n\r\n    /**\r\n     * Paste the copied text from the clipboard\r\n     *\r\n     * @param ev The clipboard event\r\n     * @internal\r\n     */\r\n    protected _onPasteText(ev: ClipboardEvent): void {\r\n        let data: string = \"\";\r\n        if (ev.clipboardData && ev.clipboardData.types.indexOf(\"text/plain\") !== -1) {\r\n            data = ev.clipboardData.getData(\"text/plain\");\r\n        } else {\r\n            //get the cached data; returns blank string by default\r\n            data = this._host.clipboardData;\r\n        }\r\n\r\n        this._isTextHighlightOn = false;\r\n\r\n        this._textWrapper.removePart(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex, data);\r\n\r\n        const deltaIndex = data.length - (this._cursorInfo.globalEndIndex - this._cursorInfo.globalStartIndex);\r\n\r\n        this._cursorInfo.globalStartIndex += deltaIndex;\r\n        this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n\r\n        this._textHasChanged();\r\n    }\r\n\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        this._computeScroll();\r\n\r\n        this._scrollLeft = this._scrollLeft ?? 0;\r\n        this._scrollTop = this._scrollTop ?? 0;\r\n\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        // Background\r\n        if (this._isFocused) {\r\n            if (this._focusedBackground) {\r\n                context.fillStyle = this._isEnabled ? this._focusedBackground : this._disabledColor;\r\n\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n        } else if (this._background) {\r\n            context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n\r\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        // sets the color of the rectangle (border if background available)\r\n        if (this.color) {\r\n            context.fillStyle = this.color;\r\n        }\r\n\r\n        const height = this._currentMeasure.height;\r\n        const width = this._currentMeasure.width;\r\n        let rootY = 0;\r\n\r\n        switch (this._textVerticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                rootY = this._fontOffset.ascent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                rootY = height - this._fontOffset.height * (this._lines.length - 1) - this._fontOffset.descent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                rootY = this._fontOffset.ascent + (height - this._fontOffset.height * this._lines.length) / 2;\r\n                break;\r\n        }\r\n\r\n        context.save();\r\n        context.beginPath();\r\n        context.fillStyle = this.fontStyle;\r\n\r\n        // here we define the visible reactangle to clip it in next line\r\n        context.rect(this._clipTextLeft, this._clipTextTop, this._availableWidth + 2, this._availableHeight + 2);\r\n        context.clip();\r\n\r\n        // Text\r\n        rootY += this._scrollTop;\r\n\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n\r\n            if (i !== 0 && this._lineSpacing.internalValue !== 0) {\r\n                if (this._lineSpacing.isPixel) {\r\n                    rootY += this._lineSpacing.getValue(this._host);\r\n                } else {\r\n                    rootY = rootY + this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n                }\r\n            }\r\n\r\n            this._drawText(line.text, line.width, rootY, context);\r\n            rootY += this._fontOffset.height;\r\n        }\r\n\r\n        context.restore();\r\n\r\n        // Cursor\r\n        if (this._isFocused) {\r\n            // Render cursor\r\n            if (!this._blinkIsEven || this._isTextHighlightOn) {\r\n                let cursorLeft = this._scrollLeft + context.measureText(this._lines[this._cursorInfo.currentLineIndex].text.substr(0, this._cursorInfo.relativeStartIndex)).width;\r\n\r\n                if (cursorLeft < this._clipTextLeft) {\r\n                    this._scrollLeft += this._clipTextLeft - cursorLeft;\r\n                    cursorLeft = this._clipTextLeft;\r\n                    this._markAsDirty();\r\n                } else if (cursorLeft > this._clipTextLeft + this._availableWidth) {\r\n                    this._scrollLeft += this._clipTextLeft + this._availableWidth - cursorLeft;\r\n                    cursorLeft = this._clipTextLeft + this._availableWidth;\r\n                    this._markAsDirty();\r\n                }\r\n\r\n                let cursorTop = this._scrollTop + this._cursorInfo.currentLineIndex * this._fontOffset.height; //cursorTop distance from top to cursor start\r\n\r\n                if (cursorTop < this._clipTextTop) {\r\n                    this._scrollTop += this._clipTextTop - cursorTop;\r\n                    cursorTop = this._clipTextTop;\r\n                    this._markAsDirty();\r\n                } else if (cursorTop + this._fontOffset.height > this._clipTextTop + this._availableHeight) {\r\n                    this._scrollTop += this._clipTextTop + this._availableHeight - cursorTop - this._fontOffset.height;\r\n                    cursorTop = this._clipTextTop + this._availableHeight - this._fontOffset.height;\r\n                    this._markAsDirty();\r\n                }\r\n\r\n                if (!this._isTextHighlightOn) {\r\n                    context.fillRect(cursorLeft, cursorTop, 2, this._fontOffset.height);\r\n                }\r\n            }\r\n\r\n            this._resetBlinking();\r\n\r\n            //show the highlighted text\r\n            if (this._isTextHighlightOn) {\r\n                clearTimeout(this._blinkTimeout);\r\n\r\n                this._highlightedText = this.text.substring(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex);\r\n\r\n                context.globalAlpha = this._highligherOpacity;\r\n                context.fillStyle = this._textHighlightColor;\r\n\r\n                const startLineIndex = Math.min(this._cursorInfo.currentLineIndex, this._highlightCursorInfo.initialLineIndex);\r\n                const endLineIndex = Math.max(this._cursorInfo.currentLineIndex, this._highlightCursorInfo.initialLineIndex);\r\n\r\n                let highlightRootY = this._scrollTop + startLineIndex * this._fontOffset.height;\r\n\r\n                for (let i = startLineIndex; i <= endLineIndex; i++) {\r\n                    const line = this._lines[i];\r\n\r\n                    let highlightRootX = this._scrollLeft as number;\r\n                    switch (this._textHorizontalAlignment) {\r\n                        case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                            highlightRootX += 0;\r\n                            break;\r\n                        case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                            highlightRootX += width - line.width;\r\n                            break;\r\n                        case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                            highlightRootX += (width - line.width) / 2;\r\n                            break;\r\n                    }\r\n\r\n                    const begin = i === startLineIndex ? this._cursorInfo.relativeStartIndex : 0;\r\n                    const end = i === endLineIndex ? this._cursorInfo.relativeEndIndex : line.text.length;\r\n\r\n                    const leftOffsetWidth = context.measureText(line.text.substr(0, begin)).width;\r\n                    const selectedText = line.text.substring(begin, end);\r\n                    const hightlightWidth = context.measureText(selectedText).width;\r\n\r\n                    context.fillRect(highlightRootX + leftOffsetWidth, highlightRootY, hightlightWidth, this._fontOffset.height);\r\n\r\n                    highlightRootY += this._fontOffset.height;\r\n                }\r\n\r\n                if (this._cursorInfo.globalEndIndex === this._cursorInfo.globalStartIndex) {\r\n                    this._resetBlinking();\r\n                }\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n\r\n        // Border\r\n        if (this._thickness) {\r\n            if (this._isFocused) {\r\n                if (this.focusedColor) {\r\n                    context.strokeStyle = this.focusedColor;\r\n                }\r\n            } else {\r\n                if (this.color) {\r\n                    context.strokeStyle = this.color;\r\n                }\r\n            }\r\n\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.strokeRect(\r\n                this._currentMeasure.left + this._thickness / 2,\r\n                this._currentMeasure.top + this._thickness / 2,\r\n                this._currentMeasure.width - this._thickness,\r\n                this._currentMeasure.height - this._thickness\r\n            );\r\n        }\r\n    }\r\n\r\n    private _resetBlinking() {\r\n        clearTimeout(this._blinkTimeout);\r\n        this._blinkTimeout = <any>setTimeout(() => {\r\n            this._blinkIsEven = !this._blinkIsEven;\r\n            this._markAsDirty();\r\n        }, 500);\r\n    }\r\n\r\n    protected _applyStates(context: ICanvasRenderingContext): void {\r\n        super._applyStates(context);\r\n        if (this.outlineWidth) {\r\n            context.lineWidth = this.outlineWidth;\r\n            context.strokeStyle = this.outlineColor;\r\n        }\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\r\n            return false;\r\n        }\r\n\r\n        this._clickedCoordinateX = coordinates.x;\r\n        this._clickedCoordinateY = coordinates.y;\r\n\r\n        this._isTextHighlightOn = false;\r\n        this._highlightedText = \"\";\r\n        this._isPointerDown = true;\r\n        this._host._capturingControl[pointerId] = this;\r\n        if (this._host.focusedControl === this) {\r\n            // Move cursor\r\n            clearTimeout(this._blinkTimeout);\r\n            this._markAsDirty();\r\n            return true;\r\n        }\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        this._host.focusedControl = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    // for textselection\r\n    public _onPointerMove(target: Control, coordinates: Vector2, pointerId: number, pi: PointerInfoBase): void {\r\n        // Avoid Chromium-like beahavior when this event is fired right after onPointerDown\r\n        if (pi.event.movementX === 0 && pi.event.movementY === 0) {\r\n            return;\r\n        }\r\n\r\n        if (this._host.focusedControl === this && this._isPointerDown) {\r\n            this._clickedCoordinateX = coordinates.x;\r\n            this._clickedCoordinateY = coordinates.y;\r\n\r\n            if (!this._isTextHighlightOn) {\r\n                this._highlightCursorInfo.initialLineIndex = this._cursorInfo.currentLineIndex;\r\n                this._highlightCursorInfo.initialStartIndex = this._cursorInfo.globalStartIndex;\r\n                this._highlightCursorInfo.initialRelativeStartIndex = this._cursorInfo.relativeStartIndex;\r\n\r\n                this._isTextHighlightOn = true;\r\n            }\r\n\r\n            this._markAsDirty();\r\n        }\r\n        super._onPointerMove(target, coordinates, pointerId, pi);\r\n    }\r\n\r\n    /**\r\n     * Apply the correct position of cursor according to current modification\r\n     */\r\n    private _updateCursorPosition() {\r\n        if (!this._isFocused) {\r\n            return;\r\n        }\r\n\r\n        if (this._clickedCoordinateX && this._clickedCoordinateY) {\r\n            if (!this._isTextHighlightOn) {\r\n                this._cursorInfo = {\r\n                    globalStartIndex: 0,\r\n                    globalEndIndex: 0,\r\n                    relativeStartIndex: 0,\r\n                    relativeEndIndex: 0,\r\n                    currentLineIndex: 0,\r\n                };\r\n            }\r\n\r\n            let globalIndex = 0;\r\n            let relativeIndex = 0;\r\n\r\n            const lastClickedCoordinateY = this._clickedCoordinateY - (this._scrollTop as number);\r\n\r\n            const relativeCoordinateY = Math.floor(lastClickedCoordinateY / this._fontOffset.height);\r\n            this._cursorInfo.currentLineIndex = Math.min(Math.max(relativeCoordinateY, 0), this._lines.length - 1);\r\n\r\n            let currentSize = 0;\r\n\r\n            const relativeXPosition = this._clickedCoordinateX - (this._scrollLeft ?? 0);\r\n\r\n            let previousDist = 0;\r\n\r\n            for (let index = 0; index < this._cursorInfo.currentLineIndex; index++) {\r\n                const line = this._lines[index];\r\n                globalIndex += line.text.length + line.lineEnding.length;\r\n            }\r\n\r\n            while (currentSize < relativeXPosition && this._lines[this._cursorInfo.currentLineIndex].text.length > relativeIndex) {\r\n                relativeIndex++;\r\n                previousDist = Math.abs(relativeXPosition - currentSize);\r\n                currentSize = this._contextForBreakLines.measureText(this._lines[this._cursorInfo.currentLineIndex].text.substr(0, relativeIndex)).width;\r\n            }\r\n\r\n            // Find closest move\r\n            if (Math.abs(relativeXPosition - currentSize) > previousDist && relativeIndex > 0) {\r\n                relativeIndex--;\r\n            }\r\n\r\n            globalIndex += relativeIndex;\r\n\r\n            if (!this._isTextHighlightOn) {\r\n                this._cursorInfo.globalStartIndex = globalIndex;\r\n                this._cursorInfo.relativeStartIndex = relativeIndex;\r\n                this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n                this._cursorInfo.relativeEndIndex = this._cursorInfo.relativeStartIndex;\r\n            } else {\r\n                if (globalIndex < this._highlightCursorInfo.initialStartIndex) {\r\n                    this._cursorInfo.globalStartIndex = globalIndex;\r\n                    this._cursorInfo.relativeStartIndex = relativeIndex;\r\n                    this._cursorInfo.globalEndIndex = this._highlightCursorInfo.initialStartIndex;\r\n                    this._cursorInfo.relativeEndIndex = this._highlightCursorInfo.initialRelativeStartIndex;\r\n                } else {\r\n                    this._cursorInfo.globalStartIndex = this._highlightCursorInfo.initialStartIndex;\r\n                    this._cursorInfo.relativeStartIndex = this._highlightCursorInfo.initialRelativeStartIndex;\r\n                    this._cursorInfo.globalEndIndex = globalIndex;\r\n                    this._cursorInfo.relativeEndIndex = relativeIndex;\r\n                }\r\n            }\r\n\r\n            // Avoid the caret during highlighting\r\n            this._blinkIsEven = this._isTextHighlightOn;\r\n            this._clickedCoordinateX = null;\r\n            this._clickedCoordinateY = null;\r\n        } else {\r\n            // Standard behavior same as Current line is at least above the initial highlight index\r\n            this._cursorInfo.relativeStartIndex = 0;\r\n            this._cursorInfo.currentLineIndex = 0;\r\n\r\n            let lineLength = this._lines[this._cursorInfo.currentLineIndex].text.length + this._lines[this._cursorInfo.currentLineIndex].lineEnding.length;\r\n            let tmpLength = 0;\r\n\r\n            while (tmpLength + lineLength <= this._cursorInfo.globalStartIndex) {\r\n                tmpLength += lineLength;\r\n\r\n                if (this._cursorInfo.currentLineIndex < this._lines.length - 1) {\r\n                    this._cursorInfo.currentLineIndex++;\r\n                    lineLength = this._lines[this._cursorInfo.currentLineIndex].text.length + this._lines[this._cursorInfo.currentLineIndex].lineEnding.length;\r\n                }\r\n            }\r\n\r\n            this._cursorInfo.relativeStartIndex = this._cursorInfo.globalStartIndex - tmpLength;\r\n\r\n            if (this._highlightCursorInfo.initialStartIndex !== -1 && this._cursorInfo.globalStartIndex >= this._highlightCursorInfo.initialStartIndex) {\r\n                // Current line is at least below the initial highlight index\r\n                while (tmpLength + lineLength <= this._cursorInfo.globalEndIndex) {\r\n                    tmpLength += lineLength;\r\n\r\n                    if (this._cursorInfo.currentLineIndex < this._lines.length - 1) {\r\n                        this._cursorInfo.currentLineIndex++;\r\n                        lineLength = this._lines[this._cursorInfo.currentLineIndex].text.length + this._lines[this._cursorInfo.currentLineIndex].lineEnding.length;\r\n                    }\r\n                }\r\n\r\n                this._cursorInfo.relativeEndIndex = this._cursorInfo.globalEndIndex - tmpLength;\r\n            } else if (!this._isTextHighlightOn) {\r\n                this._cursorInfo.relativeEndIndex = this._cursorInfo.relativeStartIndex;\r\n                this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update all values of cursor information based on cursorIndex value\r\n     *\r\n     * @param offset The index to take care of\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected _updateValueFromCursorIndex(offset: number) {\r\n        // Override to avoid parent behavior during _onPointerMove\r\n    }\r\n\r\n    /**\r\n     * Select the word immediatly under the cursor on double click\r\n     *\r\n     * @param _evt Pointer informations of double click\r\n     * @internal\r\n     */\r\n    protected _processDblClick(_evt: PointerInfo) {\r\n        //pre-find the start and end index of the word under cursor, speeds up the rendering\r\n        let moveLeft, moveRight;\r\n        do {\r\n            moveLeft = this._cursorInfo.globalStartIndex > 0 && this._textWrapper.isWord(this._cursorInfo.globalStartIndex - 1) ? --this._cursorInfo.globalStartIndex : 0;\r\n            moveRight =\r\n                this._cursorInfo.globalEndIndex < this._textWrapper.length && this._textWrapper.isWord(this._cursorInfo.globalEndIndex) ? ++this._cursorInfo.globalEndIndex : 0;\r\n        } while (moveLeft || moveRight);\r\n\r\n        this._highlightCursorInfo.initialLineIndex = this._cursorInfo.currentLineIndex;\r\n        this._highlightCursorInfo.initialStartIndex = this._cursorInfo.globalStartIndex;\r\n\r\n        this.onTextHighlightObservable.notifyObservers(this);\r\n\r\n        this._isTextHighlightOn = true;\r\n        this._blinkIsEven = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** @internal */\r\n    protected _selectAllText() {\r\n        this._isTextHighlightOn = true;\r\n        this._blinkIsEven = true;\r\n\r\n        this._highlightCursorInfo = {\r\n            initialStartIndex: 0,\r\n            initialRelativeStartIndex: 0,\r\n            initialLineIndex: 0,\r\n        };\r\n\r\n        this._cursorInfo = {\r\n            globalStartIndex: 0,\r\n            globalEndIndex: this._textWrapper.length,\r\n            relativeEndIndex: this._lines[this._lines.length - 1].text.length,\r\n            relativeStartIndex: 0,\r\n            currentLineIndex: this._lines.length - 1,\r\n        };\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    public dipose() {\r\n        super.dispose();\r\n\r\n        this.onLinesReadyObservable.clear();\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.InputTextArea\", InputTextArea);\r\n","import { InputText } from \"./inputText\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { TextWrapper } from \"./textWrapper\";\r\n\r\n/**\r\n * Class used to create a password control\r\n */\r\nexport class InputPassword extends InputText {\r\n    protected _getTypeName(): string {\r\n        return \"InputPassword\";\r\n    }\r\n\r\n    protected _beforeRenderText(textWrapper: TextWrapper): TextWrapper {\r\n        const pwdTextWrapper = new TextWrapper();\r\n        let txt = \"\";\r\n        for (let i = 0; i < textWrapper.length; i++) {\r\n            txt += \"\\u2022\";\r\n        }\r\n        pwdTextWrapper.text = txt;\r\n        return pwdTextWrapper;\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.InputPassword\", InputPassword);\r\n","import type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Vector3, Matrix } from \"core/Maths/math.vector\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\nimport { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport type { Measure } from \"../measure\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/** Class used to render 2D lines */\r\nexport class Line extends Control {\r\n    private _lineWidth = 1;\r\n    /** @internal */\r\n    public _x1 = new ValueAndUnit(0);\r\n    /** @internal */\r\n    public _y1 = new ValueAndUnit(0);\r\n    /** @internal */\r\n    public _x2 = new ValueAndUnit(0);\r\n    /** @internal */\r\n    public _y2 = new ValueAndUnit(0);\r\n    private _dash = new Array<number>();\r\n    private _connectedControl: Control;\r\n    private _connectedControlDirtyObserver: Nullable<Observer<Control>>;\r\n\r\n    /** Gets or sets the dash pattern */\r\n    @serialize()\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the control connected with the line end */\r\n    public get connectedControl(): Control {\r\n        return this._connectedControl;\r\n    }\r\n\r\n    public set connectedControl(value: Control) {\r\n        if (this._connectedControl === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._connectedControlDirtyObserver && this._connectedControl) {\r\n            this._connectedControl.onDirtyObservable.remove(this._connectedControlDirtyObserver);\r\n            this._connectedControlDirtyObserver = null;\r\n        }\r\n\r\n        if (value) {\r\n            this._connectedControlDirtyObserver = value.onDirtyObservable.add(() => this._markAsDirty());\r\n        }\r\n\r\n        this._connectedControl = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets start coordinates on X axis */\r\n    @serialize()\r\n    public get x1(): string | number {\r\n        return this._x1.toString(this._host);\r\n    }\r\n\r\n    public set x1(value: string | number) {\r\n        if (this._x1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets start coordinates on Y axis */\r\n    @serialize()\r\n    public get y1(): string | number {\r\n        return this._y1.toString(this._host);\r\n    }\r\n\r\n    public set y1(value: string | number) {\r\n        if (this._y1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on X axis */\r\n    @serialize()\r\n    public get x2(): string | number {\r\n        return this._x2.toString(this._host);\r\n    }\r\n\r\n    public set x2(value: string | number) {\r\n        if (this._x2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on Y axis */\r\n    @serialize()\r\n    public get y2(): string | number {\r\n        return this._y2.toString(this._host);\r\n    }\r\n\r\n    public set y2(value: string | number) {\r\n        if (this._y2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    @serialize()\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets horizontal alignment */\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    /** Gets or sets vertical alignment */\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    /** @internal */\r\n    public get _effectiveX2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerX : 0) + this._x2.getValue(this._host);\r\n    }\r\n\r\n    /** @internal */\r\n    public get _effectiveY2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerY : 0) + this._y2.getValue(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Line\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this._automaticSize = true;\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Line\";\r\n    }\r\n\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        context.strokeStyle = this._getColor(context);\r\n        context.lineWidth = this._lineWidth;\r\n        context.setLineDash(this._dash);\r\n\r\n        context.beginPath();\r\n        context.moveTo(this._cachedParentMeasure.left + this._x1.getValue(this._host), this._cachedParentMeasure.top + this._y1.getValue(this._host));\r\n\r\n        context.lineTo(this._cachedParentMeasure.left + this._effectiveX2, this._cachedParentMeasure.top + this._effectiveY2);\r\n        context.stroke();\r\n\r\n        context.restore();\r\n    }\r\n\r\n    public _measure(): void {\r\n        // Width / Height\r\n        this._currentMeasure.width = Math.abs(this._x1.getValue(this._host) - this._effectiveX2) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._y1.getValue(this._host) - this._effectiveY2) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure): void {\r\n        this._currentMeasure.left = parentMeasure.left + Math.min(this._x1.getValue(this._host), this._effectiveX2) - this._lineWidth / 2;\r\n        this._currentMeasure.top = parentMeasure.top + Math.min(this._y1.getValue(this._host), this._effectiveY2) - this._lineWidth / 2;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line given 3D cartesian coordinates.\r\n     * @param position Targeted world position\r\n     * @param scene Scene\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene, end: boolean = false): void {\r\n        if (!this._host || this.parent !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        const globalViewport = this._host._getGlobalViewport();\r\n        const projectedPosition = Vector3.Project(position, Matrix.IdentityReadOnly, scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition, end);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line to a position in screen absolute space.\r\n     * @param projectedPosition Position in screen absolute space (X, Y)\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3, end: boolean = false): void {\r\n        const x: string = projectedPosition.x + this._linkOffsetX.getValue(this._host) + \"px\";\r\n        const y: string = projectedPosition.y + this._linkOffsetY.getValue(this._host) + \"px\";\r\n\r\n        if (end) {\r\n            this.x2 = x;\r\n            this.y2 = y;\r\n            this._x2.ignoreAdaptiveScaling = true;\r\n            this._y2.ignoreAdaptiveScaling = true;\r\n        } else {\r\n            this.x1 = x;\r\n            this.y1 = y;\r\n            this._x1.ignoreAdaptiveScaling = true;\r\n            this._y1.ignoreAdaptiveScaling = true;\r\n        }\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Line\", Line);\r\n","import type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport { Epsilon } from \"core/Maths/math.constants\";\r\nimport type { Camera } from \"core/Cameras/camera\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\n\r\nimport type { MultiLine } from \"./controls/multiLine\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\nimport type { Control } from \"./controls/control\";\r\n\r\n/**\r\n * Class used to store a point for a MultiLine object.\r\n * The point can be pure 2D coordinates, a mesh or a control\r\n */\r\nexport class MultiLinePoint {\r\n    private _multiLine: MultiLine;\r\n\r\n    private _x: ValueAndUnit;\r\n    private _y: ValueAndUnit;\r\n    private _control: Nullable<Control>;\r\n    private _mesh: Nullable<AbstractMesh>;\r\n\r\n    private _controlObserver: Nullable<Observer<Control>>;\r\n    private _meshObserver: Nullable<Observer<Camera>>;\r\n\r\n    /** @internal */\r\n    public _point: Vector3;\r\n\r\n    /**\r\n     * Creates a new MultiLinePoint\r\n     * @param multiLine defines the source MultiLine object\r\n     */\r\n    constructor(multiLine: MultiLine) {\r\n        this._multiLine = multiLine;\r\n\r\n        this._x = new ValueAndUnit(0);\r\n        this._y = new ValueAndUnit(0);\r\n\r\n        this._point = new Vector3(0, 0, 0);\r\n    }\r\n\r\n    /** Gets or sets x coordinate */\r\n    public get x(): string | number {\r\n        return this._x.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set x(value: string | number) {\r\n        if (this._x.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets y coordinate */\r\n    public get y(): string | number {\r\n        return this._y.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set y(value: string | number) {\r\n        if (this._y.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the control associated with this point */\r\n    public get control(): Nullable<Control> {\r\n        return this._control;\r\n    }\r\n\r\n    public set control(value: Nullable<Control>) {\r\n        if (this._control === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._control && this._controlObserver) {\r\n            this._control.onDirtyObservable.remove(this._controlObserver);\r\n\r\n            this._controlObserver = null;\r\n        }\r\n\r\n        this._control = value;\r\n\r\n        if (this._control) {\r\n            this._controlObserver = this._control.onDirtyObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the mesh associated with this point */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        return this._mesh;\r\n    }\r\n\r\n    public set mesh(value: Nullable<AbstractMesh>) {\r\n        if (this._mesh === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._mesh && this._meshObserver) {\r\n            this._mesh.getScene().onAfterCameraRenderObservable.remove(this._meshObserver);\r\n        }\r\n\r\n        this._mesh = value;\r\n\r\n        if (this._mesh) {\r\n            this._meshObserver = this._mesh.getScene().onAfterCameraRenderObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Resets links */\r\n    public resetLinks(): void {\r\n        this.control = null;\r\n        this.mesh = null;\r\n    }\r\n\r\n    /**\r\n     * Gets a translation vector with Z component\r\n     * @returns the translation vector\r\n     */\r\n    public translate(): Vector3 {\r\n        this._point = this._translatePoint();\r\n\r\n        return this._point;\r\n    }\r\n\r\n    private _translatePoint(): Vector3 {\r\n        if (this._mesh != null) {\r\n            return this._multiLine._host.getProjectedPositionWithZ(this._mesh.getBoundingInfo().boundingSphere.center, this._mesh.getWorldMatrix());\r\n        } else if (this._control != null) {\r\n            return new Vector3(this._control.centerX, this._control.centerY, 1 - Epsilon);\r\n        } else {\r\n            const host: any = this._multiLine._host as any;\r\n\r\n            const xValue: number = this._x.getValueInPixel(host, Number(host._canvas.width));\r\n            const yValue: number = this._y.getValueInPixel(host, Number(host._canvas.height));\r\n\r\n            return new Vector3(xValue, yValue, 1 - Epsilon);\r\n        }\r\n    }\r\n\r\n    /** Release associated resources */\r\n    public dispose(): void {\r\n        this.resetLinks();\r\n    }\r\n}\r\n","import type { Nullable } from \"core/types\";\r\nimport { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\n\r\nimport { Control } from \"./control\";\r\nimport { MultiLinePoint } from \"../multiLinePoint\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { Vector3 } from \"core/Maths/math.vector\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/**\r\n * Class used to create multi line control\r\n */\r\nexport class MultiLine extends Control {\r\n    private _lineWidth: number = 1;\r\n    private _dash: number[];\r\n    private _points: Nullable<MultiLinePoint>[];\r\n\r\n    private _minX: Nullable<number>;\r\n    private _minY: Nullable<number>;\r\n    private _maxX: Nullable<number>;\r\n    private _maxY: Nullable<number>;\r\n\r\n    /**\r\n     * Creates a new MultiLine\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this._automaticSize = true;\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        this._dash = [];\r\n        this._points = [];\r\n    }\r\n\r\n    /** Gets or sets dash pattern */\r\n    @serialize()\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets point stored at specified index\r\n     * @param index defines the index to look for\r\n     * @returns the requested point if found\r\n     */\r\n    public getAt(index: number): MultiLinePoint {\r\n        if (!this._points[index]) {\r\n            this._points[index] = new MultiLinePoint(this);\r\n        }\r\n\r\n        return this._points[index] as MultiLinePoint;\r\n    }\r\n\r\n    /** Function called when a point is updated */\r\n    public onPointUpdate = (): void => {\r\n        this._markAsDirty();\r\n    };\r\n\r\n    /**\r\n     * Adds new points to the point collection\r\n     * @param items defines the list of items (mesh, control or 2d coordinates) to add\r\n     * @returns the list of created MultiLinePoint\r\n     */\r\n    public add(...items: (AbstractMesh | Control | { x: string | number; y: string | number })[]): MultiLinePoint[] {\r\n        return items.map((item) => this.push(item));\r\n    }\r\n\r\n    /**\r\n     * Adds a new point to the point collection\r\n     * @param item defines the item (mesh, control or 2d coordinates) to add\r\n     * @returns the created MultiLinePoint\r\n     */\r\n    public push(item?: AbstractMesh | Control | { x: string | number; y: string | number }): MultiLinePoint {\r\n        const point: MultiLinePoint = this.getAt(this._points.length);\r\n\r\n        if (item == null) {\r\n            return point;\r\n        }\r\n\r\n        if (item instanceof AbstractMesh) {\r\n            point.mesh = item;\r\n        } else if (item instanceof Control) {\r\n            point.control = item;\r\n        } else if (item.x != null && item.y != null) {\r\n            point.x = item.x;\r\n            point.y = item.y;\r\n        }\r\n\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * Remove a specific value or point from the active point collection\r\n     * @param value defines the value or point to remove\r\n     */\r\n    public remove(value: number | MultiLinePoint): void {\r\n        let index: number;\r\n\r\n        if (value instanceof MultiLinePoint) {\r\n            index = this._points.indexOf(value);\r\n\r\n            if (index === -1) {\r\n                return;\r\n            }\r\n        } else {\r\n            index = value;\r\n        }\r\n\r\n        const point: Nullable<MultiLinePoint> = this._points[index];\r\n\r\n        if (!point) {\r\n            return;\r\n        }\r\n\r\n        point.dispose();\r\n\r\n        this._points.splice(index, 1);\r\n    }\r\n\r\n    /**\r\n     * Resets this object to initial state (no point)\r\n     */\r\n    public reset(): void {\r\n        while (this._points.length > 0) {\r\n            this.remove(this._points.length - 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets all links\r\n     */\r\n    public resetLinks(): void {\r\n        this._points.forEach((point) => {\r\n            if (point != null) {\r\n                point.resetLinks();\r\n            }\r\n        });\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MultiLine\";\r\n    }\r\n\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n\r\n        context.strokeStyle = this.color;\r\n        context.lineWidth = this._lineWidth;\r\n        context.setLineDash(this._dash);\r\n\r\n        context.beginPath();\r\n\r\n        let first: boolean = true; //first index is not necessarily 0\r\n        let previousPoint: Vector3;\r\n\r\n        this._points.forEach((point) => {\r\n            if (!point) {\r\n                return;\r\n            }\r\n\r\n            if (first) {\r\n                context.moveTo(point._point.x, point._point.y);\r\n\r\n                first = false;\r\n            } else {\r\n                if (point._point.z < 1 && previousPoint.z < 1) {\r\n                    context.lineTo(point._point.x, point._point.y);\r\n                } else {\r\n                    context.moveTo(point._point.x, point._point.y);\r\n                }\r\n            }\r\n            previousPoint = point._point;\r\n        });\r\n\r\n        context.stroke();\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(): void {\r\n        this._minX = null;\r\n        this._minY = null;\r\n        this._maxX = null;\r\n        this._maxY = null;\r\n\r\n        this._points.forEach((point) => {\r\n            if (!point) {\r\n                return;\r\n            }\r\n\r\n            point.translate();\r\n\r\n            if (this._minX == null || point._point.x < this._minX) {\r\n                this._minX = point._point.x;\r\n            }\r\n            if (this._minY == null || point._point.y < this._minY) {\r\n                this._minY = point._point.y;\r\n            }\r\n            if (this._maxX == null || point._point.x > this._maxX) {\r\n                this._maxX = point._point.x;\r\n            }\r\n            if (this._maxY == null || point._point.y > this._maxY) {\r\n                this._maxY = point._point.y;\r\n            }\r\n        });\r\n\r\n        if (this._minX == null) {\r\n            this._minX = 0;\r\n        }\r\n        if (this._minY == null) {\r\n            this._minY = 0;\r\n        }\r\n        if (this._maxX == null) {\r\n            this._maxX = 0;\r\n        }\r\n        if (this._maxY == null) {\r\n            this._maxY = 0;\r\n        }\r\n    }\r\n\r\n    public _measure(): void {\r\n        if (this._minX == null || this._maxX == null || this._minY == null || this._maxY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.width = Math.abs(this._maxX - this._minX) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._maxY - this._minY) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(): void {\r\n        if (this._minX == null || this._minY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.left = this._minX - this._lineWidth / 2;\r\n        this._currentMeasure.top = this._minY - this._lineWidth / 2;\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.reset();\r\n\r\n        super.dispose();\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.MultiLine\", MultiLine);\r\n","import { Observable } from \"core/Misc/observable\";\r\nimport type { Vector2 } from \"core/Maths/math.vector\";\r\n\r\nimport { Control } from \"./control\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/**\r\n * Class used to create radio button controls\r\n */\r\nexport class RadioButton extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    @serialize()\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets group name */\r\n    @serialize()\r\n    public group = \"\";\r\n\r\n    /** Observable raised when isChecked is changed */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    @serialize()\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    @serialize()\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    @serialize()\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n\r\n        if (this._isChecked && this._host) {\r\n            // Update all controls from same group\r\n            this._host.executeOnAllControls((control) => {\r\n                if (control === this) {\r\n                    return;\r\n                }\r\n\r\n                if ((<any>control).group === undefined) {\r\n                    return;\r\n                }\r\n                const childRadio = <RadioButton>control;\r\n                if (childRadio.group === this.group) {\r\n                    childRadio.isChecked = false;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new RadioButton\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"RadioButton\";\r\n    }\r\n\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        const actualWidth = this._currentMeasure.width - this._thickness;\r\n        const actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        // Outer\r\n        Control.drawEllipse(\r\n            this._currentMeasure.left + this._currentMeasure.width / 2,\r\n            this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._thickness / 2,\r\n            this._currentMeasure.height / 2 - this._thickness / 2,\r\n            context\r\n        );\r\n\r\n        context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n        context.fill();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        context.strokeStyle = this.color;\r\n        context.lineWidth = this._thickness;\r\n\r\n        context.stroke();\r\n\r\n        // Inner\r\n        if (this._isChecked) {\r\n            context.fillStyle = this._isEnabled ? this.color : this._disabledColor;\r\n            const offsetWidth = actualWidth * this._checkSizeRatio;\r\n            const offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n            Control.drawEllipse(\r\n                this._currentMeasure.left + this._currentMeasure.width / 2,\r\n                this._currentMeasure.top + this._currentMeasure.height / 2,\r\n                offsetWidth / 2 - this._thickness / 2,\r\n                offseHeight / 2 - this._thickness / 2,\r\n                context\r\n            );\r\n\r\n            context.fill();\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isReadOnly) {\r\n            return true;\r\n        }\r\n\r\n        if (!this.isChecked) {\r\n            this.isChecked = true;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a radio button with a header\r\n     * @param title defines the label to use for the header\r\n     * @param group defines the group to use for the radio button\r\n     * @param isChecked defines the initial state of the radio button\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the radio button and a textBlock\r\n     */\r\n    public static AddRadioButtonWithHeader(title: string, group: string, isChecked: boolean, onValueChanged: (button: RadioButton, value: boolean) => void): StackPanel {\r\n        const panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        const radio = new RadioButton();\r\n        radio.width = \"20px\";\r\n        radio.height = \"20px\";\r\n        radio.isChecked = isChecked;\r\n        radio.color = \"green\";\r\n        radio.group = group;\r\n        radio.onIsCheckedChangedObservable.add((value) => onValueChanged(radio, value));\r\n        panel.addControl(radio);\r\n\r\n        const header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header);\r\n\r\n        return panel;\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.RadioButton\", RadioButton);\r\n","import { Observable } from \"core/Misc/observable\";\r\nimport type { Vector2 } from \"core/Maths/math.vector\";\r\n\r\nimport { Control } from \"../control\";\r\nimport { ValueAndUnit } from \"../../valueAndUnit\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class BaseSlider extends Control {\r\n    protected _thumbWidth = new ValueAndUnit(20, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _minimum = 0;\r\n    private _maximum = 100;\r\n    private _value = 50;\r\n    private _isVertical = false;\r\n    protected _barOffset = new ValueAndUnit(5, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _isThumbClamped = false;\r\n    protected _displayThumb = true;\r\n    private _step = 0;\r\n\r\n    private _lastPointerDownId = -1;\r\n\r\n    // Shared rendering info\r\n    protected _effectiveBarOffset = 0;\r\n    protected _renderLeft: number;\r\n    protected _renderTop: number;\r\n    protected _renderWidth: number;\r\n    protected _renderHeight: number;\r\n    protected _backgroundBoxLength: number;\r\n    protected _backgroundBoxThickness: number;\r\n    protected _effectiveThumbThickness: number;\r\n\r\n    /** Observable raised when the slider value changes */\r\n    public onValueChangedObservable = new Observable<number>();\r\n\r\n    /** Gets or sets a boolean indicating if the thumb must be rendered */\r\n    @serialize()\r\n    public get displayThumb(): boolean {\r\n        return this._displayThumb;\r\n    }\r\n\r\n    public set displayThumb(value: boolean) {\r\n        if (this._displayThumb === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayThumb = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a step to apply to values (0 by default) */\r\n    @serialize()\r\n    public get step(): number {\r\n        return this._step;\r\n    }\r\n\r\n    public set step(value: number) {\r\n        if (this._step === value) {\r\n            return;\r\n        }\r\n\r\n        this._step = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets main bar offset (ie. the margin applied to the value bar) */\r\n    @serialize()\r\n    public get barOffset(): string | number {\r\n        return this._barOffset.toString(this._host);\r\n    }\r\n\r\n    /** Gets main bar offset in pixels*/\r\n    public get barOffsetInPixels(): number {\r\n        return this._barOffset.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set barOffset(value: string | number) {\r\n        if (this._barOffset.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._barOffset.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets thumb width */\r\n    @serialize()\r\n    public get thumbWidth(): string | number {\r\n        return this._thumbWidth.toString(this._host);\r\n    }\r\n\r\n    /** Gets thumb width in pixels */\r\n    public get thumbWidthInPixels(): number {\r\n        return this._thumbWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set thumbWidth(value: string | number) {\r\n        if (this._thumbWidth.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._thumbWidth.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets minimum value */\r\n    @serialize()\r\n    public get minimum(): number {\r\n        return this._minimum;\r\n    }\r\n\r\n    public set minimum(value: number) {\r\n        if (this._minimum === value) {\r\n            return;\r\n        }\r\n\r\n        this._minimum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets maximum value */\r\n    @serialize()\r\n    public get maximum(): number {\r\n        return this._maximum;\r\n    }\r\n\r\n    public set maximum(value: number) {\r\n        if (this._maximum === value) {\r\n            return;\r\n        }\r\n\r\n        this._maximum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets current value */\r\n    @serialize()\r\n    public get value(): number {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: number) {\r\n        value = Math.max(Math.min(value, this._maximum), this._minimum);\r\n\r\n        if (this._value === value) {\r\n            return;\r\n        }\r\n\r\n        this._value = value;\r\n        this._markAsDirty();\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /**Gets or sets a boolean indicating if the slider should be vertical or horizontal */\r\n    @serialize()\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating if the thumb can go over main bar extends */\r\n    @serialize()\r\n    public get isThumbClamped(): boolean {\r\n        return this._isThumbClamped;\r\n    }\r\n\r\n    public set isThumbClamped(value: boolean) {\r\n        if (this._isThumbClamped === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbClamped = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new BaseSlider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"BaseSlider\";\r\n    }\r\n\r\n    protected _getThumbPosition() {\r\n        if (this.isVertical) {\r\n            return ((this.maximum - this.value) / (this.maximum - this.minimum)) * this._backgroundBoxLength;\r\n        }\r\n\r\n        return ((this.value - this.minimum) / (this.maximum - this.minimum)) * this._backgroundBoxLength;\r\n    }\r\n\r\n    protected _getThumbThickness(type: string): number {\r\n        let thumbThickness = 0;\r\n        switch (type) {\r\n            case \"circle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.max(this._thumbWidth.getValue(this._host), this._backgroundBoxThickness);\r\n                } else {\r\n                    thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n                }\r\n                break;\r\n            case \"rectangle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.min(this._thumbWidth.getValue(this._host), this._backgroundBoxThickness);\r\n                } else {\r\n                    thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n                }\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n    protected _prepareRenderingData(type: string) {\r\n        // Main bar\r\n        this._effectiveBarOffset = 0;\r\n        this._renderLeft = this._currentMeasure.left;\r\n        this._renderTop = this._currentMeasure.top;\r\n        this._renderWidth = this._currentMeasure.width;\r\n        this._renderHeight = this._currentMeasure.height;\r\n\r\n        this._backgroundBoxLength = Math.max(this._currentMeasure.width, this._currentMeasure.height);\r\n        this._backgroundBoxThickness = Math.min(this._currentMeasure.width, this._currentMeasure.height);\r\n        this._effectiveThumbThickness = this._getThumbThickness(type);\r\n\r\n        if (this.displayThumb) {\r\n            this._backgroundBoxLength -= this._effectiveThumbThickness;\r\n        }\r\n        //throw error when height is less than width for vertical slider\r\n        if (this.isVertical && this._currentMeasure.height < this._currentMeasure.width) {\r\n            console.error(\"Height should be greater than width\");\r\n            return;\r\n        }\r\n        if (this._barOffset.isPixel) {\r\n            this._effectiveBarOffset = Math.min(this._barOffset.getValue(this._host), this._backgroundBoxThickness);\r\n        } else {\r\n            this._effectiveBarOffset = this._backgroundBoxThickness * this._barOffset.getValue(this._host);\r\n        }\r\n\r\n        this._backgroundBoxThickness -= this._effectiveBarOffset * 2;\r\n\r\n        if (this.isVertical) {\r\n            this._renderLeft += this._effectiveBarOffset;\r\n            if (!this.isThumbClamped && this.displayThumb) {\r\n                this._renderTop += this._effectiveThumbThickness / 2;\r\n            }\r\n\r\n            this._renderHeight = this._backgroundBoxLength;\r\n            this._renderWidth = this._backgroundBoxThickness;\r\n        } else {\r\n            this._renderTop += this._effectiveBarOffset;\r\n            if (!this.isThumbClamped && this.displayThumb) {\r\n                this._renderLeft += this._effectiveThumbThickness / 2;\r\n            }\r\n            this._renderHeight = this._backgroundBoxThickness;\r\n            this._renderWidth = this._backgroundBoxLength;\r\n        }\r\n    }\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        let value: number;\r\n        if (this._isVertical) {\r\n            value = this._minimum + (1 - (y - this._currentMeasure.top) / this._currentMeasure.height) * (this._maximum - this._minimum);\r\n        } else {\r\n            value = this._minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this._maximum - this._minimum);\r\n        }\r\n        this.value = this._step ? Math.round(value / this._step) * this._step : value;\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isReadOnly) {\r\n            return true;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        this._host._capturingControl[pointerId] = this;\r\n        this._lastPointerDownId = pointerId;\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2, pointerId: number, pi: PointerInfoBase): void {\r\n        // Only listen to pointer move events coming from the last pointer to click on the element (To support dual vr controller interaction)\r\n        if (pointerId != this._lastPointerDownId) {\r\n            return;\r\n        }\r\n\r\n        if (this._pointerIsDown && !this.isReadOnly) {\r\n            this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates, pointerId, pi);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n\r\n    public _onCanvasBlur(): void {\r\n        this._forcePointerUp();\r\n        super._onCanvasBlur();\r\n    }\r\n}\r\n","import { BaseSlider } from \"./baseSlider\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { BaseGradient } from \"../gradient/BaseGradient\";\r\nimport type { AdvancedDynamicTexture } from \"gui/2D/advancedDynamicTexture\";\r\nimport { Tools } from \"core/Misc/tools\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class Slider extends BaseSlider {\r\n    private _background = \"black\";\r\n    private _borderColor = \"white\";\r\n    private _thumbColor = \"\";\r\n    private _isThumbCircle = false;\r\n    protected _displayValueBar = true;\r\n    private _backgroundGradient: Nullable<BaseGradient> = null;\r\n\r\n    /** Gets or sets a boolean indicating if the value bar must be rendered */\r\n    @serialize()\r\n    public get displayValueBar(): boolean {\r\n        return this._displayValueBar;\r\n    }\r\n\r\n    public set displayValueBar(value: boolean) {\r\n        if (this._displayValueBar === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayValueBar = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets border color */\r\n    @serialize()\r\n    public get borderColor(): string {\r\n        return this._borderColor;\r\n    }\r\n\r\n    public set borderColor(value: string) {\r\n        if (this._borderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._borderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    @serialize()\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background gradient */\r\n    public get backgroundGradient(): Nullable<BaseGradient> {\r\n        return this._backgroundGradient;\r\n    }\r\n\r\n    public set backgroundGradient(value: Nullable<BaseGradient>) {\r\n        if (this._backgroundGradient === value) {\r\n            return;\r\n        }\r\n\r\n        this._backgroundGradient = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets thumb's color */\r\n    @serialize()\r\n    public get thumbColor(): string {\r\n        return this._thumbColor;\r\n    }\r\n\r\n    public set thumbColor(value: string) {\r\n        if (this._thumbColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the thumb should be round or square */\r\n    @serialize()\r\n    public get isThumbCircle(): boolean {\r\n        return this._isThumbCircle;\r\n    }\r\n\r\n    public set isThumbCircle(value: boolean) {\r\n        if (this._isThumbCircle === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbCircle = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Slider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Slider\";\r\n    }\r\n\r\n    protected _getBackgroundColor(context: ICanvasRenderingContext) {\r\n        return this._backgroundGradient ? this._backgroundGradient.getCanvasGradient(context) : this._background;\r\n    }\r\n\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        this._prepareRenderingData(this.isThumbCircle ? \"circle\" : \"rectangle\");\r\n        let left = this._renderLeft;\r\n        let top = this._renderTop;\r\n        const width = this._renderWidth;\r\n        const height = this._renderHeight;\r\n\r\n        let radius = 0;\r\n\r\n        if (this.isThumbClamped && this.isThumbCircle) {\r\n            if (this.isVertical) {\r\n                top += this._effectiveThumbThickness / 2;\r\n            } else {\r\n                left += this._effectiveThumbThickness / 2;\r\n            }\r\n\r\n            radius = this._backgroundBoxThickness / 2;\r\n        } else {\r\n            radius = (this._effectiveThumbThickness - this._effectiveBarOffset) / 2;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        const thumbPosition = this._getThumbPosition();\r\n        context.fillStyle = this._getBackgroundColor(context);\r\n\r\n        if (this.isVertical) {\r\n            if (this.isThumbClamped) {\r\n                if (this.isThumbCircle) {\r\n                    context.beginPath();\r\n                    context.arc(left + this._backgroundBoxThickness / 2, top, radius, Math.PI, 2 * Math.PI);\r\n                    context.fill();\r\n                    context.fillRect(left, top, width, height);\r\n                } else {\r\n                    context.fillRect(left, top, width, height + this._effectiveThumbThickness);\r\n                }\r\n            } else {\r\n                context.fillRect(left, top, width, height);\r\n            }\r\n        } else {\r\n            if (this.isThumbClamped) {\r\n                if (this.isThumbCircle) {\r\n                    context.beginPath();\r\n                    context.arc(left + this._backgroundBoxLength, top + this._backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);\r\n                    context.fill();\r\n                    context.fillRect(left, top, width, height);\r\n                } else {\r\n                    context.fillRect(left, top, width + this._effectiveThumbThickness, height);\r\n                }\r\n            } else {\r\n                context.fillRect(left, top, width, height);\r\n            }\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        // Value bar\r\n        context.fillStyle = this._getColor(context);\r\n        if (this._displayValueBar) {\r\n            if (this.isVertical) {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + this._backgroundBoxThickness / 2, top + this._backgroundBoxLength, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                    } else {\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);\r\n                    }\r\n                } else {\r\n                    context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                }\r\n            } else {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left, top + this._backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    } else {\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                } else {\r\n                    context.fillRect(left, top, thumbPosition, height);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Thumb\r\n        context.fillStyle = this._thumbColor || this._getColor(context);\r\n        if (this.displayThumb) {\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n            if (this._isThumbCircle) {\r\n                context.beginPath();\r\n                if (this.isVertical) {\r\n                    context.arc(left + this._backgroundBoxThickness / 2, top + thumbPosition, radius, 0, 2 * Math.PI);\r\n                } else {\r\n                    context.arc(left + thumbPosition, top + this._backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);\r\n                }\r\n                context.fill();\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                context.stroke();\r\n            } else {\r\n                if (this.isVertical) {\r\n                    context.fillRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n                } else {\r\n                    context.fillRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                if (this.isVertical) {\r\n                    context.strokeRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n                } else {\r\n                    context.strokeRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    public serialize(serializationObject: any) {\r\n        super.serialize(serializationObject);\r\n\r\n        if (this.backgroundGradient) {\r\n            serializationObject.backgroundGradient = {};\r\n            this.backgroundGradient.serialize(serializationObject.backgroundGradient);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _parseFromContent(serializedObject: any, host: AdvancedDynamicTexture) {\r\n        super._parseFromContent(serializedObject, host);\r\n\r\n        if (serializedObject.backgroundGradient) {\r\n            const className = Tools.Instantiate(\"BABYLON.GUI.\" + serializedObject.backgroundGradient.className);\r\n            this.backgroundGradient = new className();\r\n            this.backgroundGradient!.parse(serializedObject.backgroundGradient);\r\n        }\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Slider\", Slider);\r\n","import { Rectangle } from \"./rectangle\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Checkbox } from \"./checkbox\";\r\nimport { RadioButton } from \"./radioButton\";\r\nimport { Slider } from \"./sliders/slider\";\r\nimport { Container } from \"./container\";\r\n\r\n/** Class used to create a RadioGroup\r\n * which contains groups of radio buttons\r\n */\r\nexport class SelectorGroup {\r\n    private _groupPanel = new StackPanel();\r\n    private _selectors: StackPanel[] = new Array();\r\n    private _groupHeader: TextBlock;\r\n\r\n    /**\r\n     * Creates a new SelectorGroup\r\n     * @param name of group, used as a group heading\r\n     */\r\n    constructor(\r\n        /** name of SelectorGroup */\r\n        public name: string\r\n    ) {\r\n        this._groupPanel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._groupPanel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._groupHeader = this._addGroupHeader(name);\r\n    }\r\n\r\n    /** Gets the groupPanel of the SelectorGroup  */\r\n    public get groupPanel(): StackPanel {\r\n        return this._groupPanel;\r\n    }\r\n\r\n    /** Gets the selectors array */\r\n    public get selectors(): StackPanel[] {\r\n        return this._selectors;\r\n    }\r\n\r\n    /** Gets and sets the group header */\r\n    public get header() {\r\n        return this._groupHeader.text;\r\n    }\r\n\r\n    public set header(label: string) {\r\n        if (this._groupHeader.text === \"label\") {\r\n            return;\r\n        }\r\n\r\n        this._groupHeader.text = label;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _addGroupHeader(text: string): TextBlock {\r\n        const groupHeading = new TextBlock(\"groupHead\", text);\r\n        groupHeading.width = 0.9;\r\n        groupHeading.height = \"30px\";\r\n        groupHeading.textWrapping = true;\r\n        groupHeading.color = \"black\";\r\n        groupHeading.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.left = \"2px\";\r\n        this._groupPanel.addControl(groupHeading);\r\n        return groupHeading;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _getSelector(selectorNb: number) {\r\n        if (selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        return this._selectors[selectorNb];\r\n    }\r\n\r\n    /** Removes the selector at the given position\r\n     * @param selectorNb the position of the selector within the group\r\n     */\r\n    public removeSelector(selectorNb: number) {\r\n        if (selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        this._groupPanel.removeControl(this._selectors[selectorNb]);\r\n        this._selectors.splice(selectorNb, 1);\r\n    }\r\n}\r\n\r\n/** Class used to create a CheckboxGroup\r\n * which contains groups of checkbox buttons\r\n */\r\nexport class CheckboxGroup extends SelectorGroup {\r\n    /** Adds a checkbox as a control\r\n     * @param text is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public addCheckbox(text: string, func = (s: boolean) => {}, checked: boolean = false): void {\r\n        checked = checked || false;\r\n        const button = new Checkbox();\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function (state) {\r\n            func(state);\r\n        });\r\n\r\n        const _selector = Control.AddHeader(button, text, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Checkbox>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a RadioGroup\r\n * which contains groups of radio buttons\r\n */\r\nexport class RadioGroup extends SelectorGroup {\r\n    private _selectNb = 0;\r\n\r\n    /** Adds a radio button as a control\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public addRadio(label: string, func = (n: number) => {}, checked = false): void {\r\n        const nb = this._selectNb++;\r\n        const button = new RadioButton();\r\n        button.name = label;\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.group = this.name;\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function (state) {\r\n            if (state) {\r\n                func(nb);\r\n            }\r\n        });\r\n\r\n        const _selector = Control.AddHeader(button, label, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<RadioButton>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a SliderGroup\r\n * which contains groups of slider buttons\r\n */\r\nexport class SliderGroup extends SelectorGroup {\r\n    /**\r\n     * Adds a slider to the SelectorGroup\r\n     * @param label is the label for the SliderBar\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onValueChange is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addSlider(\r\n        label: string,\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        func = (v: number) => {},\r\n        unit: string = \"Units\",\r\n        min: number = 0,\r\n        max: number = 0,\r\n        value: number = 0,\r\n        onValueChange = (v: number) => {\r\n            return v | 0;\r\n        }\r\n    ): void {\r\n        const button = new Slider();\r\n        button.name = unit;\r\n        button.value = value;\r\n        button.minimum = min;\r\n        button.maximum = max;\r\n        button.width = 0.9;\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.borderColor = \"black\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        button.left = \"4px\";\r\n        button.paddingBottom = \"4px\";\r\n\r\n        button.onValueChangedObservable.add(function (value) {\r\n            (<TextBlock>button.parent!.children[0]).text = button.parent!.children[0].name + \": \" + onValueChange(value) + \" \" + button.name;\r\n            func(value);\r\n        });\r\n\r\n        const _selector = Control.AddHeader(button, label + \": \" + onValueChange(value) + \" \" + unit, \"30px\", { isHorizontal: false, controlFirst: false });\r\n        _selector.height = \"60px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        _selector.children[0].name = label;\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        this.selectors[selectorNb].children[0].name = label;\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).text =\r\n            label + \": \" + (<Slider>this.selectors[selectorNb].children[1]).value + \" \" + this.selectors[selectorNb].children[1].name;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).color = color;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[1].color = color;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Slider>this.selectors[selectorNb].children[1]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to hold the controls for the checkboxes, radio buttons and sliders\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/selector\r\n */\r\nexport class SelectionPanel extends Rectangle {\r\n    private _panel: StackPanel;\r\n    private _buttonColor: string = \"#364249\";\r\n    private _buttonBackground: string = \"#CCCCCC\";\r\n    private _headerColor: string = \"black\";\r\n    private _barColor: string = \"white\";\r\n    private _barHeight: string = \"2px\";\r\n    private _spacerHeight: string = \"20px\";\r\n    private _labelColor: string;\r\n    private _groups: SelectorGroup[];\r\n    private _bars: any[] = new Array();\r\n\r\n    /**\r\n     * Creates a new SelectionPanel\r\n     * @param name of SelectionPanel\r\n     * @param groups is an array of SelectionGroups\r\n     */\r\n    constructor(\r\n        /** name of SelectionPanel */\r\n        public name: string,\r\n        /** an array of SelectionGroups */\r\n        public groups: SelectorGroup[] = []\r\n    ) {\r\n        super(name);\r\n        this._groups = groups;\r\n        this.thickness = 2;\r\n        this._panel = new StackPanel();\r\n        this._panel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._panel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._panel.top = 5;\r\n        this._panel.left = 5;\r\n        this._panel.width = 0.95;\r\n        if (groups.length > 0) {\r\n            for (let i = 0; i < groups.length - 1; i++) {\r\n                this._panel.addControl(groups[i].groupPanel);\r\n                this._addSpacer();\r\n            }\r\n            this._panel.addControl(groups[groups.length - 1].groupPanel);\r\n        }\r\n        this.addControl(this._panel);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"SelectionPanel\";\r\n    }\r\n\r\n    /** Gets the (stack) panel of the SelectionPanel  */\r\n    public get panel(): StackPanel {\r\n        return this._panel;\r\n    }\r\n\r\n    /** Gets or sets the headerColor */\r\n    public get headerColor(): string {\r\n        return this._headerColor;\r\n    }\r\n\r\n    public set headerColor(color: string) {\r\n        if (this._headerColor === color) {\r\n            return;\r\n        }\r\n        this._headerColor = color;\r\n        this._setHeaderColor();\r\n    }\r\n\r\n    private _setHeaderColor() {\r\n        for (let i = 0; i < this._groups.length; i++) {\r\n            this._groups[i].groupPanel.children[0].color = this._headerColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button color */\r\n    public get buttonColor(): string {\r\n        return this._buttonColor;\r\n    }\r\n\r\n    public set buttonColor(color: string) {\r\n        if (this._buttonColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonColor = color;\r\n        this._setbuttonColor();\r\n    }\r\n\r\n    private _setbuttonColor() {\r\n        for (let i = 0; i < this._groups.length; i++) {\r\n            for (let j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorButtonColor(j, this._buttonColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the label color */\r\n    public get labelColor(): string {\r\n        return this._labelColor;\r\n    }\r\n\r\n    public set labelColor(color: string) {\r\n        if (this._labelColor === color) {\r\n            return;\r\n        }\r\n        this._labelColor = color;\r\n        this._setLabelColor();\r\n    }\r\n\r\n    private _setLabelColor() {\r\n        for (let i = 0; i < this._groups.length; i++) {\r\n            for (let j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorLabelColor(j, this._labelColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button background */\r\n    public get buttonBackground(): string {\r\n        return this._buttonBackground;\r\n    }\r\n\r\n    public set buttonBackground(color: string) {\r\n        if (this._buttonBackground === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonBackground = color;\r\n        this._setButtonBackground();\r\n    }\r\n\r\n    private _setButtonBackground() {\r\n        for (let i = 0; i < this._groups.length; i++) {\r\n            for (let j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorButtonBackground(j, this._buttonBackground);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the color of separator bar */\r\n    public get barColor(): string {\r\n        return this._barColor;\r\n    }\r\n\r\n    public set barColor(color: string) {\r\n        if (this._barColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._barColor = color;\r\n        this._setBarColor();\r\n    }\r\n\r\n    private _setBarColor() {\r\n        for (let i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].background = this._barColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of separator bar */\r\n    public get barHeight(): string {\r\n        return this._barHeight;\r\n    }\r\n\r\n    public set barHeight(value: string) {\r\n        if (this._barHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._barHeight = value;\r\n        this._setBarHeight();\r\n    }\r\n\r\n    private _setBarHeight() {\r\n        for (let i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].height = this._barHeight;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of spacers*/\r\n    public get spacerHeight(): string {\r\n        return this._spacerHeight;\r\n    }\r\n\r\n    public set spacerHeight(value: string) {\r\n        if (this._spacerHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._spacerHeight = value;\r\n        this._setSpacerHeight();\r\n    }\r\n\r\n    private _setSpacerHeight() {\r\n        for (let i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].height = this._spacerHeight;\r\n        }\r\n    }\r\n\r\n    /** Adds a bar between groups */\r\n    private _addSpacer(): void {\r\n        const separator = new Container();\r\n        separator.width = 1;\r\n        separator.height = this._spacerHeight;\r\n        separator.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        const bar = new Rectangle();\r\n        bar.width = 1;\r\n        bar.height = this._barHeight;\r\n        bar.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        bar.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n        bar.background = this._barColor;\r\n        bar.color = \"transparent\";\r\n        separator.addControl(bar);\r\n\r\n        this._panel.addControl(separator);\r\n        this._bars.push(separator);\r\n    }\r\n\r\n    /** Add a group to the selection panel\r\n     * @param group is the selector group to add\r\n     */\r\n    public addGroup(group: SelectorGroup): void {\r\n        if (this._groups.length > 0) {\r\n            this._addSpacer();\r\n        }\r\n        this._panel.addControl(group.groupPanel);\r\n        this._groups.push(group);\r\n        group.groupPanel.children[0].color = this._headerColor;\r\n        for (let j = 0; j < group.selectors.length; j++) {\r\n            (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorButtonColor(j, this._buttonColor);\r\n            (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorButtonBackground(j, this._buttonBackground);\r\n        }\r\n    }\r\n\r\n    /** Remove the group from the given position\r\n     * @param groupNb is the position of the group in the list\r\n     */\r\n    public removeGroup(groupNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        const group = this._groups[groupNb];\r\n        this._panel.removeControl(group.groupPanel);\r\n        this._groups.splice(groupNb, 1);\r\n        if (groupNb < this._bars.length) {\r\n            this._panel.removeControl(this._bars[groupNb]);\r\n            this._bars.splice(groupNb, 1);\r\n        }\r\n    }\r\n\r\n    /** Change a group header label\r\n     * @param label is the new group header label\r\n     * @param groupNb is the number of the group to relabel\r\n     * */\r\n    public setHeaderName(label: string, groupNb: number) {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        const group = this._groups[groupNb];\r\n        (<TextBlock>group.groupPanel.children[0]).text = label;\r\n    }\r\n\r\n    /** Change selector label to the one given\r\n     * @param label is the new selector label\r\n     * @param groupNb is the number of the groupcontaining the selector\r\n     * @param selectorNb is the number of the selector within a group to relabel\r\n     * */\r\n    public relabel(label: string, groupNb: number, selectorNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        const group = this._groups[groupNb];\r\n        if (selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorLabel(selectorNb, label);\r\n    }\r\n\r\n    /** For a given group position remove the selector at the given position\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param selectorNb is the number of the selector within the group\r\n     */\r\n    public removeFromGroupSelector(groupNb: number, selectorNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        const group = this._groups[groupNb];\r\n        if (selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        group.removeSelector(selectorNb);\r\n    }\r\n\r\n    /** For a given group position of correct type add a checkbox button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupCheckbox(groupNb: number, label: string, func = () => {}, checked: boolean = false): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        const group = this._groups[groupNb];\r\n        (<CheckboxGroup>group).addCheckbox(label, func, checked);\r\n    }\r\n\r\n    /** For a given group position of correct type add a radio button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupRadio(groupNb: number, label: string, func = () => {}, checked: boolean = false): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        const group = this._groups[groupNb];\r\n        (<RadioGroup>group).addRadio(label, func, checked);\r\n    }\r\n\r\n    /**\r\n     * For a given slider group add a slider\r\n     * @param groupNb is the number of the group to add the slider to\r\n     * @param label is the label for the Slider\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onVal is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addToGroupSlider(\r\n        groupNb: number,\r\n        label: string,\r\n        func = () => {},\r\n        unit: string = \"Units\",\r\n        min: number = 0,\r\n        max: number = 0,\r\n        value: number = 0,\r\n        onVal = (v: number) => {\r\n            return v | 0;\r\n        }\r\n    ): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        const group = this._groups[groupNb];\r\n        (<SliderGroup>group).addSlider(label, func, unit, min, max, value, onVal);\r\n    }\r\n}\r\n","import { Measure } from \"../../measure\";\r\nimport { Container } from \"../container\";\r\nimport { ValueAndUnit } from \"../../valueAndUnit\";\r\nimport { Control } from \"../control\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/**\r\n * Class used to hold a the container for ScrollViewer\r\n * @internal\r\n */\r\nexport class _ScrollViewerWindow extends Container {\r\n    public parentClientWidth: number;\r\n    public parentClientHeight: number;\r\n\r\n    private _freezeControls = false;\r\n    private _parentMeasure: Measure;\r\n    private _oldLeft: number | null;\r\n    private _oldTop: number | null;\r\n\r\n    public get freezeControls(): boolean {\r\n        return this._freezeControls;\r\n    }\r\n\r\n    public set freezeControls(value: boolean) {\r\n        if (this._freezeControls === value) {\r\n            return;\r\n        }\r\n\r\n        if (!value) {\r\n            this._restoreMeasures();\r\n        }\r\n\r\n        // trigger a full normal layout calculation to be sure all children have their measures up to date\r\n        this._freezeControls = false;\r\n\r\n        const textureSize = this.host.getSize();\r\n        const renderWidth = textureSize.width;\r\n        const renderHeight = textureSize.height;\r\n\r\n        const context = this.host.getContext();\r\n\r\n        const measure = new Measure(0, 0, renderWidth, renderHeight);\r\n\r\n        this.host._numLayoutCalls = 0;\r\n\r\n        this.host._rootContainer._layout(measure, context);\r\n\r\n        // in freeze mode, prepare children measures accordingly\r\n        if (value) {\r\n            this._updateMeasures();\r\n            if (this._useBuckets()) {\r\n                this._makeBuckets();\r\n            }\r\n        }\r\n\r\n        this._freezeControls = value;\r\n\r\n        this.host.markAsDirty(); // redraw with the (new) current settings\r\n    }\r\n\r\n    private _bucketWidth: number = 0;\r\n    private _bucketHeight: number = 0;\r\n    private _buckets: { [key: number]: Array<Control> } = {};\r\n    private _bucketLen: number;\r\n\r\n    public get bucketWidth(): number {\r\n        return this._bucketWidth;\r\n    }\r\n\r\n    public get bucketHeight(): number {\r\n        return this._bucketHeight;\r\n    }\r\n\r\n    public setBucketSizes(width: number, height: number): void {\r\n        this._bucketWidth = width;\r\n        this._bucketHeight = height;\r\n\r\n        if (this._useBuckets()) {\r\n            if (this._freezeControls) {\r\n                this._makeBuckets();\r\n            }\r\n        } else {\r\n            this._buckets = {};\r\n        }\r\n    }\r\n\r\n    private _useBuckets(): boolean {\r\n        return this._bucketWidth > 0 && this._bucketHeight > 0;\r\n    }\r\n\r\n    private _makeBuckets(): void {\r\n        this._buckets = {};\r\n        this._bucketLen = Math.ceil(this.widthInPixels / this._bucketWidth);\r\n        this._dispatchInBuckets(this._children);\r\n        this._oldLeft = null;\r\n        this._oldTop = null;\r\n    }\r\n\r\n    private _dispatchInBuckets(children: Control[]): void {\r\n        for (let i = 0; i < children.length; ++i) {\r\n            const child = children[i];\r\n\r\n            const bStartX = Math.max(0, Math.floor((child._customData._origLeft - this._customData.origLeft) / this._bucketWidth)),\r\n                bEndX = Math.floor((child._customData._origLeft - this._customData.origLeft + child._currentMeasure.width - 1) / this._bucketWidth),\r\n                bEndY = Math.floor((child._customData._origTop - this._customData.origTop + child._currentMeasure.height - 1) / this._bucketHeight);\r\n            let bStartY = Math.max(0, Math.floor((child._customData._origTop - this._customData.origTop) / this._bucketHeight));\r\n\r\n            while (bStartY <= bEndY) {\r\n                for (let x = bStartX; x <= bEndX; ++x) {\r\n                    const bucket = bStartY * this._bucketLen + x;\r\n                    let lstc = this._buckets[bucket];\r\n\r\n                    if (!lstc) {\r\n                        lstc = [];\r\n                        this._buckets[bucket] = lstc;\r\n                    }\r\n\r\n                    lstc.push(child);\r\n                }\r\n                bStartY++;\r\n            }\r\n\r\n            if (child instanceof Container && child._children.length > 0) {\r\n                this._dispatchInBuckets(child._children);\r\n            }\r\n        }\r\n    }\r\n\r\n    // reset left and top measures for the window and all its children\r\n    private _updateMeasures(): void {\r\n        const left = this.leftInPixels | 0,\r\n            top = this.topInPixels | 0;\r\n\r\n        this._measureForChildren.left -= left;\r\n        this._measureForChildren.top -= top;\r\n        this._currentMeasure.left -= left;\r\n        this._currentMeasure.top -= top;\r\n\r\n        this._customData.origLeftForChildren = this._measureForChildren.left;\r\n        this._customData.origTopForChildren = this._measureForChildren.top;\r\n        this._customData.origLeft = this._currentMeasure.left;\r\n        this._customData.origTop = this._currentMeasure.top;\r\n\r\n        this._updateChildrenMeasures(this._children, left, top);\r\n    }\r\n\r\n    private _updateChildrenMeasures(children: Control[], left: number, top: number): void {\r\n        for (let i = 0; i < children.length; ++i) {\r\n            const child = children[i];\r\n\r\n            child._currentMeasure.left -= left;\r\n            child._currentMeasure.top -= top;\r\n\r\n            child._customData._origLeft = child._currentMeasure.left; // save the original left and top values for each child\r\n            child._customData._origTop = child._currentMeasure.top;\r\n\r\n            if (child instanceof Container && child._children.length > 0) {\r\n                this._updateChildrenMeasures(child._children, left, top);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _restoreMeasures(): void {\r\n        const left = this.leftInPixels | 0,\r\n            top = this.topInPixels | 0;\r\n\r\n        this._measureForChildren.left = this._customData.origLeftForChildren + left;\r\n        this._measureForChildren.top = this._customData.origTopForChildren + top;\r\n        this._currentMeasure.left = this._customData.origLeft + left;\r\n        this._currentMeasure.top = this._customData.origTop + top;\r\n    }\r\n\r\n    /**\r\n     * Creates a new ScrollViewerWindow\r\n     * @param name of ScrollViewerWindow\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ScrollViewerWindow\";\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._parentMeasure = parentMeasure;\r\n\r\n        this._measureForChildren.left = this._currentMeasure.left;\r\n        this._measureForChildren.top = this._currentMeasure.top;\r\n\r\n        this._measureForChildren.width = parentMeasure.width;\r\n        this._measureForChildren.height = parentMeasure.height;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _layout(parentMeasure: Measure, context: ICanvasRenderingContext): boolean {\r\n        if (this._freezeControls) {\r\n            this.invalidateRect(); // will trigger a redraw of the window\r\n            return false;\r\n        }\r\n\r\n        return super._layout(parentMeasure, context);\r\n    }\r\n\r\n    private _scrollChildren(children: Control[], left: number, top: number): void {\r\n        for (let i = 0; i < children.length; ++i) {\r\n            const child = children[i];\r\n\r\n            child._currentMeasure.left = child._customData._origLeft + left;\r\n            child._currentMeasure.top = child._customData._origTop + top;\r\n            child._isClipped = false; // clipping will be handled by _draw and the call to _intersectsRect()\r\n\r\n            if (child instanceof Container && child._children.length > 0) {\r\n                this._scrollChildren(child._children, left, top);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _scrollChildrenWithBuckets(left: number, top: number, scrollLeft: number, scrollTop: number): void {\r\n        const bStartX = Math.max(0, Math.floor(-left / this._bucketWidth)),\r\n            bEndX = Math.floor((-left + this._parentMeasure.width - 1) / this._bucketWidth),\r\n            bEndY = Math.floor((-top + this._parentMeasure.height - 1) / this._bucketHeight);\r\n        let bStartY = Math.max(0, Math.floor(-top / this._bucketHeight));\r\n\r\n        while (bStartY <= bEndY) {\r\n            for (let x = bStartX; x <= bEndX; ++x) {\r\n                const bucket = bStartY * this._bucketLen + x,\r\n                    lstc = this._buckets[bucket];\r\n\r\n                if (lstc) {\r\n                    for (let i = 0; i < lstc.length; ++i) {\r\n                        const child = lstc[i];\r\n                        child._currentMeasure.left = child._customData._origLeft + scrollLeft;\r\n                        child._currentMeasure.top = child._customData._origTop + scrollTop;\r\n                        child._isClipped = false; // clipping will be handled by _draw and the call to _intersectsRect()\r\n                    }\r\n                }\r\n            }\r\n            bStartY++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _draw(context: ICanvasRenderingContext, invalidatedRectangle?: Measure): void {\r\n        if (!this._freezeControls) {\r\n            super._draw(context, invalidatedRectangle);\r\n            return;\r\n        }\r\n\r\n        this._localDraw(context);\r\n\r\n        if (this.clipChildren) {\r\n            this._clipForChildren(context);\r\n        }\r\n\r\n        const left = this.leftInPixels | 0,\r\n            top = this.topInPixels | 0;\r\n\r\n        if (this._useBuckets()) {\r\n            if (this._oldLeft !== null && this._oldTop !== null) {\r\n                this._scrollChildrenWithBuckets(this._oldLeft, this._oldTop, left, top);\r\n                this._scrollChildrenWithBuckets(left, top, left, top);\r\n            } else {\r\n                this._scrollChildren(this._children, left, top);\r\n            }\r\n        } else {\r\n            this._scrollChildren(this._children, left, top);\r\n        }\r\n\r\n        this._oldLeft = left;\r\n        this._oldTop = top;\r\n\r\n        for (const child of this._children) {\r\n            if (!child._intersectsRect(this._parentMeasure)) {\r\n                continue;\r\n            }\r\n            child._render(context, this._parentMeasure);\r\n        }\r\n    }\r\n\r\n    protected _postMeasure(): void {\r\n        if (this._freezeControls) {\r\n            super._postMeasure();\r\n            return;\r\n        }\r\n\r\n        let maxWidth = this.parentClientWidth;\r\n        let maxHeight = this.parentClientHeight;\r\n        for (const child of this.children) {\r\n            if (!child.isVisible || child.notRenderable) {\r\n                continue;\r\n            }\r\n\r\n            if (child.horizontalAlignment === Control.HORIZONTAL_ALIGNMENT_CENTER) {\r\n                child._offsetLeft(this._currentMeasure.left - child._currentMeasure.left);\r\n            }\r\n\r\n            if (child.verticalAlignment === Control.VERTICAL_ALIGNMENT_CENTER) {\r\n                child._offsetTop(this._currentMeasure.top - child._currentMeasure.top);\r\n            }\r\n\r\n            maxWidth = Math.max(maxWidth, child._currentMeasure.left - this._currentMeasure.left + child._currentMeasure.width + child.paddingRightInPixels);\r\n            maxHeight = Math.max(maxHeight, child._currentMeasure.top - this._currentMeasure.top + child._currentMeasure.height + child.paddingBottomInPixels);\r\n        }\r\n\r\n        if (this._currentMeasure.width !== maxWidth) {\r\n            this._width.updateInPlace(maxWidth, ValueAndUnit.UNITMODE_PIXEL);\r\n            this._currentMeasure.width = maxWidth;\r\n            this._rebuildLayout = true;\r\n            this._isDirty = true;\r\n        }\r\n\r\n        if (this._currentMeasure.height !== maxHeight) {\r\n            this._height.updateInPlace(maxHeight, ValueAndUnit.UNITMODE_PIXEL);\r\n            this._currentMeasure.height = maxHeight;\r\n            this._rebuildLayout = true;\r\n            this._isDirty = true;\r\n        }\r\n\r\n        super._postMeasure();\r\n    }\r\n}\r\n","import type { Vector2 } from \"core/Maths/math.vector\";\r\nimport { BaseSlider } from \"./baseSlider\";\r\nimport type { Control } from \"../control\";\r\nimport { Measure } from \"../../measure\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { BaseGradient } from \"../gradient/BaseGradient\";\r\nimport type { AdvancedDynamicTexture } from \"gui/2D/advancedDynamicTexture\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class ScrollBar extends BaseSlider {\r\n    private _background = \"black\";\r\n    private _borderColor = \"white\";\r\n    private _tempMeasure = new Measure(0, 0, 0, 0);\r\n    private _invertScrollDirection = false;\r\n    private _backgroundGradient: Nullable<BaseGradient> = null;\r\n\r\n    /** Gets or sets border color */\r\n    @serialize()\r\n    public get borderColor(): string {\r\n        return this._borderColor;\r\n    }\r\n\r\n    public set borderColor(value: string) {\r\n        if (this._borderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._borderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    @serialize()\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background gradient. Takes precedence over gradient. */\r\n    public get backgroundGradient(): Nullable<BaseGradient> {\r\n        return this._backgroundGradient;\r\n    }\r\n\r\n    public set backgroundGradient(value: Nullable<BaseGradient>) {\r\n        if (this._backgroundGradient === value) {\r\n            return;\r\n        }\r\n\r\n        this._backgroundGradient = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Inverts the scrolling direction (default: false) */\r\n    @serialize()\r\n    public get invertScrollDirection() {\r\n        return this._invertScrollDirection;\r\n    }\r\n\r\n    public set invertScrollDirection(invert: boolean) {\r\n        this._invertScrollDirection = invert;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Slider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Scrollbar\";\r\n    }\r\n\r\n    protected _getThumbThickness(): number {\r\n        let thumbThickness = 0;\r\n        if (this._thumbWidth.isPixel) {\r\n            thumbThickness = this._thumbWidth.getValue(this._host);\r\n        } else {\r\n            thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n    private _getBackgroundColor(context: ICanvasRenderingContext) {\r\n        return this._backgroundGradient ? this._backgroundGradient.getCanvasGradient(context) : this._background;\r\n    }\r\n\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        this._prepareRenderingData(\"rectangle\");\r\n        const left = this._renderLeft;\r\n\r\n        const thumbPosition = this._getThumbPosition();\r\n        context.fillStyle = this._getBackgroundColor(context);\r\n\r\n        context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n\r\n        // Value bar\r\n        context.fillStyle = this._getColor(context);\r\n\r\n        // Thumb\r\n        if (this.isVertical) {\r\n            this._tempMeasure.left = left - this._effectiveBarOffset;\r\n            this._tempMeasure.top = this._currentMeasure.top + thumbPosition;\r\n            this._tempMeasure.width = this._currentMeasure.width;\r\n            this._tempMeasure.height = this._effectiveThumbThickness;\r\n        } else {\r\n            this._tempMeasure.left = this._currentMeasure.left + thumbPosition;\r\n            this._tempMeasure.top = this._currentMeasure.top;\r\n            this._tempMeasure.width = this._effectiveThumbThickness;\r\n            this._tempMeasure.height = this._currentMeasure.height;\r\n        }\r\n\r\n        context.fillRect(this._tempMeasure.left, this._tempMeasure.top, this._tempMeasure.width, this._tempMeasure.height);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    private _first: boolean;\r\n    private _originX: number;\r\n    private _originY: number;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        const sign = this._invertScrollDirection ? -1 : 1;\r\n\r\n        if (this._first) {\r\n            this._first = false;\r\n            this._originX = x;\r\n            this._originY = y;\r\n\r\n            // Check if move is required\r\n            if (\r\n                x < this._tempMeasure.left ||\r\n                x > this._tempMeasure.left + this._tempMeasure.width ||\r\n                y < this._tempMeasure.top ||\r\n                y > this._tempMeasure.top + this._tempMeasure.height\r\n            ) {\r\n                if (this.isVertical) {\r\n                    this.value = this.minimum + (1 - (y - this._currentMeasure.top) / this._currentMeasure.height) * (this.maximum - this.minimum);\r\n                } else {\r\n                    this.value = this.minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this.maximum - this.minimum);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Delta mode\r\n        let delta = 0;\r\n        if (this.isVertical) {\r\n            delta = -((y - this._originY) / (this._currentMeasure.height - this._effectiveThumbThickness));\r\n        } else {\r\n            delta = (x - this._originX) / (this._currentMeasure.width - this._effectiveThumbThickness);\r\n        }\r\n\r\n        this.value += sign * delta * (this.maximum - this.minimum);\r\n\r\n        this._originX = x;\r\n        this._originY = y;\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        this._first = true;\r\n\r\n        return super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi);\r\n    }\r\n\r\n    public serialize(serializationObject: any) {\r\n        super.serialize(serializationObject);\r\n\r\n        if (this.backgroundGradient) {\r\n            serializationObject.backgroundGradient = {};\r\n            this.backgroundGradient.serialize(serializationObject.backgroundGradient);\r\n        }\r\n    }\r\n\r\n    public _parseFromContent(serializationObject: any, host: AdvancedDynamicTexture) {\r\n        super._parseFromContent(serializationObject, host);\r\n\r\n        if (serializationObject.backgroundGradient) {\r\n            const className = Tools.Instantiate(\"BABYLON.GUI.\" + serializationObject.backgroundGradient.className);\r\n            this.backgroundGradient = new className();\r\n            this.backgroundGradient!.parse(serializationObject.backgroundGradient);\r\n        }\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Scrollbar\", ScrollBar);\r\n","import type { Vector2 } from \"core/Maths/math.vector\";\r\nimport { BaseSlider } from \"./baseSlider\";\r\nimport type { Control } from \"../control\";\r\nimport type { Image } from \"../image\";\r\nimport { Measure } from \"../../measure\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class ImageScrollBar extends BaseSlider {\r\n    private _backgroundBaseImage: Image;\r\n    private _backgroundImage: Image;\r\n    private _thumbImage: Image;\r\n    private _thumbBaseImage: Image;\r\n    private _thumbLength: number = 0.5;\r\n    private _thumbHeight: number = 1;\r\n    private _barImageHeight: number = 1;\r\n    private _tempMeasure = new Measure(0, 0, 0, 0);\r\n    private _invertScrollDirection = false;\r\n\r\n    /** Number of 90° rotation to apply on the images when in vertical mode */\r\n    @serialize()\r\n    public num90RotationInVerticalMode = 1;\r\n\r\n    /** Inverts the scrolling direction (default: false) */\r\n    @serialize()\r\n    public get invertScrollDirection() {\r\n        return this._invertScrollDirection;\r\n    }\r\n\r\n    public set invertScrollDirection(invert: boolean) {\r\n        this._invertScrollDirection = invert;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the background for horizontal bar\r\n     */\r\n    public get backgroundImage(): Image {\r\n        return this._backgroundBaseImage;\r\n    }\r\n\r\n    public set backgroundImage(value: Image) {\r\n        if (this._backgroundBaseImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._backgroundBaseImage = value;\r\n\r\n        if (this.isVertical && this.num90RotationInVerticalMode !== 0) {\r\n            if (!value.isLoaded) {\r\n                value.onImageLoadedObservable.addOnce(() => {\r\n                    const rotatedValue = value._rotate90(this.num90RotationInVerticalMode, true);\r\n                    this._backgroundImage = rotatedValue;\r\n                    if (!rotatedValue.isLoaded) {\r\n                        rotatedValue.onImageLoadedObservable.addOnce(() => {\r\n                            this._markAsDirty();\r\n                        });\r\n                    }\r\n                    this._markAsDirty();\r\n                });\r\n            } else {\r\n                this._backgroundImage = value._rotate90(this.num90RotationInVerticalMode, true);\r\n                this._markAsDirty();\r\n            }\r\n        } else {\r\n            this._backgroundImage = value;\r\n            if (value && !value.isLoaded) {\r\n                value.onImageLoadedObservable.addOnce(() => {\r\n                    this._markAsDirty();\r\n                });\r\n            }\r\n\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the thumb\r\n     */\r\n    public get thumbImage(): Image {\r\n        return this._thumbBaseImage;\r\n    }\r\n\r\n    public set thumbImage(value: Image) {\r\n        if (this._thumbBaseImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbBaseImage = value;\r\n\r\n        if (this.isVertical && this.num90RotationInVerticalMode !== 0) {\r\n            if (!value.isLoaded) {\r\n                value.onImageLoadedObservable.addOnce(() => {\r\n                    const rotatedValue = value._rotate90(-this.num90RotationInVerticalMode, true);\r\n                    this._thumbImage = rotatedValue;\r\n                    if (!rotatedValue.isLoaded) {\r\n                        rotatedValue.onImageLoadedObservable.addOnce(() => {\r\n                            this._markAsDirty();\r\n                        });\r\n                    }\r\n                    this._markAsDirty();\r\n                });\r\n            } else {\r\n                this._thumbImage = value._rotate90(-this.num90RotationInVerticalMode, true);\r\n                this._markAsDirty();\r\n            }\r\n        } else {\r\n            this._thumbImage = value;\r\n            if (value && !value.isLoaded) {\r\n                value.onImageLoadedObservable.addOnce(() => {\r\n                    this._markAsDirty();\r\n                });\r\n            }\r\n\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the length of the thumb\r\n     */\r\n    public get thumbLength(): number {\r\n        return this._thumbLength;\r\n    }\r\n\r\n    public set thumbLength(value: number) {\r\n        if (this._thumbLength === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbLength = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the height of the thumb\r\n     */\r\n    public get thumbHeight(): number {\r\n        return this._thumbHeight;\r\n    }\r\n\r\n    public set thumbHeight(value: number) {\r\n        if (this._thumbLength === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the height of the bar image\r\n     */\r\n    public get barImageHeight(): number {\r\n        return this._barImageHeight;\r\n    }\r\n\r\n    public set barImageHeight(value: number) {\r\n        if (this._barImageHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._barImageHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new ImageScrollBar\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ImageScrollBar\";\r\n    }\r\n\r\n    protected _getThumbThickness(): number {\r\n        let thumbThickness = 0;\r\n        if (this._thumbWidth.isPixel) {\r\n            thumbThickness = this._thumbWidth.getValue(this._host);\r\n        } else {\r\n            thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        this._prepareRenderingData(\"rectangle\");\r\n        const thumbPosition = this._getThumbPosition();\r\n        const left = this._renderLeft;\r\n        const top = this._renderTop;\r\n        const width = this._renderWidth;\r\n        const height = this._renderHeight;\r\n\r\n        // Background\r\n        if (this._backgroundImage) {\r\n            this._tempMeasure.copyFromFloats(left, top, width, height);\r\n            if (this.isVertical) {\r\n                this._tempMeasure.copyFromFloats(left + width * (1 - this._barImageHeight) * 0.5, this._currentMeasure.top, width * this._barImageHeight, height);\r\n                this._tempMeasure.height += this._effectiveThumbThickness;\r\n                this._backgroundImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            } else {\r\n                this._tempMeasure.copyFromFloats(this._currentMeasure.left, top + height * (1 - this._barImageHeight) * 0.5, width, height * this._barImageHeight);\r\n                this._tempMeasure.width += this._effectiveThumbThickness;\r\n                this._backgroundImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            }\r\n            this._backgroundImage._draw(context);\r\n        }\r\n\r\n        // Thumb\r\n        if (this.isVertical) {\r\n            this._tempMeasure.copyFromFloats(\r\n                left - this._effectiveBarOffset + this._currentMeasure.width * (1 - this._thumbHeight) * 0.5,\r\n                this._currentMeasure.top + thumbPosition,\r\n                this._currentMeasure.width * this._thumbHeight,\r\n                this._effectiveThumbThickness\r\n            );\r\n        } else {\r\n            this._tempMeasure.copyFromFloats(\r\n                this._currentMeasure.left + thumbPosition,\r\n                this._currentMeasure.top + this._currentMeasure.height * (1 - this._thumbHeight) * 0.5,\r\n                this._effectiveThumbThickness,\r\n                this._currentMeasure.height * this._thumbHeight\r\n            );\r\n        }\r\n\r\n        if (this._thumbImage) {\r\n            this._thumbImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._thumbImage._draw(context);\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    private _first: boolean;\r\n    private _originX: number;\r\n    private _originY: number;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        const sign = this._invertScrollDirection ? -1 : 1;\r\n\r\n        if (this._first) {\r\n            this._first = false;\r\n            this._originX = x;\r\n            this._originY = y;\r\n\r\n            // Check if move is required\r\n            if (\r\n                x < this._tempMeasure.left ||\r\n                x > this._tempMeasure.left + this._tempMeasure.width ||\r\n                y < this._tempMeasure.top ||\r\n                y > this._tempMeasure.top + this._tempMeasure.height\r\n            ) {\r\n                if (this.isVertical) {\r\n                    this.value = this.minimum + (1 - (y - this._currentMeasure.top) / this._currentMeasure.height) * (this.maximum - this.minimum);\r\n                } else {\r\n                    this.value = this.minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this.maximum - this.minimum);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Delta mode\r\n        let delta = 0;\r\n        if (this.isVertical) {\r\n            delta = -((y - this._originY) / (this._currentMeasure.height - this._effectiveThumbThickness));\r\n        } else {\r\n            delta = (x - this._originX) / (this._currentMeasure.width - this._effectiveThumbThickness);\r\n        }\r\n\r\n        this.value += sign * delta * (this.maximum - this.minimum);\r\n\r\n        this._originX = x;\r\n        this._originY = y;\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        this._first = true;\r\n\r\n        return super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi);\r\n    }\r\n}\r\n","import type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport type { Vector2 } from \"core/Maths/math\";\r\nimport { Rectangle } from \"../rectangle\";\r\nimport { Grid } from \"../grid\";\r\nimport type { Image } from \"../image\";\r\nimport { Control } from \"../control\";\r\nimport type { Container } from \"../container\";\r\nimport type { Measure } from \"../../measure\";\r\nimport type { AdvancedDynamicTexture } from \"../../advancedDynamicTexture\";\r\nimport { _ScrollViewerWindow } from \"./scrollViewerWindow\";\r\nimport { ScrollBar } from \"../sliders/scrollBar\";\r\nimport { ImageScrollBar } from \"../sliders/imageScrollBar\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\n\r\n/**\r\n * Class used to hold a viewer window and sliders in a grid\r\n */\r\nexport class ScrollViewer extends Rectangle {\r\n    private _grid: Grid;\r\n    private _horizontalBarSpace: Rectangle;\r\n    private _verticalBarSpace: Rectangle;\r\n    private _dragSpace: Rectangle;\r\n    private _horizontalBar: ScrollBar | ImageScrollBar;\r\n    private _verticalBar: ScrollBar | ImageScrollBar;\r\n    private _barColor: string;\r\n    private _barBackground: string;\r\n    private _barImage: Image;\r\n    private _horizontalBarImage: Image;\r\n    private _verticalBarImage: Image;\r\n    private _barBackgroundImage: Image;\r\n    private _horizontalBarBackgroundImage: Image;\r\n    private _verticalBarBackgroundImage: Image;\r\n    private _barSize: number = 20;\r\n    private _window: _ScrollViewerWindow;\r\n    private _pointerIsOver: Boolean = false;\r\n    private _wheelPrecision: number = 0.05;\r\n    private _onWheelObserver: Nullable<Observer<Vector2>>;\r\n    private _clientWidth: number;\r\n    private _clientHeight: number;\r\n    private _useImageBar: Boolean;\r\n    private _thumbLength: number = 0.5;\r\n    private _thumbHeight: number = 1;\r\n    private _barImageHeight: number = 1;\r\n    private _horizontalBarImageHeight: number = 1;\r\n    private _verticalBarImageHeight: number = 1;\r\n    private _oldWindowContentsWidth: number = 0;\r\n    private _oldWindowContentsHeight: number = 0;\r\n\r\n    /**\r\n     * Gets the horizontal scrollbar\r\n     */\r\n    public get horizontalBar(): ScrollBar | ImageScrollBar {\r\n        return this._horizontalBar;\r\n    }\r\n\r\n    /**\r\n     * Gets the vertical scrollbar\r\n     */\r\n    public get verticalBar(): ScrollBar | ImageScrollBar {\r\n        return this._verticalBar;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current container\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Nullable<Control>): Container {\r\n        if (!control) {\r\n            return this;\r\n        }\r\n\r\n        this._window.addControl(control);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        this._window.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._window.children;\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (const child of this._children) {\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Freezes or unfreezes the controls in the window.\r\n     * When controls are frozen, the scroll viewer can render a lot more quickly but updates to positions/sizes of controls\r\n     * are not taken into account. If you want to change positions/sizes, unfreeze, perform the changes then freeze again\r\n     */\r\n    public get freezeControls(): boolean {\r\n        return this._window.freezeControls;\r\n    }\r\n\r\n    public set freezeControls(value: boolean) {\r\n        this._window.freezeControls = value;\r\n    }\r\n\r\n    /** Gets the bucket width */\r\n    public get bucketWidth(): number {\r\n        return this._window.bucketWidth;\r\n    }\r\n\r\n    /** Gets the bucket height */\r\n    public get bucketHeight(): number {\r\n        return this._window.bucketHeight;\r\n    }\r\n\r\n    /**\r\n     * Sets the bucket sizes.\r\n     * When freezeControls is true, setting a non-zero bucket size will improve performances by updating only\r\n     * controls that are visible. The bucket sizes is used to subdivide (internally) the window area to smaller areas into which\r\n     * controls are dispatched. So, the size should be roughly equals to the mean size of all the controls of\r\n     * the window. To disable the usage of buckets, sets either width or height (or both) to 0.\r\n     * Please note that using this option will raise the memory usage (the higher the bucket sizes, the less memory\r\n     * used), that's why it is not enabled by default.\r\n     * @param width width of the bucket\r\n     * @param height height of the bucket\r\n     */\r\n    public setBucketSizes(width: number, height: number): void {\r\n        this._window.setBucketSizes(width, height);\r\n    }\r\n\r\n    private _forceHorizontalBar: boolean = false;\r\n    private _forceVerticalBar: boolean = false;\r\n\r\n    /**\r\n     * Forces the horizontal scroll bar to be displayed\r\n     */\r\n    public get forceHorizontalBar(): boolean {\r\n        return this._forceHorizontalBar;\r\n    }\r\n\r\n    public set forceHorizontalBar(value: boolean) {\r\n        this._grid.setRowDefinition(1, value ? this._barSize : 0, true);\r\n        this._horizontalBar.isVisible = value;\r\n        this._forceHorizontalBar = value;\r\n    }\r\n\r\n    /**\r\n     * Forces the vertical scroll bar to be displayed\r\n     */\r\n    public get forceVerticalBar(): boolean {\r\n        return this._forceVerticalBar;\r\n    }\r\n\r\n    public set forceVerticalBar(value: boolean) {\r\n        this._grid.setColumnDefinition(1, value ? this._barSize : 0, true);\r\n        this._verticalBar.isVisible = value;\r\n        this._forceVerticalBar = value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new ScrollViewer\r\n     * @param name of ScrollViewer\r\n     * @param isImageBased\r\n     */\r\n    constructor(name?: string, isImageBased?: boolean) {\r\n        super(name);\r\n\r\n        this._useImageBar = isImageBased ? isImageBased : false;\r\n\r\n        this.onDirtyObservable.add(() => {\r\n            this._horizontalBarSpace.color = this.color;\r\n            this._verticalBarSpace.color = this.color;\r\n            this._dragSpace.color = this.color;\r\n        });\r\n\r\n        this.onPointerEnterObservable.add(() => {\r\n            this._pointerIsOver = true;\r\n        });\r\n\r\n        this.onPointerOutObservable.add(() => {\r\n            this._pointerIsOver = false;\r\n        });\r\n\r\n        this._grid = new Grid();\r\n        if (this._useImageBar) {\r\n            this._horizontalBar = new ImageScrollBar();\r\n            this._verticalBar = new ImageScrollBar();\r\n        } else {\r\n            this._horizontalBar = new ScrollBar();\r\n            this._verticalBar = new ScrollBar();\r\n        }\r\n\r\n        this._window = new _ScrollViewerWindow(\"scrollViewer_window\");\r\n        this._window.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._window.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        this._grid.addColumnDefinition(1);\r\n        this._grid.addColumnDefinition(0, true);\r\n        this._grid.addRowDefinition(1);\r\n        this._grid.addRowDefinition(0, true);\r\n\r\n        super.addControl(this._grid);\r\n        this._grid.addControl(this._window, 0, 0);\r\n\r\n        this._verticalBarSpace = new Rectangle();\r\n        this._verticalBarSpace.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalBarSpace.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._verticalBarSpace.thickness = 1;\r\n        this._grid.addControl(this._verticalBarSpace, 0, 1);\r\n        this._addBar(this._verticalBar, this._verticalBarSpace, true, Math.PI);\r\n\r\n        this._horizontalBarSpace = new Rectangle();\r\n        this._horizontalBarSpace.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._horizontalBarSpace.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._horizontalBarSpace.thickness = 1;\r\n        this._grid.addControl(this._horizontalBarSpace, 1, 0);\r\n        this._addBar(this._horizontalBar, this._horizontalBarSpace, false, 0);\r\n\r\n        this._dragSpace = new Rectangle();\r\n        this._dragSpace.thickness = 1;\r\n        this._grid.addControl(this._dragSpace, 1, 1);\r\n\r\n        // Colors\r\n        if (!this._useImageBar) {\r\n            this.barColor = \"grey\";\r\n            this.barBackground = \"transparent\";\r\n        }\r\n    }\r\n\r\n    /** Reset the scroll viewer window to initial size */\r\n    public resetWindow() {\r\n        this._window.width = \"100%\";\r\n        this._window.height = \"100%\";\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ScrollViewer\";\r\n    }\r\n\r\n    private _buildClientSizes() {\r\n        const ratio = this.host.idealRatio;\r\n\r\n        this._window.parentClientWidth = this._currentMeasure.width - (this._verticalBar.isVisible || this.forceVerticalBar ? this._barSize * ratio : 0) - 2 * this.thickness;\r\n        this._window.parentClientHeight = this._currentMeasure.height - (this._horizontalBar.isVisible || this.forceHorizontalBar ? this._barSize * ratio : 0) - 2 * this.thickness;\r\n\r\n        this._clientWidth = this._window.parentClientWidth;\r\n        this._clientHeight = this._window.parentClientHeight;\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._buildClientSizes();\r\n    }\r\n\r\n    protected _postMeasure(): void {\r\n        super._postMeasure();\r\n\r\n        this._updateScroller();\r\n\r\n        this._setWindowPosition(false);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the mouse wheel precision\r\n     * from 0 to 1 with a default value of 0.05\r\n     * */\r\n    @serialize()\r\n    public get wheelPrecision(): number {\r\n        return this._wheelPrecision;\r\n    }\r\n\r\n    public set wheelPrecision(value: number) {\r\n        if (this._wheelPrecision === value) {\r\n            return;\r\n        }\r\n\r\n        if (value < 0) {\r\n            value = 0;\r\n        }\r\n\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n\r\n        this._wheelPrecision = value;\r\n    }\r\n\r\n    /** Gets or sets the scroll bar container background color */\r\n    @serialize()\r\n    public get scrollBackground(): string {\r\n        return this._horizontalBarSpace.background;\r\n    }\r\n\r\n    public set scrollBackground(color: string) {\r\n        if (this._horizontalBarSpace.background === color) {\r\n            return;\r\n        }\r\n        this._horizontalBarSpace.background = color;\r\n        this._verticalBarSpace.background = color;\r\n    }\r\n\r\n    /** Gets or sets the bar color */\r\n    @serialize()\r\n    public get barColor(): string {\r\n        return this._barColor;\r\n    }\r\n\r\n    public set barColor(color: string) {\r\n        if (this._barColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._barColor = color;\r\n        this._horizontalBar.color = color;\r\n        this._verticalBar.color = color;\r\n    }\r\n\r\n    /** Gets or sets the bar image */\r\n    public get thumbImage(): Image {\r\n        return this._barImage;\r\n    }\r\n\r\n    public set thumbImage(value: Image) {\r\n        if (this._barImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._barImage = value;\r\n        const hb = <ImageScrollBar>this._horizontalBar;\r\n        const vb = <ImageScrollBar>this._verticalBar;\r\n        hb.thumbImage = value;\r\n        vb.thumbImage = value;\r\n    }\r\n\r\n    /** Gets or sets the horizontal bar image */\r\n    public get horizontalThumbImage(): Image {\r\n        return this._horizontalBarImage;\r\n    }\r\n\r\n    public set horizontalThumbImage(value: Image) {\r\n        if (this._horizontalBarImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._horizontalBarImage = value;\r\n        const hb = <ImageScrollBar>this._horizontalBar;\r\n        hb.thumbImage = value;\r\n    }\r\n\r\n    /** Gets or sets the vertical bar image */\r\n    public get verticalThumbImage(): Image {\r\n        return this._verticalBarImage;\r\n    }\r\n\r\n    public set verticalThumbImage(value: Image) {\r\n        if (this._verticalBarImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._verticalBarImage = value;\r\n        const vb = <ImageScrollBar>this._verticalBar;\r\n        vb.thumbImage = value;\r\n    }\r\n\r\n    /** Gets or sets the size of the bar */\r\n    @serialize()\r\n    public get barSize(): number {\r\n        return this._barSize;\r\n    }\r\n\r\n    public set barSize(value: number) {\r\n        if (this._barSize === value) {\r\n            return;\r\n        }\r\n\r\n        this._barSize = value;\r\n        this._markAsDirty();\r\n\r\n        if (this._horizontalBar.isVisible) {\r\n            this._grid.setRowDefinition(1, this._barSize, true);\r\n        }\r\n        if (this._verticalBar.isVisible) {\r\n            this._grid.setColumnDefinition(1, this._barSize, true);\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the length of the thumb */\r\n    public get thumbLength(): number {\r\n        return this._thumbLength;\r\n    }\r\n\r\n    public set thumbLength(value: number) {\r\n        if (this._thumbLength === value) {\r\n            return;\r\n        }\r\n        if (value <= 0) {\r\n            value = 0.1;\r\n        }\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n        this._thumbLength = value;\r\n        const hb = <ImageScrollBar>this._horizontalBar;\r\n        const vb = <ImageScrollBar>this._verticalBar;\r\n        hb.thumbLength = value;\r\n        vb.thumbLength = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of the thumb */\r\n    public get thumbHeight(): number {\r\n        return this._thumbHeight;\r\n    }\r\n\r\n    public set thumbHeight(value: number) {\r\n        if (this._thumbHeight === value) {\r\n            return;\r\n        }\r\n        if (value <= 0) {\r\n            value = 0.1;\r\n        }\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n        this._thumbHeight = value;\r\n        const hb = <ImageScrollBar>this._horizontalBar;\r\n        const vb = <ImageScrollBar>this._verticalBar;\r\n        hb.thumbHeight = value;\r\n        vb.thumbHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of the bar image */\r\n    public get barImageHeight(): number {\r\n        return this._barImageHeight;\r\n    }\r\n\r\n    public set barImageHeight(value: number) {\r\n        if (this._barImageHeight === value) {\r\n            return;\r\n        }\r\n        if (value <= 0) {\r\n            value = 0.1;\r\n        }\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n        this._barImageHeight = value;\r\n        const hb = <ImageScrollBar>this._horizontalBar;\r\n        const vb = <ImageScrollBar>this._verticalBar;\r\n        hb.barImageHeight = value;\r\n        vb.barImageHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of the horizontal bar image */\r\n    public get horizontalBarImageHeight(): number {\r\n        return this._horizontalBarImageHeight;\r\n    }\r\n\r\n    public set horizontalBarImageHeight(value: number) {\r\n        if (this._horizontalBarImageHeight === value) {\r\n            return;\r\n        }\r\n        if (value <= 0) {\r\n            value = 0.1;\r\n        }\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n        this._horizontalBarImageHeight = value;\r\n        const hb = <ImageScrollBar>this._horizontalBar;\r\n        hb.barImageHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of the vertical bar image */\r\n    public get verticalBarImageHeight(): number {\r\n        return this._verticalBarImageHeight;\r\n    }\r\n\r\n    public set verticalBarImageHeight(value: number) {\r\n        if (this._verticalBarImageHeight === value) {\r\n            return;\r\n        }\r\n        if (value <= 0) {\r\n            value = 0.1;\r\n        }\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n        this._verticalBarImageHeight = value;\r\n        const vb = <ImageScrollBar>this._verticalBar;\r\n        vb.barImageHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the bar background */\r\n    @serialize()\r\n    public get barBackground(): string {\r\n        return this._barBackground;\r\n    }\r\n\r\n    public set barBackground(color: string) {\r\n        if (this._barBackground === color) {\r\n            return;\r\n        }\r\n\r\n        this._barBackground = color;\r\n        const hb = <ScrollBar>this._horizontalBar;\r\n        const vb = <ScrollBar>this._verticalBar;\r\n        hb.background = color;\r\n        vb.background = color;\r\n        this._dragSpace.background = color;\r\n    }\r\n\r\n    /** Gets or sets the bar background image */\r\n    public get barImage(): Image {\r\n        return this._barBackgroundImage;\r\n    }\r\n\r\n    public set barImage(value: Image) {\r\n        this._barBackgroundImage = value;\r\n        const hb = <ImageScrollBar>this._horizontalBar;\r\n        const vb = <ImageScrollBar>this._verticalBar;\r\n        hb.backgroundImage = value;\r\n        vb.backgroundImage = value;\r\n    }\r\n\r\n    /** Gets or sets the horizontal bar background image */\r\n    public get horizontalBarImage(): Image {\r\n        return this._horizontalBarBackgroundImage;\r\n    }\r\n\r\n    public set horizontalBarImage(value: Image) {\r\n        this._horizontalBarBackgroundImage = value;\r\n        const hb = <ImageScrollBar>this._horizontalBar;\r\n        hb.backgroundImage = value;\r\n    }\r\n\r\n    /** Gets or sets the vertical bar background image */\r\n    public get verticalBarImage(): Image {\r\n        return this._verticalBarBackgroundImage;\r\n    }\r\n\r\n    public set verticalBarImage(value: Image) {\r\n        this._verticalBarBackgroundImage = value;\r\n        const vb = <ImageScrollBar>this._verticalBar;\r\n        vb.backgroundImage = value;\r\n    }\r\n\r\n    private _setWindowPosition(force = true): void {\r\n        const ratio = this.host.idealRatio;\r\n        const windowContentsWidth = this._window._currentMeasure.width;\r\n        const windowContentsHeight = this._window._currentMeasure.height;\r\n\r\n        if (!force && this._oldWindowContentsWidth === windowContentsWidth && this._oldWindowContentsHeight === windowContentsHeight) {\r\n            return;\r\n        }\r\n\r\n        this._oldWindowContentsWidth = windowContentsWidth;\r\n        this._oldWindowContentsHeight = windowContentsHeight;\r\n\r\n        const _endLeft = this._clientWidth - windowContentsWidth;\r\n        const _endTop = this._clientHeight - windowContentsHeight;\r\n\r\n        const newLeft = (this._horizontalBar.value / ratio) * _endLeft + \"px\";\r\n        const newTop = (this._verticalBar.value / ratio) * _endTop + \"px\";\r\n\r\n        if (newLeft !== this._window.left) {\r\n            this._window.left = newLeft;\r\n            if (!this.freezeControls) {\r\n                this._rebuildLayout = true;\r\n            }\r\n        }\r\n\r\n        if (newTop !== this._window.top) {\r\n            this._window.top = newTop;\r\n            if (!this.freezeControls) {\r\n                this._rebuildLayout = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    private _updateScroller(): void {\r\n        const windowContentsWidth = this._window._currentMeasure.width;\r\n        const windowContentsHeight = this._window._currentMeasure.height;\r\n\r\n        if (this._horizontalBar.isVisible && windowContentsWidth <= this._clientWidth && !this.forceHorizontalBar) {\r\n            this._grid.setRowDefinition(1, 0, true);\r\n            this._horizontalBar.isVisible = false;\r\n            this._horizontalBar.value = 0;\r\n            this._rebuildLayout = true;\r\n        } else if (!this._horizontalBar.isVisible && (windowContentsWidth > this._clientWidth || this.forceHorizontalBar)) {\r\n            this._grid.setRowDefinition(1, this._barSize, true);\r\n            this._horizontalBar.isVisible = true;\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        if (this._verticalBar.isVisible && windowContentsHeight <= this._clientHeight && !this.forceVerticalBar) {\r\n            this._grid.setColumnDefinition(1, 0, true);\r\n            this._verticalBar.isVisible = false;\r\n            this._verticalBar.value = 0;\r\n            this._rebuildLayout = true;\r\n        } else if (!this._verticalBar.isVisible && (windowContentsHeight > this._clientHeight || this.forceVerticalBar)) {\r\n            this._grid.setColumnDefinition(1, this._barSize, true);\r\n            this._verticalBar.isVisible = true;\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        this._buildClientSizes();\r\n\r\n        const ratio = this.host.idealRatio;\r\n\r\n        this._horizontalBar.thumbWidth = this._thumbLength * 0.9 * (this._clientWidth / ratio) + \"px\";\r\n        this._verticalBar.thumbWidth = this._thumbLength * 0.9 * (this._clientHeight / ratio) + \"px\";\r\n    }\r\n\r\n    public _link(host: AdvancedDynamicTexture): void {\r\n        super._link(host);\r\n\r\n        this._attachWheel();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _addBar(barControl: ScrollBar | ImageScrollBar, barContainer: Rectangle, isVertical: boolean, rotation: number) {\r\n        barControl.paddingLeft = 0;\r\n        barControl.width = \"100%\";\r\n        barControl.height = \"100%\";\r\n        barControl.barOffset = 0;\r\n        barControl.value = 0;\r\n        barControl.maximum = 1;\r\n        barControl.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        barControl.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n        barControl.isVertical = isVertical;\r\n        barControl.rotation = rotation;\r\n        barControl.isVisible = false;\r\n\r\n        barContainer.addControl(barControl);\r\n\r\n        barControl.onValueChangedObservable.add(() => {\r\n            this._setWindowPosition();\r\n        });\r\n    }\r\n\r\n    /** @internal */\r\n    private _attachWheel() {\r\n        if (!this._host || this._onWheelObserver) {\r\n            return;\r\n        }\r\n\r\n        this._onWheelObserver = this.onWheelObservable.add((pi) => {\r\n            if (!this._pointerIsOver || this.isReadOnly) {\r\n                return;\r\n            }\r\n            if (this._verticalBar.isVisible == true) {\r\n                if (pi.y < 0 && this._verticalBar.value > 0) {\r\n                    this._verticalBar.value -= this._wheelPrecision;\r\n                } else if (pi.y > 0 && this._verticalBar.value < this._verticalBar.maximum) {\r\n                    this._verticalBar.value += this._wheelPrecision;\r\n                }\r\n            }\r\n            if (this._horizontalBar.isVisible == true) {\r\n                if (pi.x < 0 && this._horizontalBar.value < this._horizontalBar.maximum) {\r\n                    this._horizontalBar.value += this._wheelPrecision;\r\n                } else if (pi.x > 0 && this._horizontalBar.value > 0) {\r\n                    this._horizontalBar.value -= this._wheelPrecision;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public _renderHighlightSpecific(context: ICanvasRenderingContext): void {\r\n        if (!this.isHighlighted) {\r\n            return;\r\n        }\r\n\r\n        super._renderHighlightSpecific(context);\r\n\r\n        this._grid._renderHighlightSpecific(context);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        this.onWheelObservable.remove(this._onWheelObserver);\r\n        this._onWheelObserver = null;\r\n        super.dispose();\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.ScrollViewer\", ScrollViewer);\r\n","import type { Nullable } from \"core/types\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport type { Vector2 } from \"core/Maths/math.vector\";\r\n\r\nimport { Rectangle } from \"./rectangle\";\r\nimport type { Control } from \"./control\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\n\r\n/**\r\n * Class used to create toggle buttons\r\n * @since 5.0.0\r\n */\r\nexport class ToggleButton extends Rectangle {\r\n    /**\r\n     * Function called to generate the toActive animation\r\n     */\r\n    public toActiveAnimation: () => void;\r\n\r\n    /**\r\n     * Function called to generate the toInactive animation\r\n     */\r\n    public toInactiveAnimation: () => void;\r\n\r\n    /**\r\n     * Function called to generate a pointer enter animation when the toggle button is active.\r\n     */\r\n    public pointerEnterActiveAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer out animation when the toggle button is active.\r\n     */\r\n    public pointerOutActiveAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer down animation when the toggle button is active.\r\n     */\r\n    public pointerDownActiveAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer up animation when the toggle button is active.\r\n     */\r\n    public pointerUpActiveAnimation: () => void;\r\n\r\n    /**\r\n     * Function called to generate a pointer enter animation when the toggle button is inactive.\r\n     */\r\n    public pointerEnterInactiveAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer out animation when the toggle button is inactive.\r\n     */\r\n    public pointerOutInactiveAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer down animation when the toggle button is inactive.\r\n     */\r\n    public pointerDownInactiveAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer up animation when the toggle button is inactive.\r\n     */\r\n    public pointerUpInactiveAnimation: () => void;\r\n\r\n    /** Observable raised when isActive is changed */\r\n    public onIsActiveChangedObservable = new Observable<boolean>();\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the toggle button will let internal controls handle picking instead of doing it directly using its bounding info\r\n     */\r\n    public delegatePickingToChildren = false;\r\n\r\n    private _group: string;\r\n    /** Gets or sets group name this toggle button belongs to */\r\n    public get group(): string {\r\n        return this._group;\r\n    }\r\n    public set group(value: string) {\r\n        if (this._group === value) {\r\n            return;\r\n        }\r\n\r\n        this._group = value;\r\n    }\r\n\r\n    private _isActive = false;\r\n    /** Gets or sets a boolean indicating if the toggle button is active or not */\r\n    public get isActive(): boolean {\r\n        return this._isActive;\r\n    }\r\n    public set isActive(value: boolean) {\r\n        // Function modeled after radioButton.ts\r\n        if (this._isActive === value) {\r\n            return;\r\n        }\r\n\r\n        this._isActive = value;\r\n\r\n        // Update the visual state based on the new value\r\n        if (this._isActive) {\r\n            this.toActiveAnimation?.();\r\n        } else {\r\n            this.toInactiveAnimation?.();\r\n        }\r\n\r\n        this._markAsDirty();\r\n\r\n        this.onIsActiveChangedObservable.notifyObservers(value);\r\n\r\n        if (this._isActive && this._host && this._group) {\r\n            // A toggle button in a group can only have 1 active element at a given time.\r\n            // If this toggle button has a group, set other toggle buttons in the group to inactive.\r\n            this._host.executeOnAllControls((control) => {\r\n                // Check for control type ToggleButton\r\n                if (control.typeName === \"ToggleButton\") {\r\n                    // Don't do anything to this toggle button\r\n                    if (control === this) {\r\n                        return;\r\n                    }\r\n\r\n                    const childToggle = <ToggleButton>control;\r\n                    // If toggle button is in same group, set isActive to false\r\n                    if (childToggle.group === this.group) {\r\n                        childToggle.isActive = false;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new ToggleButton\r\n     * @param name defines the control name\r\n     * @param group defines the toggle group this toggle belongs to\r\n     */\r\n    constructor(public name?: string, group?: string) {\r\n        super(name);\r\n        this.group = group ?? \"\";\r\n\r\n        this.thickness = 0;\r\n        this.isPointerBlocker = true;\r\n\r\n        let alphaStore: Nullable<number> = null;\r\n\r\n        this.toActiveAnimation = () => {\r\n            this.thickness = 1;\r\n        };\r\n        this.toInactiveAnimation = () => {\r\n            this.thickness = 0;\r\n        };\r\n\r\n        this.pointerEnterActiveAnimation = () => {\r\n            alphaStore = this.alpha;\r\n            this.alpha -= 0.1;\r\n        };\r\n\r\n        this.pointerOutActiveAnimation = () => {\r\n            if (alphaStore !== null) {\r\n                this.alpha = alphaStore;\r\n            }\r\n        };\r\n\r\n        this.pointerDownActiveAnimation = () => {\r\n            this.scaleX -= 0.05;\r\n            this.scaleY -= 0.05;\r\n        };\r\n\r\n        this.pointerUpActiveAnimation = () => {\r\n            this.scaleX += 0.05;\r\n            this.scaleY += 0.05;\r\n        };\r\n\r\n        this.pointerEnterInactiveAnimation = () => {\r\n            alphaStore = this.alpha;\r\n            this.alpha -= 0.1;\r\n        };\r\n\r\n        this.pointerOutInactiveAnimation = () => {\r\n            if (alphaStore !== null) {\r\n                this.alpha = alphaStore;\r\n            }\r\n        };\r\n\r\n        this.pointerDownInactiveAnimation = () => {\r\n            this.scaleX -= 0.05;\r\n            this.scaleY -= 0.05;\r\n        };\r\n\r\n        this.pointerUpInactiveAnimation = () => {\r\n            this.scaleX += 0.05;\r\n            this.scaleY += 0.05;\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ToggleButton\";\r\n    }\r\n\r\n    // While being a container, the toggle button behaves like a control.\r\n    /**\r\n     * @internal\r\n     */\r\n    public _processPicking(x: number, y: number, pi: PointerInfoBase, type: number, pointerId: number, buttonIndex: number, deltaX?: number, deltaY?: number): boolean {\r\n        if (!this._isEnabled || !this.isHitTestVisible || !this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.delegatePickingToChildren) {\r\n            let contains = false;\r\n            for (let index = this._children.length - 1; index >= 0; index--) {\r\n                const child = this._children[index];\r\n                if (child.isEnabled && child.isHitTestVisible && child.isVisible && !child.notRenderable && child.contains(x, y)) {\r\n                    contains = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!contains) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        this._processObservables(type, x, y, pi, pointerId, buttonIndex, deltaX, deltaY);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerEnter(target: Control, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerEnter(target, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isReadOnly) {\r\n            return true;\r\n        }\r\n\r\n        if (this._isActive) {\r\n            if (this.pointerEnterActiveAnimation) {\r\n                this.pointerEnterActiveAnimation();\r\n            }\r\n        } else {\r\n            if (this.pointerEnterInactiveAnimation) {\r\n                this.pointerEnterInactiveAnimation();\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerOut(target: Control, pi: PointerInfoBase, force = false): void {\r\n        if (!this.isReadOnly) {\r\n            if (this._isActive) {\r\n                if (this.pointerOutActiveAnimation) {\r\n                    this.pointerOutActiveAnimation();\r\n                }\r\n            } else {\r\n                if (this.pointerOutInactiveAnimation) {\r\n                    this.pointerOutInactiveAnimation();\r\n                }\r\n            }\r\n        }\r\n\r\n        super._onPointerOut(target, pi, force);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isReadOnly) {\r\n            return true;\r\n        }\r\n\r\n        if (this._isActive) {\r\n            if (this.pointerDownActiveAnimation) {\r\n                this.pointerDownActiveAnimation();\r\n            }\r\n        } else {\r\n            if (this.pointerDownInactiveAnimation) {\r\n                this.pointerDownInactiveAnimation();\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean, pi: PointerInfoBase): void {\r\n        if (!this.isReadOnly) {\r\n            if (this._isActive) {\r\n                if (this.pointerUpActiveAnimation) {\r\n                    this.pointerUpActiveAnimation();\r\n                }\r\n            } else {\r\n                if (this.pointerUpInactiveAnimation) {\r\n                    this.pointerUpInactiveAnimation();\r\n                }\r\n            }\r\n        }\r\n\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick, pi);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.ToggleButton\", ToggleButton);\r\n","import type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Observable } from \"core/Misc/observable\";\r\n\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { Button } from \"./button\";\r\nimport type { Container } from \"./container\";\r\nimport type { TextBlock } from \"./textBlock\";\r\nimport type { InputText } from \"./inputText\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport { InputTextArea } from \"./inputTextArea\";\r\n\r\n/**\r\n * Class used to store key control properties\r\n */\r\nexport class KeyPropertySet {\r\n    /** Width */\r\n    width?: string;\r\n    /** Height */\r\n    height?: string;\r\n    /** Left padding */\r\n    paddingLeft?: string;\r\n    /** Right padding */\r\n    paddingRight?: string;\r\n    /** Top padding */\r\n    paddingTop?: string;\r\n    /** Bottom padding */\r\n    paddingBottom?: string;\r\n    /** Foreground color */\r\n    color?: string;\r\n    /** Background color */\r\n    background?: string;\r\n}\r\n\r\ntype ConnectedInputText = {\r\n    input: InputText;\r\n    onFocusObserver: Nullable<Observer<InputText>>;\r\n    onBlurObserver: Nullable<Observer<InputText>>;\r\n};\r\n\r\n/**\r\n * Class used to create virtual keyboard\r\n */\r\nexport class VirtualKeyboard extends StackPanel {\r\n    /** Observable raised when a key is pressed */\r\n    public onKeyPressObservable = new Observable<string>();\r\n\r\n    /** Gets or sets default key button width */\r\n    public defaultButtonWidth = \"40px\";\r\n    /** Gets or sets default key button height */\r\n    public defaultButtonHeight = \"40px\";\r\n\r\n    /** Gets or sets default key button left padding */\r\n    public defaultButtonPaddingLeft = \"2px\";\r\n    /** Gets or sets default key button right padding */\r\n    public defaultButtonPaddingRight = \"2px\";\r\n    /** Gets or sets default key button top padding */\r\n    public defaultButtonPaddingTop = \"2px\";\r\n    /** Gets or sets default key button bottom padding */\r\n    public defaultButtonPaddingBottom = \"2px\";\r\n\r\n    /** Gets or sets default key button foreground color */\r\n    public defaultButtonColor = \"#DDD\";\r\n    /** Gets or sets default key button background color */\r\n    public defaultButtonBackground = \"#070707\";\r\n\r\n    /** Gets or sets shift button foreground color */\r\n    public shiftButtonColor = \"#7799FF\";\r\n    /** Gets or sets shift button thickness*/\r\n    public selectedShiftThickness = 1;\r\n\r\n    /** Gets shift key state */\r\n    public shiftState = 0;\r\n\r\n    protected _getTypeName(): string {\r\n        return \"VirtualKeyboard\";\r\n    }\r\n\r\n    private _createKey(key: string, propertySet: Nullable<KeyPropertySet>) {\r\n        const button = Button.CreateSimpleButton(key, key);\r\n\r\n        button.width = propertySet && propertySet.width ? propertySet.width : this.defaultButtonWidth;\r\n        button.height = propertySet && propertySet.height ? propertySet.height : this.defaultButtonHeight;\r\n        button.color = propertySet && propertySet.color ? propertySet.color : this.defaultButtonColor;\r\n        button.background = propertySet && propertySet.background ? propertySet.background : this.defaultButtonBackground;\r\n        button.paddingLeft = propertySet && propertySet.paddingLeft ? propertySet.paddingLeft : this.defaultButtonPaddingLeft;\r\n        button.paddingRight = propertySet && propertySet.paddingRight ? propertySet.paddingRight : this.defaultButtonPaddingRight;\r\n        button.paddingTop = propertySet && propertySet.paddingTop ? propertySet.paddingTop : this.defaultButtonPaddingTop;\r\n        button.paddingBottom = propertySet && propertySet.paddingBottom ? propertySet.paddingBottom : this.defaultButtonPaddingBottom;\r\n\r\n        button.thickness = 0;\r\n        button.isFocusInvisible = true;\r\n\r\n        button.shadowColor = this.shadowColor;\r\n        button.shadowBlur = this.shadowBlur;\r\n        button.shadowOffsetX = this.shadowOffsetX;\r\n        button.shadowOffsetY = this.shadowOffsetY;\r\n\r\n        button.onPointerUpObservable.add(() => {\r\n            this.onKeyPressObservable.notifyObservers(key);\r\n        });\r\n\r\n        return button;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row of keys\r\n     * @param keys defines the list of keys to add\r\n     * @param propertySets defines the associated property sets\r\n     */\r\n    public addKeysRow(keys: Array<string>, propertySets?: Array<KeyPropertySet>): void {\r\n        const panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.isFocusInvisible = true;\r\n\r\n        let maxKey: Nullable<Button> = null;\r\n        for (let i = 0; i < keys.length; i++) {\r\n            let properties = null;\r\n\r\n            if (propertySets && propertySets.length === keys.length) {\r\n                properties = propertySets[i];\r\n            }\r\n\r\n            const key = this._createKey(keys[i], properties);\r\n            if (!maxKey || key.heightInPixels > maxKey.heightInPixels) {\r\n                maxKey = key;\r\n            }\r\n\r\n            panel.addControl(key);\r\n        }\r\n\r\n        panel.height = maxKey ? maxKey.height : this.defaultButtonHeight;\r\n\r\n        this.addControl(panel);\r\n    }\r\n\r\n    /**\r\n     * Set the shift key to a specific state\r\n     * @param shiftState defines the new shift state\r\n     */\r\n    public applyShiftState(shiftState: number): void {\r\n        if (!this.children) {\r\n            return;\r\n        }\r\n\r\n        for (let i = 0; i < this.children.length; i++) {\r\n            const row = this.children[i];\r\n            if (!row || !(<Container>row).children) {\r\n                continue;\r\n            }\r\n\r\n            const rowContainer = <Container>row;\r\n            for (let j = 0; j < rowContainer.children.length; j++) {\r\n                const button = rowContainer.children[j] as Button;\r\n\r\n                if (!button || !button.children[0]) {\r\n                    continue;\r\n                }\r\n\r\n                const button_tblock = button.children[0] as TextBlock;\r\n\r\n                if (button_tblock.text === \"\\u21E7\") {\r\n                    button.color = shiftState ? this.shiftButtonColor : this.defaultButtonColor;\r\n                    button.thickness = shiftState > 1 ? this.selectedShiftThickness : 0;\r\n                }\r\n\r\n                button_tblock.text = shiftState > 0 ? button_tblock.text.toUpperCase() : button_tblock.text.toLowerCase();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _currentlyConnectedInputText: Nullable<InputText | InputTextArea> = null;\r\n    private _connectedInputTexts: ConnectedInputText[] = [];\r\n    private _onKeyPressObserver: Nullable<Observer<string>> = null;\r\n\r\n    /** Gets the input text control currently attached to the keyboard */\r\n    public get connectedInputText(): Nullable<InputText | InputTextArea> {\r\n        return this._currentlyConnectedInputText;\r\n    }\r\n\r\n    /**\r\n     * Connects the keyboard with an input text control\r\n     *\r\n     * @param input defines the target control\r\n     */\r\n    public connect(input: InputText): void {\r\n        const inputTextAlreadyConnected = this._connectedInputTexts.some((a) => a.input === input);\r\n        if (inputTextAlreadyConnected) {\r\n            return;\r\n        }\r\n\r\n        if (this._onKeyPressObserver === null) {\r\n            this._onKeyPressObserver = this.onKeyPressObservable.add((key) => {\r\n                if (!this._currentlyConnectedInputText) {\r\n                    return;\r\n                }\r\n\r\n                this._currentlyConnectedInputText._host.focusedControl = this._currentlyConnectedInputText;\r\n\r\n                switch (key) {\r\n                    case \"\\u21E7\":\r\n                        this.shiftState++;\r\n                        if (this.shiftState > 2) {\r\n                            this.shiftState = 0;\r\n                        }\r\n                        this.applyShiftState(this.shiftState);\r\n                        return;\r\n                    case \"\\u2190\":\r\n                        if (this._currentlyConnectedInputText instanceof InputTextArea) {\r\n                            this._currentlyConnectedInputText.alternativeProcessKey(\"Backspace\");\r\n                        } else {\r\n                            this._currentlyConnectedInputText.processKey(8);\r\n                        }\r\n                        return;\r\n                    case \"\\u21B5\":\r\n                        if (this._currentlyConnectedInputText instanceof InputTextArea) {\r\n                            this._currentlyConnectedInputText.alternativeProcessKey(\"Enter\");\r\n                        } else {\r\n                            this._currentlyConnectedInputText.processKey(13);\r\n                        }\r\n                        return;\r\n                }\r\n                if (this._currentlyConnectedInputText instanceof InputTextArea) {\r\n                    this._currentlyConnectedInputText.alternativeProcessKey(\"\", this.shiftState ? key.toUpperCase() : key);\r\n                } else {\r\n                    this._currentlyConnectedInputText.processKey(-1, this.shiftState ? key.toUpperCase() : key);\r\n                }\r\n\r\n                if (this.shiftState === 1) {\r\n                    this.shiftState = 0;\r\n                    this.applyShiftState(this.shiftState);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.isVisible = false;\r\n        this._currentlyConnectedInputText = input;\r\n        input._connectedVirtualKeyboard = this;\r\n\r\n        // Events hooking\r\n        const onFocusObserver: Nullable<Observer<InputText>> = input.onFocusObservable.add(() => {\r\n            this._currentlyConnectedInputText = input;\r\n            input._connectedVirtualKeyboard = this;\r\n            this.isVisible = true;\r\n        });\r\n\r\n        const onBlurObserver: Nullable<Observer<InputText>> = input.onBlurObservable.add(() => {\r\n            input._connectedVirtualKeyboard = null;\r\n            this._currentlyConnectedInputText = null;\r\n            this.isVisible = false;\r\n        });\r\n\r\n        this._connectedInputTexts.push({\r\n            input,\r\n            onBlurObserver,\r\n            onFocusObserver,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Disconnects the keyboard from connected InputText controls\r\n     *\r\n     * @param input optionally defines a target control, otherwise all are disconnected\r\n     */\r\n    public disconnect(input?: InputText): void {\r\n        if (input) {\r\n            // .find not available on IE\r\n            const filtered = this._connectedInputTexts.filter((a) => a.input === input);\r\n            if (filtered.length === 1) {\r\n                this._removeConnectedInputObservables(filtered[0]);\r\n\r\n                this._connectedInputTexts = this._connectedInputTexts.filter((a) => a.input !== input);\r\n                if (this._currentlyConnectedInputText === input) {\r\n                    this._currentlyConnectedInputText = null;\r\n                }\r\n            }\r\n        } else {\r\n            this._connectedInputTexts.forEach((connectedInputText: ConnectedInputText) => {\r\n                this._removeConnectedInputObservables(connectedInputText);\r\n            });\r\n            this._connectedInputTexts.length = 0;\r\n        }\r\n\r\n        if (this._connectedInputTexts.length === 0) {\r\n            this._currentlyConnectedInputText = null;\r\n            this.onKeyPressObservable.remove(this._onKeyPressObserver);\r\n            this._onKeyPressObserver = null;\r\n        }\r\n    }\r\n\r\n    private _removeConnectedInputObservables(connectedInputText: ConnectedInputText): void {\r\n        connectedInputText.input._connectedVirtualKeyboard = null;\r\n        connectedInputText.input.onFocusObservable.remove(connectedInputText.onFocusObserver);\r\n        connectedInputText.input.onBlurObservable.remove(connectedInputText.onBlurObserver);\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n\r\n        this.disconnect();\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Creates a new keyboard using a default layout\r\n     *\r\n     * @param name defines control name\r\n     * @returns a new VirtualKeyboard\r\n     */\r\n    public static CreateDefaultLayout(name?: string): VirtualKeyboard {\r\n        const returnValue = new VirtualKeyboard(name);\r\n\r\n        returnValue.addKeysRow([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"\\u2190\"]);\r\n        returnValue.addKeysRow([\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"]);\r\n        returnValue.addKeysRow([\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \";\", \"'\", \"\\u21B5\"]);\r\n        returnValue.addKeysRow([\"\\u21E7\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \",\", \".\", \"/\"]);\r\n        returnValue.addKeysRow([\" \"], [{ width: \"200px\" }]);\r\n\r\n        return returnValue;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _parseFromContent(serializedObject: any, host: AdvancedDynamicTexture) {\r\n        super._parseFromContent(serializedObject, host);\r\n        for (const row of this.children) {\r\n            if (row.getClassName() === \"StackPanel\") {\r\n                const stackPanel = row as StackPanel;\r\n                for (const key of stackPanel.children) {\r\n                    if (key.getClassName() === \"Button\" && key.name) {\r\n                        key.onPointerUpObservable.add(() => {\r\n                            this.onKeyPressObservable.notifyObservers(key.name as string);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.VirtualKeyboard\", VirtualKeyboard);\r\n","import { Control } from \"./control\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/** Class used to render a grid  */\r\nexport class DisplayGrid extends Control {\r\n    private _cellWidth = 20;\r\n    private _cellHeight = 20;\r\n\r\n    private _minorLineTickness = 1;\r\n    private _minorLineColor = \"DarkGray\";\r\n\r\n    private _majorLineTickness = 2;\r\n    private _majorLineColor = \"White\";\r\n\r\n    private _majorLineFrequency = 5;\r\n\r\n    private _background = \"Black\";\r\n\r\n    private _displayMajorLines = true;\r\n    private _displayMinorLines = true;\r\n\r\n    /** Gets or sets a boolean indicating if minor lines must be rendered (true by default)) */\r\n    @serialize()\r\n    public get displayMinorLines(): boolean {\r\n        return this._displayMinorLines;\r\n    }\r\n\r\n    public set displayMinorLines(value: boolean) {\r\n        if (this._displayMinorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMinorLines = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if major lines must be rendered (true by default)) */\r\n    @serialize()\r\n    public get displayMajorLines(): boolean {\r\n        return this._displayMajorLines;\r\n    }\r\n\r\n    public set displayMajorLines(value: boolean) {\r\n        if (this._displayMajorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMajorLines = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color (Black by default) */\r\n    @serialize()\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the width of each cell (20 by default) */\r\n    @serialize()\r\n    public get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n\r\n    public set cellWidth(value: number) {\r\n        this._cellWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of each cell (20 by default) */\r\n    @serialize()\r\n    public get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n\r\n    public set cellHeight(value: number) {\r\n        this._cellHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of minor lines (1 by default) */\r\n    @serialize()\r\n    public get minorLineTickness(): number {\r\n        return this._minorLineTickness;\r\n    }\r\n\r\n    public set minorLineTickness(value: number) {\r\n        this._minorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of minor lines (DarkGray by default) */\r\n    @serialize()\r\n    public get minorLineColor(): string {\r\n        return this._minorLineColor;\r\n    }\r\n\r\n    public set minorLineColor(value: string) {\r\n        this._minorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of major lines (2 by default) */\r\n    @serialize()\r\n    public get majorLineTickness(): number {\r\n        return this._majorLineTickness;\r\n    }\r\n\r\n    public set majorLineTickness(value: number) {\r\n        this._majorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of major lines (White by default) */\r\n    @serialize()\r\n    public get majorLineColor(): string {\r\n        return this._majorLineColor;\r\n    }\r\n\r\n    public set majorLineColor(value: string) {\r\n        this._majorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the frequency of major lines (default is 1 every 5 minor lines)*/\r\n    @serialize()\r\n    public get majorLineFrequency(): number {\r\n        return this._majorLineFrequency;\r\n    }\r\n\r\n    public set majorLineFrequency(value: number) {\r\n        this._majorLineFrequency = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new GridDisplayRectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._isEnabled) {\r\n            if (this._background) {\r\n                context.fillStyle = this._background;\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n\r\n            const cellCountX = this._currentMeasure.width / this._cellWidth;\r\n            const cellCountY = this._currentMeasure.height / this._cellHeight;\r\n\r\n            // Minor lines\r\n            const left = this._currentMeasure.left + this._currentMeasure.width / 2;\r\n            const top = this._currentMeasure.top + this._currentMeasure.height / 2;\r\n\r\n            if (this._displayMinorLines) {\r\n                context.strokeStyle = this._minorLineColor;\r\n                context.lineWidth = this._minorLineTickness;\r\n\r\n                for (let x = -cellCountX / 2 + 1; x < cellCountX / 2; x++) {\r\n                    const cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n\r\n                    context.stroke();\r\n                }\r\n\r\n                for (let y = -cellCountY / 2 + 1; y < cellCountY / 2; y++) {\r\n                    const cellY = top + y * this.cellHeight;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.stroke();\r\n                }\r\n            }\r\n\r\n            // Major lines\r\n            if (this._displayMajorLines) {\r\n                context.strokeStyle = this._majorLineColor;\r\n                context.lineWidth = this._majorLineTickness;\r\n\r\n                for (let x = -cellCountX / 2 + this._majorLineFrequency; x < cellCountX / 2; x += this._majorLineFrequency) {\r\n                    const cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n                    context.stroke();\r\n                }\r\n\r\n                for (let y = -cellCountY / 2 + this._majorLineFrequency; y < cellCountY / 2; y += this._majorLineFrequency) {\r\n                    const cellY = top + y * this.cellHeight;\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.closePath();\r\n                    context.stroke();\r\n                }\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"DisplayGrid\";\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.DisplayGrid\", DisplayGrid);\r\n","import { BaseSlider } from \"./baseSlider\";\r\nimport { Measure } from \"../../measure\";\r\nimport { Image } from \"../image\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport type { AdvancedDynamicTexture } from \"../../advancedDynamicTexture\";\r\n\r\n/**\r\n * Class used to create slider controls based on images\r\n */\r\nexport class ImageBasedSlider extends BaseSlider {\r\n    private _backgroundImage: Image;\r\n    private _thumbImage: Image;\r\n    private _valueBarImage: Image;\r\n    private _tempMeasure = new Measure(0, 0, 0, 0);\r\n\r\n    @serialize()\r\n    public get displayThumb(): boolean {\r\n        return this._displayThumb && this.thumbImage != null;\r\n    }\r\n\r\n    public set displayThumb(value: boolean) {\r\n        if (this._displayThumb === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayThumb = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the background\r\n     */\r\n    public get backgroundImage(): Image {\r\n        return this._backgroundImage;\r\n    }\r\n\r\n    public set backgroundImage(value: Image) {\r\n        if (this._backgroundImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._backgroundImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the value bar\r\n     */\r\n    public get valueBarImage(): Image {\r\n        return this._valueBarImage;\r\n    }\r\n\r\n    public set valueBarImage(value: Image) {\r\n        if (this._valueBarImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._valueBarImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the thumb\r\n     */\r\n    public get thumbImage(): Image {\r\n        return this._thumbImage;\r\n    }\r\n\r\n    public set thumbImage(value: Image) {\r\n        if (this._thumbImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new ImageBasedSlider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ImageBasedSlider\";\r\n    }\r\n\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        this._prepareRenderingData(\"rectangle\");\r\n        const thumbPosition = this._getThumbPosition();\r\n        const left = this._renderLeft;\r\n        const top = this._renderTop;\r\n        const width = this._renderWidth;\r\n        const height = this._renderHeight;\r\n\r\n        // Background\r\n        if (this._backgroundImage) {\r\n            this._tempMeasure.copyFromFloats(left, top, width, height);\r\n            if (this.isThumbClamped && this.displayThumb) {\r\n                if (this.isVertical) {\r\n                    this._tempMeasure.height += this._effectiveThumbThickness;\r\n                } else {\r\n                    this._tempMeasure.width += this._effectiveThumbThickness;\r\n                }\r\n            }\r\n            this._backgroundImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._backgroundImage._draw(context);\r\n        }\r\n\r\n        // Bar\r\n        if (this._valueBarImage) {\r\n            if (this.isVertical) {\r\n                if (this.isThumbClamped && this.displayThumb) {\r\n                    this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);\r\n                } else {\r\n                    this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition);\r\n                }\r\n            } else {\r\n                if (this.isThumbClamped && this.displayThumb) {\r\n                    this._tempMeasure.copyFromFloats(left, top, thumbPosition + this._effectiveThumbThickness / 2, height);\r\n                } else {\r\n                    this._tempMeasure.copyFromFloats(left, top, thumbPosition, height);\r\n                }\r\n            }\r\n            this._valueBarImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._valueBarImage._draw(context);\r\n        }\r\n\r\n        // Thumb\r\n        if (this.displayThumb) {\r\n            if (this.isVertical) {\r\n                this._tempMeasure.copyFromFloats(\r\n                    left - this._effectiveBarOffset,\r\n                    this._currentMeasure.top + thumbPosition,\r\n                    this._currentMeasure.width,\r\n                    this._effectiveThumbThickness\r\n                );\r\n            } else {\r\n                this._tempMeasure.copyFromFloats(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n            }\r\n\r\n            this._thumbImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._thumbImage._draw(context);\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    /**\r\n     * Serializes the current control\r\n     * @param serializationObject defined the JSON serialized object\r\n     */\r\n    public serialize(serializationObject: any) {\r\n        super.serialize(serializationObject);\r\n        const backgroundImage = {};\r\n        const thumbImage = {};\r\n        const valueBarImage = {};\r\n        this.backgroundImage.serialize(backgroundImage);\r\n        this.thumbImage.serialize(thumbImage);\r\n        this.valueBarImage.serialize(valueBarImage);\r\n        serializationObject.backgroundImage = backgroundImage;\r\n        serializationObject.thumbImage = thumbImage;\r\n        serializationObject.valueBarImage = valueBarImage;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _parseFromContent(serializedObject: any, host: AdvancedDynamicTexture) {\r\n        super._parseFromContent(serializedObject, host);\r\n        this.backgroundImage = Image.Parse(serializedObject.backgroundImage, host) as Image;\r\n        this.thumbImage = Image.Parse(serializedObject.thumbImage, host) as Image;\r\n        this.valueBarImage = Image.Parse(serializedObject.valueBarImage, host) as Image;\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.ImageBasedSlider\", ImageBasedSlider);\r\n","import { Control } from \"./control\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Forcing an export so that this code will execute\r\n * @internal\r\n */\r\nconst name = \"Statics\";\r\n\r\nexport { name };\r\n\r\n/**\r\n * Creates a stack panel that can be used to render headers\r\n * @param control defines the control to associate with the header\r\n * @param text defines the text of the header\r\n * @param size defines the size of the header\r\n * @param options defines options used to configure the header\r\n * @param options.isHorizontal\r\n * @param options.controlFirst\r\n * @returns a new StackPanel\r\n */\r\nControl.AddHeader = function (control: Control, text: string, size: string | number, options: { isHorizontal: boolean; controlFirst: boolean }): StackPanel {\r\n    const panel = new StackPanel(\"panel\");\r\n    const isHorizontal = options ? options.isHorizontal : true;\r\n    const controlFirst = options ? options.controlFirst : true;\r\n\r\n    panel.isVertical = !isHorizontal;\r\n\r\n    const header = new TextBlock(\"header\");\r\n    header.text = text;\r\n    header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    if (isHorizontal) {\r\n        header.width = size;\r\n    } else {\r\n        header.height = size;\r\n    }\r\n\r\n    if (controlFirst) {\r\n        panel.addControl(control);\r\n        panel.addControl(header);\r\n        header.paddingLeft = \"5px\";\r\n    } else {\r\n        panel.addControl(header);\r\n        panel.addControl(control);\r\n        header.paddingRight = \"5px\";\r\n    }\r\n\r\n    header.shadowBlur = control.shadowBlur;\r\n    header.shadowColor = control.shadowColor;\r\n    header.shadowOffsetX = control.shadowOffsetX;\r\n    header.shadowOffsetY = control.shadowOffsetY;\r\n\r\n    return panel;\r\n};\r\n","/*\r\n * Base Gradient class. Should not be used directly.\r\n */\r\n\r\nimport type { ICanvasGradient, ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/**\r\n * Type that represents a single stop on the gradient.\r\n */\r\nexport type GradientColorStop = {\r\n    /**\r\n     * Offset from the start where the color will be applied.\r\n     */\r\n    offset: number;\r\n    /**\r\n     * Color to be applied.\r\n     */\r\n    color: string;\r\n};\r\n\r\n/**\r\n * Class that serves as a base for all the gradients created from context.\r\n */\r\nexport abstract class BaseGradient {\r\n    private _colorStops: GradientColorStop[] = [];\r\n\r\n    private _canvasGradient: CanvasGradient;\r\n    private _context: ICanvasRenderingContext;\r\n    private _gradientDirty: boolean = true;\r\n\r\n    /**\r\n     * Overwritten by child classes to create the canvas gradient.\r\n     * @param context\r\n     */\r\n    protected abstract _createCanvasGradient(context: ICanvasRenderingContext): ICanvasGradient;\r\n\r\n    private _addColorStopsToCanvasGradient() {\r\n        for (const stop of this._colorStops) {\r\n            this._canvasGradient.addColorStop(stop.offset, stop.color);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * If there are any changes or the context changed, regenerate the canvas gradient object. Else,\r\n     * reuse the existing gradient.\r\n     **/\r\n    public getCanvasGradient(context: ICanvasRenderingContext) {\r\n        if (this._gradientDirty || this._context !== context) {\r\n            this._context = context;\r\n            this._canvasGradient = this._createCanvasGradient(context);\r\n            this._addColorStopsToCanvasGradient();\r\n            this._gradientDirty = false;\r\n        }\r\n        return this._canvasGradient;\r\n    }\r\n\r\n    /**\r\n     * Adds a new color stop to the gradient.\r\n     * @param offset the offset of the stop on the gradient. Should be between 0 and 1\r\n     * @param color the color of the stop\r\n     */\r\n    public addColorStop(offset: number, color: string) {\r\n        this._colorStops.push({ offset, color });\r\n        this._gradientDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Removes an existing color stop with the specified offset from the gradient\r\n     * @param offset the offset of the stop to be removed\r\n     */\r\n    public removeColorStop(offset: number) {\r\n        this._colorStops = this._colorStops.filter((colorStop) => colorStop.offset !== offset);\r\n        this._gradientDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Removes all color stops from the gradient\r\n     */\r\n    public clearColorStops() {\r\n        this._colorStops = [];\r\n        this._gradientDirty = true;\r\n    }\r\n\r\n    /** Color stops of the gradient */\r\n    public get colorStops() {\r\n        return this._colorStops;\r\n    }\r\n\r\n    /** Type of the gradient */\r\n    public getClassName() {\r\n        return \"BaseGradient\";\r\n    }\r\n\r\n    /** Serialize into a json object */\r\n    public serialize(serializationObject: any) {\r\n        serializationObject.colorStops = this._colorStops;\r\n        serializationObject.className = this.getClassName();\r\n    }\r\n\r\n    /** Parse from json object */\r\n    public parse(serializationObject: any) {\r\n        this._colorStops = serializationObject.colorStops;\r\n    }\r\n}\r\n","import type { ICanvasGradient, ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport { BaseGradient } from \"./BaseGradient\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\n\r\n/**\r\n * Gradient along a line that connects two coordinates.\r\n * These coordinates are relative to the canvas' space, not to any control's space.\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createLinearGradient\r\n */\r\nexport class LinearGradient extends BaseGradient {\r\n    private _x0: number;\r\n    private _y0: number;\r\n    private _x1: number;\r\n    private _y1: number;\r\n\r\n    /**\r\n     * Creates a new linear gradient\r\n     * @param x0\r\n     * @param y0\r\n     * @param x1\r\n     * @param y1\r\n     */\r\n    constructor(x0?: number, y0?: number, x1?: number, y1?: number) {\r\n        super();\r\n        this._x0 = x0 ?? 0;\r\n        this._y0 = y0 ?? 0;\r\n        this._x1 = x1 ?? 0;\r\n        this._y1 = y1 ?? 0;\r\n    }\r\n\r\n    protected _createCanvasGradient(context: ICanvasRenderingContext): ICanvasGradient {\r\n        return context.createLinearGradient(this._x0, this._y0, this._x1, this._y1);\r\n    }\r\n\r\n    /** X axis coordinate of the starting point in the line */\r\n    public get x0() {\r\n        return this._x0;\r\n    }\r\n\r\n    /** X axis coordinate of the ending point in the line */\r\n    public get x1() {\r\n        return this._x1;\r\n    }\r\n\r\n    /** Y axis coordinate of the starting point in the line */\r\n    public get y0() {\r\n        return this._y0;\r\n    }\r\n\r\n    /** Y axis coordinate of the ending point in the line */\r\n    public get y1() {\r\n        return this._y1;\r\n    }\r\n\r\n    /**\r\n     * Class name of the gradient\r\n     * @returns the class name of the gradient\r\n     */\r\n    public getClassName(): string {\r\n        return \"LinearGradient\";\r\n    }\r\n\r\n    /**\r\n     * Serializes this gradient\r\n     * @param serializationObject the object to serialize to\r\n     */\r\n    public serialize(serializationObject: any): void {\r\n        super.serialize(serializationObject);\r\n        serializationObject.x0 = this._x0;\r\n        serializationObject.y0 = this._y0;\r\n        serializationObject.x1 = this._x1;\r\n        serializationObject.y1 = this._y1;\r\n    }\r\n\r\n    /**\r\n     * Parses a gradient from a serialization object\r\n     * @param serializationObject the object to parse from\r\n     */\r\n    public parse(serializationObject: any): void {\r\n        super.parse(serializationObject);\r\n        this._x0 = serializationObject.x0;\r\n        this._y0 = serializationObject.y0;\r\n        this._x1 = serializationObject.x1;\r\n        this._y1 = serializationObject.y1;\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.LinearGradient\", LinearGradient);\r\n","import type { ICanvasGradient, ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport { BaseGradient } from \"./BaseGradient\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\n\r\n/**\r\n * Gradient formed from two circles with their own centers and radius.\r\n * The coordinates of the circles centers are relative to the canvas' space, not to any control's space.\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createRadialGradient\r\n */\r\nexport class RadialGradient extends BaseGradient {\r\n    private _x0: number;\r\n    private _y0: number;\r\n    private _r0: number;\r\n    private _x1: number;\r\n    private _y1: number;\r\n    private _r1: number;\r\n\r\n    /**\r\n     * Creates a new radial gradient\r\n     * @param x0 x coordinate of the first circle's center\r\n     * @param y0 y coordinate of the first circle's center\r\n     * @param r0 radius of the first circle\r\n     * @param x1 x coordinate of the second circle's center\r\n     * @param y1 y coordinate of the second circle's center\r\n     * @param r1 radius of the second circle\r\n     */\r\n    constructor(x0?: number, y0?: number, r0?: number, x1?: number, y1?: number, r1?: number) {\r\n        super();\r\n        this._x0 = x0 ?? 0;\r\n        this._y0 = y0 ?? 0;\r\n        this._r0 = r0 ?? 0;\r\n        this._x1 = x1 ?? 0;\r\n        this._y1 = y1 ?? 0;\r\n        this._r1 = r1 ?? 0;\r\n    }\r\n\r\n    protected _createCanvasGradient(context: ICanvasRenderingContext): ICanvasGradient {\r\n        return context.createRadialGradient(this._x0, this._y0, this._r0, this._x1, this._y1, this._r1);\r\n    }\r\n\r\n    /** x coordinate of the first circle's center */\r\n    public get x0() {\r\n        return this._x0;\r\n    }\r\n\r\n    /** x coordinate of the second circle's center */\r\n    public get x1() {\r\n        return this._x1;\r\n    }\r\n\r\n    /** y coordinate of the first circle's center */\r\n    public get y0() {\r\n        return this._y0;\r\n    }\r\n\r\n    /** y coordinate of the second circle's center */\r\n    public get y1() {\r\n        return this._y1;\r\n    }\r\n\r\n    /** radius of the first circle */\r\n    public get r0() {\r\n        return this._r0;\r\n    }\r\n\r\n    /** radius of the second circle */\r\n    public get r1() {\r\n        return this._r1;\r\n    }\r\n\r\n    /**\r\n     * Class name of the gradient\r\n     * @returns the class name of the gradient\r\n     */\r\n    public getClassName() {\r\n        return \"RadialGradient\";\r\n    }\r\n\r\n    /**\r\n     * Serializes this gradient\r\n     * @param serializationObject the object to serialize to\r\n     */\r\n    public serialize(serializationObject: any): void {\r\n        super.serialize(serializationObject);\r\n        serializationObject.x0 = this._x0;\r\n        serializationObject.y0 = this._y0;\r\n        serializationObject.r0 = this._r0;\r\n        serializationObject.x1 = this._x1;\r\n        serializationObject.y1 = this._y1;\r\n        serializationObject.r1 = this._r1;\r\n    }\r\n\r\n    /**\r\n     * Parses a gradient from a serialization object\r\n     * @param serializationObject the object to parse from\r\n     */\r\n    public parse(serializationObject: any): void {\r\n        super.parse(serializationObject);\r\n        this._x0 = serializationObject.x0;\r\n        this._y0 = serializationObject.y0;\r\n        this._r0 = serializationObject.r0;\r\n        this._x1 = serializationObject.x1;\r\n        this._y1 = serializationObject.y1;\r\n        this._r1 = serializationObject.r1;\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.RadialGradient\", RadialGradient);\r\n","import { Observable } from \"core/Misc/observable\";\r\nimport type { IDisposable } from \"core/scene\";\r\nimport type { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\n\r\n/**\r\n * Define a style used by control to automatically setup properties based on a template.\r\n * Only support font related properties so far\r\n */\r\nexport class Style implements IDisposable {\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    /** @internal */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** @internal */\r\n    public _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n\r\n    /**\r\n     * Observable raised when the style values are changed\r\n     */\r\n    public onChangedObservable = new Observable<Style>();\r\n\r\n    /**\r\n     * Creates a new style object\r\n     * @param host defines the AdvancedDynamicTexture which hosts this style\r\n     */\r\n    public constructor(host: AdvancedDynamicTexture) {\r\n        this._host = host;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font size\r\n     */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this.onChangedObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font family\r\n     */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font style\r\n     */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Dispose all associated resources */\r\n    public dispose() {\r\n        this.onChangedObservable.clear();\r\n    }\r\n}\r\n","import type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport { Vector2, Vector3, TmpVectors } from \"core/Maths/math.vector\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport type { PointerInfoPre, PointerInfo, PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { PointerEventTypes } from \"core/Events/pointerEvents\";\r\nimport { ClipboardEventTypes, ClipboardInfo } from \"core/Events/clipboardEvents\";\r\nimport type { KeyboardInfoPre } from \"core/Events/keyboardEvents\";\r\nimport { KeyboardEventTypes } from \"core/Events/keyboardEvents\";\r\nimport type { Camera } from \"core/Cameras/camera\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport { DynamicTexture } from \"core/Materials/Textures/dynamicTexture\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { Layer } from \"core/Layers/layer\";\r\nimport type { Engine } from \"core/Engines/engine\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\nimport { Container } from \"./controls/container\";\r\nimport { Control } from \"./controls/control\";\r\nimport type { IFocusableControl } from \"./controls/focusableControl\";\r\nimport { Style } from \"./style\";\r\nimport { Measure } from \"./measure\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport { Viewport } from \"core/Maths/math.viewport\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { WebRequest } from \"core/Misc/webRequest\";\r\nimport type { IPointerEvent, IWheelEvent } from \"core/Events/deviceInputEvents\";\r\nimport { RandomGUID } from \"core/Misc/guid\";\r\nimport { GetClass } from \"core/Misc/typeStore\";\r\nimport { DecodeBase64ToBinary } from \"core/Misc/stringTools\";\r\n\r\nimport type { StandardMaterial } from \"core/Materials/standardMaterial\";\r\n\r\n/**\r\n * Class used to create texture to support 2D GUI elements\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui\r\n */\r\nexport class AdvancedDynamicTexture extends DynamicTexture {\r\n    /** Define the Uurl to load snippets */\r\n    public static SnippetUrl = Constants.SnippetUrl;\r\n\r\n    /** Indicates if some optimizations can be performed in GUI GPU management (the downside is additional memory/GPU texture memory used) */\r\n    public static AllowGPUOptimizations = true;\r\n\r\n    /** Snippet ID if the content was created from the snippet server */\r\n    public snippetId: string;\r\n\r\n    /** Observable that fires when the GUI is ready */\r\n    public onGuiReadyObservable = new Observable<AdvancedDynamicTexture>();\r\n\r\n    private _isDirty = false;\r\n    private _renderObserver: Nullable<Observer<Camera>>;\r\n    private _resizeObserver: Nullable<Observer<Engine>>;\r\n    private _preKeyboardObserver: Nullable<Observer<KeyboardInfoPre>>;\r\n    private _prePointerObserver: Nullable<Observer<PointerInfoPre>>;\r\n    private _sceneRenderObserver: Nullable<Observer<Scene>>;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _canvasPointerOutObserver: Nullable<Observer<PointerEvent>>;\r\n    private _canvasBlurObserver: Nullable<Observer<Engine>>;\r\n    private _controlAddedObserver: Nullable<Observer<Nullable<Control>>>;\r\n    private _controlRemovedObserver: Nullable<Observer<Nullable<Control>>>;\r\n    private _background: string;\r\n    /** @internal */\r\n    public _rootContainer = new Container(\"root\");\r\n    /** @internal */\r\n    public _lastPickedControl: Control;\r\n    /** @internal */\r\n    public _lastControlOver: { [pointerId: number]: Control } = {};\r\n    /** @internal */\r\n    public _lastControlDown: { [pointerId: number]: Control } = {};\r\n    /** @internal */\r\n    public _capturingControl: { [pointerId: number]: Control } = {};\r\n    /** @internal */\r\n    public _shouldBlockPointer: boolean;\r\n    /** @internal */\r\n    public _layerToDispose: Nullable<Layer>;\r\n    /** @internal */\r\n    public _linkedControls = new Array<Control>();\r\n    private _isFullscreen = false;\r\n    private _fullscreenViewport = new Viewport(0, 0, 1, 1);\r\n    private _idealWidth = 0;\r\n    private _idealHeight = 0;\r\n    private _useSmallestIdeal: boolean = false;\r\n    private _renderAtIdealSize = false;\r\n    private _focusedControl: Nullable<IFocusableControl>;\r\n    private _blockNextFocusCheck = false;\r\n    private _renderScale = 1;\r\n    private _rootElement: Nullable<HTMLElement>;\r\n    private _cursorChanged = false;\r\n    private _defaultMousePointerId = 0;\r\n    private _rootChildrenHaveChanged: boolean = false;\r\n\r\n    /** @internal */\r\n    public _capturedPointerIds = new Set<number>();\r\n\r\n    /** @internal */\r\n    public _numLayoutCalls = 0;\r\n    /** Gets the number of layout calls made the last time the ADT has been rendered */\r\n    public get numLayoutCalls(): number {\r\n        return this._numLayoutCalls;\r\n    }\r\n\r\n    /** @internal */\r\n    public _numRenderCalls = 0;\r\n    /** Gets the number of render calls made the last time the ADT has been rendered */\r\n    public get numRenderCalls(): number {\r\n        return this._numRenderCalls;\r\n    }\r\n\r\n    /**\r\n     * Define type to string to ensure compatibility across browsers\r\n     * Safari doesn't support DataTransfer constructor\r\n     */\r\n    private _clipboardData: string = \"\";\r\n    /**\r\n     * Observable event triggered each time an clipboard event is received from the rendering canvas\r\n     */\r\n    public onClipboardObservable = new Observable<ClipboardInfo>();\r\n    /**\r\n     * Observable event triggered each time a pointer down is intercepted by a control\r\n     */\r\n    public onControlPickedObservable = new Observable<Control>();\r\n    /**\r\n     * Observable event triggered before layout is evaluated\r\n     */\r\n    public onBeginLayoutObservable = new Observable<AdvancedDynamicTexture>();\r\n    /**\r\n     * Observable event triggered after the layout was evaluated\r\n     */\r\n    public onEndLayoutObservable = new Observable<AdvancedDynamicTexture>();\r\n    /**\r\n     * Observable event triggered before the texture is rendered\r\n     */\r\n    public onBeginRenderObservable = new Observable<AdvancedDynamicTexture>();\r\n    /**\r\n     * Observable event triggered after the texture was rendered\r\n     */\r\n    public onEndRenderObservable = new Observable<AdvancedDynamicTexture>();\r\n    /**\r\n     * Gets or sets a boolean defining if alpha is stored as premultiplied\r\n     */\r\n    public premulAlpha = false;\r\n    /**\r\n     * Gets or sets a boolean indicating that the canvas must be reverted on Y when updating the texture\r\n     */\r\n    public applyYInversionOnUpdate = true;\r\n    /**\r\n     * Gets or sets a number used to scale rendering size (2 means that the texture will be twice bigger).\r\n     * Useful when you want more antialiasing\r\n     */\r\n    public get renderScale(): number {\r\n        return this._renderScale;\r\n    }\r\n    public set renderScale(value: number) {\r\n        if (value === this._renderScale) {\r\n            return;\r\n        }\r\n        this._renderScale = value;\r\n        this._onResize();\r\n    }\r\n    /** Gets or sets the background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n        this._background = value;\r\n        this.markAsDirty();\r\n    }\r\n    /**\r\n     * Gets or sets the ideal width used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling\r\n     */\r\n    public get idealWidth(): number {\r\n        return this._idealWidth;\r\n    }\r\n    public set idealWidth(value: number) {\r\n        if (this._idealWidth === value) {\r\n            return;\r\n        }\r\n        this._idealWidth = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n    /**\r\n     * Gets or sets the ideal height used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling\r\n     */\r\n    public get idealHeight(): number {\r\n        return this._idealHeight;\r\n    }\r\n    public set idealHeight(value: number) {\r\n        if (this._idealHeight === value) {\r\n            return;\r\n        }\r\n        this._idealHeight = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n    /**\r\n     * Gets or sets a boolean indicating if the smallest ideal value must be used if idealWidth and idealHeight are both set\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling\r\n     */\r\n    public get useSmallestIdeal(): boolean {\r\n        return this._useSmallestIdeal;\r\n    }\r\n    public set useSmallestIdeal(value: boolean) {\r\n        if (this._useSmallestIdeal === value) {\r\n            return;\r\n        }\r\n        this._useSmallestIdeal = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n    /**\r\n     * Gets or sets a boolean indicating if adaptive scaling must be used\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling\r\n     */\r\n    public get renderAtIdealSize(): boolean {\r\n        return this._renderAtIdealSize;\r\n    }\r\n    public set renderAtIdealSize(value: boolean) {\r\n        if (this._renderAtIdealSize === value) {\r\n            return;\r\n        }\r\n        this._renderAtIdealSize = value;\r\n        this._onResize();\r\n    }\r\n\r\n    /**\r\n     * Gets the ratio used when in \"ideal mode\"\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling\r\n     * */\r\n    public get idealRatio(): number {\r\n        let rwidth: number = 0;\r\n        let rheight: number = 0;\r\n\r\n        if (this._idealWidth) {\r\n            rwidth = this.getSize().width / this._idealWidth;\r\n        }\r\n\r\n        if (this._idealHeight) {\r\n            rheight = this.getSize().height / this._idealHeight;\r\n        }\r\n\r\n        if (this._useSmallestIdeal && this._idealWidth && this._idealHeight) {\r\n            return window.innerWidth < window.innerHeight ? rwidth : rheight;\r\n        }\r\n\r\n        if (this._idealWidth) {\r\n            // horizontal\r\n            return rwidth;\r\n        }\r\n\r\n        if (this._idealHeight) {\r\n            // vertical\r\n            return rheight;\r\n        }\r\n\r\n        return 1;\r\n    }\r\n\r\n    /**\r\n     * Gets the underlying layer used to render the texture when in fullscreen mode\r\n     */\r\n    public get layer(): Nullable<Layer> {\r\n        return this._layerToDispose;\r\n    }\r\n    /**\r\n     * Gets the root container control\r\n     */\r\n    public get rootContainer(): Container {\r\n        return this._rootContainer;\r\n    }\r\n    /**\r\n     * Returns an array containing the root container.\r\n     * This is mostly used to let the Inspector introspects the ADT\r\n     * @returns an array containing the rootContainer\r\n     */\r\n    public getChildren(): Array<Container> {\r\n        return [this._rootContainer];\r\n    }\r\n    /**\r\n     * Will return all controls that are inside this texture\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @returns all child controls\r\n     */\r\n    public getDescendants(directDescendantsOnly?: boolean, predicate?: (control: Control) => boolean): Control[] {\r\n        return this._rootContainer.getDescendants(directDescendantsOnly, predicate);\r\n    }\r\n\r\n    /**\r\n     * Will return all controls with the given type name\r\n     * @param typeName defines the type name to search for\r\n     * @returns an array of all controls found\r\n     */\r\n    public getControlsByType(typeName: string): Control[] {\r\n        return this._rootContainer.getDescendants(false, (control) => control.typeName === typeName);\r\n    }\r\n\r\n    /**\r\n     * Will return the first control with the given name\r\n     * @param name defines the name to search for\r\n     * @returns the first control found or null\r\n     */\r\n    public getControlByName(name: string): Nullable<Control> {\r\n        return this._getControlByKey(\"name\", name);\r\n    }\r\n\r\n    private _getControlByKey(key: string, value: any): Nullable<Control> {\r\n        return this._rootContainer.getDescendants().find((control) => control[key as keyof Control] === value) || null;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the current focused control\r\n     */\r\n    public get focusedControl(): Nullable<IFocusableControl> {\r\n        return this._focusedControl;\r\n    }\r\n    public set focusedControl(control: Nullable<IFocusableControl>) {\r\n        if (this._focusedControl == control) {\r\n            return;\r\n        }\r\n        if (this._focusedControl) {\r\n            this._focusedControl.onBlur();\r\n        }\r\n        if (control) {\r\n            control.onFocus();\r\n        }\r\n        this._focusedControl = control;\r\n    }\r\n    /**\r\n     * Gets or sets a boolean indicating if the texture must be rendered in background or foreground when in fullscreen mode\r\n     */\r\n    public get isForeground(): boolean {\r\n        if (!this.layer) {\r\n            return true;\r\n        }\r\n        return !this.layer.isBackground;\r\n    }\r\n    public set isForeground(value: boolean) {\r\n        if (!this.layer) {\r\n            return;\r\n        }\r\n        if (this.layer.isBackground === !value) {\r\n            return;\r\n        }\r\n        this.layer.isBackground = !value;\r\n    }\r\n    /**\r\n     * Gets or set information about clipboardData\r\n     */\r\n    public get clipboardData(): string {\r\n        return this._clipboardData;\r\n    }\r\n    public set clipboardData(value: string) {\r\n        this._clipboardData = value;\r\n    }\r\n\r\n    /**\r\n     * If set to true, every scene render will trigger a pointer event for the GUI\r\n     * if it is linked to a mesh or has controls linked to a mesh. This will allow\r\n     * you to catch the pointer moving around the GUI due to camera or mesh movements,\r\n     * but it has a performance cost.\r\n     */\r\n    public checkPointerEveryFrame = false;\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture\r\n     * @param name defines the name of the texture\r\n     * @param width defines the width of the texture\r\n     * @param height defines the height of the texture\r\n     * @param scene defines the hosting scene\r\n     * @param generateMipMaps defines a boolean indicating if mipmaps must be generated (false by default)\r\n     * @param samplingMode defines the texture sampling mode (Texture.NEAREST_SAMPLINGMODE by default)\r\n     * @param invertY defines if the texture needs to be inverted on the y axis during loading (true by default)\r\n     */\r\n    constructor(name: string, width = 0, height = 0, scene?: Nullable<Scene>, generateMipMaps = false, samplingMode = Texture.NEAREST_SAMPLINGMODE, invertY = true) {\r\n        super(name, { width: width, height: height }, scene, generateMipMaps, samplingMode, Constants.TEXTUREFORMAT_RGBA, invertY);\r\n        scene = this.getScene();\r\n        if (!scene || !this._texture) {\r\n            return;\r\n        }\r\n        this.applyYInversionOnUpdate = invertY;\r\n        this._rootElement = scene.getEngine().getInputElement();\r\n        this._renderObserver = scene.onBeforeCameraRenderObservable.add((camera: Camera) => this._checkUpdate(camera));\r\n\r\n        /** Whenever a control is added or removed to the root, we have to recheck the camera projection as it can have changed  */\r\n        this._controlAddedObserver = this._rootContainer.onControlAddedObservable.add((control) => {\r\n            if (control) {\r\n                this._rootChildrenHaveChanged = true;\r\n            }\r\n        });\r\n        this._controlRemovedObserver = this._rootContainer.onControlRemovedObservable.add((control) => {\r\n            if (control) {\r\n                this._rootChildrenHaveChanged = true;\r\n            }\r\n        });\r\n        this._preKeyboardObserver = scene.onPreKeyboardObservable.add((info) => {\r\n            if (!this._focusedControl) {\r\n                return;\r\n            }\r\n            if (info.type === KeyboardEventTypes.KEYDOWN) {\r\n                this._focusedControl.processKeyboard(info.event);\r\n            }\r\n            info.skipOnPointerObservable = true;\r\n        });\r\n        this._rootContainer._link(this);\r\n        this.hasAlpha = true;\r\n        if (!width || !height) {\r\n            this._resizeObserver = scene.getEngine().onResizeObservable.add(() => this._onResize());\r\n            this._onResize();\r\n        }\r\n        this._texture.isReady = true;\r\n    }\r\n    /**\r\n     * Get the current class name of the texture useful for serialization or dynamic coding.\r\n     * @returns \"AdvancedDynamicTexture\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"AdvancedDynamicTexture\";\r\n    }\r\n    /**\r\n     * Function used to execute a function on all controls\r\n     * @param func defines the function to execute\r\n     * @param container defines the container where controls belong. If null the root container will be used\r\n     */\r\n    public executeOnAllControls(func: (control: Control) => void, container?: Container) {\r\n        if (!container) {\r\n            container = this._rootContainer;\r\n        }\r\n        func(container);\r\n        for (const child of container.children) {\r\n            if ((<any>child).children) {\r\n                this.executeOnAllControls(func, <Container>child);\r\n                continue;\r\n            }\r\n            func(child);\r\n        }\r\n    }\r\n\r\n    private _useInvalidateRectOptimization = true;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the InvalidateRect optimization should be turned on\r\n     */\r\n    public get useInvalidateRectOptimization(): boolean {\r\n        return this._useInvalidateRectOptimization;\r\n    }\r\n\r\n    public set useInvalidateRectOptimization(value: boolean) {\r\n        this._useInvalidateRectOptimization = value;\r\n    }\r\n\r\n    // Invalidated rectangle which is the combination of all invalidated controls after they have been rotated into absolute position\r\n    private _invalidatedRectangle: Nullable<Measure> = null;\r\n    /**\r\n     * Invalidates a rectangle area on the gui texture\r\n     * @param invalidMinX left most position of the rectangle to invalidate in the texture\r\n     * @param invalidMinY top most position of the rectangle to invalidate in the texture\r\n     * @param invalidMaxX right most position of the rectangle to invalidate in the texture\r\n     * @param invalidMaxY bottom most position of the rectangle to invalidate in the texture\r\n     */\r\n    public invalidateRect(invalidMinX: number, invalidMinY: number, invalidMaxX: number, invalidMaxY: number) {\r\n        if (!this._useInvalidateRectOptimization) {\r\n            return;\r\n        }\r\n        if (!this._invalidatedRectangle) {\r\n            this._invalidatedRectangle = new Measure(invalidMinX, invalidMinY, invalidMaxX - invalidMinX + 1, invalidMaxY - invalidMinY + 1);\r\n        } else {\r\n            // Compute intersection\r\n            const maxX = Math.ceil(Math.max(this._invalidatedRectangle.left + this._invalidatedRectangle.width - 1, invalidMaxX));\r\n            const maxY = Math.ceil(Math.max(this._invalidatedRectangle.top + this._invalidatedRectangle.height - 1, invalidMaxY));\r\n            this._invalidatedRectangle.left = Math.floor(Math.min(this._invalidatedRectangle.left, invalidMinX));\r\n            this._invalidatedRectangle.top = Math.floor(Math.min(this._invalidatedRectangle.top, invalidMinY));\r\n            this._invalidatedRectangle.width = maxX - this._invalidatedRectangle.left + 1;\r\n            this._invalidatedRectangle.height = maxY - this._invalidatedRectangle.top + 1;\r\n        }\r\n    }\r\n    /**\r\n     * Marks the texture as dirty forcing a complete update\r\n     */\r\n    public markAsDirty() {\r\n        this._isDirty = true;\r\n    }\r\n    /**\r\n     * Helper function used to create a new style\r\n     * @returns a new style\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#styles\r\n     */\r\n    public createStyle(): Style {\r\n        return new Style(this);\r\n    }\r\n    /**\r\n     * Adds a new control to the root container\r\n     * @param control defines the control to add\r\n     * @returns the current texture\r\n     */\r\n    public addControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.addControl(control);\r\n        return this;\r\n    }\r\n    /**\r\n     * Removes a control from the root container\r\n     * @param control defines the control to remove\r\n     * @returns the current texture\r\n     */\r\n    public removeControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n    /**\r\n     * Moves overlapped controls towards a position where it is not overlapping anymore.\r\n     * Please note that this method alters linkOffsetXInPixels and linkOffsetYInPixels.\r\n     * @param overlapGroup the overlap group which will be processed or undefined to process all overlap groups\r\n     * @param deltaStep the step size (speed) to reach the target non overlapping position (default 0.1)\r\n     * @param repelFactor how much is the control repelled by other controls\r\n     */\r\n    public moveToNonOverlappedPosition(overlapGroup?: number | Control[], deltaStep = 1, repelFactor = 1) {\r\n        let controlsForGroup: Control[];\r\n        if (Array.isArray(overlapGroup)) {\r\n            controlsForGroup = overlapGroup;\r\n        } else {\r\n            const descendants = this.getDescendants(true);\r\n            // get only the controls with an overlapGroup property set\r\n            // if the overlapGroup parameter is set, filter the controls and get only the controls belonging to that overlapGroup\r\n            controlsForGroup = overlapGroup === undefined ? descendants.filter((c) => c.overlapGroup !== undefined) : descendants.filter((c) => c.overlapGroup === overlapGroup);\r\n        }\r\n\r\n        controlsForGroup.forEach((control1) => {\r\n            let velocity = Vector2.Zero();\r\n            const center = new Vector2(control1.centerX, control1.centerY);\r\n\r\n            controlsForGroup.forEach((control2) => {\r\n                if (control1 !== control2 && AdvancedDynamicTexture._Overlaps(control1, control2)) {\r\n                    // if the two controls overlaps get a direction vector from one control's center to another control's center\r\n                    const diff = center.subtract(new Vector2(control2.centerX, control2.centerY));\r\n                    const diffLength = diff.length();\r\n\r\n                    if (diffLength > 0) {\r\n                        // calculate the velocity\r\n                        velocity = velocity.add(diff.normalize().scale(repelFactor / diffLength));\r\n                    }\r\n                }\r\n            });\r\n\r\n            if (velocity.length() > 0) {\r\n                // move the control along the direction vector away from the overlapping control\r\n                velocity = velocity.normalize().scale(deltaStep * (control1.overlapDeltaMultiplier ?? 1));\r\n                control1.linkOffsetXInPixels += velocity.x;\r\n                control1.linkOffsetYInPixels += velocity.y;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        const scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        this._rootElement = null;\r\n        scene.onBeforeCameraRenderObservable.remove(this._renderObserver);\r\n        if (this._resizeObserver) {\r\n            scene.getEngine().onResizeObservable.remove(this._resizeObserver);\r\n        }\r\n        if (this._prePointerObserver) {\r\n            scene.onPrePointerObservable.remove(this._prePointerObserver);\r\n        }\r\n        if (this._sceneRenderObserver) {\r\n            scene.onBeforeRenderObservable.remove(this._sceneRenderObserver);\r\n        }\r\n        if (this._pointerObserver) {\r\n            scene.onPointerObservable.remove(this._pointerObserver);\r\n        }\r\n        if (this._preKeyboardObserver) {\r\n            scene.onPreKeyboardObservable.remove(this._preKeyboardObserver);\r\n        }\r\n        if (this._canvasPointerOutObserver) {\r\n            scene.getEngine().onCanvasPointerOutObservable.remove(this._canvasPointerOutObserver);\r\n        }\r\n        if (this._canvasBlurObserver) {\r\n            scene.getEngine().onCanvasBlurObservable.remove(this._canvasBlurObserver);\r\n        }\r\n        if (this._controlAddedObserver) {\r\n            this._rootContainer.onControlAddedObservable.remove(this._controlAddedObserver);\r\n        }\r\n        if (this._controlRemovedObserver) {\r\n            this._rootContainer.onControlRemovedObservable.remove(this._controlRemovedObserver);\r\n        }\r\n        if (this._layerToDispose) {\r\n            this._layerToDispose.texture = null;\r\n            this._layerToDispose.dispose();\r\n            this._layerToDispose = null;\r\n        }\r\n        this._rootContainer.dispose();\r\n        this.onClipboardObservable.clear();\r\n        this.onControlPickedObservable.clear();\r\n        this.onBeginRenderObservable.clear();\r\n        this.onEndRenderObservable.clear();\r\n        this.onBeginLayoutObservable.clear();\r\n        this.onEndLayoutObservable.clear();\r\n        this.onGuiReadyObservable.clear();\r\n        super.dispose();\r\n    }\r\n    private _onResize(): void {\r\n        const scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        // Check size\r\n        const engine = scene.getEngine();\r\n        const textureSize = this.getSize();\r\n        let renderWidth = engine.getRenderWidth() * this._renderScale;\r\n        let renderHeight = engine.getRenderHeight() * this._renderScale;\r\n\r\n        if (this._renderAtIdealSize) {\r\n            if (this._idealWidth) {\r\n                renderHeight = (renderHeight * this._idealWidth) / renderWidth;\r\n                renderWidth = this._idealWidth;\r\n            } else if (this._idealHeight) {\r\n                renderWidth = (renderWidth * this._idealHeight) / renderHeight;\r\n                renderHeight = this._idealHeight;\r\n            }\r\n        }\r\n        if (textureSize.width !== renderWidth || textureSize.height !== renderHeight) {\r\n            this.scaleTo(renderWidth, renderHeight);\r\n            this.markAsDirty();\r\n            if (this._idealWidth || this._idealHeight) {\r\n                this._rootContainer._markAllAsDirty();\r\n            }\r\n        }\r\n        this.invalidateRect(0, 0, textureSize.width - 1, textureSize.height - 1);\r\n    }\r\n    /** @internal */\r\n    public _getGlobalViewport(): Viewport {\r\n        const size = this.getSize();\r\n        const globalViewPort = this._fullscreenViewport.toGlobal(size.width, size.height);\r\n\r\n        const targetX = Math.round(globalViewPort.width * (1 / this.rootContainer.scaleX));\r\n        const targetY = Math.round(globalViewPort.height * (1 / this.rootContainer.scaleY));\r\n\r\n        globalViewPort.x += (globalViewPort.width - targetX) / 2;\r\n        globalViewPort.y += (globalViewPort.height - targetY) / 2;\r\n\r\n        globalViewPort.width = targetX;\r\n        globalViewPort.height = targetY;\r\n\r\n        return globalViewPort;\r\n    }\r\n    /**\r\n     * Get screen coordinates for a vector3\r\n     * @param position defines the position to project\r\n     * @param worldMatrix defines the world matrix to use\r\n     * @returns the projected position\r\n     */\r\n    public getProjectedPosition(position: Vector3, worldMatrix: Matrix): Vector2 {\r\n        const result = this.getProjectedPositionWithZ(position, worldMatrix);\r\n        return new Vector2(result.x, result.y);\r\n    }\r\n\r\n    /**\r\n     * Get screen coordinates for a vector3\r\n     * @param position defines the position to project\r\n     * @param worldMatrix defines the world matrix to use\r\n     * @returns the projected position with Z\r\n     */\r\n    public getProjectedPositionWithZ(position: Vector3, worldMatrix: Matrix): Vector3 {\r\n        const scene = this.getScene();\r\n        if (!scene) {\r\n            return Vector3.Zero();\r\n        }\r\n        const globalViewport = this._getGlobalViewport();\r\n        const projectedPosition = Vector3.Project(position, worldMatrix, scene.getTransformMatrix(), globalViewport);\r\n        return new Vector3(projectedPosition.x, projectedPosition.y, projectedPosition.z);\r\n    }\r\n\r\n    private _checkUpdate(camera: Camera, skipUpdate?: boolean): void {\r\n        if (this._layerToDispose) {\r\n            if ((camera.layerMask & this._layerToDispose.layerMask) === 0) {\r\n                return;\r\n            }\r\n        }\r\n        if (this._isFullscreen && this._linkedControls.length) {\r\n            const scene = this.getScene();\r\n            if (!scene) {\r\n                return;\r\n            }\r\n            const globalViewport = this._getGlobalViewport();\r\n            for (const control of this._linkedControls) {\r\n                if (!control.isVisible) {\r\n                    continue;\r\n                }\r\n                const mesh = control._linkedMesh as AbstractMesh;\r\n                if (!mesh || mesh.isDisposed()) {\r\n                    Tools.SetImmediate(() => {\r\n                        control.linkWithMesh(null);\r\n                    });\r\n                    continue;\r\n                }\r\n                const position = mesh.getBoundingInfo ? mesh.getBoundingInfo().boundingSphere.center : (Vector3.ZeroReadOnly as Vector3);\r\n                const projectedPosition = Vector3.Project(position, mesh.getWorldMatrix(), scene.getTransformMatrix(), globalViewport);\r\n                if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n                    control.notRenderable = true;\r\n                    continue;\r\n                }\r\n                control.notRenderable = false;\r\n                if (this.useInvalidateRectOptimization) {\r\n                    control.invalidateRect();\r\n                }\r\n\r\n                control._moveToProjectedPosition(projectedPosition);\r\n            }\r\n        }\r\n        if (!this._isDirty && !this._rootContainer.isDirty) {\r\n            return;\r\n        }\r\n        this._isDirty = false;\r\n        this._render(skipUpdate);\r\n        if (!skipUpdate) {\r\n            this.update(this.applyYInversionOnUpdate, this.premulAlpha, AdvancedDynamicTexture.AllowGPUOptimizations);\r\n        }\r\n    }\r\n\r\n    private _clearMeasure = new Measure(0, 0, 0, 0);\r\n\r\n    private _render(skipRender?: boolean): void {\r\n        const textureSize = this.getSize();\r\n        const renderWidth = textureSize.width;\r\n        const renderHeight = textureSize.height;\r\n\r\n        const context = this.getContext();\r\n        context.font = \"18px Arial\";\r\n        context.strokeStyle = \"white\";\r\n\r\n        if (this.onGuiReadyObservable.hasObservers()) {\r\n            this._checkGuiIsReady();\r\n        }\r\n\r\n        /** We have to recheck the camera projection in the case the root control's children have changed  */\r\n        if (this._rootChildrenHaveChanged) {\r\n            const camera = this.getScene()?.activeCamera;\r\n            if (camera) {\r\n                this._rootChildrenHaveChanged = false;\r\n                this._checkUpdate(camera, true);\r\n            }\r\n        }\r\n\r\n        // Layout\r\n        this.onBeginLayoutObservable.notifyObservers(this);\r\n        const measure = new Measure(0, 0, renderWidth, renderHeight);\r\n        this._numLayoutCalls = 0;\r\n        this._rootContainer._layout(measure, context);\r\n        this.onEndLayoutObservable.notifyObservers(this);\r\n        this._isDirty = false; // Restoring the dirty state that could have been set by controls during layout processing\r\n\r\n        if (skipRender) {\r\n            return;\r\n        }\r\n\r\n        // Clear\r\n        if (this._invalidatedRectangle) {\r\n            this._clearMeasure.copyFrom(this._invalidatedRectangle);\r\n        } else {\r\n            this._clearMeasure.copyFromFloats(0, 0, renderWidth, renderHeight);\r\n        }\r\n        context.clearRect(this._clearMeasure.left, this._clearMeasure.top, this._clearMeasure.width, this._clearMeasure.height);\r\n        if (this._background) {\r\n            context.save();\r\n            context.fillStyle = this._background;\r\n            context.fillRect(this._clearMeasure.left, this._clearMeasure.top, this._clearMeasure.width, this._clearMeasure.height);\r\n            context.restore();\r\n        }\r\n\r\n        // Render\r\n        this.onBeginRenderObservable.notifyObservers(this);\r\n        this._numRenderCalls = 0;\r\n        this._rootContainer._render(context, this._invalidatedRectangle);\r\n        this.onEndRenderObservable.notifyObservers(this);\r\n        this._invalidatedRectangle = null;\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    public _changeCursor(cursor: string) {\r\n        if (this._rootElement) {\r\n            this._rootElement.style.cursor = cursor;\r\n            this._cursorChanged = true;\r\n        }\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    public _registerLastControlDown(control: Control, pointerId: number) {\r\n        this._lastControlDown[pointerId] = control;\r\n        this.onControlPickedObservable.notifyObservers(control);\r\n    }\r\n    private _doPicking(x: number, y: number, pi: Nullable<PointerInfoBase>, type: number, pointerId: number, buttonIndex: number, deltaX?: number, deltaY?: number): void {\r\n        const scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        const engine = scene.getEngine();\r\n        const textureSize = this.getSize();\r\n        if (this._isFullscreen) {\r\n            const camera = scene.cameraToUseForPointers || scene.activeCamera;\r\n            if (!camera) {\r\n                return;\r\n            }\r\n            const viewport = camera.viewport;\r\n            x = x * (textureSize.width / (engine.getRenderWidth() * viewport.width));\r\n            y = y * (textureSize.height / (engine.getRenderHeight() * viewport.height));\r\n        }\r\n        if (this._capturingControl[pointerId]) {\r\n            if (this._capturingControl[pointerId].isPointerBlocker) {\r\n                this._shouldBlockPointer = true;\r\n            }\r\n            this._capturingControl[pointerId]._processObservables(type, x, y, pi, pointerId, buttonIndex);\r\n            return;\r\n        }\r\n\r\n        this._cursorChanged = false;\r\n        if (!this._rootContainer._processPicking(x, y, pi, type, pointerId, buttonIndex, deltaX, deltaY)) {\r\n            if (!scene.doNotHandleCursors) {\r\n                this._changeCursor(\"\");\r\n            }\r\n            if (type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId], pi);\r\n                    delete this._lastControlOver[pointerId];\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!this._cursorChanged && !scene.doNotHandleCursors) {\r\n            this._changeCursor(\"\");\r\n        }\r\n        this._manageFocus();\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    public _cleanControlAfterRemovalFromList(list: { [pointerId: number]: Control }, control: Control) {\r\n        for (const pointerId in list) {\r\n            if (!Object.prototype.hasOwnProperty.call(list, pointerId)) {\r\n                continue;\r\n            }\r\n            const lastControlOver = list[pointerId];\r\n            if (lastControlOver === control) {\r\n                delete list[pointerId];\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    public _cleanControlAfterRemoval(control: Control) {\r\n        this._cleanControlAfterRemovalFromList(this._lastControlDown, control);\r\n        this._cleanControlAfterRemovalFromList(this._lastControlOver, control);\r\n    }\r\n\r\n    /**\r\n     * This function will run a pointer event on this ADT and will trigger any pointer events on any controls\r\n     * This will work on a fullscreen ADT only. For mesh based ADT, simulate pointer events using the scene directly.\r\n     * @param x pointer X on the canvas for the picking\r\n     * @param y pointer Y on the canvas for the picking\r\n     * @param pi optional pointer information\r\n     */\r\n    public pick(x: number, y: number, pi: Nullable<PointerInfoPre> = null) {\r\n        if (this._isFullscreen && this._scene) {\r\n            this._translateToPicking(this._scene, new Viewport(0, 0, 0, 0), pi, x, y);\r\n        }\r\n    }\r\n\r\n    private _translateToPicking(scene: Scene, tempViewport: Viewport, pi: Nullable<PointerInfoPre>, x: number = scene.pointerX, y: number = scene.pointerY) {\r\n        const camera = scene.cameraToUseForPointers || scene.activeCamera;\r\n        const engine = scene.getEngine();\r\n        const originalCameraToUseForPointers = scene.cameraToUseForPointers;\r\n\r\n        if (!camera) {\r\n            tempViewport.x = 0;\r\n            tempViewport.y = 0;\r\n            tempViewport.width = engine.getRenderWidth();\r\n            tempViewport.height = engine.getRenderHeight();\r\n        } else {\r\n            if (camera.rigCameras.length) {\r\n                // rig camera - we need to find the camera to use for this event\r\n                const rigViewport = new Viewport(0, 0, 1, 1);\r\n                camera.rigCameras.forEach((rigCamera) => {\r\n                    // generate the viewport of this camera\r\n                    rigCamera.viewport.toGlobalToRef(engine.getRenderWidth(), engine.getRenderHeight(), rigViewport);\r\n                    const transformedX = x / engine.getHardwareScalingLevel() - rigViewport.x;\r\n                    const transformedY = y / engine.getHardwareScalingLevel() - (engine.getRenderHeight() - rigViewport.y - rigViewport.height);\r\n                    // check if the pointer is in the camera's viewport\r\n                    if (transformedX < 0 || transformedY < 0 || x > rigViewport.width || y > rigViewport.height) {\r\n                        // out of viewport - don't use this camera\r\n                        return;\r\n                    }\r\n                    // set the camera to use for pointers until this pointer loop is over\r\n                    scene.cameraToUseForPointers = rigCamera;\r\n                    // set the viewport\r\n                    tempViewport.x = rigViewport.x;\r\n                    tempViewport.y = rigViewport.y;\r\n                    tempViewport.width = rigViewport.width;\r\n                    tempViewport.height = rigViewport.height;\r\n                });\r\n            } else {\r\n                camera.viewport.toGlobalToRef(engine.getRenderWidth(), engine.getRenderHeight(), tempViewport);\r\n            }\r\n        }\r\n\r\n        const transformedX = x / engine.getHardwareScalingLevel() - tempViewport.x;\r\n        const transformedY = y / engine.getHardwareScalingLevel() - (engine.getRenderHeight() - tempViewport.y - tempViewport.height);\r\n        this._shouldBlockPointer = false;\r\n        // Do picking modifies _shouldBlockPointer\r\n        if (pi) {\r\n            const pointerId = (pi.event as IPointerEvent).pointerId || this._defaultMousePointerId;\r\n            this._doPicking(transformedX, transformedY, pi, pi.type, pointerId, pi.event.button, (<IWheelEvent>pi.event).deltaX, (<IWheelEvent>pi.event).deltaY);\r\n            // Avoid overwriting a true skipOnPointerObservable to false\r\n            if (this._shouldBlockPointer || this._capturingControl[pointerId]) {\r\n                pi.skipOnPointerObservable = true;\r\n            }\r\n        } else {\r\n            this._doPicking(transformedX, transformedY, null, PointerEventTypes.POINTERMOVE, this._defaultMousePointerId, 0);\r\n        }\r\n        // if overridden by a rig camera - reset back to the original value\r\n        scene.cameraToUseForPointers = originalCameraToUseForPointers;\r\n    }\r\n\r\n    /** Attach to all scene events required to support pointer events */\r\n    public attach(): void {\r\n        const scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        const tempViewport = new Viewport(0, 0, 0, 0);\r\n\r\n        this._prePointerObserver = scene.onPrePointerObservable.add((pi) => {\r\n            if (\r\n                scene.isPointerCaptured((<IPointerEvent>pi.event).pointerId) &&\r\n                pi.type === PointerEventTypes.POINTERUP &&\r\n                !this._capturedPointerIds.has((pi.event as IPointerEvent).pointerId)\r\n            ) {\r\n                return;\r\n            }\r\n            if (\r\n                pi.type !== PointerEventTypes.POINTERMOVE &&\r\n                pi.type !== PointerEventTypes.POINTERUP &&\r\n                pi.type !== PointerEventTypes.POINTERDOWN &&\r\n                pi.type !== PointerEventTypes.POINTERWHEEL\r\n            ) {\r\n                return;\r\n            }\r\n\r\n            if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                // Avoid pointerMove events firing while the pointer is captured by the scene\r\n                if (scene.isPointerCaptured((<IPointerEvent>pi.event).pointerId)) {\r\n                    return;\r\n                }\r\n                if ((pi.event as IPointerEvent).pointerId) {\r\n                    this._defaultMousePointerId = (pi.event as IPointerEvent).pointerId; // This is required to make sure we have the correct pointer ID for wheel\r\n                }\r\n            }\r\n            this._translateToPicking(scene, tempViewport, pi);\r\n        });\r\n        this._attachPickingToSceneRender(scene, () => this._translateToPicking(scene, tempViewport, null), false);\r\n        this._attachToOnPointerOut(scene);\r\n        this._attachToOnBlur(scene);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _onClipboardCopy = (rawEvt: Event) => {\r\n        const evt = rawEvt as ClipboardEvent;\r\n        const ev = new ClipboardInfo(ClipboardEventTypes.COPY, evt);\r\n        this.onClipboardObservable.notifyObservers(ev);\r\n        evt.preventDefault();\r\n    };\r\n    /**\r\n     * @internal\r\n     */\r\n    private _onClipboardCut = (rawEvt: Event) => {\r\n        const evt = rawEvt as ClipboardEvent;\r\n        const ev = new ClipboardInfo(ClipboardEventTypes.CUT, evt);\r\n        this.onClipboardObservable.notifyObservers(ev);\r\n        evt.preventDefault();\r\n    };\r\n    /**\r\n     * @internal\r\n     */\r\n    private _onClipboardPaste = (rawEvt: Event) => {\r\n        const evt = rawEvt as ClipboardEvent;\r\n        const ev = new ClipboardInfo(ClipboardEventTypes.PASTE, evt);\r\n        this.onClipboardObservable.notifyObservers(ev);\r\n        evt.preventDefault();\r\n    };\r\n    /**\r\n     * Register the clipboard Events onto the canvas\r\n     */\r\n    public registerClipboardEvents(): void {\r\n        self.addEventListener(\"copy\", this._onClipboardCopy, false);\r\n        self.addEventListener(\"cut\", this._onClipboardCut, false);\r\n        self.addEventListener(\"paste\", this._onClipboardPaste, false);\r\n    }\r\n    /**\r\n     * Unregister the clipboard Events from the canvas\r\n     */\r\n    public unRegisterClipboardEvents(): void {\r\n        self.removeEventListener(\"copy\", this._onClipboardCopy);\r\n        self.removeEventListener(\"cut\", this._onClipboardCut);\r\n        self.removeEventListener(\"paste\", this._onClipboardPaste);\r\n    }\r\n\r\n    /**\r\n     * Transform uvs from mesh space to texture space, taking the texture into account\r\n     * @param uv the uvs in mesh space\r\n     * @returns the uvs in texture space\r\n     */\r\n    private _transformUvs(uv: Vector2): Vector2 {\r\n        const textureMatrix = this.getTextureMatrix();\r\n        let result;\r\n        if (textureMatrix.isIdentityAs3x2()) {\r\n            result = uv;\r\n        } else {\r\n            const homogeneousTextureMatrix = TmpVectors.Matrix[0];\r\n\r\n            textureMatrix.getRowToRef(0, TmpVectors.Vector4[0]);\r\n            textureMatrix.getRowToRef(1, TmpVectors.Vector4[1]);\r\n            textureMatrix.getRowToRef(2, TmpVectors.Vector4[2]);\r\n\r\n            const r0 = TmpVectors.Vector4[0];\r\n            const r1 = TmpVectors.Vector4[1];\r\n            const r2 = TmpVectors.Vector4[2];\r\n\r\n            homogeneousTextureMatrix.setRowFromFloats(0, r0.x, r0.y, 0, 0);\r\n            homogeneousTextureMatrix.setRowFromFloats(1, r1.x, r1.y, 0, 0);\r\n            homogeneousTextureMatrix.setRowFromFloats(2, 0, 0, 1, 0);\r\n            homogeneousTextureMatrix.setRowFromFloats(3, r2.x, r2.y, 0, 1);\r\n\r\n            result = TmpVectors.Vector2[0];\r\n            Vector2.TransformToRef(uv, homogeneousTextureMatrix, result);\r\n        }\r\n\r\n        // In wrap and mirror mode, the texture coordinate for coordinates more than 1 is the fractional part of the coordinate\r\n        if (this.wrapU === Texture.WRAP_ADDRESSMODE || this.wrapU === Texture.MIRROR_ADDRESSMODE) {\r\n            if (result.x > 1) {\r\n                let fX = result.x - Math.trunc(result.x);\r\n                // In mirror mode, the sign of the texture coordinate depends on the integer part -\r\n                // odd integers means it is mirrored from the original coordinate\r\n                if (this.wrapU === Texture.MIRROR_ADDRESSMODE && Math.trunc(result.x) % 2 === 1) {\r\n                    fX = 1 - fX;\r\n                }\r\n                result.x = fX;\r\n            }\r\n        }\r\n        if (this.wrapV === Texture.WRAP_ADDRESSMODE || this.wrapV === Texture.MIRROR_ADDRESSMODE) {\r\n            if (result.y > 1) {\r\n                let fY = result.y - Math.trunc(result.y);\r\n                if (this.wrapV === Texture.MIRROR_ADDRESSMODE && Math.trunc(result.x) % 2 === 1) {\r\n                    fY = 1 - fY;\r\n                }\r\n                result.y = fY;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * Connect the texture to a hosting mesh to enable interactions\r\n     * @param mesh defines the mesh to attach to\r\n     * @param supportPointerMove defines a boolean indicating if pointer move events must be catched as well\r\n     */\r\n    public attachToMesh(mesh: AbstractMesh, supportPointerMove = true): void {\r\n        const scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        if (this._pointerObserver) {\r\n            scene.onPointerObservable.remove(this._pointerObserver);\r\n        }\r\n\r\n        this._pointerObserver = scene.onPointerObservable.add((pi) => {\r\n            if (\r\n                pi.type !== PointerEventTypes.POINTERMOVE &&\r\n                pi.type !== PointerEventTypes.POINTERUP &&\r\n                pi.type !== PointerEventTypes.POINTERDOWN &&\r\n                pi.type !== PointerEventTypes.POINTERWHEEL\r\n            ) {\r\n                return;\r\n            }\r\n\r\n            if (pi.type === PointerEventTypes.POINTERMOVE && (pi.event as IPointerEvent).pointerId) {\r\n                this._defaultMousePointerId = (pi.event as IPointerEvent).pointerId; // This is required to make sure we have the correct pointer ID for wheel\r\n            }\r\n\r\n            const pointerId = (pi.event as IPointerEvent).pointerId || this._defaultMousePointerId;\r\n            if (pi.pickInfo && pi.pickInfo.hit && pi.pickInfo.pickedMesh === mesh) {\r\n                let uv = pi.pickInfo.getTextureCoordinates();\r\n                if (uv) {\r\n                    uv = this._transformUvs(uv);\r\n                    const size = this.getSize();\r\n                    this._doPicking(\r\n                        uv.x * size.width,\r\n                        (this.applyYInversionOnUpdate ? 1.0 - uv.y : uv.y) * size.height,\r\n                        pi,\r\n                        pi.type,\r\n                        pointerId,\r\n                        pi.event.button,\r\n                        (<IWheelEvent>pi.event).deltaX,\r\n                        (<IWheelEvent>pi.event).deltaY\r\n                    );\r\n                }\r\n            } else if (pi.type === PointerEventTypes.POINTERUP) {\r\n                if (this._lastControlDown[pointerId]) {\r\n                    this._lastControlDown[pointerId]._forcePointerUp(pointerId);\r\n                }\r\n                delete this._lastControlDown[pointerId];\r\n                if (this.focusedControl) {\r\n                    const friendlyControls = this.focusedControl.keepsFocusWith();\r\n                    let canMoveFocus = true;\r\n                    if (friendlyControls) {\r\n                        for (const control of friendlyControls) {\r\n                            // Same host, no need to keep the focus\r\n                            if (this === control._host) {\r\n                                continue;\r\n                            }\r\n                            // Different hosts\r\n                            const otherHost = control._host;\r\n                            if (otherHost._lastControlOver[pointerId] && otherHost._lastControlOver[pointerId].isAscendant(control)) {\r\n                                canMoveFocus = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (canMoveFocus) {\r\n                        this.focusedControl = null;\r\n                    }\r\n                }\r\n            } else if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId], pi, true);\r\n                }\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        });\r\n        mesh.enablePointerMoveEvents = supportPointerMove;\r\n        this._attachPickingToSceneRender(\r\n            scene,\r\n            () => {\r\n                const pointerId = this._defaultMousePointerId;\r\n                const pick = scene?.pick(scene.pointerX, scene.pointerY);\r\n                if (pick && pick.hit && pick.pickedMesh === mesh) {\r\n                    let uv = pick.getTextureCoordinates();\r\n                    if (uv) {\r\n                        uv = this._transformUvs(uv);\r\n                        const size = this.getSize();\r\n                        this._doPicking(uv.x * size.width, (this.applyYInversionOnUpdate ? 1.0 - uv.y : uv.y) * size.height, null, PointerEventTypes.POINTERMOVE, pointerId, 0);\r\n                    }\r\n                } else {\r\n                    if (this._lastControlOver[pointerId]) {\r\n                        this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId], null, true);\r\n                    }\r\n                    delete this._lastControlOver[pointerId];\r\n                }\r\n            },\r\n            true\r\n        );\r\n        this._attachToOnPointerOut(scene);\r\n        this._attachToOnBlur(scene);\r\n    }\r\n    /**\r\n     * Move the focus to a specific control\r\n     * @param control defines the control which will receive the focus\r\n     */\r\n    public moveFocusToControl(control: IFocusableControl): void {\r\n        this.focusedControl = control;\r\n        this._lastPickedControl = <any>control;\r\n        this._blockNextFocusCheck = true;\r\n    }\r\n    private _manageFocus(): void {\r\n        if (this._blockNextFocusCheck) {\r\n            this._blockNextFocusCheck = false;\r\n            this._lastPickedControl = <any>this._focusedControl;\r\n            return;\r\n        }\r\n        // Focus management\r\n        if (this._focusedControl) {\r\n            if (this._focusedControl !== <any>this._lastPickedControl) {\r\n                if (this._lastPickedControl.isFocusInvisible) {\r\n                    return;\r\n                }\r\n                this.focusedControl = null;\r\n            }\r\n        }\r\n    }\r\n    private _attachPickingToSceneRender(scene: Scene, pickFunction: () => void, forcePicking: boolean) {\r\n        this._sceneRenderObserver = scene.onBeforeRenderObservable.add(() => {\r\n            if (!this.checkPointerEveryFrame) {\r\n                return;\r\n            }\r\n            if (this._linkedControls.length > 0 || forcePicking) {\r\n                pickFunction();\r\n            }\r\n        });\r\n    }\r\n    private _attachToOnPointerOut(scene: Scene): void {\r\n        this._canvasPointerOutObserver = scene.getEngine().onCanvasPointerOutObservable.add((pointerEvent) => {\r\n            if (this._lastControlOver[pointerEvent.pointerId]) {\r\n                this._lastControlOver[pointerEvent.pointerId]._onPointerOut(this._lastControlOver[pointerEvent.pointerId], null);\r\n            }\r\n            delete this._lastControlOver[pointerEvent.pointerId];\r\n            if (this._lastControlDown[pointerEvent.pointerId] && this._lastControlDown[pointerEvent.pointerId] !== this._capturingControl[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId]._forcePointerUp(pointerEvent.pointerId);\r\n                delete this._lastControlDown[pointerEvent.pointerId];\r\n            }\r\n        });\r\n    }\r\n    private _attachToOnBlur(scene: Scene): void {\r\n        this._canvasBlurObserver = scene.getEngine().onCanvasBlurObservable.add(() => {\r\n            Object.entries(this._lastControlDown).forEach(([, value]) => {\r\n                value._onCanvasBlur();\r\n            });\r\n            this.focusedControl = null;\r\n            this._lastControlDown = {};\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Serializes the entire GUI system\r\n     * @returns an object with the JSON serialized data\r\n     */\r\n    public serializeContent(): any {\r\n        const size = this.getSize();\r\n        const serializationObject = {\r\n            root: {},\r\n            width: size.width,\r\n            height: size.height,\r\n        };\r\n\r\n        this._rootContainer.serialize(serializationObject.root);\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Recreate the content of the ADT from a JSON object\r\n     * @param serializedObject define the JSON serialized object to restore from\r\n     * @param scaleToSize defines whether to scale to texture to the saved size\r\n     */\r\n    public parseSerializedObject(serializedObject: any, scaleToSize?: boolean) {\r\n        this._rootContainer = Control.Parse(serializedObject.root, this) as Container;\r\n        if (scaleToSize) {\r\n            const width = serializedObject.width;\r\n            const height = serializedObject.height;\r\n            if (typeof width === \"number\" && typeof height === \"number\" && width >= 0 && height >= 0) {\r\n                this.scaleTo(width, height);\r\n            } else {\r\n                // scales the GUI to a default size if none was available in the serialized content\r\n                this.scaleTo(1920, 1080);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clones the ADT\r\n     * @param newName defines the name of the new ADT\r\n     * @returns the clone of the ADT\r\n     */\r\n    public clone(newName?: string): AdvancedDynamicTexture {\r\n        const scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return this;\r\n        }\r\n        const size = this.getSize();\r\n        const data = this.serializeContent();\r\n        const clone = new AdvancedDynamicTexture(newName ?? \"Clone of \" + this.name, size.width, size.height, scene, !this.noMipmap, this.samplingMode);\r\n        clone.parseSerializedObject(data);\r\n\r\n        return clone;\r\n    }\r\n\r\n    /**\r\n     * Recreate the content of the ADT from a JSON object\r\n     * @param serializedObject define the JSON serialized object to restore from\r\n     * @param scaleToSize defines whether to scale to texture to the saved size\r\n     * @deprecated Please use parseSerializedObject instead\r\n     */\r\n    public parseContent = this.parseSerializedObject;\r\n\r\n    /**\r\n     * Recreate the content of the ADT from a snippet saved by the GUI editor\r\n     * @param snippetId defines the snippet to load\r\n     * @param scaleToSize defines whether to scale to texture to the saved size\r\n     * @param appendToAdt if provided the snippet will be appended to the adt. Otherwise a fullscreen ADT will be created.\r\n     * @returns a promise that will resolve on success\r\n     */\r\n    public static async ParseFromSnippetAsync(snippetId: string, scaleToSize?: boolean, appendToAdt?: AdvancedDynamicTexture): Promise<AdvancedDynamicTexture> {\r\n        const adt = appendToAdt ?? AdvancedDynamicTexture.CreateFullscreenUI(\"ADT from snippet\");\r\n        if (snippetId === \"_BLANK\") {\r\n            return adt;\r\n        }\r\n\r\n        const serialized = await AdvancedDynamicTexture._LoadURLContentAsync(AdvancedDynamicTexture.SnippetUrl + \"/\" + snippetId.replace(/#/g, \"/\"), true);\r\n        adt.parseSerializedObject(serialized, scaleToSize);\r\n        return adt;\r\n    }\r\n\r\n    /**\r\n     * Recreate the content of the ADT from a snippet saved by the GUI editor\r\n     * @param snippetId defines the snippet to load\r\n     * @param scaleToSize defines whether to scale to texture to the saved size\r\n     * @returns a promise that will resolve on success\r\n     */\r\n    public parseFromSnippetAsync(snippetId: string, scaleToSize?: boolean): Promise<AdvancedDynamicTexture> {\r\n        return AdvancedDynamicTexture.ParseFromSnippetAsync(snippetId, scaleToSize, this);\r\n    }\r\n\r\n    /**\r\n     * Recreate the content of the ADT from a url json\r\n     * @param url defines the url to load\r\n     * @param scaleToSize defines whether to scale to texture to the saved size\r\n     * @param appendToAdt if provided the snippet will be appended to the adt. Otherwise a fullscreen ADT will be created.\r\n     * @returns a promise that will resolve on success\r\n     */\r\n    public static async ParseFromFileAsync(url: string, scaleToSize?: boolean, appendToAdt?: AdvancedDynamicTexture): Promise<AdvancedDynamicTexture> {\r\n        const adt = appendToAdt ?? AdvancedDynamicTexture.CreateFullscreenUI(\"ADT from URL\");\r\n        const serialized = await AdvancedDynamicTexture._LoadURLContentAsync(url);\r\n        adt.parseSerializedObject(serialized, scaleToSize);\r\n        return adt;\r\n    }\r\n\r\n    /**\r\n     * Recreate the content of the ADT from a url json\r\n     * @param url defines the url to load\r\n     * @param scaleToSize defines whether to scale to texture to the saved size\r\n     * @returns a promise that will resolve on success\r\n     */\r\n    public parseFromURLAsync(url: string, scaleToSize?: boolean): Promise<AdvancedDynamicTexture> {\r\n        return AdvancedDynamicTexture.ParseFromFileAsync(url, scaleToSize, this);\r\n    }\r\n\r\n    private static _LoadURLContentAsync(url: string, snippet: boolean = false): Promise<any> {\r\n        if (url === \"\") {\r\n            return Promise.reject(\"No URL provided\");\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            const request = new WebRequest();\r\n            request.addEventListener(\"readystatechange\", () => {\r\n                if (request.readyState == 4) {\r\n                    if (request.status == 200) {\r\n                        let gui;\r\n                        if (snippet) {\r\n                            const payload = JSON.parse(JSON.parse(request.responseText).jsonPayload);\r\n                            gui = payload.encodedGui ? new TextDecoder(\"utf-8\").decode(DecodeBase64ToBinary(payload.encodedGui)) : payload.gui;\r\n                        } else {\r\n                            gui = request.responseText;\r\n                        }\r\n                        const serializationObject = JSON.parse(gui);\r\n                        resolve(serializationObject);\r\n                    } else {\r\n                        reject(\"Unable to load\");\r\n                    }\r\n                }\r\n            });\r\n            request.open(\"GET\", url);\r\n            request.send();\r\n        });\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Compares two rectangle based controls for pixel overlap\r\n     * @param control1 The first control to compare\r\n     * @param control2 The second control to compare\r\n     * @returns true if overlaps, otherwise false\r\n     */\r\n    private static _Overlaps(control1: Control, control2: Control) {\r\n        return !(\r\n            control1.centerX > control2.centerX + control2.widthInPixels ||\r\n            control1.centerX + control1.widthInPixels < control2.centerX ||\r\n            control1.centerY + control1.heightInPixels < control2.centerY ||\r\n            control1.centerY > control2.centerY + control2.heightInPixels\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in projected mode (ie. attached to a mesh)\r\n     * @param mesh defines the mesh which will receive the texture\r\n     * @param width defines the texture width (1024 by default)\r\n     * @param height defines the texture height (1024 by default)\r\n     * @param supportPointerMove defines a boolean indicating if the texture must capture move events (true by default)\r\n     * @param onlyAlphaTesting defines a boolean indicating that alpha blending will not be used (only alpha testing) (false by default)\r\n     * @param invertY defines if the texture needs to be inverted on the y axis during loading (true by default)\r\n     * @param materialSetupCallback defines a custom way of creating and setting up the material on the mesh\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateForMesh(\r\n        mesh: AbstractMesh,\r\n        width = 1024,\r\n        height = 1024,\r\n        supportPointerMove = true,\r\n        onlyAlphaTesting = false,\r\n        invertY?: boolean,\r\n        materialSetupCallback: (mesh: AbstractMesh, uniqueId: string, texture: AdvancedDynamicTexture, onlyAlphaTesting: boolean) => void = this._CreateMaterial\r\n    ): AdvancedDynamicTexture {\r\n        // use a unique ID in name so serialization will work even if you create two ADTs for a single mesh\r\n        const uniqueId = RandomGUID();\r\n        const result = new AdvancedDynamicTexture(\r\n            `AdvancedDynamicTexture for ${mesh.name} [${uniqueId}]`,\r\n            width,\r\n            height,\r\n            mesh.getScene(),\r\n            true,\r\n            Texture.TRILINEAR_SAMPLINGMODE,\r\n            invertY\r\n        );\r\n\r\n        materialSetupCallback(mesh, uniqueId, result, onlyAlphaTesting);\r\n\r\n        result.attachToMesh(mesh, supportPointerMove);\r\n        return result;\r\n    }\r\n\r\n    private static _CreateMaterial(mesh: AbstractMesh, uniqueId: string, texture: AdvancedDynamicTexture, onlyAlphaTesting: boolean): void {\r\n        const internalClassType = GetClass(\"BABYLON.StandardMaterial\");\r\n        if (!internalClassType) {\r\n            throw \"StandardMaterial needs to be imported before as it contains a side-effect required by your code.\";\r\n        }\r\n\r\n        const material: StandardMaterial = new internalClassType(`AdvancedDynamicTextureMaterial for ${mesh.name} [${uniqueId}]`, mesh.getScene());\r\n        material.backFaceCulling = false;\r\n        material.diffuseColor = Color3.Black();\r\n        material.specularColor = Color3.Black();\r\n        if (onlyAlphaTesting) {\r\n            material.diffuseTexture = texture;\r\n            material.emissiveTexture = texture;\r\n            texture.hasAlpha = true;\r\n        } else {\r\n            material.emissiveTexture = texture;\r\n            material.opacityTexture = texture;\r\n        }\r\n        mesh.material = material;\r\n    }\r\n\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in projected mode (ie. attached to a mesh) BUT do not create a new material for the mesh. You will be responsible for connecting the texture\r\n     * @param mesh defines the mesh which will receive the texture\r\n     * @param width defines the texture width (1024 by default)\r\n     * @param height defines the texture height (1024 by default)\r\n     * @param supportPointerMove defines a boolean indicating if the texture must capture move events (true by default)\r\n     * @param invertY defines if the texture needs to be inverted on the y axis during loading (true by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateForMeshTexture(mesh: AbstractMesh, width = 1024, height = 1024, supportPointerMove = true, invertY?: boolean): AdvancedDynamicTexture {\r\n        const result = new AdvancedDynamicTexture(mesh.name + \" AdvancedDynamicTexture\", width, height, mesh.getScene(), true, Texture.TRILINEAR_SAMPLINGMODE, invertY);\r\n        result.attachToMesh(mesh, supportPointerMove);\r\n        return result;\r\n    }\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in fullscreen mode.\r\n     * In this mode the texture will rely on a layer for its rendering.\r\n     * This allows it to be treated like any other layer.\r\n     * As such, if you have a multi camera setup, you can set the layerMask on the GUI as well.\r\n     * LayerMask is set through advancedTexture.layer.layerMask\r\n     * @param name defines name for the texture\r\n     * @param foreground defines a boolean indicating if the texture must be rendered in foreground (default is true)\r\n     * @param scene defines the hosting scene\r\n     * @param sampling defines the texture sampling mode (Texture.BILINEAR_SAMPLINGMODE by default)\r\n     * @param adaptiveScaling defines whether to automatically scale root to match hardwarescaling (false by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateFullscreenUI(\r\n        name: string,\r\n        foreground: boolean = true,\r\n        scene: Nullable<Scene> = null,\r\n        sampling = Texture.BILINEAR_SAMPLINGMODE,\r\n        adaptiveScaling: boolean = false\r\n    ): AdvancedDynamicTexture {\r\n        const result = new AdvancedDynamicTexture(name, 0, 0, scene, false, sampling);\r\n        // Display\r\n        const resultScene = result.getScene();\r\n        const layer = new Layer(name + \"_layer\", null, resultScene, !foreground);\r\n        layer.texture = result;\r\n        result._layerToDispose = layer;\r\n        result._isFullscreen = true;\r\n\r\n        if (adaptiveScaling && resultScene) {\r\n            const newScale = 1 / resultScene.getEngine().getHardwareScalingLevel();\r\n            result._rootContainer.scaleX = newScale;\r\n            result._rootContainer.scaleY = newScale;\r\n        }\r\n\r\n        // Attach\r\n        result.attach();\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Scales the texture\r\n     * @param ratio the scale factor to apply to both width and height\r\n     */\r\n    public scale(ratio: number): void {\r\n        super.scale(ratio);\r\n        this.markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Resizes the texture\r\n     * @param width the new width\r\n     * @param height the new height\r\n     */\r\n    public scaleTo(width: number, height: number): void {\r\n        super.scaleTo(width, height);\r\n        this.markAsDirty();\r\n    }\r\n\r\n    private _checkGuiIsReady() {\r\n        if (this.guiIsReady()) {\r\n            this.onGuiReadyObservable.notifyObservers(this);\r\n\r\n            this.onGuiReadyObservable.clear();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns true if all the GUI components are ready to render\r\n     */\r\n    public guiIsReady(): boolean {\r\n        return this._rootContainer.isReady();\r\n    }\r\n}\r\n","import type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { PerfCounter } from \"core/Misc/perfCounter\";\r\nimport type { IDisposable } from \"core/scene\";\r\n\r\nimport type { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\n\r\n/**\r\n * This class can be used to get instrumentation data from a AdvancedDynamicTexture object\r\n */\r\nexport class AdvancedDynamicTextureInstrumentation implements IDisposable {\r\n    private _captureRenderTime = false;\r\n    private _renderTime = new PerfCounter();\r\n\r\n    private _captureLayoutTime = false;\r\n    private _layoutTime = new PerfCounter();\r\n\r\n    // Observers\r\n    private _onBeginRenderObserver: Nullable<Observer<AdvancedDynamicTexture>> = null;\r\n    private _onEndRenderObserver: Nullable<Observer<AdvancedDynamicTexture>> = null;\r\n    private _onBeginLayoutObserver: Nullable<Observer<AdvancedDynamicTexture>> = null;\r\n    private _onEndLayoutObserver: Nullable<Observer<AdvancedDynamicTexture>> = null;\r\n\r\n    // Properties\r\n\r\n    /**\r\n     * Gets the perf counter used to capture render time\r\n     */\r\n    public get renderTimeCounter(): PerfCounter {\r\n        return this._renderTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the perf counter used to capture layout time\r\n     */\r\n    public get layoutTimeCounter(): PerfCounter {\r\n        return this._layoutTime;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the render time capture\r\n     */\r\n    public get captureRenderTime(): boolean {\r\n        return this._captureRenderTime;\r\n    }\r\n\r\n    public set captureRenderTime(value: boolean) {\r\n        if (value === this._captureRenderTime) {\r\n            return;\r\n        }\r\n\r\n        this._captureRenderTime = value;\r\n\r\n        if (value) {\r\n            this._onBeginRenderObserver = this.texture.onBeginRenderObservable.add(() => {\r\n                this._renderTime.beginMonitoring();\r\n            });\r\n\r\n            this._onEndRenderObserver = this.texture.onEndRenderObservable.add(() => {\r\n                this._renderTime.endMonitoring(true);\r\n            });\r\n        } else {\r\n            this.texture.onBeginRenderObservable.remove(this._onBeginRenderObserver);\r\n            this._onBeginRenderObserver = null;\r\n            this.texture.onEndRenderObservable.remove(this._onEndRenderObserver);\r\n            this._onEndRenderObserver = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the layout time capture\r\n     */\r\n    public get captureLayoutTime(): boolean {\r\n        return this._captureLayoutTime;\r\n    }\r\n\r\n    public set captureLayoutTime(value: boolean) {\r\n        if (value === this._captureLayoutTime) {\r\n            return;\r\n        }\r\n\r\n        this._captureLayoutTime = value;\r\n\r\n        if (value) {\r\n            this._onBeginLayoutObserver = this.texture.onBeginLayoutObservable.add(() => {\r\n                this._layoutTime.beginMonitoring();\r\n            });\r\n\r\n            this._onEndLayoutObserver = this.texture.onEndLayoutObservable.add(() => {\r\n                this._layoutTime.endMonitoring(true);\r\n            });\r\n        } else {\r\n            this.texture.onBeginLayoutObservable.remove(this._onBeginLayoutObserver);\r\n            this._onBeginLayoutObserver = null;\r\n            this.texture.onEndLayoutObservable.remove(this._onEndLayoutObserver);\r\n            this._onEndLayoutObserver = null;\r\n        }\r\n    }\r\n    /**\r\n     * Instantiates a new advanced dynamic texture instrumentation.\r\n     * This class can be used to get instrumentation data from an AdvancedDynamicTexture object\r\n     * @param texture Defines the AdvancedDynamicTexture to instrument\r\n     */\r\n    public constructor(\r\n        /**\r\n         * Define the instrumented AdvancedDynamicTexture.\r\n         */\r\n        public texture: AdvancedDynamicTexture\r\n    ) {}\r\n\r\n    /**\r\n     * Dispose and release associated resources.\r\n     */\r\n    public dispose() {\r\n        this.texture.onBeginRenderObservable.remove(this._onBeginRenderObserver);\r\n        this._onBeginRenderObserver = null;\r\n        this.texture.onEndRenderObservable.remove(this._onEndRenderObserver);\r\n        this._onEndRenderObserver = null;\r\n        this.texture.onBeginLayoutObservable.remove(this._onBeginLayoutObserver);\r\n        this._onBeginLayoutObserver = null;\r\n        this.texture.onEndLayoutObservable.remove(this._onEndLayoutObserver);\r\n        this._onEndLayoutObserver = null;\r\n\r\n        (<any>this.texture) = null;\r\n    }\r\n}\r\n","import { GetClass } from \"core/Misc/typeStore\";\r\nimport type { Nullable } from \"core/types\";\r\n\r\nconst XmlLoaderError = \"XmlLoader Exception : XML file is malformed or corrupted.\";\r\n\r\n/**\r\n * Class used to load GUI via XML.\r\n */\r\nexport class XmlLoader {\r\n    private _nodes: any = {};\r\n\r\n    private _nodeTypes: any = {\r\n        element: 1,\r\n        attribute: 2,\r\n        text: 3,\r\n    };\r\n\r\n    private _isLoaded: boolean = false;\r\n\r\n    private _objectAttributes: any = {\r\n        textHorizontalAlignment: 1,\r\n        textVerticalAlignment: 2,\r\n        horizontalAlignment: 3,\r\n        verticalAlignment: 4,\r\n        stretch: 5,\r\n    };\r\n\r\n    private _rootNode: any;\r\n\r\n    private _parentClass: any;\r\n\r\n    /**\r\n     * Create a new xml loader\r\n     * @param parentClass Sets the class context. Used when the loader is instanced inside a class and not in a global context\r\n     */\r\n    constructor(parentClass: any = null) {\r\n        if (parentClass) {\r\n            this._parentClass = parentClass;\r\n        }\r\n    }\r\n\r\n    private _getChainElement(attributeValue: any): any {\r\n        let element: any = window;\r\n\r\n        if (this._parentClass) {\r\n            element = this._parentClass;\r\n        }\r\n        let value = attributeValue;\r\n        value = value.split(\".\");\r\n\r\n        for (let i = 0; i < value.length; i++) {\r\n            element = element[value[i]];\r\n        }\r\n        return element;\r\n    }\r\n\r\n    private _getClassAttribute(attributeName: string): any {\r\n        const attribute = attributeName.split(\".\");\r\n        const className = GetClass(\"BABYLON.GUI.\" + attribute[0]);\r\n        return className[attribute[1]];\r\n    }\r\n\r\n    private _createGuiElement(node: any, parent: any, linkParent: boolean = true): void {\r\n        try {\r\n            const className = GetClass(\"BABYLON.GUI.\" + node.nodeName);\r\n            const guiNode = new className();\r\n\r\n            if (parent && linkParent) {\r\n                parent.addControl(guiNode);\r\n            }\r\n\r\n            for (let i = 0; i < node.attributes.length; i++) {\r\n                if (node.attributes[i].name.toLowerCase().includes(\"datasource\")) {\r\n                    continue;\r\n                }\r\n\r\n                if (node.attributes[i].name.toLowerCase().includes(\"observable\")) {\r\n                    const element = this._getChainElement(node.attributes[i].value);\r\n                    guiNode[node.attributes[i].name].add(element);\r\n\r\n                    continue;\r\n                } else if (node.attributes[i].name == \"linkWithMesh\") {\r\n                    if (this._parentClass) {\r\n                        guiNode.linkWithMesh(this._parentClass[node.attributes[i].value]);\r\n                    } else {\r\n                        guiNode.linkWithMesh(window[node.attributes[i].value]);\r\n                    }\r\n                } else if (node.attributes[i].value.startsWith(\"{{\") && node.attributes[i].value.endsWith(\"}}\")) {\r\n                    const element = this._getChainElement(node.attributes[i].value.substring(2, node.attributes[i].value.length - 2));\r\n                    guiNode[node.attributes[i].name] = element;\r\n                } else if (!this._objectAttributes[node.attributes[i].name]) {\r\n                    if (node.attributes[i].value == \"true\" || node.attributes[i].value == \"false\") {\r\n                        guiNode[node.attributes[i].name] = node.attributes[i].value == \"true\";\r\n                    } else {\r\n                        guiNode[node.attributes[i].name] = !isNaN(Number(node.attributes[i].value)) ? Number(node.attributes[i].value) : node.attributes[i].value;\r\n                    }\r\n                } else {\r\n                    guiNode[node.attributes[i].name] = this._getClassAttribute(node.attributes[i].value);\r\n                }\r\n            }\r\n\r\n            if (!node.attributes.getNamedItem(\"id\")) {\r\n                this._nodes[node.nodeName + Object.keys(this._nodes).length + \"_gen\"] = guiNode;\r\n                return guiNode;\r\n            }\r\n\r\n            let id = node.attributes.getNamedItem(\"id\").value;\r\n            if (id.startsWith(\"{{\") && id.endsWith(\"}}\")) {\r\n                id = this._getChainElement(id.substring(2, id.length - 2));\r\n            }\r\n\r\n            if (!this._nodes[id]) {\r\n                this._nodes[id] = guiNode;\r\n            } else {\r\n                throw \"XmlLoader Exception : Duplicate ID, every element should have an unique ID attribute\";\r\n            }\r\n            return guiNode;\r\n        } catch (exception) {\r\n            throw \"XmlLoader Exception : Error parsing Control \" + node.nodeName + \",\" + exception + \".\";\r\n        }\r\n    }\r\n\r\n    private _parseGrid(node: any, guiNode: any, parent: any): void {\r\n        let width;\r\n        let height;\r\n        let columns;\r\n        const rows = node.children;\r\n        let cells;\r\n        let isPixel = false;\r\n        let cellNode;\r\n        let rowNumber = -1;\r\n        let columnNumber = -1;\r\n        let totalColumnsNumber = 0;\r\n\r\n        for (let i = 0; i < rows.length; i++) {\r\n            if (rows[i].nodeType != this._nodeTypes.element) {\r\n                continue;\r\n            }\r\n            if (rows[i].nodeName != \"Row\") {\r\n                throw \"XmlLoader Exception : Expecting Row node, received \" + rows[i].nodeName;\r\n            }\r\n            rowNumber += 1;\r\n            columns = rows[i].children;\r\n\r\n            if (!rows[i].attributes.getNamedItem(\"height\")) {\r\n                throw \"XmlLoader Exception : Height must be defined for grid rows\";\r\n            }\r\n            height = Number(rows[i].attributes.getNamedItem(\"height\").nodeValue);\r\n            isPixel = rows[i].attributes.getNamedItem(\"isPixel\") ? JSON.parse(rows[i].attributes.getNamedItem(\"isPixel\").nodeValue) : false;\r\n            guiNode.addRowDefinition(height, isPixel);\r\n\r\n            for (let j = 0; j < columns.length; j++) {\r\n                if (columns[j].nodeType != this._nodeTypes.element) {\r\n                    continue;\r\n                }\r\n                if (columns[j].nodeName != \"Column\") {\r\n                    throw \"XmlLoader Exception : Expecting Column node, received \" + columns[j].nodeName;\r\n                }\r\n                columnNumber += 1;\r\n                if (rowNumber > 0 && columnNumber > totalColumnsNumber) {\r\n                    throw \"XmlLoader Exception : In the Grid element, the number of columns is defined in the first row, do not add more columns in the subsequent rows.\";\r\n                }\r\n\r\n                if (rowNumber == 0) {\r\n                    if (!columns[j].attributes.getNamedItem(\"width\")) {\r\n                        throw \"XmlLoader Exception : Width must be defined for all the grid columns in the first row\";\r\n                    }\r\n                    width = Number(columns[j].attributes.getNamedItem(\"width\").nodeValue);\r\n                    isPixel = columns[j].attributes.getNamedItem(\"isPixel\") ? JSON.parse(columns[j].attributes.getNamedItem(\"isPixel\").nodeValue) : false;\r\n                    guiNode.addColumnDefinition(width, isPixel);\r\n                }\r\n\r\n                cells = columns[j].children;\r\n\r\n                for (let k = 0; k < cells.length; k++) {\r\n                    if (cells[k].nodeType != this._nodeTypes.element) {\r\n                        continue;\r\n                    }\r\n                    cellNode = this._createGuiElement(cells[k], guiNode, false);\r\n                    guiNode.addControl(cellNode, rowNumber, columnNumber);\r\n                    if (cells[k].firstChild) {\r\n                        this._parseXml(cells[k].firstChild, cellNode);\r\n                    }\r\n                }\r\n            }\r\n            if (rowNumber == 0) {\r\n                totalColumnsNumber = columnNumber;\r\n            }\r\n            columnNumber = -1;\r\n        }\r\n\r\n        if (node.nextSibling) {\r\n            this._parseXml(node.nextSibling, parent);\r\n        }\r\n    }\r\n\r\n    private _parseElement(node: any, guiNode: any, parent: any): void {\r\n        if (node.firstChild) {\r\n            this._parseXml(node.firstChild, guiNode);\r\n        }\r\n\r\n        if (node.nextSibling) {\r\n            this._parseXml(node.nextSibling, parent);\r\n        }\r\n    }\r\n\r\n    private _prepareSourceElement(node: any, guiNode: any, variable: any, source: any, iterator: any): void {\r\n        if (this._parentClass) {\r\n            this._parentClass[variable] = source[iterator];\r\n        } else {\r\n            window[variable] = source[iterator];\r\n        }\r\n\r\n        if (node.firstChild) {\r\n            this._parseXml(node.firstChild, guiNode, true);\r\n        }\r\n    }\r\n\r\n    private _parseElementsFromSource(node: any, guiNode: any, parent: any): void {\r\n        const dataSource = node.attributes.getNamedItem(\"dataSource\").value;\r\n\r\n        if (!dataSource.includes(\" in \")) {\r\n            throw \"XmlLoader Exception : Malformed XML, Data Source must include an in\";\r\n        } else {\r\n            let isArray = true;\r\n            const splittedSource = dataSource.split(\" in \");\r\n            if (splittedSource.length < 2) {\r\n                throw \"XmlLoader Exception : Malformed XML, Data Source must have an iterator and a source\";\r\n            }\r\n            let source = splittedSource[1];\r\n            if (source.startsWith(\"{\") && source.endsWith(\"}\")) {\r\n                isArray = false;\r\n            }\r\n\r\n            if (!isArray || (source.startsWith(\"[\") && source.endsWith(\"]\"))) {\r\n                source = source.substring(1, source.length - 1);\r\n            }\r\n\r\n            if (this._parentClass) {\r\n                source = this._parentClass[source];\r\n            } else {\r\n                source = window[source];\r\n            }\r\n\r\n            if (isArray) {\r\n                for (let i = 0; i < source.length; i++) {\r\n                    this._prepareSourceElement(node, guiNode, splittedSource[0], source, i);\r\n                }\r\n            } else {\r\n                for (const i in source) {\r\n                    this._prepareSourceElement(node, guiNode, splittedSource[0], source, i);\r\n                }\r\n            }\r\n\r\n            if (node.nextSibling) {\r\n                this._parseXml(node.nextSibling, parent);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _parseXml(node: any, parent: any, generated: boolean = false): void {\r\n        if (node.nodeType != this._nodeTypes.element) {\r\n            if (node.nextSibling) {\r\n                this._parseXml(node.nextSibling, parent, generated);\r\n            }\r\n            return;\r\n        }\r\n\r\n        if (generated) {\r\n            node.setAttribute(\"id\", parent.id + (parent._children.length + 1));\r\n        }\r\n\r\n        const guiNode = this._createGuiElement(node, parent);\r\n\r\n        if (!this._rootNode) {\r\n            this._rootNode = guiNode;\r\n        }\r\n\r\n        if (node.nodeName == \"Grid\") {\r\n            this._parseGrid(node, guiNode, parent);\r\n        } else if (!node.attributes.getNamedItem(\"dataSource\")) {\r\n            this._parseElement(node, guiNode, parent);\r\n        } else {\r\n            this._parseElementsFromSource(node, guiNode, parent);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets if the loading has finished.\r\n     * @returns whether the loading has finished or not\r\n     */\r\n    public isLoaded(): boolean {\r\n        return this._isLoaded;\r\n    }\r\n\r\n    /**\r\n     * Gets a loaded node / control by id.\r\n     * @param id the Controls id set in the xml\r\n     * @returns element of type Control\r\n     */\r\n    public getNodeById(id: string): any {\r\n        return this._nodes[id];\r\n    }\r\n\r\n    /**\r\n     * Gets all loaded nodes / controls\r\n     * @returns Array of controls\r\n     */\r\n    public getNodes(): any {\r\n        return this._nodes;\r\n    }\r\n    /**\r\n     * Disposes the loaded layout\r\n     */\r\n    public dispose(): void {\r\n        if (this._rootNode) {\r\n            this._rootNode.dispose();\r\n            this._rootNode = null;\r\n            this._nodes = {};\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initiates the xml layout loading\r\n     * @param xmlFile defines the xml layout to load\r\n     * @param rootNode defines the node / control to use as a parent for the loaded layout controls.\r\n     * @param onSuccess defines the callback called on layout load successfully.\r\n     * @param onError defines the callback called on layout load failure.\r\n     */\r\n    public loadLayout(xmlFile: any, rootNode: any, onSuccess: Nullable<() => void> = null, onError: Nullable<(error: string) => void> = null): void {\r\n        const xhttp = new XMLHttpRequest();\r\n        xhttp.onload = () => {\r\n            if (xhttp.readyState === 4 && xhttp.status === 200) {\r\n                if (!xhttp.responseXML) {\r\n                    if (onError) {\r\n                        onError(XmlLoaderError);\r\n                        return;\r\n                    } else {\r\n                        throw XmlLoaderError;\r\n                    }\r\n                }\r\n\r\n                const xmlDoc = xhttp.responseXML.documentElement;\r\n                this._parseXml(xmlDoc.firstChild, rootNode);\r\n                this._isLoaded = true;\r\n\r\n                if (onSuccess) {\r\n                    onSuccess();\r\n                }\r\n            }\r\n        };\r\n\r\n        xhttp.onerror = function () {\r\n            if (onError) {\r\n                onError(\"an error occurred during loading the layout\");\r\n            }\r\n        };\r\n\r\n        xhttp.open(\"GET\", xmlFile, true);\r\n        xhttp.send();\r\n    }\r\n    /**\r\n     * Initiates the xml layout loading asynchronously\r\n     * @param xmlFile defines the xml layout to load\r\n     * @param rootNode defines the node / control to use as a parent for the loaded layout controls.\r\n     * @returns Promise\r\n     */\r\n    public async loadLayoutAsync(xmlFile: any, rootNode: any): Promise<any> {\r\n        return new Promise((resolve: any, reject: any) => {\r\n            this.loadLayout(xmlFile, rootNode, resolve, reject);\r\n        });\r\n    }\r\n}\r\n","import { Vector3 } from \"core/Maths/math.vector\";\r\n\r\n/**\r\n * Class used to transport Vector3 information for pointer events\r\n */\r\nexport class Vector3WithInfo extends Vector3 {\r\n    /**\r\n     * Creates a new Vector3WithInfo\r\n     * @param source defines the vector3 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(\r\n        source: Vector3,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0\r\n    ) {\r\n        super(source.x, source.y, source.z);\r\n    }\r\n}\r\n","import type { Nullable } from \"core/types\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport { PointerEventTypes } from \"core/Events/pointerEvents\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { IBehaviorAware, Behavior } from \"core/Behaviors/behavior\";\r\nimport type { IDisposable, Scene } from \"core/scene\";\r\n\r\nimport type { GUI3DManager } from \"../gui3DManager\";\r\nimport { Vector3WithInfo } from \"../vector3WithInfo\";\r\nimport type { Container3D } from \"./container3D\";\r\n\r\nimport type { TouchButton3D } from \"./touchButton3D\";\r\n\r\n/**\r\n * Class used as base class for controls\r\n */\r\nexport class Control3D implements IDisposable, IBehaviorAware<Control3D> {\r\n    private _node: Nullable<TransformNode>;\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _downPointerIds: { [id: number]: number } = {}; // Store number of pointer downs per ID, from near and far interactions\r\n\r\n    protected _isVisible = true;\r\n\r\n    /** @internal */\r\n    public _host: GUI3DManager;\r\n    /** @internal */\r\n    public _isScaledByManager = false;\r\n\r\n    /** Gets or sets the control position in world space */\r\n    public get position(): Vector3 {\r\n        if (!this._node) {\r\n            return Vector3.Zero();\r\n        }\r\n\r\n        return this._node.position;\r\n    }\r\n\r\n    public set position(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.position = value;\r\n    }\r\n\r\n    /** Gets or sets the control scaling in world space */\r\n    public get scaling(): Vector3 {\r\n        if (!this._node) {\r\n            return new Vector3(1, 1, 1);\r\n        }\r\n\r\n        return this._node.scaling;\r\n    }\r\n\r\n    public set scaling(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._isScaledByManager = false;\r\n        this._node.scaling = value;\r\n    }\r\n\r\n    /** Callback used to start pointer enter animation */\r\n    public pointerEnterAnimation: () => void;\r\n    /** Callback used to start pointer out animation */\r\n    public pointerOutAnimation: () => void;\r\n    /** Callback used to start pointer down animation */\r\n    public pointerDownAnimation: () => void;\r\n    /** Callback used to start pointer up animation */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    /**\r\n     * An event triggered when the pointer moves over the control\r\n     */\r\n    public onPointerMoveObservable = new Observable<Vector3>();\r\n\r\n    /**\r\n     * An event triggered when the pointer moves out of the control\r\n     */\r\n    public onPointerOutObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * An event triggered when the pointer taps the control\r\n     */\r\n    public onPointerDownObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer is up\r\n     */\r\n    public onPointerUpObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when a control is clicked on (with a mouse)\r\n     */\r\n    public onPointerClickObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer enters the control\r\n     */\r\n    public onPointerEnterObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * Gets or sets the parent container\r\n     */\r\n    public parent: Nullable<Container3D>;\r\n\r\n    // Behaviors\r\n    private _behaviors = new Array<Behavior<Control3D>>();\r\n\r\n    /**\r\n     * Gets the list of attached behaviors\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors\r\n     */\r\n    public get behaviors(): Behavior<Control3D>[] {\r\n        return this._behaviors;\r\n    }\r\n\r\n    /**\r\n     * Attach a behavior to the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public addBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        const index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n\r\n        behavior.init();\r\n        const scene = this._host.scene;\r\n        if (scene.isLoading) {\r\n            // We defer the attach when the scene will be loaded\r\n            scene.onDataLoadedObservable.addOnce(() => {\r\n                behavior.attach(this);\r\n            });\r\n        } else {\r\n            behavior.attach(this);\r\n        }\r\n        this._behaviors.push(behavior);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove an attached behavior\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public removeBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        const index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index === -1) {\r\n            return this;\r\n        }\r\n\r\n        this._behaviors[index].detach();\r\n        this._behaviors.splice(index, 1);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets an attached behavior by name\r\n     * @param name defines the name of the behavior to look for\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors\r\n     * @returns null if behavior was not found else the requested behavior\r\n     */\r\n    public getBehaviorByName(name: string): Nullable<Behavior<Control3D>> {\r\n        for (const behavior of this._behaviors) {\r\n            if (behavior.name === name) {\r\n                return behavior;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n\r\n        const mesh = this.mesh;\r\n        if (mesh) {\r\n            mesh.setEnabled(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the control name\r\n     */\r\n    constructor(\r\n        /** Defines the control name */\r\n        public name?: string\r\n    ) {}\r\n\r\n    /**\r\n     * Gets a string representing the class name\r\n     */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n     * Get the current class name of the control.\r\n     * @returns current class name\r\n     */\r\n    public getClassName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Control3D\";\r\n    }\r\n\r\n    /**\r\n     * Gets the transform node used by this control\r\n     */\r\n    public get node(): Nullable<TransformNode> {\r\n        return this._node;\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh used to render this control\r\n     */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        if (this._node instanceof AbstractMesh) {\r\n            return this._node as AbstractMesh;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Link the control as child of the given node\r\n     * @param node defines the node to link to. Use null to unlink the control\r\n     * @returns the current control\r\n     */\r\n    public linkToTransformNode(node: Nullable<TransformNode>): Control3D {\r\n        if (this._node) {\r\n            this._node.parent = node;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal*\r\n     */\r\n    public _prepareNode(scene: Scene): void {\r\n        if (!this._node) {\r\n            this._node = this._createNode(scene);\r\n\r\n            if (!this.node) {\r\n                return;\r\n            }\r\n            this._injectGUI3DReservedDataStore(this.node).control = this; // Store the control on the reservedDataStore field in order to get it when picking\r\n\r\n            const mesh = this.mesh;\r\n            if (mesh) {\r\n                mesh.isPickable = true;\r\n\r\n                this._affectMaterial(mesh);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected _injectGUI3DReservedDataStore(node: TransformNode): any {\r\n        node.reservedDataStore = node.reservedDataStore ?? {};\r\n        node.reservedDataStore.GUI3D = node.reservedDataStore.GUI3D ?? {};\r\n        return node.reservedDataStore.GUI3D;\r\n    }\r\n\r\n    /**\r\n     * Node creation.\r\n     * Can be overriden by children\r\n     * @param scene defines the scene where the node must be attached\r\n     * @returns the attached node or null if none. Must return a Mesh or AbstractMesh if there is an attached visible object\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        // Do nothing by default\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Affect a material to the given mesh\r\n     * @param mesh defines the mesh which will represent the control\r\n     */\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        mesh.material = null;\r\n    }\r\n\r\n    private _isTouchButton3D(control: Control3D): control is TouchButton3D {\r\n        return (control as TouchButton3D)._generatePointerEventType !== undefined;\r\n    }\r\n\r\n    // Pointers\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerMove(target: Control3D, coordinates: Vector3): void {\r\n        this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerEnter(target: Control3D): boolean {\r\n        if (this._enterCount === -1) {\r\n            // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n\r\n        this._enterCount++;\r\n\r\n        if (this._enterCount > 1) {\r\n            return false;\r\n        }\r\n\r\n        this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerOut(target: Control3D): void {\r\n        this._enterCount--;\r\n\r\n        if (this._enterCount > 0) {\r\n            return;\r\n        }\r\n\r\n        this._enterCount = 0;\r\n\r\n        this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerDown(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        this._downCount++;\r\n        this._downPointerIds[pointerId] = this._downPointerIds[pointerId] + 1 || 1;\r\n\r\n        if (this._downCount !== 1) {\r\n            return false;\r\n        }\r\n\r\n        this.onPointerDownObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerUp(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._downCount--;\r\n        this._downPointerIds[pointerId]--;\r\n\r\n        if (this._downPointerIds[pointerId] <= 0) {\r\n            delete this._downPointerIds[pointerId];\r\n        }\r\n\r\n        if (this._downCount < 0) {\r\n            // Handle if forcePointerUp was called prior to this\r\n            this._downCount = 0;\r\n            return;\r\n        }\r\n\r\n        if (this._downCount == 0) {\r\n            if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n                this.onPointerClickObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n            }\r\n            this.onPointerUpObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n            if (this.pointerUpAnimation) {\r\n                this.pointerUpAnimation();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector3.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (const key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector3.Zero(), +key as number, 0, true);\r\n            }\r\n            if (this._downCount > 0) {\r\n                this._downCount = 1;\r\n                this._onPointerUp(this, Vector3.Zero(), 0, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _processObservables(type: number, pickedPoint: Vector3, originMeshPosition: Nullable<Vector3>, pointerId: number, buttonIndex: number): boolean {\r\n        if (this._isTouchButton3D(this) && originMeshPosition) {\r\n            type = this._generatePointerEventType(type, originMeshPosition, this._downCount);\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, pickedPoint);\r\n\r\n            const previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, pickedPoint, pointerId, buttonIndex);\r\n            this._host._lastControlDown[pointerId] = this;\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP || type === PointerEventTypes.POINTERDOUBLETAP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, pickedPoint, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** @internal */\r\n    public _disposeNode(): void {\r\n        if (this._node) {\r\n            this._node.dispose();\r\n            this._node = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        this._disposeNode();\r\n\r\n        // Behaviors\r\n        for (const behavior of this._behaviors) {\r\n            behavior.detach();\r\n        }\r\n    }\r\n}\r\n","import type { Control } from \"../../2D/controls/control\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport type { Nullable } from \"core/types\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\n\r\n/**\r\n * The base class for controls that display content\r\n */\r\nexport class ContentDisplay3D extends Control3D {\r\n    private _content: Control;\r\n    private _facadeTexture: Nullable<AdvancedDynamicTexture>;\r\n    protected _contentResolution = 512;\r\n    protected _contentScaleRatio = 2;\r\n    protected _contentScaleRatioY?: number;\r\n\r\n    /**\r\n     * Gets or sets the GUI 2D content used to display the button's facade\r\n     */\r\n    public get content(): Control {\r\n        return this._content;\r\n    }\r\n\r\n    public set content(value: Control) {\r\n        this._content = value;\r\n\r\n        if (!value || !this._host || !this._host.utilityLayer) {\r\n            return;\r\n        }\r\n\r\n        if (!this._facadeTexture) {\r\n            this._facadeTexture = new AdvancedDynamicTexture(\r\n                \"Facade\",\r\n                this._contentResolution,\r\n                this._contentResolution,\r\n                this._host.utilityLayer.utilityLayerScene,\r\n                true,\r\n                Texture.TRILINEAR_SAMPLINGMODE\r\n            );\r\n            this._setFacadeTextureScaling();\r\n            this._facadeTexture.premulAlpha = true;\r\n        } else {\r\n            this._facadeTexture.rootContainer.clearControls();\r\n        }\r\n\r\n        this._facadeTexture.addControl(value);\r\n\r\n        this._applyFacade(this._facadeTexture);\r\n    }\r\n\r\n    protected _setFacadeTextureScaling() {\r\n        if (this._facadeTexture) {\r\n            this._facadeTexture.rootContainer.scaleX = this._contentScaleRatio;\r\n            this._facadeTexture.rootContainer.scaleY = this._contentScaleRatioY ?? this._contentScaleRatio;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the texture resolution used to render content (512 by default)\r\n     */\r\n    public get contentResolution(): number {\r\n        return this._contentResolution;\r\n    }\r\n\r\n    public set contentResolution(value: number) {\r\n        if (this._contentResolution === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentResolution = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    protected _disposeFacadeTexture() {\r\n        if (this._facadeTexture) {\r\n            this._facadeTexture.dispose();\r\n            this._facadeTexture = null;\r\n        }\r\n    }\r\n\r\n    protected _resetContent() {\r\n        this._disposeFacadeTexture();\r\n        this.content = this._content;\r\n    }\r\n\r\n    /**\r\n     * Apply the facade texture (created from the content property).\r\n     * This function can be overloaded by child classes\r\n     * @param facadeTexture defines the AdvancedDynamicTexture to use\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {}\r\n}\r\n","import { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { ContentDisplay3D } from \"./contentDisplay3D\";\r\n\r\n/**\r\n * Class used as a root to all buttons\r\n */\r\nexport class AbstractButton3D extends ContentDisplay3D {\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"AbstractButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        return new TransformNode(\"button\" + this.name, scene);\r\n    }\r\n}\r\n","import { Vector4 } from \"core/Maths/math.vector\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { CreateBox } from \"core/Meshes/Builders/boxBuilder\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport { StandardMaterial } from \"core/Materials/standardMaterial\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\nimport { AbstractButton3D } from \"./abstractButton3D\";\r\nimport type { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\n\r\n/**\r\n * Options used to create a button in 3D\r\n */\r\nexport interface IButton3DCreationOptions {\r\n    /**\r\n     * Width of the button. Default: 1\r\n     */\r\n    width?: number;\r\n\r\n    /**\r\n     * Height of the button. Default: 1\r\n     */\r\n    height?: number;\r\n\r\n    /**\r\n     * Depth of the button. Default: 0.08\r\n     */\r\n    depth?: number;\r\n}\r\n\r\n/**\r\n * Class used to create a button in 3D\r\n */\r\nexport class Button3D extends AbstractButton3D {\r\n    /** @internal */\r\n    protected _currentMaterial: Material;\r\n\r\n    protected _options: IButton3DCreationOptions;\r\n    protected _height: number;\r\n    protected _depth: number;\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string, options?: IButton3DCreationOptions) {\r\n        super(name);\r\n\r\n        this._options = {\r\n            width: 1,\r\n            height: 1,\r\n            depth: 0.08,\r\n            ...options,\r\n        };\r\n\r\n        // Default animations\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Red();\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Black();\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Apply the facade texture (created from the content property).\r\n     * @param facadeTexture defines the AdvancedDynamicTexture to use\r\n     */\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        (<any>this._currentMaterial).emissiveTexture = facadeTexture;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        const faceUV = new Array(6);\r\n\r\n        for (let i = 0; i < 6; i++) {\r\n            faceUV[i] = new Vector4(0, 0, 0, 0);\r\n        }\r\n        if (scene.useRightHandedSystem) {\r\n            // Flip the u on the texture\r\n            faceUV[0].copyFromFloats(1, 0, 0, 1);\r\n        } else {\r\n            faceUV[1].copyFromFloats(0, 0, 1, 1);\r\n        }\r\n\r\n        const mesh = CreateBox(\r\n            this.name + \"_rootMesh\",\r\n            {\r\n                width: this._options.width,\r\n                height: this._options.height,\r\n                depth: this._options.depth,\r\n                faceUV: faceUV,\r\n                wrap: true,\r\n            },\r\n            scene\r\n        );\r\n\r\n        this._contentScaleRatioY = (this._contentScaleRatio * this._options.width!) / this._options.height!;\r\n        this._setFacadeTextureScaling();\r\n\r\n        return mesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        const material = new StandardMaterial(this.name + \"Material\", mesh.getScene());\r\n        material.specularColor = Color3.Black();\r\n\r\n        mesh.material = material;\r\n        this._currentMaterial = material;\r\n\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this._disposeFacadeTexture();\r\n\r\n        if (this._currentMaterial) {\r\n            this._currentMaterial.dispose();\r\n        }\r\n    }\r\n}\r\n","import type { Nullable } from \"core/types\";\r\nimport { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Class used to create containers for controls\r\n */\r\nexport class Container3D extends Control3D {\r\n    private _blockLayout = false;\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    protected _children = new Array<Control3D>();\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    public get children(): Array<Control3D> {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the layout must be blocked (default is false).\r\n     * This is helpful to optimize layout operation when adding multiple children in a row\r\n     */\r\n    public get blockLayout(): boolean {\r\n        return this._blockLayout;\r\n    }\r\n\r\n    public set blockLayout(value: boolean) {\r\n        if (this._blockLayout === value) {\r\n            return;\r\n        }\r\n\r\n        this._blockLayout = value;\r\n\r\n        if (!this._blockLayout) {\r\n            this._arrangeChildren();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new container\r\n     * @param name defines the container name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    /**\r\n     * Force the container to update the layout. Please note that it will not take blockLayout property in account\r\n     * @returns the current container\r\n     */\r\n    public updateLayout(): Container3D {\r\n        this._arrangeChildren();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the children of this control\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the children of this control\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Control3D): Container3D {\r\n        const index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control.parent = this;\r\n        control._host = this._host;\r\n\r\n        this._children.push(control);\r\n\r\n        if (this._host.utilityLayer) {\r\n            control._prepareNode(this._host.utilityLayer.utilityLayerScene);\r\n\r\n            if (control.node) {\r\n                control.node.parent = this.node;\r\n            }\r\n\r\n            if (!this.blockLayout) {\r\n                this._arrangeChildren();\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * This function will be called everytime a new control is added\r\n     */\r\n    protected _arrangeChildren() {}\r\n\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        return new TransformNode(\"ContainerNode\", scene);\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the children of this control\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): Container3D {\r\n        const index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n            control._disposeNode();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container3D\";\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        for (const control of this._children) {\r\n            control.dispose();\r\n        }\r\n\r\n        this._children.length = 0;\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    /** Control rotation will remain unchanged  */\r\n    public static readonly UNSET_ORIENTATION = 0;\r\n\r\n    /** Control will rotate to make it look at sphere central axis */\r\n    public static readonly FACEORIGIN_ORIENTATION = 1;\r\n\r\n    /** Control will rotate to make it look back at sphere central axis */\r\n    public static readonly FACEORIGINREVERSED_ORIENTATION = 2;\r\n\r\n    /** Control will rotate to look at z axis (0, 0, 1) */\r\n    public static readonly FACEFORWARD_ORIENTATION = 3;\r\n\r\n    /** Control will rotate to look at negative z axis (0, 0, -1) */\r\n    public static readonly FACEFORWARDREVERSED_ORIENTATION = 4;\r\n}\r\n","import { Tools } from \"core/Misc/tools\";\r\nimport { Matrix, Vector3, TmpVectors } from \"core/Maths/math.vector\";\r\nimport type { int } from \"core/types\";\r\n\r\nimport { Container3D } from \"./container3D\";\r\nimport type { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Abstract class used to create a container panel deployed on the surface of a volume\r\n */\r\nexport abstract class VolumeBasedPanel extends Container3D {\r\n    private _columns = 10;\r\n    private _rows = 0;\r\n    private _rowThenColum = true;\r\n\r\n    private _orientation = Container3D.FACEORIGIN_ORIENTATION;\r\n\r\n    protected _cellWidth: number;\r\n    protected _cellHeight: number;\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0;\r\n\r\n    /**\r\n     * Gets or sets the orientation to apply to all controls (BABYLON.Container3D.FaceOriginReversedOrientation by default)\r\n     * | Value | Type                                | Description |\r\n     * | ----- | ----------------------------------- | ----------- |\r\n     * | 0     | UNSET_ORIENTATION                   |  Control rotation will remain unchanged |\r\n     * | 1     | FACEORIGIN_ORIENTATION              |  Control will rotate to make it look at sphere central axis |\r\n     * | 2     | FACEORIGINREVERSED_ORIENTATION      |  Control will rotate to make it look back at sphere central axis |\r\n     * | 3     | FACEFORWARD_ORIENTATION             |  Control will rotate to look at z axis (0, 0, 1) |\r\n     * | 4     | FACEFORWARDREVERSED_ORIENTATION     |  Control will rotate to look at negative z axis (0, 0, -1) |\r\n     */\r\n    public get orientation(): number {\r\n        return this._orientation;\r\n    }\r\n\r\n    public set orientation(value: number) {\r\n        if (this._orientation === value) {\r\n            return;\r\n        }\r\n\r\n        this._orientation = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the number of columns requested (10 by default).\r\n     * The panel will automatically compute the number of rows based on number of child controls.\r\n     */\r\n    public get columns(): int {\r\n        return this._columns;\r\n    }\r\n\r\n    public set columns(value: int) {\r\n        if (this._columns === value) {\r\n            return;\r\n        }\r\n\r\n        this._columns = value;\r\n        this._rowThenColum = true;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a the number of rows requested.\r\n     * The panel will automatically compute the number of columns based on number of child controls.\r\n     */\r\n    public get rows(): int {\r\n        return this._rows;\r\n    }\r\n\r\n    public set rows(value: int) {\r\n        if (this._rows === value) {\r\n            return;\r\n        }\r\n\r\n        this._rows = value;\r\n        this._rowThenColum = false;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates new VolumeBasedPanel\r\n     * @param name\r\n     */\r\n    public constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        this._cellWidth = 0;\r\n        this._cellHeight = 0;\r\n        let rows = 0;\r\n        let columns = 0;\r\n        let controlCount = 0;\r\n\r\n        const currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (const child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            //   child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            const boundingBox = child.mesh.getHierarchyBoundingVectors();\r\n            const extendSize = TmpVectors.Vector3[0];\r\n            const diff = TmpVectors.Vector3[1];\r\n\r\n            boundingBox.max.subtractToRef(boundingBox.min, diff);\r\n\r\n            diff.scaleInPlace(0.5);\r\n\r\n            Vector3.TransformNormalToRef(diff, currentInverseWorld, extendSize);\r\n\r\n            this._cellWidth = Math.max(this._cellWidth, extendSize.x * 2);\r\n            this._cellHeight = Math.max(this._cellHeight, extendSize.y * 2);\r\n        }\r\n\r\n        this._cellWidth += this.margin * 2;\r\n        this._cellHeight += this.margin * 2;\r\n\r\n        // Arrange\r\n        if (this._rowThenColum) {\r\n            columns = this._columns;\r\n            rows = Math.ceil(controlCount / this._columns);\r\n        } else {\r\n            rows = this._rows;\r\n            columns = Math.ceil(controlCount / this._rows);\r\n        }\r\n\r\n        const startOffsetX = columns * 0.5 * this._cellWidth;\r\n        const startOffsetY = rows * 0.5 * this._cellHeight;\r\n        const nodeGrid = [];\r\n        let cellCounter = 0;\r\n\r\n        if (this._rowThenColum) {\r\n            for (let r = 0; r < rows; r++) {\r\n                for (let c = 0; c < columns; c++) {\r\n                    nodeGrid.push(new Vector3(c * this._cellWidth - startOffsetX + this._cellWidth / 2, r * this._cellHeight - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (let c = 0; c < columns; c++) {\r\n                for (let r = 0; r < rows; r++) {\r\n                    nodeGrid.push(new Vector3(c * this._cellWidth - startOffsetX + this._cellWidth / 2, r * this._cellHeight - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        cellCounter = 0;\r\n        for (const child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            this._mapGridNode(child, nodeGrid[cellCounter]);\r\n\r\n            cellCounter++;\r\n        }\r\n\r\n        this._finalProcessing();\r\n    }\r\n\r\n    /** Child classes must implement this function to provide correct control positioning */\r\n    protected abstract _mapGridNode(control: Control3D, nodePosition: Vector3): void;\r\n\r\n    /** Child classes can implement this function to provide additional processing */\r\n    protected _finalProcessing() {}\r\n}\r\n","import { Tools } from \"core/Misc/tools\";\r\nimport { Matrix, TmpVectors, Vector3 } from \"core/Maths/math.vector\";\r\nimport type { float } from \"core/types\";\r\n\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport type { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\nimport { Axis, Space } from \"core/Maths/math.axis\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a cylinder\r\n */\r\nexport class CylinderPanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the cylinder where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        const mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n        const newPos = this._cylindricalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new Vector3(2 * newPos.x, newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new Vector3(-newPos.x, newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(Axis.Y, Math.PI, Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _cylindricalMapping(source: Vector3) {\r\n        const newPos = new Vector3(0, source.y, this._radius);\r\n\r\n        const yAngle = source.x / this._radius;\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, 0, 0, TmpVectors.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, TmpVectors.Matrix[0]);\r\n    }\r\n}\r\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"fluentVertexShader\";\nconst shader = `precision highp float;attribute vec3 position;attribute vec3 normal;attribute vec2 uv;uniform mat4 world;uniform mat4 viewProjection;varying vec2 vUV;\n#ifdef BORDER\nvarying vec2 scaleInfo;uniform float borderWidth;uniform vec3 scaleFactor;\n#endif\n#ifdef HOVERLIGHT\nvarying vec3 worldPosition;\n#endif\nvoid main(void) {vUV=uv;\n#ifdef BORDER\nvec3 scale=scaleFactor;float minScale=min(min(scale.x,scale.y),scale.z);float maxScale=max(max(scale.x,scale.y),scale.z);float minOverMiddleScale=minScale/(scale.x+scale.y+scale.z-minScale-maxScale);float areaYZ=scale.y*scale.z;float areaXZ=scale.x*scale.z;float areaXY=scale.x*scale.y;float scaledBorderWidth=borderWidth; \nif (abs(normal.x)==1.0) \n{scale.x=scale.y;scale.y=scale.z;if (areaYZ>areaXZ && areaYZ>areaXY)\n{scaledBorderWidth*=minOverMiddleScale;}}\nelse if (abs(normal.y)==1.0) \n{scale.x=scale.z;if (areaXZ>areaXY && areaXZ>areaYZ)\n{scaledBorderWidth*=minOverMiddleScale;}}\nelse \n{if (areaXY>areaYZ && areaXY>areaXZ)\n{scaledBorderWidth*=minOverMiddleScale;}}\nfloat scaleRatio=min(scale.x,scale.y)/max(scale.x,scale.y);if (scale.x>scale.y)\n{scaleInfo.x=1.0-(scaledBorderWidth*scaleRatio);scaleInfo.y=1.0-scaledBorderWidth;}\nelse\n{scaleInfo.x=1.0-scaledBorderWidth;scaleInfo.y=1.0-(scaledBorderWidth*scaleRatio);} \n#endif \nvec4 worldPos=world*vec4(position,1.0);\n#ifdef HOVERLIGHT\nworldPosition=worldPos.xyz;\n#endif\ngl_Position=viewProjection*worldPos;}\n`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const fluentVertexShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"fluentPixelShader\";\nconst shader = `precision highp float;varying vec2 vUV;uniform vec4 albedoColor;\n#ifdef INNERGLOW\nuniform vec4 innerGlowColor;\n#endif\n#ifdef BORDER\nvarying vec2 scaleInfo;uniform float edgeSmoothingValue;uniform float borderMinValue;\n#endif\n#ifdef HOVERLIGHT\nvarying vec3 worldPosition;uniform vec3 hoverPosition;uniform vec4 hoverColor;uniform float hoverRadius;\n#endif\n#ifdef TEXTURE\nuniform sampler2D albedoSampler;uniform mat4 textureMatrix;vec2 finalUV;\n#endif\nvoid main(void) {vec3 albedo=albedoColor.rgb;float alpha=albedoColor.a;\n#ifdef TEXTURE\nfinalUV=vec2(textureMatrix*vec4(vUV,1.0,0.0));albedo=texture2D(albedoSampler,finalUV).rgb;\n#endif\n#ifdef HOVERLIGHT\nfloat pointToHover=(1.0-clamp(length(hoverPosition-worldPosition)/hoverRadius,0.,1.))*hoverColor.a;albedo=clamp(albedo+hoverColor.rgb*pointToHover,0.,1.);\n#else\nfloat pointToHover=1.0;\n#endif\n#ifdef BORDER \nfloat borderPower=10.0;float inverseBorderPower=1.0/borderPower;vec3 borderColor=albedo*borderPower;vec2 distanceToEdge;distanceToEdge.x=abs(vUV.x-0.5)*2.0;distanceToEdge.y=abs(vUV.y-0.5)*2.0;float borderValue=max(smoothstep(scaleInfo.x-edgeSmoothingValue,scaleInfo.x+edgeSmoothingValue,distanceToEdge.x),\nsmoothstep(scaleInfo.y-edgeSmoothingValue,scaleInfo.y+edgeSmoothingValue,distanceToEdge.y));borderColor=borderColor*borderValue*max(borderMinValue*inverseBorderPower,pointToHover); \nalbedo+=borderColor;alpha=max(alpha,borderValue);\n#endif\n#ifdef INNERGLOW\nvec2 uvGlow=(vUV-vec2(0.5,0.5))*(innerGlowColor.a*2.0);uvGlow=uvGlow*uvGlow;uvGlow=uvGlow*uvGlow;albedo+=mix(vec3(0.0,0.0,0.0),innerGlowColor.rgb,uvGlow.x+uvGlow.y); \n#endif\ngl_FragColor=vec4(albedo,alpha);}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const fluentPixelShader = { name, shader };\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { serializeAsColor4, serializeAsVector3, serializeAsTexture, serialize, expandToProperty, serializeAsColor3, SerializationHelper } from \"core/Misc/decorators\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport { Vector3, TmpVectors } from \"core/Maths/math.vector\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\nimport { MaterialHelper } from \"core/Materials/materialHelper\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { Color3, Color4 } from \"core/Maths/math.color\";\r\n\r\nimport \"./shaders/fluent.vertex\";\r\nimport \"./shaders/fluent.fragment\";\r\n\r\n/** @internal */\r\nexport class FluentMaterialDefines extends MaterialDefines {\r\n    public INNERGLOW = false;\r\n    public BORDER = false;\r\n    public HOVERLIGHT = false;\r\n    public TEXTURE = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render controls with fluent design\r\n */\r\nexport class FluentMaterial extends PushMaterial {\r\n    /**\r\n     * Gets or sets inner glow intensity. A value of 0 means no glow (default is 0.5)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public innerGlowColorIntensity = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the inner glow color (white by default)\r\n     */\r\n    @serializeAsColor3()\r\n    public innerGlowColor = new Color3(1.0, 1.0, 1.0);\r\n\r\n    /**\r\n     * Gets or sets the albedo color (Default is Color3(0.3, 0.35, 0.4))\r\n     */\r\n    @serializeAsColor3()\r\n    public albedoColor = new Color3(0.3, 0.35, 0.4);\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if borders must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderBorders = false;\r\n\r\n    /**\r\n     * Gets or sets border width (default is 0.5)\r\n     */\r\n    @serialize()\r\n    public borderWidth = 0.5;\r\n\r\n    /**\r\n     * Gets or sets a value indicating the smoothing value applied to border edges (0.02 by default)\r\n     */\r\n    @serialize()\r\n    public edgeSmoothingValue = 0.02;\r\n\r\n    /**\r\n     * Gets or sets the minimum value that can be applied to border width (default is 0.1)\r\n     */\r\n    @serialize()\r\n    public borderMinValue = 0.1;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if hover light must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderHoverLight = false;\r\n\r\n    /**\r\n     * Gets or sets the radius used to render the hover light (default is 0.01)\r\n     */\r\n    @serialize()\r\n    public hoverRadius = 0.01;\r\n\r\n    /**\r\n     * Gets or sets the color used to render the hover light (default is Color4(0.3, 0.3, 0.3, 1.0))\r\n     */\r\n    @serializeAsColor4()\r\n    public hoverColor = new Color4(0.3, 0.3, 0.3, 1.0);\r\n\r\n    /**\r\n     * Gets or sets the hover light position in world space (default is Vector3.Zero())\r\n     */\r\n    @serializeAsVector3()\r\n    public hoverPosition = Vector3.Zero();\r\n\r\n    @serializeAsTexture(\"albedoTexture\")\r\n    private _albedoTexture: Nullable<BaseTexture>;\r\n\r\n    /** Gets or sets the texture to use for albedo color */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\r\n    public albedoTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Creates a new Fluent material\r\n     * @param name defines the name of the material\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return this.alpha !== 1.0;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new FluentMaterialDefines();\r\n        }\r\n\r\n        const scene = this.getScene();\r\n        const defines = <FluentMaterialDefines>subMesh.materialDefines;\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (defines._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (defines._areTexturesDirty) {\r\n            defines.INNERGLOW = this.innerGlowColorIntensity > 0;\r\n            defines.BORDER = this.renderBorders;\r\n            defines.HOVERLIGHT = this.renderHoverLight;\r\n\r\n            if (this._albedoTexture) {\r\n                if (!this._albedoTexture.isReadyOrNotBlocking()) {\r\n                    return false;\r\n                } else {\r\n                    defines.TEXTURE = true;\r\n                }\r\n            } else {\r\n                defines.TEXTURE = false;\r\n            }\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n            attribs.push(VertexBuffer.NormalKind);\r\n            attribs.push(VertexBuffer.UVKind);\r\n\r\n            const shaderName = \"fluent\";\r\n\r\n            const uniforms = [\r\n                \"world\",\r\n                \"viewProjection\",\r\n                \"innerGlowColor\",\r\n                \"albedoColor\",\r\n                \"borderWidth\",\r\n                \"edgeSmoothingValue\",\r\n                \"scaleFactor\",\r\n                \"borderMinValue\",\r\n                \"hoverColor\",\r\n                \"hoverPosition\",\r\n                \"hoverRadius\",\r\n                \"textureMatrix\",\r\n            ];\r\n\r\n            const samplers = [\"albedoSampler\"];\r\n            const uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4,\r\n            });\r\n\r\n            const join = defines.toString();\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: null,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: { maxSimultaneousLights: 4 },\r\n                    },\r\n                    engine\r\n                ),\r\n                defines,\r\n                this._materialContext\r\n            );\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const scene = this.getScene();\r\n\r\n        const defines = <FluentMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            this._activeEffect.setColor4(\"albedoColor\", this.albedoColor, this.alpha);\r\n\r\n            if (defines.INNERGLOW) {\r\n                this._activeEffect.setColor4(\"innerGlowColor\", this.innerGlowColor, this.innerGlowColorIntensity);\r\n            }\r\n\r\n            if (defines.BORDER) {\r\n                this._activeEffect.setFloat(\"borderWidth\", this.borderWidth);\r\n                this._activeEffect.setFloat(\"edgeSmoothingValue\", this.edgeSmoothingValue);\r\n                this._activeEffect.setFloat(\"borderMinValue\", this.borderMinValue);\r\n\r\n                mesh.getBoundingInfo().boundingBox.extendSize.multiplyToRef(mesh.scaling, TmpVectors.Vector3[0]);\r\n                this._activeEffect.setVector3(\"scaleFactor\", TmpVectors.Vector3[0]);\r\n            }\r\n\r\n            if (defines.HOVERLIGHT) {\r\n                this._activeEffect.setDirectColor4(\"hoverColor\", this.hoverColor);\r\n                this._activeEffect.setFloat(\"hoverRadius\", this.hoverRadius);\r\n                this._activeEffect.setVector3(\"hoverPosition\", this.hoverPosition);\r\n            }\r\n\r\n            if (defines.TEXTURE && this._albedoTexture) {\r\n                this._activeEffect.setTexture(\"albedoSampler\", this._albedoTexture);\r\n                const matrix = this._albedoTexture.getTextureMatrix();\r\n                this._activeEffect.setMatrix(\"textureMatrix\", matrix);\r\n            }\r\n        }\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        const activeTextures = super.getActiveTextures();\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): FluentMaterial {\r\n        return SerializationHelper.Clone(() => new FluentMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n        serializationObject.customType = \"BABYLON.GUI.FluentMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FluentMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): FluentMaterial {\r\n        return SerializationHelper.Parse(() => new FluentMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.FluentMaterial\", FluentMaterial);\r\n","import type { Scene } from \"core/scene\";\r\nimport type { Vector3 } from \"core/Maths/math.vector\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Control3D } from \"./control3D\";\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { Mesh } from \"core/Meshes/mesh\";\r\nimport { CreateBox } from \"core/Meshes/Builders/boxBuilder\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { FluentMaterial } from \"../materials/fluent/fluentMaterial\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Logger } from \"core/Misc/logger\";\r\nimport type { Container3D } from \"./container3D\";\r\nimport type { TouchHolographicButton } from \"./touchHolographicButton\";\r\n\r\n/**\r\n * Simple menu that can contain holographic buttons\r\n */\r\nexport class TouchHolographicMenu extends VolumeBasedPanel {\r\n    protected _backPlate: Mesh;\r\n    private _backPlateMaterial: FluentMaterial;\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<Vector3>>>;\r\n\r\n    private _currentMin: Nullable<Vector3>;\r\n    private _currentMax: Nullable<Vector3>;\r\n\r\n    private _backPlateMargin = 1.25;\r\n\r\n    /**\r\n     * Scale for the buttons added to the menu\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    protected static MENU_BUTTON_SCALE: number = 1;\r\n\r\n    /**\r\n     * Gets or sets the margin size of the backplate in button size units.\r\n     * Setting this to 1, will make the backPlate margin the size of 1 button\r\n     */\r\n    public get backPlateMargin(): number {\r\n        return this._backPlateMargin;\r\n    }\r\n\r\n    public set backPlateMargin(value: number) {\r\n        this._backPlateMargin = value;\r\n\r\n        if (this._children.length >= 1) {\r\n            this.children.forEach((control) => {\r\n                this._updateCurrentMinMax(control.position);\r\n            });\r\n\r\n            this._updateMargins();\r\n        }\r\n    }\r\n\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        const node = new Mesh(`menu_${this.name}`, scene);\r\n\r\n        this._backPlate = CreateBox(\"backPlate\" + this.name, { size: 1 }, scene);\r\n        this._backPlate.parent = node;\r\n\r\n        return node;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        this._backPlateMaterial = new FluentMaterial(this.name + \"backPlateMaterial\", mesh.getScene());\r\n        this._backPlateMaterial.albedoColor = new Color3(0.08, 0.15, 0.55);\r\n        this._backPlateMaterial.renderBorders = true;\r\n        this._backPlateMaterial.renderHoverLight = true;\r\n\r\n        this._pickedPointObserver = this._host.onPickedPointChangedObservable.add((pickedPoint) => {\r\n            if (pickedPoint) {\r\n                this._backPlateMaterial.hoverPosition = pickedPoint;\r\n                this._backPlateMaterial.hoverColor.a = 1.0;\r\n            } else {\r\n                this._backPlateMaterial.hoverColor.a = 0;\r\n            }\r\n        });\r\n\r\n        this._backPlate.material = this._backPlateMaterial;\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        // Simple plane mapping for the menu\r\n        const mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        control.position = nodePosition.clone();\r\n\r\n        this._updateCurrentMinMax(nodePosition);\r\n    }\r\n\r\n    protected _finalProcessing() {\r\n        this._updateMargins();\r\n    }\r\n\r\n    private _updateCurrentMinMax(nodePosition: Vector3) {\r\n        if (!this._currentMin) {\r\n            this._currentMin = nodePosition.clone();\r\n            this._currentMax = nodePosition.clone();\r\n        }\r\n\r\n        this._currentMin.minimizeInPlace(nodePosition);\r\n        this._currentMax!.maximizeInPlace(nodePosition);\r\n    }\r\n\r\n    private _updateMargins() {\r\n        if (this._children.length > 0) {\r\n            this._currentMin!.addInPlaceFromFloats(-this._cellWidth / 2, -this._cellHeight / 2, 0);\r\n            this._currentMax!.addInPlaceFromFloats(this._cellWidth / 2, this._cellHeight / 2, 0);\r\n            const extendSize = this._currentMax!.subtract(this._currentMin!);\r\n\r\n            // Also add a % margin\r\n            this._backPlate.scaling.x = extendSize.x + this._cellWidth * this.backPlateMargin;\r\n            this._backPlate.scaling.y = extendSize.y + this._cellHeight * this.backPlateMargin;\r\n            this._backPlate.scaling.z = 0.001;\r\n\r\n            for (let i = 0; i < this._children.length; i++) {\r\n                this._children[i].position.subtractInPlace(this._currentMin!).subtractInPlace(extendSize.scale(0.5));\r\n                this._children[i].position.z -= 0.01;\r\n            }\r\n        }\r\n\r\n        this._currentMin = null;\r\n        this._currentMax = null;\r\n    }\r\n\r\n    /**\r\n     * Creates a holographic menu GUI 3D control\r\n     * @param name name of the menu\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    /**\r\n     * Adds a button to the menu.\r\n     * Please note that the back material of the button will be set to transparent as it is attached to the menu.\r\n     *\r\n     * @param button Button to add\r\n     * @returns This menu\r\n     */\r\n    public addButton(button: TouchHolographicButton): TouchHolographicMenu {\r\n        // Block updating the layout until the button is resized (which has to happen after node creation)\r\n        const wasLayoutBlocked = this.blockLayout;\r\n        if (!wasLayoutBlocked) {\r\n            this.blockLayout = true;\r\n        }\r\n\r\n        super.addControl(button);\r\n\r\n        button.isBackplateVisible = false;\r\n        button.scaling.scaleInPlace(TouchHolographicMenu.MENU_BUTTON_SCALE);\r\n\r\n        // Unblocking the layout triggers the pending layout update that uses the size of the buttons to determine the size of the backing mesh\r\n        if (!wasLayoutBlocked) {\r\n            this.blockLayout = false;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * This method should not be used directly. It is inherited from `Container3D`.\r\n     * Please use `addButton` instead.\r\n     * @param _control\r\n     * @returns\r\n     */\r\n    public addControl(_control: Control3D): Container3D {\r\n        Logger.Warn(\"TouchHolographicMenu can only contain buttons. Please use the method `addButton` instead.\");\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Disposes the menu\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n    }\r\n}\r\n","import type { Scene } from \"core/scene\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport { TouchHolographicMenu } from \"./touchHolographicMenu\";\r\nimport { HandConstraintBehavior } from \"core/Behaviors/Meshes/handConstraintBehavior\";\r\nimport type { WebXRExperienceHelper } from \"core/XR/webXRExperienceHelper\";\r\n\r\n/**\r\n * Hand menu that displays buttons and floats around the hand.\r\n * @since 5.0.0\r\n */\r\nexport class HandMenu extends TouchHolographicMenu {\r\n    private _handConstraintBehavior: HandConstraintBehavior;\r\n\r\n    /**\r\n     * The hand constraint behavior setting the transformation of this node\r\n     */\r\n    public get handConstraintBehavior() {\r\n        return this._handConstraintBehavior;\r\n    }\r\n\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        const node = super._createNode(scene)! as Mesh;\r\n\r\n        this._handConstraintBehavior.attach(node);\r\n\r\n        return node;\r\n    }\r\n\r\n    /**\r\n     * Creates a hand menu GUI 3D control\r\n     * @param xr the WebXRExperienceHelper used to link this control to the enabled WebXRHandTracking feature\r\n     * @param name name of the hand menu\r\n     */\r\n    constructor(xr: WebXRExperienceHelper, name?: string) {\r\n        super(name);\r\n\r\n        this._handConstraintBehavior = new HandConstraintBehavior();\r\n        this._handConstraintBehavior.linkToXRExperience(xr);\r\n        this.backPlateMargin = 0.15;\r\n        this.rows = 3;\r\n    }\r\n\r\n    /**\r\n     * Disposes the hand menu\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this._handConstraintBehavior.detach();\r\n    }\r\n}\r\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"fluentBackplatePixelShader\";\nconst shader = `uniform vec3 cameraPosition;varying vec3 vPosition;varying vec3 vNormal;varying vec2 vUV;varying vec3 vTangent;varying vec3 vBinormal;varying vec4 vColor;varying vec4 vExtra1;varying vec4 vExtra2;varying vec4 vExtra3;uniform float _Radius_;uniform float _Line_Width_;uniform bool _Absolute_Sizes_;uniform float _Filter_Width_;uniform vec4 _Base_Color_;uniform vec4 _Line_Color_;uniform float _Radius_Top_Left_;uniform float _Radius_Top_Right_;uniform float _Radius_Bottom_Left_;uniform float _Radius_Bottom_Right_;uniform vec3 _Blob_Position_;uniform float _Blob_Intensity_;uniform float _Blob_Near_Size_;uniform float _Blob_Far_Size_;uniform float _Blob_Near_Distance_;uniform float _Blob_Far_Distance_;uniform float _Blob_Fade_Length_;uniform float _Blob_Pulse_;uniform float _Blob_Fade_;uniform sampler2D _Blob_Texture_;uniform vec3 _Blob_Position_2_;uniform float _Blob_Near_Size_2_;uniform float _Blob_Pulse_2_;uniform float _Blob_Fade_2_;uniform float _Rate_;uniform vec4 _Highlight_Color_;uniform float _Highlight_Width_;uniform vec4 _Highlight_Transform_;uniform float _Highlight_;uniform float _Iridescence_Intensity_;uniform float _Iridescence_Edge_Intensity_;uniform float _Angle_;uniform float _Fade_Out_;uniform bool _Reflected_;uniform float _Frequency_;uniform float _Vertical_Offset_;uniform sampler2D _Iridescent_Map_;uniform bool _Use_Global_Left_Index_;uniform bool _Use_Global_Right_Index_;uniform vec4 Global_Left_Index_Tip_Position;uniform vec4 Global_Right_Index_Tip_Position;void Round_Rect_Fragment_B31(\nfloat Radius,\nfloat Line_Width,\nvec4 Line_Color,\nfloat Filter_Width,\nvec2 UV,\nfloat Line_Visibility,\nvec4 Rect_Parms,\nvec4 Fill_Color,\nout vec4 Color)\n{float d=length(max(abs(UV)-Rect_Parms.xy,0.0));float dx=max(fwidth(d)*Filter_Width,0.00001);float g=min(Rect_Parms.z,Rect_Parms.w);float dgrad=max(fwidth(g)*Filter_Width,0.00001);float Inside_Rect=clamp(g/dgrad,0.0,1.0);float inner=clamp((d+dx*0.5-max(Radius-Line_Width,d-dx*0.5))/dx,0.0,1.0);Color=clamp(mix(Fill_Color,Line_Color,inner),0.0,1.0)*Inside_Rect;}\nvoid Blob_Fragment_B71(\nsampler2D Blob_Texture,\nvec4 Blob_Info1,\nvec4 Blob_Info2,\nout vec4 Blob_Color)\n{float k1=dot(Blob_Info1.xy,Blob_Info1.xy);float k2=dot(Blob_Info2.xy,Blob_Info2.xy);vec3 closer=k1<k2 ? vec3(k1,Blob_Info1.z,Blob_Info1.w) : vec3(k2,Blob_Info2.z,Blob_Info2.w);Blob_Color=closer.z*texture(Blob_Texture,vec2(vec2(sqrt(closer.x),closer.y).x,1.0-vec2(sqrt(closer.x),closer.y).y))*clamp(1.0-closer.x,0.0,1.0);}\nvoid Line_Fragment_B48(\nvec4 Base_Color,\nvec4 Highlight_Color,\nfloat Highlight_Width,\nvec3 Line_Vertex,\nfloat Highlight,\nout vec4 Line_Color)\n{float k2=1.0-clamp(abs(Line_Vertex.y/Highlight_Width),0.0,1.0);Line_Color=mix(Base_Color,Highlight_Color,Highlight*k2);}\nvoid Scale_RGB_B54(\nvec4 Color,\nfloat Scalar,\nout vec4 Result)\n{Result=vec4(Scalar,Scalar,Scalar,1)*Color;}\nvoid Conditional_Float_B38(\nbool Which,\nfloat If_True,\nfloat If_False,\nout float Result)\n{Result=Which ? If_True : If_False;}\nvoid main()\n{float R_Q72;float G_Q72;float B_Q72;float A_Q72;R_Q72=vColor.r; G_Q72=vColor.g; B_Q72=vColor.b; A_Q72=vColor.a;vec4 Blob_Color_Q71;\n#if BLOB_ENABLE\nfloat k1=dot(vExtra2.xy,vExtra2.xy);float k2=dot(vExtra3.xy,vExtra3.xy);vec3 closer=k1<k2 ? vec3(k1,vExtra2.z,vExtra2.w) : vec3(k2,vExtra3.z,vExtra3.w);Blob_Color_Q71=closer.z*texture(_Blob_Texture_,vec2(vec2(sqrt(closer.x),closer.y).x,1.0-vec2(sqrt(closer.x),closer.y).y))*clamp(1.0-closer.x,0.0,1.0);\n#else\nBlob_Color_Q71=vec4(0,0,0,0);\n#endif\nvec4 Line_Color_Q48;Line_Fragment_B48(_Line_Color_,_Highlight_Color_,_Highlight_Width_,vTangent,_Highlight_,Line_Color_Q48);float X_Q67;float Y_Q67;X_Q67=vUV.x;Y_Q67=vUV.y;vec3 Incident_Q66=normalize(vPosition-cameraPosition);vec3 Reflected_Q60=reflect(Incident_Q66,vBinormal);float Product_Q63=Y_Q67*_Vertical_Offset_;float Dot_Q68=dot(Incident_Q66, Reflected_Q60);float Dot_Q57=dot(vNormal, Incident_Q66);float Result_Q38;Conditional_Float_B38(_Reflected_,Dot_Q68,Dot_Q57,Result_Q38);float Product_Q64=Result_Q38*_Frequency_;float Sum_Q69=Product_Q64+1.0;float Product_Q70=Sum_Q69*0.5;float Sum_Q62=Product_Q63+Product_Q70;float FractF_Q59=fract(Sum_Q62);vec2 Vec2_Q65=vec2(FractF_Q59,0.5);vec4 Color_Q58;\n#if IRIDESCENT_MAP_ENABLE\nColor_Q58=texture(_Iridescent_Map_,Vec2_Q65);\n#else\nColor_Q58=vec4(0,0,0,0);\n#endif\nvec4 Result_Q54;Scale_RGB_B54(Color_Q58,_Iridescence_Edge_Intensity_,Result_Q54);vec4 Result_Q55;Scale_RGB_B54(Color_Q58,_Iridescence_Intensity_,Result_Q55);vec4 Base_And_Iridescent_Q53;Base_And_Iridescent_Q53=Line_Color_Q48+vec4(Result_Q54.rgb,0.0);vec4 Base_And_Iridescent_Q56;Base_And_Iridescent_Q56=_Base_Color_+vec4(Result_Q55.rgb,0.0);vec4 Result_Q52=Base_And_Iridescent_Q53; Result_Q52.a=1.0;vec4 Result_Q35=Blob_Color_Q71+(1.0-Blob_Color_Q71.a)*Base_And_Iridescent_Q56;vec4 Color_Q31;Round_Rect_Fragment_B31(R_Q72,G_Q72,Result_Q52,_Filter_Width_,vUV,1.0,vExtra1,Result_Q35,Color_Q31);vec4 Result_Q47=_Fade_Out_*Color_Q31;vec4 Out_Color=Result_Q47;float Clip_Threshold=0.001;bool To_sRGB=false;gl_FragColor=Out_Color;}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const fluentBackplatePixelShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"fluentBackplateVertexShader\";\nconst shader = `uniform mat4 world;uniform mat4 viewProjection;uniform vec3 cameraPosition;attribute vec3 position;attribute vec3 normal;\n#ifdef TANGENT\nattribute vec3 tangent;\n#else\nconst vec3 tangent=vec3(0.);\n#endif\nuniform float _Radius_;uniform float _Line_Width_;uniform bool _Absolute_Sizes_;uniform float _Filter_Width_;uniform vec4 _Base_Color_;uniform vec4 _Line_Color_;uniform float _Radius_Top_Left_;uniform float _Radius_Top_Right_;uniform float _Radius_Bottom_Left_;uniform float _Radius_Bottom_Right_;uniform vec3 _Blob_Position_;uniform float _Blob_Intensity_;uniform float _Blob_Near_Size_;uniform float _Blob_Far_Size_;uniform float _Blob_Near_Distance_;uniform float _Blob_Far_Distance_;uniform float _Blob_Fade_Length_;uniform float _Blob_Pulse_;uniform float _Blob_Fade_;uniform sampler2D _Blob_Texture_;uniform vec3 _Blob_Position_2_;uniform float _Blob_Near_Size_2_;uniform float _Blob_Pulse_2_;uniform float _Blob_Fade_2_;uniform float _Rate_;uniform vec4 _Highlight_Color_;uniform float _Highlight_Width_;uniform vec4 _Highlight_Transform_;uniform float _Highlight_;uniform float _Iridescence_Intensity_;uniform float _Iridescence_Edge_Intensity_;uniform float _Angle_;uniform float _Fade_Out_;uniform bool _Reflected_;uniform float _Frequency_;uniform float _Vertical_Offset_;uniform sampler2D _Iridescent_Map_;uniform bool _Use_Global_Left_Index_;uniform bool _Use_Global_Right_Index_;uniform vec4 Global_Left_Index_Tip_Position;uniform vec4 Global_Right_Index_Tip_Position;varying vec3 vPosition;varying vec3 vNormal;varying vec2 vUV;varying vec3 vTangent;varying vec3 vBinormal;varying vec4 vColor;varying vec4 vExtra1;varying vec4 vExtra2;varying vec4 vExtra3;void Object_To_World_Pos_B115(\nvec3 Pos_Object,\nout vec3 Pos_World)\n{Pos_World=(world*vec4(Pos_Object,1.0)).xyz;}\nvoid PickDir_B140(\nfloat Degrees,\nvec3 DirX,\nvec3 DirY,\nout vec3 Dir)\n{float a=Degrees*3.14159/180.0;Dir=cos(a)*DirX+sin(a)*DirY;}\nvoid Round_Rect_Vertex_B139(\nvec2 UV,\nfloat Radius,\nfloat Margin,\nfloat Anisotropy,\nfloat Gradient1,\nfloat Gradient2,\nout vec2 Rect_UV,\nout vec4 Rect_Parms,\nout vec2 Scale_XY,\nout vec2 Line_UV)\n{Scale_XY=vec2(Anisotropy,1.0);Line_UV=(UV-vec2(0.5,0.5));Rect_UV=Line_UV*Scale_XY;Rect_Parms.xy=Scale_XY*0.5-vec2(Radius,Radius)-vec2(Margin,Margin);Rect_Parms.z=Gradient1; \nRect_Parms.w=Gradient2;}\nvoid Line_Vertex_B135(\nvec2 Scale_XY,\nvec2 UV,\nfloat Time,\nfloat Rate,\nvec4 Highlight_Transform,\nout vec3 Line_Vertex)\n{float angle2=(Rate*Time)*2.0*3.1416;float sinAngle2=sin(angle2);float cosAngle2=cos(angle2);vec2 xformUV=UV*Highlight_Transform.xy+Highlight_Transform.zw;Line_Vertex.x=0.0;Line_Vertex.y=cosAngle2*xformUV.x-sinAngle2*xformUV.y;Line_Vertex.z=0.0; }\nvoid Blob_Vertex_B180(\nvec3 Position,\nvec3 Normal,\nvec3 Tangent,\nvec3 Bitangent,\nvec3 Blob_Position,\nfloat Intensity,\nfloat Blob_Near_Size,\nfloat Blob_Far_Size,\nfloat Blob_Near_Distance,\nfloat Blob_Far_Distance,\nfloat Blob_Fade_Length,\nfloat Blob_Pulse,\nfloat Blob_Fade,\nout vec4 Blob_Info)\n{vec3 blob=Blob_Position;vec3 delta=blob-Position;float dist=dot(Normal,delta);float lerpValue=clamp((abs(dist)-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance),0.0,1.0);float fadeValue=1.0-clamp((abs(dist)-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);float size=Blob_Near_Size+(Blob_Far_Size-Blob_Near_Size)*lerpValue;vec2 blobXY=vec2(dot(delta,Tangent),dot(delta,Bitangent))/(0.0001+size);float Fade=fadeValue*Intensity*Blob_Fade;float Distance=(lerpValue*0.5+0.5)*(1.0-Blob_Pulse);Blob_Info=vec4(blobXY.x,blobXY.y,Distance,Fade);}\nvoid Move_Verts_B129(\nfloat Anisotropy,\nvec3 P,\nfloat Radius,\nout vec3 New_P,\nout vec2 New_UV,\nout float Radial_Gradient,\nout vec3 Radial_Dir)\n{vec2 UV=P.xy*2.0+0.5;vec2 center=clamp(UV,0.0,1.0);vec2 delta=UV-center;vec2 r2=2.0*vec2(Radius/Anisotropy,Radius);New_UV=center+r2*(UV-2.0*center+0.5);New_P=vec3(New_UV-0.5,P.z);Radial_Gradient=1.0-length(delta)*2.0;Radial_Dir=vec3(delta*r2,0.0);}\nvoid Object_To_World_Dir_B132(\nvec3 Dir_Object,\nout vec3 Binormal_World,\nout vec3 Binormal_World_N,\nout float Binormal_Length)\n{Binormal_World=(world*vec4(Dir_Object,0.0)).xyz;Binormal_Length=length(Binormal_World);Binormal_World_N=Binormal_World/Binormal_Length;}\nvoid RelativeOrAbsoluteDetail_B147(\nfloat Nominal_Radius,\nfloat Nominal_LineWidth,\nbool Absolute_Measurements,\nfloat Height,\nout float Radius,\nout float Line_Width)\n{float scale=Absolute_Measurements ? 1.0/Height : 1.0;Radius=Nominal_Radius*scale;Line_Width=Nominal_LineWidth*scale;}\nvoid Edge_AA_Vertex_B130(\nvec3 Position_World,\nvec3 Position_Object,\nvec3 Normal_Object,\nvec3 Eye,\nfloat Radial_Gradient,\nvec3 Radial_Dir,\nvec3 Tangent,\nout float Gradient1,\nout float Gradient2)\n{vec3 I=(Eye-Position_World);vec3 T=(world* vec4(Tangent,0.0)).xyz;float g=(dot(T,I)<0.0) ? 0.0 : 1.0;if (Normal_Object.z==0.0) { \nGradient1=Position_Object.z>0.0 ? g : 1.0;Gradient2=Position_Object.z>0.0 ? 1.0 : g;} else {Gradient1=g+(1.0-g)*(Radial_Gradient);Gradient2=1.0;}}\nvoid Pick_Radius_B144(\nfloat Radius,\nfloat Radius_Top_Left,\nfloat Radius_Top_Right,\nfloat Radius_Bottom_Left,\nfloat Radius_Bottom_Right,\nvec3 Position,\nout float Result)\n{bool whichY=Position.y>0.0;Result=Position.x<0.0 ? (whichY ? Radius_Top_Left : Radius_Bottom_Left) : (whichY ? Radius_Top_Right : Radius_Bottom_Right);Result*=Radius;}\nvoid main()\n{vec3 Nrm_World_Q128;Nrm_World_Q128=normalize((world*vec4(normal,0.0)).xyz);vec3 Tangent_World_Q131;vec3 Tangent_World_N_Q131;float Tangent_Length_Q131;Tangent_World_Q131=(world*vec4(vec3(1,0,0),0.0)).xyz;Tangent_Length_Q131=length(Tangent_World_Q131);Tangent_World_N_Q131=Tangent_World_Q131/Tangent_Length_Q131;vec3 Binormal_World_Q132;vec3 Binormal_World_N_Q132;float Binormal_Length_Q132;Object_To_World_Dir_B132(vec3(0,1,0),Binormal_World_Q132,Binormal_World_N_Q132,Binormal_Length_Q132);float Anisotropy_Q133=Tangent_Length_Q131/Binormal_Length_Q132;vec3 Result_Q177;Result_Q177=mix(_Blob_Position_,Global_Left_Index_Tip_Position.xyz,float(_Use_Global_Left_Index_));vec3 Result_Q178;Result_Q178=mix(_Blob_Position_2_,Global_Right_Index_Tip_Position.xyz,float(_Use_Global_Right_Index_));float Result_Q144;Pick_Radius_B144(_Radius_,_Radius_Top_Left_,_Radius_Top_Right_,_Radius_Bottom_Left_,_Radius_Bottom_Right_,position,Result_Q144);vec3 Dir_Q140;PickDir_B140(_Angle_,Tangent_World_N_Q131,Binormal_World_N_Q132,Dir_Q140);float Radius_Q147;float Line_Width_Q147;RelativeOrAbsoluteDetail_B147(Result_Q144,_Line_Width_,_Absolute_Sizes_,Binormal_Length_Q132,Radius_Q147,Line_Width_Q147);vec4 Out_Color_Q145=vec4(Radius_Q147,Line_Width_Q147,0,1);vec3 New_P_Q129;vec2 New_UV_Q129;float Radial_Gradient_Q129;vec3 Radial_Dir_Q129;Move_Verts_B129(Anisotropy_Q133,position,Radius_Q147,New_P_Q129,New_UV_Q129,Radial_Gradient_Q129,Radial_Dir_Q129);vec3 Pos_World_Q115;Object_To_World_Pos_B115(New_P_Q129,Pos_World_Q115);vec4 Blob_Info_Q180;\n#if BLOB_ENABLE\nBlob_Vertex_B180(Pos_World_Q115,Nrm_World_Q128,Tangent_World_N_Q131,Binormal_World_N_Q132,Result_Q177,_Blob_Intensity_,_Blob_Near_Size_,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,_Blob_Fade_Length_,_Blob_Pulse_,_Blob_Fade_,Blob_Info_Q180);\n#else\nBlob_Info_Q180=vec4(0,0,0,0);\n#endif\nvec4 Blob_Info_Q181;\n#if BLOB_ENABLE_2\nBlob_Vertex_B180(Pos_World_Q115,Nrm_World_Q128,Tangent_World_N_Q131,Binormal_World_N_Q132,Result_Q178,_Blob_Intensity_,_Blob_Near_Size_2_,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,_Blob_Fade_Length_,_Blob_Pulse_2_,_Blob_Fade_2_,Blob_Info_Q181);\n#else\nBlob_Info_Q181=vec4(0,0,0,0);\n#endif\nfloat Gradient1_Q130;float Gradient2_Q130;\n#if SMOOTH_EDGES\nEdge_AA_Vertex_B130(Pos_World_Q115,position,normal,cameraPosition,Radial_Gradient_Q129,Radial_Dir_Q129,tangent,Gradient1_Q130,Gradient2_Q130);\n#else\nGradient1_Q130=1.0;Gradient2_Q130=1.0;\n#endif\nvec2 Rect_UV_Q139;vec4 Rect_Parms_Q139;vec2 Scale_XY_Q139;vec2 Line_UV_Q139;Round_Rect_Vertex_B139(New_UV_Q129,Radius_Q147,0.0,Anisotropy_Q133,Gradient1_Q130,Gradient2_Q130,Rect_UV_Q139,Rect_Parms_Q139,Scale_XY_Q139,Line_UV_Q139);vec3 Line_Vertex_Q135;Line_Vertex_B135(Scale_XY_Q139,Line_UV_Q139,0.0,_Rate_,_Highlight_Transform_,Line_Vertex_Q135);vec3 Position=Pos_World_Q115;vec3 Normal=Dir_Q140;vec2 UV=Rect_UV_Q139;vec3 Tangent=Line_Vertex_Q135;vec3 Binormal=Nrm_World_Q128;vec4 Color=Out_Color_Q145;vec4 Extra1=Rect_Parms_Q139;vec4 Extra2=Blob_Info_Q180;vec4 Extra3=Blob_Info_Q181;gl_Position=viewProjection*vec4(Position,1);vPosition=Position;vNormal=Normal;vUV=UV;vTangent=Tangent;vBinormal=Binormal;vColor=Color;vExtra1=Extra1;vExtra2=Extra2;vExtra3=Extra3;}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const fluentBackplateVertexShader = { name, shader };\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { SerializationHelper, serialize, serializeAsVector3 } from \"core/Misc/decorators\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport { Vector3, Vector4 } from \"core/Maths/math.vector\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"core/Materials/materialHelper\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { Color4 } from \"core/Maths/math.color\";\r\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\r\nimport { Constants } from \"core/Engines/constants\";\r\n\r\nimport \"./shaders/fluentBackplate.fragment\";\r\nimport \"./shaders/fluentBackplate.vertex\";\r\n\r\n/** @internal */\r\nclass FluentBackplateMaterialDefines extends MaterialDefines {\r\n    public BLOB_ENABLE = true;\r\n    public BLOB_ENABLE_2 = true;\r\n    public SMOOTH_EDGES = true;\r\n    public IRIDESCENT_MAP_ENABLE = true;\r\n\r\n    constructor() {\r\n        super();\r\n        this._needNormals = true;\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render square buttons with fluent design\r\n */\r\nexport class FluentBackplateMaterial extends PushMaterial {\r\n    /**\r\n     * URL pointing to the texture used to define the coloring for the fluent blob effect.\r\n     */\r\n    public static BLOB_TEXTURE_URL = \"https://assets.babylonjs.com/meshes/MRTK/mrtk-fluent-backplate-blob.png\";\r\n\r\n    /**\r\n     * URL pointing to the texture used to define iridescent map.\r\n     */\r\n    public static IM_TEXTURE_URL = \"https://assets.babylonjs.com/meshes/MRTK/mrtk-fluent-backplate-iridescence.png\";\r\n\r\n    private _blobTexture: Texture;\r\n    private _iridescentMap: Texture;\r\n\r\n    /**\r\n     * Gets or sets the corner radius on the backplate. Best to keep this value between 0.01 and 0.5. Default is 0.03.\r\n     */\r\n    @serialize()\r\n    public radius = 0.03;\r\n\r\n    /**\r\n     * Gets or sets the line width of the backplate.\r\n     */\r\n    @serialize()\r\n    public lineWidth = 0.01;\r\n\r\n    /**\r\n     * Gets or sets whether to use absolute sizes when calculating effects on the backplate.\r\n     * Since desktop and VR/AR have different relative sizes, it's usually best to keep this false.\r\n     */\r\n    @serialize()\r\n    public absoluteSizes = false;\r\n\r\n    /** @internal */\r\n    public _filterWidth = 1;\r\n\r\n    /**\r\n     * Gets or sets the base color of the backplate.\r\n     */\r\n    @serialize()\r\n    public baseColor = new Color4(0.0392157, 0.0666667, 0.207843, 1);\r\n\r\n    /**\r\n     * Gets or sets the line color of the backplate.\r\n     */\r\n    @serialize()\r\n    public lineColor = new Color4(0.14902, 0.133333, 0.384314, 1);\r\n\r\n    /**\r\n     * Gets or sets the intensity of the fluent hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobIntensity = 0.98;\r\n\r\n    /**\r\n     * Gets or sets the far size of the fluent hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobFarSize = 0.04;\r\n\r\n    /**\r\n     * Gets or sets the distance considered \"near\" to the backplate, which controls the size of the fluent hover glow effect (see blobNearSize).\r\n     */\r\n    @serialize()\r\n    public blobNearDistance = 0;\r\n\r\n    /**\r\n     * Gets or sets the distance considered \"far\" from the backplate, which controls the size of the fluent hover glow effect (see blobFarSize).\r\n     */\r\n    @serialize()\r\n    public blobFarDistance = 0.08;\r\n\r\n    /**\r\n     * Gets or sets the length of the fluent hover glow effect fade.\r\n     */\r\n    @serialize()\r\n    public blobFadeLength = 0.08;\r\n\r\n    /**\r\n     * Gets or sets the size of the fluent hover glow effect when the left pointer is considered \"near\" to the backplate (see blobNearDistance).\r\n     */\r\n    @serialize()\r\n    public blobNearSize = 0.22;\r\n\r\n    /**\r\n     * Gets or sets the progress of the fluent hover glow effect selection animation corresponding to the left pointer (0.0 - 1.0).\r\n     */\r\n    @serialize()\r\n    public blobPulse = 0;\r\n\r\n    /**\r\n     * Gets or sets the opacity of the fluent hover glow effect corresponding to the left pointer (0.0 - 1.0). Default is 0.\r\n     */\r\n    @serialize()\r\n    public blobFade = 0;\r\n\r\n    /**\r\n     * Gets or sets the size of the fluent hover glow effect when the right pointer is considered \"near\" to the backplate (see blobNearDistance).\r\n     */\r\n    @serialize()\r\n    public blobNearSize2 = 0.22;\r\n\r\n    /**\r\n     * Gets or sets the progress of the fluent hover glow effect selection animation corresponding to the right pointer (0.0 - 1.0).\r\n     */\r\n    @serialize()\r\n    public blobPulse2 = 0;\r\n\r\n    /**\r\n     * Gets or sets the opacity of the fluent hover glow effect corresponding to the right pointer (0.0 - 1.0). Default is 0.\r\n     */\r\n    @serialize()\r\n    public blobFade2 = 0;\r\n\r\n    /** @internal */\r\n    public _rate = 0.135;\r\n\r\n    /**\r\n     * Gets or sets the color of the highlights on the backplate line.\r\n     */\r\n    @serialize()\r\n    public highlightColor = new Color4(0.98, 0.98, 0.98, 1);\r\n\r\n    /**\r\n     * Gets or sets the width of the highlights on the backplate line.\r\n     */\r\n    @serialize()\r\n    public highlightWidth = 0.25;\r\n\r\n    /** @internal */\r\n    public _highlightTransform = new Vector4(1, 1, 0, 0);\r\n\r\n    /** @internal */\r\n    public _highlight = 1;\r\n\r\n    /**\r\n     * Gets or sets the intensity of the iridescence effect.\r\n     */\r\n    @serialize()\r\n    public iridescenceIntensity = 0;\r\n\r\n    /**\r\n     * Gets or sets the intensity of the iridescence effect on the backplate edges.\r\n     */\r\n    @serialize()\r\n    public iridescenceEdgeIntensity = 1;\r\n\r\n    /** @internal */\r\n    public _angle = -45;\r\n\r\n    /**\r\n     * Gets or sets the opacity of the backplate (0.0 - 1.0).\r\n     */\r\n    @serialize()\r\n    public fadeOut = 1;\r\n\r\n    /** @internal */\r\n    public _reflected = true;\r\n\r\n    /** @internal */\r\n    public _frequency = 1;\r\n\r\n    /** @internal */\r\n    public _verticalOffset = 0;\r\n\r\n    /**\r\n     * Gets or sets the world-space position of the tip of the left index finger.\r\n     */\r\n    @serializeAsVector3()\r\n    public globalLeftIndexTipPosition = Vector3.Zero();\r\n    private _globalLeftIndexTipPosition4 = Vector4.Zero();\r\n\r\n    /**\r\n     * Gets or sets the world-space position of the tip of the right index finger.\r\n     */\r\n    @serializeAsVector3()\r\n    public globalRightIndexTipPosition = Vector3.Zero();\r\n    private _globalRightIndexTipPosition4 = Vector4.Zero();\r\n\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n        this.alphaMode = Constants.ALPHA_DISABLE;\r\n        this.backFaceCulling = false;\r\n\r\n        this._blobTexture = new Texture(FluentBackplateMaterial.BLOB_TEXTURE_URL, this.getScene(), true, false, Texture.NEAREST_SAMPLINGMODE);\r\n        this._iridescentMap = new Texture(FluentBackplateMaterial.IM_TEXTURE_URL, this.getScene(), true, false, Texture.NEAREST_SAMPLINGMODE);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new FluentBackplateMaterialDefines();\r\n        }\r\n\r\n        const defines = <FluentBackplateMaterialDefines>subMesh.materialDefines;\r\n        const scene = this.getScene();\r\n\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, false);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\r\n\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            if (defines.TANGENT) {\r\n                attribs.push(VertexBuffer.TangentKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            const shaderName = \"fluentBackplate\";\r\n            const join = defines.toString();\r\n\r\n            const uniforms = [\r\n                \"world\",\r\n                \"viewProjection\",\r\n                \"cameraPosition\",\r\n                \"_Radius_\",\r\n                \"_Line_Width_\",\r\n                \"_Absolute_Sizes_\",\r\n                \"_Filter_Width_\",\r\n                \"_Base_Color_\",\r\n                \"_Line_Color_\",\r\n                \"_Radius_Top_Left_\",\r\n                \"_Radius_Top_Right_\",\r\n                \"_Radius_Bottom_Left_\",\r\n                \"_Radius_Bottom_Right_\",\r\n                \"_Blob_Position_\",\r\n                \"_Blob_Intensity_\",\r\n                \"_Blob_Near_Size_\",\r\n                \"_Blob_Far_Size_\",\r\n                \"_Blob_Near_Distance_\",\r\n                \"_Blob_Far_Distance_\",\r\n                \"_Blob_Fade_Length_\",\r\n                \"_Blob_Pulse_\",\r\n                \"_Blob_Fade_\",\r\n                \"_Blob_Texture_\",\r\n                \"_Blob_Position_2_\",\r\n                \"_Blob_Near_Size_2_\",\r\n                \"_Blob_Pulse_2_\",\r\n                \"_Blob_Fade_2_\",\r\n                \"_Rate_\",\r\n                \"_Highlight_Color_\",\r\n                \"_Highlight_Width_\",\r\n                \"_Highlight_Transform_\",\r\n                \"_Highlight_\",\r\n                \"_Iridescence_Intensity_\",\r\n                \"_Iridescence_Edge_Intensity_\",\r\n                \"_Angle_\",\r\n                \"_Fade_Out_\",\r\n                \"_Reflected_\",\r\n                \"_Frequency_\",\r\n                \"_Vertical_Offset_\",\r\n                \"_Iridescent_Map_\",\r\n                \"_Use_Global_Left_Index_\",\r\n                \"_Use_Global_Right_Index_\",\r\n                \"Global_Left_Index_Tip_Position\",\r\n                \"Global_Right_Index_Tip_Position\",\r\n            ];\r\n            const samplers: string[] = [\"_Blob_Texture_\", \"_Iridescent_Map_\"];\r\n            const uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4,\r\n            });\r\n\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: { maxSimultaneousLights: 4 },\r\n                    },\r\n                    engine\r\n                ),\r\n                defines,\r\n                this._materialContext\r\n            );\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const defines = <FluentBackplateMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", this.getScene().getTransformMatrix());\r\n        this._activeEffect.setVector3(\"cameraPosition\", this.getScene().activeCamera?.position ?? Vector3.ZeroReadOnly);\r\n\r\n        // \"Round Rect\"\r\n        this._activeEffect.setFloat(\"_Radius_\", this.radius);\r\n        this._activeEffect.setFloat(\"_Line_Width_\", this.lineWidth);\r\n        this._activeEffect.setFloat(\"_Absolute_Sizes_\", this.absoluteSizes ? 1.0 : 0.0);\r\n        this._activeEffect.setFloat(\"_Filter_Width_\", this._filterWidth);\r\n        this._activeEffect.setDirectColor4(\"_Base_Color_\", this.baseColor);\r\n        this._activeEffect.setDirectColor4(\"_Line_Color_\", this.lineColor);\r\n\r\n        // \"Radii Multipliers\"\r\n        this._activeEffect.setFloat(\"_Radius_Top_Left_\", 1);\r\n        this._activeEffect.setFloat(\"_Radius_Top_Right_\", 1.0);\r\n        this._activeEffect.setFloat(\"_Radius_Bottom_Left_\", 1.0);\r\n        this._activeEffect.setFloat(\"_Radius_Bottom_Right_\", 1.0);\r\n\r\n        // \"Blob\"\r\n        //define BLOB_ENABLE true;\r\n        this._activeEffect.setFloat(\"_Blob_Intensity_\", this.blobIntensity);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Size_\", this.blobNearSize);\r\n        this._activeEffect.setFloat(\"_Blob_Far_Size_\", this.blobFarSize);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Distance_\", this.blobNearDistance);\r\n        this._activeEffect.setFloat(\"_Blob_Far_Distance_\", this.blobFarDistance);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_Length_\", this.blobFadeLength);\r\n        this._activeEffect.setFloat(\"_Blob_Pulse_\", this.blobPulse);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_\", this.blobFade);\r\n\r\n        // \"Blob Texture\"\r\n        this._activeEffect.setTexture(\"_Blob_Texture_\", this._blobTexture);\r\n\r\n        // \"Blob 2\"\r\n        //define BLOB_ENABLE_2 true;\r\n        this._activeEffect.setFloat(\"_Blob_Near_Size_2_\", this.blobNearSize2);\r\n        this._activeEffect.setFloat(\"_Blob_Pulse_2_\", this.blobPulse2);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_2_\", this.blobFade2);\r\n\r\n        // \"Line Highlight\"\r\n        this._activeEffect.setFloat(\"_Rate_\", this._rate);\r\n        this._activeEffect.setDirectColor4(\"_Highlight_Color_\", this.highlightColor);\r\n        this._activeEffect.setFloat(\"_Highlight_Width_\", this.highlightWidth);\r\n        this._activeEffect.setVector4(\"_Highlight_Transform_\", this._highlightTransform);\r\n        this._activeEffect.setFloat(\"_Highlight_\", this._highlight);\r\n\r\n        // \"Iridescence\"\r\n        this._activeEffect.setFloat(\"_Iridescence_Intensity_\", this.iridescenceIntensity);\r\n        this._activeEffect.setFloat(\"_Iridescence_Edge_Intensity_\", this.iridescenceEdgeIntensity);\r\n        this._activeEffect.setFloat(\"_Angle_\", this._angle);\r\n\r\n        // \"Fade\"\r\n        this._activeEffect.setFloat(\"_Fade_Out_\", this.fadeOut);\r\n\r\n        // \"Antialiasing\"\r\n        //define SMOOTH_EDGES true;\r\n\r\n        // \"ChooseAngle\"\r\n        this._activeEffect.setFloat(\"_Reflected_\", this._reflected ? 1.0 : 0.0);\r\n\r\n        // \"Multiply\"\r\n        this._activeEffect.setFloat(\"_Frequency_\", this._frequency);\r\n        this._activeEffect.setFloat(\"_Vertical_Offset_\", this._verticalOffset);\r\n\r\n        // \"Color Texture\"\r\n        //define IRIDESCENT_MAP_ENABLE true;\r\n        this._activeEffect.setTexture(\"_Iridescent_Map_\", this._iridescentMap);\r\n\r\n        // \"Global\"\r\n        this._activeEffect.setFloat(\"_Use_Global_Left_Index_\", 1.0);\r\n        this._activeEffect.setFloat(\"_Use_Global_Right_Index_\", 1.0);\r\n\r\n        this._globalLeftIndexTipPosition4.set(this.globalLeftIndexTipPosition.x, this.globalLeftIndexTipPosition.y, this.globalLeftIndexTipPosition.z, 1.0);\r\n        this._activeEffect.setVector4(\"Global_Left_Index_Tip_Position\", this._globalLeftIndexTipPosition4);\r\n\r\n        this._globalRightIndexTipPosition4.set(this.globalRightIndexTipPosition.x, this.globalRightIndexTipPosition.y, this.globalRightIndexTipPosition.z, 1.0);\r\n        this._activeEffect.setVector4(\"Global_Right_Index_Tip_Position\", this._globalRightIndexTipPosition4);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    /**\r\n     * Get the list of animatables in the material.\r\n     * @returns the list of animatables object used in the material\r\n     */\r\n    public getAnimatables(): IAnimatable[] {\r\n        return [];\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n\r\n        this._blobTexture.dispose();\r\n        this._iridescentMap.dispose();\r\n    }\r\n\r\n    public clone(name: string): FluentBackplateMaterial {\r\n        return SerializationHelper.Clone(() => new FluentBackplateMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n        serializationObject.customType = \"BABYLON.FluentBackplateMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FluentBackplateMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): FluentBackplateMaterial {\r\n        return SerializationHelper.Parse(() => new FluentBackplateMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.FluentBackplateMaterial\", FluentBackplateMaterial);\r\n","import type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport { CreateBox } from \"core/Meshes/Builders/boxBuilder\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { FluentBackplateMaterial } from \"../materials/fluentBackplate/fluentBackplateMaterial\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { SceneLoader } from \"core/Loading/sceneLoader\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\n\r\n/**\r\n * Class used to create a holographic backplate in 3D\r\n * @since 5.0.0\r\n */\r\nexport class HolographicBackplate extends Control3D {\r\n    /**\r\n     * Base Url for the button model.\r\n     */\r\n    public static MODEL_BASE_URL: string = \"https://assets.babylonjs.com/meshes/MRTK/\";\r\n    /**\r\n     * File name for the button model.\r\n     */\r\n    public static MODEL_FILENAME: string = \"mrtk-fluent-backplate.glb\";\r\n\r\n    private _model: AbstractMesh;\r\n    private _material: FluentBackplateMaterial;\r\n\r\n    /**\r\n     * Rendering ground id of the backplate mesh.\r\n     */\r\n    public set renderingGroupId(id: number) {\r\n        this._model.renderingGroupId = id;\r\n    }\r\n    public get renderingGroupId(): number {\r\n        return this._model.renderingGroupId;\r\n    }\r\n\r\n    /**\r\n     * Gets the material used by the backplate\r\n     */\r\n    public get material(): FluentBackplateMaterial {\r\n        return this._material;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this backplate shares its material with other HolographicBackplates\r\n     */\r\n    public get shareMaterials(): boolean {\r\n        return this._shareMaterials;\r\n    }\r\n\r\n    /**\r\n     * Creates a new holographic backplate\r\n     * @param name defines the control name\r\n     * @param _shareMaterials\r\n     */\r\n    constructor(name?: string, private _shareMaterials = true) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"HolographicBackplate\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        const collisionMesh = CreateBox(\r\n            (this.name ?? \"HolographicBackplate\") + \"_CollisionMesh\",\r\n            {\r\n                width: 1.0,\r\n                height: 1.0,\r\n                depth: 1.0,\r\n            },\r\n            scene\r\n        );\r\n        collisionMesh.isPickable = true;\r\n        collisionMesh.visibility = 0;\r\n\r\n        SceneLoader.ImportMeshAsync(undefined, HolographicBackplate.MODEL_BASE_URL, HolographicBackplate.MODEL_FILENAME, scene).then((result) => {\r\n            const importedModel = result.meshes[1];\r\n            importedModel.name = `${this.name}_frontPlate`;\r\n            importedModel.isPickable = false;\r\n            importedModel.parent = collisionMesh;\r\n            if (this._material) {\r\n                importedModel.material = this._material;\r\n            }\r\n            this._model = importedModel;\r\n        });\r\n\r\n        return collisionMesh;\r\n    }\r\n\r\n    private _createMaterial(mesh: Mesh) {\r\n        this._material = new FluentBackplateMaterial(this.name + \" Material\", mesh.getScene());\r\n    }\r\n\r\n    protected _affectMaterial(mesh: Mesh) {\r\n        // Back\r\n        if (this._shareMaterials) {\r\n            if (!this._host._touchSharedMaterials[\"fluentBackplateMaterial\"]) {\r\n                this._createMaterial(mesh);\r\n                this._host._touchSharedMaterials[\"fluentBackplateMaterial\"] = this._material;\r\n            } else {\r\n                this._material = this._host._touchSharedMaterials[\"fluentBackplateMaterial\"] as FluentBackplateMaterial;\r\n            }\r\n        } else {\r\n            this._createMaterial(mesh);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose(); // will dispose main mesh ie. back plate\r\n\r\n        if (!this.shareMaterials) {\r\n            this._material.dispose();\r\n        }\r\n\r\n        this._model.dispose();\r\n    }\r\n}\r\n","import { Button3D } from \"./button3D\";\r\n\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport { StandardMaterial } from \"core/Materials/standardMaterial\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport { Mesh } from \"core/Meshes/mesh\";\r\nimport { CreatePlane } from \"core/Meshes/Builders/planeBuilder\";\r\nimport { CreateBox } from \"core/Meshes/Builders/boxBuilder\";\r\nimport { FadeInOutBehavior } from \"core/Behaviors/Meshes/fadeInOutBehavior\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\nimport { FluentMaterial } from \"../materials/fluent/fluentMaterial\";\r\nimport { StackPanel } from \"../../2D/controls/stackPanel\";\r\nimport { Image } from \"../../2D/controls/image\";\r\nimport { TextBlock } from \"../../2D/controls/textBlock\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport type { Control3D } from \"./control3D\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { IsDocumentAvailable } from \"core/Misc/domManagement\";\r\n\r\n/**\r\n * Class used to create a holographic button in 3D\r\n */\r\nexport class HolographicButton extends Button3D {\r\n    private _backPlate: Mesh;\r\n    private _textPlate: Mesh;\r\n    private _frontPlate: Mesh;\r\n    private _text: string;\r\n    private _imageUrl: string;\r\n    private _shareMaterials = true;\r\n    private _frontMaterial: FluentMaterial;\r\n    private _backMaterial: FluentMaterial;\r\n    private _plateMaterial: StandardMaterial;\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<Vector3>>>;\r\n\r\n    // Tooltip\r\n    private _tooltipFade: Nullable<FadeInOutBehavior>;\r\n    private _tooltipTextBlock: Nullable<TextBlock>;\r\n    private _tooltipTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _tooltipMesh: Nullable<Mesh>;\r\n    private _tooltipHoverObserver: Nullable<Observer<Control3D>>;\r\n    private _tooltipOutObserver: Nullable<Observer<Control3D>>;\r\n\r\n    private _disposeTooltip() {\r\n        this._tooltipFade = null;\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.dispose();\r\n        }\r\n        if (this._tooltipTexture) {\r\n            this._tooltipTexture.dispose();\r\n        }\r\n        if (this._tooltipMesh) {\r\n            this._tooltipMesh.dispose();\r\n        }\r\n        this.onPointerEnterObservable.remove(this._tooltipHoverObserver);\r\n        this.onPointerOutObservable.remove(this._tooltipOutObserver);\r\n    }\r\n\r\n    /**\r\n     * Rendering ground id of all the mesh in the button\r\n     */\r\n    public set renderingGroupId(id: number) {\r\n        this._backPlate.renderingGroupId = id;\r\n        this._textPlate.renderingGroupId = id;\r\n        this._frontPlate.renderingGroupId = id;\r\n\r\n        if (this._tooltipMesh) {\r\n            this._tooltipMesh.renderingGroupId = id;\r\n        }\r\n    }\r\n    public get renderingGroupId(): number {\r\n        return this._backPlate.renderingGroupId;\r\n    }\r\n\r\n    /**\r\n     * Text to be displayed on the tooltip shown when hovering on the button. When set to null tooltip is disabled. (Default: null)\r\n     */\r\n    public set tooltipText(text: Nullable<string>) {\r\n        if (!text) {\r\n            this._disposeTooltip();\r\n            return;\r\n        }\r\n        if (!this._tooltipFade) {\r\n            const rightHandedScene = this._backPlate._scene.useRightHandedSystem;\r\n            // Create tooltip with mesh and text\r\n            this._tooltipMesh = CreatePlane(\"\", { size: 1 }, this._backPlate._scene);\r\n            const tooltipBackground = CreatePlane(\"\", { size: 1, sideOrientation: Mesh.DOUBLESIDE }, this._backPlate._scene);\r\n            const mat = new StandardMaterial(\"\", this._backPlate._scene);\r\n            mat.diffuseColor = Color3.FromHexString(\"#212121\");\r\n            tooltipBackground.material = mat;\r\n            tooltipBackground.isPickable = false;\r\n            this._tooltipMesh.addChild(tooltipBackground);\r\n            tooltipBackground.position = Vector3.Forward(rightHandedScene).scale(0.05);\r\n            this._tooltipMesh.scaling.y = 1 / 3;\r\n            this._tooltipMesh.position = Vector3.Up().scale(0.7).add(Vector3.Forward(rightHandedScene).scale(-0.15));\r\n            this._tooltipMesh.isPickable = false;\r\n            this._tooltipMesh.parent = this._backPlate;\r\n\r\n            // Create text texture for the tooltip\r\n            this._tooltipTexture = AdvancedDynamicTexture.CreateForMesh(this._tooltipMesh);\r\n            this._tooltipTextBlock = new TextBlock();\r\n            this._tooltipTextBlock.scaleY = 3;\r\n            this._tooltipTextBlock.color = \"white\";\r\n            this._tooltipTextBlock.fontSize = 130;\r\n            this._tooltipTexture.addControl(this._tooltipTextBlock);\r\n\r\n            // Add hover action to tooltip\r\n            this._tooltipFade = new FadeInOutBehavior();\r\n            this._tooltipFade.delay = 500;\r\n            this._tooltipMesh.addBehavior(this._tooltipFade);\r\n            this._tooltipHoverObserver = this.onPointerEnterObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(true);\r\n                }\r\n            });\r\n            this._tooltipOutObserver = this.onPointerOutObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(false);\r\n                }\r\n            });\r\n        }\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.text = text;\r\n        }\r\n    }\r\n\r\n    public get tooltipText() {\r\n        if (this._tooltipTextBlock) {\r\n            return this._tooltipTextBlock.text;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text for the button\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n\r\n        this._text = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image url for the button\r\n     */\r\n    public get imageUrl(): string {\r\n        return this._imageUrl;\r\n    }\r\n\r\n    public set imageUrl(value: string) {\r\n        if (this._imageUrl === value) {\r\n            return;\r\n        }\r\n\r\n        this._imageUrl = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets the back material used by this button\r\n     */\r\n    public get backMaterial(): FluentMaterial {\r\n        return this._backMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the front material used by this button\r\n     */\r\n    public get frontMaterial(): FluentMaterial {\r\n        return this._frontMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the plate material used by this button\r\n     */\r\n    public get plateMaterial(): StandardMaterial {\r\n        return this._plateMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this button shares its material with other HolographicButtons\r\n     */\r\n    public get shareMaterials(): boolean {\r\n        return this._shareMaterials;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     * @param shareMaterials\r\n     */\r\n    constructor(name?: string, shareMaterials = true) {\r\n        super(name);\r\n\r\n        this._shareMaterials = shareMaterials;\r\n\r\n        // Default animations\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(true);\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(false);\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"HolographicButton\";\r\n    }\r\n\r\n    private _rebuildContent(): void {\r\n        this._disposeFacadeTexture();\r\n\r\n        const panel = new StackPanel();\r\n        panel.isVertical = true;\r\n\r\n        if (IsDocumentAvailable() && !!document.createElement) {\r\n            if (this._imageUrl) {\r\n                const image = new Image();\r\n                image.source = this._imageUrl;\r\n                image.paddingTop = \"40px\";\r\n                image.height = \"180px\";\r\n                image.width = \"100px\";\r\n                image.paddingBottom = \"40px\";\r\n                panel.addControl(image);\r\n            }\r\n        }\r\n\r\n        if (this._text) {\r\n            const text = new TextBlock();\r\n            text.text = this._text;\r\n            text.color = \"white\";\r\n            text.height = \"30px\";\r\n            text.fontSize = 24;\r\n            panel.addControl(text);\r\n        }\r\n\r\n        if (this._frontPlate) {\r\n            this.content = panel;\r\n        }\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._backPlate = CreateBox(\r\n            this.name + \"BackMesh\",\r\n            {\r\n                width: 1.0,\r\n                height: 1.0,\r\n                depth: 0.08,\r\n            },\r\n            scene\r\n        );\r\n\r\n        this._frontPlate = CreateBox(\r\n            this.name + \"FrontMesh\",\r\n            {\r\n                width: 1.0,\r\n                height: 1.0,\r\n                depth: 0.08,\r\n            },\r\n            scene\r\n        );\r\n\r\n        this._frontPlate.parent = this._backPlate;\r\n        this._frontPlate.position = Vector3.Forward(scene.useRightHandedSystem).scale(-0.08);\r\n        this._frontPlate.isPickable = false;\r\n        this._frontPlate.setEnabled(false);\r\n\r\n        this._textPlate = <Mesh>super._createNode(scene);\r\n        this._textPlate.parent = this._backPlate;\r\n        this._textPlate.position = Vector3.Forward(scene.useRightHandedSystem).scale(-0.08);\r\n        this._textPlate.isPickable = false;\r\n\r\n        return this._backPlate;\r\n    }\r\n\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        this._plateMaterial.emissiveTexture = facadeTexture;\r\n        this._plateMaterial.opacityTexture = facadeTexture;\r\n    }\r\n\r\n    private _createBackMaterial(mesh: Mesh) {\r\n        this._backMaterial = new FluentMaterial(this.name + \"Back Material\", mesh.getScene());\r\n        this._backMaterial.renderHoverLight = true;\r\n        this._pickedPointObserver = this._host.onPickedPointChangedObservable.add((pickedPoint) => {\r\n            if (pickedPoint) {\r\n                this._backMaterial.hoverPosition = pickedPoint;\r\n                this._backMaterial.hoverColor.a = 1.0;\r\n            } else {\r\n                this._backMaterial.hoverColor.a = 0;\r\n            }\r\n        });\r\n    }\r\n\r\n    private _createFrontMaterial(mesh: Mesh) {\r\n        this._frontMaterial = new FluentMaterial(this.name + \"Front Material\", mesh.getScene());\r\n        this._frontMaterial.innerGlowColorIntensity = 0; // No inner glow\r\n        this._frontMaterial.alpha = 0.5; // Additive\r\n        this._frontMaterial.renderBorders = true;\r\n    }\r\n\r\n    private _createPlateMaterial(mesh: Mesh) {\r\n        this._plateMaterial = new StandardMaterial(this.name + \"Plate Material\", mesh.getScene());\r\n        this._plateMaterial.specularColor = Color3.Black();\r\n    }\r\n\r\n    protected _affectMaterial(mesh: Mesh) {\r\n        // Back\r\n        if (this._shareMaterials) {\r\n            if (!this._host._sharedMaterials[\"backFluentMaterial\"]) {\r\n                this._createBackMaterial(mesh);\r\n                this._host._sharedMaterials[\"backFluentMaterial\"] = this._backMaterial;\r\n            } else {\r\n                this._backMaterial = this._host._sharedMaterials[\"backFluentMaterial\"] as FluentMaterial;\r\n            }\r\n\r\n            // Front\r\n            if (!this._host._sharedMaterials[\"frontFluentMaterial\"]) {\r\n                this._createFrontMaterial(mesh);\r\n                this._host._sharedMaterials[\"frontFluentMaterial\"] = this._frontMaterial;\r\n            } else {\r\n                this._frontMaterial = this._host._sharedMaterials[\"frontFluentMaterial\"] as FluentMaterial;\r\n            }\r\n        } else {\r\n            this._createBackMaterial(mesh);\r\n            this._createFrontMaterial(mesh);\r\n        }\r\n\r\n        this._createPlateMaterial(mesh);\r\n        this._backPlate.material = this._backMaterial;\r\n        this._frontPlate.material = this._frontMaterial;\r\n        this._textPlate.material = this._plateMaterial;\r\n\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose(); // will dispose main mesh ie. back plate\r\n\r\n        this._disposeTooltip();\r\n\r\n        if (!this.shareMaterials) {\r\n            this._backMaterial.dispose();\r\n            this._frontMaterial.dispose();\r\n            this._plateMaterial.dispose();\r\n\r\n            if (this._pickedPointObserver) {\r\n                this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n                this._pickedPointObserver = null;\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"fluentButtonPixelShader\";\nconst shader = `uniform vec3 cameraPosition;varying vec3 vPosition;varying vec3 vNormal;varying vec2 vUV;varying vec3 vTangent;varying vec3 vBinormal;varying vec4 vColor;varying vec4 vExtra1;uniform float _Edge_Width_;uniform vec4 _Edge_Color_;uniform bool _Relative_Width_;uniform float _Proximity_Max_Intensity_;uniform float _Proximity_Far_Distance_;uniform float _Proximity_Near_Radius_;uniform float _Proximity_Anisotropy_;uniform float _Selection_Fuzz_;uniform float _Selected_;uniform float _Selection_Fade_;uniform float _Selection_Fade_Size_;uniform float _Selected_Distance_;uniform float _Selected_Fade_Length_;uniform bool _Blob_Enable_;uniform vec3 _Blob_Position_;uniform float _Blob_Intensity_;uniform float _Blob_Near_Size_;uniform float _Blob_Far_Size_;uniform float _Blob_Near_Distance_;uniform float _Blob_Far_Distance_;uniform float _Blob_Fade_Length_;uniform float _Blob_Inner_Fade_;uniform float _Blob_Pulse_;uniform float _Blob_Fade_;uniform sampler2D _Blob_Texture_;uniform bool _Blob_Enable_2_;uniform vec3 _Blob_Position_2_;uniform float _Blob_Near_Size_2_;uniform float _Blob_Inner_Fade_2_;uniform float _Blob_Pulse_2_;uniform float _Blob_Fade_2_;uniform vec3 _Active_Face_Dir_;uniform vec3 _Active_Face_Up_;uniform bool Enable_Fade;uniform float _Fade_Width_;uniform bool _Smooth_Active_Face_;uniform bool _Show_Frame_;uniform bool _Use_Blob_Texture_;uniform bool Use_Global_Left_Index;uniform bool Use_Global_Right_Index;uniform vec4 Global_Left_Index_Tip_Position;uniform vec4 Global_Right_Index_Tip_Position;uniform vec4 Global_Left_Thumb_Tip_Position;uniform vec4 Global_Right_Thumb_Tip_Position;uniform float Global_Left_Index_Tip_Proximity;uniform float Global_Right_Index_Tip_Proximity;void Holo_Edge_Fragment_B35(\nvec4 Edges,\nfloat Edge_Width,\nout float NotEdge)\n{vec2 c=vec2(min(Edges.r,Edges.g),min(Edges.b,Edges.a));vec2 df=fwidth(c)*Edge_Width;vec2 g=clamp(c/df,0.0,1.0);NotEdge=g.x*g.y;}\nvoid Blob_Fragment_B39(\nvec2 UV,\nvec3 Blob_Info,\nsampler2D Blob_Texture,\nout vec4 Blob_Color)\n{float k=dot(UV,UV);Blob_Color=Blob_Info.y*texture(Blob_Texture,vec2(vec2(sqrt(k),Blob_Info.x).x,1.0-vec2(sqrt(k),Blob_Info.x).y))*(1.0-clamp(k,0.0,1.0));}\nvec2 FilterStep(vec2 Edge,vec2 X)\n{vec2 dX=max(fwidth(X),vec2(0.00001,0.00001));return clamp( (X+dX-max(Edge,X-dX))/(dX*2.0),0.0,1.0);}\nvoid Wireframe_Fragment_B59(\nvec3 Widths,\nvec2 UV,\nfloat Proximity,\nvec4 Edge_Color,\nout vec4 Wireframe)\n{vec2 c=min(UV,vec2(1.0,1.0)-UV);vec2 g=FilterStep(Widths.xy*0.5,c); \nWireframe=(1.0-min(g.x,g.y))*Proximity*Edge_Color;}\nvoid Proximity_B53(\nvec3 Proximity_Center,\nvec3 Proximity_Center_2,\nfloat Proximity_Max_Intensity,\nfloat Proximity_Near_Radius,\nvec3 Position,\nvec3 Show_Selection,\nvec4 Extra1,\nfloat Dist_To_Face,\nfloat Intensity,\nout float Proximity)\n{vec2 delta1=Extra1.xy;vec2 delta2=Extra1.zw;float d2=sqrt(min(dot(delta1,delta1),dot(delta2,delta2))+Dist_To_Face*Dist_To_Face);Proximity=Intensity*Proximity_Max_Intensity*(1.0-clamp(d2/Proximity_Near_Radius,0.0,1.0))*(1.0-Show_Selection.x)+Show_Selection.x;}\nvoid To_XYZ_B46(\nvec3 Vec3,\nout float X,\nout float Y,\nout float Z)\n{X=Vec3.x;Y=Vec3.y;Z=Vec3.z;}\nvoid main()\n{float NotEdge_Q35;\n#if ENABLE_FADE\nHolo_Edge_Fragment_B35(vColor,_Fade_Width_,NotEdge_Q35);\n#else\nNotEdge_Q35=1.0;\n#endif\nvec4 Blob_Color_Q39;float k=dot(vUV,vUV);vec2 blobTextureCoord=vec2(vec2(sqrt(k),vTangent.x).x,1.0-vec2(sqrt(k),vTangent.x).y);vec4 blobColor=mix(vec4(1.0,1.0,1.0,1.0)*step(1.0-vTangent.x,clamp(sqrt(k)+0.1,0.0,1.0)),texture(_Blob_Texture_,blobTextureCoord),float(_Use_Blob_Texture_));Blob_Color_Q39=vTangent.y*blobColor*(1.0-clamp(k,0.0,1.0));float Is_Quad_Q24;Is_Quad_Q24=vNormal.z;vec3 Blob_Position_Q41= mix(_Blob_Position_,Global_Left_Index_Tip_Position.xyz,float(Use_Global_Left_Index));vec3 Blob_Position_Q42= mix(_Blob_Position_2_,Global_Right_Index_Tip_Position.xyz,float(Use_Global_Right_Index));float X_Q46;float Y_Q46;float Z_Q46;To_XYZ_B46(vBinormal,X_Q46,Y_Q46,Z_Q46);float Proximity_Q53;Proximity_B53(Blob_Position_Q41,Blob_Position_Q42,_Proximity_Max_Intensity_,_Proximity_Near_Radius_,vPosition,vBinormal,vExtra1,Y_Q46,Z_Q46,Proximity_Q53);vec4 Wireframe_Q59;Wireframe_Fragment_B59(vNormal,vUV,Proximity_Q53,_Edge_Color_,Wireframe_Q59);vec4 Wire_Or_Blob_Q23=mix(Wireframe_Q59,Blob_Color_Q39,Is_Quad_Q24);vec4 Result_Q22;Result_Q22=mix(Wire_Or_Blob_Q23,vec4(0.3,0.3,0.3,0.3),float(_Show_Frame_));vec4 Final_Color_Q37=NotEdge_Q35*Result_Q22;vec4 Out_Color=Final_Color_Q37;float Clip_Threshold=0.0;bool To_sRGB=false;gl_FragColor=Out_Color;}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const fluentButtonPixelShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"fluentButtonVertexShader\";\nconst shader = `uniform mat4 world;uniform mat4 viewProjection;uniform vec3 cameraPosition;attribute vec3 position;attribute vec3 normal;attribute vec2 uv;attribute vec3 tangent;attribute vec4 color;uniform float _Edge_Width_;uniform vec4 _Edge_Color_;uniform float _Proximity_Max_Intensity_;uniform float _Proximity_Far_Distance_;uniform float _Proximity_Near_Radius_;uniform float _Proximity_Anisotropy_;uniform float _Selection_Fuzz_;uniform float _Selected_;uniform float _Selection_Fade_;uniform float _Selection_Fade_Size_;uniform float _Selected_Distance_;uniform float _Selected_Fade_Length_;uniform bool _Blob_Enable_;uniform vec3 _Blob_Position_;uniform float _Blob_Intensity_;uniform float _Blob_Near_Size_;uniform float _Blob_Far_Size_;uniform float _Blob_Near_Distance_;uniform float _Blob_Far_Distance_;uniform float _Blob_Fade_Length_;uniform float _Blob_Inner_Fade_;uniform float _Blob_Pulse_;uniform float _Blob_Fade_;uniform sampler2D _Blob_Texture_;uniform bool _Blob_Enable_2_;uniform vec3 _Blob_Position_2_;uniform float _Blob_Near_Size_2_;uniform float _Blob_Inner_Fade_2_;uniform float _Blob_Pulse_2_;uniform float _Blob_Fade_2_;uniform vec3 _Active_Face_Dir_;uniform vec3 _Active_Face_Up_;uniform bool _Enable_Fade_;uniform float _Fade_Width_;uniform bool _Smooth_Active_Face_;uniform bool _Show_Frame_;uniform bool Use_Global_Left_Index;uniform bool Use_Global_Right_Index;uniform vec4 Global_Left_Index_Tip_Position;uniform vec4 Global_Right_Index_Tip_Position;uniform vec4 Global_Left_Thumb_Tip_Position;uniform vec4 Global_Right_Thumb_Tip_Position;uniform float Global_Left_Index_Tip_Proximity;uniform float Global_Right_Index_Tip_Proximity;varying vec3 vPosition;varying vec3 vNormal;varying vec2 vUV;varying vec3 vTangent;varying vec3 vBinormal;varying vec4 vColor;varying vec4 vExtra1;void Blob_Vertex_B47(\nvec3 Position,\nvec3 Normal,\nvec3 Tangent,\nvec3 Bitangent,\nvec3 Blob_Position,\nfloat Intensity,\nfloat Blob_Near_Size,\nfloat Blob_Far_Size,\nfloat Blob_Near_Distance,\nfloat Blob_Far_Distance,\nvec4 Vx_Color,\nvec2 UV,\nvec3 Face_Center,\nvec2 Face_Size,\nvec2 In_UV,\nfloat Blob_Fade_Length,\nfloat Selection_Fade,\nfloat Selection_Fade_Size,\nfloat Inner_Fade,\nvec3 Active_Face_Center,\nfloat Blob_Pulse,\nfloat Blob_Fade,\nfloat Blob_Enabled,\nout vec3 Out_Position,\nout vec2 Out_UV,\nout vec3 Blob_Info)\n{float blobSize,fadeIn;vec3 Hit_Position;Blob_Info=vec3(0.0,0.0,0.0);float Hit_Distance=dot(Blob_Position-Face_Center,Normal);Hit_Position=Blob_Position-Hit_Distance*Normal;float absD=abs(Hit_Distance);float lerpVal=clamp((absD-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance),0.0,1.0);fadeIn=1.0-clamp((absD-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);float innerFade=1.0-clamp(-Hit_Distance/Inner_Fade,0.0,1.0);float farClip=clamp(1.0-step(Blob_Far_Distance+Blob_Fade_Length,absD),0.0,1.0);float size=mix(Blob_Near_Size,Blob_Far_Size,lerpVal)*farClip;blobSize=mix(size,Selection_Fade_Size,Selection_Fade)*innerFade*Blob_Enabled;Blob_Info.x=lerpVal*0.5+0.5;Blob_Info.y=fadeIn*Intensity*(1.0-Selection_Fade)*Blob_Fade;Blob_Info.x*=(1.0-Blob_Pulse);vec3 delta=Hit_Position-Face_Center;vec2 blobCenterXY=vec2(dot(delta,Tangent),dot(delta,Bitangent));vec2 quadUVin=2.0*UV-1.0; \nvec2 blobXY=blobCenterXY+quadUVin*blobSize;vec2 blobClipped=clamp(blobXY,-Face_Size*0.5,Face_Size*0.5);vec2 blobUV=(blobClipped-blobCenterXY)/max(blobSize,0.0001)*2.0;vec3 blobCorner=Face_Center+blobClipped.x*Tangent+blobClipped.y*Bitangent;Out_Position=mix(Position,blobCorner,Vx_Color.rrr);Out_UV=mix(In_UV,blobUV,Vx_Color.rr);}\nvec2 ProjectProximity(\nvec3 blobPosition,\nvec3 position,\nvec3 center,\nvec3 dir,\nvec3 xdir,\nvec3 ydir,\nout float vdistance\n)\n{vec3 delta=blobPosition-position;vec2 xy=vec2(dot(delta,xdir),dot(delta,ydir));vdistance=abs(dot(delta,dir));return xy;}\nvoid Proximity_Vertex_B66(\nvec3 Blob_Position,\nvec3 Blob_Position_2,\nvec3 Active_Face_Center,\nvec3 Active_Face_Dir,\nvec3 Position,\nfloat Proximity_Far_Distance,\nfloat Relative_Scale,\nfloat Proximity_Anisotropy,\nvec3 Up,\nout vec4 Extra1,\nout float Distance_To_Face,\nout float Intensity)\n{vec3 Active_Face_Dir_X=normalize(cross(Active_Face_Dir,Up));vec3 Active_Face_Dir_Y=cross(Active_Face_Dir,Active_Face_Dir_X);float distz1,distz2;Extra1.xy=ProjectProximity(Blob_Position,Position,Active_Face_Center,Active_Face_Dir,Active_Face_Dir_X*Proximity_Anisotropy,Active_Face_Dir_Y,distz1)/Relative_Scale;Extra1.zw=ProjectProximity(Blob_Position_2,Position,Active_Face_Center,Active_Face_Dir,Active_Face_Dir_X*Proximity_Anisotropy,Active_Face_Dir_Y,distz2)/Relative_Scale;Distance_To_Face=dot(Active_Face_Dir,Position-Active_Face_Center);Intensity=1.0-clamp(min(distz1,distz2)/Proximity_Far_Distance,0.0,1.0);}\nvoid Holo_Edge_Vertex_B44(\nvec3 Incident,\nvec3 Normal,\nvec2 UV,\nvec3 Tangent,\nvec3 Bitangent,\nbool Smooth_Active_Face,\nfloat Active,\nout vec4 Holo_Edges)\n{float NdotI=dot(Incident,Normal);vec2 flip=(UV-vec2(0.5,0.5));float udot=dot(Incident,Tangent)*flip.x*NdotI;float uval=1.0-float(udot>0.0);float vdot=-dot(Incident,Bitangent)*flip.y*NdotI;float vval=1.0-float(vdot>0.0);float Smooth_And_Active=step(1.0,float(Smooth_Active_Face && Active>0.0));uval=mix(uval,max(1.0,uval),Smooth_And_Active); \nvval=mix(vval,max(1.0,vval),Smooth_And_Active);Holo_Edges=vec4(1.0,1.0,1.0,1.0)-vec4(uval*UV.x,uval*(1.0-UV.x),vval*UV.y,vval*(1.0-UV.y));}\nvoid Object_To_World_Pos_B13(\nvec3 Pos_Object,\nout vec3 Pos_World)\n{Pos_World=(world*vec4(Pos_Object,1.0)).xyz;}\nvoid Choose_Blob_B38(\nvec4 Vx_Color,\nvec3 Position1,\nvec3 Position2,\nbool Blob_Enable_1,\nbool Blob_Enable_2,\nfloat Near_Size_1,\nfloat Near_Size_2,\nfloat Blob_Inner_Fade_1,\nfloat Blob_Inner_Fade_2,\nfloat Blob_Pulse_1,\nfloat Blob_Pulse_2,\nfloat Blob_Fade_1,\nfloat Blob_Fade_2,\nout vec3 Position,\nout float Near_Size,\nout float Inner_Fade,\nout float Blob_Enable,\nout float Fade,\nout float Pulse)\n{Position=Position1*(1.0-Vx_Color.g)+Vx_Color.g*Position2;float b1=float(Blob_Enable_1);float b2=float(Blob_Enable_2);Blob_Enable=b1+(b2-b1)*Vx_Color.g;Pulse=Blob_Pulse_1*(1.0-Vx_Color.g)+Vx_Color.g*Blob_Pulse_2;Fade=Blob_Fade_1*(1.0-Vx_Color.g)+Vx_Color.g*Blob_Fade_2;Near_Size=Near_Size_1*(1.0-Vx_Color.g)+Vx_Color.g*Near_Size_2;Inner_Fade=Blob_Inner_Fade_1*(1.0-Vx_Color.g)+Vx_Color.g*Blob_Inner_Fade_2;}\nvoid Wireframe_Vertex_B51(\nvec3 Position,\nvec3 Normal,\nvec3 Tangent,\nvec3 Bitangent,\nfloat Edge_Width,\nvec2 Face_Size,\nout vec3 Wire_Vx_Pos,\nout vec2 UV,\nout vec2 Widths)\n{Widths.xy=Edge_Width/Face_Size;float x=dot(Position,Tangent);float y=dot(Position,Bitangent);float dx=0.5-abs(x);float newx=(0.5-dx*Widths.x*2.0)*sign(x);float dy=0.5-abs(y);float newy=(0.5-dy*Widths.y*2.0)*sign(y);Wire_Vx_Pos=Normal*0.5+newx*Tangent+newy*Bitangent;UV.x=dot(Wire_Vx_Pos,Tangent)+0.5;UV.y=dot(Wire_Vx_Pos,Bitangent)+0.5;}\nvec2 ramp2(vec2 start,vec2 end,vec2 x)\n{return clamp((x-start)/(end-start),vec2(0.0,0.0),vec2(1.0,1.0));}\nfloat computeSelection(\nvec3 blobPosition,\nvec3 normal,\nvec3 tangent,\nvec3 bitangent,\nvec3 faceCenter,\nvec2 faceSize,\nfloat selectionFuzz,\nfloat farDistance,\nfloat fadeLength\n)\n{vec3 delta=blobPosition-faceCenter;float absD=abs(dot(delta,normal));float fadeIn=1.0-clamp((absD-farDistance)/fadeLength,0.0,1.0);vec2 blobCenterXY=vec2(dot(delta,tangent),dot(delta,bitangent));vec2 innerFace=faceSize*(1.0-selectionFuzz)*0.5;vec2 selectPulse=ramp2(-faceSize*0.5,-innerFace,blobCenterXY)-ramp2(innerFace,faceSize*0.5,blobCenterXY);return selectPulse.x*selectPulse.y*fadeIn;}\nvoid Selection_Vertex_B48(\nvec3 Blob_Position,\nvec3 Blob_Position_2,\nvec3 Face_Center,\nvec2 Face_Size,\nvec3 Normal,\nvec3 Tangent,\nvec3 Bitangent,\nfloat Selection_Fuzz,\nfloat Selected,\nfloat Far_Distance,\nfloat Fade_Length,\nvec3 Active_Face_Dir,\nout float Show_Selection)\n{float select1=computeSelection(Blob_Position,Normal,Tangent,Bitangent,Face_Center,Face_Size,Selection_Fuzz,Far_Distance,Fade_Length);float select2=computeSelection(Blob_Position_2,Normal,Tangent,Bitangent,Face_Center,Face_Size,Selection_Fuzz,Far_Distance,Fade_Length);float Active=max(0.0,dot(Active_Face_Dir,Normal));Show_Selection=mix(max(select1,select2),1.0,Selected)*Active;}\nvoid Proximity_Visibility_B54(\nfloat Selection,\nvec3 Proximity_Center,\nvec3 Proximity_Center_2,\nfloat Input_Width,\nfloat Proximity_Far_Distance,\nfloat Proximity_Radius,\nvec3 Active_Face_Center,\nvec3 Active_Face_Dir,\nout float Width)\n{vec3 boxEdges=(world*vec4(vec3(0.5,0.5,0.5),0.0)).xyz;float boxMaxSize=length(boxEdges);float d1=dot(Proximity_Center-Active_Face_Center,Active_Face_Dir);vec3 blob1=Proximity_Center-d1*Active_Face_Dir;float d2=dot(Proximity_Center_2-Active_Face_Center,Active_Face_Dir);vec3 blob2=Proximity_Center_2-d2*Active_Face_Dir;vec3 delta1=blob1-Active_Face_Center;vec3 delta2=blob2-Active_Face_Center;float dist1=dot(delta1,delta1);float dist2=dot(delta2,delta2);float nearestProxDist=sqrt(min(dist1,dist2));Width=Input_Width*(1.0-step(boxMaxSize+Proximity_Radius,nearestProxDist))*(1.0-step(Proximity_Far_Distance,min(d1,d2))*(1.0-step(0.0001,Selection)));}\nvoid Object_To_World_Dir_B67(\nvec3 Dir_Object,\nout vec3 Dir_World)\n{Dir_World=(world*vec4(Dir_Object,0.0)).xyz;}\nvoid main()\n{vec3 Active_Face_Center_Q49;Active_Face_Center_Q49=(world*vec4(_Active_Face_Dir_*0.5,1.0)).xyz;vec3 Blob_Position_Q41= mix(_Blob_Position_,Global_Left_Index_Tip_Position.xyz,float(Use_Global_Left_Index));vec3 Blob_Position_Q42= mix(_Blob_Position_2_,Global_Right_Index_Tip_Position.xyz,float(Use_Global_Right_Index));vec3 Active_Face_Dir_Q64=normalize((world*vec4(_Active_Face_Dir_,0.0)).xyz);float Relative_Scale_Q57;\n#if RELATIVE_WIDTH\nRelative_Scale_Q57=length((world*vec4(vec3(0,1,0),0.0)).xyz);\n#else\nRelative_Scale_Q57=1.0;\n#endif\nvec3 Tangent_World_Q30;Tangent_World_Q30=(world*vec4(tangent,0.0)).xyz;vec3 Binormal_World_Q31;Binormal_World_Q31=(world*vec4((cross(normal,tangent)),0.0)).xyz;vec3 Normal_World_Q60;Normal_World_Q60=(world*vec4(normal,0.0)).xyz;vec3 Result_Q18=0.5*normal;vec3 Dir_World_Q67;Object_To_World_Dir_B67(_Active_Face_Up_,Dir_World_Q67);float Product_Q56=_Edge_Width_*Relative_Scale_Q57;vec3 Normal_World_N_Q29=normalize(Normal_World_Q60);vec3 Tangent_World_N_Q28=normalize(Tangent_World_Q30);vec3 Binormal_World_N_Q32=normalize(Binormal_World_Q31);vec3 Position_Q38;float Near_Size_Q38;float Inner_Fade_Q38;float Blob_Enable_Q38;float Fade_Q38;float Pulse_Q38;Choose_Blob_B38(color,Blob_Position_Q41,Blob_Position_Q42,_Blob_Enable_,_Blob_Enable_2_,_Blob_Near_Size_,_Blob_Near_Size_2_,_Blob_Inner_Fade_,_Blob_Inner_Fade_2_,_Blob_Pulse_,_Blob_Pulse_2_,_Blob_Fade_,_Blob_Fade_2_,Position_Q38,Near_Size_Q38,Inner_Fade_Q38,Blob_Enable_Q38,Fade_Q38,Pulse_Q38);vec3 Face_Center_Q33;Face_Center_Q33=(world*vec4(Result_Q18,1.0)).xyz;vec2 Face_Size_Q50=vec2(length(Tangent_World_Q30),length(Binormal_World_Q31));float Show_Selection_Q48;Selection_Vertex_B48(Blob_Position_Q41,Blob_Position_Q42,Face_Center_Q33,Face_Size_Q50,Normal_World_N_Q29,Tangent_World_N_Q28,Binormal_World_N_Q32,_Selection_Fuzz_,_Selected_,_Selected_Distance_,_Selected_Fade_Length_,Active_Face_Dir_Q64,Show_Selection_Q48);vec3 Normalized_Q72=normalize(Dir_World_Q67);float Active_Q34=max(0.0,dot(Active_Face_Dir_Q64,Normal_World_N_Q29));float Width_Q54;Proximity_Visibility_B54(Show_Selection_Q48,Blob_Position_Q41,Blob_Position_Q42,Product_Q56,_Proximity_Far_Distance_,_Proximity_Near_Radius_,Active_Face_Center_Q49,Active_Face_Dir_Q64,Width_Q54);vec3 Wire_Vx_Pos_Q51;vec2 UV_Q51;vec2 Widths_Q51;Wireframe_Vertex_B51(position,normal,tangent,(cross(normal,tangent)),Width_Q54,Face_Size_Q50,Wire_Vx_Pos_Q51,UV_Q51,Widths_Q51);vec3 Vec3_Q27=vec3(Widths_Q51.x,Widths_Q51.y,color.r);vec3 Pos_World_Q13;Object_To_World_Pos_B13(Wire_Vx_Pos_Q51,Pos_World_Q13);vec3 Incident_Q36=normalize(Pos_World_Q13-cameraPosition);vec3 Out_Position_Q47;vec2 Out_UV_Q47;vec3 Blob_Info_Q47;Blob_Vertex_B47(Pos_World_Q13,Normal_World_N_Q29,Tangent_World_N_Q28,Binormal_World_N_Q32,Position_Q38,_Blob_Intensity_,Near_Size_Q38,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,color,uv,Face_Center_Q33,Face_Size_Q50,UV_Q51,_Blob_Fade_Length_,_Selection_Fade_,_Selection_Fade_Size_,Inner_Fade_Q38,Active_Face_Center_Q49,Pulse_Q38,Fade_Q38,Blob_Enable_Q38,Out_Position_Q47,Out_UV_Q47,Blob_Info_Q47);vec4 Extra1_Q66;float Distance_To_Face_Q66;float Intensity_Q66;Proximity_Vertex_B66(Blob_Position_Q41,Blob_Position_Q42,Active_Face_Center_Q49,Active_Face_Dir_Q64,Pos_World_Q13,_Proximity_Far_Distance_,Relative_Scale_Q57,_Proximity_Anisotropy_,Normalized_Q72,Extra1_Q66,Distance_To_Face_Q66,Intensity_Q66);vec4 Holo_Edges_Q44;Holo_Edge_Vertex_B44(Incident_Q36,Normal_World_N_Q29,uv,Tangent_World_Q30,Binormal_World_Q31,_Smooth_Active_Face_,Active_Q34,Holo_Edges_Q44);vec3 Vec3_Q19=vec3(Show_Selection_Q48,Distance_To_Face_Q66,Intensity_Q66);vec3 Position=Out_Position_Q47;vec2 UV=Out_UV_Q47;vec3 Tangent=Blob_Info_Q47;vec3 Binormal=Vec3_Q19;vec3 Normal=Vec3_Q27;vec4 Extra1=Extra1_Q66;vec4 Color=Holo_Edges_Q44;gl_Position=viewProjection*vec4(Position,1);vPosition=Position;vNormal=Normal;vUV=UV;vTangent=Tangent;vBinormal=Binormal;vColor=Color;vExtra1=Extra1;}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const fluentButtonVertexShader = { name, shader };\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { serializeAsColor4, serializeAsVector3, serialize, SerializationHelper } from \"core/Misc/decorators\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport { Vector3, Vector4 } from \"core/Maths/math.vector\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"core/Materials/materialHelper\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { Color3, Color4 } from \"core/Maths/math.color\";\r\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\r\nimport { Constants } from \"core/Engines/constants\";\r\n\r\nimport \"./shaders/fluentButton.fragment\";\r\nimport \"./shaders/fluentButton.vertex\";\r\n\r\n/** @internal */\r\nclass FluentButtonMaterialDefines extends MaterialDefines {\r\n    public RELATIVE_WIDTH = true;\r\n    public ENABLE_FADE = true;\r\n\r\n    constructor() {\r\n        super();\r\n        this._needNormals = true;\r\n        this._needUVs = true;\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render square buttons with fluent design\r\n * @since 5.0.0\r\n */\r\nexport class FluentButtonMaterial extends PushMaterial {\r\n    /**\r\n     * URL pointing to the texture used to define the coloring for the fluent blob effect.\r\n     */\r\n    public static BLOB_TEXTURE_URL = \"https://assets.babylonjs.com/meshes/MRTK/mrtk-fluent-button-blob.png\";\r\n\r\n    /**\r\n     * Gets or sets the width of the glowing edge, relative to the scale of the button.\r\n     * (Default is 4% of the height).\r\n     */\r\n    @serialize()\r\n    public edgeWidth = 0.04;\r\n\r\n    /**\r\n     * Gets or sets the color of the glowing edge.\r\n     */\r\n    @serializeAsColor4()\r\n    public edgeColor = new Color4(0.592157, 0.592157, 0.592157, 1.0);\r\n\r\n    /**\r\n     * Gets or sets the maximum intensity of the proximity light.\r\n     */\r\n    @serialize()\r\n    public proximityMaxIntensity = 0.45;\r\n\r\n    /**\r\n     * Gets or sets the maximum distance for the proximity light (Default is 16mm).\r\n     */\r\n    @serialize()\r\n    public proximityFarDistance = 0.16;\r\n\r\n    /**\r\n     * Gets or sets the radius of the proximity light when near to the surface.\r\n     */\r\n    @serialize()\r\n    public proximityNearRadius = 1.5;\r\n\r\n    /**\r\n     * Gets or sets the anisotropy of the proximity light.\r\n     */\r\n    @serialize()\r\n    public proximityAnisotropy = 1;\r\n\r\n    /**\r\n     * Gets or sets the amount of fuzzing in the selection focus.\r\n     */\r\n    @serialize()\r\n    public selectionFuzz = 0.5;\r\n\r\n    /**\r\n     * Gets or sets an override value to display the button as selected.\r\n     */\r\n    @serialize()\r\n    public selected = 0;\r\n\r\n    /**\r\n     * Gets or sets a value to manually fade the blob size.\r\n     */\r\n    @serialize()\r\n    public selectionFade = 0;\r\n\r\n    /**\r\n     * Gets or sets a value to manually shrink the blob size as it fades (see selectionFade).\r\n     */\r\n    @serialize()\r\n    public selectionFadeSize = 0.3;\r\n\r\n    /**\r\n     * Gets or sets the distance from the button the cursor should be for the button\r\n     * to appear selected (Default is 8cm).\r\n     */\r\n    @serialize()\r\n    public selectedDistance = 0.08;\r\n\r\n    /**\r\n     * Gets or sets the fall-off distance for the selection fade (Default is 8cm).\r\n     */\r\n    @serialize()\r\n    public selectedFadeLength = 0.08;\r\n\r\n    /**\r\n     * Gets or sets the intensity of the luminous blob (Ranges 0-1, default is 0.5).\r\n     */\r\n    @serialize()\r\n    public blobIntensity = 0.5;\r\n\r\n    /**\r\n     * The size of the blob when the pointer is at the blobFarDistance (Default is 5cm).\r\n     */\r\n    @serialize()\r\n    public blobFarSize = 0.05;\r\n\r\n    /**\r\n     * The distance at which the pointer is considered near. See [left|right]BlobNearSize. (Default is 0cm).\r\n     */\r\n    @serialize()\r\n    public blobNearDistance = 0;\r\n\r\n    /**\r\n     * The distance at which the pointer is considered far. See [left|right]BlobFarSize. (Default is 8cm).\r\n     */\r\n    @serialize()\r\n    public blobFarDistance = 0.08;\r\n\r\n    /**\r\n     * The distance over which the blob intensity fades from full to none (Default is 8cm).\r\n     */\r\n    @serialize()\r\n    public blobFadeLength = 0.08;\r\n\r\n    /**\r\n     * Gets or sets whether the blob corresponding to the left index finger is enabled.\r\n     */\r\n    @serialize()\r\n    public leftBlobEnable = true;\r\n\r\n    /**\r\n     * Gets or sets the size of the left blob when the left pointer is considered near. See blobNearDistance. (Default is 2.5cm).\r\n     */\r\n    @serialize()\r\n    public leftBlobNearSize = 0.025;\r\n\r\n    /**\r\n     * Gets or sets the progress of the pulse animation on the left blob (Ranges 0-1).\r\n     */\r\n    @serialize()\r\n    public leftBlobPulse = 0;\r\n\r\n    /**\r\n     * Gets or sets the fade factor on the left blob.\r\n     */\r\n    @serialize()\r\n    public leftBlobFade = 1;\r\n\r\n    /**\r\n     * Gets or sets the inner fade on the left blob;\r\n     */\r\n    @serialize()\r\n    public leftBlobInnerFade = 0.01;\r\n\r\n    /**\r\n     * Gets or sets whether the blob corresponding to the right index finger is enabled.\r\n     */\r\n    @serialize()\r\n    public rightBlobEnable = true;\r\n\r\n    /**\r\n     * Gets or sets the size of the right blob when the right pointer is considered near. See blobNearDistance. (Default is 2.5cm).\r\n     */\r\n    @serialize()\r\n    public rightBlobNearSize = 0.025;\r\n\r\n    /**\r\n     * Gets or sets the progress of the pulse animation on the right blob (Ranges 0-1).\r\n     */\r\n    @serialize()\r\n    public rightBlobPulse = 0;\r\n\r\n    /**\r\n     * Gets or sets the fade factor on the right blob.\r\n     */\r\n    @serialize()\r\n    public rightBlobFade = 1;\r\n\r\n    /**\r\n     * Gets or sets the inner fade on the right blob;\r\n     */\r\n    @serialize()\r\n    public rightBlobInnerFade = 0.01;\r\n\r\n    /**\r\n     * Gets or sets the direction of the active face before the world transform is applied.\r\n     * This should almost always be set to -z.\r\n     */\r\n    @serializeAsVector3()\r\n    public activeFaceDir = new Vector3(0, 0, -1);\r\n\r\n    /**\r\n     * Gets or sets the button's up direction before the world transform is applied.\r\n     * This should almost always be set to +y.\r\n     */\r\n    @serializeAsVector3()\r\n    public activeFaceUp = new Vector3(0, 1, 0);\r\n\r\n    /**\r\n     * Gets or sets whether the edge fade effect is enabled.\r\n     */\r\n    @serialize()\r\n    public enableFade = true;\r\n\r\n    /**\r\n     * Gets or sets a value corresponding to the width of the edge fade effect (Default 1.5).\r\n     */\r\n    @serialize()\r\n    public fadeWidth = 1.5;\r\n\r\n    /**\r\n     * Gets or sets whether the active face is smoothly interpolated.\r\n     */\r\n    @serialize()\r\n    public smoothActiveFace = true;\r\n\r\n    /**\r\n     * Gets or sets whether the frame of the fluent button model is visible.\r\n     * This is usually only enabled for debugging purposes.\r\n     */\r\n    @serialize()\r\n    public showFrame = false;\r\n\r\n    /**\r\n     * Gets or sets whether the blob color texture is used for the proximity\r\n     * light effect. This is usually only disabled for debugging purposes.\r\n     */\r\n    @serialize()\r\n    public useBlobTexture = true;\r\n\r\n    /**\r\n     * Gets or sets the world-space position of the tip of the left index finger.\r\n     */\r\n    @serializeAsVector3()\r\n    public globalLeftIndexTipPosition = Vector3.Zero();\r\n\r\n    /**\r\n     * Gets or sets the world-space position of the tip of the right index finger.\r\n     */\r\n    @serializeAsVector3()\r\n    public globalRightIndexTipPosition = Vector3.Zero();\r\n\r\n    private _blobTexture: Texture;\r\n\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n        this.alphaMode = Constants.ALPHA_ADD;\r\n        this.disableDepthWrite = true;\r\n        this.backFaceCulling = false;\r\n\r\n        this._blobTexture = new Texture(FluentButtonMaterial.BLOB_TEXTURE_URL, this.getScene(), true, false, Texture.NEAREST_SAMPLINGMODE);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new FluentButtonMaterialDefines();\r\n        }\r\n\r\n        const defines = <FluentButtonMaterialDefines>subMesh.materialDefines;\r\n        const scene = this.getScene();\r\n\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, false);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\r\n\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            if (defines.TANGENT) {\r\n                attribs.push(VertexBuffer.TangentKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            const shaderName = \"fluentButton\";\r\n            const join = defines.toString();\r\n\r\n            const uniforms = [\r\n                \"world\",\r\n                \"viewProjection\",\r\n                \"cameraPosition\",\r\n\r\n                \"_Edge_Width_\",\r\n                \"_Edge_Color_\",\r\n                \"_Relative_Width_\",\r\n                \"_Proximity_Max_Intensity_\",\r\n                \"_Proximity_Far_Distance_\",\r\n                \"_Proximity_Near_Radius_\",\r\n                \"_Proximity_Anisotropy_\",\r\n                \"_Selection_Fuzz_\",\r\n                \"_Selected_\",\r\n                \"_Selection_Fade_\",\r\n                \"_Selection_Fade_Size_\",\r\n                \"_Selected_Distance_\",\r\n                \"_Selected_Fade_Length_\",\r\n                \"_Blob_Enable_\",\r\n                \"_Blob_Position_\",\r\n                \"_Blob_Intensity_\",\r\n                \"_Blob_Near_Size_\",\r\n                \"_Blob_Far_Size_\",\r\n                \"_Blob_Near_Distance_\",\r\n                \"_Blob_Far_Distance_\",\r\n                \"_Blob_Fade_Length_\",\r\n                \"_Blob_Inner_Fade_\",\r\n                \"_Blob_Pulse_\",\r\n                \"_Blob_Fade_\",\r\n                \"_Blob_Texture_\",\r\n                \"_Blob_Enable_2_\",\r\n                \"_Blob_Position_2_\",\r\n                \"_Blob_Near_Size_2_\",\r\n                \"_Blob_Inner_Fade_2_\",\r\n                \"_Blob_Pulse_2_\",\r\n                \"_Blob_Fade_2_\",\r\n                \"_Active_Face_Dir_\",\r\n                \"_Active_Face_Up_\",\r\n                \"_Enable_Fade_\",\r\n                \"_Fade_Width_\",\r\n                \"_Smooth_Active_Face_\",\r\n                \"_Show_Frame_\",\r\n                \"_Use_Blob_Texture_\",\r\n\r\n                \"Use_Global_Left_Index\",\r\n                \"Use_Global_Right_Index\",\r\n                \"Global_Left_Index_Tip_Position\",\r\n                \"Global_Right_Index_Tip_Position\",\r\n                \"Global_Left_Thumb_Tip_Position\",\r\n                \"Global_Right_Thumb_Tip_Position\",\r\n                \"Global_Left_Index_Tip_Proximity\",\r\n                \"Global_Right_Index_Tip_Proximity\",\r\n            ];\r\n            const samplers: string[] = [\"_Blob_Texture_\"];\r\n            const uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4,\r\n            });\r\n\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: { maxSimultaneousLights: 4 },\r\n                    },\r\n                    engine\r\n                ),\r\n                defines,\r\n                this._materialContext\r\n            );\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const scene = this.getScene();\r\n\r\n        const defines = <FluentButtonMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n        this._activeEffect.setVector3(\"cameraPosition\", scene.activeCamera!.position);\r\n\r\n        // \"Blob Texture\"\r\n        this._activeEffect.setTexture(\"_Blob_Texture_\", this._blobTexture);\r\n\r\n        // \"Wireframe\"\r\n        this._activeEffect.setFloat(\"_Edge_Width_\", this.edgeWidth);\r\n        this._activeEffect.setColor4(\"_Edge_Color_\", new Color3(this.edgeColor.r, this.edgeColor.g, this.edgeColor.b), this.edgeColor.a);\r\n        //define _Relative_Width_ true;\r\n\r\n        // \"Proximity\"\r\n        this._activeEffect.setFloat(\"_Proximity_Max_Intensity_\", this.proximityMaxIntensity);\r\n        this._activeEffect.setFloat(\"_Proximity_Far_Distance_\", this.proximityFarDistance);\r\n        this._activeEffect.setFloat(\"_Proximity_Near_Radius_\", this.proximityNearRadius);\r\n        this._activeEffect.setFloat(\"_Proximity_Anisotropy_\", this.proximityAnisotropy);\r\n\r\n        // \"Selection\"\r\n        this._activeEffect.setFloat(\"_Selection_Fuzz_\", this.selectionFuzz);\r\n        this._activeEffect.setFloat(\"_Selected_\", this.selected);\r\n        this._activeEffect.setFloat(\"_Selection_Fade_\", this.selectionFade);\r\n        this._activeEffect.setFloat(\"_Selection_Fade_Size_\", this.selectionFadeSize);\r\n        this._activeEffect.setFloat(\"_Selected_Distance_\", this.selectedDistance);\r\n        this._activeEffect.setFloat(\"_Selected_Fade_Length_\", this.selectedFadeLength);\r\n\r\n        // \"Blob\"\r\n        this._activeEffect.setFloat(\"_Blob_Enable_\", this.leftBlobEnable ? 1.0 : 0.0);\r\n        this._activeEffect.setFloat(\"_Blob_Intensity_\", this.blobIntensity);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Size_\", this.leftBlobNearSize);\r\n        this._activeEffect.setFloat(\"_Blob_Far_Size_\", this.blobFarSize);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Distance_\", this.blobNearDistance);\r\n        this._activeEffect.setFloat(\"_Blob_Far_Distance_\", this.blobFarDistance);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_Length_\", this.blobFadeLength);\r\n        this._activeEffect.setFloat(\"_Blob_Inner_Fade_\", this.leftBlobInnerFade);\r\n        this._activeEffect.setFloat(\"_Blob_Pulse_\", this.leftBlobPulse);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_\", this.leftBlobFade);\r\n\r\n        // \"Blob 2\"\r\n        this._activeEffect.setFloat(\"_Blob_Enable_2_\", this.rightBlobEnable ? 1.0 : 0.0);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Size_2_\", this.rightBlobNearSize);\r\n        this._activeEffect.setFloat(\"_Blob_Inner_Fade_2_\", this.rightBlobInnerFade);\r\n        this._activeEffect.setFloat(\"_Blob_Pulse_2_\", this.rightBlobPulse);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_2_\", this.rightBlobFade);\r\n\r\n        // \"Active Face\"\r\n        this._activeEffect.setVector3(\"_Active_Face_Dir_\", this.activeFaceDir);\r\n        this._activeEffect.setVector3(\"_Active_Face_Up_\", this.activeFaceUp);\r\n\r\n        // \"Hololens Edge Fade\"\r\n        //define _Enable_Fade_ true;\r\n        this._activeEffect.setFloat(\"_Fade_Width_\", this.fadeWidth);\r\n        this._activeEffect.setFloat(\"_Smooth_Active_Face_\", this.smoothActiveFace ? 1.0 : 0.0);\r\n\r\n        // \"Debug\"\r\n        this._activeEffect.setFloat(\"_Show_Frame_\", this.showFrame ? 1.0 : 0.0);\r\n        this._activeEffect.setFloat(\"_Use_Blob_Texture_\", this.useBlobTexture ? 1.0 : 0.0);\r\n\r\n        // Global inputs\r\n        this._activeEffect.setFloat(\"Use_Global_Left_Index\", 1.0);\r\n        this._activeEffect.setFloat(\"Use_Global_Right_Index\", 1.0);\r\n\r\n        this._activeEffect.setVector4(\r\n            \"Global_Left_Index_Tip_Position\",\r\n            new Vector4(this.globalLeftIndexTipPosition.x, this.globalLeftIndexTipPosition.y, this.globalLeftIndexTipPosition.z, 1.0)\r\n        );\r\n        this._activeEffect.setVector4(\r\n            \"Global_Right_Index_Tip_Position\",\r\n            new Vector4(this.globalRightIndexTipPosition.x, this.globalRightIndexTipPosition.y, this.globalRightIndexTipPosition.z, 1.0)\r\n        );\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    /**\r\n     * Get the list of animatables in the material.\r\n     * @returns the list of animatables object used in the material\r\n     */\r\n    public getAnimatables(): IAnimatable[] {\r\n        return [];\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): FluentButtonMaterial {\r\n        return SerializationHelper.Clone(() => new FluentButtonMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n        serializationObject.customType = \"BABYLON.FluentButtonMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FluentButtonMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): FluentButtonMaterial {\r\n        return SerializationHelper.Parse(() => new FluentButtonMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.FluentButtonMaterial\", FluentButtonMaterial);\r\n","// Assumptions: absolute position of button mesh is inside the mesh\r\n\r\nimport { Vector3, TmpVectors } from \"core/Maths/math.vector\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport { PointerEventTypes } from \"core/Events/pointerEvents\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\nimport { Observable } from \"core/Misc/observable\";\r\n\r\nimport { Button3D } from \"./button3D\";\r\n\r\n/**\r\n * Class used to create a touchable button in 3D\r\n */\r\nexport class TouchButton3D extends Button3D {\r\n    private _collisionMesh: Mesh;\r\n\r\n    // 'front' direction. If Vector3.Zero, there is no front and all directions of interaction are accepted\r\n    private _collidableFrontDirection: Vector3;\r\n    private _isNearPressed = false;\r\n    private _interactionSurfaceHeight = 0;\r\n\r\n    private _isToggleButton = false;\r\n    private _toggleState = false;\r\n    private _toggleButtonCallback = () => {\r\n        this._onToggle(!this._toggleState);\r\n    };\r\n\r\n    /**\r\n     * An event triggered when the button is toggled. Only fired if 'isToggleButton' is true\r\n     */\r\n    public onToggleObservable = new Observable<boolean>();\r\n\r\n    /**\r\n     * Creates a new touchable button\r\n     * @param name defines the control name\r\n     * @param collisionMesh mesh to track collisions with\r\n     */\r\n    constructor(name?: string, collisionMesh?: Mesh) {\r\n        super(name);\r\n\r\n        this.collidableFrontDirection = Vector3.Zero();\r\n\r\n        if (collisionMesh) {\r\n            this.collisionMesh = collisionMesh;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Whether the current interaction is caused by near interaction or not\r\n     */\r\n    public get isActiveNearInteraction() {\r\n        return this._isNearPressed;\r\n    }\r\n\r\n    /**\r\n     * Sets the front-facing direction of the button. Pass in Vector3.Zero to allow interactions from any direction\r\n     * @param frontWorldDir the forward direction of the button\r\n     */\r\n    public set collidableFrontDirection(frontWorldDir: Vector3) {\r\n        this._collidableFrontDirection = frontWorldDir.normalize();\r\n\r\n        if (this._collisionMesh) {\r\n            const invert = TmpVectors.Matrix[0];\r\n\r\n            invert.copyFrom(this._collisionMesh.getWorldMatrix());\r\n            invert.invert();\r\n            Vector3.TransformNormalToRef(this._collidableFrontDirection, invert, this._collidableFrontDirection);\r\n            this._collidableFrontDirection.normalize();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the front-facing direction of the button, or Vector3.Zero if there is no 'front'\r\n     */\r\n    public get collidableFrontDirection() {\r\n        if (this._collisionMesh) {\r\n            // Update the front direction to reflect any rotations of the collision mesh\r\n            const transformedDirection = TmpVectors.Vector3[0];\r\n            Vector3.TransformNormalToRef(this._collidableFrontDirection, this._collisionMesh.getWorldMatrix(), transformedDirection);\r\n\r\n            return transformedDirection.normalize();\r\n        }\r\n\r\n        return this._collidableFrontDirection;\r\n    }\r\n\r\n    /**\r\n     * Sets the mesh used for testing input collision\r\n     * @param collisionMesh the new collision mesh for the button\r\n     */\r\n    public set collisionMesh(collisionMesh: Mesh) {\r\n        // Remove the GUI3DManager's data from the previous collision mesh's reserved data store, and reset interactability\r\n        if (this._collisionMesh) {\r\n            this._collisionMesh.isNearPickable = false;\r\n            if (this._collisionMesh.reservedDataStore?.GUI3D) {\r\n                this._collisionMesh.reservedDataStore.GUI3D = {};\r\n            }\r\n\r\n            this._collisionMesh.getChildMeshes().forEach((mesh) => {\r\n                mesh.isNearPickable = false;\r\n                if (mesh.reservedDataStore?.GUI3D) {\r\n                    mesh.reservedDataStore.GUI3D = {};\r\n                }\r\n            });\r\n        }\r\n\r\n        this._collisionMesh = collisionMesh;\r\n        this._injectGUI3DReservedDataStore(this._collisionMesh).control = this;\r\n        this._collisionMesh.isNearPickable = true;\r\n\r\n        this._collisionMesh.getChildMeshes().forEach((mesh) => {\r\n            this._injectGUI3DReservedDataStore(mesh).control = this;\r\n            mesh.isNearPickable = true;\r\n        });\r\n        this.collidableFrontDirection = collisionMesh.forward;\r\n    }\r\n\r\n    /**\r\n     * Setter for if this TouchButton3D should be treated as a toggle button\r\n     * @param value If this TouchHolographicButton should act like a toggle button\r\n     */\r\n    public set isToggleButton(value: boolean) {\r\n        if (value === this._isToggleButton) {\r\n            return;\r\n        }\r\n\r\n        this._isToggleButton = value;\r\n\r\n        if (value) {\r\n            this.onPointerUpObservable.add(this._toggleButtonCallback);\r\n        } else {\r\n            this.onPointerUpObservable.removeCallback(this._toggleButtonCallback);\r\n\r\n            // Safety check, reset the button if it's toggled on but no longer a toggle button\r\n            if (this._toggleState) {\r\n                this._onToggle(false);\r\n            }\r\n        }\r\n    }\r\n    public get isToggleButton() {\r\n        return this._isToggleButton;\r\n    }\r\n\r\n    /**\r\n     * A public entrypoint to set the toggle state of the TouchHolographicButton. Only works if 'isToggleButton' is true\r\n     * @param newState The new state to set the TouchHolographicButton's toggle state to\r\n     */\r\n    public set isToggled(newState: boolean) {\r\n        if (this._isToggleButton && this._toggleState !== newState) {\r\n            this._onToggle(newState);\r\n        }\r\n    }\r\n    public get isToggled() {\r\n        return this._toggleState;\r\n    }\r\n\r\n    protected _onToggle(newState: boolean) {\r\n        this._toggleState = newState;\r\n        this.onToggleObservable.notifyObservers(newState);\r\n    }\r\n\r\n    // Returns true if the collidable is in front of the button, or if the button has no front direction\r\n    private _isInteractionInFrontOfButton(collidablePos: Vector3) {\r\n        return this._getInteractionHeight(collidablePos, this._collisionMesh.getAbsolutePosition()) > 0;\r\n    }\r\n\r\n    /**\r\n     * Get the height of the touchPoint from the collidable part of the button\r\n     * @param touchPoint the point to compare to the button, in absolute position\r\n     * @returns the depth of the touch point into the front of the button\r\n     */\r\n    public getPressDepth(touchPoint: Vector3) {\r\n        if (!this._isNearPressed) {\r\n            return 0;\r\n        }\r\n        const interactionHeight = this._getInteractionHeight(touchPoint, this._collisionMesh.getAbsolutePosition());\r\n        return this._interactionSurfaceHeight - interactionHeight;\r\n    }\r\n\r\n    // Returns true if the collidable is in front of the button, or if the button has no front direction\r\n    protected _getInteractionHeight(interactionPos: Vector3, basePos: Vector3) {\r\n        const frontDir = this.collidableFrontDirection;\r\n        if (frontDir.length() === 0) {\r\n            // The button has no front, just return the distance to the base\r\n            return Vector3.Distance(interactionPos, basePos);\r\n        }\r\n        const d = Vector3.Dot(basePos, frontDir);\r\n        const abc = Vector3.Dot(interactionPos, frontDir);\r\n\r\n        return abc - d;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _generatePointerEventType(providedType: number, nearMeshPosition: Vector3, activeInteractionCount: number): number {\r\n        if (providedType === PointerEventTypes.POINTERDOWN || providedType === PointerEventTypes.POINTERMOVE) {\r\n            if (!this._isInteractionInFrontOfButton(nearMeshPosition)) {\r\n                // Near interaction mesh is behind the button, don't send a pointer down\r\n                return PointerEventTypes.POINTERMOVE;\r\n            } else {\r\n                this._isNearPressed = true;\r\n                this._interactionSurfaceHeight = this._getInteractionHeight(nearMeshPosition, this._collisionMesh.getAbsolutePosition());\r\n            }\r\n        }\r\n        if (providedType === PointerEventTypes.POINTERUP) {\r\n            if (activeInteractionCount == 0) {\r\n                // We get the release for the down we swallowed earlier, swallow as well\r\n                return PointerEventTypes.POINTERMOVE;\r\n            } else {\r\n                this._isNearPressed = false;\r\n            }\r\n        }\r\n\r\n        return providedType;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"TouchButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        return super._createNode(scene);\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        // Clean up toggle observables\r\n        this.onPointerUpObservable.removeCallback(this._toggleButtonCallback);\r\n        this.onToggleObservable.clear();\r\n\r\n        if (this._collisionMesh) {\r\n            this._collisionMesh.dispose();\r\n        }\r\n    }\r\n}\r\n","import type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport { StandardMaterial } from \"core/Materials/standardMaterial\";\r\nimport { TransformNode } from \"core/Meshes/transformNode\";\r\nimport { Mesh } from \"core/Meshes/mesh\";\r\nimport { CreatePlane } from \"core/Meshes/Builders/planeBuilder\";\r\nimport { CreateBox } from \"core/Meshes/Builders/boxBuilder\";\r\nimport { FadeInOutBehavior } from \"core/Behaviors/Meshes/fadeInOutBehavior\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { FluentMaterial } from \"../materials/fluent/fluentMaterial\";\r\nimport { FluentButtonMaterial } from \"../materials/fluentButton/fluentButtonMaterial\";\r\nimport { StackPanel } from \"../../2D/controls/stackPanel\";\r\nimport { Image } from \"../../2D/controls/image\";\r\nimport { TextBlock } from \"../../2D/controls/textBlock\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport type { Control3D } from \"./control3D\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { TouchButton3D } from \"./touchButton3D\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { SceneLoader } from \"core/Loading/sceneLoader\";\r\nimport { IsDocumentAvailable } from \"core/Misc/domManagement\";\r\nimport { Scalar } from \"core/Maths/math.scalar\";\r\n\r\n/**\r\n * Class used to create a holographic button in 3D\r\n * @since 5.0.0\r\n */\r\nexport class TouchHolographicButton extends TouchButton3D {\r\n    /**\r\n     * Base Url for the button model.\r\n     */\r\n    public static MODEL_BASE_URL: string = \"https://assets.babylonjs.com/meshes/MRTK/\";\r\n    /**\r\n     * File name for the button model.\r\n     */\r\n    public static MODEL_FILENAME: string = \"mrtk-fluent-button.glb\";\r\n\r\n    private _backPlate: Mesh;\r\n    private _textPlate: Mesh;\r\n    private _frontPlate: AbstractMesh;\r\n    private _text: string;\r\n    private _imageUrl: string;\r\n    private _shareMaterials = true;\r\n    private _isBackplateVisible = true;\r\n    private _frontMaterial: FluentButtonMaterial;\r\n    private _backMaterial: FluentMaterial;\r\n    private _plateMaterial: StandardMaterial;\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<Vector3>>>;\r\n    private _pointerHoverObserver: Nullable<Observer<Vector3>>;\r\n    private _frontPlateDepth = 0.5;\r\n    private _backPlateDepth = 0.04;\r\n    private _backplateColor = new Color3(0.08, 0.15, 0.55);\r\n    private _backplateToggledColor = new Color3(0.25, 0.4, 0.95);\r\n\r\n    // Tooltip\r\n    private _tooltipFade: Nullable<FadeInOutBehavior>;\r\n    private _tooltipTextBlock: Nullable<TextBlock>;\r\n    private _tooltipTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _tooltipMesh: Nullable<Mesh>;\r\n    private _tooltipHoverObserver: Nullable<Observer<Control3D>>;\r\n    private _tooltipOutObserver: Nullable<Observer<Control3D>>;\r\n\r\n    private _disposeTooltip() {\r\n        this._tooltipFade = null;\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.dispose();\r\n        }\r\n        if (this._tooltipTexture) {\r\n            this._tooltipTexture.dispose();\r\n        }\r\n        if (this._tooltipMesh) {\r\n            this._tooltipMesh.dispose();\r\n        }\r\n        this.onPointerEnterObservable.remove(this._tooltipHoverObserver);\r\n        this.onPointerOutObservable.remove(this._tooltipOutObserver);\r\n    }\r\n\r\n    /**\r\n     * Rendering ground id of all the mesh in the button\r\n     */\r\n    public set renderingGroupId(id: number) {\r\n        this._backPlate.renderingGroupId = id;\r\n        this._textPlate.renderingGroupId = id;\r\n        this._frontPlate.renderingGroupId = id;\r\n\r\n        if (this._tooltipMesh) {\r\n            this._tooltipMesh.renderingGroupId = id;\r\n        }\r\n    }\r\n    public get renderingGroupId(): number {\r\n        return this._backPlate.renderingGroupId;\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh used to render this control\r\n     */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        return this._backPlate as AbstractMesh;\r\n    }\r\n\r\n    /**\r\n     * Text to be displayed on the tooltip shown when hovering on the button. When set to null tooltip is disabled. (Default: null)\r\n     */\r\n    public set tooltipText(text: Nullable<string>) {\r\n        if (!text) {\r\n            this._disposeTooltip();\r\n            return;\r\n        }\r\n        if (!this._tooltipFade) {\r\n            const rightHandedScene = this._backPlate._scene.useRightHandedSystem;\r\n            // Create tooltip with mesh and text\r\n            this._tooltipMesh = CreatePlane(\"\", { size: 1 }, this._backPlate._scene);\r\n            const tooltipBackground = CreatePlane(\"\", { size: 1, sideOrientation: Mesh.DOUBLESIDE }, this._backPlate._scene);\r\n            const mat = new StandardMaterial(\"\", this._backPlate._scene);\r\n            mat.diffuseColor = Color3.FromHexString(\"#212121\");\r\n            tooltipBackground.material = mat;\r\n            tooltipBackground.isPickable = false;\r\n            this._tooltipMesh.addChild(tooltipBackground);\r\n            tooltipBackground.position = Vector3.Forward(rightHandedScene).scale(0.05);\r\n            this._tooltipMesh.scaling.y = 1 / 3;\r\n            this._tooltipMesh.position = Vector3.Up().scale(0.7).add(Vector3.Forward(rightHandedScene).scale(-0.15));\r\n            this._tooltipMesh.isPickable = false;\r\n            this._tooltipMesh.parent = this._backPlate;\r\n\r\n            // Create text texture for the tooltip\r\n            this._tooltipTexture = AdvancedDynamicTexture.CreateForMesh(this._tooltipMesh);\r\n            this._tooltipTextBlock = new TextBlock();\r\n            this._tooltipTextBlock.scaleY = 3;\r\n            this._tooltipTextBlock.color = \"white\";\r\n            this._tooltipTextBlock.fontSize = 130;\r\n            this._tooltipTexture.addControl(this._tooltipTextBlock);\r\n\r\n            // Add hover action to tooltip\r\n            this._tooltipFade = new FadeInOutBehavior();\r\n            this._tooltipFade.delay = 500;\r\n            this._tooltipMesh.addBehavior(this._tooltipFade);\r\n            this._tooltipHoverObserver = this.onPointerEnterObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(true);\r\n                }\r\n            });\r\n            this._tooltipOutObserver = this.onPointerOutObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(false);\r\n                }\r\n            });\r\n        }\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.text = text;\r\n        }\r\n    }\r\n\r\n    public get tooltipText() {\r\n        if (this._tooltipTextBlock) {\r\n            return this._tooltipTextBlock.text;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text for the button\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n\r\n        this._text = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image url for the button\r\n     */\r\n    public get imageUrl(): string {\r\n        return this._imageUrl;\r\n    }\r\n\r\n    public set imageUrl(value: string) {\r\n        if (this._imageUrl === value) {\r\n            return;\r\n        }\r\n\r\n        this._imageUrl = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets the back material used by this button\r\n     */\r\n    public get backMaterial(): FluentMaterial {\r\n        return this._backMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the front material used by this button\r\n     */\r\n    public get frontMaterial(): FluentButtonMaterial {\r\n        return this._frontMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the plate material used by this button\r\n     */\r\n    public get plateMaterial(): StandardMaterial {\r\n        return this._plateMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this button shares its material with other HolographicButtons\r\n     */\r\n    public get shareMaterials(): boolean {\r\n        return this._shareMaterials;\r\n    }\r\n\r\n    /**\r\n     * Sets whether the backplate is visible or hidden. Hiding the backplate is not recommended without some sort of replacement\r\n     */\r\n    public set isBackplateVisible(isVisible: boolean) {\r\n        if (this.mesh && !!this._backMaterial) {\r\n            if (isVisible && !this._isBackplateVisible) {\r\n                this._backPlate.visibility = 1;\r\n            } else if (!isVisible && this._isBackplateVisible) {\r\n                this._backPlate.visibility = 0;\r\n            }\r\n        }\r\n\r\n        this._isBackplateVisible = isVisible;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     * @param shareMaterials\r\n     */\r\n    constructor(name?: string, shareMaterials = true) {\r\n        super(name);\r\n\r\n        this._shareMaterials = shareMaterials;\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            this._frontMaterial.leftBlobEnable = true;\r\n            this._frontMaterial.rightBlobEnable = true;\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            this._frontMaterial.leftBlobEnable = false;\r\n            this._frontMaterial.rightBlobEnable = false;\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (this._frontPlate && !this.isActiveNearInteraction) {\r\n                this._frontPlate.scaling.z = this._frontPlateDepth * 0.2;\r\n                this._frontPlate.position = Vector3.Forward(this._frontPlate._scene.useRightHandedSystem).scale((this._frontPlateDepth - 0.2 * this._frontPlateDepth) / 2);\r\n                this._textPlate.position = Vector3.Forward(this._textPlate._scene.useRightHandedSystem).scale(-(this._backPlateDepth + 0.2 * this._frontPlateDepth) / 2);\r\n            }\r\n        };\r\n        this.pointerUpAnimation = () => {\r\n            if (this._frontPlate) {\r\n                this._frontPlate.scaling.z = this._frontPlateDepth;\r\n                this._frontPlate.position = Vector3.Forward(this._frontPlate._scene.useRightHandedSystem).scale((this._frontPlateDepth - this._frontPlateDepth) / 2);\r\n                this._textPlate.position = Vector3.Forward(this._textPlate._scene.useRightHandedSystem).scale(-(this._backPlateDepth + this._frontPlateDepth) / 2);\r\n            }\r\n        };\r\n\r\n        this.onPointerMoveObservable.add((position) => {\r\n            if (this._frontPlate && this.isActiveNearInteraction) {\r\n                const scale = Vector3.Zero();\r\n                if (this._backPlate.getWorldMatrix().decompose(scale, undefined, undefined)) {\r\n                    let interactionHeight = this._getInteractionHeight(position, this._backPlate.getAbsolutePosition()) / scale.z;\r\n                    interactionHeight = Scalar.Clamp(interactionHeight - this._backPlateDepth / 2, 0.2 * this._frontPlateDepth, this._frontPlateDepth);\r\n\r\n                    this._frontPlate.scaling.z = interactionHeight;\r\n                    this._frontPlate.position = Vector3.Forward(this._frontPlate._scene.useRightHandedSystem).scale((this._frontPlateDepth - interactionHeight) / 2);\r\n                    this._textPlate.position = Vector3.Forward(this._textPlate._scene.useRightHandedSystem).scale(-(this._backPlateDepth + interactionHeight) / 2);\r\n                }\r\n            }\r\n        });\r\n\r\n        this._pointerHoverObserver = this.onPointerMoveObservable.add((hoverPosition: Vector3) => {\r\n            this._frontMaterial.globalLeftIndexTipPosition = hoverPosition;\r\n        });\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"TouchHolographicButton\";\r\n    }\r\n\r\n    private _rebuildContent(): void {\r\n        this._disposeFacadeTexture();\r\n\r\n        const panel = new StackPanel();\r\n        panel.isVertical = true;\r\n\r\n        if (IsDocumentAvailable() && !!document.createElement) {\r\n            if (this._imageUrl) {\r\n                const image = new Image();\r\n                image.source = this._imageUrl;\r\n                image.paddingTop = \"40px\";\r\n                image.height = \"180px\";\r\n                image.width = \"100px\";\r\n                image.paddingBottom = \"40px\";\r\n                panel.addControl(image);\r\n            }\r\n        }\r\n\r\n        if (this._text) {\r\n            const text = new TextBlock();\r\n            text.text = this._text;\r\n            text.color = \"white\";\r\n            text.height = \"30px\";\r\n            text.fontSize = 24;\r\n            panel.addControl(text);\r\n        }\r\n\r\n        this.content = panel;\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this.name = this.name ?? \"TouchHolographicButton\";\r\n        const collisionMesh = CreateBox(\r\n            `${this.name}_collisionMesh`,\r\n            {\r\n                width: 1.0,\r\n                height: 1.0,\r\n                depth: this._frontPlateDepth,\r\n            },\r\n            scene\r\n        );\r\n        collisionMesh.isPickable = true;\r\n        collisionMesh.isNearPickable = true;\r\n        collisionMesh.visibility = 0;\r\n        collisionMesh.position = Vector3.Forward(scene.useRightHandedSystem).scale(-this._frontPlateDepth / 2);\r\n\r\n        SceneLoader.ImportMeshAsync(undefined, TouchHolographicButton.MODEL_BASE_URL, TouchHolographicButton.MODEL_FILENAME, scene).then((result) => {\r\n            const alphaMesh = CreateBox(\r\n                \"${this.name}_alphaMesh\",\r\n                {\r\n                    width: 1.0,\r\n                    height: 1.0,\r\n                    depth: 1.0,\r\n                },\r\n                scene\r\n            );\r\n            alphaMesh.isPickable = false;\r\n            alphaMesh.material = new StandardMaterial(\"${this.name}_alphaMesh_material\", scene);\r\n            alphaMesh.material.alpha = 0.15;\r\n\r\n            const importedFrontPlate = result.meshes[1];\r\n            importedFrontPlate.name = `${this.name}_frontPlate`;\r\n            importedFrontPlate.isPickable = false;\r\n            importedFrontPlate.scaling.z = this._frontPlateDepth;\r\n            alphaMesh.parent = importedFrontPlate;\r\n            importedFrontPlate.parent = collisionMesh;\r\n            if (this._frontMaterial) {\r\n                importedFrontPlate.material = this._frontMaterial;\r\n            }\r\n            this._frontPlate = importedFrontPlate;\r\n        });\r\n\r\n        this._backPlate = CreateBox(\r\n            `${this.name}_backPlate`,\r\n            {\r\n                width: 1.0,\r\n                height: 1.0,\r\n                depth: this._backPlateDepth,\r\n            },\r\n            scene\r\n        );\r\n\r\n        this._backPlate.position = Vector3.Forward(scene.useRightHandedSystem).scale(this._backPlateDepth / 2);\r\n        this._backPlate.isPickable = false;\r\n\r\n        this._textPlate = <Mesh>super._createNode(scene);\r\n        this._textPlate.name = `${this.name}_textPlate`;\r\n        this._textPlate.isPickable = false;\r\n        this._textPlate.position = Vector3.Forward(scene.useRightHandedSystem).scale(-this._frontPlateDepth / 2);\r\n\r\n        this._backPlate.addChild(collisionMesh);\r\n        this._backPlate.addChild(this._textPlate);\r\n\r\n        const tn = new TransformNode(`{this.name}_root`, scene);\r\n        this._backPlate.setParent(tn);\r\n\r\n        this.collisionMesh = collisionMesh;\r\n        this.collidableFrontDirection = this._backPlate.forward.negate(); // Mesh is facing the wrong way\r\n\r\n        return tn;\r\n    }\r\n\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        this._plateMaterial.emissiveTexture = facadeTexture;\r\n        this._plateMaterial.opacityTexture = facadeTexture;\r\n        this._plateMaterial.diffuseColor = new Color3(0.4, 0.4, 0.4);\r\n    }\r\n\r\n    private _createBackMaterial(mesh: Mesh) {\r\n        this._backMaterial = new FluentMaterial(this.name + \"backPlateMaterial\", mesh.getScene());\r\n        this._backMaterial.albedoColor = this._backplateColor;\r\n        this._backMaterial.renderBorders = true;\r\n        this._backMaterial.renderHoverLight = false;\r\n    }\r\n\r\n    private _createFrontMaterial(mesh: Mesh) {\r\n        this._frontMaterial = new FluentButtonMaterial(this.name + \"Front Material\", mesh.getScene());\r\n    }\r\n\r\n    private _createPlateMaterial(mesh: Mesh) {\r\n        this._plateMaterial = new StandardMaterial(this.name + \"Plate Material\", mesh.getScene());\r\n        this._plateMaterial.specularColor = Color3.Black();\r\n    }\r\n\r\n    protected _onToggle(newState: boolean) {\r\n        if (this._backMaterial) {\r\n            if (newState) {\r\n                this._backMaterial.albedoColor = this._backplateToggledColor;\r\n            } else {\r\n                this._backMaterial.albedoColor = this._backplateColor;\r\n            }\r\n        }\r\n\r\n        super._onToggle(newState);\r\n    }\r\n\r\n    protected _affectMaterial(mesh: Mesh) {\r\n        if (this._shareMaterials) {\r\n            // Back\r\n            if (!this._host._touchSharedMaterials[\"backFluentMaterial\"]) {\r\n                this._createBackMaterial(mesh);\r\n                this._host._touchSharedMaterials[\"backFluentMaterial\"] = this._backMaterial;\r\n            } else {\r\n                this._backMaterial = this._host._touchSharedMaterials[\"backFluentMaterial\"] as FluentMaterial;\r\n            }\r\n\r\n            // Front\r\n            if (!this._host._touchSharedMaterials[\"frontFluentMaterial\"]) {\r\n                this._createFrontMaterial(mesh);\r\n                this._host._touchSharedMaterials[\"frontFluentMaterial\"] = this._frontMaterial;\r\n            } else {\r\n                this._frontMaterial = this._host._touchSharedMaterials[\"frontFluentMaterial\"] as FluentButtonMaterial;\r\n            }\r\n        } else {\r\n            this._createBackMaterial(mesh);\r\n            this._createFrontMaterial(mesh);\r\n        }\r\n\r\n        this._createPlateMaterial(mesh);\r\n        this._backPlate.material = this._backMaterial;\r\n        this._textPlate.material = this._plateMaterial;\r\n\r\n        if (!this._isBackplateVisible) {\r\n            this._backPlate.visibility = 0;\r\n        }\r\n        if (this._frontPlate) {\r\n            this._frontPlate.material = this._frontMaterial;\r\n        }\r\n\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose(); // will dispose main mesh ie. back plate\r\n\r\n        this._disposeTooltip();\r\n        this.onPointerMoveObservable.remove(this._pointerHoverObserver);\r\n\r\n        if (!this.shareMaterials) {\r\n            this._backMaterial.dispose();\r\n            this._frontMaterial.dispose();\r\n            this._plateMaterial.dispose();\r\n\r\n            if (this._pickedPointObserver) {\r\n                this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n                this._pickedPointObserver = null;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import type { Behavior } from \"core/Behaviors/behavior\";\r\nimport { FollowBehavior } from \"core/Behaviors/Meshes/followBehavior\";\r\nimport { SixDofDragBehavior } from \"core/Behaviors/Meshes/sixDofDragBehavior\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport type { Nullable } from \"core/types\";\r\nimport { SurfaceMagnetismBehavior } from \"core/Behaviors/Meshes/surfaceMagnetismBehavior\";\r\nimport type { Vector3 } from \"core/Maths/math.vector\";\r\nimport type { PickingInfo } from \"core/Collisions/pickingInfo\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\n\r\n/**\r\n * Default behavior for 3D UI elements.\r\n * Handles a FollowBehavior, SixDofBehavior and SurfaceMagnetismBehavior\r\n * @since 5.0.0\r\n */\r\nexport class DefaultBehavior implements Behavior<Mesh> {\r\n    private _scene: Scene;\r\n    private _followBehavior: FollowBehavior;\r\n    private _sixDofDragBehavior: SixDofDragBehavior;\r\n    private _surfaceMagnetismBehavior: SurfaceMagnetismBehavior;\r\n    private _onBeforeRenderObserver: Nullable<Observer<Scene>>;\r\n    private _onDragObserver: Nullable<Observer<{ delta: Vector3; position: Vector3; pickInfo: PickingInfo }>>;\r\n\r\n    /**\r\n     * Instantiates the default behavior\r\n     */\r\n    constructor() {\r\n        this._followBehavior = new FollowBehavior();\r\n        this._sixDofDragBehavior = new SixDofDragBehavior();\r\n        this._surfaceMagnetismBehavior = new SurfaceMagnetismBehavior();\r\n    }\r\n\r\n    /**\r\n     * Attached node of this behavior\r\n     */\r\n    public attachedNode: Nullable<Mesh>;\r\n\r\n    /**\r\n     *  The name of the behavior\r\n     */\r\n    public get name(): string {\r\n        return \"Default\";\r\n    }\r\n\r\n    /**\r\n     *  The follow behavior\r\n     */\r\n    public get followBehavior(): FollowBehavior {\r\n        return this._followBehavior;\r\n    }\r\n\r\n    /**\r\n     *  The six DoF drag behavior\r\n     */\r\n    public get sixDofDragBehavior(): SixDofDragBehavior {\r\n        return this._sixDofDragBehavior;\r\n    }\r\n\r\n    /**\r\n     * The surface magnetism behavior\r\n     */\r\n    public get surfaceMagnetismBehavior(): SurfaceMagnetismBehavior {\r\n        return this._surfaceMagnetismBehavior;\r\n    }\r\n\r\n    /**\r\n     * Enables the follow behavior\r\n     */\r\n    public followBehaviorEnabled: boolean = false;\r\n\r\n    /**\r\n     * Enables the six DoF drag behavior\r\n     */\r\n    public sixDofDragBehaviorEnabled: boolean = true;\r\n\r\n    /**\r\n     * Enables the surface magnetism behavior\r\n     */\r\n    public surfaceMagnetismBehaviorEnabled: boolean = true;\r\n\r\n    /**\r\n     *  Initializes the behavior\r\n     */\r\n    public init() {}\r\n\r\n    /**\r\n     * Attaches the default behavior\r\n     * @param ownerMesh The top level mesh\r\n     * @param draggablesMeshes Descendant meshes that can be used for dragging the owner mesh\r\n     * @param sceneUnderstandingMeshes Meshes from the scene understanding that will be used for surface magnetism\r\n     */\r\n    public attach(ownerMesh: Mesh, draggablesMeshes?: Mesh[], sceneUnderstandingMeshes?: AbstractMesh[]): void {\r\n        this._scene = ownerMesh.getScene();\r\n        this.attachedNode = ownerMesh;\r\n\r\n        this._addObservables();\r\n        // Since our observables are bound before the child behaviors', ours are called first\r\n        this._followBehavior.attach(ownerMesh);\r\n        this._sixDofDragBehavior.attach(ownerMesh);\r\n        this._sixDofDragBehavior.draggableMeshes = draggablesMeshes || null;\r\n        this._sixDofDragBehavior.faceCameraOnDragStart = true;\r\n        this._surfaceMagnetismBehavior.attach(ownerMesh, this._scene);\r\n        if (sceneUnderstandingMeshes) {\r\n            this._surfaceMagnetismBehavior.meshes = sceneUnderstandingMeshes;\r\n        }\r\n\r\n        // We disable this behavior because we will handle pose changing event manually with sixDofDragBehavior\r\n        this._surfaceMagnetismBehavior.enabled = false;\r\n    }\r\n\r\n    /**\r\n     *  Detaches the behavior from the mesh\r\n     */\r\n    public detach(): void {\r\n        this.attachedNode = null;\r\n        this._removeObservables();\r\n        this._followBehavior.detach();\r\n        this._sixDofDragBehavior.detach();\r\n        this._surfaceMagnetismBehavior.detach();\r\n    }\r\n\r\n    private _addObservables() {\r\n        this._onBeforeRenderObserver = this._scene.onBeforeRenderObservable.add(() => {\r\n            this._followBehavior._enabled = !this._sixDofDragBehavior.isMoving && this.followBehaviorEnabled;\r\n        });\r\n        this._onDragObserver = this._sixDofDragBehavior.onDragObservable.add((event: { pickInfo: PickingInfo }) => {\r\n            this._sixDofDragBehavior.disableMovement = this._surfaceMagnetismBehavior.findAndUpdateTarget(event.pickInfo);\r\n        });\r\n    }\r\n\r\n    private _removeObservables() {\r\n        this._scene.onBeforeRenderObservable.remove(this._onBeforeRenderObserver);\r\n        this._sixDofDragBehavior.onDragObservable.remove(this._onDragObserver);\r\n    }\r\n}\r\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"handleVertexShader\";\nconst shader = `precision highp float;attribute vec3 position;uniform vec3 positionOffset;uniform mat4 worldViewProjection;uniform float scale;void main(void) {vec4 vPos=vec4((vec3(position)+positionOffset)*scale,1.0);gl_Position=worldViewProjection*vPos;}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const handleVertexShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"handlePixelShader\";\nconst shader = `uniform vec3 color;void main(void) {gl_FragColor=vec4(color,1.0);}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const handlePixelShader = { name, shader };\n","import { ShaderMaterial } from \"core/Materials/shaderMaterial\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Color3, TmpColors } from \"core/Maths/math.color\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\n\r\nimport \"./shaders/handle.vertex\";\r\nimport \"./shaders/handle.fragment\";\r\n\r\n/**\r\n * Class used to render gizmo handles with fluent design\r\n */\r\nexport class HandleMaterial extends ShaderMaterial {\r\n    private _hover: boolean = false;\r\n    private _drag: boolean = false;\r\n    private _onBeforeRender: Nullable<Observer<Scene>>;\r\n    private _color: Color3 = new Color3();\r\n    private _scale: number = 1;\r\n    private _targetColor: Color3;\r\n    private _targetScale: number;\r\n    private _lastTick = -1;\r\n\r\n    /**\r\n     * Is the material indicating hovering state\r\n     */\r\n    public get hover(): boolean {\r\n        return this._hover;\r\n    }\r\n\r\n    public set hover(b: boolean) {\r\n        this._hover = b;\r\n\r\n        this._updateInterpolationTarget();\r\n    }\r\n\r\n    /**\r\n     * Is the material indicating drag state\r\n     */\r\n    public get drag(): boolean {\r\n        return this._drag;\r\n    }\r\n\r\n    public set drag(b: boolean) {\r\n        this._drag = b;\r\n\r\n        this._updateInterpolationTarget();\r\n    }\r\n\r\n    /**\r\n     * Length of animation\r\n     */\r\n    public animationLength: number = 100;\r\n\r\n    /**\r\n     * Color of the handle when hovered\r\n     */\r\n    public hoverColor: Color3 = new Color3(0, 0.467, 0.84);\r\n\r\n    /**\r\n     * Color of the handle when idle\r\n     */\r\n    public baseColor: Color3 = new Color3(1, 1, 1);\r\n\r\n    /**\r\n     * Scale of the handle when hovered\r\n     */\r\n    public hoverScale: number = 0.75;\r\n\r\n    /**\r\n     * Scale of the handle when idle\r\n     */\r\n    public baseScale: number = 0.35;\r\n\r\n    /**\r\n     * Scale of the handle when dragged\r\n     */\r\n    public dragScale: number = 0.55;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _positionOffset: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * Creates a handle material\r\n     * @param name Name of the material\r\n     * @param scene Scene\r\n     */\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene, \"handle\", {\r\n            attributes: [\"position\"],\r\n            uniforms: [\"worldViewProjection\", \"color\", \"scale\", \"positionOffset\"],\r\n            needAlphaBlending: false,\r\n            needAlphaTesting: false,\r\n        });\r\n\r\n        this._updateInterpolationTarget();\r\n\r\n        // Register callback for scene after render\r\n        this._lastTick = Date.now();\r\n        this._onBeforeRender = this.getScene().onBeforeRenderObservable.add(() => {\r\n            const tick = Date.now();\r\n            const delta = tick - this._lastTick;\r\n\r\n            const scaleDiff = this._targetScale - this._scale;\r\n            const colorDiff = TmpColors.Color3[0].copyFrom(this._targetColor).subtractToRef(this._color, TmpColors.Color3[0]);\r\n\r\n            this._scale = this._scale + (scaleDiff * delta) / this.animationLength;\r\n            colorDiff.scaleToRef(delta / this.animationLength, colorDiff);\r\n            this._color.addToRef(colorDiff, this._color);\r\n\r\n            this.setColor3(\"color\", this._color);\r\n            this.setFloat(\"scale\", this._scale);\r\n            this.setVector3(\"positionOffset\", this._positionOffset);\r\n\r\n            this._lastTick = tick;\r\n        });\r\n    }\r\n\r\n    private _updateInterpolationTarget() {\r\n        if (this.drag) {\r\n            this._targetColor = this.hoverColor;\r\n            this._targetScale = this.dragScale;\r\n        } else if (this.hover) {\r\n            this._targetColor = this.hoverColor;\r\n            this._targetScale = this.hoverScale;\r\n        } else {\r\n            this._targetColor = this.baseColor;\r\n            this._targetScale = this.baseScale;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes the handle material\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n        this.getScene().onBeforeRenderObservable.remove(this._onBeforeRender);\r\n    }\r\n}\r\n","import type { Scene } from \"core/scene\";\r\nimport { CreateBox } from \"core/Meshes/Builders/boxBuilder\";\r\nimport { TransformNode } from \"core/Meshes/transformNode\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport { HandleMaterial } from \"../materials/handle/handleMaterial\";\r\nimport type { SlateGizmo } from \"./slateGizmo\";\r\nimport { BaseSixDofDragBehavior } from \"core/Behaviors/Meshes/baseSixDofDragBehavior\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\n\r\n/**\r\n * State of the handle regarding user interaction\r\n */\r\nexport enum HandleState {\r\n    /**\r\n     * Handle is idle\r\n     */\r\n    IDLE = 0,\r\n    /**\r\n     * Handle is hovered\r\n     */\r\n    HOVER = 1,\r\n    /**\r\n     * Handle is dragged\r\n     */\r\n    DRAG = 2,\r\n}\r\n\r\n/**\r\n * Base class for SlateGizmo handles\r\n */\r\nexport abstract class GizmoHandle {\r\n    protected _scene: Scene;\r\n    protected _state: HandleState = HandleState.IDLE;\r\n    protected _materials: HandleMaterial[] = [];\r\n\r\n    private _dragStartObserver: Nullable<Observer<any>>;\r\n    private _draggingObserver: Nullable<Observer<any>>;\r\n    private _dragEndObserver: Nullable<Observer<any>>;\r\n    /**\r\n     * @internal\r\n     */\r\n    public _dragBehavior: BaseSixDofDragBehavior;\r\n\r\n    /**\r\n     * The current state of the handle\r\n     */\r\n    public get state(): HandleState {\r\n        return this._state;\r\n    }\r\n\r\n    private _gizmo: SlateGizmo;\r\n\r\n    /**\r\n     * Returns the gizmo carrying this handle\r\n     */\r\n    public get gizmo() {\r\n        return this._gizmo;\r\n    }\r\n\r\n    /**\r\n     * Sets hover state\r\n     */\r\n    public set hover(value: boolean) {\r\n        if (value) {\r\n            this._state |= HandleState.HOVER;\r\n        } else {\r\n            this._state &= ~HandleState.HOVER;\r\n        }\r\n\r\n        this._updateMaterial();\r\n    }\r\n    /**\r\n     * Sets drag state\r\n     */\r\n    public set drag(value: boolean) {\r\n        if (value) {\r\n            this._state |= HandleState.DRAG;\r\n        } else {\r\n            this._state &= ~HandleState.DRAG;\r\n        }\r\n\r\n        this._updateMaterial();\r\n    }\r\n\r\n    /**\r\n     * Node of this handle\r\n     */\r\n    public node: TransformNode;\r\n\r\n    /**\r\n     * Creates a handle for a SlateGizmo\r\n     * @param gizmo associated SlateGizmo\r\n     * @param scene scene\r\n     */\r\n    constructor(gizmo: SlateGizmo, scene: Scene) {\r\n        this._scene = scene;\r\n        this._gizmo = gizmo;\r\n\r\n        this.node = this.createNode();\r\n        this.node.reservedDataStore = {\r\n            handle: this,\r\n        };\r\n    }\r\n\r\n    protected _createMaterial(positionOffset?: Vector3) {\r\n        const mat = new HandleMaterial(\"handle\", this._scene);\r\n        if (positionOffset) {\r\n            mat._positionOffset = positionOffset;\r\n        }\r\n        return mat;\r\n    }\r\n\r\n    private _updateMaterial() {\r\n        const state = this._state;\r\n        for (const mat of this._materials) {\r\n            mat.hover = false;\r\n            mat.drag = false;\r\n        }\r\n\r\n        if (state & HandleState.DRAG) {\r\n            for (const mat of this._materials) {\r\n                mat.drag = true;\r\n            }\r\n        } else if (state & HandleState.HOVER) {\r\n            for (const mat of this._materials) {\r\n                mat.hover = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Binds callbacks from dragging interaction\r\n     * @param dragStartFn Function to call on drag start\r\n     * @param dragFn Function to call on drag\r\n     * @param dragEndFn Function to call on drag end\r\n     */\r\n    public setDragBehavior(dragStartFn: (event: { position: Vector3 }) => void, dragFn: (event: { position: Vector3 }) => void, dragEndFn: () => void) {\r\n        const dragBehavior = new BaseSixDofDragBehavior();\r\n\r\n        this._dragBehavior = dragBehavior;\r\n\r\n        this._dragStartObserver = dragBehavior.onDragStartObservable.add(dragStartFn);\r\n        this._draggingObserver = dragBehavior.onDragObservable.add(dragFn);\r\n        this._dragEndObserver = dragBehavior.onDragEndObservable.add(dragEndFn);\r\n\r\n        this._dragBehavior.attach(this.node);\r\n    }\r\n\r\n    /**\r\n     * Creates the meshes and parent node of the handle\r\n     * Should be overridden by child classes\r\n     * @returns created node\r\n     */\r\n    public abstract createNode(): TransformNode;\r\n\r\n    /**\r\n     * Disposes the handle\r\n     */\r\n    public dispose() {\r\n        this._dragBehavior.onDragStartObservable.remove(this._dragStartObserver);\r\n        this._dragBehavior.onDragObservable.remove(this._draggingObserver);\r\n        this._dragBehavior.onDragEndObservable.remove(this._dragEndObserver);\r\n\r\n        this._dragBehavior.detach();\r\n\r\n        for (const material of this._materials) {\r\n            material.dispose();\r\n        }\r\n        this.node.dispose();\r\n    }\r\n}\r\n\r\n/**\r\n * Side handle class that rotates the slate\r\n */\r\nexport class SideHandle extends GizmoHandle {\r\n    /**\r\n     * Creates the meshes and parent node of the handle\r\n     * @returns created node\r\n     */\r\n    public createNode() {\r\n        // Create a simple vertical rectangle\r\n        const verticalBox = CreateBox(\"sideVert\", { width: 1, height: 10, depth: 0.1 }, this._scene);\r\n        const sideNode = new TransformNode(\"side\", this._scene);\r\n        verticalBox.parent = sideNode;\r\n\r\n        const mat = this._createMaterial();\r\n        verticalBox.material = mat;\r\n        verticalBox.isNearGrabbable = true;\r\n        this._materials.push(mat);\r\n\r\n        return sideNode;\r\n    }\r\n}\r\n\r\n/**\r\n * Corner handle that resizes the slate\r\n */\r\nexport class CornerHandle extends GizmoHandle {\r\n    /**\r\n     * Creates the meshes and parent node of the handle\r\n     * @returns created node\r\n     */\r\n    public createNode() {\r\n        // Create 2 boxes making a bottom left corner\r\n        const horizontalBox = CreateBox(\"angleHor\", { width: 3, height: 1, depth: 0.1 }, this._scene);\r\n        const verticalBox = CreateBox(\"angleVert\", { width: 1, height: 3, depth: 0.1 }, this._scene);\r\n\r\n        const angleNode = new TransformNode(\"angle\", this._scene);\r\n        horizontalBox.parent = angleNode;\r\n        verticalBox.parent = angleNode;\r\n\r\n        horizontalBox.material = this._createMaterial(new Vector3(1, 0, 0));\r\n        verticalBox.material = this._createMaterial(new Vector3(0, 1, 0));\r\n        verticalBox.isNearGrabbable = true;\r\n        horizontalBox.isNearGrabbable = true;\r\n\r\n        this._materials.push(horizontalBox.material as HandleMaterial);\r\n        this._materials.push(verticalBox.material as HandleMaterial);\r\n        return angleNode;\r\n    }\r\n}\r\n","import { Gizmo } from \"core/Gizmos/gizmo\";\r\nimport { Epsilon } from \"core/Maths/math.constants\";\r\nimport { Matrix, Quaternion, TmpVectors, Vector3 } from \"core/Maths/math.vector\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { PivotTools } from \"core/Misc/pivotTools\";\r\nimport type { UtilityLayerRenderer } from \"core/Rendering/utilityLayerRenderer\";\r\nimport type { Nullable } from \"core/types\";\r\n\r\nimport type { HolographicSlate } from \"../controls/holographicSlate\";\r\nimport type { GizmoHandle } from \"./gizmoHandle\";\r\nimport { CornerHandle, SideHandle } from \"./gizmoHandle\";\r\n\r\n// Mask contains the influence of the drag offset vectors on dimensions or origin of the slate\r\n// Mask vector is multiplied to the offset vector\r\ntype HandleMasks = {\r\n    dimensions: Vector3;\r\n    origin: Vector3;\r\n};\r\n\r\n/**\r\n * Gizmo to resize 2D slates\r\n */\r\nexport class SlateGizmo extends Gizmo {\r\n    private _boundingDimensions = new Vector3(0, 0, 0);\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<AbstractMesh>>>;\r\n    private _renderObserver: Nullable<Observer<Scene>> = null;\r\n\r\n    private _tmpQuaternion = new Quaternion();\r\n    private _tmpVector = new Vector3(0, 0, 0);\r\n\r\n    // Ordered bl, br, tr, tl\r\n    private _corners: CornerHandle[] = [];\r\n    // Ordered left, bottom, right, top\r\n    private _sides: SideHandle[] = [];\r\n    private _handlesParent: TransformNode;\r\n    private _handleHovered: Nullable<GizmoHandle>;\r\n    private _handleDragged: Nullable<GizmoHandle>;\r\n\r\n    private _boundingBoxGizmo = {\r\n        min: new Vector3(),\r\n        max: new Vector3(),\r\n    };\r\n\r\n    /**\r\n     * Value we use to offset handles from mesh\r\n     */\r\n    private _margin = 0.35;\r\n    private _handleSize = 0.075;\r\n    private _attachedSlate: Nullable<HolographicSlate> = null;\r\n    private _existingSlateScale = new Vector3();\r\n    /**\r\n     * If set, the handles will increase in size based on the distance away from the camera to have a consistent screen size (Default: true)\r\n     */\r\n    public fixedScreenSize = false;\r\n    /**\r\n     * The distance away from the object which the draggable meshes should appear world sized when fixedScreenSize is set to true (default: 10)\r\n     */\r\n    public fixedScreenSizeDistanceFactor = 10;\r\n\r\n    /**\r\n     * The slate attached to this gizmo\r\n     */\r\n    public set attachedSlate(control: Nullable<HolographicSlate>) {\r\n        if (control) {\r\n            this.attachedMesh = control.mesh;\r\n            this.updateBoundingBox();\r\n\r\n            this._pickedPointObserver = control._host.onPickingObservable.add((pickedMesh) => {\r\n                if (this._handleHovered && (!pickedMesh || pickedMesh.parent !== this._handleHovered.node)) {\r\n                    this._handleHovered.hover = false;\r\n                    this._handleHovered = null;\r\n                }\r\n\r\n                if (pickedMesh && pickedMesh.parent && pickedMesh.parent.reservedDataStore && pickedMesh.parent.reservedDataStore.handle) {\r\n                    const handle = pickedMesh.parent.reservedDataStore.handle as GizmoHandle;\r\n                    if (handle.gizmo === this) {\r\n                        this._handleHovered = handle;\r\n                        this._handleHovered.hover = true;\r\n                    }\r\n                }\r\n            });\r\n        } else if (this._attachedSlate) {\r\n            this._attachedSlate._host.onPickingObservable.remove(this._pickedPointObserver);\r\n        }\r\n        this._attachedSlate = control;\r\n    }\r\n\r\n    public get attachedSlate(): Nullable<HolographicSlate> {\r\n        return this._attachedSlate;\r\n    }\r\n\r\n    constructor(utilityLayer?: UtilityLayerRenderer) {\r\n        super(utilityLayer);\r\n\r\n        this._createNode();\r\n        this.updateScale = false;\r\n\r\n        this._renderObserver = this.gizmoLayer.originalScene.onBeforeRenderObservable.add(() => {\r\n            // Only update the bounding box if scaling has changed\r\n            if (this.attachedMesh && !this._existingSlateScale.equals(this.attachedMesh.scaling)) {\r\n                this.updateBoundingBox();\r\n            }\r\n        });\r\n    }\r\n\r\n    private _createNode() {\r\n        this._handlesParent = new TransformNode(\"handlesParent\", this.gizmoLayer.utilityLayerScene);\r\n        this._handlesParent.rotationQuaternion = Quaternion.Identity();\r\n\r\n        const masksCorners = [\r\n            {\r\n                dimensions: new Vector3(-1, -1, 0),\r\n                origin: new Vector3(1, 0, 0),\r\n            },\r\n            {\r\n                dimensions: new Vector3(1, -1, 0),\r\n                origin: new Vector3(0, 0, 0),\r\n            },\r\n            {\r\n                dimensions: new Vector3(1, 1, 0),\r\n                origin: new Vector3(0, 1, 0),\r\n            },\r\n            {\r\n                dimensions: new Vector3(-1, 1, 0),\r\n                origin: new Vector3(1, 1, 0),\r\n            },\r\n        ];\r\n\r\n        for (let i = 0; i < 4; i++) {\r\n            const corner = new CornerHandle(this, this.gizmoLayer.utilityLayerScene);\r\n            this._corners.push(corner);\r\n            corner.node.rotation.z = (Math.PI / 2) * i;\r\n\r\n            corner.node.parent = this._handlesParent;\r\n            this._assignDragBehaviorCorners(\r\n                corner,\r\n                (originStart: Vector3, dimensionsStart: Vector3, offset: Vector3, masks: HandleMasks) => this._moveHandle(originStart, dimensionsStart, offset, masks, true),\r\n                masksCorners[i]\r\n            );\r\n        }\r\n\r\n        for (let i = 0; i < 4; i++) {\r\n            const side = new SideHandle(this, this.gizmoLayer.utilityLayerScene);\r\n            this._sides.push(side);\r\n            side.node.rotation.z = (Math.PI / 2) * i;\r\n            side.node.parent = this._handlesParent;\r\n            this._assignDragBehaviorSides(side, i % 2 === 0 ? new Vector3(0, 1, 0) : new Vector3(1, 0, 0));\r\n        }\r\n\r\n        this._handlesParent.parent = this._rootMesh;\r\n    }\r\n\r\n    private _keepAspectRatio(vector: Vector3, aspectRatio: number, invertDiagonal: boolean = false) {\r\n        const axis = TmpVectors.Vector3[0];\r\n        axis.copyFromFloats(aspectRatio, 1, 0).normalize();\r\n        if (invertDiagonal) {\r\n            axis.y *= -1;\r\n        }\r\n        const dot = Vector3.Dot(vector, axis);\r\n        vector.copyFrom(axis).scaleInPlace(dot);\r\n    }\r\n\r\n    private _clampDimensions(vector: Vector3, dimensions: Vector3, mask: Vector3, keepAspectRatio: boolean = false) {\r\n        const impact = TmpVectors.Vector3[0];\r\n        impact.copyFrom(vector).multiplyInPlace(mask);\r\n\r\n        const clampedDimensions = TmpVectors.Vector3[1];\r\n        clampedDimensions.copyFromFloats(\r\n            Math.max(this._attachedSlate!.minDimensions.x, impact.x + dimensions.x),\r\n            Math.max(this._attachedSlate!.minDimensions.y, impact.y + dimensions.y),\r\n            0\r\n        );\r\n\r\n        if (keepAspectRatio) {\r\n            // Extra logic to ensure the ratio is maintained when the vector has been clamped\r\n            const ratio = dimensions.x / dimensions.y;\r\n            clampedDimensions.x = Math.max(clampedDimensions.x, clampedDimensions.y * ratio);\r\n            clampedDimensions.y = Math.max(clampedDimensions.y, clampedDimensions.x / ratio);\r\n        }\r\n\r\n        // Calculating the real impact of vector on clamped dimensions\r\n        impact.copyFrom(clampedDimensions).subtractInPlace(dimensions);\r\n\r\n        vector.x = Math.sign(vector.x) * Math.abs(impact.x);\r\n        vector.y = Math.sign(vector.y) * Math.abs(impact.y);\r\n    }\r\n\r\n    private _moveHandle(originStart: Vector3, dimensionsStart: Vector3, offset: Vector3, masks: HandleMasks, isCorner: boolean) {\r\n        if (!this._attachedSlate) {\r\n            return;\r\n        }\r\n\r\n        if (isCorner) {\r\n            const aspectRatio = dimensionsStart.x / dimensionsStart.y;\r\n            this._keepAspectRatio(offset, aspectRatio, masks.dimensions.x * masks.dimensions.y < 0);\r\n        }\r\n        this._clampDimensions(offset, dimensionsStart, masks.dimensions, isCorner);\r\n\r\n        const offsetOriginMasked = TmpVectors.Vector3[0];\r\n        const offsetDimensionsMasked = TmpVectors.Vector3[1];\r\n        offsetOriginMasked.copyFrom(offset).multiplyInPlace(masks.origin);\r\n        offsetDimensionsMasked.copyFrom(offset).multiplyInPlace(masks.dimensions);\r\n\r\n        this._attachedSlate.origin.copyFrom(originStart).addInPlace(offsetOriginMasked);\r\n        this._attachedSlate.dimensions.set(dimensionsStart.x + offsetDimensionsMasked.x, dimensionsStart.y + offsetDimensionsMasked.y);\r\n    }\r\n\r\n    private _assignDragBehaviorCorners(\r\n        handle: GizmoHandle,\r\n        moveFn: (originStart: Vector3, dimensionsStart: Vector3, offset: Vector3, masks: HandleMasks) => void,\r\n        masks: HandleMasks\r\n    ) {\r\n        const dimensionsStart = new Vector3();\r\n        const originStart = new Vector3();\r\n        const dragOrigin = new Vector3();\r\n        const toObjectFrame = new Matrix();\r\n        const dragPlaneNormal = new Vector3();\r\n\r\n        const projectToRef = (position: Vector3, normal: Vector3, origin: Vector3, ref: Vector3) => {\r\n            // Projects on the plane with its normal and origin\r\n            position.subtractToRef(origin, TmpVectors.Vector3[0]);\r\n            const dot = Vector3.Dot(TmpVectors.Vector3[0], normal);\r\n            TmpVectors.Vector3[1].copyFrom(normal).scaleInPlace(dot);\r\n            TmpVectors.Vector3[0].subtractInPlace(TmpVectors.Vector3[1]);\r\n            TmpVectors.Vector3[0].addToRef(origin, ref);\r\n        };\r\n\r\n        const dragStart = (event: { position: Vector3 }) => {\r\n            if (this.attachedSlate && this.attachedMesh) {\r\n                dimensionsStart.set(this.attachedSlate.dimensions.x, this.attachedSlate.dimensions.y, Epsilon);\r\n                originStart.copyFrom(this.attachedSlate.origin);\r\n                dragOrigin.copyFrom(event.position);\r\n                toObjectFrame.copyFrom(this.attachedMesh.computeWorldMatrix(true));\r\n                toObjectFrame.invert();\r\n                this.attachedSlate._followButton.isToggled = false;\r\n                Vector3.TransformNormalToRef(Vector3.Forward(), this.attachedMesh.getWorldMatrix(), dragPlaneNormal);\r\n                dragPlaneNormal.normalize();\r\n\r\n                if (this._handleHovered) {\r\n                    this._handleDragged = this._handleHovered;\r\n                    this._handleDragged.drag = true;\r\n                }\r\n            }\r\n        };\r\n\r\n        const dragging = (event: { position: Vector3 }) => {\r\n            if (this.attachedSlate && this.attachedMesh) {\r\n                projectToRef(event.position, dragPlaneNormal, dragOrigin, this._tmpVector);\r\n                this._tmpVector.subtractInPlace(dragOrigin);\r\n                Vector3.TransformNormalToRef(this._tmpVector, toObjectFrame, this._tmpVector);\r\n\r\n                moveFn(originStart, dimensionsStart, this._tmpVector, masks);\r\n                this.attachedSlate._positionElements();\r\n                this.updateBoundingBox();\r\n            }\r\n        };\r\n\r\n        const dragEnd = () => {\r\n            if (this.attachedSlate && this.attachedNode) {\r\n                this.attachedSlate._updatePivot();\r\n\r\n                if (this._handleDragged) {\r\n                    this._handleDragged.drag = false;\r\n                    this._handleDragged = null;\r\n                }\r\n            }\r\n        };\r\n\r\n        handle.setDragBehavior(dragStart, dragging, dragEnd);\r\n    }\r\n\r\n    private _assignDragBehaviorSides(handle: GizmoHandle, dragPlaneNormal: Vector3) {\r\n        const quaternionOrigin = new Quaternion();\r\n        const dragOrigin = new Vector3();\r\n        const directionOrigin = new Vector3();\r\n        const worldPivot = new Vector3();\r\n        const worldPlaneNormal = new Vector3();\r\n\r\n        const dragStart = (event: { position: Vector3 }) => {\r\n            if (this.attachedSlate && this.attachedMesh) {\r\n                quaternionOrigin.copyFrom(this.attachedMesh.rotationQuaternion!);\r\n                dragOrigin.copyFrom(event.position);\r\n                worldPivot.copyFrom(this.attachedMesh.getAbsolutePivotPoint());\r\n                directionOrigin.copyFrom(dragOrigin).subtractInPlace(worldPivot).normalize();\r\n                this.attachedSlate._followButton.isToggled = false;\r\n                Vector3.TransformNormalToRef(dragPlaneNormal, this.attachedMesh.getWorldMatrix(), worldPlaneNormal);\r\n                worldPlaneNormal.normalize();\r\n\r\n                if (this._handleHovered) {\r\n                    this._handleDragged = this._handleHovered;\r\n                    this._handleDragged.drag = true;\r\n                }\r\n            }\r\n        };\r\n\r\n        const dragging = (event: { position: Vector3 }) => {\r\n            if (this.attachedSlate && this.attachedMesh) {\r\n                this._tmpVector.copyFrom(event.position);\r\n                this._tmpVector.subtractInPlace(worldPivot);\r\n                this._tmpVector.normalize();\r\n\r\n                const angle = -Vector3.GetAngleBetweenVectorsOnPlane(this._tmpVector, directionOrigin, worldPlaneNormal);\r\n                Quaternion.RotationAxisToRef(dragPlaneNormal, angle, this._tmpQuaternion);\r\n                quaternionOrigin.multiplyToRef(this._tmpQuaternion, this.attachedMesh.rotationQuaternion!);\r\n            }\r\n        };\r\n\r\n        const dragEnd = () => {\r\n            if (this.attachedSlate && this.attachedNode) {\r\n                this.attachedSlate._updatePivot();\r\n\r\n                if (this._handleDragged) {\r\n                    this._handleDragged.drag = false;\r\n                    this._handleDragged = null;\r\n                }\r\n            }\r\n        };\r\n\r\n        handle.setDragBehavior(dragStart, dragging, dragEnd);\r\n    }\r\n\r\n    protected _attachedNodeChanged(value: Nullable<AbstractMesh>) {\r\n        if (value) {\r\n            this.updateBoundingBox();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the bounding box information for the gizmo\r\n     */\r\n    public updateBoundingBox() {\r\n        if (this.attachedMesh) {\r\n            PivotTools._RemoveAndStorePivotPoint(this.attachedMesh);\r\n\r\n            // Store original parent\r\n            const originalParent = this.attachedMesh.parent;\r\n            this.attachedMesh.setParent(null);\r\n\r\n            this._update();\r\n\r\n            // Rotate based on axis\r\n            if (!this.attachedMesh.rotationQuaternion) {\r\n                this.attachedMesh.rotationQuaternion = Quaternion.RotationYawPitchRoll(this.attachedMesh.rotation.y, this.attachedMesh.rotation.x, this.attachedMesh.rotation.z);\r\n            }\r\n\r\n            // Store original position and reset mesh to origin before computing the bounding box\r\n            this._tmpQuaternion.copyFrom(this.attachedMesh.rotationQuaternion);\r\n            this._tmpVector.copyFrom(this.attachedMesh.position);\r\n            this.attachedMesh.rotationQuaternion.set(0, 0, 0, 1);\r\n            this.attachedMesh.position.set(0, 0, 0);\r\n\r\n            // Update bounding dimensions/positions\r\n            const boundingMinMax = this.attachedMesh.getHierarchyBoundingVectors();\r\n            boundingMinMax.max.subtractToRef(boundingMinMax.min, this._boundingDimensions);\r\n            this._boundingBoxGizmo.min = boundingMinMax.min;\r\n            this._boundingBoxGizmo.max = boundingMinMax.max;\r\n\r\n            // Update handles of the gizmo\r\n            this._updateHandlesPosition();\r\n            this._updateHandlesScaling();\r\n\r\n            // Restore position/rotation values\r\n            this.attachedMesh.rotationQuaternion.copyFrom(this._tmpQuaternion);\r\n            this.attachedMesh.position.copyFrom(this._tmpVector);\r\n\r\n            PivotTools._RestorePivotPoint(this.attachedMesh);\r\n\r\n            // Restore original parent\r\n            this.attachedMesh.setParent(originalParent);\r\n            this.attachedMesh.computeWorldMatrix(true);\r\n\r\n            this._existingSlateScale.copyFrom(this.attachedMesh.scaling);\r\n        }\r\n    }\r\n\r\n    private _updateHandlesPosition() {\r\n        const min = this._boundingBoxGizmo.min.clone();\r\n        const max = this._boundingBoxGizmo.max.clone();\r\n\r\n        const handleScaling = this._corners[0].node.scaling.length();\r\n        min.x -= this._margin * handleScaling;\r\n        min.y -= this._margin * handleScaling;\r\n        max.x += this._margin * handleScaling;\r\n        max.y += this._margin * handleScaling;\r\n\r\n        const center = min.add(max).scaleInPlace(0.5);\r\n\r\n        this._corners[0].node.position.copyFromFloats(min.x, min.y, 0);\r\n        this._corners[1].node.position.copyFromFloats(max.x, min.y, 0);\r\n        this._corners[2].node.position.copyFromFloats(max.x, max.y, 0);\r\n        this._corners[3].node.position.copyFromFloats(min.x, max.y, 0);\r\n\r\n        this._sides[0].node.position.copyFromFloats(min.x, center.y, 0);\r\n        this._sides[1].node.position.copyFromFloats(center.x, min.y, 0);\r\n        this._sides[2].node.position.copyFromFloats(max.x, center.y, 0);\r\n        this._sides[3].node.position.copyFromFloats(center.x, max.y, 0);\r\n    }\r\n\r\n    private _updateHandlesScaling() {\r\n        if (this._attachedSlate && this._attachedSlate.mesh) {\r\n            const scaledWidth = this._attachedSlate.mesh.scaling.x * this._attachedSlate.dimensions.x;\r\n            const scaledHeight = this._attachedSlate.mesh.scaling.y * this._attachedSlate.dimensions.y;\r\n            const scale = Math.min(scaledWidth, scaledHeight) * this._handleSize;\r\n            for (let index = 0; index < this._corners.length; index++) {\r\n                this._corners[index].node.scaling.setAll(scale);\r\n            }\r\n            for (let index = 0; index < this._sides.length; index++) {\r\n                this._sides[index].node.scaling.setAll(scale);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected _update() {\r\n        super._update();\r\n\r\n        if (!this.gizmoLayer.utilityLayerScene.activeCamera) {\r\n            return;\r\n        }\r\n\r\n        if (this._attachedSlate && this._attachedSlate.mesh) {\r\n            if (this.fixedScreenSize) {\r\n                this._attachedSlate.mesh.absolutePosition.subtractToRef(this.gizmoLayer.utilityLayerScene.activeCamera.position, this._tmpVector);\r\n                const distanceFromCamera = (this._handleSize * this._tmpVector.length()) / this.fixedScreenSizeDistanceFactor;\r\n                for (let i = 0; i < this._corners.length; i++) {\r\n                    this._corners[i].node.scaling.set(distanceFromCamera, distanceFromCamera, distanceFromCamera);\r\n                }\r\n                for (let i = 0; i < this._sides.length; i++) {\r\n                    this._sides[i].node.scaling.set(distanceFromCamera, distanceFromCamera, distanceFromCamera);\r\n                }\r\n            }\r\n            this._updateHandlesPosition();\r\n        }\r\n    }\r\n\r\n    public dispose() {\r\n        this.gizmoLayer.originalScene.onBeforeRenderObservable.remove(this._renderObserver);\r\n\r\n        // Will dispose rootMesh and all descendants\r\n        super.dispose();\r\n\r\n        for (const corner of this._corners) {\r\n            corner.dispose();\r\n        }\r\n\r\n        for (const side of this._sides) {\r\n            side.dispose();\r\n        }\r\n    }\r\n}\r\n","import { ContentDisplay3D } from \"./contentDisplay3D\";\r\nimport type { Control3D } from \"./control3D\";\r\nimport { TouchHolographicButton } from \"./touchHolographicButton\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control } from \"../../2D/controls/control\";\r\nimport { TextBlock, TextWrapping } from \"../../2D/controls/textBlock\";\r\nimport { DefaultBehavior } from \"../behaviors/defaultBehavior\";\r\nimport { SlateGizmo } from \"../gizmos/slateGizmo\";\r\nimport { FluentMaterial } from \"../materials/fluent/fluentMaterial\";\r\nimport { FluentBackplateMaterial } from \"../materials/fluentBackplate/fluentBackplateMaterial\";\r\nimport { PointerDragBehavior } from \"core/Behaviors/Meshes/pointerDragBehavior\";\r\nimport type { Texture } from \"core/Materials/Textures/texture\";\r\nimport { Vector4 } from \"core/Maths/math\";\r\nimport { Epsilon } from \"core/Maths/math.constants\";\r\nimport { Scalar } from \"core/Maths/math.scalar\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport { Quaternion, Vector2, Vector3 } from \"core/Maths/math.vector\";\r\nimport { Viewport } from \"core/Maths/math.viewport\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { CreateBox } from \"core/Meshes/Builders/boxBuilder\";\r\nimport { CreatePlane } from \"core/Meshes/Builders/planeBuilder\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport { Mesh } from \"core/Meshes/mesh\";\r\nimport { VertexData } from \"core/Meshes/mesh.vertexData\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { Nullable } from \"core/types\";\r\n\r\n/**\r\n * Class used to create a holographic slate\r\n * @since 5.0.0\r\n */\r\nexport class HolographicSlate extends ContentDisplay3D {\r\n    /**\r\n     * Base Url for the assets.\r\n     */\r\n    public static ASSETS_BASE_URL: string = \"https://assets.babylonjs.com/meshes/MRTK/\";\r\n    /**\r\n     * File name for the close icon.\r\n     */\r\n    public static CLOSE_ICON_FILENAME: string = \"IconClose.png\";\r\n    /**\r\n     * File name for the close icon.\r\n     */\r\n    public static FOLLOW_ICON_FILENAME: string = \"IconFollowMe.png\";\r\n\r\n    private static _DEFAULT_TEXT_RESOLUTION_Y = 102.4;\r\n\r\n    /**\r\n     * Margin between title bar and contentplate\r\n     */\r\n    public titleBarMargin = 0.005;\r\n\r\n    /**\r\n     * Origin in local coordinates (top left corner)\r\n     */\r\n    public origin = new Vector3(0, 0, 0);\r\n\r\n    private _dimensions = new Vector2(21.875, 12.5);\r\n    private _titleBarHeight = 0.625;\r\n\r\n    private _titleBarMaterial: FluentBackplateMaterial;\r\n    private _backMaterial: FluentBackplateMaterial;\r\n    private _contentMaterial: FluentMaterial;\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<Vector3>>>;\r\n    private _positionChangedObserver: Nullable<Observer<{ position: Vector3 }>>;\r\n\r\n    private _titleText = \"\";\r\n    private _titleTextComponent: TextBlock;\r\n\r\n    private _contentViewport: Viewport;\r\n    private _contentDragBehavior: PointerDragBehavior;\r\n\r\n    private _defaultBehavior: DefaultBehavior;\r\n    /**\r\n     * Regroups all mesh behaviors for the slate\r\n     */\r\n    public get defaultBehavior(): DefaultBehavior {\r\n        return this._defaultBehavior;\r\n    }\r\n\r\n    /** @internal */\r\n    public _gizmo: SlateGizmo;\r\n\r\n    protected _titleBar: Mesh;\r\n    protected _titleBarTitle: Mesh;\r\n    protected _contentPlate: Mesh;\r\n    protected _backPlate: Mesh;\r\n    /** @internal */\r\n    public _followButton: TouchHolographicButton;\r\n    protected _closeButton: TouchHolographicButton;\r\n    protected _contentScaleRatio = 1;\r\n\r\n    /**\r\n     * 2D dimensions of the slate\r\n     */\r\n    public get dimensions() {\r\n        return this._dimensions;\r\n    }\r\n    public set dimensions(value) {\r\n        //clamp, respecting ratios\r\n        let scale = 1.0;\r\n        if (value.x < this.minDimensions.x || value.y < this.minDimensions.y) {\r\n            const newRatio = value.x / value.y;\r\n            const minRatio = this.minDimensions.x / this.minDimensions.y;\r\n            if (minRatio > newRatio) {\r\n                // We just need to make sure the x-val is greater than the min\r\n                scale = this.minDimensions.x / value.x;\r\n            } else {\r\n                // We just need to make sure the y-val is greater than the min\r\n                scale = this.minDimensions.y / value.y;\r\n            }\r\n        }\r\n\r\n        this._dimensions.copyFrom(value).scaleInPlace(scale);\r\n        this._updatePivot();\r\n        this._positionElements();\r\n    }\r\n\r\n    /**\r\n     * Minimum dimensions of the slate\r\n     */\r\n    public minDimensions = new Vector2(15.625, 6.25);\r\n\r\n    /**\r\n     * Default dimensions of the slate\r\n     */\r\n    public readonly defaultDimensions = this._dimensions.clone();\r\n\r\n    /**\r\n     * Height of the title bar component\r\n     */\r\n    public get titleBarHeight() {\r\n        return this._titleBarHeight;\r\n    }\r\n    public set titleBarHeight(value) {\r\n        this._titleBarHeight = value;\r\n    }\r\n\r\n    /**\r\n     * Rendering ground id of all the meshes\r\n     */\r\n    public set renderingGroupId(id: number) {\r\n        this._titleBar.renderingGroupId = id;\r\n        this._titleBarTitle.renderingGroupId = id;\r\n        this._contentPlate.renderingGroupId = id;\r\n        this._backPlate.renderingGroupId = id;\r\n    }\r\n    public get renderingGroupId(): number {\r\n        return this._titleBar.renderingGroupId;\r\n    }\r\n\r\n    /**\r\n     * The title text displayed at the top of the slate\r\n     */\r\n    public set title(title: string) {\r\n        this._titleText = title;\r\n        if (this._titleTextComponent) {\r\n            this._titleTextComponent.text = title;\r\n        }\r\n    }\r\n    public get title() {\r\n        return this._titleText;\r\n    }\r\n\r\n    /**\r\n     * Creates a new slate\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n\r\n        this._followButton = new TouchHolographicButton(\"followButton\" + this.name);\r\n        this._followButton.isToggleButton = true;\r\n        this._closeButton = new TouchHolographicButton(\"closeButton\" + this.name);\r\n\r\n        this._contentViewport = new Viewport(0, 0, 1, 1);\r\n        this._contentDragBehavior = new PointerDragBehavior({\r\n            dragPlaneNormal: new Vector3(0, 0, -1),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Apply the facade texture (created from the content property).\r\n     * This function can be overloaded by child classes\r\n     * @param facadeTexture defines the AdvancedDynamicTexture to use\r\n     */\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        this._contentMaterial.albedoTexture = facadeTexture;\r\n        this._resetContentPositionAndZoom();\r\n        this._applyContentViewport();\r\n\r\n        facadeTexture.attachToMesh(this._contentPlate, true);\r\n    }\r\n\r\n    private _addControl(control: Control3D): void {\r\n        control._host = this._host;\r\n        if (this._host.utilityLayer) {\r\n            control._prepareNode(this._host.utilityLayer.utilityLayerScene);\r\n        }\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"HolographicSlate\";\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _positionElements() {\r\n        const followButton = this._followButton;\r\n        const closeButton = this._closeButton;\r\n        const titleBar = this._titleBar;\r\n        const titleBarTitle = this._titleBarTitle;\r\n        const contentPlate = this._contentPlate;\r\n        const backPlate = this._backPlate;\r\n\r\n        if (followButton && closeButton && titleBar) {\r\n            closeButton.scaling.setAll(this.titleBarHeight);\r\n            followButton.scaling.setAll(this.titleBarHeight);\r\n            closeButton.position.copyFromFloats(this.dimensions.x - this.titleBarHeight / 2, -this.titleBarHeight / 2, 0).addInPlace(this.origin);\r\n            followButton.position.copyFromFloats(this.dimensions.x - (3 * this.titleBarHeight) / 2, -this.titleBarHeight / 2, 0).addInPlace(this.origin);\r\n\r\n            const contentPlateHeight = this.dimensions.y - this.titleBarHeight - this.titleBarMargin;\r\n            const rightHandScene = contentPlate.getScene().useRightHandedSystem;\r\n\r\n            titleBar.scaling.set(this.dimensions.x, this.titleBarHeight, Epsilon);\r\n            titleBarTitle.scaling.set(this.dimensions.x - 2 * this.titleBarHeight, this.titleBarHeight, Epsilon);\r\n            contentPlate.scaling.copyFromFloats(this.dimensions.x, contentPlateHeight, Epsilon);\r\n            backPlate.scaling.copyFromFloats(this.dimensions.x, contentPlateHeight, Epsilon);\r\n\r\n            titleBar.position.copyFromFloats(this.dimensions.x / 2, -(this.titleBarHeight / 2), 0).addInPlace(this.origin);\r\n            titleBarTitle.position\r\n                .copyFromFloats(this.dimensions.x / 2 - this.titleBarHeight, -(this.titleBarHeight / 2), rightHandScene ? Epsilon : -Epsilon)\r\n                .addInPlace(this.origin);\r\n            contentPlate.position.copyFromFloats(this.dimensions.x / 2, -(this.titleBarHeight + this.titleBarMargin + contentPlateHeight / 2), 0).addInPlace(this.origin);\r\n            backPlate.position\r\n                .copyFromFloats(this.dimensions.x / 2, -(this.titleBarHeight + this.titleBarMargin + contentPlateHeight / 2), rightHandScene ? -Epsilon : Epsilon)\r\n                .addInPlace(this.origin);\r\n\r\n            // Update the title's AdvancedDynamicTexture scale to avoid visual stretching\r\n            this._titleTextComponent.host.scaleTo(\r\n                (HolographicSlate._DEFAULT_TEXT_RESOLUTION_Y * titleBarTitle.scaling.x) / titleBarTitle.scaling.y,\r\n                HolographicSlate._DEFAULT_TEXT_RESOLUTION_Y\r\n            );\r\n\r\n            const aspectRatio = this.dimensions.x / contentPlateHeight;\r\n            this._contentViewport.width = this._contentScaleRatio;\r\n            this._contentViewport.height = this._contentScaleRatio / aspectRatio;\r\n\r\n            this._applyContentViewport();\r\n            if (this._gizmo) {\r\n                this._gizmo.updateBoundingBox();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _applyContentViewport() {\r\n        if (this._contentPlate?.material && (this._contentPlate.material as FluentMaterial).albedoTexture) {\r\n            const tex = (this._contentPlate.material as FluentMaterial).albedoTexture as Texture;\r\n            tex.uScale = this._contentScaleRatio;\r\n            tex.vScale = (this._contentScaleRatio / this._contentViewport.width) * this._contentViewport.height;\r\n            tex.uOffset = this._contentViewport.x;\r\n            tex.vOffset = this._contentViewport.y;\r\n        }\r\n    }\r\n\r\n    private _resetContentPositionAndZoom() {\r\n        this._contentViewport.x = 0;\r\n        this._contentViewport.y = 1 - this._contentViewport.height / this._contentViewport.width;\r\n        this._contentScaleRatio = 1;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _updatePivot() {\r\n        if (!this.mesh) {\r\n            return;\r\n        }\r\n\r\n        // Update pivot point so it is at the center of geometry\r\n        // As origin is topleft corner in 2D, dimensions are calculated towards bottom right corner, thus y axis is downwards\r\n        const center = new Vector3(this.dimensions.x * 0.5, -this.dimensions.y * 0.5, Epsilon);\r\n        center.addInPlace(this.origin);\r\n        center.z = 0;\r\n\r\n        const origin = new Vector3(0, 0, 0);\r\n        Vector3.TransformCoordinatesToRef(origin, this.mesh.computeWorldMatrix(true), origin);\r\n        this.mesh.setPivotPoint(center);\r\n        const origin2 = new Vector3(0, 0, 0);\r\n        Vector3.TransformCoordinatesToRef(origin2, this.mesh.computeWorldMatrix(true), origin2);\r\n        this.mesh.position.addInPlace(origin).subtractInPlace(origin2);\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        const node = new Mesh(\"slate_\" + this.name, scene);\r\n\r\n        this._titleBar = CreateBox(\"titleBar_\" + this.name, { size: 1 }, scene);\r\n        this._titleBarTitle = CreatePlane(\"titleText_\" + this.name, { size: 1 }, scene);\r\n        this._titleBarTitle.parent = node;\r\n        this._titleBarTitle.isPickable = false;\r\n\r\n        const adt = AdvancedDynamicTexture.CreateForMesh(this._titleBarTitle);\r\n        this._titleTextComponent = new TextBlock(\"titleText_\" + this.name, this._titleText);\r\n        this._titleTextComponent.textWrapping = TextWrapping.Ellipsis;\r\n        this._titleTextComponent.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._titleTextComponent.color = \"white\";\r\n        this._titleTextComponent.fontSize = HolographicSlate._DEFAULT_TEXT_RESOLUTION_Y / 2;\r\n        this._titleTextComponent.paddingLeft = HolographicSlate._DEFAULT_TEXT_RESOLUTION_Y / 4;\r\n        adt.addControl(this._titleTextComponent);\r\n\r\n        if (scene.useRightHandedSystem) {\r\n            const faceUV = new Vector4(0, 0, 1, 1);\r\n            this._contentPlate = CreatePlane(\"contentPlate_\" + this.name, { size: 1, sideOrientation: VertexData.BACKSIDE, frontUVs: faceUV }, scene);\r\n            this._backPlate = CreatePlane(\"backPlate_\" + this.name, { size: 1, sideOrientation: VertexData.FRONTSIDE }, scene);\r\n        } else {\r\n            const faceUV = new Vector4(0, 0, 1, 1);\r\n            this._contentPlate = CreatePlane(\"contentPlate_\" + this.name, { size: 1, sideOrientation: VertexData.FRONTSIDE, frontUVs: faceUV }, scene);\r\n            this._backPlate = CreatePlane(\"backPlate_\" + this.name, { size: 1, sideOrientation: VertexData.BACKSIDE }, scene);\r\n        }\r\n\r\n        this._titleBar.parent = node;\r\n        this._titleBar.isNearGrabbable = true;\r\n        this._contentPlate.parent = node;\r\n        this._backPlate.parent = node;\r\n        this._attachContentPlateBehavior();\r\n\r\n        this._addControl(this._followButton);\r\n        this._addControl(this._closeButton);\r\n\r\n        const followButton = this._followButton;\r\n        const closeButton = this._closeButton;\r\n\r\n        followButton.node!.parent = node;\r\n        closeButton.node!.parent = node;\r\n\r\n        this._positionElements();\r\n\r\n        this._followButton.imageUrl = HolographicSlate.ASSETS_BASE_URL + HolographicSlate.FOLLOW_ICON_FILENAME;\r\n        this._closeButton.imageUrl = HolographicSlate.ASSETS_BASE_URL + HolographicSlate.CLOSE_ICON_FILENAME;\r\n\r\n        this._followButton.isBackplateVisible = false;\r\n        this._closeButton.isBackplateVisible = false;\r\n\r\n        this._followButton.onToggleObservable.add((isToggled) => {\r\n            this._defaultBehavior.followBehaviorEnabled = isToggled;\r\n            if (this._defaultBehavior.followBehaviorEnabled) {\r\n                this._defaultBehavior.followBehavior.recenter();\r\n            }\r\n        });\r\n\r\n        this._closeButton.onPointerClickObservable.add(() => {\r\n            this.dispose();\r\n        });\r\n\r\n        node.rotationQuaternion = Quaternion.Identity();\r\n        node.isVisible = false;\r\n\r\n        return node;\r\n    }\r\n\r\n    private _attachContentPlateBehavior() {\r\n        this._contentDragBehavior.attach(this._contentPlate);\r\n        this._contentDragBehavior.moveAttached = false;\r\n        this._contentDragBehavior.useObjectOrientationForDragging = true;\r\n        this._contentDragBehavior.updateDragPlane = false;\r\n\r\n        const origin = new Vector3();\r\n        const worldDimensions = new Vector3();\r\n        const upWorld = new Vector3();\r\n        const rightWorld = new Vector3();\r\n        const projectedOffset = new Vector2();\r\n        let startViewport: Viewport;\r\n        let worldMatrix: Matrix;\r\n\r\n        this._contentDragBehavior.onDragStartObservable.add((event) => {\r\n            if (!this.node) {\r\n                return;\r\n            }\r\n            startViewport = this._contentViewport.clone();\r\n            worldMatrix = this.node.computeWorldMatrix(true);\r\n\r\n            origin.copyFrom(event.dragPlanePoint);\r\n            worldDimensions.set(this.dimensions.x, this.dimensions.y, Epsilon);\r\n            worldDimensions.y -= this.titleBarHeight + this.titleBarMargin;\r\n            Vector3.TransformNormalToRef(worldDimensions, worldMatrix, worldDimensions);\r\n            upWorld.copyFromFloats(0, 1, 0);\r\n            Vector3.TransformNormalToRef(upWorld, worldMatrix, upWorld);\r\n            rightWorld.copyFromFloats(1, 0, 0);\r\n            Vector3.TransformNormalToRef(rightWorld, worldMatrix, rightWorld);\r\n            upWorld.normalize();\r\n            upWorld.scaleInPlace(1 / Vector3.Dot(upWorld, worldDimensions));\r\n            rightWorld.normalize();\r\n            rightWorld.scaleInPlace(1 / Vector3.Dot(rightWorld, worldDimensions));\r\n        });\r\n\r\n        const offset = new Vector3();\r\n        this._contentDragBehavior.onDragObservable.add((event) => {\r\n            offset.copyFrom(event.dragPlanePoint);\r\n            offset.subtractInPlace(origin);\r\n            projectedOffset.copyFromFloats(Vector3.Dot(offset, rightWorld), Vector3.Dot(offset, upWorld));\r\n\r\n            // By default, content takes full width available and height is cropped to keep aspect ratio\r\n            this._contentViewport.x = Scalar.Clamp(startViewport.x - offset.x, 0, 1 - this._contentViewport.width * this._contentScaleRatio);\r\n            this._contentViewport.y = Scalar.Clamp(startViewport.y - offset.y, 0, 1 - this._contentViewport.height * this._contentScaleRatio);\r\n            this._applyContentViewport();\r\n        });\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        // TODO share materials\r\n        this._titleBarMaterial = new FluentBackplateMaterial(`${this.name} plateMaterial`, mesh.getScene());\r\n\r\n        this._contentMaterial = new FluentMaterial(`${this.name} contentMaterial`, mesh.getScene());\r\n        this._contentMaterial.renderBorders = true;\r\n\r\n        this._backMaterial = new FluentBackplateMaterial(`${this.name} backPlate`, mesh.getScene());\r\n        this._backMaterial.lineWidth = Epsilon;\r\n        this._backMaterial.radius = 0.005;\r\n        this._backMaterial.backFaceCulling = true;\r\n\r\n        this._titleBar.material = this._titleBarMaterial;\r\n        this._contentPlate.material = this._contentMaterial;\r\n        this._backPlate.material = this._backMaterial;\r\n\r\n        this._resetContent();\r\n        this._applyContentViewport();\r\n    }\r\n\r\n    /**\r\n     * @internal*\r\n     */\r\n    public _prepareNode(scene: Scene): void {\r\n        super._prepareNode(scene);\r\n        this._gizmo = new SlateGizmo(this._host.utilityLayer!);\r\n        this._gizmo.attachedSlate = this;\r\n        this._defaultBehavior = new DefaultBehavior();\r\n        this._defaultBehavior.attach(this.node as Mesh, [this._titleBar]);\r\n        this._defaultBehavior.sixDofDragBehavior.onDragStartObservable.add(() => {\r\n            this._followButton.isToggled = false;\r\n        });\r\n\r\n        this._positionChangedObserver = this._defaultBehavior.sixDofDragBehavior.onPositionChangedObservable.add(() => {\r\n            this._gizmo.updateBoundingBox();\r\n        });\r\n\r\n        this._updatePivot();\r\n        this.resetDefaultAspectAndPose(false);\r\n    }\r\n\r\n    /**\r\n     * Resets the aspect and pose of the slate so it is right in front of the active camera, facing towards it.\r\n     * @param resetAspect Should the slate's dimensions/aspect ratio be reset as well\r\n     */\r\n    public resetDefaultAspectAndPose(resetAspect: boolean = true) {\r\n        if (!this._host || !this._host.utilityLayer || !this.node) {\r\n            return;\r\n        }\r\n        const scene = this._host.utilityLayer.utilityLayerScene;\r\n        const camera = scene.activeCamera;\r\n        if (camera) {\r\n            const worldMatrix = camera.getWorldMatrix();\r\n            const backward = Vector3.TransformNormal(Vector3.Backward(scene.useRightHandedSystem), worldMatrix);\r\n            this.origin.setAll(0);\r\n            this._gizmo.updateBoundingBox();\r\n            const pivot = this.node.getAbsolutePivotPoint();\r\n            this.node.position.copyFrom(camera.position).subtractInPlace(backward).subtractInPlace(pivot);\r\n            this.node.rotationQuaternion = Quaternion.FromLookDirectionLH(backward, new Vector3(0, 1, 0));\r\n\r\n            if (resetAspect) {\r\n                this.dimensions = this.defaultDimensions;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n        this._titleBarMaterial.dispose();\r\n        this._contentMaterial.dispose();\r\n\r\n        this._titleBar.dispose();\r\n        this._titleBarTitle.dispose();\r\n        this._contentPlate.dispose();\r\n        this._backPlate.dispose();\r\n\r\n        this._followButton.dispose();\r\n        this._closeButton.dispose();\r\n\r\n        this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n        this._defaultBehavior.sixDofDragBehavior.onPositionChangedObservable.remove(this._positionChangedObserver);\r\n\r\n        this._defaultBehavior.detach();\r\n        this._gizmo.dispose();\r\n        this._contentDragBehavior.detach();\r\n    }\r\n}\r\n","import type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\nimport { Button3D } from \"./button3D\";\r\n\r\n/**\r\n * Class used to create an interactable object. It's a 3D button using a mesh coming from the current scene\r\n */\r\nexport class MeshButton3D extends Button3D {\r\n    /** @internal */\r\n    protected _currentMesh: Mesh;\r\n\r\n    /**\r\n     * Creates a new 3D button based on a mesh\r\n     * @param mesh mesh to become a 3D button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(mesh: Mesh, name?: string) {\r\n        super(name);\r\n        this._currentMesh = mesh;\r\n\r\n        /**\r\n         * Provides a default behavior on hover/out & up/down\r\n         * Override those function to create your own desired behavior specific to your mesh\r\n         */\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.1);\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 1.1);\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MeshButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._currentMesh.getChildMeshes().forEach((mesh) => {\r\n            this._injectGUI3DReservedDataStore(mesh).control = this;\r\n        });\r\n        return this._currentMesh;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected _affectMaterial(mesh: AbstractMesh) {}\r\n}\r\n","import type { Scene } from \"core/scene\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport { TouchHolographicButton } from \"./touchHolographicButton\";\r\nimport { DefaultBehavior } from \"../behaviors/defaultBehavior\";\r\nimport { TouchHolographicMenu } from \"./touchHolographicMenu\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport type { Vector3 } from \"core/Maths/math.vector\";\r\nimport type { PickingInfo } from \"core/Collisions/pickingInfo\";\r\n\r\n/**\r\n * NearMenu that displays buttons and follows the camera\r\n * @since 5.0.0\r\n */\r\nexport class NearMenu extends TouchHolographicMenu {\r\n    /**\r\n     * Base Url for the assets.\r\n     */\r\n    private static _ASSETS_BASE_URL: string = \"https://assets.babylonjs.com/meshes/MRTK/\";\r\n    /**\r\n     * File name for the close icon.\r\n     */\r\n    private static _PIN_ICON_FILENAME: string = \"IconPin.png\";\r\n\r\n    private _pinButton: TouchHolographicButton;\r\n    private _dragObserver: Nullable<\r\n        Observer<{\r\n            delta: Vector3;\r\n            position: Vector3;\r\n            pickInfo: PickingInfo;\r\n        }>\r\n    >;\r\n\r\n    private _defaultBehavior: DefaultBehavior;\r\n    /**\r\n     * Regroups all mesh behaviors for the near menu\r\n     */\r\n    public get defaultBehavior(): DefaultBehavior {\r\n        return this._defaultBehavior;\r\n    }\r\n\r\n    private _isPinned: boolean = false;\r\n    /**\r\n     * Indicates if the near menu is world-pinned\r\n     */\r\n    public get isPinned(): boolean {\r\n        return this._isPinned;\r\n    }\r\n\r\n    public set isPinned(value: boolean) {\r\n        // Tell the pin button to toggle if this was called manually, for clean state control\r\n        if (this._pinButton.isToggled !== value) {\r\n            this._pinButton.isToggled = value;\r\n            return;\r\n        }\r\n\r\n        this._isPinned = value;\r\n\r\n        if (value) {\r\n            this._defaultBehavior.followBehaviorEnabled = false;\r\n        } else {\r\n            this._defaultBehavior.followBehaviorEnabled = true;\r\n        }\r\n    }\r\n\r\n    private _createPinButton(parent: TransformNode) {\r\n        const control = new TouchHolographicButton(\"pin\" + this.name, false);\r\n        control.imageUrl = NearMenu._ASSETS_BASE_URL + NearMenu._PIN_ICON_FILENAME;\r\n        control.parent = this;\r\n        control._host = this._host;\r\n        control.isToggleButton = true;\r\n        control.onToggleObservable.add((newState) => {\r\n            this.isPinned = newState;\r\n        });\r\n\r\n        if (this._host.utilityLayer) {\r\n            control._prepareNode(this._host.utilityLayer.utilityLayerScene);\r\n            control.scaling.scaleInPlace(TouchHolographicMenu.MENU_BUTTON_SCALE);\r\n\r\n            if (control.node) {\r\n                control.node.parent = parent;\r\n            }\r\n        }\r\n\r\n        return control;\r\n    }\r\n\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        const node = super._createNode(scene)! as Mesh;\r\n\r\n        this._pinButton = this._createPinButton(node);\r\n        this.isPinned = false;\r\n\r\n        this._defaultBehavior.attach(node, [this._backPlate]);\r\n        this._defaultBehavior.followBehavior.ignoreCameraPitchAndRoll = true;\r\n        this._defaultBehavior.followBehavior.pitchOffset = -15;\r\n        this._defaultBehavior.followBehavior.minimumDistance = 0.3;\r\n        this._defaultBehavior.followBehavior.defaultDistance = 0.4;\r\n        this._defaultBehavior.followBehavior.maximumDistance = 0.6;\r\n\r\n        this._backPlate.isNearGrabbable = true;\r\n        node.isVisible = false;\r\n\r\n        return node;\r\n    }\r\n\r\n    protected _finalProcessing() {\r\n        super._finalProcessing();\r\n\r\n        this._pinButton.position.copyFromFloats((this._backPlate.scaling.x + TouchHolographicMenu.MENU_BUTTON_SCALE) / 2, this._backPlate.scaling.y / 2, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a near menu GUI 3D control\r\n     * @param name name of the near menu\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n\r\n        this._defaultBehavior = new DefaultBehavior();\r\n        this._dragObserver = this._defaultBehavior.sixDofDragBehavior.onDragObservable.add(() => {\r\n            this.isPinned = true;\r\n        });\r\n\r\n        this.backPlateMargin = 1;\r\n    }\r\n\r\n    /**\r\n     * Disposes the near menu\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this._defaultBehavior.sixDofDragBehavior.onDragObservable.remove(this._dragObserver);\r\n        this._defaultBehavior.detach();\r\n    }\r\n}\r\n","import { TmpVectors, Vector3 } from \"core/Maths/math.vector\";\r\n\r\nimport { Container3D } from \"./container3D\";\r\nimport type { Control3D } from \"./control3D\";\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a plane\r\n */\r\nexport class PlanePanel extends VolumeBasedPanel {\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        const mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        control.position = nodePosition.clone();\r\n        const target = TmpVectors.Vector3[0];\r\n\r\n        target.copyFrom(nodePosition);\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                target.addInPlace(new Vector3(0, 0, 1));\r\n                mesh.lookAt(target);\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                target.addInPlace(new Vector3(0, 0, -1));\r\n                mesh.lookAt(target);\r\n                break;\r\n        }\r\n    }\r\n}\r\n","import { Tools } from \"core/Misc/tools\";\r\nimport { TmpVectors, Vector3 } from \"core/Maths/math.vector\";\r\nimport type { float } from \"core/types\";\r\n\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport type { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel where items get randomized planar mapping\r\n */\r\nexport class ScatterPanel extends VolumeBasedPanel {\r\n    private _iteration = 100.0;\r\n\r\n    /**\r\n     * Gets or sets the number of iteration to use to scatter the controls (100 by default)\r\n     */\r\n    public get iteration(): float {\r\n        return this._iteration;\r\n    }\r\n\r\n    public set iteration(value: float) {\r\n        if (this._iteration === value) {\r\n            return;\r\n        }\r\n\r\n        this._iteration = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        const mesh = control.mesh;\r\n        const newPos = this._scatterMapping(nodePosition);\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, 1));\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, -1));\r\n                break;\r\n        }\r\n\r\n        control.position = newPos;\r\n    }\r\n\r\n    private _scatterMapping(source: Vector3): Vector3 {\r\n        source.x = (1.0 - Math.random() * 2.0) * this._cellWidth;\r\n        source.y = (1.0 - Math.random() * 2.0) * this._cellHeight;\r\n\r\n        return source;\r\n    }\r\n\r\n    protected _finalProcessing() {\r\n        const meshes = [];\r\n        for (const child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            meshes.push(child.mesh);\r\n        }\r\n\r\n        for (let count = 0; count < this._iteration; count++) {\r\n            meshes.sort((a, b) => {\r\n                const distance1 = a.position.lengthSquared();\r\n                const distance2 = b.position.lengthSquared();\r\n\r\n                if (distance1 < distance2) {\r\n                    return 1;\r\n                } else if (distance1 > distance2) {\r\n                    return -1;\r\n                }\r\n\r\n                return 0;\r\n            });\r\n\r\n            const radiusPaddingSquared = Math.pow(this.margin, 2.0);\r\n            const cellSize = Math.max(this._cellWidth, this._cellHeight);\r\n            const difference2D = TmpVectors.Vector2[0];\r\n            const difference = TmpVectors.Vector3[0];\r\n\r\n            for (let i = 0; i < meshes.length - 1; i++) {\r\n                for (let j = i + 1; j < meshes.length; j++) {\r\n                    if (i != j) {\r\n                        meshes[j].position.subtractToRef(meshes[i].position, difference);\r\n\r\n                        // Ignore Z axis\r\n                        difference2D.x = difference.x;\r\n                        difference2D.y = difference.y;\r\n                        const combinedRadius = cellSize;\r\n                        let distance = difference2D.lengthSquared() - radiusPaddingSquared;\r\n                        const minSeparation = Math.min(distance, radiusPaddingSquared);\r\n                        distance -= minSeparation;\r\n\r\n                        if (distance < Math.pow(combinedRadius, 2.0)) {\r\n                            difference2D.normalize();\r\n                            difference.scaleInPlace((combinedRadius - Math.sqrt(distance)) * 0.5);\r\n                            meshes[j].position.addInPlace(difference);\r\n                            meshes[i].position.subtractInPlace(difference);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"mrdlSliderBarPixelShader\";\nconst shader = `uniform vec3 cameraPosition;varying vec3 vPosition;varying vec3 vNormal;varying vec2 vUV;varying vec3 vTangent;varying vec3 vBinormal;varying vec4 vColor;varying vec4 vExtra1;varying vec4 vExtra2;varying vec4 vExtra3;uniform float _Radius_;uniform float _Bevel_Front_;uniform float _Bevel_Front_Stretch_;uniform float _Bevel_Back_;uniform float _Bevel_Back_Stretch_;uniform float _Radius_Top_Left_;uniform float _Radius_Top_Right_;uniform float _Radius_Bottom_Left_;uniform float _Radius_Bottom_Right_;uniform bool _Bulge_Enabled_;uniform float _Bulge_Height_;uniform float _Bulge_Radius_;uniform float _Sun_Intensity_;uniform float _Sun_Theta_;uniform float _Sun_Phi_;uniform float _Indirect_Diffuse_;uniform vec4 _Albedo_;uniform float _Specular_;uniform float _Shininess_;uniform float _Sharpness_;uniform float _Subsurface_;uniform vec4 _Left_Color_;uniform vec4 _Right_Color_;uniform float _Reflection_;uniform float _Front_Reflect_;uniform float _Edge_Reflect_;uniform float _Power_;uniform vec4 _Sky_Color_;uniform vec4 _Horizon_Color_;uniform vec4 _Ground_Color_;uniform float _Horizon_Power_;uniform sampler2D _Reflection_Map_;uniform sampler2D _Indirect_Environment_;uniform float _Width_;uniform float _Fuzz_;uniform float _Min_Fuzz_;uniform float _Clip_Fade_;uniform float _Hue_Shift_;uniform float _Saturation_Shift_;uniform float _Value_Shift_;uniform vec3 _Blob_Position_;uniform float _Blob_Intensity_;uniform float _Blob_Near_Size_;uniform float _Blob_Far_Size_;uniform float _Blob_Near_Distance_;uniform float _Blob_Far_Distance_;uniform float _Blob_Fade_Length_;uniform float _Blob_Pulse_;uniform float _Blob_Fade_;uniform sampler2D _Blob_Texture_;uniform vec3 _Blob_Position_2_;uniform float _Blob_Near_Size_2_;uniform float _Blob_Pulse_2_;uniform float _Blob_Fade_2_;uniform vec3 _Left_Index_Pos_;uniform vec3 _Right_Index_Pos_;uniform vec3 _Left_Index_Middle_Pos_;uniform vec3 _Right_Index_Middle_Pos_;uniform sampler2D _Decal_;uniform vec2 _Decal_Scale_XY_;uniform bool _Decal_Front_Only_;uniform float _Rim_Intensity_;uniform sampler2D _Rim_Texture_;uniform float _Rim_Hue_Shift_;uniform float _Rim_Saturation_Shift_;uniform float _Rim_Value_Shift_;uniform float _Iridescence_Intensity_;uniform sampler2D _Iridescence_Texture_;uniform bool Use_Global_Left_Index;uniform bool Use_Global_Right_Index;uniform vec4 Global_Left_Index_Tip_Position;uniform vec4 Global_Right_Index_Tip_Position;uniform vec4 Global_Left_Thumb_Tip_Position;uniform vec4 Global_Right_Thumb_Tip_Position;uniform vec4 Global_Left_Index_Middle_Position;uniform vec4 Global_Right_Index_Middle_Position;uniform float Global_Left_Index_Tip_Proximity;uniform float Global_Right_Index_Tip_Proximity;void Blob_Fragment_B30(\nsampler2D Blob_Texture,\nvec4 Blob_Info1,\nvec4 Blob_Info2,\nout vec4 Blob_Color)\n{float k1=dot(Blob_Info1.xy,Blob_Info1.xy);float k2=dot(Blob_Info2.xy,Blob_Info2.xy);vec3 closer=k1<k2 ? vec3(k1,Blob_Info1.z,Blob_Info1.w) : vec3(k2,Blob_Info2.z,Blob_Info2.w);Blob_Color=closer.z*texture(Blob_Texture,vec2(vec2(sqrt(closer.x),closer.y).x,1.0-vec2(sqrt(closer.x),closer.y).y))*clamp(1.0-closer.x,0.0,1.0);}\nvoid FastLinearTosRGB_B42(\nvec4 Linear,\nout vec4 sRGB)\n{sRGB.rgb=sqrt(clamp(Linear.rgb,0.0,1.0));sRGB.a=Linear.a;}\nvoid Scale_RGB_B59(\nvec4 Color,\nfloat Scalar,\nout vec4 Result)\n{Result=vec4(Scalar,Scalar,Scalar,1)*Color;}\nvoid Fragment_Main_B121(\nfloat Sun_Intensity,\nfloat Sun_Theta,\nfloat Sun_Phi,\nvec3 Normal,\nvec4 Albedo,\nfloat Fresnel_Reflect,\nfloat Shininess,\nvec3 Incident,\nvec4 Horizon_Color,\nvec4 Sky_Color,\nvec4 Ground_Color,\nfloat Indirect_Diffuse,\nfloat Specular,\nfloat Horizon_Power,\nfloat Reflection,\nvec4 Reflection_Sample,\nvec4 Indirect_Sample,\nfloat Sharpness,\nfloat SSS,\nfloat Subsurface,\nvec4 Translucence,\nvec4 Rim_Light,\nvec4 Iridescence,\nout vec4 Result)\n{float theta=Sun_Theta*2.0*3.14159;float phi=Sun_Phi*3.14159;vec3 lightDir= vec3(cos(phi)*cos(theta),sin(phi),cos(phi)*sin(theta));float NdotL=max(dot(lightDir,Normal),0.0);vec3 R=reflect(Incident,Normal);float RdotL=max(0.0,dot(R,lightDir));float specular=pow(RdotL,Shininess);specular=mix(specular,smoothstep(0.495*Sharpness,1.0-0.495*Sharpness,specular),Sharpness);vec4 gi=mix(Ground_Color,Sky_Color,Normal.y*0.5+0.5);Result=((Sun_Intensity*NdotL+Indirect_Sample*Indirect_Diffuse+Translucence)*(1.0+SSS*Subsurface))*Albedo*(1.0-Fresnel_Reflect)+(Sun_Intensity*specular*Specular+Fresnel_Reflect*Reflection*Reflection_Sample)+Fresnel_Reflect*Rim_Light+Iridescence;}\nvoid Bulge_B79(\nbool Enabled,\nvec3 Normal,\nvec3 Tangent,\nfloat Bulge_Height,\nvec4 UV,\nfloat Bulge_Radius,\nvec3 ButtonN,\nout vec3 New_Normal)\n{vec2 xy=clamp(UV.xy*2.0,vec2(-1,-1),vec2(1,1));vec3 B=(cross(Normal,Tangent));float k=-clamp(1.0-length(xy)/Bulge_Radius,0.0,1.0)*Bulge_Height;k=sin(k*3.14159*0.5);k*=smoothstep(0.9998,0.9999,abs(dot(ButtonN,Normal)));New_Normal=Normal*sqrt(1.0-k*k)+(xy.x*Tangent+xy.y*B)*k;New_Normal=Enabled ? New_Normal : Normal;}\nvoid SSS_B77(\nvec3 ButtonN,\nvec3 Normal,\nvec3 Incident,\nout float Result)\n{float NdotI=abs(dot(Normal,Incident));float BdotI=abs(dot(ButtonN,Incident));Result=(abs(NdotI-BdotI)); }\nvoid FingerOcclusion_B67(\nfloat Width,\nfloat DistToCenter,\nfloat Fuzz,\nfloat Min_Fuzz,\nvec3 Position,\nvec3 Forward,\nvec3 Nearest,\nfloat Fade_Out,\nout float NotInShadow)\n{float d=dot((Nearest-Position),Forward);float sh=smoothstep(Width*0.5,Width*0.5+Fuzz*max(d,0.0)+Min_Fuzz,DistToCenter);NotInShadow=1.0-(1.0-sh)*smoothstep(-Fade_Out,0.0,d);}\nvoid FingerOcclusion_B68(\nfloat Width,\nfloat DistToCenter,\nfloat Fuzz,\nfloat Min_Fuzz,\nvec3 Position,\nvec3 Forward,\nvec3 Nearest,\nfloat Fade_Out,\nout float NotInShadow)\n{float d=dot((Nearest-Position),Forward);float sh=smoothstep(Width*0.5,Width*0.5+Fuzz*max(d,0.0)+Min_Fuzz,DistToCenter);NotInShadow=1.0-(1.0-sh)*smoothstep(-Fade_Out,0.0,d);}\nvoid Scale_Color_B91(\nvec4 Color,\nfloat Scalar,\nout vec4 Result)\n{Result=Scalar*Color;}\nvoid From_HSV_B73(\nfloat Hue,\nfloat Saturation,\nfloat Value,\nfloat Alpha,\nout vec4 Color)\n{vec4 K=vec4(1.0,2.0/3.0,1.0/3.0,3.0);vec3 p=abs(fract(vec3(Hue,Hue,Hue)+K.xyz)*6.0-K.www);Color.rgb=Value*mix(K.xxx,clamp(p-K.xxx,0.0,1.0),Saturation);Color.a=Alpha;}\nvoid Fast_Fresnel_B122(\nfloat Front_Reflect,\nfloat Edge_Reflect,\nfloat Power,\nvec3 Normal,\nvec3 Incident,\nout float Transmit,\nout float Reflect)\n{float d=max(-dot(Incident,Normal),0.0);Reflect=Front_Reflect+(Edge_Reflect-Front_Reflect)*pow(.01-d,Power);Transmit=1.0-Reflect;}\nvoid Mapped_Environment_B51(\nsampler2D Reflected_Environment,\nsampler2D Indirect_Environment,\nvec3 Dir,\nout vec4 Reflected_Color,\nout vec4 Indirect_Diffuse)\n{Reflected_Color=texture(Reflected_Environment,vec2(atan(Dir.z,Dir.x)/3.14159*0.5,asin(Dir.y)/3.14159+0.5));Indirect_Diffuse=texture(Indirect_Environment,vec2(atan(Dir.z,Dir.x)/3.14159*0.5,asin(Dir.y)/3.14159+0.5));}\nvec4 SampleEnv_Bid50(vec3 D,vec4 S,vec4 H,vec4 G,float exponent)\n{float k=pow(abs(D.y),exponent);vec4 C;if (D.y>0.0) {C=mix(H,S,k);} else {C=mix(H,G,k); }\nreturn C;}\nvoid Sky_Environment_B50(\nvec3 Normal,\nvec3 Reflected,\nvec4 Sky_Color,\nvec4 Horizon_Color,\nvec4 Ground_Color,\nfloat Horizon_Power,\nout vec4 Reflected_Color,\nout vec4 Indirect_Color)\n{Reflected_Color=SampleEnv_Bid50(Reflected,Sky_Color,Horizon_Color,Ground_Color,Horizon_Power);Indirect_Color=mix(Ground_Color,Sky_Color,Normal.y*0.5+0.5);}\nvoid Min_Segment_Distance_B65(\nvec3 P0,\nvec3 P1,\nvec3 Q0,\nvec3 Q1,\nout vec3 NearP,\nout vec3 NearQ,\nout float Distance)\n{vec3 u=P1-P0;vec3 v=Q1-Q0;vec3 w=P0-Q0;float a=dot(u,u);float b=dot(u,v);float c=dot(v,v);float d=dot(u,w);float e=dot(v,w);float D=a*c-b*b;float sD=D;float tD=D;float sc,sN,tc,tN;if (D<0.00001) {sN=0.0;sD=1.0;tN=e;tD=c;} else {sN=(b*e-c*d);tN=(a*e-b*d);if (sN<0.0) {sN=0.0;tN=e;tD=c;} else if (sN>sD) {sN=sD;tN=e+b;tD=c;}}\nif (tN<0.0) {tN=0.0;if (-d<0.0) {sN=0.0;} else if (-d>a) {sN=sD;} else {sN=-d;sD=a;}} else if (tN>tD) {tN=tD;if ((-d+b)<0.0) {sN=0.0;} else if ((-d+b)>a) {sN=sD;} else {sN=(-d+b);sD=a;}}\nsc=abs(sN)<0.000001 ? 0.0 : sN/sD;tc=abs(tN)<0.000001 ? 0.0 : tN/tD;NearP=P0+sc*u;NearQ=Q0+tc*v;Distance=distance(NearP,NearQ);}\nvoid To_XYZ_B74(\nvec3 Vec3,\nout float X,\nout float Y,\nout float Z)\n{X=Vec3.x;Y=Vec3.y;Z=Vec3.z;}\nvoid Finger_Positions_B64(\nvec3 Left_Index_Pos,\nvec3 Right_Index_Pos,\nvec3 Left_Index_Middle_Pos,\nvec3 Right_Index_Middle_Pos,\nout vec3 Left_Index,\nout vec3 Right_Index,\nout vec3 Left_Index_Middle,\nout vec3 Right_Index_Middle)\n{Left_Index= (Use_Global_Left_Index ? Global_Left_Index_Tip_Position.xyz : Left_Index_Pos);Right_Index= (Use_Global_Right_Index ? Global_Right_Index_Tip_Position.xyz : Right_Index_Pos);Left_Index_Middle= (Use_Global_Left_Index ? Global_Left_Index_Middle_Position.xyz : Left_Index_Middle_Pos);Right_Index_Middle= (Use_Global_Right_Index ? Global_Right_Index_Middle_Position.xyz : Right_Index_Middle_Pos);}\nvoid VaryHSV_B108(\nvec3 HSV_In,\nfloat Hue_Shift,\nfloat Saturation_Shift,\nfloat Value_Shift,\nout vec3 HSV_Out)\n{HSV_Out=vec3(fract(HSV_In.x+Hue_Shift),clamp(HSV_In.y+Saturation_Shift,0.0,1.0),clamp(HSV_In.z+Value_Shift,0.0,1.0));}\nvoid Remap_Range_B114(\nfloat In_Min,\nfloat In_Max,\nfloat Out_Min,\nfloat Out_Max,\nfloat In,\nout float Out)\n{Out=mix(Out_Min,Out_Max,clamp((In-In_Min)/(In_Max-In_Min),0.0,1.0));}\nvoid To_HSV_B75(\nvec4 Color,\nout float Hue,\nout float Saturation,\nout float Value,\nout float Alpha,\nout vec3 HSV)\n{vec4 K=vec4(0.0,-1.0/3.0,2.0/3.0,-1.0);vec4 p=Color.g<Color.b ? vec4(Color.bg,K.wz) : vec4(Color.gb,K.xy);vec4 q=Color.r<p.x ? vec4(p.xyw,Color.r) : vec4(Color.r,p.yzx);float d=q.x-min(q.w,q.y);float e=1.0e-10;Hue=abs(q.z+(q.w-q.y)/(6.0*d+e));Saturation=d/(q.x+e);Value=q.x;Alpha=Color.a;HSV=vec3(Hue,Saturation,Value);}\nvoid Code_B110(\nfloat X,\nout float Result)\n{Result=(acos(X)/3.14159-0.5)*2.0;}\nvoid Rim_Light_B132(\nvec3 Front,\nvec3 Normal,\nvec3 Incident,\nfloat Rim_Intensity,\nsampler2D Texture,\nout vec4 Result)\n{vec3 R=reflect(Incident,Normal);float RdotF=dot(R,Front);float RdotL=sqrt(1.0-RdotF*RdotF);vec2 UV=vec2(R.y*0.5+0.5,0.5);vec4 Color=texture(Texture,UV);Result=Color;}\nvoid main()\n{vec4 Blob_Color_Q30;\n#if BLOB_ENABLE\nBlob_Fragment_B30(_Blob_Texture_,vExtra2,vExtra3,Blob_Color_Q30);\n#else\nBlob_Color_Q30=vec4(0,0,0,0);\n#endif\nvec3 Incident_Q39=normalize(vPosition-cameraPosition);vec3 Normalized_Q38=normalize(vNormal);vec3 Normalized_Q71=normalize(vTangent);vec4 Color_Q83;\n#if DECAL_ENABLE\nColor_Q83=texture(_Decal_,vUV);\n#else\nColor_Q83=vec4(0,0,0,0);\n#endif\nfloat X_Q90;float Y_Q90;float Z_Q90;float W_Q90;X_Q90=vExtra1.x;Y_Q90=vExtra1.y;Z_Q90=vExtra1.z;W_Q90=vExtra1.w;vec4 Linear_Q43;Linear_Q43.rgb=clamp(_Sky_Color_.rgb*_Sky_Color_.rgb,0.0,1.0);Linear_Q43.a=_Sky_Color_.a;vec4 Linear_Q44;Linear_Q44.rgb=clamp(_Horizon_Color_.rgb*_Horizon_Color_.rgb,0.0,1.0);Linear_Q44.a=_Horizon_Color_.a;vec4 Linear_Q45;Linear_Q45.rgb=clamp(_Ground_Color_.rgb*_Ground_Color_.rgb,0.0,1.0);Linear_Q45.a=_Ground_Color_.a;vec3 Left_Index_Q64;vec3 Right_Index_Q64;vec3 Left_Index_Middle_Q64;vec3 Right_Index_Middle_Q64;Finger_Positions_B64(_Left_Index_Pos_,_Right_Index_Pos_,_Left_Index_Middle_Pos_,_Right_Index_Middle_Pos_,Left_Index_Q64,Right_Index_Q64,Left_Index_Middle_Q64,Right_Index_Middle_Q64);vec4 Linear_Q46;Linear_Q46.rgb=clamp(_Albedo_.rgb*_Albedo_.rgb,0.0,1.0);Linear_Q46.a=_Albedo_.a;vec3 Normalized_Q107=normalize(vBinormal);vec3 Incident_Q70=normalize(vPosition-cameraPosition);vec3 New_Normal_Q79;Bulge_B79(_Bulge_Enabled_,Normalized_Q38,Normalized_Q71,_Bulge_Height_,vColor,_Bulge_Radius_,vBinormal,New_Normal_Q79);float Result_Q77;SSS_B77(vBinormal,New_Normal_Q79,Incident_Q39,Result_Q77);vec4 Result_Q91;Scale_Color_B91(Color_Q83,X_Q90,Result_Q91);float Transmit_Q122;float Reflect_Q122;Fast_Fresnel_B122(_Front_Reflect_,_Edge_Reflect_,_Power_,New_Normal_Q79,Incident_Q39,Transmit_Q122,Reflect_Q122);float Product_Q125=Y_Q90*Y_Q90;vec3 NearP_Q65;vec3 NearQ_Q65;float Distance_Q65;Min_Segment_Distance_B65(Left_Index_Q64,Left_Index_Middle_Q64,vPosition,cameraPosition,NearP_Q65,NearQ_Q65,Distance_Q65);vec3 NearP_Q63;vec3 NearQ_Q63;float Distance_Q63;Min_Segment_Distance_B65(Right_Index_Q64,Right_Index_Middle_Q64,vPosition,cameraPosition,NearP_Q63,NearQ_Q63,Distance_Q63);vec3 Reflected_Q47=reflect(Incident_Q39,New_Normal_Q79);vec4 Product_Q103=Linear_Q46*vec4(1,1,1,1);vec4 Result_Q132;Rim_Light_B132(Normalized_Q107,Normalized_Q38,Incident_Q70,_Rim_Intensity_,_Rim_Texture_,Result_Q132);float Dot_Q72=dot(Incident_Q70, Normalized_Q71);float MaxAB_Q123=max(Reflect_Q122,Product_Q125);float NotInShadow_Q67;\n#if OCCLUSION_ENABLED\nFingerOcclusion_B67(_Width_,Distance_Q65,_Fuzz_,_Min_Fuzz_,vPosition,vBinormal,NearP_Q65,_Clip_Fade_,NotInShadow_Q67);\n#else\nNotInShadow_Q67=1.0;\n#endif\nfloat NotInShadow_Q68;\n#if OCCLUSION_ENABLED\nFingerOcclusion_B68(_Width_,Distance_Q63,_Fuzz_,_Min_Fuzz_,vPosition,vBinormal,NearP_Q63,_Clip_Fade_,NotInShadow_Q68);\n#else\nNotInShadow_Q68=1.0;\n#endif\nvec4 Reflected_Color_Q51;vec4 Indirect_Diffuse_Q51;\n#if ENV_ENABLE\nMapped_Environment_B51(_Reflection_Map_,_Indirect_Environment_,Reflected_Q47,Reflected_Color_Q51,Indirect_Diffuse_Q51);\n#else\nReflected_Color_Q51=vec4(0,0,0,1);Indirect_Diffuse_Q51=vec4(0,0,0,1);\n#endif\nvec4 Reflected_Color_Q50;vec4 Indirect_Color_Q50;\n#if SKY_ENABLED\nSky_Environment_B50(New_Normal_Q79,Reflected_Q47,Linear_Q43,Linear_Q44,Linear_Q45,_Horizon_Power_,Reflected_Color_Q50,Indirect_Color_Q50);\n#else\nReflected_Color_Q50=vec4(0,0,0,1);Indirect_Color_Q50=vec4(0,0,0,1);\n#endif\nfloat Hue_Q75;float Saturation_Q75;float Value_Q75;float Alpha_Q75;vec3 HSV_Q75;To_HSV_B75(Product_Q103,Hue_Q75,Saturation_Q75,Value_Q75,Alpha_Q75,HSV_Q75);float Hue_Q127;float Saturation_Q127;float Value_Q127;float Alpha_Q127;vec3 HSV_Q127;To_HSV_B75(Result_Q132,Hue_Q127,Saturation_Q127,Value_Q127,Alpha_Q127,HSV_Q127);float Result_Q110;Code_B110(Dot_Q72,Result_Q110);float AbsA_Q76=abs(Result_Q110);float MinAB_Q58=min(NotInShadow_Q67,NotInShadow_Q68);vec4 Sum_Q48=Reflected_Color_Q51+Reflected_Color_Q50;vec4 Sum_Q49=Indirect_Diffuse_Q51+Indirect_Color_Q50;vec3 HSV_Out_Q126;VaryHSV_B108(HSV_Q127,_Rim_Hue_Shift_,_Rim_Saturation_Shift_,_Rim_Value_Shift_,HSV_Out_Q126);float Out_Q114;Remap_Range_B114(-1.0,1.0,0.0,1.0,Result_Q110,Out_Q114);float Product_Q106;Product_Q106=AbsA_Q76*_Hue_Shift_;float X_Q128;float Y_Q128;float Z_Q128;To_XYZ_B74(HSV_Out_Q126,X_Q128,Y_Q128,Z_Q128);vec2 Vec2_Q112=vec2(Out_Q114,0.5);vec3 HSV_Out_Q108;VaryHSV_B108(HSV_Q75,Product_Q106,_Saturation_Shift_,_Value_Shift_,HSV_Out_Q108);vec4 Color_Q129;From_HSV_B73(X_Q128,Y_Q128,Z_Q128,0.0,Color_Q129);vec4 Color_Q111;\n#if IRIDESCENCE_ENABLED\nColor_Q111=texture(_Iridescence_Texture_,Vec2_Q112);\n#else\nColor_Q111=vec4(0,0,0,0);\n#endif\nfloat X_Q74;float Y_Q74;float Z_Q74;To_XYZ_B74(HSV_Out_Q108,X_Q74,Y_Q74,Z_Q74);vec4 Result_Q131=_Rim_Intensity_*Color_Q129;vec4 Result_Q113=_Iridescence_Intensity_*Color_Q111;vec4 Color_Q73;From_HSV_B73(X_Q74,Y_Q74,Z_Q74,0.0,Color_Q73);vec4 Result_Q84=Result_Q91+(1.0-Result_Q91.a)*Color_Q73;vec4 Result_Q121;Fragment_Main_B121(_Sun_Intensity_,_Sun_Theta_,_Sun_Phi_,New_Normal_Q79,Result_Q84,MaxAB_Q123,_Shininess_,Incident_Q39,_Horizon_Color_,_Sky_Color_,_Ground_Color_,_Indirect_Diffuse_,_Specular_,_Horizon_Power_,_Reflection_,Sum_Q48,Sum_Q49,_Sharpness_,Result_Q77,_Subsurface_,vec4(0,0,0,0),Result_Q131,Result_Q113,Result_Q121);vec4 Result_Q59;Scale_RGB_B59(Result_Q121,MinAB_Q58,Result_Q59);vec4 sRGB_Q42;FastLinearTosRGB_B42(Result_Q59,sRGB_Q42);vec4 Result_Q31=Blob_Color_Q30+(1.0-Blob_Color_Q30.a)*sRGB_Q42;vec4 Result_Q40=Result_Q31; Result_Q40.a=1.0;vec4 Out_Color=Result_Q40;float Clip_Threshold=0.001;bool To_sRGB=false;gl_FragColor=Out_Color;}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const mrdlSliderBarPixelShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"mrdlSliderBarVertexShader\";\nconst shader = `uniform mat4 world;uniform mat4 viewProjection;uniform vec3 cameraPosition;attribute vec3 position;attribute vec3 normal;attribute vec2 uv;\n#ifdef TANGENT\nattribute vec3 tangent;\n#else\nconst vec3 tangent=vec3(0.);\n#endif\nuniform float _Radius_;uniform float _Bevel_Front_;uniform float _Bevel_Front_Stretch_;uniform float _Bevel_Back_;uniform float _Bevel_Back_Stretch_;uniform float _Radius_Top_Left_;uniform float _Radius_Top_Right_;uniform float _Radius_Bottom_Left_;uniform float _Radius_Bottom_Right_;uniform bool _Bulge_Enabled_;uniform float _Bulge_Height_;uniform float _Bulge_Radius_;uniform float _Sun_Intensity_;uniform float _Sun_Theta_;uniform float _Sun_Phi_;uniform float _Indirect_Diffuse_;uniform vec4 _Albedo_;uniform float _Specular_;uniform float _Shininess_;uniform float _Sharpness_;uniform float _Subsurface_;uniform vec4 _Left_Color_;uniform vec4 _Right_Color_;uniform float _Reflection_;uniform float _Front_Reflect_;uniform float _Edge_Reflect_;uniform float _Power_;uniform vec4 _Sky_Color_;uniform vec4 _Horizon_Color_;uniform vec4 _Ground_Color_;uniform float _Horizon_Power_;uniform sampler2D _Reflection_Map_;uniform sampler2D _Indirect_Environment_;uniform float _Width_;uniform float _Fuzz_;uniform float _Min_Fuzz_;uniform float _Clip_Fade_;uniform float _Hue_Shift_;uniform float _Saturation_Shift_;uniform float _Value_Shift_;uniform vec3 _Blob_Position_;uniform float _Blob_Intensity_;uniform float _Blob_Near_Size_;uniform float _Blob_Far_Size_;uniform float _Blob_Near_Distance_;uniform float _Blob_Far_Distance_;uniform float _Blob_Fade_Length_;uniform float _Blob_Pulse_;uniform float _Blob_Fade_;uniform sampler2D _Blob_Texture_;uniform vec3 _Blob_Position_2_;uniform float _Blob_Near_Size_2_;uniform float _Blob_Pulse_2_;uniform float _Blob_Fade_2_;uniform vec3 _Left_Index_Pos_;uniform vec3 _Right_Index_Pos_;uniform vec3 _Left_Index_Middle_Pos_;uniform vec3 _Right_Index_Middle_Pos_;uniform sampler2D _Decal_;uniform vec2 _Decal_Scale_XY_;uniform bool _Decal_Front_Only_;uniform float _Rim_Intensity_;uniform sampler2D _Rim_Texture_;uniform float _Rim_Hue_Shift_;uniform float _Rim_Saturation_Shift_;uniform float _Rim_Value_Shift_;uniform float _Iridescence_Intensity_;uniform sampler2D _Iridescence_Texture_;uniform bool Use_Global_Left_Index;uniform bool Use_Global_Right_Index;uniform vec4 Global_Left_Index_Tip_Position;uniform vec4 Global_Right_Index_Tip_Position;uniform vec4 Global_Left_Thumb_Tip_Position;uniform vec4 Global_Right_Thumb_Tip_Position;uniform float Global_Left_Index_Tip_Proximity;uniform float Global_Right_Index_Tip_Proximity;varying vec3 vPosition;varying vec3 vNormal;varying vec2 vUV;varying vec3 vTangent;varying vec3 vBinormal;varying vec4 vColor;varying vec4 vExtra1;varying vec4 vExtra2;varying vec4 vExtra3;void Object_To_World_Pos_B12(\nvec3 Pos_Object,\nout vec3 Pos_World)\n{Pos_World=(world*vec4(Pos_Object,1.0)).xyz;}\nvoid Object_To_World_Normal_B32(\nvec3 Nrm_Object,\nout vec3 Nrm_World)\n{Nrm_World=(vec4(Nrm_Object,0.0)).xyz;}\nvoid Blob_Vertex_B23(\nvec3 Position,\nvec3 Normal,\nvec3 Tangent,\nvec3 Bitangent,\nvec3 Blob_Position,\nfloat Intensity,\nfloat Blob_Near_Size,\nfloat Blob_Far_Size,\nfloat Blob_Near_Distance,\nfloat Blob_Far_Distance,\nfloat Blob_Fade_Length,\nfloat Blob_Pulse,\nfloat Blob_Fade,\nout vec4 Blob_Info)\n{vec3 blob= (Use_Global_Left_Index ? Global_Left_Index_Tip_Position.xyz : Blob_Position);vec3 delta=blob-Position;float dist=dot(Normal,delta);float lerpValue=clamp((abs(dist)-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance),0.0,1.0);float fadeValue=1.0-clamp((abs(dist)-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);float size=Blob_Near_Size+(Blob_Far_Size-Blob_Near_Size)*lerpValue;vec2 blobXY=vec2(dot(delta,Tangent),dot(delta,Bitangent))/(0.0001+size);float Fade=fadeValue*Intensity*Blob_Fade;float Distance=(lerpValue*0.5+0.5)*(1.0-Blob_Pulse);Blob_Info=vec4(blobXY.x,blobXY.y,Distance,Fade);}\nvoid Blob_Vertex_B24(\nvec3 Position,\nvec3 Normal,\nvec3 Tangent,\nvec3 Bitangent,\nvec3 Blob_Position,\nfloat Intensity,\nfloat Blob_Near_Size,\nfloat Blob_Far_Size,\nfloat Blob_Near_Distance,\nfloat Blob_Far_Distance,\nfloat Blob_Fade_Length,\nfloat Blob_Pulse,\nfloat Blob_Fade,\nout vec4 Blob_Info)\n{vec3 blob= (Use_Global_Right_Index ? Global_Right_Index_Tip_Position.xyz : Blob_Position);vec3 delta=blob-Position;float dist=dot(Normal,delta);float lerpValue=clamp((abs(dist)-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance),0.0,1.0);float fadeValue=1.0-clamp((abs(dist)-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);float size=Blob_Near_Size+(Blob_Far_Size-Blob_Near_Size)*lerpValue;vec2 blobXY=vec2(dot(delta,Tangent),dot(delta,Bitangent))/(0.0001+size);float Fade=fadeValue*Intensity*Blob_Fade;float Distance=(lerpValue*0.5+0.5)*(1.0-Blob_Pulse);Blob_Info=vec4(blobXY.x,blobXY.y,Distance,Fade);}\nvoid Move_Verts_B130(\nfloat Anisotropy,\nvec3 P,\nfloat Radius,\nfloat Bevel,\nvec3 Normal_Object,\nfloat ScaleZ,\nfloat Stretch,\nout vec3 New_P,\nout vec2 New_UV,\nout float Radial_Gradient,\nout vec3 Radial_Dir,\nout vec3 New_Normal)\n{vec2 UV=P.xy*2.0+0.5;vec2 center=clamp(UV,0.0,1.0);vec2 delta=UV-center;float deltad=(length(delta)*2.0);float f=(Bevel+(Radius-Bevel)*Stretch)/Radius;float innerd=clamp(deltad*2.0,0.0,1.0);float outerd=clamp(deltad*2.0-1.0,0.0,1.0);float bevelAngle=outerd*3.14159*0.5;float sinb=sin(bevelAngle);float cosb=cos(bevelAngle);float beveld=(1.0-f)*innerd+f*sinb;float br=outerd;vec2 r2=2.0*vec2(Radius/Anisotropy,Radius);float dir=P.z<0.0001 ? 1.0 : -1.0;New_UV=center+r2*((0.5-center)+normalize(delta+vec2(0.0,0.000001))*beveld*0.5);New_P=vec3(New_UV-0.5,P.z+dir*(1.0-cosb)*Bevel*ScaleZ);Radial_Gradient=clamp((deltad-0.5)*2.0,0.0,1.0);Radial_Dir=vec3(delta*r2,0.0);vec3 beveledNormal=cosb*Normal_Object+sinb*vec3(delta.x,delta.y,0.0);New_Normal=Normal_Object.z==0.0 ? Normal_Object : beveledNormal;}\nvoid Object_To_World_Dir_B60(\nvec3 Dir_Object,\nout vec3 Normal_World,\nout vec3 Normal_World_N,\nout float Normal_Length)\n{Normal_World=(world*vec4(Dir_Object,0.0)).xyz;Normal_Length=length(Normal_World);Normal_World_N=Normal_World/Normal_Length;}\nvoid To_XYZ_B78(\nvec3 Vec3,\nout float X,\nout float Y,\nout float Z)\n{X=Vec3.x;Y=Vec3.y;Z=Vec3.z;}\nvoid Conditional_Float_B93(\nbool Which,\nfloat If_True,\nfloat If_False,\nout float Result)\n{Result=Which ? If_True : If_False;}\nvoid Object_To_World_Dir_B28(\nvec3 Dir_Object,\nout vec3 Binormal_World,\nout vec3 Binormal_World_N,\nout float Binormal_Length)\n{Binormal_World=(world*vec4(Dir_Object,0.0)).xyz;Binormal_Length=length(Binormal_World);Binormal_World_N=Binormal_World/Binormal_Length;}\nvoid Pick_Radius_B69(\nfloat Radius,\nfloat Radius_Top_Left,\nfloat Radius_Top_Right,\nfloat Radius_Bottom_Left,\nfloat Radius_Bottom_Right,\nvec3 Position,\nout float Result)\n{bool whichY=Position.y>0.0;Result=Position.x<0.0 ? (whichY ? Radius_Top_Left : Radius_Bottom_Left) : (whichY ? Radius_Top_Right : Radius_Bottom_Right);Result*=Radius;}\nvoid Conditional_Float_B36(\nbool Which,\nfloat If_True,\nfloat If_False,\nout float Result)\n{Result=Which ? If_True : If_False;}\nvoid Greater_Than_B37(\nfloat Left,\nfloat Right,\nout bool Not_Greater_Than,\nout bool Greater_Than)\n{Greater_Than=Left>Right;Not_Greater_Than=!Greater_Than;}\nvoid Remap_Range_B105(\nfloat In_Min,\nfloat In_Max,\nfloat Out_Min,\nfloat Out_Max,\nfloat In,\nout float Out)\n{Out=mix(Out_Min,Out_Max,clamp((In-In_Min)/(In_Max-In_Min),0.0,1.0));}\nvoid main()\n{vec2 XY_Q85;XY_Q85=(uv-vec2(0.5,0.5))*_Decal_Scale_XY_+vec2(0.5,0.5);vec3 Tangent_World_Q27;vec3 Tangent_World_N_Q27;float Tangent_Length_Q27;Tangent_World_Q27=(world*vec4(vec3(1,0,0),0.0)).xyz;Tangent_Length_Q27=length(Tangent_World_Q27);Tangent_World_N_Q27=Tangent_World_Q27/Tangent_Length_Q27;vec3 Normal_World_Q60;vec3 Normal_World_N_Q60;float Normal_Length_Q60;Object_To_World_Dir_B60(vec3(0,0,1),Normal_World_Q60,Normal_World_N_Q60,Normal_Length_Q60);float X_Q78;float Y_Q78;float Z_Q78;To_XYZ_B78(position,X_Q78,Y_Q78,Z_Q78);vec3 Nrm_World_Q26;Nrm_World_Q26=normalize((world*vec4(normal,0.0)).xyz);vec3 Binormal_World_Q28;vec3 Binormal_World_N_Q28;float Binormal_Length_Q28;Object_To_World_Dir_B28(vec3(0,1,0),Binormal_World_Q28,Binormal_World_N_Q28,Binormal_Length_Q28);float Anisotropy_Q29=Tangent_Length_Q27/Binormal_Length_Q28;float Result_Q69;Pick_Radius_B69(_Radius_,_Radius_Top_Left_,_Radius_Top_Right_,_Radius_Bottom_Left_,_Radius_Bottom_Right_,position,Result_Q69);float Anisotropy_Q53=Binormal_Length_Q28/Normal_Length_Q60;bool Not_Greater_Than_Q37;bool Greater_Than_Q37;Greater_Than_B37(Z_Q78,0.0,Not_Greater_Than_Q37,Greater_Than_Q37);vec4 Linear_Q101;Linear_Q101.rgb=clamp(_Left_Color_.rgb*_Left_Color_.rgb,0.0,1.0);Linear_Q101.a=_Left_Color_.a;vec4 Linear_Q102;Linear_Q102.rgb=clamp(_Right_Color_.rgb*_Right_Color_.rgb,0.0,1.0);Linear_Q102.a=_Right_Color_.a;vec3 Difference_Q61=vec3(0,0,0)-Normal_World_N_Q60;vec4 Out_Color_Q34=vec4(X_Q78,Y_Q78,Z_Q78,1);float Result_Q36;Conditional_Float_B36(Greater_Than_Q37,_Bevel_Back_,_Bevel_Front_,Result_Q36);float Result_Q94;Conditional_Float_B36(Greater_Than_Q37,_Bevel_Back_Stretch_,_Bevel_Front_Stretch_,Result_Q94);vec3 New_P_Q130;vec2 New_UV_Q130;float Radial_Gradient_Q130;vec3 Radial_Dir_Q130;vec3 New_Normal_Q130;Move_Verts_B130(Anisotropy_Q29,position,Result_Q69,Result_Q36,normal,Anisotropy_Q53,Result_Q94,New_P_Q130,New_UV_Q130,Radial_Gradient_Q130,Radial_Dir_Q130,New_Normal_Q130);float X_Q98;float Y_Q98;X_Q98=New_UV_Q130.x;Y_Q98=New_UV_Q130.y;vec3 Pos_World_Q12;Object_To_World_Pos_B12(New_P_Q130,Pos_World_Q12);vec3 Nrm_World_Q32;Object_To_World_Normal_B32(New_Normal_Q130,Nrm_World_Q32);vec4 Blob_Info_Q23;\n#if BLOB_ENABLE\nBlob_Vertex_B23(Pos_World_Q12,Nrm_World_Q26,Tangent_World_N_Q27,Binormal_World_N_Q28,_Blob_Position_,_Blob_Intensity_,_Blob_Near_Size_,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,_Blob_Fade_Length_,_Blob_Pulse_,_Blob_Fade_,Blob_Info_Q23);\n#else\nBlob_Info_Q23=vec4(0,0,0,0);\n#endif\nvec4 Blob_Info_Q24;\n#if BLOB_ENABLE_2\nBlob_Vertex_B24(Pos_World_Q12,Nrm_World_Q26,Tangent_World_N_Q27,Binormal_World_N_Q28,_Blob_Position_2_,_Blob_Intensity_,_Blob_Near_Size_2_,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,_Blob_Fade_Length_,_Blob_Pulse_2_,_Blob_Fade_2_,Blob_Info_Q24);\n#else\nBlob_Info_Q24=vec4(0,0,0,0);\n#endif\nfloat Out_Q105;Remap_Range_B105(0.0,1.0,0.0,1.0,X_Q98,Out_Q105);float X_Q86;float Y_Q86;float Z_Q86;To_XYZ_B78(Nrm_World_Q32,X_Q86,Y_Q86,Z_Q86);vec4 Color_At_T_Q97=mix(Linear_Q101,Linear_Q102,Out_Q105);float Minus_F_Q87=-Z_Q86;float R_Q99;float G_Q99;float B_Q99;float A_Q99;R_Q99=Color_At_T_Q97.r; G_Q99=Color_At_T_Q97.g; B_Q99=Color_At_T_Q97.b; A_Q99=Color_At_T_Q97.a;float ClampF_Q88=clamp(0.0,Minus_F_Q87,1.0);float Result_Q93;Conditional_Float_B93(_Decal_Front_Only_,ClampF_Q88,1.0,Result_Q93);vec4 Vec4_Q89=vec4(Result_Q93,Radial_Gradient_Q130,G_Q99,B_Q99);vec3 Position=Pos_World_Q12;vec3 Normal=Nrm_World_Q32;vec2 UV=XY_Q85;vec3 Tangent=Tangent_World_N_Q27;vec3 Binormal=Difference_Q61;vec4 Color=Out_Color_Q34;vec4 Extra1=Vec4_Q89;vec4 Extra2=Blob_Info_Q23;vec4 Extra3=Blob_Info_Q24;gl_Position=viewProjection*vec4(Position,1);vPosition=Position;vNormal=Normal;vUV=UV;vTangent=Tangent;vBinormal=Binormal;vColor=Color;vExtra1=Extra1;vExtra2=Extra2;vExtra3=Extra3;}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const mrdlSliderBarVertexShader = { name, shader };\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { SerializationHelper, serialize } from \"core/Misc/decorators\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport { Vector2, Vector3, Vector4 } from \"core/Maths/math.vector\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"core/Materials/materialHelper\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { Color4 } from \"core/Maths/math.color\";\r\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\r\nimport { Constants } from \"core/Engines/constants\";\r\n\r\nimport \"./shaders/mrdlSliderBar.fragment\";\r\nimport \"./shaders/mrdlSliderBar.vertex\";\r\n\r\n/** @internal */\r\nclass MRDLSliderBarMaterialDefines extends MaterialDefines {\r\n    /*\r\n        \"SKY_ENABLED\", \"BLOB_ENABLE_2\", \"IRIDESCENCE_ENABLED\"\r\n    */\r\n    public SKY_ENABLED = true;\r\n    public BLOB_ENABLE_2 = true;\r\n    public IRIDESCENCE_ENABLED = true;\r\n\r\n    constructor() {\r\n        super();\r\n        this._needNormals = true;\r\n        this._needUVs = true;\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render Slider Bar material with MRDL\r\n */\r\nexport class MRDLSliderBarMaterial extends PushMaterial {\r\n    /**\r\n     * URL pointing to the texture used to define the coloring for the Iridescent Map effect.\r\n     */\r\n    public static BLUE_GRADIENT_TEXTURE_URL = \"https://assets.babylonjs.com/meshes/MRTK/MRDL/mrtk-mrdl-blue-gradient.png\";\r\n    private _blueGradientTexture: Texture;\r\n    private _decalTexture: Texture;\r\n    private _reflectionMapTexture: Texture;\r\n    private _indirectEnvTexture: Texture;\r\n\r\n    /**\r\n     * Gets or sets the corner Radius on the slider bar.\r\n     */\r\n    @serialize()\r\n    public radius = 0.6;\r\n\r\n    /**\r\n     * Gets or sets the Bevel Front on the slider bar.\r\n     */\r\n    @serialize()\r\n    public bevelFront = 0.6;\r\n\r\n    /**\r\n     * Gets or sets the Bevel Front Stretch on the slider bar.\r\n     */\r\n    @serialize()\r\n    public bevelFrontStretch = 0.077;\r\n\r\n    /**\r\n     * Gets or sets the Bevel Back on the slider bar.\r\n     */\r\n    @serialize()\r\n    public bevelBack = 0;\r\n\r\n    /**\r\n     * Gets or sets the Bevel Back Stretch on the slider bar.\r\n     */\r\n    @serialize()\r\n    public bevelBackStretch = 0;\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusTopLeft = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusTopRight = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusBottomLeft = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusBottomRight = 1.0;\r\n\r\n    /**\r\n     * Gets or sets whether Bulge is enabled.\r\n     * Default is false.\r\n     */\r\n    @serialize()\r\n    public bulgeEnabled = false;\r\n\r\n    /**\r\n     * Gets or sets the Bulge Height.\r\n     */\r\n    @serialize()\r\n    public bulgeHeight = -0.323;\r\n\r\n    /**\r\n     * Gets or sets the Bulge Radius.\r\n     */\r\n    @serialize()\r\n    public bulgeRadius = 0.73;\r\n\r\n    /**\r\n     * Gets or sets the Sun Intensity.\r\n     */\r\n    @serialize()\r\n    public sunIntensity = 1.102;\r\n\r\n    /**\r\n     * Gets or sets the Sun Theta.\r\n     */\r\n    @serialize()\r\n    public sunTheta = 0.76;\r\n\r\n    /**\r\n     * Gets or sets the Sun Phi.\r\n     */\r\n    @serialize()\r\n    public sunPhi = 0.526;\r\n\r\n    /**\r\n     * Gets or sets the Indirect Diffuse.\r\n     */\r\n    @serialize()\r\n    public indirectDiffuse = 0.658;\r\n\r\n    /**\r\n     * Gets or sets the base albedo.\r\n     */\r\n    @serialize()\r\n    public albedo = new Color4(0.0117647, 0.505882, 0.996078, 1);\r\n\r\n    /**\r\n     * Gets or sets the Specular value.\r\n     */\r\n    @serialize()\r\n    public specular = 0;\r\n\r\n    /**\r\n     * Gets or sets the Shininess value.\r\n     */\r\n    @serialize()\r\n    public shininess = 10;\r\n\r\n    /**\r\n     * Gets or sets the Sharpness value.\r\n     */\r\n    @serialize()\r\n    public sharpness = 0;\r\n\r\n    /**\r\n     * Gets or sets the Subsurface value.\r\n     */\r\n    @serialize()\r\n    public subsurface = 0;\r\n\r\n    /**\r\n     * Gets or sets the left gradient color.\r\n     */\r\n    @serialize()\r\n    public leftGradientColor = new Color4(0.0117647, 0.505882, 0.996078, 1);\r\n\r\n    /**\r\n     * Gets or sets the right gradient color.\r\n     */\r\n    @serialize()\r\n    public rightGradientColor = new Color4(0.0117647, 0.505882, 0.996078, 1);\r\n\r\n    /**\r\n     * Gets or sets the reflection value.\r\n     */\r\n    @serialize()\r\n    public reflection = 0.749;\r\n\r\n    /**\r\n     * Gets or sets the front reflect value.\r\n     */\r\n    @serialize()\r\n    public frontReflect = 0;\r\n\r\n    /**\r\n     * Gets or sets the edge reflect value.\r\n     */\r\n    @serialize()\r\n    public edgeReflect = 0.09;\r\n\r\n    /**\r\n     * Gets or sets the power value.\r\n     */\r\n    @serialize()\r\n    public power = 8.13;\r\n\r\n    /**\r\n     * Gets or sets the sky color.\r\n     */\r\n    @serialize()\r\n    public skyColor = new Color4(0.0117647, 0.964706, 0.996078, 1);\r\n\r\n    /**\r\n     * Gets or sets the horizon color.\r\n     */\r\n    @serialize()\r\n    public horizonColor = new Color4(0.0117647, 0.333333, 0.996078, 1);\r\n\r\n    /**\r\n     * Gets or sets the ground color.\r\n     */\r\n    @serialize()\r\n    public groundColor = new Color4(0, 0.254902, 0.996078, 1);\r\n\r\n    /**\r\n     * Gets or sets the horizon power value.\r\n     */\r\n    @serialize()\r\n    public horizonPower = 1;\r\n\r\n    /**\r\n     * Gets or sets the finger occlusion width value.\r\n     */\r\n    @serialize()\r\n    public width = 0.02;\r\n\r\n    /**\r\n     * Gets or sets the finger occlusion fuzz value.\r\n     */\r\n    @serialize()\r\n    public fuzz = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the minimum finger occlusion fuzz value.\r\n     */\r\n    @serialize()\r\n    public minFuzz = 0.001;\r\n\r\n    /**\r\n     * Gets or sets the finger occlusion clip fade value.\r\n     */\r\n    @serialize()\r\n    public clipFade = 0.01;\r\n\r\n    /**\r\n     * Gets or sets the hue shift value.\r\n     */\r\n    @serialize()\r\n    public hueShift = 0;\r\n\r\n    /**\r\n     * Gets or sets the saturation shift value.\r\n     */\r\n    @serialize()\r\n    public saturationShift = 0;\r\n\r\n    /**\r\n     * Gets or sets the value shift.\r\n     */\r\n    @serialize()\r\n    public valueShift = 0;\r\n\r\n    /**\r\n     * Gets or sets the position of the hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobPosition = new Vector3(0, 0, 0.1);\r\n\r\n    /**\r\n     * Gets or sets the intensity of the hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobIntensity = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the near size of the hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobNearSize = 0.01;\r\n    /**\r\n     * Gets or sets the far size of the hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobFarSize = 0.03;\r\n\r\n    /**\r\n     * Gets or sets the distance considered \"near\" to the mesh, which controls the size of the hover glow effect (see blobNearSize).\r\n     */\r\n    @serialize()\r\n    public blobNearDistance = 0;\r\n\r\n    /**\r\n     * Gets or sets the distance considered \"far\" from the mesh, which controls the size of the hover glow effect (see blobFarSize).\r\n     */\r\n    @serialize()\r\n    public blobFarDistance = 0.08;\r\n\r\n    /**\r\n     * Gets or sets the length of the hover glow effect fade.\r\n     */\r\n    @serialize()\r\n    public blobFadeLength = 0.576;\r\n\r\n    /**\r\n     * Gets or sets the progress of the hover glow effect selection animation corresponding to the left pointer (0.0 - 1.0).\r\n     */\r\n    @serialize()\r\n    public blobPulse = 0;\r\n\r\n    /**\r\n     * Gets or sets the opacity of the hover glow effect corresponding to the left pointer (0.0 - 1.0). Default is 0.\r\n     */\r\n    @serialize()\r\n    public blobFade = 1;\r\n\r\n    /**\r\n     * Gets or sets the position of the hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobPosition2 = new Vector3(0.2, 0, 0.1);\r\n\r\n    /**\r\n     * Gets or sets the size of the hover glow effect when the right pointer is considered \"near\" to the mesh (see blobNearDistance).\r\n     */\r\n    @serialize()\r\n    public blobNearSize2 = 0.01;\r\n\r\n    /**\r\n     * Gets or sets the progress of the hover glow effect selection animation corresponding to the right pointer (0.0 - 1.0).\r\n     */\r\n    @serialize()\r\n    public blobPulse2 = 0;\r\n\r\n    /**\r\n     * Gets or sets the opacity of the hover glow effect corresponding to the right pointer (0.0 - 1.0). Default is 1.\r\n     */\r\n    @serialize()\r\n    public blobFade2 = 1;\r\n\r\n    /**\r\n     * Gets or sets the texture of the hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobTexture = new Texture(\"\", this.getScene());\r\n\r\n    /**\r\n     * Gets or sets the finger position for left index.\r\n     */\r\n    @serialize()\r\n    public leftIndexPosition = new Vector3(0, 0, 1);\r\n\r\n    /**\r\n     * Gets or sets the finger position for right index.\r\n     */\r\n    @serialize()\r\n    public rightIndexPosition = new Vector3(-1, -1, -1);\r\n\r\n    /**\r\n     * Gets or sets the finger position for left index middle position.\r\n     */\r\n    @serialize()\r\n    public leftIndexMiddlePosition = new Vector3(0, 0, 0);\r\n\r\n    /**\r\n     * Gets or sets the finger position for right index middle position.\r\n     */\r\n    @serialize()\r\n    public rightIndexMiddlePosition = new Vector3(0, 0, 0);\r\n\r\n    /**\r\n     * Gets or sets the Decal Scle for XY.\r\n     */\r\n    @serialize()\r\n    public decalScaleXY = new Vector2(1.5, 1.5);\r\n\r\n    /**\r\n     * Gets or sets decalFrontOnly\r\n     * Default is true\r\n     */\r\n    @serialize()\r\n    public decalFrontOnly = true;\r\n\r\n    /**\r\n     * Gets or sets the Rim Light intensity.\r\n     */\r\n    @serialize()\r\n    public rimIntensity = 0.287;\r\n\r\n    /**\r\n     * Gets or sets the Rim Light hue shift value.\r\n     */\r\n    @serialize()\r\n    public rimHueShift = 0;\r\n\r\n    /**\r\n     * Gets or sets the Rim Light saturation shift value.\r\n     */\r\n    @serialize()\r\n    public rimSaturationShift = 0;\r\n\r\n    /**\r\n     * Gets or sets the Rim Light value shift.\r\n     */\r\n    @serialize()\r\n    public rimValueShift = -1;\r\n\r\n    /**\r\n     * Gets or sets the intensity of the iridescence effect.\r\n     */\r\n    @serialize()\r\n    public iridescenceIntensity = 0;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public useGlobalLeftIndex = 1.0;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public useGlobalRightIndex = 1.0;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalLeftIndexTipProximity = 0.0;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalRightIndexTipProximity = 0.0;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalLeftIndexTipPosition = new Vector4(0.5, 0.0, -0.55, 1.0);\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globaRightIndexTipPosition = new Vector4(0.0, 0.0, 0.0, 1.0);\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalLeftThumbTipPosition = new Vector4(0.5, 0.0, -0.55, 1.0);\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalRightThumbTipPosition = new Vector4(0.0, 0.0, 0.0, 1.0);\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalLeftIndexMiddlePosition = new Vector4(0.5, 0.0, -0.55, 1.0);\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalRightIndexMiddlePosition = new Vector4(0.0, 0.0, 0.0, 1.0);\r\n\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n        this.alphaMode = Constants.ALPHA_DISABLE;\r\n        this.backFaceCulling = false;\r\n        this._blueGradientTexture = new Texture(MRDLSliderBarMaterial.BLUE_GRADIENT_TEXTURE_URL, this.getScene(), true, false, Texture.NEAREST_SAMPLINGMODE);\r\n        this._decalTexture = new Texture(\"\", this.getScene());\r\n        this._reflectionMapTexture = new Texture(\"\", this.getScene());\r\n        this._indirectEnvTexture = new Texture(\"\", this.getScene());\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new MRDLSliderBarMaterialDefines();\r\n        }\r\n\r\n        const defines = <MRDLSliderBarMaterialDefines>subMesh.materialDefines;\r\n        const scene = this.getScene();\r\n\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, false);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\r\n\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            if (defines.TANGENT) {\r\n                attribs.push(VertexBuffer.TangentKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            const shaderName = \"mrdlSliderBar\";\r\n            const join = defines.toString();\r\n\r\n            const uniforms = [\r\n                \"world\",\r\n                \"viewProjection\",\r\n                \"cameraPosition\",\r\n                \"_Radius_\",\r\n                \"_Bevel_Front_\",\r\n                \"_Bevel_Front_Stretch_\",\r\n                \"_Bevel_Back_\",\r\n                \"_Bevel_Back_Stretch_\",\r\n                \"_Radius_Top_Left_\",\r\n                \"_Radius_Top_Right_\",\r\n                \"_Radius_Bottom_Left_\",\r\n                \"_Radius_Bottom_Right_\",\r\n                \"_Bulge_Enabled_\",\r\n                \"_Bulge_Height_\",\r\n                \"_Bulge_Radius_\",\r\n                \"_Sun_Intensity_\",\r\n                \"_Sun_Theta_\",\r\n                \"_Sun_Phi_\",\r\n                \"_Indirect_Diffuse_\",\r\n                \"_Albedo_\",\r\n                \"_Specular_\",\r\n                \"_Shininess_\",\r\n                \"_Sharpness_\",\r\n                \"_Subsurface_\",\r\n                \"_Left_Color_\",\r\n                \"_Right_Color_\",\r\n                \"_Reflection_\",\r\n                \"_Front_Reflect_\",\r\n                \"_Edge_Reflect_\",\r\n                \"_Power_\",\r\n                \"_Sky_Color_\",\r\n                \"_Horizon_Color_\",\r\n                \"_Ground_Color_\",\r\n                \"_Horizon_Power_\",\r\n                \"_Reflection_Map_\",\r\n                \"_Indirect_Environment_\",\r\n                \"_Width_\",\r\n                \"_Fuzz_\",\r\n                \"_Min_Fuzz_\",\r\n                \"_Clip_Fade_\",\r\n                \"_Hue_Shift_\",\r\n                \"_Saturation_Shift_\",\r\n                \"_Value_Shift_\",\r\n                \"_Blob_Position_\",\r\n                \"_Blob_Intensity_\",\r\n                \"_Blob_Near_Size_\",\r\n                \"_Blob_Far_Size_\",\r\n                \"_Blob_Near_Distance_\",\r\n                \"_Blob_Far_Distance_\",\r\n                \"_Blob_Fade_Length_\",\r\n                \"_Blob_Pulse_\",\r\n                \"_Blob_Fade_\",\r\n                \"_Blob_Texture_\",\r\n                \"_Blob_Position_2_\",\r\n                \"_Blob_Near_Size_2_\",\r\n                \"_Blob_Pulse_2_\",\r\n                \"_Blob_Fade_2_\",\r\n                \"_Left_Index_Pos_\",\r\n                \"_Right_Index_Pos_\",\r\n                \"_Left_Index_Middle_Pos_\",\r\n                \"_Right_Index_Middle_Pos_\",\r\n                \"_Decal_\",\r\n                \"_Decal_Scale_XY_\",\r\n                \"_Decal_Front_Only_\",\r\n                \"_Rim_Intensity_\",\r\n                \"_Rim_Texture_\",\r\n                \"_Rim_Hue_Shift_\",\r\n                \"_Rim_Saturation_Shift_\",\r\n                \"_Rim_Value_Shift_\",\r\n                \"_Iridescence_Intensity_\",\r\n                \"_Iridescence_Texture_\",\r\n                \"Use_Global_Left_Index\",\r\n                \"Use_Global_Right_Index\",\r\n                \"Global_Left_Index_Tip_Position\",\r\n                \"Global_Right_Index_Tip_Position\",\r\n                \"Global_Left_Thumb_Tip_Position\",\r\n                \"Global_Right_Thumb_Tip_Position\",\r\n                \"Global_Left_Index_Middle_Position;\",\r\n                \"Global_Right_Index_Middle_Position\",\r\n                \"Global_Left_Index_Tip_Proximity\",\r\n                \"Global_Right_Index_Tip_Proximity\",\r\n            ];\r\n            const samplers: string[] = [\"_Rim_Texture_\", \"_Iridescence_Texture_\"];\r\n            const uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4,\r\n            });\r\n\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: { maxSimultaneousLights: 4 },\r\n                    },\r\n                    engine\r\n                ),\r\n                defines,\r\n                this._materialContext\r\n            );\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const defines = <MRDLSliderBarMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", this.getScene().getTransformMatrix());\r\n        this._activeEffect.setVector3(\"cameraPosition\", this.getScene().activeCamera!.position);\r\n\r\n        // \"Round Rect\"\r\n        this._activeEffect.setFloat(\"_Radius_\", this.radius);\r\n        this._activeEffect.setFloat(\"_Bevel_Front_\", this.bevelFront);\r\n        this._activeEffect.setFloat(\"_Bevel_Front_Stretch_\", this.bevelFrontStretch);\r\n        this._activeEffect.setFloat(\"_Bevel_Back_\", this.bevelBack);\r\n        this._activeEffect.setFloat(\"_Bevel_Back_Stretch_\", this.bevelBackStretch);\r\n\r\n        // \"Radii Multipliers\"\r\n        this._activeEffect.setFloat(\"_Radius_Top_Left_\", this.radiusTopLeft);\r\n        this._activeEffect.setFloat(\"_Radius_Top_Right_\", this.radiusTopRight);\r\n        this._activeEffect.setFloat(\"_Radius_Bottom_Left_\", this.radiusBottomLeft);\r\n        this._activeEffect.setFloat(\"_Radius_Bottom_Right_\", this.radiusBottomRight);\r\n\r\n        // \"Bulge\"\r\n        this._activeEffect.setFloat(\"_Bulge_Enabled_\", this.bulgeEnabled ? 1.0 : 0.0);\r\n        this._activeEffect.setFloat(\"_Bulge_Height_\", this.bulgeHeight);\r\n        this._activeEffect.setFloat(\"_Bulge_Radius_\", this.bulgeRadius);\r\n\r\n        // \"Sun\"\r\n        this._activeEffect.setFloat(\"_Sun_Intensity_\", this.sunIntensity);\r\n        this._activeEffect.setFloat(\"_Sun_Theta_\", this.sunTheta);\r\n        this._activeEffect.setFloat(\"_Sun_Phi_\", this.sunPhi);\r\n        this._activeEffect.setFloat(\"_Indirect_Diffuse_\", this.indirectDiffuse);\r\n\r\n        // \"Diffuse And Specular\"\r\n        this._activeEffect.setDirectColor4(\"_Albedo_\", this.albedo);\r\n        this._activeEffect.setFloat(\"_Specular_\", this.specular);\r\n        this._activeEffect.setFloat(\"_Shininess_\", this.shininess);\r\n        this._activeEffect.setFloat(\"_Sharpness_\", this.sharpness);\r\n        this._activeEffect.setFloat(\"_Subsurface_\", this.subsurface);\r\n\r\n        // \"Gradient\"\r\n        this._activeEffect.setDirectColor4(\"_Left_Color_\", this.leftGradientColor);\r\n        this._activeEffect.setDirectColor4(\"_Right_Color_\", this.rightGradientColor);\r\n\r\n        // \"Reflection\"\r\n        this._activeEffect.setFloat(\"_Reflection_\", this.reflection);\r\n        this._activeEffect.setFloat(\"_Front_Reflect_\", this.frontReflect);\r\n        this._activeEffect.setFloat(\"_Edge_Reflect_\", this.edgeReflect);\r\n        this._activeEffect.setFloat(\"_Power_\", this.power);\r\n\r\n        // \"Sky Environment\"\r\n        //define SKY_ENABLED true;\r\n        this._activeEffect.setDirectColor4(\"_Sky_Color_\", this.skyColor);\r\n        this._activeEffect.setDirectColor4(\"_Horizon_Color_\", this.horizonColor);\r\n        this._activeEffect.setDirectColor4(\"_Ground_Color_\", this.groundColor);\r\n        this._activeEffect.setFloat(\"_Horizon_Power_\", this.horizonPower);\r\n\r\n        // \"Mapped Environment\"\r\n        //define ENV_ENABLE false;\r\n        this._activeEffect.setTexture(\"_Reflection_Map_\", this._reflectionMapTexture);\r\n        this._activeEffect.setTexture(\"_Indirect_Environment_\", this._indirectEnvTexture);\r\n\r\n        // \"FingerOcclusion\"\r\n        //define OCCLUSION_ENABLED false;\r\n        this._activeEffect.setFloat(\"_Width_\", this.width);\r\n        this._activeEffect.setFloat(\"_Fuzz_\", this.fuzz);\r\n        this._activeEffect.setFloat(\"_Min_Fuzz_\", this.minFuzz);\r\n        this._activeEffect.setFloat(\"_Clip_Fade_\", this.clipFade);\r\n\r\n        // \"View Based Color Shift\"\r\n        this._activeEffect.setFloat(\"_Hue_Shift_\", this.hueShift);\r\n        this._activeEffect.setFloat(\"_Saturation_Shift_\", this.saturationShift);\r\n        this._activeEffect.setFloat(\"_Value_Shift_\", this.valueShift);\r\n\r\n        // \"Blob\"\r\n        //define BLOB_ENABLE false;\r\n        this._activeEffect.setVector3(\"_Blob_Position_\", this.blobPosition);\r\n        this._activeEffect.setFloat(\"_Blob_Intensity_\", this.blobIntensity);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Size_\", this.blobNearSize);\r\n        this._activeEffect.setFloat(\"_Blob_Far_Size_\", this.blobFarSize);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Distance_\", this.blobNearDistance);\r\n        this._activeEffect.setFloat(\"_Blob_Far_Distance_\", this.blobFarDistance);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_Length_\", this.blobFadeLength);\r\n        this._activeEffect.setFloat(\"_Blob_Pulse_\", this.blobPulse);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_\", this.blobFade);\r\n\r\n        // \"Blob Texture\"\r\n        this._activeEffect.setTexture(\"_Blob_Texture_\", this.blobTexture);\r\n\r\n        // \"Blob 2\"\r\n        //define BLOB_ENABLE_2 true;\r\n        this._activeEffect.setVector3(\"_Blob_Position_2_\", this.blobPosition2);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Size_2_\", this.blobNearSize2);\r\n        this._activeEffect.setFloat(\"_Blob_Pulse_2_\", this.blobPulse2);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_2_\", this.blobFade2);\r\n\r\n        // \"Finger Positions\"\r\n        this._activeEffect.setVector3(\"_Left_Index_Pos_\", this.leftIndexPosition);\r\n        this._activeEffect.setVector3(\"_Right_Index_Pos_\", this.rightIndexPosition);\r\n        this._activeEffect.setVector3(\"_Left_Index_Middle_Pos_\", this.leftIndexMiddlePosition);\r\n        this._activeEffect.setVector3(\"_Right_Index_Middle_Pos_\", this.rightIndexMiddlePosition);\r\n\r\n        // \"Decal Texture\"\r\n        //define DECAL_ENABLE false;\r\n        this._activeEffect.setTexture(\"_Decal_\", this._decalTexture);\r\n        this._activeEffect.setVector2(\"_Decal_Scale_XY_\", this.decalScaleXY);\r\n        this._activeEffect.setFloat(\"_Decal_Front_Only_\", this.decalFrontOnly ? 1.0 : 0.0);\r\n\r\n        // \"Rim Light\"\r\n        this._activeEffect.setFloat(\"_Rim_Intensity_\", this.rimIntensity);\r\n        this._activeEffect.setTexture(\"_Rim_Texture_\", this._blueGradientTexture);\r\n        this._activeEffect.setFloat(\"_Rim_Hue_Shift_\", this.rimHueShift);\r\n        this._activeEffect.setFloat(\"_Rim_Saturation_Shift_\", this.rimSaturationShift);\r\n        this._activeEffect.setFloat(\"_Rim_Value_Shift_\", this.rimValueShift);\r\n\r\n        // \"Iridescence\"\r\n        //define IRIDESCENCE_ENABLED true;\r\n        this._activeEffect.setFloat(\"_Iridescence_Intensity_\", this.iridescenceIntensity);\r\n        this._activeEffect.setTexture(\"_Iridescence_Texture_\", this._blueGradientTexture);\r\n\r\n        // Global inputs\r\n        this._activeEffect.setFloat(\"Use_Global_Left_Index\", this.useGlobalLeftIndex);\r\n        this._activeEffect.setFloat(\"Use_Global_Right_Index\", this.useGlobalRightIndex);\r\n\r\n        this._activeEffect.setVector4(\"Global_Left_Index_Tip_Position\", this.globalLeftIndexTipPosition);\r\n        this._activeEffect.setVector4(\"Global_Right_Index_Tip_Position\", this.globaRightIndexTipPosition);\r\n\r\n        this._activeEffect.setVector4(\"Global_Left_Thumb_Tip_Position\", this.globalLeftThumbTipPosition);\r\n        this._activeEffect.setVector4(\"Global_Right_Thumb_Tip_Position\", this.globalRightThumbTipPosition);\r\n\r\n        this._activeEffect.setVector4(\"Global_Left_Index_Middle_Position\", this.globalLeftIndexMiddlePosition);\r\n        this._activeEffect.setVector4(\"Global_Right_Index_Middle_Position\", this.globalRightIndexMiddlePosition);\r\n\r\n        this._activeEffect.setFloat(\"Global_Left_Index_Tip_Proximity\", this.globalLeftIndexTipProximity);\r\n        this._activeEffect.setFloat(\"Global_Right_Index_Tip_Proximity\", this.globalRightIndexTipProximity);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    /**\r\n     * Get the list of animatables in the material.\r\n     * @returns the list of animatables object used in the material\r\n     */\r\n    public getAnimatables(): IAnimatable[] {\r\n        return [];\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n        this._reflectionMapTexture.dispose();\r\n        this._indirectEnvTexture.dispose();\r\n        this._blueGradientTexture.dispose();\r\n        this._decalTexture.dispose();\r\n    }\r\n\r\n    public clone(name: string): MRDLSliderBarMaterial {\r\n        return SerializationHelper.Clone(() => new MRDLSliderBarMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n        serializationObject.customType = \"BABYLON.MRDLSliderBarMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"MRDLSliderBarMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): MRDLSliderBarMaterial {\r\n        return SerializationHelper.Parse(() => new MRDLSliderBarMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.MRDLSliderBarMaterial\", MRDLSliderBarMaterial);\r\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"mrdlSliderThumbPixelShader\";\nconst shader = `uniform vec3 cameraPosition;varying vec3 vPosition;varying vec3 vNormal;varying vec2 vUV;varying vec3 vTangent;varying vec3 vBinormal;varying vec4 vColor;varying vec4 vExtra1;varying vec4 vExtra2;varying vec4 vExtra3;uniform float _Radius_;uniform float _Bevel_Front_;uniform float _Bevel_Front_Stretch_;uniform float _Bevel_Back_;uniform float _Bevel_Back_Stretch_;uniform float _Radius_Top_Left_;uniform float _Radius_Top_Right_;uniform float _Radius_Bottom_Left_;uniform float _Radius_Bottom_Right_;uniform bool _Bulge_Enabled_;uniform float _Bulge_Height_;uniform float _Bulge_Radius_;uniform float _Sun_Intensity_;uniform float _Sun_Theta_;uniform float _Sun_Phi_;uniform float _Indirect_Diffuse_;uniform vec4 _Albedo_;uniform float _Specular_;uniform float _Shininess_;uniform float _Sharpness_;uniform float _Subsurface_;uniform vec4 _Left_Color_;uniform vec4 _Right_Color_;uniform float _Reflection_;uniform float _Front_Reflect_;uniform float _Edge_Reflect_;uniform float _Power_;uniform vec4 _Sky_Color_;uniform vec4 _Horizon_Color_;uniform vec4 _Ground_Color_;uniform float _Horizon_Power_;uniform sampler2D _Reflection_Map_;uniform sampler2D _Indirect_Environment_;uniform float _Width_;uniform float _Fuzz_;uniform float _Min_Fuzz_;uniform float _Clip_Fade_;uniform float _Hue_Shift_;uniform float _Saturation_Shift_;uniform float _Value_Shift_;uniform vec3 _Blob_Position_;uniform float _Blob_Intensity_;uniform float _Blob_Near_Size_;uniform float _Blob_Far_Size_;uniform float _Blob_Near_Distance_;uniform float _Blob_Far_Distance_;uniform float _Blob_Fade_Length_;uniform float _Blob_Pulse_;uniform float _Blob_Fade_;uniform sampler2D _Blob_Texture_;uniform vec3 _Blob_Position_2_;uniform float _Blob_Near_Size_2_;uniform float _Blob_Pulse_2_;uniform float _Blob_Fade_2_;uniform vec3 _Left_Index_Pos_;uniform vec3 _Right_Index_Pos_;uniform vec3 _Left_Index_Middle_Pos_;uniform vec3 _Right_Index_Middle_Pos_;uniform sampler2D _Decal_;uniform vec2 _Decal_Scale_XY_;uniform bool _Decal_Front_Only_;uniform float _Rim_Intensity_;uniform sampler2D _Rim_Texture_;uniform float _Rim_Hue_Shift_;uniform float _Rim_Saturation_Shift_;uniform float _Rim_Value_Shift_;uniform float _Iridescence_Intensity_;uniform sampler2D _Iridescence_Texture_;uniform bool Use_Global_Left_Index;uniform bool Use_Global_Right_Index;uniform vec4 Global_Left_Index_Tip_Position;uniform vec4 Global_Right_Index_Tip_Position;uniform vec4 Global_Left_Thumb_Tip_Position;uniform vec4 Global_Right_Thumb_Tip_Position;uniform vec4 Global_Left_Index_Middle_Position;uniform vec4 Global_Right_Index_Middle_Position;uniform float Global_Left_Index_Tip_Proximity;uniform float Global_Right_Index_Tip_Proximity;void Blob_Fragment_B180(\nsampler2D Blob_Texture,\nvec4 Blob_Info1,\nvec4 Blob_Info2,\nout vec4 Blob_Color)\n{float k1=dot(Blob_Info1.xy,Blob_Info1.xy);float k2=dot(Blob_Info2.xy,Blob_Info2.xy);vec3 closer=k1<k2 ? vec3(k1,Blob_Info1.z,Blob_Info1.w) : vec3(k2,Blob_Info2.z,Blob_Info2.w);Blob_Color=closer.z*texture(Blob_Texture,vec2(vec2(sqrt(closer.x),closer.y).x,1.0-vec2(sqrt(closer.x),closer.y).y))*clamp(1.0-closer.x,0.0,1.0);}\nvoid FastLinearTosRGB_B192(\nvec4 Linear,\nout vec4 sRGB)\n{sRGB.rgb=sqrt(clamp(Linear.rgb,0.0,1.0));sRGB.a=Linear.a;}\nvoid Scale_RGB_B209(\nvec4 Color,\nfloat Scalar,\nout vec4 Result)\n{Result=vec4(Scalar,Scalar,Scalar,1)*Color;}\nvoid Fragment_Main_B271(\nfloat Sun_Intensity,\nfloat Sun_Theta,\nfloat Sun_Phi,\nvec3 Normal,\nvec4 Albedo,\nfloat Fresnel_Reflect,\nfloat Shininess,\nvec3 Incident,\nvec4 Horizon_Color,\nvec4 Sky_Color,\nvec4 Ground_Color,\nfloat Indirect_Diffuse,\nfloat Specular,\nfloat Horizon_Power,\nfloat Reflection,\nvec4 Reflection_Sample,\nvec4 Indirect_Sample,\nfloat Sharpness,\nfloat SSS,\nfloat Subsurface,\nvec4 Translucence,\nvec4 Rim_Light,\nvec4 Iridescence,\nout vec4 Result)\n{float theta=Sun_Theta*2.0*3.14159;float phi=Sun_Phi*3.14159;vec3 lightDir= vec3(cos(phi)*cos(theta),sin(phi),cos(phi)*sin(theta));float NdotL=max(dot(lightDir,Normal),0.0);vec3 R=reflect(Incident,Normal);float RdotL=max(0.0,dot(R,lightDir));float specular=pow(RdotL,Shininess);specular=mix(specular,smoothstep(0.495*Sharpness,1.0-0.495*Sharpness,specular),Sharpness);vec4 gi=mix(Ground_Color,Sky_Color,Normal.y*0.5+0.5);Result=((Sun_Intensity*NdotL+Indirect_Sample*Indirect_Diffuse+Translucence)*(1.0+SSS*Subsurface))*Albedo*(1.0-Fresnel_Reflect)+(Sun_Intensity*specular*Specular+Fresnel_Reflect*Reflection*Reflection_Sample)+Fresnel_Reflect*Rim_Light+Iridescence;}\nvoid Bulge_B229(\nbool Enabled,\nvec3 Normal,\nvec3 Tangent,\nfloat Bulge_Height,\nvec4 UV,\nfloat Bulge_Radius,\nvec3 ButtonN,\nout vec3 New_Normal)\n{vec2 xy=clamp(UV.xy*2.0,vec2(-1,-1),vec2(1,1));vec3 B=(cross(Normal,Tangent));float k=-clamp(1.0-length(xy)/Bulge_Radius,0.0,1.0)*Bulge_Height;k=sin(k*3.14159*0.5);k*=smoothstep(0.9998,0.9999,abs(dot(ButtonN,Normal)));New_Normal=Normal*sqrt(1.0-k*k)+(xy.x*Tangent+xy.y*B)*k;New_Normal=Enabled ? New_Normal : Normal;}\nvoid SSS_B227(\nvec3 ButtonN,\nvec3 Normal,\nvec3 Incident,\nout float Result)\n{float NdotI=abs(dot(Normal,Incident));float BdotI=abs(dot(ButtonN,Incident));Result=(abs(NdotI-BdotI)); }\nvoid FingerOcclusion_B217(\nfloat Width,\nfloat DistToCenter,\nfloat Fuzz,\nfloat Min_Fuzz,\nvec3 Position,\nvec3 Forward,\nvec3 Nearest,\nfloat Fade_Out,\nout float NotInShadow)\n{float d=dot((Nearest-Position),Forward);float sh=smoothstep(Width*0.5,Width*0.5+Fuzz*max(d,0.0)+Min_Fuzz,DistToCenter);NotInShadow=1.0-(1.0-sh)*smoothstep(-Fade_Out,0.0,d);}\nvoid FingerOcclusion_B218(\nfloat Width,\nfloat DistToCenter,\nfloat Fuzz,\nfloat Min_Fuzz,\nvec3 Position,\nvec3 Forward,\nvec3 Nearest,\nfloat Fade_Out,\nout float NotInShadow)\n{float d=dot((Nearest-Position),Forward);float sh=smoothstep(Width*0.5,Width*0.5+Fuzz*max(d,0.0)+Min_Fuzz,DistToCenter);NotInShadow=1.0-(1.0-sh)*smoothstep(-Fade_Out,0.0,d);}\nvoid Scale_Color_B241(\nvec4 Color,\nfloat Scalar,\nout vec4 Result)\n{Result=Scalar*Color;}\nvoid From_HSV_B223(\nfloat Hue,\nfloat Saturation,\nfloat Value,\nfloat Alpha,\nout vec4 Color)\n{vec4 K=vec4(1.0,2.0/3.0,1.0/3.0,3.0);vec3 p=abs(fract(vec3(Hue,Hue,Hue)+K.xyz)*6.0-K.www);Color.rgb=Value*mix(K.xxx,clamp(p-K.xxx,0.0,1.0),Saturation);Color.a=Alpha;}\nvoid Fast_Fresnel_B272(\nfloat Front_Reflect,\nfloat Edge_Reflect,\nfloat Power,\nvec3 Normal,\nvec3 Incident,\nout float Transmit,\nout float Reflect)\n{float d=max(-dot(Incident,Normal),0.0);Reflect=Front_Reflect+(Edge_Reflect-Front_Reflect)*pow(1.0-d,Power);Transmit=1.0-Reflect;}\nvoid Mapped_Environment_B201(\nsampler2D Reflected_Environment,\nsampler2D Indirect_Environment,\nvec3 Dir,\nout vec4 Reflected_Color,\nout vec4 Indirect_Diffuse)\n{Reflected_Color=texture(Reflected_Environment,vec2(atan(Dir.z,Dir.x)/3.14159*0.5,asin(Dir.y)/3.14159+0.5));Indirect_Diffuse=texture(Indirect_Environment,vec2(atan(Dir.z,Dir.x)/3.14159*0.5,asin(Dir.y)/3.14159+0.5));}\nvec4 SampleEnv_Bid200(vec3 D,vec4 S,vec4 H,vec4 G,float exponent)\n{float k=pow(abs(D.y),exponent);vec4 C;if (D.y>0.0) {C=mix(H,S,k);} else {C=mix(H,G,k); }\nreturn C;}\nvoid Sky_Environment_B200(\nvec3 Normal,\nvec3 Reflected,\nvec4 Sky_Color,\nvec4 Horizon_Color,\nvec4 Ground_Color,\nfloat Horizon_Power,\nout vec4 Reflected_Color,\nout vec4 Indirect_Color)\n{Reflected_Color=SampleEnv_Bid200(Reflected,Sky_Color,Horizon_Color,Ground_Color,Horizon_Power);Indirect_Color=mix(Ground_Color,Sky_Color,Normal.y*0.5+0.5);}\nvoid Min_Segment_Distance_B215(\nvec3 P0,\nvec3 P1,\nvec3 Q0,\nvec3 Q1,\nout vec3 NearP,\nout vec3 NearQ,\nout float Distance)\n{vec3 u=P1-P0;vec3 v=Q1-Q0;vec3 w=P0-Q0;float a=dot(u,u);float b=dot(u,v);float c=dot(v,v);float d=dot(u,w);float e=dot(v,w);float D=a*c-b*b;float sD=D;float tD=D;float sc,sN,tc,tN;if (D<0.00001) {sN=0.0;sD=1.0;tN=e;tD=c;} else {sN=(b*e-c*d);tN=(a*e-b*d);if (sN<0.0) {sN=0.0;tN=e;tD=c;} else if (sN>sD) {sN=sD;tN=e+b;tD=c;}}\nif (tN<0.0) {tN=0.0;if (-d<0.0) {sN=0.0;} else if (-d>a) {sN=sD;} else {sN=-d;sD=a;}} else if (tN>tD) {tN=tD;if ((-d+b)<0.0) {sN=0.0;} else if ((-d+b)>a) {sN=sD;} else {sN=(-d+b);sD=a;}}\nsc=abs(sN)<0.000001 ? 0.0 : sN/sD;tc=abs(tN)<0.000001 ? 0.0 : tN/tD;NearP=P0+sc*u;NearQ=Q0+tc*v;Distance=distance(NearP,NearQ);}\nvoid To_XYZ_B224(\nvec3 Vec3,\nout float X,\nout float Y,\nout float Z)\n{X=Vec3.x;Y=Vec3.y;Z=Vec3.z;}\nvoid Finger_Positions_B214(\nvec3 Left_Index_Pos,\nvec3 Right_Index_Pos,\nvec3 Left_Index_Middle_Pos,\nvec3 Right_Index_Middle_Pos,\nout vec3 Left_Index,\nout vec3 Right_Index,\nout vec3 Left_Index_Middle,\nout vec3 Right_Index_Middle)\n{Left_Index= (Use_Global_Left_Index ? Global_Left_Index_Tip_Position.xyz : Left_Index_Pos);Right_Index= (Use_Global_Right_Index ? Global_Right_Index_Tip_Position.xyz : Right_Index_Pos);Left_Index_Middle= (Use_Global_Left_Index ? Global_Left_Index_Middle_Position.xyz : Left_Index_Middle_Pos);Right_Index_Middle= (Use_Global_Right_Index ? Global_Right_Index_Middle_Position.xyz : Right_Index_Middle_Pos);}\nvoid VaryHSV_B258(\nvec3 HSV_In,\nfloat Hue_Shift,\nfloat Saturation_Shift,\nfloat Value_Shift,\nout vec3 HSV_Out)\n{HSV_Out=vec3(fract(HSV_In.x+Hue_Shift),clamp(HSV_In.y+Saturation_Shift,0.0,1.0),clamp(HSV_In.z+Value_Shift,0.0,1.0));}\nvoid Remap_Range_B264(\nfloat In_Min,\nfloat In_Max,\nfloat Out_Min,\nfloat Out_Max,\nfloat In,\nout float Out)\n{Out=mix(Out_Min,Out_Max,clamp((In-In_Min)/(In_Max-In_Min),0.0,1.0));}\nvoid To_HSV_B225(\nvec4 Color,\nout float Hue,\nout float Saturation,\nout float Value,\nout float Alpha,\nout vec3 HSV)\n{vec4 K=vec4(0.0,-1.0/3.0,2.0/3.0,-1.0);vec4 p=Color.g<Color.b ? vec4(Color.bg,K.wz) : vec4(Color.gb,K.xy);vec4 q=Color.r<p.x ? vec4(p.xyw,Color.r) : vec4(Color.r,p.yzx);float d=q.x-min(q.w,q.y);float e=1.0e-10;Hue=abs(q.z+(q.w-q.y)/(6.0*d+e));Saturation=d/(q.x+e);Value=q.x;Alpha=Color.a;HSV=vec3(Hue,Saturation,Value);}\nvoid Code_B260(\nfloat X,\nout float Result)\n{Result=(acos(X)/3.14159-0.5)*2.0;}\nvoid Rim_Light_B282(\nvec3 Front,\nvec3 Normal,\nvec3 Incident,\nfloat Rim_Intensity,\nsampler2D Texture,\nout vec4 Result)\n{vec3 R=reflect(Incident,Normal);float RdotF=dot(R,Front);float RdotL=sqrt(1.0-RdotF*RdotF);vec2 UV=vec2(R.y*0.5+0.5,0.5);vec4 Color=texture(Texture,UV);Result=Color;}\nvoid main()\n{vec4 Blob_Color_Q180;\n#if BLOB_ENABLE\nBlob_Fragment_B180(_Blob_Texture_,vExtra2,vExtra3,Blob_Color_Q180);\n#else\nBlob_Color_Q180=vec4(0,0,0,0);\n#endif\nvec3 Incident_Q189=normalize(vPosition-cameraPosition);vec3 Normalized_Q188=normalize(vNormal);vec3 Normalized_Q221=normalize(vTangent);vec4 Color_Q233;\n#if DECAL_ENABLE\nColor_Q233=texture(_Decal_,vUV);\n#else\nColor_Q233=vec4(0,0,0,0);\n#endif\nfloat X_Q240;float Y_Q240;float Z_Q240;float W_Q240;X_Q240=vExtra1.x;Y_Q240=vExtra1.y;Z_Q240=vExtra1.z;W_Q240=vExtra1.w;vec4 Linear_Q193;Linear_Q193.rgb=clamp(_Sky_Color_.rgb*_Sky_Color_.rgb,0.0,1.0);Linear_Q193.a=_Sky_Color_.a;vec4 Linear_Q194;Linear_Q194.rgb=clamp(_Horizon_Color_.rgb*_Horizon_Color_.rgb,0.0,1.0);Linear_Q194.a=_Horizon_Color_.a;vec4 Linear_Q195;Linear_Q195.rgb=clamp(_Ground_Color_.rgb*_Ground_Color_.rgb,0.0,1.0);Linear_Q195.a=_Ground_Color_.a;vec3 Left_Index_Q214;vec3 Right_Index_Q214;vec3 Left_Index_Middle_Q214;vec3 Right_Index_Middle_Q214;Finger_Positions_B214(_Left_Index_Pos_,_Right_Index_Pos_,_Left_Index_Middle_Pos_,_Right_Index_Middle_Pos_,Left_Index_Q214,Right_Index_Q214,Left_Index_Middle_Q214,Right_Index_Middle_Q214);vec4 Linear_Q196;Linear_Q196.rgb=clamp(_Albedo_.rgb*_Albedo_.rgb,0.0,1.0);Linear_Q196.a=_Albedo_.a;vec3 Normalized_Q257=normalize(vBinormal);vec3 Incident_Q220=normalize(vPosition-cameraPosition);vec3 New_Normal_Q229;Bulge_B229(_Bulge_Enabled_,Normalized_Q188,Normalized_Q221,_Bulge_Height_,vColor,_Bulge_Radius_,vBinormal,New_Normal_Q229);float Result_Q227;SSS_B227(vBinormal,New_Normal_Q229,Incident_Q189,Result_Q227);vec4 Result_Q241;Scale_Color_B241(Color_Q233,X_Q240,Result_Q241);float Transmit_Q272;float Reflect_Q272;Fast_Fresnel_B272(_Front_Reflect_,_Edge_Reflect_,_Power_,New_Normal_Q229,Incident_Q189,Transmit_Q272,Reflect_Q272);float Product_Q275=Y_Q240*Y_Q240;vec3 NearP_Q215;vec3 NearQ_Q215;float Distance_Q215;Min_Segment_Distance_B215(Left_Index_Q214,Left_Index_Middle_Q214,vPosition,cameraPosition,NearP_Q215,NearQ_Q215,Distance_Q215);vec3 NearP_Q213;vec3 NearQ_Q213;float Distance_Q213;Min_Segment_Distance_B215(Right_Index_Q214,Right_Index_Middle_Q214,vPosition,cameraPosition,NearP_Q213,NearQ_Q213,Distance_Q213);vec3 Reflected_Q197=reflect(Incident_Q189,New_Normal_Q229);vec4 Product_Q253=Linear_Q196*vec4(1,1,1,1);vec4 Result_Q282;Rim_Light_B282(Normalized_Q257,Normalized_Q188,Incident_Q220,_Rim_Intensity_,_Rim_Texture_,Result_Q282);float Dot_Q222=dot(Incident_Q220, Normalized_Q221);float MaxAB_Q273=max(Reflect_Q272,Product_Q275);float NotInShadow_Q217;\n#if OCCLUSION_ENABLED\nFingerOcclusion_B217(_Width_,Distance_Q215,_Fuzz_,_Min_Fuzz_,vPosition,vBinormal,NearP_Q215,_Clip_Fade_,NotInShadow_Q217);\n#else\nNotInShadow_Q217=1.0;\n#endif\nfloat NotInShadow_Q218;\n#if OCCLUSION_ENABLED\nFingerOcclusion_B218(_Width_,Distance_Q213,_Fuzz_,_Min_Fuzz_,vPosition,vBinormal,NearP_Q213,_Clip_Fade_,NotInShadow_Q218);\n#else\nNotInShadow_Q218=1.0;\n#endif\nvec4 Reflected_Color_Q201;vec4 Indirect_Diffuse_Q201;\n#if ENV_ENABLE\nMapped_Environment_B201(_Reflection_Map_,_Indirect_Environment_,Reflected_Q197,Reflected_Color_Q201,Indirect_Diffuse_Q201);\n#else\nReflected_Color_Q201=vec4(0,0,0,1);Indirect_Diffuse_Q201=vec4(0,0,0,1);\n#endif\nvec4 Reflected_Color_Q200;vec4 Indirect_Color_Q200;\n#if SKY_ENABLED\nSky_Environment_B200(New_Normal_Q229,Reflected_Q197,Linear_Q193,Linear_Q194,Linear_Q195,_Horizon_Power_,Reflected_Color_Q200,Indirect_Color_Q200);\n#else\nReflected_Color_Q200=vec4(0,0,0,1);Indirect_Color_Q200=vec4(0,0,0,1);\n#endif\nfloat Hue_Q225;float Saturation_Q225;float Value_Q225;float Alpha_Q225;vec3 HSV_Q225;To_HSV_B225(Product_Q253,Hue_Q225,Saturation_Q225,Value_Q225,Alpha_Q225,HSV_Q225);float Hue_Q277;float Saturation_Q277;float Value_Q277;float Alpha_Q277;vec3 HSV_Q277;To_HSV_B225(Result_Q282,Hue_Q277,Saturation_Q277,Value_Q277,Alpha_Q277,HSV_Q277);float Result_Q260;Code_B260(Dot_Q222,Result_Q260);float AbsA_Q226=abs(Result_Q260);float MinAB_Q208=min(NotInShadow_Q217,NotInShadow_Q218);vec4 Sum_Q198=Reflected_Color_Q201+Reflected_Color_Q200;vec4 Sum_Q199=Indirect_Diffuse_Q201+Indirect_Color_Q200;vec3 HSV_Out_Q276;VaryHSV_B258(HSV_Q277,_Rim_Hue_Shift_,_Rim_Saturation_Shift_,_Rim_Value_Shift_,HSV_Out_Q276);float Out_Q264;Remap_Range_B264(-1.0,1.0,0.0,1.0,Result_Q260,Out_Q264);float Product_Q256;Product_Q256=AbsA_Q226*_Hue_Shift_;float X_Q278;float Y_Q278;float Z_Q278;To_XYZ_B224(HSV_Out_Q276,X_Q278,Y_Q278,Z_Q278);vec2 Vec2_Q262=vec2(Out_Q264,0.5);vec3 HSV_Out_Q258;VaryHSV_B258(HSV_Q225,Product_Q256,_Saturation_Shift_,_Value_Shift_,HSV_Out_Q258);vec4 Color_Q279;From_HSV_B223(X_Q278,Y_Q278,Z_Q278,0.0,Color_Q279);vec4 Color_Q261;\n#if IRIDESCENCE_ENABLED\nColor_Q261=texture(_Iridescence_Texture_,Vec2_Q262);\n#else\nColor_Q261=vec4(0,0,0,0);\n#endif\nfloat X_Q224;float Y_Q224;float Z_Q224;To_XYZ_B224(HSV_Out_Q258,X_Q224,Y_Q224,Z_Q224);vec4 Result_Q281=_Rim_Intensity_*Color_Q279;vec4 Result_Q263=_Iridescence_Intensity_*Color_Q261;vec4 Color_Q223;From_HSV_B223(X_Q224,Y_Q224,Z_Q224,0.0,Color_Q223);vec4 Result_Q234=Result_Q241+(1.0-Result_Q241.a)*Color_Q223;vec4 Result_Q271;Fragment_Main_B271(_Sun_Intensity_,_Sun_Theta_,_Sun_Phi_,New_Normal_Q229,Result_Q234,MaxAB_Q273,_Shininess_,Incident_Q189,_Horizon_Color_,_Sky_Color_,_Ground_Color_,_Indirect_Diffuse_,_Specular_,_Horizon_Power_,_Reflection_,Sum_Q198,Sum_Q199,_Sharpness_,Result_Q227,_Subsurface_,vec4(0,0,0,0),Result_Q281,Result_Q263,Result_Q271);vec4 Result_Q209;Scale_RGB_B209(Result_Q271,MinAB_Q208,Result_Q209);vec4 sRGB_Q192;FastLinearTosRGB_B192(Result_Q209,sRGB_Q192);vec4 Result_Q181=Blob_Color_Q180+(1.0-Blob_Color_Q180.a)*sRGB_Q192;vec4 Result_Q190=Result_Q181; Result_Q190.a=1.0;vec4 Out_Color=Result_Q190;float Clip_Threshold=0.001;bool To_sRGB=false;gl_FragColor=Out_Color;}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const mrdlSliderThumbPixelShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"mrdlSliderThumbVertexShader\";\nconst shader = `uniform mat4 world;uniform mat4 viewProjection;uniform vec3 cameraPosition;attribute vec3 position;attribute vec3 normal;attribute vec2 uv;\n#ifdef TANGENT\nattribute vec3 tangent;\n#else\nconst vec3 tangent=vec3(0.);\n#endif\nuniform float _Radius_;uniform float _Bevel_Front_;uniform float _Bevel_Front_Stretch_;uniform float _Bevel_Back_;uniform float _Bevel_Back_Stretch_;uniform float _Radius_Top_Left_;uniform float _Radius_Top_Right_;uniform float _Radius_Bottom_Left_;uniform float _Radius_Bottom_Right_;uniform bool _Bulge_Enabled_;uniform float _Bulge_Height_;uniform float _Bulge_Radius_;uniform float _Sun_Intensity_;uniform float _Sun_Theta_;uniform float _Sun_Phi_;uniform float _Indirect_Diffuse_;uniform vec4 _Albedo_;uniform float _Specular_;uniform float _Shininess_;uniform float _Sharpness_;uniform float _Subsurface_;uniform vec4 _Left_Color_;uniform vec4 _Right_Color_;uniform float _Reflection_;uniform float _Front_Reflect_;uniform float _Edge_Reflect_;uniform float _Power_;uniform vec4 _Sky_Color_;uniform vec4 _Horizon_Color_;uniform vec4 _Ground_Color_;uniform float _Horizon_Power_;uniform sampler2D _Reflection_Map_;uniform sampler2D _Indirect_Environment_;uniform float _Width_;uniform float _Fuzz_;uniform float _Min_Fuzz_;uniform float _Clip_Fade_;uniform float _Hue_Shift_;uniform float _Saturation_Shift_;uniform float _Value_Shift_;uniform vec3 _Blob_Position_;uniform float _Blob_Intensity_;uniform float _Blob_Near_Size_;uniform float _Blob_Far_Size_;uniform float _Blob_Near_Distance_;uniform float _Blob_Far_Distance_;uniform float _Blob_Fade_Length_;uniform float _Blob_Pulse_;uniform float _Blob_Fade_;uniform sampler2D _Blob_Texture_;uniform vec3 _Blob_Position_2_;uniform float _Blob_Near_Size_2_;uniform float _Blob_Pulse_2_;uniform float _Blob_Fade_2_;uniform vec3 _Left_Index_Pos_;uniform vec3 _Right_Index_Pos_;uniform vec3 _Left_Index_Middle_Pos_;uniform vec3 _Right_Index_Middle_Pos_;uniform sampler2D _Decal_;uniform vec2 _Decal_Scale_XY_;uniform bool _Decal_Front_Only_;uniform float _Rim_Intensity_;uniform sampler2D _Rim_Texture_;uniform float _Rim_Hue_Shift_;uniform float _Rim_Saturation_Shift_;uniform float _Rim_Value_Shift_;uniform float _Iridescence_Intensity_;uniform sampler2D _Iridescence_Texture_;uniform bool Use_Global_Left_Index;uniform bool Use_Global_Right_Index;uniform vec4 Global_Left_Index_Tip_Position;uniform vec4 Global_Right_Index_Tip_Position;uniform vec4 Global_Left_Thumb_Tip_Position;uniform vec4 Global_Right_Thumb_Tip_Position;uniform float Global_Left_Index_Tip_Proximity;uniform float Global_Right_Index_Tip_Proximity;varying vec3 vPosition;varying vec3 vNormal;varying vec2 vUV;varying vec3 vTangent;varying vec3 vBinormal;varying vec4 vColor;varying vec4 vExtra1;varying vec4 vExtra2;varying vec4 vExtra3;void Object_To_World_Pos_B162(\nvec3 Pos_Object,\nout vec3 Pos_World)\n{Pos_World=(world*vec4(Pos_Object,1.0)).xyz;}\nvoid Object_To_World_Normal_B182(\nvec3 Nrm_Object,\nout vec3 Nrm_World)\n{Nrm_World=(vec4(Nrm_Object,0.0)).xyz;}\nvoid Blob_Vertex_B173(\nvec3 Position,\nvec3 Normal,\nvec3 Tangent,\nvec3 Bitangent,\nvec3 Blob_Position,\nfloat Intensity,\nfloat Blob_Near_Size,\nfloat Blob_Far_Size,\nfloat Blob_Near_Distance,\nfloat Blob_Far_Distance,\nfloat Blob_Fade_Length,\nfloat Blob_Pulse,\nfloat Blob_Fade,\nout vec4 Blob_Info)\n{vec3 blob= (Use_Global_Left_Index ? Global_Left_Index_Tip_Position.xyz : Blob_Position);vec3 delta=blob-Position;float dist=dot(Normal,delta);float lerpValue=clamp((abs(dist)-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance),0.0,1.0);float fadeValue=1.0-clamp((abs(dist)-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);float size=Blob_Near_Size+(Blob_Far_Size-Blob_Near_Size)*lerpValue;vec2 blobXY=vec2(dot(delta,Tangent),dot(delta,Bitangent))/(0.0001+size);float Fade=fadeValue*Intensity*Blob_Fade;float Distance=(lerpValue*0.5+0.5)*(1.0-Blob_Pulse);Blob_Info=vec4(blobXY.x,blobXY.y,Distance,Fade);}\nvoid Blob_Vertex_B174(\nvec3 Position,\nvec3 Normal,\nvec3 Tangent,\nvec3 Bitangent,\nvec3 Blob_Position,\nfloat Intensity,\nfloat Blob_Near_Size,\nfloat Blob_Far_Size,\nfloat Blob_Near_Distance,\nfloat Blob_Far_Distance,\nfloat Blob_Fade_Length,\nfloat Blob_Pulse,\nfloat Blob_Fade,\nout vec4 Blob_Info)\n{vec3 blob= (Use_Global_Right_Index ? Global_Right_Index_Tip_Position.xyz : Blob_Position);vec3 delta=blob-Position;float dist=dot(Normal,delta);float lerpValue=clamp((abs(dist)-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance),0.0,1.0);float fadeValue=1.0-clamp((abs(dist)-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);float size=Blob_Near_Size+(Blob_Far_Size-Blob_Near_Size)*lerpValue;vec2 blobXY=vec2(dot(delta,Tangent),dot(delta,Bitangent))/(0.0001+size);float Fade=fadeValue*Intensity*Blob_Fade;float Distance=(lerpValue*0.5+0.5)*(1.0-Blob_Pulse);Blob_Info=vec4(blobXY.x,blobXY.y,Distance,Fade);}\nvoid Move_Verts_B280(\nfloat Anisotropy,\nvec3 P,\nfloat Radius,\nfloat Bevel,\nvec3 Normal_Object,\nfloat ScaleZ,\nfloat Stretch,\nout vec3 New_P,\nout vec2 New_UV,\nout float Radial_Gradient,\nout vec3 Radial_Dir,\nout vec3 New_Normal)\n{vec2 UV=P.xy*2.0+0.5;vec2 center=clamp(UV,0.0,1.0);vec2 delta=UV-center;float deltad=(length(delta)*2.0);float f=(Bevel+(Radius-Bevel)*Stretch)/Radius;float innerd=clamp(deltad*2.0,0.0,1.0);float outerd=clamp(deltad*2.0-1.0,0.0,1.0);float bevelAngle=outerd*3.14159*0.5;float sinb=sin(bevelAngle);float cosb=cos(bevelAngle);float beveld=(1.0-f)*innerd+f*sinb;float br=outerd;vec2 r2=2.0*vec2(Radius/Anisotropy,Radius);float dir=P.z<0.0001 ? 1.0 : -1.0;New_UV=center+r2*((0.5-center)+normalize(delta+vec2(0.0,0.000001))*beveld*0.5);New_P=vec3(New_UV-0.5,P.z+dir*(1.0-cosb)*Bevel*ScaleZ);Radial_Gradient=clamp((deltad-0.5)*2.0,0.0,1.0);Radial_Dir=vec3(delta*r2,0.0);vec3 beveledNormal=cosb*Normal_Object+sinb*vec3(delta.x,delta.y,0.0);New_Normal=Normal_Object.z==0.0 ? Normal_Object : beveledNormal;}\nvoid Object_To_World_Dir_B210(\nvec3 Dir_Object,\nout vec3 Normal_World,\nout vec3 Normal_World_N,\nout float Normal_Length)\n{Normal_World=(world*vec4(Dir_Object,0.0)).xyz;Normal_Length=length(Normal_World);Normal_World_N=Normal_World/Normal_Length;}\nvoid To_XYZ_B228(\nvec3 Vec3,\nout float X,\nout float Y,\nout float Z)\n{X=Vec3.x;Y=Vec3.y;Z=Vec3.z;}\nvoid Conditional_Float_B243(\nbool Which,\nfloat If_True,\nfloat If_False,\nout float Result)\n{Result=Which ? If_True : If_False;}\nvoid Object_To_World_Dir_B178(\nvec3 Dir_Object,\nout vec3 Binormal_World,\nout vec3 Binormal_World_N,\nout float Binormal_Length)\n{Binormal_World=(world*vec4(Dir_Object,0.0)).xyz;Binormal_Length=length(Binormal_World);Binormal_World_N=Binormal_World/Binormal_Length;}\nvoid Pick_Radius_B219(\nfloat Radius,\nfloat Radius_Top_Left,\nfloat Radius_Top_Right,\nfloat Radius_Bottom_Left,\nfloat Radius_Bottom_Right,\nvec3 Position,\nout float Result)\n{bool whichY=Position.y>0.0;Result=Position.x<0.0 ? (whichY ? Radius_Top_Left : Radius_Bottom_Left) : (whichY ? Radius_Top_Right : Radius_Bottom_Right);Result*=Radius;}\nvoid Conditional_Float_B186(\nbool Which,\nfloat If_True,\nfloat If_False,\nout float Result)\n{Result=Which ? If_True : If_False;}\nvoid Greater_Than_B187(\nfloat Left,\nfloat Right,\nout bool Not_Greater_Than,\nout bool Greater_Than)\n{Greater_Than=Left>Right;Not_Greater_Than=!Greater_Than;}\nvoid Remap_Range_B255(\nfloat In_Min,\nfloat In_Max,\nfloat Out_Min,\nfloat Out_Max,\nfloat In,\nout float Out)\n{Out=mix(Out_Min,Out_Max,clamp((In-In_Min)/(In_Max-In_Min),0.0,1.0));}\nvoid main()\n{vec2 XY_Q235;XY_Q235=(uv-vec2(0.5,0.5))*_Decal_Scale_XY_+vec2(0.5,0.5);vec3 Tangent_World_Q177;vec3 Tangent_World_N_Q177;float Tangent_Length_Q177;Tangent_World_Q177=(world*vec4(vec3(1,0,0),0.0)).xyz;Tangent_Length_Q177=length(Tangent_World_Q177);Tangent_World_N_Q177=Tangent_World_Q177/Tangent_Length_Q177;vec3 Normal_World_Q210;vec3 Normal_World_N_Q210;float Normal_Length_Q210;Object_To_World_Dir_B210(vec3(0,0,1),Normal_World_Q210,Normal_World_N_Q210,Normal_Length_Q210);float X_Q228;float Y_Q228;float Z_Q228;To_XYZ_B228(position,X_Q228,Y_Q228,Z_Q228);vec3 Nrm_World_Q176;Nrm_World_Q176=normalize((world*vec4(normal,0.0)).xyz);vec3 Binormal_World_Q178;vec3 Binormal_World_N_Q178;float Binormal_Length_Q178;Object_To_World_Dir_B178(vec3(0,1,0),Binormal_World_Q178,Binormal_World_N_Q178,Binormal_Length_Q178);float Anisotropy_Q179=Tangent_Length_Q177/Binormal_Length_Q178;float Result_Q219;Pick_Radius_B219(_Radius_,_Radius_Top_Left_,_Radius_Top_Right_,_Radius_Bottom_Left_,_Radius_Bottom_Right_,position,Result_Q219);float Anisotropy_Q203=Binormal_Length_Q178/Normal_Length_Q210;bool Not_Greater_Than_Q187;bool Greater_Than_Q187;Greater_Than_B187(Z_Q228,0.0,Not_Greater_Than_Q187,Greater_Than_Q187);vec4 Linear_Q251;Linear_Q251.rgb=clamp(_Left_Color_.rgb*_Left_Color_.rgb,0.0,1.0);Linear_Q251.a=_Left_Color_.a;vec4 Linear_Q252;Linear_Q252.rgb=clamp(_Right_Color_.rgb*_Right_Color_.rgb,0.0,1.0);Linear_Q252.a=_Right_Color_.a;vec3 Difference_Q211=vec3(0,0,0)-Normal_World_N_Q210;vec4 Out_Color_Q184=vec4(X_Q228,Y_Q228,Z_Q228,1);float Result_Q186;Conditional_Float_B186(Greater_Than_Q187,_Bevel_Back_,_Bevel_Front_,Result_Q186);float Result_Q244;Conditional_Float_B186(Greater_Than_Q187,_Bevel_Back_Stretch_,_Bevel_Front_Stretch_,Result_Q244);vec3 New_P_Q280;vec2 New_UV_Q280;float Radial_Gradient_Q280;vec3 Radial_Dir_Q280;vec3 New_Normal_Q280;Move_Verts_B280(Anisotropy_Q179,position,Result_Q219,Result_Q186,normal,Anisotropy_Q203,Result_Q244,New_P_Q280,New_UV_Q280,Radial_Gradient_Q280,Radial_Dir_Q280,New_Normal_Q280);float X_Q248;float Y_Q248;X_Q248=New_UV_Q280.x;Y_Q248=New_UV_Q280.y;vec3 Pos_World_Q162;Object_To_World_Pos_B162(New_P_Q280,Pos_World_Q162);vec3 Nrm_World_Q182;Object_To_World_Normal_B182(New_Normal_Q280,Nrm_World_Q182);vec4 Blob_Info_Q173;\n#if BLOB_ENABLE\nBlob_Vertex_B173(Pos_World_Q162,Nrm_World_Q176,Tangent_World_N_Q177,Binormal_World_N_Q178,_Blob_Position_,_Blob_Intensity_,_Blob_Near_Size_,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,_Blob_Fade_Length_,_Blob_Pulse_,_Blob_Fade_,Blob_Info_Q173);\n#else\nBlob_Info_Q173=vec4(0,0,0,0);\n#endif\nvec4 Blob_Info_Q174;\n#if BLOB_ENABLE_2\nBlob_Vertex_B174(Pos_World_Q162,Nrm_World_Q176,Tangent_World_N_Q177,Binormal_World_N_Q178,_Blob_Position_2_,_Blob_Intensity_,_Blob_Near_Size_2_,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,_Blob_Fade_Length_,_Blob_Pulse_2_,_Blob_Fade_2_,Blob_Info_Q174);\n#else\nBlob_Info_Q174=vec4(0,0,0,0);\n#endif\nfloat Out_Q255;Remap_Range_B255(0.0,1.0,0.0,1.0,X_Q248,Out_Q255);float X_Q236;float Y_Q236;float Z_Q236;To_XYZ_B228(Nrm_World_Q182,X_Q236,Y_Q236,Z_Q236);vec4 Color_At_T_Q247=mix(Linear_Q251,Linear_Q252,Out_Q255);float Minus_F_Q237=-Z_Q236;float R_Q249;float G_Q249;float B_Q249;float A_Q249;R_Q249=Color_At_T_Q247.r; G_Q249=Color_At_T_Q247.g; B_Q249=Color_At_T_Q247.b; A_Q249=Color_At_T_Q247.a;float ClampF_Q238=clamp(0.0,Minus_F_Q237,1.0);float Result_Q243;Conditional_Float_B243(_Decal_Front_Only_,ClampF_Q238,1.0,Result_Q243);vec4 Vec4_Q239=vec4(Result_Q243,Radial_Gradient_Q280,G_Q249,B_Q249);vec3 Position=Pos_World_Q162;vec3 Normal=Nrm_World_Q182;vec2 UV=XY_Q235;vec3 Tangent=Tangent_World_N_Q177;vec3 Binormal=Difference_Q211;vec4 Color=Out_Color_Q184;vec4 Extra1=Vec4_Q239;vec4 Extra2=Blob_Info_Q173;vec4 Extra3=Blob_Info_Q174;gl_Position=viewProjection*vec4(Position,1);vPosition=Position;vNormal=Normal;vUV=UV;vTangent=Tangent;vBinormal=Binormal;vColor=Color;vExtra1=Extra1;vExtra2=Extra2;vExtra3=Extra3;}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const mrdlSliderThumbVertexShader = { name, shader };\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { SerializationHelper, serialize } from \"core/Misc/decorators\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport { Vector2, Vector3, Vector4 } from \"core/Maths/math.vector\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"core/Materials/materialHelper\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { Color4 } from \"core/Maths/math.color\";\r\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\r\nimport { Constants } from \"core/Engines/constants\";\r\n\r\nimport \"./shaders/mrdlSliderThumb.fragment\";\r\nimport \"./shaders/mrdlSliderThumb.vertex\";\r\n\r\n/** @internal */\r\nclass MRDLSliderThumbMaterialDefines extends MaterialDefines {\r\n    /*\r\n        \"SKY_ENABLED\", \"BLOB_ENABLE_2\", \"IRIDESCENCE_ENABLED\"\r\n    */\r\n    public SKY_ENABLED = true;\r\n    public BLOB_ENABLE_2 = true;\r\n    public IRIDESCENCE_ENABLED = true;\r\n\r\n    constructor() {\r\n        super();\r\n        this._needNormals = true;\r\n        this._needUVs = true;\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render Slider Thumb material with MRDL\r\n */\r\nexport class MRDLSliderThumbMaterial extends PushMaterial {\r\n    /**\r\n     * URL pointing to the texture used to define the coloring for the Iridescent Map effect.\r\n     */\r\n    public static BLUE_GRADIENT_TEXTURE_URL = \"https://assets.babylonjs.com/meshes/MRTK/MRDL/mrtk-mrdl-blue-gradient.png\";\r\n    private _blueGradientTexture: Texture;\r\n    private _decalTexture: Texture;\r\n    private _reflectionMapTexture: Texture;\r\n    private _indirectEnvTexture: Texture;\r\n\r\n    /**\r\n     * Gets or sets the corner Radius on the slider thumb.\r\n     */\r\n    @serialize()\r\n    public radius = 0.157;\r\n\r\n    /**\r\n     * Gets or sets the Bevel Front on the slider thumb.\r\n     */\r\n    @serialize()\r\n    public bevelFront = 0.065;\r\n\r\n    /**\r\n     * Gets or sets the Bevel Front Stretch on the slider thumb.\r\n     */\r\n    @serialize()\r\n    public bevelFrontStretch = 0.077;\r\n\r\n    /**\r\n     * Gets or sets the Bevel Back on the slider thumb.\r\n     */\r\n    @serialize()\r\n    public bevelBack = 0.031;\r\n\r\n    /**\r\n     * Gets or sets the Bevel Back Stretch on the slider thumb.\r\n     */\r\n    @serialize()\r\n    public bevelBackStretch = 0;\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusTopLeft = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusTopRight = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusBottomLeft = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusBottomRight = 1.0;\r\n\r\n    /**\r\n     * Gets or sets whether Bulge is enabled.\r\n     * Default is false.\r\n     */\r\n    @serialize()\r\n    public bulgeEnabled = false;\r\n\r\n    /**\r\n     * Gets or sets the Bulge Height.\r\n     */\r\n    @serialize()\r\n    public bulgeHeight = -0.323;\r\n\r\n    /**\r\n     * Gets or sets the Bulge Radius.\r\n     */\r\n    @serialize()\r\n    public bulgeRadius = 0.73;\r\n\r\n    /**\r\n     * Gets or sets the Sun Intensity.\r\n     */\r\n    @serialize()\r\n    public sunIntensity = 2;\r\n\r\n    /**\r\n     * Gets or sets the Sun Theta.\r\n     */\r\n    @serialize()\r\n    public sunTheta = 0.937;\r\n\r\n    /**\r\n     * Gets or sets the Sun Phi.\r\n     */\r\n    @serialize()\r\n    public sunPhi = 0.555;\r\n\r\n    /**\r\n     * Gets or sets the Indirect Diffuse.\r\n     */\r\n    @serialize()\r\n    public indirectDiffuse = 1;\r\n\r\n    /**\r\n     * Gets or sets the base albedo.\r\n     */\r\n    @serialize()\r\n    public albedo = new Color4(0.0117647, 0.505882, 0.996078, 1);\r\n\r\n    /**\r\n     * Gets or sets the Specular value.\r\n     */\r\n    @serialize()\r\n    public specular = 0;\r\n\r\n    /**\r\n     * Gets or sets the Shininess value.\r\n     */\r\n    @serialize()\r\n    public shininess = 10;\r\n\r\n    /**\r\n     * Gets or sets the Sharpness value.\r\n     */\r\n    @serialize()\r\n    public sharpness = 0;\r\n\r\n    /**\r\n     * Gets or sets the Subsurface value.\r\n     */\r\n    @serialize()\r\n    public subsurface = 0.31;\r\n\r\n    /**\r\n     * Gets or sets the left gradient color.\r\n     */\r\n    @serialize()\r\n    public leftGradientColor = new Color4(0.0117647, 0.505882, 0.996078, 1);\r\n\r\n    /**\r\n     * Gets or sets the right gradient color.\r\n     */\r\n    @serialize()\r\n    public rightGradientColor = new Color4(0.0117647, 0.505882, 0.996078, 1);\r\n\r\n    /**\r\n     * Gets or sets the reflection value.\r\n     */\r\n    @serialize()\r\n    public reflection = 0.749;\r\n\r\n    /**\r\n     * Gets or sets the front reflect value.\r\n     */\r\n    @serialize()\r\n    public frontReflect = 0;\r\n\r\n    /**\r\n     * Gets or sets the edge reflect value.\r\n     */\r\n    @serialize()\r\n    public edgeReflect = 0.09;\r\n\r\n    /**\r\n     * Gets or sets the power value.\r\n     */\r\n    @serialize()\r\n    public power = 8.1;\r\n\r\n    /**\r\n     * Gets or sets the sky color.\r\n     */\r\n    @serialize()\r\n    public skyColor = new Color4(0.0117647, 0.960784, 0.996078, 1);\r\n\r\n    /**\r\n     * Gets or sets the horizon color.\r\n     */\r\n    @serialize()\r\n    public horizonColor = new Color4(0.0117647, 0.333333, 0.996078, 1);\r\n\r\n    /**\r\n     * Gets or sets the ground color.\r\n     */\r\n    @serialize()\r\n    public groundColor = new Color4(0, 0.254902, 0.996078, 1);\r\n\r\n    /**\r\n     * Gets or sets the horizon power value.\r\n     */\r\n    @serialize()\r\n    public horizonPower = 1;\r\n\r\n    /**\r\n     * Gets or sets the finger occlusion width value.\r\n     */\r\n    @serialize()\r\n    public width = 0.02;\r\n\r\n    /**\r\n     * Gets or sets the finger occlusion fuzz value.\r\n     */\r\n    @serialize()\r\n    public fuzz = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the minimum finger occlusion fuzz value.\r\n     */\r\n    @serialize()\r\n    public minFuzz = 0.001;\r\n\r\n    /**\r\n     * Gets or sets the finger occlusion clip fade value.\r\n     */\r\n    @serialize()\r\n    public clipFade = 0.01;\r\n\r\n    /**\r\n     * Gets or sets the hue shift value.\r\n     */\r\n    @serialize()\r\n    public hueShift = 0;\r\n\r\n    /**\r\n     * Gets or sets the saturation shift value.\r\n     */\r\n    @serialize()\r\n    public saturationShift = 0;\r\n\r\n    /**\r\n     * Gets or sets the value shift.\r\n     */\r\n    @serialize()\r\n    public valueShift = 0;\r\n\r\n    /**\r\n     * Gets or sets the position of the hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobPosition = new Vector3(0, 0, 0.1);\r\n\r\n    /**\r\n     * Gets or sets the intensity of the hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobIntensity = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the near size of the hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobNearSize = 0.01;\r\n\r\n    /**\r\n     * Gets or sets the far size of the hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobFarSize = 0.03;\r\n\r\n    /**\r\n     * Gets or sets the distance considered \"near\" to the mesh, which controls the size of the hover glow effect (see blobNearSize).\r\n     */\r\n    @serialize()\r\n    public blobNearDistance = 0;\r\n\r\n    /**\r\n     * Gets or sets the distance considered \"far\" from the mesh, which controls the size of the hover glow effect (see blobFarSize).\r\n     */\r\n    @serialize()\r\n    public blobFarDistance = 0.08;\r\n\r\n    /**\r\n     * Gets or sets the length of the hover glow effect fade.\r\n     */\r\n    @serialize()\r\n    public blobFadeLength = 0.576;\r\n\r\n    /**\r\n     * Gets or sets the progress of the hover glow effect selection animation corresponding to the left pointer (0.0 - 1.0).\r\n     */\r\n    @serialize()\r\n    public blobPulse = 0;\r\n\r\n    /**\r\n     * Gets or sets the opacity of the hover glow effect corresponding to the left pointer (0.0 - 1.0). Default is 0.\r\n     */\r\n    @serialize()\r\n    public blobFade = 1;\r\n\r\n    /**\r\n     * Gets or sets the position of the hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobPosition2 = new Vector3(0.2, 0, 0.1);\r\n\r\n    /**\r\n     * Gets or sets the size of the hover glow effect when the right pointer is considered \"near\" to the mesh (see blobNearDistance).\r\n     */\r\n    @serialize()\r\n    public blobNearSize2 = 0.01;\r\n\r\n    /**\r\n     * Gets or sets the progress of the hover glow effect selection animation corresponding to the right pointer (0.0 - 1.0).\r\n     */\r\n    @serialize()\r\n    public blobPulse2 = 0;\r\n\r\n    /**\r\n     * Gets or sets the opacity of the hover glow effect corresponding to the right pointer (0.0 - 1.0). Default is 1.\r\n     */\r\n    @serialize()\r\n    public blobFade2 = 1;\r\n\r\n    /**\r\n     * Gets or sets the texture of the hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobTexture = new Texture(\"\", this.getScene());\r\n\r\n    /**\r\n     * Gets or sets the finger position for left index.\r\n     */\r\n    @serialize()\r\n    public leftIndexPosition = new Vector3(0, 0, 1);\r\n\r\n    /**\r\n     * Gets or sets the finger position for right index.\r\n     */\r\n    @serialize()\r\n    public rightIndexPosition = new Vector3(-1, -1, -1);\r\n\r\n    /**\r\n     * Gets or sets the finger position for left index middle position.\r\n     */\r\n    @serialize()\r\n    public leftIndexMiddlePosition = new Vector3(0, 0, 0);\r\n\r\n    /**\r\n     * Gets or sets the finger position for right index middle position.\r\n     */\r\n    @serialize()\r\n    public rightIndexMiddlePosition = new Vector3(0, 0, 0);\r\n\r\n    /**\r\n     * Gets or sets the Decal Scale for XY.\r\n     */\r\n    @serialize()\r\n    public decalScaleXY = new Vector2(1.5, 1.5);\r\n\r\n    /**\r\n     * Gets or sets decalFrontOnly\r\n     * Default is true\r\n     */\r\n    @serialize()\r\n    public decalFrontOnly = true;\r\n\r\n    /**\r\n     * Gets or sets the Rim Light intensity.\r\n     */\r\n    @serialize()\r\n    public rimIntensity = 0.287;\r\n\r\n    /**\r\n     * Gets or sets the Rim Light hue shift value.\r\n     */\r\n    @serialize()\r\n    public rimHueShift = 0;\r\n\r\n    /**\r\n     * Gets or sets the Rim Light saturation shift value.\r\n     */\r\n    @serialize()\r\n    public rimSaturationShift = 0;\r\n\r\n    /**\r\n     * Gets or sets the Rim Light value shift.\r\n     */\r\n    @serialize()\r\n    public rimValueShift = -1;\r\n\r\n    /**\r\n     * Gets or sets the intensity of the iridescence effect.\r\n     */\r\n    @serialize()\r\n    public iridescenceIntensity = 0;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public useGlobalLeftIndex = 1.0;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public useGlobalRightIndex = 1.0;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalLeftIndexTipProximity = 0.0;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalRightIndexTipProximity = 0.0;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalLeftIndexTipPosition = new Vector4(0.5, 0.0, -0.55, 1.0);\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globaRightIndexTipPosition = new Vector4(0.0, 0.0, 0.0, 1.0);\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalLeftThumbTipPosition = new Vector4(0.5, 0.0, -0.55, 1.0);\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalRightThumbTipPosition = new Vector4(0.0, 0.0, 0.0, 1.0);\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalLeftIndexMiddlePosition = new Vector4(0.5, 0.0, -0.55, 1.0);\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalRightIndexMiddlePosition = new Vector4(0.0, 0.0, 0.0, 1.0);\r\n\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n        this.alphaMode = Constants.ALPHA_DISABLE;\r\n        this.backFaceCulling = false;\r\n        this._blueGradientTexture = new Texture(MRDLSliderThumbMaterial.BLUE_GRADIENT_TEXTURE_URL, scene, true, false, Texture.NEAREST_SAMPLINGMODE);\r\n        this._decalTexture = new Texture(\"\", this.getScene());\r\n        this._reflectionMapTexture = new Texture(\"\", this.getScene());\r\n        this._indirectEnvTexture = new Texture(\"\", this.getScene());\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new MRDLSliderThumbMaterialDefines();\r\n        }\r\n\r\n        const defines = <MRDLSliderThumbMaterialDefines>subMesh.materialDefines;\r\n        const scene = this.getScene();\r\n\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, false);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\r\n\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            if (defines.TANGENT) {\r\n                attribs.push(VertexBuffer.TangentKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            const shaderName = \"mrdlSliderThumb\";\r\n            const join = defines.toString();\r\n\r\n            const uniforms = [\r\n                \"world\",\r\n                \"viewProjection\",\r\n                \"cameraPosition\",\r\n                \"_Radius_\",\r\n                \"_Bevel_Front_\",\r\n                \"_Bevel_Front_Stretch_\",\r\n                \"_Bevel_Back_\",\r\n                \"_Bevel_Back_Stretch_\",\r\n                \"_Radius_Top_Left_\",\r\n                \"_Radius_Top_Right_\",\r\n                \"_Radius_Bottom_Left_\",\r\n                \"_Radius_Bottom_Right_\",\r\n                \"_Bulge_Enabled_\",\r\n                \"_Bulge_Height_\",\r\n                \"_Bulge_Radius_\",\r\n                \"_Sun_Intensity_\",\r\n                \"_Sun_Theta_\",\r\n                \"_Sun_Phi_\",\r\n                \"_Indirect_Diffuse_\",\r\n                \"_Albedo_\",\r\n                \"_Specular_\",\r\n                \"_Shininess_\",\r\n                \"_Sharpness_\",\r\n                \"_Subsurface_\",\r\n                \"_Left_Color_\",\r\n                \"_Right_Color_\",\r\n                \"_Reflection_\",\r\n                \"_Front_Reflect_\",\r\n                \"_Edge_Reflect_\",\r\n                \"_Power_\",\r\n                \"_Sky_Color_\",\r\n                \"_Horizon_Color_\",\r\n                \"_Ground_Color_\",\r\n                \"_Horizon_Power_\",\r\n                \"_Reflection_Map_\",\r\n                \"_Indirect_Environment_\",\r\n                \"_Width_\",\r\n                \"_Fuzz_\",\r\n                \"_Min_Fuzz_\",\r\n                \"_Clip_Fade_\",\r\n                \"_Hue_Shift_\",\r\n                \"_Saturation_Shift_\",\r\n                \"_Value_Shift_\",\r\n                \"_Blob_Position_\",\r\n                \"_Blob_Intensity_\",\r\n                \"_Blob_Near_Size_\",\r\n                \"_Blob_Far_Size_\",\r\n                \"_Blob_Near_Distance_\",\r\n                \"_Blob_Far_Distance_\",\r\n                \"_Blob_Fade_Length_\",\r\n                \"_Blob_Pulse_\",\r\n                \"_Blob_Fade_\",\r\n                \"_Blob_Texture_\",\r\n                \"_Blob_Position_2_\",\r\n                \"_Blob_Near_Size_2_\",\r\n                \"_Blob_Pulse_2_\",\r\n                \"_Blob_Fade_2_\",\r\n                \"_Left_Index_Pos_\",\r\n                \"_Right_Index_Pos_\",\r\n                \"_Left_Index_Middle_Pos_\",\r\n                \"_Right_Index_Middle_Pos_\",\r\n                \"_Decal_\",\r\n                \"_Decal_Scale_XY_\",\r\n                \"_Decal_Front_Only_\",\r\n                \"_Rim_Intensity_\",\r\n                \"_Rim_Texture_\",\r\n                \"_Rim_Hue_Shift_\",\r\n                \"_Rim_Saturation_Shift_\",\r\n                \"_Rim_Value_Shift_\",\r\n                \"_Iridescence_Intensity_\",\r\n                \"_Iridescence_Texture_\",\r\n                \"Use_Global_Left_Index\",\r\n                \"Use_Global_Right_Index\",\r\n                \"Global_Left_Index_Tip_Position\",\r\n                \"Global_Right_Index_Tip_Position\",\r\n                \"Global_Left_Thumb_Tip_Position\",\r\n                \"Global_Right_Thumb_Tip_Position\",\r\n                \"Global_Left_Index_Middle_Position;\",\r\n                \"Global_Right_Index_Middle_Position\",\r\n                \"Global_Left_Index_Tip_Proximity\",\r\n                \"Global_Right_Index_Tip_Proximity\",\r\n            ];\r\n            const samplers: string[] = [\"_Rim_Texture_\", \"_Iridescence_Texture_\"];\r\n            const uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4,\r\n            });\r\n\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: { maxSimultaneousLights: 4 },\r\n                    },\r\n                    engine\r\n                ),\r\n                defines\r\n            );\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const defines = <MRDLSliderThumbMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", this.getScene().getTransformMatrix());\r\n        this._activeEffect.setVector3(\"cameraPosition\", this.getScene().activeCamera!.position);\r\n\r\n        // \"Round Rect\"\r\n        this._activeEffect.setFloat(\"_Radius_\", this.radius);\r\n        this._activeEffect.setFloat(\"_Bevel_Front_\", this.bevelFront);\r\n        this._activeEffect.setFloat(\"_Bevel_Front_Stretch_\", this.bevelFrontStretch);\r\n        this._activeEffect.setFloat(\"_Bevel_Back_\", this.bevelBack);\r\n        this._activeEffect.setFloat(\"_Bevel_Back_Stretch_\", this.bevelBackStretch);\r\n\r\n        // \"Radii Multipliers\"\r\n        this._activeEffect.setFloat(\"_Radius_Top_Left_\", this.radiusTopLeft);\r\n        this._activeEffect.setFloat(\"_Radius_Top_Right_\", this.radiusTopRight);\r\n        this._activeEffect.setFloat(\"_Radius_Bottom_Left_\", this.radiusBottomLeft);\r\n        this._activeEffect.setFloat(\"_Radius_Bottom_Right_\", this.radiusBottomRight);\r\n\r\n        // \"Bulge\"\r\n        this._activeEffect.setFloat(\"_Bulge_Enabled_\", this.bulgeEnabled ? 1.0 : 0.0);\r\n        this._activeEffect.setFloat(\"_Bulge_Height_\", this.bulgeHeight);\r\n        this._activeEffect.setFloat(\"_Bulge_Radius_\", this.bulgeRadius);\r\n\r\n        // \"Sun\"\r\n        this._activeEffect.setFloat(\"_Sun_Intensity_\", this.sunIntensity);\r\n        this._activeEffect.setFloat(\"_Sun_Theta_\", this.sunTheta);\r\n        this._activeEffect.setFloat(\"_Sun_Phi_\", this.sunPhi);\r\n        this._activeEffect.setFloat(\"_Indirect_Diffuse_\", this.indirectDiffuse);\r\n\r\n        // \"Diffuse And Specular\"\r\n        this._activeEffect.setDirectColor4(\"_Albedo_\", this.albedo);\r\n        this._activeEffect.setFloat(\"_Specular_\", this.specular);\r\n        this._activeEffect.setFloat(\"_Shininess_\", this.shininess);\r\n        this._activeEffect.setFloat(\"_Sharpness_\", this.sharpness);\r\n        this._activeEffect.setFloat(\"_Subsurface_\", this.subsurface);\r\n\r\n        // \"Gradient\"\r\n        this._activeEffect.setDirectColor4(\"_Left_Color_\", this.leftGradientColor);\r\n        this._activeEffect.setDirectColor4(\"_Right_Color_\", this.rightGradientColor);\r\n\r\n        // \"Reflection\"\r\n        this._activeEffect.setFloat(\"_Reflection_\", this.reflection);\r\n        this._activeEffect.setFloat(\"_Front_Reflect_\", this.frontReflect);\r\n        this._activeEffect.setFloat(\"_Edge_Reflect_\", this.edgeReflect);\r\n        this._activeEffect.setFloat(\"_Power_\", this.power);\r\n\r\n        // \"Sky Environment\"\r\n        //define SKY_ENABLED true;\r\n        this._activeEffect.setDirectColor4(\"_Sky_Color_\", this.skyColor);\r\n        this._activeEffect.setDirectColor4(\"_Horizon_Color_\", this.horizonColor);\r\n        this._activeEffect.setDirectColor4(\"_Ground_Color_\", this.groundColor);\r\n        this._activeEffect.setFloat(\"_Horizon_Power_\", this.horizonPower);\r\n\r\n        // \"Mapped Environment\"\r\n        //define ENV_ENABLE false;\r\n        this._activeEffect.setTexture(\"_Reflection_Map_\", this._reflectionMapTexture);\r\n        this._activeEffect.setTexture(\"_Indirect_Environment_\", this._indirectEnvTexture);\r\n\r\n        // \"FingerOcclusion\"\r\n        //define OCCLUSION_ENABLED false;\r\n        this._activeEffect.setFloat(\"_Width_\", this.width);\r\n        this._activeEffect.setFloat(\"_Fuzz_\", this.fuzz);\r\n        this._activeEffect.setFloat(\"_Min_Fuzz_\", this.minFuzz);\r\n        this._activeEffect.setFloat(\"_Clip_Fade_\", this.clipFade);\r\n\r\n        // \"View Based Color Shift\"\r\n        this._activeEffect.setFloat(\"_Hue_Shift_\", this.hueShift);\r\n        this._activeEffect.setFloat(\"_Saturation_Shift_\", this.saturationShift);\r\n        this._activeEffect.setFloat(\"_Value_Shift_\", this.valueShift);\r\n\r\n        // \"Blob\"\r\n        //define BLOB_ENABLE false;\r\n        this._activeEffect.setVector3(\"_Blob_Position_\", this.blobPosition);\r\n        this._activeEffect.setFloat(\"_Blob_Intensity_\", this.blobIntensity);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Size_\", this.blobNearSize);\r\n        this._activeEffect.setFloat(\"_Blob_Far_Size_\", this.blobFarSize);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Distance_\", this.blobNearDistance);\r\n        this._activeEffect.setFloat(\"_Blob_Far_Distance_\", this.blobFarDistance);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_Length_\", this.blobFadeLength);\r\n        this._activeEffect.setFloat(\"_Blob_Pulse_\", this.blobPulse);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_\", this.blobFade);\r\n\r\n        // \"Blob Texture\"\r\n        this._activeEffect.setTexture(\"_Blob_Texture_\", this.blobTexture);\r\n\r\n        // \"Blob 2\"\r\n        //define BLOB_ENABLE_2 true;\r\n        this._activeEffect.setVector3(\"_Blob_Position_2_\", this.blobPosition2);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Size_2_\", this.blobNearSize2);\r\n        this._activeEffect.setFloat(\"_Blob_Pulse_2_\", this.blobPulse2);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_2_\", this.blobFade2);\r\n\r\n        // \"Finger Positions\"\r\n        this._activeEffect.setVector3(\"_Left_Index_Pos_\", this.leftIndexPosition);\r\n        this._activeEffect.setVector3(\"_Right_Index_Pos_\", this.rightIndexPosition);\r\n        this._activeEffect.setVector3(\"_Left_Index_Middle_Pos_\", this.leftIndexMiddlePosition);\r\n        this._activeEffect.setVector3(\"_Right_Index_Middle_Pos_\", this.rightIndexMiddlePosition);\r\n\r\n        // \"Decal Texture\"\r\n        //define DECAL_ENABLE false;\r\n        this._activeEffect.setTexture(\"_Decal_\", this._decalTexture);\r\n        this._activeEffect.setVector2(\"_Decal_Scale_XY_\", this.decalScaleXY);\r\n        this._activeEffect.setFloat(\"_Decal_Front_Only_\", this.decalFrontOnly ? 1.0 : 0.0);\r\n\r\n        // \"Rim Light\"\r\n        this._activeEffect.setFloat(\"_Rim_Intensity_\", this.rimIntensity);\r\n        this._activeEffect.setTexture(\"_Rim_Texture_\", this._blueGradientTexture);\r\n        this._activeEffect.setFloat(\"_Rim_Hue_Shift_\", this.rimHueShift);\r\n        this._activeEffect.setFloat(\"_Rim_Saturation_Shift_\", this.rimSaturationShift);\r\n        this._activeEffect.setFloat(\"_Rim_Value_Shift_\", this.rimValueShift);\r\n\r\n        // \"Iridescence\"\r\n        //define IRIDESCENCE_ENABLED true;\r\n        this._activeEffect.setFloat(\"_Iridescence_Intensity_\", this.iridescenceIntensity);\r\n        this._activeEffect.setTexture(\"_Iridescence_Texture_\", this._blueGradientTexture);\r\n\r\n        // Global inputs\r\n        this._activeEffect.setFloat(\"Use_Global_Left_Index\", this.useGlobalLeftIndex);\r\n        this._activeEffect.setFloat(\"Use_Global_Right_Index\", this.useGlobalRightIndex);\r\n\r\n        this._activeEffect.setVector4(\"Global_Left_Index_Tip_Position\", this.globalLeftIndexTipPosition);\r\n        this._activeEffect.setVector4(\"Global_Right_Index_Tip_Position\", this.globaRightIndexTipPosition);\r\n\r\n        this._activeEffect.setVector4(\"Global_Left_Thumb_Tip_Position\", this.globalLeftThumbTipPosition);\r\n        this._activeEffect.setVector4(\"Global_Right_Thumb_Tip_Position\", this.globalRightThumbTipPosition);\r\n\r\n        this._activeEffect.setVector4(\"Global_Left_Index_Middle_Position\", this.globalLeftIndexMiddlePosition);\r\n        this._activeEffect.setVector4(\"Global_Right_Index_Middle_Position\", this.globalRightIndexMiddlePosition);\r\n\r\n        this._activeEffect.setFloat(\"Global_Left_Index_Tip_Proximity\", this.globalLeftIndexTipProximity);\r\n        this._activeEffect.setFloat(\"Global_Right_Index_Tip_Proximity\", this.globalRightIndexTipProximity);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    /**\r\n     * Get the list of animatables in the material.\r\n     * @returns the list of animatables object used in the material\r\n     */\r\n    public getAnimatables(): IAnimatable[] {\r\n        return [];\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n        this._reflectionMapTexture.dispose();\r\n        this._indirectEnvTexture.dispose();\r\n        this._blueGradientTexture.dispose();\r\n        this._decalTexture.dispose();\r\n    }\r\n\r\n    public clone(name: string): MRDLSliderThumbMaterial {\r\n        return SerializationHelper.Clone(() => new MRDLSliderThumbMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n        serializationObject.customType = \"BABYLON.MRDLSliderThumbMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"MRDLSliderThumbMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): MRDLSliderThumbMaterial {\r\n        return SerializationHelper.Parse(() => new MRDLSliderThumbMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.MRDLSliderThumbMaterial\", MRDLSliderThumbMaterial);\r\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"mrdlBackplatePixelShader\";\nconst shader = `uniform vec3 cameraPosition;varying vec3 vPosition;varying vec3 vNormal;varying vec2 vUV;varying vec3 vTangent;varying vec3 vBinormal;varying vec4 vExtra1;varying vec4 vExtra2;uniform float _Radius_;uniform float _Line_Width_;uniform bool _Absolute_Sizes_;uniform float _Filter_Width_;uniform vec4 _Base_Color_;uniform vec4 _Line_Color_;uniform float _Radius_Top_Left_;uniform float _Radius_Top_Right_;uniform float _Radius_Bottom_Left_;uniform float _Radius_Bottom_Right_;uniform float _Rate_;uniform vec4 _Highlight_Color_;uniform float _Highlight_Width_;uniform vec4 _Highlight_Transform_;uniform float _Highlight_;uniform float _Iridescence_Intensity_;uniform float _Iridescence_Edge_Intensity_;uniform vec4 _Iridescence_Tint_;uniform sampler2D _Iridescent_Map_;uniform float _Angle_;uniform bool _Reflected_;uniform float _Frequency_;uniform float _Vertical_Offset_;uniform vec4 _Gradient_Color_;uniform vec4 _Top_Left_;uniform vec4 _Top_Right_;uniform vec4 _Bottom_Left_;uniform vec4 _Bottom_Right_;uniform float _Edge_Width_;uniform float _Edge_Power_;uniform float _Line_Gradient_Blend_;uniform float _Fade_Out_;void FastLinearTosRGB_B353(\nvec4 Linear,\nout vec4 sRGB)\n{sRGB.rgb=sqrt(clamp(Linear.rgb,0.0,1.0));sRGB.a=Linear.a;}\nvoid Round_Rect_Fragment_B332(\nfloat Radius,\nfloat Line_Width,\nvec4 Line_Color,\nfloat Filter_Width,\nvec2 UV,\nfloat Line_Visibility,\nvec4 Rect_Parms,\nvec4 Fill_Color,\nout vec4 Color)\n{float d=length(max(abs(UV)-Rect_Parms.xy,0.0));float dx=max(fwidth(d)*Filter_Width,0.00001);float g=min(Rect_Parms.z,Rect_Parms.w);float dgrad=max(fwidth(g)*Filter_Width,0.00001);float Inside_Rect=clamp(g/dgrad,0.0,1.0);float inner=clamp((d+dx*0.5-max(Radius-Line_Width,d-dx*0.5))/dx,0.0,1.0);Color=clamp(mix(Fill_Color,Line_Color,inner),0.0,1.0)*Inside_Rect;}\nvoid Iridescence_B343(\nvec3 Position,\nvec3 Normal,\nvec2 UV,\nvec3 Axis,\nvec3 Eye,\nvec4 Tint,\nsampler2D Texture,\nbool Reflected,\nfloat Frequency,\nfloat Vertical_Offset,\nout vec4 Color)\n{vec3 i=normalize(Position-Eye);vec3 r=reflect(i,Normal);float idota=dot(i,Axis);float idotr=dot(i,r);float x=Reflected ? idotr : idota;vec2 xy;xy.x=fract((x*Frequency+1.0)*0.5+UV.y*Vertical_Offset);xy.y=0.5;Color=texture(Texture,xy);Color.rgb*=Tint.rgb;}\nvoid Scale_RGB_B346(\nvec4 Color,\nfloat Scalar,\nout vec4 Result)\n{Result=vec4(Scalar,Scalar,Scalar,1)*Color;}\nvoid Scale_RGB_B344(\nfloat Scalar,\nvec4 Color,\nout vec4 Result)\n{Result=vec4(Scalar,Scalar,Scalar,1)*Color;}\nvoid Line_Fragment_B362(\nvec4 Base_Color,\nvec4 Highlight_Color,\nfloat Highlight_Width,\nvec3 Line_Vertex,\nfloat Highlight,\nout vec4 Line_Color)\n{float k2=1.0-clamp(abs(Line_Vertex.y/Highlight_Width),0.0,1.0);Line_Color=mix(Base_Color,Highlight_Color,Highlight*k2);}\nvoid Edge_B356(\nvec4 RectParms,\nfloat Radius,\nfloat Line_Width,\nvec2 UV,\nfloat Edge_Width,\nfloat Edge_Power,\nout float Result)\n{float d=length(max(abs(UV)-RectParms.xy,0.0));float edge=1.0-clamp((1.0-d/(Radius-Line_Width))/Edge_Width,0.0,1.0);Result=pow(edge,Edge_Power);}\nvoid Gradient_B355(\nvec4 Gradient_Color,\nvec4 Top_Left,\nvec4 Top_Right,\nvec4 Bottom_Left,\nvec4 Bottom_Right,\nvec2 UV,\nout vec4 Result)\n{vec3 top=Top_Left.rgb+(Top_Right.rgb-Top_Left.rgb)*UV.x;vec3 bottom=Bottom_Left.rgb+(Bottom_Right.rgb-Bottom_Left.rgb)*UV.x;Result.rgb=Gradient_Color.rgb*(bottom+(top-bottom)*UV.y);Result.a=1.0;}\nvoid main()\n{float X_Q338;float Y_Q338;float Z_Q338;float W_Q338;X_Q338=vExtra2.x;Y_Q338=vExtra2.y;Z_Q338=vExtra2.z;W_Q338=vExtra2.w;vec4 Color_Q343;\n#if IRIDESCENCE_ENABLE\nIridescence_B343(vPosition,vNormal,vUV,vBinormal,cameraPosition,_Iridescence_Tint_,_Iridescent_Map_,_Reflected_,_Frequency_,_Vertical_Offset_,Color_Q343);\n#else\nColor_Q343=vec4(0,0,0,0);\n#endif\nvec4 Result_Q344;Scale_RGB_B344(_Iridescence_Intensity_,Color_Q343,Result_Q344);vec4 Line_Color_Q362;Line_Fragment_B362(_Line_Color_,_Highlight_Color_,_Highlight_Width_,vTangent,_Highlight_,Line_Color_Q362);float Result_Q356;\n#if EDGE_ONLY\nEdge_B356(vExtra1,Z_Q338,W_Q338,vUV,_Edge_Width_,_Edge_Power_,Result_Q356);\n#else\nResult_Q356=1.0;\n#endif\nvec2 Vec2_Q339=vec2(X_Q338,Y_Q338);vec4 Result_Q355;Gradient_B355(_Gradient_Color_,_Top_Left_,_Top_Right_,_Bottom_Left_,_Bottom_Right_,Vec2_Q339,Result_Q355);vec4 Linear_Q348;Linear_Q348.rgb=clamp(Result_Q355.rgb*Result_Q355.rgb,0.0,1.0);Linear_Q348.a=Result_Q355.a;vec4 Result_Q346;Scale_RGB_B346(Linear_Q348,Result_Q356,Result_Q346);vec4 Sum_Q345=Result_Q346+Result_Q344;vec4 Color_At_T_Q347=mix(Line_Color_Q362,Result_Q346,_Line_Gradient_Blend_);vec4 Base_And_Iridescent_Q350;Base_And_Iridescent_Q350=_Base_Color_+vec4(Sum_Q345.rgb,0.0);vec4 Sum_Q349=Color_At_T_Q347+_Iridescence_Edge_Intensity_*Color_Q343;vec4 Result_Q351=Sum_Q349; Result_Q351.a=1.0;vec4 Color_Q332;Round_Rect_Fragment_B332(Z_Q338,W_Q338,Result_Q351,_Filter_Width_,vUV,1.0,vExtra1,Base_And_Iridescent_Q350,Color_Q332);vec4 Result_Q354=_Fade_Out_*Color_Q332;vec4 sRGB_Q353;FastLinearTosRGB_B353(Result_Q354,sRGB_Q353);vec4 Out_Color=sRGB_Q353;float Clip_Threshold=0.001;bool To_sRGB=false;gl_FragColor=Out_Color;}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const mrdlBackplatePixelShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"mrdlBackplateVertexShader\";\nconst shader = `uniform mat4 world;uniform mat4 viewProjection;uniform vec3 cameraPosition;attribute vec3 position;attribute vec3 normal;attribute vec3 tangent;uniform float _Radius_;uniform float _Line_Width_;uniform bool _Absolute_Sizes_;uniform float _Filter_Width_;uniform vec4 _Base_Color_;uniform vec4 _Line_Color_;uniform float _Radius_Top_Left_;uniform float _Radius_Top_Right_;uniform float _Radius_Bottom_Left_;uniform float _Radius_Bottom_Right_;uniform float _Rate_;uniform vec4 _Highlight_Color_;uniform float _Highlight_Width_;uniform vec4 _Highlight_Transform_;uniform float _Highlight_;uniform float _Iridescence_Intensity_;uniform float _Iridescence_Edge_Intensity_;uniform vec4 _Iridescence_Tint_;uniform sampler2D _Iridescent_Map_;uniform float _Angle_;uniform bool _Reflected_;uniform float _Frequency_;uniform float _Vertical_Offset_;uniform vec4 _Gradient_Color_;uniform vec4 _Top_Left_;uniform vec4 _Top_Right_;uniform vec4 _Bottom_Left_;uniform vec4 _Bottom_Right_;uniform float _Edge_Width_;uniform float _Edge_Power_;uniform float _Line_Gradient_Blend_;uniform float _Fade_Out_;varying vec3 vPosition;varying vec3 vNormal;varying vec2 vUV;varying vec3 vTangent;varying vec3 vBinormal;varying vec4 vExtra1;varying vec4 vExtra2;void Object_To_World_Pos_B314(\nvec3 Pos_Object,\nout vec3 Pos_World)\n{Pos_World=(world*vec4(Pos_Object,1.0)).xyz;}\nvoid Round_Rect_Vertex_B357(\nvec2 UV,\nfloat Radius,\nfloat Margin,\nfloat Anisotropy,\nfloat Gradient1,\nfloat Gradient2,\nvec3 Normal,\nvec4 Color_Scale_Translate,\nout vec2 Rect_UV,\nout vec4 Rect_Parms,\nout vec2 Scale_XY,\nout vec2 Line_UV,\nout vec2 Color_UV_Info)\n{Scale_XY=vec2(Anisotropy,1.0);Line_UV=(UV-vec2(0.5,0.5));Rect_UV=Line_UV*Scale_XY;Rect_Parms.xy=Scale_XY*0.5-vec2(Radius,Radius)-vec2(Margin,Margin);Rect_Parms.z=Gradient1; \nRect_Parms.w=Gradient2;Color_UV_Info=(Line_UV+vec2(0.5,0.5))*Color_Scale_Translate.xy+Color_Scale_Translate.zw;}\nvoid Line_Vertex_B333(\nvec2 Scale_XY,\nvec2 UV,\nfloat Time,\nfloat Rate,\nvec4 Highlight_Transform,\nout vec3 Line_Vertex)\n{float angle2=(Rate*Time)*2.0*3.1416;float sinAngle2=sin(angle2);float cosAngle2=cos(angle2);vec2 xformUV=UV*Highlight_Transform.xy+Highlight_Transform.zw;Line_Vertex.x=0.0;Line_Vertex.y=cosAngle2*xformUV.x-sinAngle2*xformUV.y;Line_Vertex.z=0.0; }\nvoid PickDir_B334(\nfloat Degrees,\nvec3 DirX,\nvec3 DirY,\nout vec3 Dir)\n{float a=Degrees*3.14159/180.0;Dir=cos(a)*DirX+sin(a)*DirY;}\nvoid Move_Verts_B327(\nfloat Anisotropy,\nvec3 P,\nfloat Radius,\nout vec3 New_P,\nout vec2 New_UV,\nout float Radial_Gradient,\nout vec3 Radial_Dir)\n{vec2 UV=P.xy*2.0+0.5;vec2 center=clamp(UV,0.0,1.0);vec2 delta=UV-center;vec2 r2=2.0*vec2(Radius/Anisotropy,Radius);New_UV=center+r2*(UV-2.0*center+0.5);New_P=vec3(New_UV-0.5,P.z);Radial_Gradient=1.0-length(delta)*2.0;Radial_Dir=vec3(delta*r2,0.0);}\nvoid Pick_Radius_B336(\nfloat Radius,\nfloat Radius_Top_Left,\nfloat Radius_Top_Right,\nfloat Radius_Bottom_Left,\nfloat Radius_Bottom_Right,\nvec3 Position,\nout float Result)\n{bool whichY=Position.y>0.0;Result=Position.x<0.0 ? (whichY ? Radius_Top_Left : Radius_Bottom_Left) : (whichY ? Radius_Top_Right : Radius_Bottom_Right);Result*=Radius;}\nvoid Edge_AA_Vertex_B328(\nvec3 Position_World,\nvec3 Position_Object,\nvec3 Normal_Object,\nvec3 Eye,\nfloat Radial_Gradient,\nvec3 Radial_Dir,\nvec3 Tangent,\nout float Gradient1,\nout float Gradient2)\n{vec3 I=(Eye-Position_World);vec3 T=(vec4(Tangent,0.0)).xyz;float g=(dot(T,I)<0.0) ? 0.0 : 1.0;if (Normal_Object.z==0.0) { \nGradient1=Position_Object.z>0.0 ? g : 1.0;Gradient2=Position_Object.z>0.0 ? 1.0 : g;} else {Gradient1=g+(1.0-g)*(Radial_Gradient);Gradient2=1.0;}}\nvoid Object_To_World_Dir_B330(\nvec3 Dir_Object,\nout vec3 Binormal_World,\nout vec3 Binormal_World_N,\nout float Binormal_Length)\n{Binormal_World=(world*vec4(Dir_Object,0.0)).xyz;Binormal_Length=length(Binormal_World);Binormal_World_N=Binormal_World/Binormal_Length;}\nvoid RelativeOrAbsoluteDetail_B341(\nfloat Nominal_Radius,\nfloat Nominal_LineWidth,\nbool Absolute_Measurements,\nfloat Height,\nout float Radius,\nout float Line_Width)\n{float scale=Absolute_Measurements ? 1.0/Height : 1.0;Radius=Nominal_Radius*scale;Line_Width=Nominal_LineWidth*scale;}\nvoid main()\n{vec3 Nrm_World_Q326;Nrm_World_Q326=normalize((world*vec4(normal,0.0)).xyz);vec3 Tangent_World_Q329;vec3 Tangent_World_N_Q329;float Tangent_Length_Q329;Tangent_World_Q329=(world*vec4(vec3(1,0,0),0.0)).xyz;Tangent_Length_Q329=length(Tangent_World_Q329);Tangent_World_N_Q329=Tangent_World_Q329/Tangent_Length_Q329;vec3 Binormal_World_Q330;vec3 Binormal_World_N_Q330;float Binormal_Length_Q330;Object_To_World_Dir_B330(vec3(0,1,0),Binormal_World_Q330,Binormal_World_N_Q330,Binormal_Length_Q330);float Radius_Q341;float Line_Width_Q341;RelativeOrAbsoluteDetail_B341(_Radius_,_Line_Width_,_Absolute_Sizes_,Binormal_Length_Q330,Radius_Q341,Line_Width_Q341);vec3 Dir_Q334;PickDir_B334(_Angle_,Tangent_World_N_Q329,Binormal_World_N_Q330,Dir_Q334);float Result_Q336;Pick_Radius_B336(Radius_Q341,_Radius_Top_Left_,_Radius_Top_Right_,_Radius_Bottom_Left_,_Radius_Bottom_Right_,position,Result_Q336);float Anisotropy_Q331=Tangent_Length_Q329/Binormal_Length_Q330;vec4 Out_Color_Q337=vec4(Result_Q336,Line_Width_Q341,0,1);vec3 New_P_Q327;vec2 New_UV_Q327;float Radial_Gradient_Q327;vec3 Radial_Dir_Q327;Move_Verts_B327(Anisotropy_Q331,position,Result_Q336,New_P_Q327,New_UV_Q327,Radial_Gradient_Q327,Radial_Dir_Q327);vec3 Pos_World_Q314;Object_To_World_Pos_B314(New_P_Q327,Pos_World_Q314);float Gradient1_Q328;float Gradient2_Q328;\n#if SMOOTH_EDGES\nEdge_AA_Vertex_B328(Pos_World_Q314,position,normal,cameraPosition,Radial_Gradient_Q327,Radial_Dir_Q327,tangent,Gradient1_Q328,Gradient2_Q328);\n#else\nGradient1_Q328=1.0;Gradient2_Q328=1.0;\n#endif\nvec2 Rect_UV_Q357;vec4 Rect_Parms_Q357;vec2 Scale_XY_Q357;vec2 Line_UV_Q357;vec2 Color_UV_Info_Q357;Round_Rect_Vertex_B357(New_UV_Q327,Result_Q336,0.0,Anisotropy_Q331,Gradient1_Q328,Gradient2_Q328,normal,vec4(1,1,0,0),Rect_UV_Q357,Rect_Parms_Q357,Scale_XY_Q357,Line_UV_Q357,Color_UV_Info_Q357);vec3 Line_Vertex_Q333;Line_Vertex_B333(Scale_XY_Q357,Line_UV_Q357,(20.0),_Rate_,_Highlight_Transform_,Line_Vertex_Q333);float X_Q359;float Y_Q359;X_Q359=Color_UV_Info_Q357.x;Y_Q359=Color_UV_Info_Q357.y;vec4 Vec4_Q358=vec4(X_Q359,Y_Q359,Result_Q336,Line_Width_Q341);vec3 Position=Pos_World_Q314;vec3 Normal=Nrm_World_Q326;vec2 UV=Rect_UV_Q357;vec3 Tangent=Line_Vertex_Q333;vec3 Binormal=Dir_Q334;vec4 Color=Out_Color_Q337;vec4 Extra1=Rect_Parms_Q357;vec4 Extra2=Vec4_Q358;vec4 Extra3=vec4(0,0,0,0);gl_Position=viewProjection*vec4(Position,1);vPosition=Position;vNormal=Normal;vUV=UV;vTangent=Tangent;vBinormal=Binormal;vExtra1=Extra1;vExtra2=Extra2;}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const mrdlBackplateVertexShader = { name, shader };\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { SerializationHelper, serialize } from \"core/Misc/decorators\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport { Vector4 } from \"core/Maths/math.vector\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"core/Materials/materialHelper\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { Color4 } from \"core/Maths/math.color\";\r\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\r\nimport { Constants } from \"core/Engines/constants\";\r\n\r\nimport \"./shaders/mrdlBackplate.fragment\";\r\nimport \"./shaders/mrdlBackplate.vertex\";\r\n\r\n/** @internal */\r\nclass MRDLBackplateMaterialDefines extends MaterialDefines {\r\n    /*\r\n        \"IRIDESCENCE_ENABLE\", \"SMOOTH_EDGES\"\r\n    */\r\n    public IRIDESCENCE_ENABLE = true;\r\n    public SMOOTH_EDGES = true;\r\n\r\n    constructor() {\r\n        super();\r\n        this._needNormals = true;\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render backplate material with MRDL\r\n */\r\nexport class MRDLBackplateMaterial extends PushMaterial {\r\n    /**\r\n     * URL pointing to the texture used to define the coloring for the Iridescent Map effect.\r\n     */\r\n    public static IRIDESCENT_MAP_TEXTURE_URL = \"https://assets.babylonjs.com/meshes/MRTK/MRDL/mrtk-mrdl-backplate-iridescence.png\";\r\n    private _iridescentMapTexture: Texture;\r\n\r\n    /**\r\n     * Gets or sets the corner radius on the backplate. If this value is changed, update the lineWidth to match.\r\n     */\r\n    @serialize()\r\n    public radius = 0.3;\r\n\r\n    /**\r\n     * Gets or sets the line width of the backplate.\r\n     */\r\n    @serialize()\r\n    public lineWidth = 0.003;\r\n\r\n    /**\r\n     * Gets or sets whether to use absolute sizes when calculating effects on the backplate.\r\n     * Since desktop and VR/AR have different relative sizes, it's usually best to keep this false.\r\n     */\r\n    @serialize()\r\n    public absoluteSizes = false;\r\n\r\n    /** @internal */\r\n    public _filterWidth = 1;\r\n\r\n    /**\r\n     * Gets or sets the base color of the backplate.\r\n     */\r\n    @serialize()\r\n    public baseColor = new Color4(0, 0, 0, 1);\r\n\r\n    /**\r\n     * Gets or sets the line color of the backplate.\r\n     */\r\n    @serialize()\r\n    public lineColor = new Color4(0.2, 0.262745, 0.4, 1);\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusTopLeft = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusTopRight = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusBottomLeft = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusBottomRight = 1.0;\r\n\r\n    /** @internal */\r\n    public _rate = 0;\r\n\r\n    /**\r\n     * Gets or sets the color of the highlights on the backplate line.\r\n     */\r\n    @serialize()\r\n    public highlightColor = new Color4(0.239216, 0.435294, 0.827451, 1);\r\n\r\n    /**\r\n     * Gets or sets the width of the highlights on the backplate line.\r\n     */\r\n    @serialize()\r\n    public highlightWidth = 0;\r\n\r\n    /** @internal */\r\n    public _highlightTransform = new Vector4(1, 1, 0, 0);\r\n\r\n    /** @internal */\r\n    public _highlight = 1;\r\n\r\n    /**\r\n     * Gets or sets the intensity of the iridescence effect.\r\n     */\r\n    @serialize()\r\n    public iridescenceIntensity = 0.45;\r\n\r\n    /**\r\n     * Gets or sets the intensity of the iridescence effect on the backplate edges.\r\n     */\r\n    @serialize()\r\n    public iridescenceEdgeIntensity = 1;\r\n\r\n    /**\r\n     * Gets or sets the Tint of the iridescence effect on the backplate.\r\n     */\r\n    @serialize()\r\n    public iridescenceTint = new Color4(1, 1, 1, 1);\r\n\r\n    /** @internal */\r\n    public _angle = -45;\r\n\r\n    /**\r\n     * Gets or sets the opacity of the backplate (0.0 - 1.0).\r\n     */\r\n    @serialize()\r\n    public fadeOut = 1;\r\n\r\n    /** @internal */\r\n    public _reflected = true;\r\n\r\n    /** @internal */\r\n    public _frequency = 1;\r\n\r\n    /** @internal */\r\n    public _verticalOffset = 0;\r\n\r\n    /**\r\n     * Gets or sets the gradient color effect on the backplate.\r\n     */\r\n    @serialize()\r\n    public gradientColor = new Color4(0.74902, 0.74902, 0.74902, 1);\r\n\r\n    /**\r\n     * Gets or sets the top left gradient color effect on the backplate.\r\n     */\r\n    @serialize()\r\n    public topLeftGradientColor = new Color4(0.00784314, 0.294118, 0.580392, 1);\r\n\r\n    /**\r\n     * Gets or sets the top right gradient color effect on the backplate.\r\n     */\r\n    @serialize()\r\n    public topRightGradientColor = new Color4(0.305882, 0, 1, 1);\r\n\r\n    /**\r\n     * Gets or sets the bottom left gradient color effect on the backplate.\r\n     */\r\n    @serialize()\r\n    public bottomLeftGradientColor = new Color4(0.133333, 0.258824, 0.992157, 1);\r\n\r\n    /**\r\n     * Gets or sets the bottom right gradient color effect on the backplate.\r\n     */\r\n    @serialize()\r\n    public bottomRightGradientColor = new Color4(0.176471, 0.176471, 0.619608, 1);\r\n\r\n    /**\r\n     * Gets or sets the edge width of the backplate.\r\n     */\r\n    @serialize()\r\n    public edgeWidth = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the edge width of the backplate.\r\n     */\r\n    @serialize()\r\n    public edgePower = 1;\r\n\r\n    /**\r\n     * Gets or sets the edge width of the backplate.\r\n     */\r\n    @serialize()\r\n    public edgeLineGradientBlend = 0.5;\r\n\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n        this.alphaMode = Constants.ALPHA_DISABLE;\r\n        this.backFaceCulling = false;\r\n\r\n        this._iridescentMapTexture = new Texture(MRDLBackplateMaterial.IRIDESCENT_MAP_TEXTURE_URL, this.getScene(), true, false, Texture.NEAREST_SAMPLINGMODE);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new MRDLBackplateMaterialDefines();\r\n        }\r\n\r\n        const defines = <MRDLBackplateMaterialDefines>subMesh.materialDefines;\r\n        const scene = this.getScene();\r\n\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, false);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\r\n\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            if (defines.TANGENT) {\r\n                attribs.push(VertexBuffer.TangentKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            const shaderName = \"mrdlBackplate\";\r\n            const join = defines.toString();\r\n\r\n            const uniforms = [\r\n                \"world\",\r\n                \"viewProjection\",\r\n                \"cameraPosition\",\r\n                \"_Radius_\",\r\n                \"_Line_Width_\",\r\n                \"_Absolute_Sizes_\",\r\n                \"_Filter_Width_\",\r\n                \"_Base_Color_\",\r\n                \"_Line_Color_\",\r\n                \"_Radius_Top_Left_\",\r\n                \"_Radius_Top_Right_\",\r\n                \"_Radius_Bottom_Left_\",\r\n                \"_Radius_Bottom_Right_\",\r\n                \"_Rate_\",\r\n                \"_Highlight_Color_\",\r\n                \"_Highlight_Width_\",\r\n                \"_Highlight_Transform_\",\r\n                \"_Highlight_\",\r\n                \"_Iridescence_Intensity_\",\r\n                \"_Iridescence_Edge_Intensity_\",\r\n                \"_Iridescence_Tint_\",\r\n                \"_Iridescent_Map_\",\r\n                \"_Angle_\",\r\n                \"_Reflected_\",\r\n                \"_Frequency_\",\r\n                \"_Vertical_Offset_\",\r\n                \"_Gradient_Color_\",\r\n                \"_Top_Left_\",\r\n                \"_Top_Right_\",\r\n                \"_Bottom_Left_\",\r\n                \"_Bottom_Right_\",\r\n                \"_Edge_Width_\",\r\n                \"_Edge_Power_\",\r\n                \"_Line_Gradient_Blend_\",\r\n                \"_Fade_Out_\",\r\n            ];\r\n            const samplers: string[] = [\"_Iridescent_Map_\"];\r\n            const uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4,\r\n            });\r\n\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: { maxSimultaneousLights: 4 },\r\n                    },\r\n                    engine\r\n                ),\r\n                defines\r\n            );\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const defines = <MRDLBackplateMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", this.getScene().getTransformMatrix());\r\n        this._activeEffect.setVector3(\"cameraPosition\", this.getScene().activeCamera!.position);\r\n\r\n        // \"Round Rect\"\r\n        this._activeEffect.setFloat(\"_Radius_\", this.radius);\r\n        this._activeEffect.setFloat(\"_Line_Width_\", this.lineWidth);\r\n        this._activeEffect.setFloat(\"_Absolute_Sizes_\", this.absoluteSizes ? 1.0 : 0.0);\r\n        this._activeEffect.setFloat(\"_Filter_Width_\", this._filterWidth);\r\n        this._activeEffect.setDirectColor4(\"_Base_Color_\", this.baseColor);\r\n        this._activeEffect.setDirectColor4(\"_Line_Color_\", this.lineColor);\r\n\r\n        // \"Radii Multipliers\"\r\n        this._activeEffect.setFloat(\"_Radius_Top_Left_\", this.radiusTopLeft);\r\n        this._activeEffect.setFloat(\"_Radius_Top_Right_\", this.radiusTopRight);\r\n        this._activeEffect.setFloat(\"_Radius_Bottom_Left_\", this.radiusBottomLeft);\r\n        this._activeEffect.setFloat(\"_Radius_Bottom_Right_\", this.radiusBottomRight);\r\n\r\n        // \"Line Highlight\"\r\n        this._activeEffect.setFloat(\"_Rate_\", this._rate);\r\n        this._activeEffect.setDirectColor4(\"_Highlight_Color_\", this.highlightColor);\r\n        this._activeEffect.setFloat(\"_Highlight_Width_\", this.highlightWidth);\r\n        this._activeEffect.setVector4(\"_Highlight_Transform_\", this._highlightTransform);\r\n        this._activeEffect.setFloat(\"_Highlight_\", this._highlight);\r\n\r\n        // \"Iridescence\"\r\n        //define IRIDESCENCE_ENABLE true;\r\n        this._activeEffect.setFloat(\"_Iridescence_Intensity_\", this.iridescenceIntensity);\r\n        this._activeEffect.setFloat(\"_Iridescence_Edge_Intensity_\", this.iridescenceEdgeIntensity);\r\n        this._activeEffect.setDirectColor4(\"_Iridescence_Tint_\", this.iridescenceTint);\r\n        this._activeEffect.setTexture(\"_Iridescent_Map_\", this._iridescentMapTexture);\r\n        this._activeEffect.setFloat(\"_Angle_\", this._angle);\r\n        this._activeEffect.setFloat(\"_Reflected_\", this._reflected ? 1.0 : 0.0);\r\n        this._activeEffect.setFloat(\"_Frequency_\", this._frequency);\r\n        this._activeEffect.setFloat(\"_Vertical_Offset_\", this._verticalOffset);\r\n\r\n        // \"Gradient\"\r\n        this._activeEffect.setDirectColor4(\"_Gradient_Color_\", this.gradientColor);\r\n        this._activeEffect.setDirectColor4(\"_Top_Left_\", this.topLeftGradientColor);\r\n        this._activeEffect.setDirectColor4(\"_Top_Right_\", this.topRightGradientColor);\r\n        this._activeEffect.setDirectColor4(\"_Bottom_Left_\", this.bottomLeftGradientColor);\r\n        this._activeEffect.setDirectColor4(\"_Bottom_Right_\", this.bottomRightGradientColor);\r\n        //define EDGE_ONLY false;\r\n        this._activeEffect.setFloat(\"_Edge_Width_\", this.edgeWidth);\r\n        this._activeEffect.setFloat(\"_Edge_Power_\", this.edgePower);\r\n        this._activeEffect.setFloat(\"_Line_Gradient_Blend_\", this.edgeLineGradientBlend);\r\n\r\n        // \"Fade\"\r\n        this._activeEffect.setFloat(\"_Fade_Out_\", this.fadeOut);\r\n\r\n        // \"Antialiasing\"\r\n        //define SMOOTH_EDGES true;\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    /**\r\n     * Get the list of animatables in the material.\r\n     * @returns the list of animatables object used in the material\r\n     */\r\n    public getAnimatables(): IAnimatable[] {\r\n        return [];\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): MRDLBackplateMaterial {\r\n        return SerializationHelper.Clone(() => new MRDLBackplateMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n        serializationObject.customType = \"BABYLON.MRDLBackplateMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"MRDLBackplateMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): MRDLBackplateMaterial {\r\n        return SerializationHelper.Parse(() => new MRDLBackplateMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.MRDLBackplateMaterial\", MRDLBackplateMaterial);\r\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { CreateBox } from \"core/Meshes/Builders/boxBuilder\";\r\nimport { PointerDragBehavior } from \"core/Behaviors/Meshes/pointerDragBehavior\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { SceneLoader } from \"core/Loading/sceneLoader\";\r\nimport { MRDLSliderBarMaterial } from \"../materials/mrdl/mrdlSliderBarMaterial\";\r\nimport { MRDLSliderThumbMaterial } from \"../materials/mrdl/mrdlSliderThumbMaterial\";\r\nimport { MRDLBackplateMaterial } from \"../materials/mrdl/mrdlBackplateMaterial\";\r\n\r\nconst SLIDER_MIN: number = 0;\r\nconst SLIDER_MAX: number = 100;\r\nconst SLIDER_VAL: number = 50;\r\nconst SLIDER_STEP: number = 0;\r\nconst SLIDER_SCALING: number = 1.0;\r\nconst SLIDER_MARGIN: number = 0.2;\r\n\r\n/**\r\n * Class used to create a slider in 3D\r\n */\r\nexport class Slider3D extends Control3D {\r\n    /**\r\n     * Base Url for the models.\r\n     */\r\n    public static MODEL_BASE_URL: string = \"https://assets.babylonjs.com/meshes/MRTK/\";\r\n\r\n    /**\r\n     * File name for the 8x4 model.\r\n     */\r\n    public static MODEL_FILENAME: string = \"mrtk-fluent-backplate.glb\";\r\n\r\n    private _sliderBackplate: AbstractMesh;\r\n    private _sliderBackplateMaterial: MRDLBackplateMaterial;\r\n    private _sliderBarMaterial: MRDLSliderBarMaterial;\r\n    private _sliderThumbMaterial: MRDLSliderThumbMaterial;\r\n    private _sliderThumb: AbstractMesh;\r\n    private _sliderBar: AbstractMesh;\r\n    private _sliderBackplateVisible: boolean;\r\n\r\n    private _minimum: number;\r\n    private _maximum: number;\r\n    private _value: number;\r\n    private _step: number;\r\n\r\n    private _draggedPosition: number;\r\n\r\n    /** Observable raised when the sldier value changes */\r\n    public onValueChangedObservable = new Observable<number>();\r\n\r\n    /**\r\n     * Creates a new slider\r\n     * @param name defines the control name\r\n     * @param sliderBackplateVisible defines if the control has a backplate, default is false\r\n     */\r\n    constructor(name?: string, sliderBackplateVisible?: boolean) {\r\n        super(name);\r\n        this._sliderBackplateVisible = sliderBackplateVisible || false;\r\n\r\n        this._minimum = SLIDER_MIN;\r\n        this._maximum = SLIDER_MAX;\r\n        this._step = SLIDER_STEP;\r\n        this._value = SLIDER_VAL;\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh used to render this control\r\n     */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        if (this.node) {\r\n            return this._sliderThumb;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /** Gets or sets minimum value */\r\n    public get minimum(): number {\r\n        return this._minimum;\r\n    }\r\n\r\n    public set minimum(value: number) {\r\n        if (this._minimum === value) {\r\n            return;\r\n        }\r\n\r\n        this._minimum = Math.max(value, SLIDER_MIN);\r\n        this._value = Math.max(Math.min(this._value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets maximum value */\r\n    public get maximum(): number {\r\n        return this._maximum;\r\n    }\r\n\r\n    public set maximum(value: number) {\r\n        if (this._maximum === value) {\r\n            return;\r\n        }\r\n\r\n        this._maximum = Math.max(value, this._minimum);\r\n        this._value = Math.max(Math.min(this._value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets step value */\r\n    public get step(): number {\r\n        return this._step;\r\n    }\r\n\r\n    public set step(value: number) {\r\n        if (this._step === value) {\r\n            return;\r\n        }\r\n\r\n        this._step = Math.max(Math.min(value, this._maximum - this._minimum), SLIDER_STEP);\r\n    }\r\n\r\n    /** Gets or sets current value */\r\n    public get value(): number {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: number) {\r\n        if (this._value === value) {\r\n            return;\r\n        }\r\n\r\n        this._value = Math.max(Math.min(value, this._maximum), this._minimum);\r\n        if (this._sliderThumb) {\r\n            this._sliderThumb.position.x = this._convertToPosition(this.value);\r\n        }\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    protected get start(): number {\r\n        if (!this.node) {\r\n            return -SLIDER_SCALING / 2;\r\n        }\r\n\r\n        return this._sliderBar.position.x - this._sliderBar.scaling.x / 2;\r\n    }\r\n\r\n    protected get end(): number {\r\n        if (!this.node) {\r\n            return SLIDER_SCALING / 2;\r\n        }\r\n\r\n        return this._sliderBar.position.x + this._sliderBar.scaling.x / 2;\r\n    }\r\n\r\n    /**\r\n     * Gets the slider bar material used by this control\r\n     */\r\n    public get sliderBarMaterial(): MRDLSliderBarMaterial {\r\n        return this._sliderBarMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the slider thumb material used by this control\r\n     */\r\n    public get sliderThumbMaterial(): MRDLSliderThumbMaterial {\r\n        return this._sliderThumbMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the slider backplate material used by this control\r\n     */\r\n    public get sliderBackplateMaterial(): MRDLBackplateMaterial {\r\n        return this._sliderBackplateMaterial;\r\n    }\r\n\r\n    /** Sets a boolean indicating if the control is visible */\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n\r\n        this.node?.setEnabled(value);\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        const sliderBackplate = CreateBox(\r\n            `${this.name}_sliderbackplate`,\r\n            {\r\n                width: 1.0,\r\n                height: 1.0,\r\n                depth: 1.0,\r\n            },\r\n            scene\r\n        );\r\n        sliderBackplate.isPickable = false;\r\n        sliderBackplate.visibility = 0;\r\n        sliderBackplate.scaling = new Vector3(1, 0.5, 0.8);\r\n\r\n        SceneLoader.ImportMeshAsync(undefined, Slider3D.MODEL_BASE_URL, Slider3D.MODEL_FILENAME, scene).then((result) => {\r\n            // make all meshes not pickable. Required meshes' pickable state will be set later.\r\n            result.meshes.forEach((m) => {\r\n                m.isPickable = false;\r\n            });\r\n            const sliderBackplateModel = result.meshes[1];\r\n            const sliderBarModel = result.meshes[1].clone(`${this.name}_sliderbar`, sliderBackplate);\r\n            const sliderThumbModel = result.meshes[1].clone(`${this.name}_sliderthumb`, sliderBackplate);\r\n            sliderBackplateModel.visibility = 0;\r\n\r\n            if (this._sliderBackplateVisible) {\r\n                sliderBackplateModel.visibility = 1;\r\n                sliderBackplateModel.name = `${this.name}_sliderbackplate`;\r\n                sliderBackplateModel.scaling.x = 1;\r\n                sliderBackplateModel.scaling.z = 0.2;\r\n                sliderBackplateModel.parent = sliderBackplate;\r\n                if (this._sliderBackplateMaterial) {\r\n                    sliderBackplateModel.material = this._sliderBackplateMaterial;\r\n                }\r\n                this._sliderBackplate = sliderBackplateModel;\r\n            }\r\n\r\n            if (sliderBarModel) {\r\n                sliderBarModel.parent = sliderBackplate;\r\n                sliderBarModel.position.z = -0.1;\r\n                sliderBarModel.scaling = new Vector3(SLIDER_SCALING - SLIDER_MARGIN, 0.04, 0.3);\r\n                if (this._sliderBarMaterial) {\r\n                    sliderBarModel.material = this._sliderBarMaterial;\r\n                }\r\n                this._sliderBar = sliderBarModel;\r\n            }\r\n\r\n            if (sliderThumbModel) {\r\n                sliderThumbModel.parent = sliderBackplate;\r\n                sliderThumbModel.isPickable = true;\r\n                sliderThumbModel.position.z = -0.115;\r\n                sliderThumbModel.scaling = new Vector3(0.025, 0.3, 0.6);\r\n                sliderThumbModel.position.x = this._convertToPosition(this.value);\r\n                sliderThumbModel.addBehavior(this._createBehavior());\r\n                if (this._sliderThumbMaterial) {\r\n                    sliderThumbModel.material = this._sliderThumbMaterial;\r\n                }\r\n                this._sliderThumb = sliderThumbModel;\r\n            }\r\n\r\n            this._injectGUI3DReservedDataStore(sliderBackplate).control = this;\r\n            sliderBackplate.getChildMeshes().forEach((mesh) => {\r\n                this._injectGUI3DReservedDataStore(mesh).control = this;\r\n            });\r\n        });\r\n\r\n        this._affectMaterial(sliderBackplate);\r\n        return sliderBackplate;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        this._sliderBackplateMaterial = this._sliderBackplateMaterial ?? new MRDLBackplateMaterial(`${this.name}_sliderbackplate_material`, mesh.getScene());\r\n        this._sliderBarMaterial = this._sliderBarMaterial ?? new MRDLSliderBarMaterial(`${this.name}_sliderbar_material`, mesh.getScene());\r\n        this._sliderThumbMaterial = this._sliderThumbMaterial ?? new MRDLSliderThumbMaterial(`${this.name}_sliderthumb_material`, mesh.getScene());\r\n    }\r\n\r\n    private _createBehavior(): PointerDragBehavior {\r\n        const pointerDragBehavior = new PointerDragBehavior({ dragAxis: Vector3.Right() });\r\n        pointerDragBehavior.moveAttached = false;\r\n\r\n        pointerDragBehavior.onDragStartObservable.add(() => {\r\n            this._draggedPosition = this._sliderThumb.position.x;\r\n        });\r\n\r\n        pointerDragBehavior.onDragObservable.add((event) => {\r\n            this._draggedPosition += event.dragDistance / this.scaling.x;\r\n            this.value = this._convertToValue(this._draggedPosition);\r\n        });\r\n\r\n        return pointerDragBehavior;\r\n    }\r\n\r\n    private _convertToPosition(value: number): number {\r\n        const position = ((value - this.minimum) / (this.maximum - this.minimum)) * (this.end - this.start) + this.start;\r\n        return Math.min(Math.max(position, this.start), this.end);\r\n    }\r\n\r\n    private _convertToValue(position: number): number {\r\n        let value = ((position - this.start) / (this.end - this.start)) * (this.maximum - this.minimum);\r\n        value = this.step ? Math.round(value / this.step) * this.step : value;\r\n\r\n        return Math.max(Math.min(this.minimum + value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n        this._sliderBar?.dispose();\r\n        this._sliderThumb?.dispose();\r\n        this._sliderBarMaterial?.dispose();\r\n        this._sliderThumbMaterial?.dispose();\r\n        this._sliderBackplate?.dispose();\r\n        this._sliderBackplateMaterial?.dispose();\r\n    }\r\n}\r\n","import { Tools } from \"core/Misc/tools\";\r\nimport { Matrix, TmpVectors, Vector3 } from \"core/Maths/math.vector\";\r\nimport type { float } from \"core/types\";\r\n\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport type { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\nimport { Axis, Space } from \"core/Maths/math.axis\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a sphere\r\n */\r\nexport class SpherePanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the sphere where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        const mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        const newPos = this._sphericalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new Vector3(2 * newPos.x, 2 * newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new Vector3(-newPos.x, -newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(Axis.Y, Math.PI, Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _sphericalMapping(source: Vector3) {\r\n        const newPos = new Vector3(0, 0, this._radius);\r\n\r\n        const xAngle = source.y / this._radius;\r\n        const yAngle = -(source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, xAngle, 0, TmpVectors.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, TmpVectors.Matrix[0]);\r\n    }\r\n}\r\n","import { Tools } from \"core/Misc/tools\";\r\nimport { Matrix, TmpVectors, Vector3 } from \"core/Maths/math.vector\";\r\n\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a stack panel in 3D on XY plane\r\n */\r\nexport class StackPanel3D extends Container3D {\r\n    private _isVertical = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the stack panel is vertical or horizontal (horizontal by default)\r\n     */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0.1;\r\n\r\n    /**\r\n     * Creates new StackPanel\r\n     * @param isVertical\r\n     */\r\n    public constructor(isVertical = false) {\r\n        super();\r\n\r\n        this._isVertical = isVertical;\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        let width = 0;\r\n        let height = 0;\r\n        let controlCount = 0;\r\n        const extendSizes = [];\r\n\r\n        const currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (const child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, TmpVectors.Matrix[0]);\r\n\r\n            const boundingBox = child.mesh.getBoundingInfo().boundingBox;\r\n            const extendSize = Vector3.TransformNormal(boundingBox.extendSize, TmpVectors.Matrix[0]);\r\n            extendSizes.push(extendSize);\r\n\r\n            if (this._isVertical) {\r\n                height += extendSize.y;\r\n            } else {\r\n                width += extendSize.x;\r\n            }\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            height += ((controlCount - 1) * this.margin) / 2;\r\n        } else {\r\n            width += ((controlCount - 1) * this.margin) / 2;\r\n        }\r\n\r\n        // Arrange\r\n        let offset: number;\r\n        if (this._isVertical) {\r\n            offset = -height;\r\n        } else {\r\n            offset = -width;\r\n        }\r\n\r\n        let index = 0;\r\n        for (const child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n            controlCount--;\r\n            const extendSize = extendSizes[index++];\r\n\r\n            if (this._isVertical) {\r\n                child.position.y = offset + extendSize.y;\r\n                child.position.x = 0;\r\n                offset += extendSize.y * 2;\r\n            } else {\r\n                child.position.x = offset + extendSize.x;\r\n                child.position.y = 0;\r\n                offset += extendSize.x * 2;\r\n            }\r\n\r\n            offset += controlCount > 0 ? this.margin : 0;\r\n        }\r\n    }\r\n}\r\n","import type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\n\r\nimport { TouchButton3D } from \"./touchButton3D\";\r\n\r\n/**\r\n * Class used to create an interactable object. It's a touchable 3D button using a mesh coming from the current scene\r\n * @since 5.0.0\r\n */\r\nexport class TouchMeshButton3D extends TouchButton3D {\r\n    /** @internal */\r\n    protected _currentMesh: Mesh;\r\n\r\n    /**\r\n     * Creates a new 3D button based on a mesh\r\n     * @param mesh mesh to become a 3D button. By default this is also the mesh for near interaction collision checking\r\n     * @param name defines the control name\r\n     */\r\n    constructor(mesh: Mesh, name?: string) {\r\n        super(name, mesh);\r\n\r\n        this._currentMesh = mesh;\r\n\r\n        /**\r\n         * Provides a default behavior on hover/out & up/down\r\n         * Override those function to create your own desired behavior specific to your mesh\r\n         */\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.1);\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 1.1);\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"TouchMeshButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(): TransformNode {\r\n        this._currentMesh.getChildMeshes().forEach((mesh) => {\r\n            this._injectGUI3DReservedDataStore(mesh).control = this;\r\n        });\r\n\r\n        return this._currentMesh;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected _affectMaterial(mesh: AbstractMesh) {}\r\n}\r\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"mrdlBackglowPixelShader\";\nconst shader = `uniform vec3 cameraPosition;varying vec3 vNormal;varying vec2 vUV;uniform float _Bevel_Radius_;uniform float _Line_Width_;uniform bool _Absolute_Sizes_;uniform float _Tuning_Motion_;uniform float _Motion_;uniform float _Max_Intensity_;uniform float _Intensity_Fade_In_Exponent_;uniform float _Outer_Fuzz_Start_;uniform float _Outer_Fuzz_End_;uniform vec4 _Color_;uniform vec4 _Inner_Color_;uniform float _Blend_Exponent_;uniform float _Falloff_;uniform float _Bias_;float BiasFunc(float b,float v) {return pow(v,log(clamp(b,0.001,0.999))/log(0.5));}\nvoid Fuzzy_Round_Rect_B33(\nfloat Size_X,\nfloat Size_Y,\nfloat Radius_X,\nfloat Radius_Y,\nfloat Line_Width,\nvec2 UV,\nfloat Outer_Fuzz,\nfloat Max_Outer_Fuzz,\nout float Rect_Distance,\nout float Inner_Distance)\n{vec2 halfSize=vec2(Size_X,Size_Y)*0.5;vec2 r=max(min(vec2(Radius_X,Radius_Y),halfSize),vec2(0.001,0.001));float radius=min(r.x,r.y)-Max_Outer_Fuzz;vec2 v=abs(UV);vec2 nearestp=min(v,halfSize-r);float d=distance(nearestp,v);Inner_Distance=clamp(1.0-(radius-d)/Line_Width,0.0,1.0);Rect_Distance=clamp(1.0-(d-radius)/Outer_Fuzz,0.0,1.0)*Inner_Distance;}\nvoid main()\n{float X_Q42;float Y_Q42;X_Q42=vNormal.x;Y_Q42=vNormal.y;float MaxAB_Q24=max(_Tuning_Motion_,_Motion_);float Sqrt_F_Q27=sqrt(MaxAB_Q24);float Power_Q43=pow(MaxAB_Q24,_Intensity_Fade_In_Exponent_);float Value_At_T_Q26=mix(_Outer_Fuzz_Start_,_Outer_Fuzz_End_,Sqrt_F_Q27);float Product_Q23=_Max_Intensity_*Power_Q43;float Rect_Distance_Q33;float Inner_Distance_Q33;Fuzzy_Round_Rect_B33(X_Q42,Y_Q42,_Bevel_Radius_,_Bevel_Radius_,_Line_Width_,vUV,Value_At_T_Q26,_Outer_Fuzz_Start_,Rect_Distance_Q33,Inner_Distance_Q33);float Power_Q44=pow(Inner_Distance_Q33,_Blend_Exponent_);float Result_Q45=pow(BiasFunc(_Bias_,Rect_Distance_Q33),_Falloff_);vec4 Color_At_T_Q25=mix(_Inner_Color_,_Color_,Power_Q44);float Product_Q22=Result_Q45*Product_Q23;vec4 Result_Q28=Product_Q22*Color_At_T_Q25;vec4 Out_Color=Result_Q28;float Clip_Threshold=0.0;gl_FragColor=Out_Color;}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const mrdlBackglowPixelShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"mrdlBackglowVertexShader\";\nconst shader = `uniform mat4 world;uniform mat4 viewProjection;uniform vec3 cameraPosition;attribute vec3 position;attribute vec3 normal;attribute vec2 uv;attribute vec3 tangent;uniform float _Bevel_Radius_;uniform float _Line_Width_;uniform bool _Absolute_Sizes_;uniform float _Tuning_Motion_;uniform float _Motion_;uniform float _Max_Intensity_;uniform float _Intensity_Fade_In_Exponent_;uniform float _Outer_Fuzz_Start_;uniform float _Outer_Fuzz_End_;uniform vec4 _Color_;uniform vec4 _Inner_Color_;uniform float _Blend_Exponent_;uniform float _Falloff_;uniform float _Bias_;varying vec3 vNormal;varying vec2 vUV;void main()\n{vec3 Dir_World_Q41=(world*vec4(tangent,0.0)).xyz;vec3 Dir_World_Q40=(world*vec4((cross(normal,tangent)),0.0)).xyz;float MaxAB_Q24=max(_Tuning_Motion_,_Motion_);float Length_Q16=length(Dir_World_Q41);float Length_Q17=length(Dir_World_Q40);bool Greater_Than_Q37=MaxAB_Q24>0.0;vec3 Sizes_Q35;vec2 XY_Q35;Sizes_Q35=(_Absolute_Sizes_ ? vec3(Length_Q16,Length_Q17,0) : vec3(Length_Q16/Length_Q17,1,0));XY_Q35=(uv-vec2(0.5,0.5))*Sizes_Q35.xy;vec3 Result_Q38=Greater_Than_Q37 ? position : vec3(0,0,0);vec3 Pos_World_Q39=(world*vec4(Result_Q38,1.0)).xyz;vec3 Position=Pos_World_Q39;vec3 Normal=Sizes_Q35;vec2 UV=XY_Q35;vec3 Tangent=vec3(0,0,0);vec3 Binormal=vec3(0,0,0);vec4 Color=vec4(1,1,1,1);gl_Position=viewProjection*vec4(Position,1);vNormal=Normal;vUV=UV;}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const mrdlBackglowVertexShader = { name, shader };\n","import type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\n\r\nimport { Color4 } from \"core/Maths/math.color\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"core/Materials/materialHelper\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { SerializationHelper, serialize } from \"core/Misc/decorators\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\n\r\nimport \"./shaders/mrdlBackglow.fragment\";\r\nimport \"./shaders/mrdlBackglow.vertex\";\r\n\r\n/** @hidden */\r\nclass MRDLBackglowMaterialDefines extends MaterialDefines {\r\n    constructor() {\r\n        super();\r\n        this._needNormals = true;\r\n        this._needUVs = true;\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class MRDLBackglowMaterial extends PushMaterial {\r\n    /**\r\n     * Gets or sets the bevel radius on the backglow. If this value is changed, update the lineWidth to match.\r\n     */\r\n    @serialize()\r\n    public bevelRadius = 0.16;\r\n\r\n    /**\r\n     * Gets or sets the line width of the backglow.\r\n     */\r\n    @serialize()\r\n    public lineWidth = 0.16;\r\n\r\n    /**\r\n     * Gets or sets whether to use absolute sizes when calculating effects on the backglow.\r\n     * Since desktop and VR/AR have different relative sizes, it's usually best to keep this false.\r\n     */\r\n    @serialize()\r\n    public absoluteSizes = false;\r\n\r\n    /**\r\n     * Gets or sets the tuning motion of the backglow.\r\n     */\r\n    @serialize()\r\n    public tuningMotion = 0.0;\r\n\r\n    /**\r\n     * Gets or sets the motion of the backglow.\r\n     */\r\n    @serialize()\r\n    public motion = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the maximum intensity of the backglow.\r\n     */\r\n    @serialize()\r\n    public maxIntensity = 0.7;\r\n\r\n    /**\r\n     * Gets or sets the fade-in exponent of the intensity of the backglow.\r\n     */\r\n    @serialize()\r\n    public intensityFadeInExponent = 2.0;\r\n\r\n    /**\r\n     * Gets or sets the start of the outer fuzz effect on the backglow.\r\n     */\r\n    @serialize()\r\n    public outerFuzzStart = 0.04;\r\n\r\n    /**\r\n     * Gets or sets the end of the outer fuzz effect on the backglow.\r\n     */\r\n    @serialize()\r\n    public outerFuzzEnd = 0.04;\r\n\r\n    /**\r\n     * Gets or sets the color of the backglow.\r\n     */\r\n    @serialize()\r\n    public color: Color4 = new Color4(0.682353, 0.698039, 1, 1);\r\n\r\n    /**\r\n     * Gets or sets the inner color of the backglow.\r\n     */\r\n    @serialize()\r\n    public innerColor: Color4 = new Color4(0.356863, 0.392157, 0.796078, 1);\r\n\r\n    /**\r\n     * Gets or sets the blend exponent of the backglow.\r\n     */\r\n    @serialize()\r\n    public blendExponent = 1.5;\r\n\r\n    /**\r\n     * Gets or sets the falloff of the backglow.\r\n     */\r\n    @serialize()\r\n    public falloff = 2.0;\r\n\r\n    /**\r\n     * Gets or sets the bias of the backglow.\r\n     */\r\n    @serialize()\r\n    public bias = 0.5;\r\n\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n        this.alphaMode = Constants.ALPHA_ADD;\r\n        this.disableDepthWrite = true;\r\n        this.backFaceCulling = false;\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new MRDLBackglowMaterialDefines();\r\n        }\r\n\r\n        const defines = <MRDLBackglowMaterialDefines>subMesh.materialDefines;\r\n        const scene = this.getScene();\r\n\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, false);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\r\n\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            if (defines.TANGENT) {\r\n                attribs.push(VertexBuffer.TangentKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            const shaderName = \"mrdlBackglow\";\r\n            const join = defines.toString();\r\n\r\n            const uniforms = [\r\n                \"world\",\r\n                \"worldView\",\r\n                \"worldViewProjection\",\r\n                \"view\",\r\n                \"projection\",\r\n                \"viewProjection\",\r\n                \"cameraPosition\",\r\n                \"_Bevel_Radius_\",\r\n                \"_Line_Width_\",\r\n                \"_Absolute_Sizes_\",\r\n                \"_Tuning_Motion_\",\r\n                \"_Motion_\",\r\n                \"_Max_Intensity_\",\r\n                \"_Intensity_Fade_In_Exponent_\",\r\n                \"_Outer_Fuzz_Start_\",\r\n                \"_Outer_Fuzz_End_\",\r\n                \"_Color_\",\r\n                \"_Inner_Color_\",\r\n                \"_Blend_Exponent_\",\r\n                \"_Falloff_\",\r\n                \"_Bias_\",\r\n            ];\r\n            const samplers: string[] = [];\r\n            const uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4,\r\n            });\r\n\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: { maxSimultaneousLights: 4 },\r\n                    },\r\n                    engine\r\n                ),\r\n                defines\r\n            );\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const scene = this.getScene();\r\n\r\n        const defines = <MRDLBackglowMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n        this._activeEffect.setVector3(\"cameraPosition\", scene.activeCamera!.position);\r\n\r\n        // \"Rounded Rectangle\"\r\n        this._activeEffect.setFloat(\"_Bevel_Radius_\", this.bevelRadius);\r\n        this._activeEffect.setFloat(\"_Line_Width_\", this.lineWidth);\r\n        this._activeEffect.setFloat(\"_Absolute_Sizes_\", this.absoluteSizes ? 1.0 : 0.0);\r\n\r\n        // \"Animation\"\r\n        this._activeEffect.setFloat(\"_Tuning_Motion_\", this.tuningMotion);\r\n        this._activeEffect.setFloat(\"_Motion_\", this.motion);\r\n        this._activeEffect.setFloat(\"_Max_Intensity_\", this.maxIntensity);\r\n        this._activeEffect.setFloat(\"_Intensity_Fade_In_Exponent_\", this.intensityFadeInExponent);\r\n        this._activeEffect.setFloat(\"_Outer_Fuzz_Start_\", this.outerFuzzStart);\r\n        this._activeEffect.setFloat(\"_Outer_Fuzz_End_\", this.outerFuzzEnd);\r\n\r\n        // \"Color\"\r\n        this._activeEffect.setDirectColor4(\"_Color_\", this.color);\r\n        this._activeEffect.setDirectColor4(\"_Inner_Color_\", this.innerColor);\r\n        this._activeEffect.setFloat(\"_Blend_Exponent_\", this.blendExponent);\r\n\r\n        // \"Inner Transition\"\r\n        this._activeEffect.setFloat(\"_Falloff_\", this.falloff);\r\n        this._activeEffect.setFloat(\"_Bias_\", this.bias);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    /**\r\n     * Get the list of animatables in the material.\r\n     * @returns the list of animatables object used in the material\r\n     */\r\n    public getAnimatables(): IAnimatable[] {\r\n        return [];\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): MRDLBackglowMaterial {\r\n        return SerializationHelper.Clone(() => new MRDLBackglowMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): unknown {\r\n        const serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.MRDLBackglowMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"MRDLBackglowMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): MRDLBackglowMaterial {\r\n        return SerializationHelper.Parse(() => new MRDLBackglowMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.MRDLBackglowMaterial\", MRDLBackglowMaterial);\r\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"mrdlFrontplatePixelShader\";\nconst shader = `uniform vec3 cameraPosition;varying vec3 vNormal;varying vec2 vUV;varying vec3 vTangent;varying vec4 vExtra1;varying vec4 vExtra2;varying vec4 vExtra3;uniform float _Radius_;uniform float _Line_Width_;uniform bool _Relative_To_Height_;uniform float _Filter_Width_;uniform vec4 _Edge_Color_;uniform float _Fade_Out_;uniform bool _Smooth_Edges_;uniform bool _Blob_Enable_;uniform vec3 _Blob_Position_;uniform float _Blob_Intensity_;uniform float _Blob_Near_Size_;uniform float _Blob_Far_Size_;uniform float _Blob_Near_Distance_;uniform float _Blob_Far_Distance_;uniform float _Blob_Fade_Length_;uniform float _Blob_Inner_Fade_;uniform float _Blob_Pulse_;uniform float _Blob_Fade_;uniform float _Blob_Pulse_Max_Size_;uniform bool _Blob_Enable_2_;uniform vec3 _Blob_Position_2_;uniform float _Blob_Near_Size_2_;uniform float _Blob_Inner_Fade_2_;uniform float _Blob_Pulse_2_;uniform float _Blob_Fade_2_;uniform float _Gaze_Intensity_;uniform float _Gaze_Focus_;uniform sampler2D _Blob_Texture_;uniform float _Selection_Fuzz_;uniform float _Selected_;uniform float _Selection_Fade_;uniform float _Selection_Fade_Size_;uniform float _Selected_Distance_;uniform float _Selected_Fade_Length_;uniform float _Proximity_Max_Intensity_;uniform float _Proximity_Far_Distance_;uniform float _Proximity_Near_Radius_;uniform float _Proximity_Anisotropy_;uniform bool _Use_Global_Left_Index_;uniform bool _Use_Global_Right_Index_;uniform vec4 Global_Left_Index_Tip_Position;uniform vec4 Global_Right_Index_Tip_Position;void Scale_Color_B54(\nvec4 Color,\nfloat Scalar,\nout vec4 Result)\n{Result=Scalar*Color;}\nvoid Scale_RGB_B50(\nvec4 Color,\nfloat Scalar,\nout vec4 Result)\n{Result=vec4(Scalar,Scalar,Scalar,1)*Color;}\nvoid Proximity_Fragment_B51(\nfloat Proximity_Max_Intensity,\nfloat Proximity_Near_Radius,\nvec4 Deltas,\nfloat Show_Selection,\nfloat Distance_Fade1,\nfloat Distance_Fade2,\nfloat Strength,\nout float Proximity)\n{float proximity1=(1.0-clamp(length(Deltas.xy)/Proximity_Near_Radius,0.0,1.0))*Distance_Fade1;float proximity2=(1.0-clamp(length(Deltas.zw)/Proximity_Near_Radius,0.0,1.0))*Distance_Fade2;Proximity=Strength*(Proximity_Max_Intensity*max(proximity1,proximity2) *(1.0-Show_Selection)+Show_Selection);}\nvoid Blob_Fragment_B56(\nvec2 UV,\nvec3 Blob_Info,\nsampler2D Blob_Texture,\nout vec4 Blob_Color)\n{float k=dot(UV,UV);Blob_Color=Blob_Info.y*texture(Blob_Texture,vec2(vec2(sqrt(k),Blob_Info.x).x,1.0-vec2(sqrt(k),Blob_Info.x).y))*(1.0-clamp(k,0.0,1.0));}\nvoid Round_Rect_Fragment_B61(\nfloat Radius,\nvec4 Line_Color,\nfloat Filter_Width,\nfloat Line_Visibility,\nvec4 Fill_Color,\nbool Smooth_Edges,\nvec4 Rect_Parms,\nout float Inside_Rect)\n{float d=length(max(abs(Rect_Parms.zw)-Rect_Parms.xy,0.0));float dx=max(fwidth(d)*Filter_Width,0.00001);Inside_Rect=Smooth_Edges ? clamp((Radius-d)/dx,0.0,1.0) : 1.0-step(Radius,d);}\nvoid main()\n{float Is_Quad_Q53;Is_Quad_Q53=vNormal.z;vec4 Blob_Color_Q56;Blob_Fragment_B56(vUV,vTangent,_Blob_Texture_,Blob_Color_Q56);float X_Q52;float Y_Q52;float Z_Q52;float W_Q52;X_Q52=vExtra3.x;Y_Q52=vExtra3.y;Z_Q52=vExtra3.z;W_Q52=vExtra3.w;float Proximity_Q51;Proximity_Fragment_B51(_Proximity_Max_Intensity_,_Proximity_Near_Radius_,vExtra2,X_Q52,Y_Q52,Z_Q52,1.0,Proximity_Q51);float Inside_Rect_Q61;Round_Rect_Fragment_B61(W_Q52,vec4(1,1,1,1),_Filter_Width_,1.0,vec4(0,0,0,0),_Smooth_Edges_,vExtra1,Inside_Rect_Q61);vec4 Result_Q50;Scale_RGB_B50(_Edge_Color_,Proximity_Q51,Result_Q50);vec4 Result_Q47=Inside_Rect_Q61*Blob_Color_Q56;vec4 Color_At_T_Q48=mix(Result_Q50,Result_Q47,Is_Quad_Q53);vec4 Result_Q54;Scale_Color_B54(Color_At_T_Q48,_Fade_Out_,Result_Q54);vec4 Out_Color=Result_Q54;float Clip_Threshold=0.001;bool To_sRGB=false;gl_FragColor=Out_Color;}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const mrdlFrontplatePixelShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"mrdlFrontplateVertexShader\";\nconst shader = `uniform mat4 world;uniform mat4 viewProjection;uniform vec3 cameraPosition;attribute vec3 position;attribute vec3 normal;attribute vec2 uv;attribute vec3 tangent;attribute vec4 color;uniform float _Radius_;uniform float _Line_Width_;uniform bool _Relative_To_Height_;uniform float _Filter_Width_;uniform vec4 _Edge_Color_;uniform float _Fade_Out_;uniform bool _Smooth_Edges_;uniform bool _Blob_Enable_;uniform vec3 _Blob_Position_;uniform float _Blob_Intensity_;uniform float _Blob_Near_Size_;uniform float _Blob_Far_Size_;uniform float _Blob_Near_Distance_;uniform float _Blob_Far_Distance_;uniform float _Blob_Fade_Length_;uniform float _Blob_Inner_Fade_;uniform float _Blob_Pulse_;uniform float _Blob_Fade_;uniform float _Blob_Pulse_Max_Size_;uniform bool _Blob_Enable_2_;uniform vec3 _Blob_Position_2_;uniform float _Blob_Near_Size_2_;uniform float _Blob_Inner_Fade_2_;uniform float _Blob_Pulse_2_;uniform float _Blob_Fade_2_;uniform float _Gaze_Intensity_;uniform float _Gaze_Focus_;uniform sampler2D _Blob_Texture_;uniform float _Selection_Fuzz_;uniform float _Selected_;uniform float _Selection_Fade_;uniform float _Selection_Fade_Size_;uniform float _Selected_Distance_;uniform float _Selected_Fade_Length_;uniform float _Proximity_Max_Intensity_;uniform float _Proximity_Far_Distance_;uniform float _Proximity_Near_Radius_;uniform float _Proximity_Anisotropy_;uniform bool _Use_Global_Left_Index_;uniform bool _Use_Global_Right_Index_;uniform vec4 Global_Left_Index_Tip_Position;uniform vec4 Global_Right_Index_Tip_Position;varying vec3 vNormal;varying vec2 vUV;varying vec3 vTangent;varying vec4 vExtra1;varying vec4 vExtra2;varying vec4 vExtra3;void Blob_Vertex_B40(\nvec3 Position,\nvec3 Normal,\nvec3 Tangent,\nvec3 Bitangent,\nvec3 Blob_Position,\nfloat Intensity,\nfloat Blob_Near_Size,\nfloat Blob_Far_Size,\nfloat Blob_Near_Distance,\nfloat Blob_Far_Distance,\nvec4 Vx_Color,\nvec2 UV,\nvec3 Face_Center,\nvec2 Face_Size,\nvec2 In_UV,\nfloat Blob_Fade_Length,\nfloat Selection_Fade,\nfloat Selection_Fade_Size,\nfloat Inner_Fade,\nfloat Blob_Pulse,\nfloat Blob_Fade,\nfloat Blob_Enabled,\nfloat DistanceOffset,\nout vec3 Out_Position,\nout vec2 Out_UV,\nout vec3 Blob_Info,\nout vec2 Blob_Relative_UV)\n{float blobSize,fadeIn;vec3 Hit_Position;Blob_Info=vec3(0.0,0.0,0.0);float Hit_Distance=dot(Blob_Position-Face_Center,Normal)+DistanceOffset*Blob_Far_Distance;Hit_Position=Blob_Position-Hit_Distance*Normal;float absD=abs(Hit_Distance);float lerpVal=clamp((absD-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance),0.0,1.0);fadeIn=1.0-clamp((absD-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);float innerFade=1.0-clamp(-Hit_Distance/Inner_Fade,0.0,1.0);float farClip=clamp(1.0-step(Blob_Far_Distance+Blob_Fade_Length,absD),0.0,1.0);float size=mix(Blob_Near_Size,Blob_Far_Size,lerpVal)*farClip;blobSize=mix(size,Selection_Fade_Size,Selection_Fade)*innerFade*Blob_Enabled;Blob_Info.x=lerpVal*0.5+0.5;Blob_Info.y=fadeIn*Intensity*(1.0-Selection_Fade)*Blob_Fade;Blob_Info.x*=(1.0-Blob_Pulse);vec3 delta=Hit_Position-Face_Center;vec2 blobCenterXY=vec2(dot(delta,Tangent),dot(delta,Bitangent));vec2 quadUVin=2.0*UV-1.0; \nvec2 blobXY=blobCenterXY+quadUVin*blobSize;vec2 blobClipped=clamp(blobXY,-Face_Size*0.5,Face_Size*0.5);vec2 blobUV=(blobClipped-blobCenterXY)/max(blobSize,0.0001)*2.0;vec3 blobCorner=Face_Center+blobClipped.x*Tangent+blobClipped.y*Bitangent;Out_Position=mix(Position,blobCorner,Vx_Color.rrr);Out_UV=mix(In_UV,blobUV,Vx_Color.rr);Blob_Relative_UV=blobClipped/Face_Size.y;}\nvoid Round_Rect_Vertex_B36(\nvec2 UV,\nvec3 Tangent,\nvec3 Binormal,\nfloat Radius,\nfloat Anisotropy,\nvec2 Blob_Center_UV,\nout vec2 Rect_UV,\nout vec2 Scale_XY,\nout vec4 Rect_Parms)\n{Scale_XY=vec2(Anisotropy,1.0);Rect_UV=(UV-vec2(0.5,0.5))*Scale_XY;Rect_Parms.xy=Scale_XY*0.5-vec2(Radius,Radius);Rect_Parms.zw=Blob_Center_UV;}\nvec2 ProjectProximity(\nvec3 blobPosition,\nvec3 position,\nvec3 center,\nvec3 dir,\nvec3 xdir,\nvec3 ydir,\nout float vdistance\n)\n{vec3 delta=blobPosition-position;vec2 xy=vec2(dot(delta,xdir),dot(delta,ydir));vdistance=abs(dot(delta,dir));return xy;}\nvoid Proximity_Vertex_B33(\nvec3 Blob_Position,\nvec3 Blob_Position_2,\nvec3 Face_Center,\nvec3 Position,\nfloat Proximity_Far_Distance,\nfloat Relative_Scale,\nfloat Proximity_Anisotropy,\nvec3 Normal,\nvec3 Tangent,\nvec3 Binormal,\nout vec4 Extra,\nout float Distance_To_Face,\nout float Distance_Fade1,\nout float Distance_Fade2)\n{float distz1,distz2;Extra.xy=ProjectProximity(Blob_Position,Position,Face_Center,Normal,Tangent*Proximity_Anisotropy,Binormal,distz1)/Relative_Scale;Extra.zw=ProjectProximity(Blob_Position_2,Position,Face_Center,Normal,Tangent*Proximity_Anisotropy,Binormal,distz2)/Relative_Scale;Distance_To_Face=dot(Normal,Position-Face_Center);Distance_Fade1=1.0-clamp(distz1/Proximity_Far_Distance,0.0,1.0);Distance_Fade2=1.0-clamp(distz2/Proximity_Far_Distance,0.0,1.0);}\nvoid Object_To_World_Pos_B12(\nvec3 Pos_Object,\nout vec3 Pos_World)\n{Pos_World=(world*vec4(Pos_Object,1.0)).xyz;}\nvoid Choose_Blob_B27(\nvec4 Vx_Color,\nvec3 Position1,\nvec3 Position2,\nbool Blob_Enable_1,\nbool Blob_Enable_2,\nfloat Near_Size_1,\nfloat Near_Size_2,\nfloat Blob_Inner_Fade_1,\nfloat Blob_Inner_Fade_2,\nfloat Blob_Pulse_1,\nfloat Blob_Pulse_2,\nfloat Blob_Fade_1,\nfloat Blob_Fade_2,\nout vec3 Position,\nout float Near_Size,\nout float Inner_Fade,\nout float Blob_Enable,\nout float Fade,\nout float Pulse)\n{Position=Position1*(1.0-Vx_Color.g)+Vx_Color.g*Position2;float b1=Blob_Enable_1 ? 1.0 : 0.0;float b2=Blob_Enable_2 ? 1.0 : 0.0;Blob_Enable=b1+(b2-b1)*Vx_Color.g;Pulse=Blob_Pulse_1*(1.0-Vx_Color.g)+Vx_Color.g*Blob_Pulse_2;Fade=Blob_Fade_1*(1.0-Vx_Color.g)+Vx_Color.g*Blob_Fade_2;Near_Size=Near_Size_1*(1.0-Vx_Color.g)+Vx_Color.g*Near_Size_2;Inner_Fade=Blob_Inner_Fade_1*(1.0-Vx_Color.g)+Vx_Color.g*Blob_Inner_Fade_2;}\nvoid Move_Verts_B32(\nvec2 UV,\nfloat Radius,\nfloat Anisotropy,\nfloat Line_Width,\nfloat Visible,\nout vec3 New_P,\nout vec2 New_UV)\n{vec2 xy=2.0*UV-vec2(0.5,0.5);vec2 center=clamp(xy,0.0,1.0);vec2 delta=2.0*(xy-center);float deltaLength=length(delta);vec2 aniso=vec2(1.0/Anisotropy,1.0);center=(center-vec2(0.5,0.5))*(1.0-2.0*Radius*aniso);New_UV=vec2((2.0-2.0*deltaLength)*Visible,0.0);float deltaRadius= (Radius-Line_Width*New_UV.x);New_P.xy=(center+deltaRadius/deltaLength *aniso*delta);New_P.z=0.0;}\nvoid Object_To_World_Dir_B14(\nvec3 Dir_Object,\nout vec3 Binormal_World)\n{Binormal_World=(world*vec4(Dir_Object,0.0)).xyz;}\nvoid Proximity_Visibility_B55(\nfloat Selection,\nvec3 Proximity_Center,\nvec3 Proximity_Center_2,\nfloat Proximity_Far_Distance,\nfloat Proximity_Radius,\nvec3 Face_Center,\nvec3 Normal,\nvec2 Face_Size,\nfloat Gaze,\nout float Width)\n{float boxMaxSize=length(Face_Size)*0.5;float d1=dot(Proximity_Center-Face_Center,Normal);vec3 blob1=Proximity_Center-d1*Normal;float d2=dot(Proximity_Center_2-Face_Center,Normal);vec3 blob2=Proximity_Center_2-d2*Normal;vec3 delta1=blob1-Face_Center;vec3 delta2=blob2-Face_Center;float dist1=dot(delta1,delta1);float dist2=dot(delta2,delta2);float nearestProxDist=sqrt(min(dist1,dist2));Width=(1.0-step(boxMaxSize+Proximity_Radius,nearestProxDist))*(1.0-step(Proximity_Far_Distance,min(d1,d2))*(1.0-step(0.0001,Selection)));Width=max(Gaze,Width);}\nvec2 ramp2(vec2 start,vec2 end,vec2 x)\n{return clamp((x-start)/(end-start),vec2(0.0,0.0),vec2(1.0,1.0));}\nfloat computeSelection(\nvec3 blobPosition,\nvec3 normal,\nvec3 tangent,\nvec3 bitangent,\nvec3 faceCenter,\nvec2 faceSize,\nfloat selectionFuzz,\nfloat farDistance,\nfloat fadeLength\n)\n{vec3 delta=blobPosition-faceCenter;float absD=abs(dot(delta,normal));float fadeIn=1.0-clamp((absD-farDistance)/fadeLength,0.0,1.0);vec2 blobCenterXY=vec2(dot(delta,tangent),dot(delta,bitangent));vec2 innerFace=faceSize*(1.0-selectionFuzz)*0.5;vec2 selectPulse=ramp2(-faceSize*0.5,-innerFace,blobCenterXY)-ramp2(innerFace,faceSize*0.5,blobCenterXY);return selectPulse.x*selectPulse.y*fadeIn;}\nvoid Selection_Vertex_B31(\nvec3 Blob_Position,\nvec3 Blob_Position_2,\nvec3 Face_Center,\nvec2 Face_Size,\nvec3 Normal,\nvec3 Tangent,\nvec3 Bitangent,\nfloat Selection_Fuzz,\nfloat Selected,\nfloat Far_Distance,\nfloat Fade_Length,\nvec3 Active_Face_Dir,\nout float Show_Selection)\n{float select1=computeSelection(Blob_Position,Normal,Tangent,Bitangent,Face_Center,Face_Size,Selection_Fuzz,Far_Distance,Fade_Length);float select2=computeSelection(Blob_Position_2,Normal,Tangent,Bitangent,Face_Center,Face_Size,Selection_Fuzz,Far_Distance,Fade_Length);Show_Selection=mix(max(select1,select2),1.0,Selected);}\nvoid main()\n{vec3 Vec3_Q29=vec3(vec2(0,0).x,vec2(0,0).y,color.r);vec3 Nrm_World_Q24;Nrm_World_Q24=normalize((world*vec4(normal,0.0)).xyz);vec3 Face_Center_Q30;Face_Center_Q30=(world*vec4(vec3(0,0,0),1.0)).xyz;vec3 Tangent_World_Q13;Tangent_World_Q13=(world*vec4(tangent,0.0)).xyz;vec3 Result_Q42;Result_Q42=_Use_Global_Left_Index_ ? Global_Left_Index_Tip_Position.xyz : _Blob_Position_;vec3 Result_Q43;Result_Q43=_Use_Global_Right_Index_ ? Global_Right_Index_Tip_Position.xyz : _Blob_Position_2_;float Value_At_T_Q58=mix(_Blob_Near_Size_,_Blob_Pulse_Max_Size_,_Blob_Pulse_);float Value_At_T_Q59=mix(_Blob_Near_Size_2_,_Blob_Pulse_Max_Size_,_Blob_Pulse_2_);vec3 Cross_Q70=cross(normal,tangent);float Product_Q45=_Gaze_Intensity_*_Gaze_Focus_;float Step_Q46=step(0.0001,Product_Q45);vec3 Tangent_World_N_Q15=normalize(Tangent_World_Q13);vec3 Position_Q27;float Near_Size_Q27;float Inner_Fade_Q27;float Blob_Enable_Q27;float Fade_Q27;float Pulse_Q27;Choose_Blob_B27(color,Result_Q42,Result_Q43,_Blob_Enable_,_Blob_Enable_2_,Value_At_T_Q58,Value_At_T_Q59,_Blob_Inner_Fade_,_Blob_Inner_Fade_2_,_Blob_Pulse_,_Blob_Pulse_2_,_Blob_Fade_,_Blob_Fade_2_,Position_Q27,Near_Size_Q27,Inner_Fade_Q27,Blob_Enable_Q27,Fade_Q27,Pulse_Q27);vec3 Binormal_World_Q14;Object_To_World_Dir_B14(Cross_Q70,Binormal_World_Q14);float Anisotropy_Q21=length(Tangent_World_Q13)/length(Binormal_World_Q14);vec3 Binormal_World_N_Q16=normalize(Binormal_World_Q14);vec2 Face_Size_Q35;float ScaleY_Q35;Face_Size_Q35=vec2(length(Tangent_World_Q13),length(Binormal_World_Q14));ScaleY_Q35=Face_Size_Q35.y;float Out_Radius_Q38;float Out_Line_Width_Q38;Out_Radius_Q38=_Relative_To_Height_ ? _Radius_ : _Radius_/ScaleY_Q35;Out_Line_Width_Q38=_Relative_To_Height_ ? _Line_Width_ : _Line_Width_/ScaleY_Q35;float Show_Selection_Q31;Selection_Vertex_B31(Result_Q42,Result_Q43,Face_Center_Q30,Face_Size_Q35,Nrm_World_Q24,Tangent_World_N_Q15,Binormal_World_N_Q16,_Selection_Fuzz_,_Selected_,_Selected_Distance_,_Selected_Fade_Length_,vec3(0,0,-1),Show_Selection_Q31);float MaxAB_Q41=max(Show_Selection_Q31,Product_Q45);float Width_Q55;Proximity_Visibility_B55(Show_Selection_Q31,Result_Q42,Result_Q43,_Proximity_Far_Distance_,_Proximity_Near_Radius_,Face_Center_Q30,Nrm_World_Q24,Face_Size_Q35,Step_Q46,Width_Q55);vec3 New_P_Q32;vec2 New_UV_Q32;Move_Verts_B32(uv,Out_Radius_Q38,Anisotropy_Q21,Out_Line_Width_Q38,Width_Q55,New_P_Q32,New_UV_Q32);vec3 Pos_World_Q12;Object_To_World_Pos_B12(New_P_Q32,Pos_World_Q12);vec3 Out_Position_Q40;vec2 Out_UV_Q40;vec3 Blob_Info_Q40;vec2 Blob_Relative_UV_Q40;Blob_Vertex_B40(Pos_World_Q12,Nrm_World_Q24,Tangent_World_N_Q15,Binormal_World_N_Q16,Position_Q27,_Blob_Intensity_,Near_Size_Q27,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,color,uv,Face_Center_Q30,Face_Size_Q35,New_UV_Q32,_Blob_Fade_Length_,_Selection_Fade_,_Selection_Fade_Size_,Inner_Fade_Q27,Pulse_Q27,Fade_Q27,Blob_Enable_Q27,0.0,Out_Position_Q40,Out_UV_Q40,Blob_Info_Q40,Blob_Relative_UV_Q40);vec2 Rect_UV_Q36;vec2 Scale_XY_Q36;vec4 Rect_Parms_Q36;Round_Rect_Vertex_B36(New_UV_Q32,Tangent_World_Q13,Binormal_World_Q14,Out_Radius_Q38,Anisotropy_Q21,Blob_Relative_UV_Q40,Rect_UV_Q36,Scale_XY_Q36,Rect_Parms_Q36);vec4 Extra_Q33;float Distance_To_Face_Q33;float Distance_Fade1_Q33;float Distance_Fade2_Q33;Proximity_Vertex_B33(Result_Q42,Result_Q43,Face_Center_Q30,Pos_World_Q12,_Proximity_Far_Distance_,1.0,_Proximity_Anisotropy_,Nrm_World_Q24,Tangent_World_N_Q15,Binormal_World_N_Q16,Extra_Q33,Distance_To_Face_Q33,Distance_Fade1_Q33,Distance_Fade2_Q33);vec4 Vec4_Q37=vec4(MaxAB_Q41,Distance_Fade1_Q33,Distance_Fade2_Q33,Out_Radius_Q38);vec3 Position=Out_Position_Q40;vec3 Normal=Vec3_Q29;vec2 UV=Out_UV_Q40;vec3 Tangent=Blob_Info_Q40;vec3 Binormal=vec3(0,0,0);vec4 Color=vec4(1,1,1,1);vec4 Extra1=Rect_Parms_Q36;vec4 Extra2=Extra_Q33;vec4 Extra3=Vec4_Q37;gl_Position=viewProjection*vec4(Position,1);vNormal=Normal;vUV=UV;vTangent=Tangent;vExtra1=Extra1;vExtra2=Extra2;vExtra3=Extra3;}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const mrdlFrontplateVertexShader = { name, shader };\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\n\r\nimport { Color4 } from \"core/Maths/math.color\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"core/Materials/materialHelper\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { SerializationHelper, serialize } from \"core/Misc/decorators\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\n\r\nimport \"./shaders/mrdlFrontplate.fragment\";\r\nimport \"./shaders/mrdlFrontplate.vertex\";\r\n\r\n/** @hidden */\r\nclass MRDLFrontplateMaterialDefines extends MaterialDefines {\r\n    /**\r\n     * Sets default value for \"SMOOTH_EDGES\"\r\n     */\r\n    public SMOOTH_EDGES = true;\r\n\r\n    constructor() {\r\n        super();\r\n        this._needNormals = true;\r\n        this._needUVs = true;\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class MRDLFrontplateMaterial extends PushMaterial {\r\n    /**\r\n     * Gets or sets the corner radius on the frontplate. If this value is changed, update the lineWidth to match.\r\n     */\r\n    @serialize()\r\n    public radius = 0.12;\r\n\r\n    /**\r\n     * Gets or sets the line width of the frontplate.\r\n     */\r\n    @serialize()\r\n    public lineWidth = 0.01;\r\n\r\n    /**\r\n     * Gets or sets whether the scale is relative to the frontplate height.\r\n     */\r\n    @serialize()\r\n    public relativeToHeight = false;\r\n\r\n    /** @hidden */\r\n    public _filterWidth = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the edge color of the frontplate.\r\n     */\r\n    @serialize()\r\n    public edgeColor: Color4 = new Color4(0.53, 0.53, 0.53, 1);\r\n\r\n    /**\r\n     * Gets or sets whether to enable blob effects on the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobEnable = true;\r\n\r\n    /**\r\n     * Gets or sets the blob position on the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobPosition: Vector3 = new Vector3(100, 100, 100);\r\n\r\n    /**\r\n     * Gets or sets the blob intensity of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobIntensity = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the blob near size of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobNearSize = 0.032;\r\n\r\n    /**\r\n     * Gets or sets the blob far size of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobFarSize = 0.048;\r\n\r\n    /**\r\n     * Gets or sets the blob near distance of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobNearDistance = 0.008;\r\n\r\n    /**\r\n     * Gets or sets the blob far distance of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobFarDistance = 0.064;\r\n\r\n    /**\r\n     * Gets or sets the blob fade length of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobFadeLength = 0.04;\r\n\r\n    /**\r\n     * Gets or sets the blob inner fade of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobInnerFade = 0.01;\r\n\r\n    /**\r\n     * Gets or sets the blob pulse of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobPulse = 0.0;\r\n\r\n    /**\r\n     * Gets or sets the blob fade effect on the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobFade = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the maximum size of the blob pulse on the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobPulseMaxSize = 0.05;\r\n\r\n    /**\r\n     * Gets or sets whether to enable extra blob effects of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobEnable2 = true;\r\n\r\n    /**\r\n     * Gets or sets blob2 position of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobPosition2: Vector3 = new Vector3(10, 10.1, -0.6);\r\n\r\n    /**\r\n     * Gets or sets the blob2 near size of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobNearSize2 = 0.008;\r\n\r\n    /**\r\n     * Gets or sets the blob2 inner fade of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobInnerFade2 = 0.1;\r\n\r\n    /**\r\n     * Gets or sets the blob2 pulse of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobPulse2 = 0.0;\r\n\r\n    /**\r\n     * Gets or sets the blob2 fade effect on the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobFade2 = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the gaze intensity of the frontplate.\r\n     */\r\n    @serialize()\r\n    public gazeIntensity = 0.8;\r\n\r\n    /**\r\n     * Gets or sets the gaze focus of the frontplate.\r\n     */\r\n    @serialize()\r\n    public gazeFocus = 0.0;\r\n\r\n    /**\r\n     * Gets or sets the selection fuzz of the frontplate.\r\n     */\r\n    @serialize()\r\n    public selectionFuzz = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the fade intensity of the frontplate.\r\n     */\r\n    @serialize()\r\n    public selected = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the selection fade intensity of the frontplate.\r\n     */\r\n    @serialize()\r\n    public selectionFade = 0.2;\r\n\r\n    /**\r\n     * Gets or sets the selection fade size of the frontplate.\r\n     */\r\n    @serialize()\r\n    public selectionFadeSize = 0.0;\r\n\r\n    /**\r\n     * Gets or sets the selected distance of the frontplate.\r\n     */\r\n    @serialize()\r\n    public selectedDistance = 0.08;\r\n\r\n    /**\r\n     * Gets or sets the selected fade length of the frontplate.\r\n     */\r\n    @serialize()\r\n    public selectedFadeLength = 0.08;\r\n\r\n    /**\r\n     * Gets or sets the proximity maximum intensity of the frontplate.\r\n     */\r\n    @serialize()\r\n    public proximityMaxIntensity = 0.45;\r\n\r\n    /**\r\n     * Gets or sets the proximity far distance of the frontplate.\r\n     */\r\n    @serialize()\r\n    public proximityFarDistance = 0.16;\r\n\r\n    /**\r\n     * Gets or sets the proximity near radius of the frontplate.\r\n     */\r\n    @serialize()\r\n    public proximityNearRadius = 0.016;\r\n\r\n    /**\r\n     * Gets or sets the proximity anisotropy of the frontplate.\r\n     */\r\n    @serialize()\r\n    public proximityAnisotropy = 1.0;\r\n\r\n    /**\r\n     * Gets or sets whether to use global left index on the frontplate.\r\n     */\r\n    @serialize()\r\n    public useGlobalLeftIndex = true;\r\n\r\n    /**\r\n     * Gets or sets  whether to use global right index of the frontplate.\r\n     */\r\n    @serialize()\r\n    public useGlobalRightIndex = true;\r\n\r\n    /**\r\n     * URL pointing to the texture used to define the coloring for the BLOB.\r\n     */\r\n    public static BLOB_TEXTURE_URL = \"\";\r\n\r\n    /**\r\n     * Gets or sets the opacity of the frontplate (0.0 - 1.0).\r\n     */\r\n    public fadeOut = 1.0;\r\n\r\n    private _blobTexture: Texture;\r\n\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n        this.alphaMode = Constants.ALPHA_ADD;\r\n        this.disableDepthWrite = true;\r\n        this.backFaceCulling = false;\r\n        this._blobTexture = new Texture(MRDLFrontplateMaterial.BLOB_TEXTURE_URL, scene, true, false, Texture.NEAREST_SAMPLINGMODE);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new MRDLFrontplateMaterialDefines();\r\n        }\r\n\r\n        const defines = <MRDLFrontplateMaterialDefines>subMesh.materialDefines;\r\n        const scene = this.getScene();\r\n\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, false);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\r\n\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            if (defines.TANGENT) {\r\n                attribs.push(VertexBuffer.TangentKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            const shaderName = \"mrdlFrontplate\";\r\n            const join = defines.toString();\r\n\r\n            const uniforms = [\r\n                \"world\",\r\n                \"worldView\",\r\n                \"worldViewProjection\",\r\n                \"view\",\r\n                \"projection\",\r\n                \"viewProjection\",\r\n                \"cameraPosition\",\r\n                \"_Radius_\",\r\n                \"_Line_Width_\",\r\n                \"_Relative_To_Height_\",\r\n                \"_Filter_Width_\",\r\n                \"_Edge_Color_\",\r\n                \"_Fade_Out_\",\r\n                \"_Smooth_Edges_\",\r\n                \"_Blob_Enable_\",\r\n                \"_Blob_Position_\",\r\n                \"_Blob_Intensity_\",\r\n                \"_Blob_Near_Size_\",\r\n                \"_Blob_Far_Size_\",\r\n                \"_Blob_Near_Distance_\",\r\n                \"_Blob_Far_Distance_\",\r\n                \"_Blob_Fade_Length_\",\r\n                \"_Blob_Inner_Fade_\",\r\n                \"_Blob_Pulse_\",\r\n                \"_Blob_Fade_\",\r\n                \"_Blob_Pulse_Max_Size_\",\r\n                \"_Blob_Enable_2_\",\r\n                \"_Blob_Position_2_\",\r\n                \"_Blob_Near_Size_2_\",\r\n                \"_Blob_Inner_Fade_2_\",\r\n                \"_Blob_Pulse_2_\",\r\n                \"_Blob_Fade_2_\",\r\n                \"_Gaze_Intensity_\",\r\n                \"_Gaze_Focus_\",\r\n                \"_Blob_Texture_\",\r\n                \"_Selection_Fuzz_\",\r\n                \"_Selected_\",\r\n                \"_Selection_Fade_\",\r\n                \"_Selection_Fade_Size_\",\r\n                \"_Selected_Distance_\",\r\n                \"_Selected_Fade_Length_\",\r\n                \"_Proximity_Max_Intensity_\",\r\n                \"_Proximity_Far_Distance_\",\r\n                \"_Proximity_Near_Radius_\",\r\n                \"_Proximity_Anisotropy_\",\r\n                \"Global_Left_Index_Tip_Position\",\r\n                \"Global_Right_Index_Tip_Position\",\r\n                \"_Use_Global_Left_Index_\",\r\n                \"_Use_Global_Right_Index_\",\r\n            ];\r\n            const samplers: string[] = [];\r\n            const uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4,\r\n            });\r\n\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: { maxSimultaneousLights: 4 },\r\n                    },\r\n                    engine\r\n                ),\r\n                defines\r\n            );\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const scene = this.getScene();\r\n\r\n        const defines = <MRDLFrontplateMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n        this._activeEffect.setVector3(\"cameraPosition\", scene.activeCamera!.position);\r\n\r\n        // \"Round Rect\"\r\n        this._activeEffect.setFloat(\"_Radius_\", this.radius);\r\n        this._activeEffect.setFloat(\"_Line_Width_\", this.lineWidth);\r\n        this._activeEffect.setFloat(\"_Relative_To_Height_\", this.relativeToHeight ? 1.0 : 0.0);\r\n        this._activeEffect.setFloat(\"_Filter_Width_\", this._filterWidth);\r\n        this._activeEffect.setDirectColor4(\"_Edge_Color_\", this.edgeColor);\r\n\r\n        // \"Fade\"\r\n        this._activeEffect.setFloat(\"_Fade_Out_\", this.fadeOut);\r\n\r\n        // \"Blob\"\r\n        this._activeEffect.setFloat(\"_Blob_Enable_\", this.blobEnable ? 1.0 : 0.0);\r\n        this._activeEffect.setVector3(\"_Blob_Position_\", this.blobPosition);\r\n        this._activeEffect.setFloat(\"_Blob_Intensity_\", this.blobIntensity);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Size_\", this.blobNearSize);\r\n        this._activeEffect.setFloat(\"_Blob_Far_Size_\", this.blobFarSize);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Distance_\", this.blobNearDistance);\r\n        this._activeEffect.setFloat(\"_Blob_Far_Distance_\", this.blobFarDistance);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_Length_\", this.blobFadeLength);\r\n        this._activeEffect.setFloat(\"_Blob_Inner_Fade_\", this.blobInnerFade);\r\n        this._activeEffect.setFloat(\"_Blob_Pulse_\", this.blobPulse);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_\", this.blobFade);\r\n        this._activeEffect.setFloat(\"_Blob_Pulse_Max_Size_\", this.blobPulseMaxSize);\r\n\r\n        // \"Blob 2\"\r\n        this._activeEffect.setFloat(\"_Blob_Enable_2_\", this.blobEnable2 ? 1.0 : 0.0);\r\n        this._activeEffect.setVector3(\"_Blob_Position_2_\", this.blobPosition2);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Size_2_\", this.blobNearSize2);\r\n        this._activeEffect.setFloat(\"_Blob_Inner_Fade_2_\", this.blobInnerFade2);\r\n        this._activeEffect.setFloat(\"_Blob_Pulse_2_\", this.blobPulse2);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_2_\", this.blobFade2);\r\n\r\n        // \"Gaze\"\r\n        this._activeEffect.setFloat(\"_Gaze_Intensity_\", this.gazeIntensity);\r\n        this._activeEffect.setFloat(\"_Gaze_Focus_\", this.gazeFocus);\r\n\r\n        // \"Blob Texture\"\r\n        this._activeEffect.setTexture(\"_Blob_Texture_\", this._blobTexture);\r\n\r\n        // \"Selection\"\r\n        this._activeEffect.setFloat(\"_Selection_Fuzz_\", this.selectionFuzz);\r\n        this._activeEffect.setFloat(\"_Selected_\", this.selected);\r\n        this._activeEffect.setFloat(\"_Selection_Fade_\", this.selectionFade);\r\n        this._activeEffect.setFloat(\"_Selection_Fade_Size_\", this.selectionFadeSize);\r\n        this._activeEffect.setFloat(\"_Selected_Distance_\", this.selectedDistance);\r\n        this._activeEffect.setFloat(\"_Selected_Fade_Length_\", this.selectedFadeLength);\r\n\r\n        // \"Proximity\"\r\n        this._activeEffect.setFloat(\"_Proximity_Max_Intensity_\", this.proximityMaxIntensity);\r\n        this._activeEffect.setFloat(\"_Proximity_Far_Distance_\", this.proximityFarDistance);\r\n        this._activeEffect.setFloat(\"_Proximity_Near_Radius_\", this.proximityNearRadius);\r\n        this._activeEffect.setFloat(\"_Proximity_Anisotropy_\", this.proximityAnisotropy);\r\n\r\n        // \"Global\"\r\n        this._activeEffect.setFloat(\"_Use_Global_Left_Index_\", this.useGlobalLeftIndex ? 1.0 : 0.0);\r\n        this._activeEffect.setFloat(\"_Use_Global_Right_Index_\", this.useGlobalRightIndex ? 1.0 : 0.0);\r\n\r\n        // \"Antialiasing\"\r\n        //define SMOOTH_EDGES true;\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    /**\r\n     * Get the list of animatables in the material.\r\n     * @returns the list of animatables object used in the material\r\n     */\r\n    public getAnimatables(): IAnimatable[] {\r\n        return [];\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): MRDLFrontplateMaterial {\r\n        return SerializationHelper.Clone(() => new MRDLFrontplateMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): unknown {\r\n        const serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.MRDLFrontplateMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"MRDLFrontplateMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): MRDLFrontplateMaterial {\r\n        return SerializationHelper.Parse(() => new MRDLFrontplateMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.MRDLFrontplateMaterial\", MRDLFrontplateMaterial);\r\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"mrdlInnerquadPixelShader\";\nconst shader = `uniform vec3 cameraPosition;varying vec2 vUV;varying vec3 vTangent;uniform vec4 _Color_;uniform float _Radius_;uniform bool _Fixed_Radius_;uniform float _Filter_Width_;uniform float _Glow_Fraction_;uniform float _Glow_Max_;uniform float _Glow_Falloff_;float FilterStep_Bid194(float edge,float x,float filterWidth)\n{float dx=max(1.0E-5,fwidth(x)*filterWidth);return max((x+dx*0.5-max(edge,x-dx*0.5))/dx,0.0);}\nvoid Round_Rect_B194(\nfloat Size_X,\nfloat Size_Y,\nfloat Radius,\nvec4 Rect_Color,\nfloat Filter_Width,\nvec2 UV,\nfloat Glow_Fraction,\nfloat Glow_Max,\nfloat Glow_Falloff,\nout vec4 Color)\n{vec2 halfSize=vec2(Size_X,Size_Y)*0.5;vec2 r=max(min(vec2(Radius,Radius),halfSize),vec2(0.01,0.01));vec2 v=abs(UV);vec2 nearestp=min(v,halfSize-r);vec2 delta=(v-nearestp)/max(vec2(0.01,0.01),r);float Distance=length(delta);float insideRect=1.0-FilterStep_Bid194(1.0-Glow_Fraction,Distance,Filter_Width);float glow=clamp((1.0-Distance)/Glow_Fraction,0.0,1.0);glow=pow(glow,Glow_Falloff);Color=Rect_Color*max(insideRect,glow*Glow_Max);}\nvoid main()\n{float X_Q192;float Y_Q192;float Z_Q192;X_Q192=vTangent.x;Y_Q192=vTangent.y;Z_Q192=vTangent.z;vec4 Color_Q194;Round_Rect_B194(X_Q192,1.0,Y_Q192,_Color_,_Filter_Width_,vUV,_Glow_Fraction_,_Glow_Max_,_Glow_Falloff_,Color_Q194);vec4 Out_Color=Color_Q194;float Clip_Threshold=0.0;gl_FragColor=Out_Color;}\n`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const mrdlInnerquadPixelShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"mrdlInnerquadVertexShader\";\nconst shader = `uniform mat4 world;uniform mat4 viewProjection;uniform vec3 cameraPosition;attribute vec3 position;attribute vec3 normal;attribute vec2 uv;attribute vec3 tangent;attribute vec4 color;uniform vec4 _Color_;uniform float _Radius_;uniform bool _Fixed_Radius_;uniform float _Filter_Width_;uniform float _Glow_Fraction_;uniform float _Glow_Max_;uniform float _Glow_Falloff_;varying vec2 vUV;varying vec3 vTangent;void main()\n{vec3 Pos_World_Q189;Pos_World_Q189=(world*vec4(position,1.0)).xyz;vec3 Dir_World_Q190;Dir_World_Q190=(world*vec4(tangent,0.0)).xyz;vec3 Dir_World_Q191;Dir_World_Q191=(world*vec4((cross(normal,tangent)),0.0)).xyz;float Length_Q180=length(Dir_World_Q190);float Length_Q181=length(Dir_World_Q191);float Quotient_Q184=Length_Q180/Length_Q181;float Quotient_Q195=_Radius_/Length_Q181;vec2 Result_Q193;Result_Q193=vec2((uv.x-0.5)*Length_Q180/Length_Q181,(uv.y-0.5));float Result_Q198=_Fixed_Radius_ ? Quotient_Q195 : _Radius_;vec3 Vec3_Q183=vec3(Quotient_Q184,Result_Q198,0);vec3 Position=Pos_World_Q189;vec3 Normal=vec3(0,0,0);vec2 UV=Result_Q193;vec3 Tangent=Vec3_Q183;vec3 Binormal=vec3(0,0,0);vec4 Color=color;gl_Position=viewProjection*vec4(Position,1);vUV=UV;vTangent=Tangent;}\n`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const mrdlInnerquadVertexShader = { name, shader };\n","import type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\n\r\nimport { Color4 } from \"core/Maths/math.color\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"core/Materials/materialHelper\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { SerializationHelper, serialize } from \"core/Misc/decorators\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\n\r\nimport \"./shaders/mrdlInnerquad.fragment\";\r\nimport \"./shaders/mrdlInnerquad.vertex\";\r\n\r\nclass MRDLInnerquadMaterialDefines extends MaterialDefines {\r\n    constructor() {\r\n        super();\r\n        this._needNormals = true;\r\n        this._needUVs = true;\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class MRDLInnerquadMaterial extends PushMaterial {\r\n    /**\r\n     * Gets or sets the color of the innerquad.\r\n     */\r\n    @serialize()\r\n    public color: Color4 = new Color4(1, 1, 1, 0.05);\r\n    /**\r\n     * Gets or sets the corner radius on the innerquad. If this value is changed, update the lineWidth to match.\r\n     */\r\n    @serialize()\r\n    public radius = 0.12;\r\n\r\n    /**\r\n     * Gets or sets whether the radius of the innerquad should be fixed.\r\n     */\r\n    @serialize()\r\n    public fixedRadius = true;\r\n\r\n    /** @hidden */\r\n    public _filterWidth = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the glow fraction of the innerquad.\r\n     */\r\n    @serialize()\r\n    public glowFraction = 0.0;\r\n\r\n    /**\r\n     * Gets or sets the maximum glow intensity of the innerquad.\r\n     */\r\n    @serialize()\r\n    public glowMax = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the glow falloff effect of the innerquad.\r\n     */\r\n    @serialize()\r\n    public glowFalloff = 2.0;\r\n\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n        this.alphaMode = Constants.ALPHA_COMBINE;\r\n        this.backFaceCulling = false;\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new MRDLInnerquadMaterialDefines();\r\n        }\r\n\r\n        const defines = <MRDLInnerquadMaterialDefines>subMesh.materialDefines;\r\n        const scene = this.getScene();\r\n\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, false);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\r\n\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            if (defines.TANGENT) {\r\n                attribs.push(VertexBuffer.TangentKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            const shaderName = \"mrdlInnerquad\";\r\n            const join = defines.toString();\r\n\r\n            const uniforms = [\r\n                \"world\",\r\n                \"worldView\",\r\n                \"worldViewProjection\",\r\n                \"view\",\r\n                \"projection\",\r\n                \"viewProjection\",\r\n                \"cameraPosition\",\r\n                \"_Color_\",\r\n                \"_Radius_\",\r\n                \"_Fixed_Radius_\",\r\n                \"_Filter_Width_\",\r\n                \"_Glow_Fraction_\",\r\n                \"_Glow_Max_\",\r\n                \"_Glow_Falloff_\",\r\n            ];\r\n            const samplers: string[] = [];\r\n            const uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4,\r\n            });\r\n\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: { maxSimultaneousLights: 4 },\r\n                    },\r\n                    engine\r\n                ),\r\n                defines\r\n            );\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const scene = this.getScene();\r\n\r\n        const defines = <MRDLInnerquadMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n        this._activeEffect.setVector3(\"cameraPosition\", scene.activeCamera!.position);\r\n\r\n        // \"Color\"\r\n        this._activeEffect.setDirectColor4(\"_Color_\", this.color);\r\n\r\n        // \"Shape\"\r\n        this._activeEffect.setFloat(\"_Radius_\", this.radius);\r\n        this._activeEffect.setFloat(\"_Fixed_Radius_\", this.fixedRadius ? 1.0 : 0.0);\r\n        this._activeEffect.setFloat(\"_Filter_Width_\", this._filterWidth);\r\n\r\n        // \"Glow\"\r\n        this._activeEffect.setFloat(\"_Glow_Fraction_\", this.glowFraction);\r\n        this._activeEffect.setFloat(\"_Glow_Max_\", this.glowMax);\r\n        this._activeEffect.setFloat(\"_Glow_Falloff_\", this.glowFalloff);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    /**\r\n     * Get the list of animatables in the material.\r\n     * @returns the list of animatables object used in the material\r\n     */\r\n    public getAnimatables(): IAnimatable[] {\r\n        return [];\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): MRDLInnerquadMaterial {\r\n        return SerializationHelper.Clone(() => new MRDLInnerquadMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): unknown {\r\n        const serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.MRDLInnerquadMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"MRDLInnerquadMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): MRDLInnerquadMaterial {\r\n        return SerializationHelper.Parse(() => new MRDLInnerquadMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.MRDLInnerquadMaterial\", MRDLInnerquadMaterial);\r\n","import type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { Control3D } from \"../control3D\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { Vector3WithInfo } from \"../../vector3WithInfo\";\r\n\r\nimport { AdvancedDynamicTexture } from \"../../../2D/advancedDynamicTexture\";\r\nimport { Animation } from \"core/Animations/animation\";\r\nimport { AnimationGroup } from \"core/Animations/animationGroup\";\r\nimport { Color3, Color4 } from \"core/Maths/math.color\";\r\nimport { Control } from \"../../../2D/controls/control\";\r\nimport { CreatePlane } from \"core/Meshes/Builders/planeBuilder\";\r\nimport { CreateBox } from \"core/Meshes/Builders/boxBuilder\";\r\nimport { IsDocumentAvailable } from \"core/Misc/domManagement\";\r\nimport { FadeInOutBehavior } from \"core/Behaviors/Meshes/fadeInOutBehavior\";\r\nimport { Grid } from \"../../../2D/controls/grid\";\r\nimport { Image } from \"../../../2D/controls/image\";\r\nimport { MRDLBackglowMaterial } from \"../../materials/mrdl/mrdlBackglowMaterial\";\r\nimport { MRDLBackplateMaterial } from \"../../materials/mrdl/mrdlBackplateMaterial\";\r\nimport { MRDLFrontplateMaterial } from \"../../materials/mrdl/mrdlFrontplateMaterial\";\r\nimport { MRDLInnerquadMaterial } from \"../../materials/mrdl/mrdlInnerquadMaterial\";\r\nimport { Rectangle } from \"../../../2D/controls/rectangle\";\r\nimport { SceneLoader } from \"core/Loading/sceneLoader\";\r\nimport { StackPanel } from \"../../../2D/controls/stackPanel\";\r\nimport { StandardMaterial } from \"core/Materials/standardMaterial\";\r\nimport { TextBlock } from \"../../../2D/controls/textBlock\";\r\nimport { TouchButton3D } from \"../touchButton3D\";\r\nimport { TransformNode } from \"core/Meshes/transformNode\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\n\r\n/**\r\n * Class used to create the mrtkv3 button\r\n */\r\nexport class TouchHolographicButton extends TouchButton3D {\r\n    /**\r\n     * Base Url for the frontplate model.\r\n     */\r\n    public static MRTK_ASSET_BASE_URL = \"https://assets.babylonjs.com/meshes/MRTK/\";\r\n\r\n    /**\r\n     * File name for the frontplate model.\r\n     */\r\n    public static FRONTPLATE_MODEL_FILENAME = \"mrtk-fluent-frontplate.glb\";\r\n\r\n    /**\r\n     * File name for the backplate model.\r\n     */\r\n    public static BACKPLATE_MODEL_FILENAME = \"mrtk-fluent-backplate.glb\";\r\n\r\n    /**\r\n     * File name for the backglow model.\r\n     */\r\n    public static BACKGLOW_MODEL_FILENAME = \"mrtk-fluent-button.glb\";\r\n\r\n    /**\r\n     * File name for the innerquad model.\r\n     */\r\n    public static INNERQUAD_MODEL_FILENAME = \"SlateProximity.glb\";\r\n\r\n    /**\r\n     * Gets or sets the horizontal scaling for the button.\r\n     */\r\n    public width = 1;\r\n\r\n    /**\r\n     * Gets or sets the vertical scaling for the button.\r\n     */\r\n    public height = 1;\r\n\r\n    /**\r\n     * Gets or sets the bevel radius for the button.\r\n     */\r\n    public radius = 0.14;\r\n\r\n    /**\r\n     * Gets or sets the font size of the button text in pixels.\r\n     * This is only adjustable for a button with width to height ratio greater than 1.\r\n     */\r\n    public textSizeInPixels = 18;\r\n\r\n    /**\r\n     * Gets or sets the size of the button image in pixels.\r\n     * This is only adjustable for a button with width to height ratio greater than 1.\r\n     */\r\n    public imageSizeInPixels = 40;\r\n\r\n    /**\r\n     * Gets or sets the color of the button plate.\r\n     */\r\n    public plateMaterialColor = new Color3(0.4, 0.4, 0.4);\r\n\r\n    // Shared variables for meshes\r\n    /**\r\n     * Gets or sets the depth of the button's front plate.\r\n     * This variable determines the z scaling and z position for some of the button's meshes.\r\n     */\r\n    public frontPlateDepth = 0.2;\r\n\r\n    /**\r\n     * Gets or sets the depth of the button's back plate.\r\n     * This variable determines the z scaling and z position for some of the button's meshes.\r\n     */\r\n    public backPlateDepth = 0.04;\r\n\r\n    /**\r\n     * Gets or sets the offset value for button's back glow.\r\n     * This variable determines the x, y scaling of the button's meshes.\r\n     */\r\n    public backGlowOffset = 0.1;\r\n\r\n    /**\r\n     * Gets or sets the value that determines the z scaling and z position for the innerQuad and BackGlow meshes.\r\n     */\r\n    public flatPlaneDepth = 0.001;\r\n\r\n    /**\r\n     * Gets or sets the radius for FrontMaterial and innerQuadMaterial.\r\n     */\r\n    public innerQuadRadius = this.radius - 0.04;\r\n\r\n    /**\r\n     * Gets or sets the color for innerQuadMaterial.\r\n     */\r\n    public innerQuadColor = new Color4(0, 0, 0, 0);\r\n\r\n    /**\r\n     * Gets or sets the color for innerQuadMaterial for when it is toggled.\r\n     */\r\n    public innerQuadToggledColor = new Color4(0.5197843, 0.6485234, 0.9607843, 0.6);\r\n\r\n    /**\r\n     * Gets or sets the color for innerQuadMaterial for when it is hovered.\r\n     */\r\n    public innerQuadHoverColor = new Color4(1, 1, 1, 0.05);\r\n\r\n    /**\r\n     * Gets or sets the color for innerQuadMaterial for when it is toggled and hovered.\r\n     */\r\n    public innerQuadToggledHoverColor = new Color4(0.5197843, 0.6485234, 0.9607843, 1);\r\n\r\n    // Meshes\r\n    private _backPlate: AbstractMesh;\r\n    private _textPlate: Mesh;\r\n    private _frontPlate: AbstractMesh;\r\n    private _backGlow: AbstractMesh;\r\n    private _innerQuad: AbstractMesh;\r\n    private _collisionPlate: AbstractMesh;\r\n    private _frontPlateCollisionMesh: AbstractMesh;\r\n    private _isBackplateVisible = true;\r\n\r\n    // Content\r\n    private _text: string;\r\n    private _subtext: string;\r\n    private _imageUrl: string;\r\n\r\n    // Materials\r\n    private _shareMaterials = true;\r\n    private _frontMaterial: MRDLFrontplateMaterial;\r\n    private _backMaterial: MRDLBackplateMaterial;\r\n    private _backGlowMaterial: MRDLBackglowMaterial;\r\n    private _innerQuadMaterial: MRDLInnerquadMaterial;\r\n    private _plateMaterial: StandardMaterial;\r\n\r\n    // Events\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<Vector3>>>;\r\n    private _pointerClickObserver: Nullable<Observer<Vector3WithInfo>>;\r\n    private _pointerEnterObserver: Nullable<Observer<Control3D>>;\r\n    private _pointerOutObserver: Nullable<Observer<Control3D>>;\r\n    private _toggleObserver: Nullable<Observer<boolean>>;\r\n\r\n    // Tooltip\r\n    private _tooltipFade: Nullable<FadeInOutBehavior>;\r\n    private _tooltipTextBlock: Nullable<TextBlock>;\r\n    private _tooltipTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _tooltipMesh: Nullable<Mesh>;\r\n    private _tooltipHoverObserver: Nullable<Observer<Control3D>>;\r\n    private _tooltipOutObserver: Nullable<Observer<Control3D>>;\r\n\r\n    private _disposeTooltip() {\r\n        this._tooltipFade = null;\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.dispose();\r\n        }\r\n        if (this._tooltipTexture) {\r\n            this._tooltipTexture.dispose();\r\n        }\r\n        if (this._tooltipMesh) {\r\n            this._tooltipMesh.dispose();\r\n        }\r\n        this.onPointerEnterObservable.remove(this._tooltipHoverObserver);\r\n        this.onPointerOutObservable.remove(this._tooltipOutObserver);\r\n    }\r\n\r\n    /**\r\n     * Rendering ground id of all the mesh in the button\r\n     */\r\n    public set renderingGroupId(id: number) {\r\n        this._backPlate.renderingGroupId = id;\r\n        this._textPlate.renderingGroupId = id;\r\n        this._frontPlate.renderingGroupId = id;\r\n        this._backGlow.renderingGroupId = id;\r\n        this._innerQuad.renderingGroupId = id;\r\n\r\n        if (this._tooltipMesh) {\r\n            this._tooltipMesh.renderingGroupId = id;\r\n        }\r\n    }\r\n    public get renderingGroupId(): number {\r\n        return this._backPlate.renderingGroupId;\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh used to render this control\r\n     */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        return this._backPlate as AbstractMesh;\r\n    }\r\n\r\n    /**\r\n     * Text to be displayed on the tooltip shown when hovering on the button. When set to null tooltip is disabled. (Default: null)\r\n     * Set this property after adding the button to the GUI3DManager\r\n     */\r\n    public set tooltipText(text: Nullable<string>) {\r\n        if (!text) {\r\n            this._disposeTooltip();\r\n            return;\r\n        }\r\n        if (!this._tooltipFade) {\r\n            const rightHandedScene = this._backPlate._scene.useRightHandedSystem;\r\n            // Create tooltip with mesh and text\r\n            this._tooltipMesh = CreatePlane(\"\", { size: 1 }, this._backPlate._scene);\r\n            this._tooltipMesh.position = Vector3.Down().scale(0.7).add(Vector3.Forward(rightHandedScene).scale(-0.15));\r\n            this._tooltipMesh.isPickable = false;\r\n            this._tooltipMesh.parent = this._frontPlateCollisionMesh;\r\n\r\n            // Create text texture for the tooltip\r\n            this._tooltipTexture = AdvancedDynamicTexture.CreateForMesh(this._tooltipMesh);\r\n            const tooltipBackground = new Rectangle();\r\n            tooltipBackground.height = 0.25;\r\n            tooltipBackground.width = 0.8;\r\n            tooltipBackground.cornerRadius = 25;\r\n            tooltipBackground.color = \"#ffffff\";\r\n            tooltipBackground.thickness = 20;\r\n            tooltipBackground.background = \"#060668\";\r\n            this._tooltipTexture.addControl(tooltipBackground);\r\n\r\n            this._tooltipTextBlock = new TextBlock();\r\n            this._tooltipTextBlock.color = \"white\";\r\n            this._tooltipTextBlock.fontSize = 100;\r\n            this._tooltipTexture.addControl(this._tooltipTextBlock);\r\n\r\n            // Add hover action to tooltip\r\n            this._tooltipFade = new FadeInOutBehavior();\r\n            this._tooltipFade.delay = 500;\r\n            this._tooltipMesh.addBehavior(this._tooltipFade);\r\n            this._tooltipHoverObserver = this.onPointerEnterObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(true);\r\n                }\r\n            });\r\n            this._tooltipOutObserver = this.onPointerOutObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(false);\r\n                }\r\n            });\r\n        }\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.text = text;\r\n        }\r\n    }\r\n\r\n    public get tooltipText() {\r\n        return this._tooltipTextBlock?.text || null;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text for the button\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n\r\n        this._text = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets subtext for a button with larger width\r\n     */\r\n    public get subtext(): string {\r\n        return this._subtext;\r\n    }\r\n\r\n    public set subtext(value: string) {\r\n        if (this._subtext === value) {\r\n            return;\r\n        }\r\n\r\n        this._subtext = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image url for the button\r\n     */\r\n    public get imageUrl(): string {\r\n        return this._imageUrl;\r\n    }\r\n\r\n    public set imageUrl(value: string) {\r\n        if (this._imageUrl === value) {\r\n            return;\r\n        }\r\n\r\n        this._imageUrl = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets the back material used by this button\r\n     */\r\n    public get backMaterial(): MRDLBackplateMaterial {\r\n        return this._backMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the front material used by this button\r\n     */\r\n    public get frontMaterial(): MRDLFrontplateMaterial {\r\n        return this._frontMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the back glow material used by this button\r\n     */\r\n    public get backGlowMaterial(): MRDLBackglowMaterial {\r\n        return this._backGlowMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the inner quad material used by this button\r\n     */\r\n    public get innerQuadMaterial(): MRDLInnerquadMaterial {\r\n        return this._innerQuadMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the plate material used by this button\r\n     */\r\n    public get plateMaterial(): StandardMaterial {\r\n        return this._plateMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this button shares its material with other V3 Buttons\r\n     */\r\n    public get shareMaterials(): boolean {\r\n        return this._shareMaterials;\r\n    }\r\n\r\n    /**\r\n     * Sets whether the backplate is visible or hidden. Hiding the backplate is not recommended without some sort of replacement\r\n     */\r\n    public set isBackplateVisible(isVisible: boolean) {\r\n        if (this.mesh && this._backMaterial) {\r\n            if (isVisible && !this._isBackplateVisible) {\r\n                this._backPlate.visibility = 1;\r\n            } else if (!isVisible && this._isBackplateVisible) {\r\n                this._backPlate.visibility = 0;\r\n            }\r\n        }\r\n\r\n        this._isBackplateVisible = isVisible;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     * @param shareMaterials\r\n     */\r\n    constructor(name?: string, shareMaterials = true) {\r\n        super(name);\r\n\r\n        this._shareMaterials = shareMaterials;\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            if (this._frontPlate && this._textPlate && !this.isToggleButton) {\r\n                this._performEnterExitAnimation(1);\r\n            }\r\n\r\n            if (this.isToggleButton && this._innerQuadMaterial) {\r\n                if (this.isToggled) {\r\n                    this._innerQuadMaterial.color = this.innerQuadToggledHoverColor;\r\n                } else {\r\n                    this._innerQuadMaterial.color = this.innerQuadHoverColor;\r\n                }\r\n            }\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (this._frontPlate && this._textPlate && !this.isToggleButton) {\r\n                this._performEnterExitAnimation(-0.8);\r\n            }\r\n\r\n            if (this.isToggleButton && this._innerQuadMaterial) {\r\n                this._onToggle(this.isToggled);\r\n            }\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            // Do nothing\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            // Do nothing\r\n        };\r\n\r\n        this._pointerClickObserver = this.onPointerClickObservable.add(() => {\r\n            if (this._frontPlate && this._backGlow && !this.isActiveNearInteraction) {\r\n                this._performClickAnimation();\r\n            }\r\n\r\n            if (this.isToggleButton && this._innerQuadMaterial) {\r\n                this._onToggle(this.isToggled);\r\n            }\r\n        });\r\n\r\n        this._pointerEnterObserver = this.onPointerEnterObservable.add(() => {\r\n            this.pointerEnterAnimation();\r\n        });\r\n\r\n        this._pointerOutObserver = this.onPointerOutObservable.add(() => {\r\n            this.pointerOutAnimation();\r\n        });\r\n\r\n        this._toggleObserver = this.onToggleObservable.add((isToggled) => {\r\n            if (isToggled) {\r\n                this._innerQuadMaterial.color = this.innerQuadToggledColor;\r\n            } else {\r\n                this._innerQuadMaterial.color = this.innerQuadColor;\r\n            }\r\n        });\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"TouchHolographicButton\";\r\n    }\r\n\r\n    private _rebuildContent(): void {\r\n        let content: Control;\r\n\r\n        if (this._getAspectRatio() <= 1) {\r\n            // align text and image vertically\r\n            content = this._alignContentVertically();\r\n        } else {\r\n            // align text and image horizontally\r\n            content = this._alignContentHorizontally();\r\n        }\r\n\r\n        this.content = content;\r\n    }\r\n\r\n    private _getAspectRatio() {\r\n        return this.width / this.height;\r\n    }\r\n\r\n    private _alignContentVertically() {\r\n        const panel = new StackPanel();\r\n        panel.isVertical = true;\r\n\r\n        if (IsDocumentAvailable() && !!document.createElement) {\r\n            if (this._imageUrl) {\r\n                const image = new Image();\r\n                image.source = this._imageUrl;\r\n                image.heightInPixels = 180;\r\n                image.widthInPixels = 100;\r\n                image.paddingTopInPixels = 40;\r\n                image.paddingBottomInPixels = 40;\r\n                panel.addControl(image);\r\n            }\r\n        }\r\n\r\n        if (this._text) {\r\n            const text = new TextBlock();\r\n            text.text = this._text;\r\n            text.color = \"white\";\r\n            text.heightInPixels = 30;\r\n            text.fontSize = 24;\r\n            panel.addControl(text);\r\n        }\r\n\r\n        return panel;\r\n    }\r\n\r\n    private _alignContentHorizontally() {\r\n        let totalPanelWidthInPixels = 240;\r\n        const padding = 15;\r\n\r\n        const contentContainer = new Rectangle();\r\n        contentContainer.widthInPixels = totalPanelWidthInPixels;\r\n        contentContainer.heightInPixels = totalPanelWidthInPixels;\r\n        contentContainer.color = \"transparent\";\r\n        contentContainer.setPaddingInPixels(padding, padding, padding, padding);\r\n        totalPanelWidthInPixels -= padding * 2;\r\n\r\n        const panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.scaleY = this._getAspectRatio();\r\n\r\n        if (IsDocumentAvailable() && !!document.createElement) {\r\n            if (this._imageUrl) {\r\n                const imageContainer = new Rectangle(`${this.name}_image`);\r\n                imageContainer.widthInPixels = this.imageSizeInPixels;\r\n                imageContainer.heightInPixels = this.imageSizeInPixels;\r\n                imageContainer.color = \"transparent\";\r\n                totalPanelWidthInPixels -= this.imageSizeInPixels;\r\n\r\n                const image = new Image();\r\n                image.source = this._imageUrl;\r\n\r\n                imageContainer.addControl(image);\r\n                panel.addControl(imageContainer);\r\n            }\r\n        }\r\n\r\n        if (this._text) {\r\n            const text = new TextBlock(`${this.name}_text`);\r\n            text.text = this._text;\r\n            text.color = \"white\";\r\n            text.fontSize = this.textSizeInPixels;\r\n            text.widthInPixels = totalPanelWidthInPixels;\r\n\r\n            if (this._imageUrl) {\r\n                text.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n                text.paddingLeftInPixels = padding;\r\n            }\r\n\r\n            if (this._subtext) {\r\n                const textContainer = new Grid();\r\n                textContainer.addColumnDefinition(1);\r\n                textContainer.addRowDefinition(0.5);\r\n                textContainer.addRowDefinition(0.5);\r\n                textContainer.widthInPixels = totalPanelWidthInPixels;\r\n                textContainer.heightInPixels = 45;\r\n\r\n                const subtext = new TextBlock(`${this.name}_subtext`);\r\n                subtext.text = this._subtext;\r\n                subtext.color = \"#EEEEEEAB\";\r\n                subtext.fontSize = this.textSizeInPixels * 0.75;\r\n                subtext.fontWeight = \"600\";\r\n\r\n                if (this._imageUrl) {\r\n                    subtext.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n                    subtext.paddingLeftInPixels = padding;\r\n                }\r\n\r\n                textContainer.addControl(text, 0);\r\n                textContainer.addControl(subtext, 1);\r\n                panel.addControl(textContainer);\r\n            } else {\r\n                panel.addControl(text);\r\n            }\r\n        }\r\n\r\n        contentContainer.addControl(panel);\r\n        return contentContainer;\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this.name = this.name ?? \"TouchHolographicButton\";\r\n\r\n        const backPlateMesh = this._createBackPlate(scene);\r\n        const collisionMesh = this._createFrontPlate(scene);\r\n        const innerQuadMesh = this._createInnerQuad(scene);\r\n        const backGlowMesh = this._createBackGlow(scene);\r\n\r\n        this._frontPlateCollisionMesh = collisionMesh;\r\n        this._textPlate = <Mesh>super._createNode(scene);\r\n        this._textPlate.name = `${this.name}_textPlate`;\r\n        this._textPlate.isPickable = false;\r\n        this._textPlate.scaling.x = this.width;\r\n        this._textPlate.parent = collisionMesh;\r\n\r\n        this._backPlate = backPlateMesh;\r\n        this._backPlate.position = Vector3.Forward(scene.useRightHandedSystem).scale(this.backPlateDepth / 2);\r\n        this._backPlate.isPickable = false;\r\n\r\n        this._backPlate.addChild(collisionMesh);\r\n        this._backPlate.addChild(innerQuadMesh);\r\n\r\n        if (backGlowMesh) {\r\n            this._backPlate.addChild(backGlowMesh);\r\n        }\r\n\r\n        const tn = new TransformNode(`${this.name}_root`, scene);\r\n        this._backPlate.setParent(tn);\r\n\r\n        this.collisionMesh = collisionMesh;\r\n        this.collidableFrontDirection = this._backPlate.forward.negate(); // Mesh is facing the wrong way\r\n\r\n        return tn;\r\n    }\r\n\r\n    private _createBackPlate(scene: Scene) {\r\n        const backPlateMesh = CreateBox(`${this.name}_backPlate`, {}, scene);\r\n        backPlateMesh.isPickable = false;\r\n        backPlateMesh.visibility = 0;\r\n        backPlateMesh.scaling.z = 0.2;\r\n\r\n        SceneLoader.ImportMeshAsync(undefined, TouchHolographicButton.MRTK_ASSET_BASE_URL, TouchHolographicButton.BACKPLATE_MODEL_FILENAME, scene).then((result) => {\r\n            const backPlateModel = result.meshes[1];\r\n            backPlateModel.visibility = 0;\r\n\r\n            if (this._isBackplateVisible) {\r\n                backPlateModel.visibility = 1;\r\n                backPlateModel.name = `${this.name}_backPlate`;\r\n                backPlateModel.isPickable = false;\r\n                backPlateModel.scaling.x = this.width;\r\n                backPlateModel.scaling.y = this.height;\r\n                backPlateModel.parent = backPlateMesh;\r\n            }\r\n\r\n            if (this._backMaterial) {\r\n                backPlateModel.material = this._backMaterial;\r\n            }\r\n\r\n            this._backPlate = backPlateModel;\r\n        });\r\n\r\n        return backPlateMesh;\r\n    }\r\n\r\n    private _createFrontPlate(scene: Scene) {\r\n        const collisionMesh = CreateBox(\r\n            `${this.name}_frontPlate`,\r\n            {\r\n                width: this.width,\r\n                height: this.height,\r\n                depth: this.frontPlateDepth,\r\n            },\r\n            scene\r\n        );\r\n        collisionMesh.isPickable = true;\r\n        collisionMesh.isNearPickable = true;\r\n        collisionMesh.visibility = 0;\r\n        collisionMesh.position = Vector3.Forward(scene.useRightHandedSystem).scale((this.backPlateDepth - this.frontPlateDepth) / 2);\r\n\r\n        SceneLoader.ImportMeshAsync(undefined, TouchHolographicButton.MRTK_ASSET_BASE_URL, TouchHolographicButton.FRONTPLATE_MODEL_FILENAME, scene).then((result) => {\r\n            const collisionPlate = CreateBox(\r\n                `${this.name}_collisionPlate`,\r\n                {\r\n                    width: this.width,\r\n                    height: this.height,\r\n                },\r\n                scene\r\n            );\r\n            collisionPlate.isPickable = false;\r\n            collisionPlate.scaling.z = this.frontPlateDepth;\r\n            collisionPlate.visibility = 0;\r\n            collisionPlate.parent = collisionMesh;\r\n            this._collisionPlate = collisionPlate;\r\n\r\n            const frontPlateModel = result.meshes[1];\r\n            frontPlateModel.name = `${this.name}_frontPlate`;\r\n            frontPlateModel.isPickable = false;\r\n            frontPlateModel.scaling.x = this.width - this.backGlowOffset;\r\n            frontPlateModel.scaling.y = this.height - this.backGlowOffset;\r\n            frontPlateModel.position = Vector3.Forward(scene.useRightHandedSystem).scale(-0.5);\r\n            frontPlateModel.parent = collisionPlate;\r\n\r\n            if (this.isToggleButton) {\r\n                frontPlateModel.visibility = 0;\r\n            }\r\n\r\n            if (this._frontMaterial) {\r\n                frontPlateModel.material = this._frontMaterial;\r\n            }\r\n\r\n            this._textPlate.scaling.x = 1;\r\n            this._textPlate.parent = frontPlateModel;\r\n            this._frontPlate = frontPlateModel;\r\n        });\r\n\r\n        return collisionMesh;\r\n    }\r\n\r\n    private _createInnerQuad(scene: Scene) {\r\n        const innerQuadMesh = CreateBox(`${this.name}_innerQuad`, {}, scene);\r\n        innerQuadMesh.isPickable = false;\r\n        innerQuadMesh.visibility = 0;\r\n        innerQuadMesh.scaling.z = this.flatPlaneDepth;\r\n        innerQuadMesh.position.z += this.backPlateDepth / 2 - this.flatPlaneDepth;\r\n\r\n        SceneLoader.ImportMeshAsync(undefined, TouchHolographicButton.MRTK_ASSET_BASE_URL, TouchHolographicButton.INNERQUAD_MODEL_FILENAME, scene).then((result) => {\r\n            const innerQuadModel = result.meshes[1];\r\n            innerQuadModel.name = `${this.name}_innerQuad`;\r\n            innerQuadModel.isPickable = false;\r\n            innerQuadModel.scaling.x = this.width - this.backGlowOffset;\r\n            innerQuadModel.scaling.y = this.height - this.backGlowOffset;\r\n            innerQuadModel.parent = innerQuadMesh;\r\n\r\n            if (this._innerQuadMaterial) {\r\n                innerQuadModel.material = this._innerQuadMaterial;\r\n            }\r\n\r\n            this._innerQuad = innerQuadModel;\r\n        });\r\n\r\n        return innerQuadMesh;\r\n    }\r\n\r\n    private _createBackGlow(scene: Scene) {\r\n        if (this.isToggleButton) {\r\n            return;\r\n        }\r\n\r\n        const backGlowMesh = CreateBox(`${this.name}_backGlow`, {}, scene);\r\n        backGlowMesh.isPickable = false;\r\n        backGlowMesh.visibility = 0;\r\n        backGlowMesh.scaling.z = this.flatPlaneDepth;\r\n        backGlowMesh.position.z += this.backPlateDepth / 2 - this.flatPlaneDepth * 2;\r\n\r\n        SceneLoader.ImportMeshAsync(undefined, TouchHolographicButton.MRTK_ASSET_BASE_URL, TouchHolographicButton.BACKGLOW_MODEL_FILENAME, scene).then((result) => {\r\n            const backGlowModel = result.meshes[1];\r\n            backGlowModel.name = `${this.name}_backGlow`;\r\n            backGlowModel.isPickable = false;\r\n            backGlowModel.scaling.x = this.width - this.backGlowOffset;\r\n            backGlowModel.scaling.y = this.height - this.backGlowOffset;\r\n            backGlowModel.parent = backGlowMesh;\r\n\r\n            if (this._backGlowMaterial) {\r\n                backGlowModel.material = this._backGlowMaterial;\r\n            }\r\n\r\n            this._backGlow = backGlowModel;\r\n        });\r\n\r\n        return backGlowMesh;\r\n    }\r\n\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        this._plateMaterial.emissiveTexture = facadeTexture;\r\n        this._plateMaterial.opacityTexture = facadeTexture;\r\n        this._plateMaterial.diffuseColor = this.plateMaterialColor;\r\n    }\r\n\r\n    private _performClickAnimation() {\r\n        const frameRate = 60;\r\n        const animationGroup = new AnimationGroup(\"Click Animation Group\");\r\n\r\n        const animations = [\r\n            {\r\n                name: \"backGlowMotion\",\r\n                mesh: this._backGlow,\r\n                property: \"material.motion\",\r\n                keys: [\r\n                    {\r\n                        frame: 0,\r\n                        values: [0, 0, 0],\r\n                    },\r\n                    {\r\n                        frame: 20,\r\n                        values: [1, 0.0144, 0.0144],\r\n                    },\r\n                    {\r\n                        frame: 40,\r\n                        values: [0.0027713229489760476, 0, 0],\r\n                    },\r\n                    {\r\n                        frame: 45,\r\n                        values: [0.0027713229489760476],\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                name: \"_collisionPlateZSlide\",\r\n                mesh: this._collisionPlate,\r\n                property: \"position.z\",\r\n                keys: [\r\n                    {\r\n                        frame: 0,\r\n                        values: [0.0, 0.0, 0.0],\r\n                    },\r\n                    {\r\n                        frame: 20,\r\n                        values: [Vector3.Forward(this._collisionPlate._scene.useRightHandedSystem).scale(this.frontPlateDepth / 2).z, 0.0, 0.0],\r\n                    },\r\n                    {\r\n                        frame: 40,\r\n                        values: [0.0, 0.005403332496794331],\r\n                    },\r\n                    {\r\n                        frame: 45,\r\n                        values: [0.0],\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                name: \"_collisionPlateZScale\",\r\n                mesh: this._collisionPlate,\r\n                property: \"scaling.z\",\r\n                keys: [\r\n                    {\r\n                        frame: 0,\r\n                        values: [this.frontPlateDepth, 0.0, 0.0],\r\n                    },\r\n                    {\r\n                        frame: 20,\r\n                        values: [this.backPlateDepth, 0.0, 0.0],\r\n                    },\r\n                    {\r\n                        frame: 40,\r\n                        values: [this.frontPlateDepth, 0.0054],\r\n                    },\r\n                    {\r\n                        frame: 45,\r\n                        values: [this.frontPlateDepth],\r\n                    },\r\n                ],\r\n            },\r\n        ];\r\n\r\n        for (const animation of animations) {\r\n            const anim = new Animation(animation.name, animation.property, frameRate, Animation.ANIMATIONTYPE_FLOAT, Animation.ANIMATIONLOOPMODE_CYCLE);\r\n            const animkeyFrames = [];\r\n\r\n            for (const key of animation.keys) {\r\n                animkeyFrames.push({\r\n                    frame: key.frame,\r\n                    value: key.values[0],\r\n                    inTangent: key.values[1],\r\n                    outTangent: key.values[2],\r\n                    interpolation: key.values[3],\r\n                });\r\n            }\r\n\r\n            anim.setKeys(animkeyFrames);\r\n\r\n            if (!animation.mesh) {\r\n                continue;\r\n            }\r\n\r\n            animationGroup.addTargetedAnimation(anim, animation.mesh);\r\n        }\r\n\r\n        animationGroup.normalize(0, 45);\r\n        animationGroup.speedRatio = 1;\r\n\r\n        animationGroup.play();\r\n    }\r\n\r\n    private _performEnterExitAnimation(speedRatio: number) {\r\n        const frameRate = 60;\r\n        const animationGroup = new AnimationGroup(\"Enter Exit Animation Group\");\r\n\r\n        const animations = [\r\n            {\r\n                name: \"frontPlateFadeOut\",\r\n                mesh: this._frontPlate,\r\n                property: \"material.fadeOut\",\r\n                keys: [\r\n                    {\r\n                        frame: 0,\r\n                        values: [0, 0, 0.025045314830017686, 0],\r\n                    },\r\n                    {\r\n                        frame: 40,\r\n                        values: [1.00205599570012, 0.025045314830017686, 0, 0],\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                name: \"textPlateZSlide\",\r\n                mesh: this._textPlate,\r\n                property: \"position.z\",\r\n                keys: [\r\n                    {\r\n                        frame: 0,\r\n                        values: [0, 0.0, 0.0],\r\n                    },\r\n                    {\r\n                        frame: 40,\r\n                        values: [Vector3.Forward(this._textPlate._scene.useRightHandedSystem).scale(-0.15).z, 0.0, 0.0],\r\n                    },\r\n                ],\r\n            },\r\n        ];\r\n\r\n        for (const animation of animations) {\r\n            const anim = new Animation(animation.name, animation.property, frameRate, Animation.ANIMATIONTYPE_FLOAT, Animation.ANIMATIONLOOPMODE_CYCLE);\r\n            const animkeyFrames = [];\r\n\r\n            for (const key of animation.keys) {\r\n                animkeyFrames.push({\r\n                    frame: key.frame,\r\n                    value: key.values[0],\r\n                    inTangent: key.values[1],\r\n                    outTangent: key.values[2],\r\n                    interpolation: key.values[3],\r\n                });\r\n            }\r\n\r\n            anim.setKeys(animkeyFrames);\r\n\r\n            if (!animation.mesh) {\r\n                continue;\r\n            }\r\n\r\n            animationGroup.addTargetedAnimation(anim, animation.mesh);\r\n        }\r\n\r\n        animationGroup.normalize(0, 45);\r\n        animationGroup.speedRatio = speedRatio;\r\n\r\n        animationGroup.play();\r\n    }\r\n\r\n    private _createBackMaterial(mesh: Mesh) {\r\n        this._backMaterial = this._backMaterial ?? new MRDLBackplateMaterial(this.name + \"backPlateMaterial\", mesh.getScene());\r\n        this._backMaterial.absoluteSizes = true;\r\n        this._backMaterial.radius = this.radius;\r\n        this._backMaterial.lineWidth = 0.02;\r\n    }\r\n\r\n    private _createFrontMaterial(mesh: Mesh) {\r\n        this._frontMaterial = this._frontMaterial ?? new MRDLFrontplateMaterial(this.name + \"Front Material\", mesh.getScene());\r\n        this.frontMaterial.radius = this.innerQuadRadius;\r\n        this.frontMaterial.fadeOut = 0.0;\r\n    }\r\n\r\n    private _createBackGlowMaterial(mesh: Mesh) {\r\n        const glowRadius = this.radius + 0.04;\r\n        this._backGlowMaterial = this._backGlowMaterial ?? new MRDLBackglowMaterial(this.name + \"Back Glow Material\", mesh.getScene());\r\n        this._backGlowMaterial.bevelRadius = glowRadius;\r\n        this._backGlowMaterial.lineWidth = glowRadius;\r\n        this._backGlowMaterial.motion = 0.0;\r\n    }\r\n\r\n    private _createInnerQuadMaterial(mesh: Mesh) {\r\n        this._innerQuadMaterial = this._innerQuadMaterial ?? new MRDLInnerquadMaterial(\"inner_quad\", mesh.getScene());\r\n        this._innerQuadMaterial.radius = this.innerQuadRadius;\r\n\r\n        if (this.isToggleButton) {\r\n            this._innerQuadMaterial.color = this.innerQuadColor;\r\n        }\r\n    }\r\n\r\n    private _createPlateMaterial(mesh: Mesh) {\r\n        this._plateMaterial = this._plateMaterial ?? new StandardMaterial(this.name + \"Plate Material\", mesh.getScene());\r\n        this._plateMaterial.specularColor = Color3.Black();\r\n    }\r\n\r\n    protected _onToggle(newState: boolean) {\r\n        super._onToggle(newState);\r\n    }\r\n\r\n    protected _affectMaterial(mesh: Mesh) {\r\n        if (this._shareMaterials) {\r\n            // Back\r\n            if (!this._host._touchSharedMaterials[\"mrdlBackplateMaterial\"]) {\r\n                this._createBackMaterial(mesh);\r\n                this._host._touchSharedMaterials[\"mrdlBackplateMaterial\"] = this._backMaterial;\r\n            } else {\r\n                this._backMaterial = this._host._touchSharedMaterials[\"mrdlBackplateMaterial\"] as MRDLBackplateMaterial;\r\n            }\r\n\r\n            // Front\r\n            if (!this._host._touchSharedMaterials[\"mrdlFrontplateMaterial\"]) {\r\n                this._createFrontMaterial(mesh);\r\n                this._host._touchSharedMaterials[\"mrdlFrontplateMaterial\"] = this._frontMaterial;\r\n            } else {\r\n                this._frontMaterial = this._host._touchSharedMaterials[\"mrdlFrontplateMaterial\"] as MRDLFrontplateMaterial;\r\n            }\r\n\r\n            // Back glow\r\n            if (!this._host._touchSharedMaterials[\"mrdlBackglowMaterial\"]) {\r\n                this._createBackGlowMaterial(mesh);\r\n                this._host._touchSharedMaterials[\"mrdlBackglowMaterial\"] = this._backGlowMaterial;\r\n            } else {\r\n                this._backGlowMaterial = this._host._touchSharedMaterials[\"mrdlBackglowMaterial\"] as MRDLBackglowMaterial;\r\n            }\r\n\r\n            // Inner quad\r\n            if (!this._host._touchSharedMaterials[\"mrdlInnerQuadMaterial\"]) {\r\n                this._createInnerQuadMaterial(mesh);\r\n                this._host._touchSharedMaterials[\"mrdlInnerQuadMaterial\"] = this._innerQuadMaterial;\r\n            } else {\r\n                this._innerQuadMaterial = this._host._touchSharedMaterials[\"mrdlInnerQuadMaterial\"] as MRDLInnerquadMaterial;\r\n            }\r\n        } else {\r\n            this._createBackMaterial(mesh);\r\n            this._createFrontMaterial(mesh);\r\n            this._createBackGlowMaterial(mesh);\r\n            this._createInnerQuadMaterial(mesh);\r\n        }\r\n\r\n        this._createPlateMaterial(mesh);\r\n        this._backPlate.material = this._backMaterial;\r\n        this._textPlate.material = this._plateMaterial;\r\n\r\n        if (!this._isBackplateVisible) {\r\n            this._backPlate.visibility = 0;\r\n        }\r\n\r\n        if (this._frontPlate) {\r\n            this._frontPlate.material = this._frontMaterial;\r\n        }\r\n\r\n        if (this._backGlow) {\r\n            this._backGlow.material = this._backGlowMaterial;\r\n        }\r\n\r\n        if (this._innerQuad) {\r\n            this._innerQuad.material = this._innerQuadMaterial;\r\n        }\r\n\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose(); // will dispose main mesh ie. back plate\r\n\r\n        this._disposeTooltip();\r\n        this.onPointerClickObservable.remove(this._pointerClickObserver);\r\n        this.onPointerEnterObservable.remove(this._pointerEnterObserver);\r\n        this.onPointerOutObservable.remove(this._pointerOutObserver);\r\n        this.onToggleObservable.remove(this._toggleObserver);\r\n\r\n        if (!this.shareMaterials) {\r\n            this._backMaterial.dispose();\r\n            this._frontMaterial.dispose();\r\n            this._plateMaterial.dispose();\r\n            this._backGlowMaterial.dispose();\r\n            this._innerQuadMaterial.dispose();\r\n\r\n            if (this._pickedPointObserver) {\r\n                this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n                this._pickedPointObserver = null;\r\n            }\r\n        }\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport type { PointerInfo } from \"core/Events/pointerEvents\";\r\nimport { PointerEventTypes } from \"core/Events/pointerEvents\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport { HemisphericLight } from \"core/Lights/hemisphericLight\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { UtilityLayerRenderer } from \"core/Rendering/utilityLayerRenderer\";\r\nimport { EngineStore } from \"core/Engines/engineStore\";\r\nimport type { IDisposable, Scene } from \"core/scene\";\r\n\r\nimport { Container3D } from \"./controls/container3D\";\r\nimport type { Control3D } from \"./controls/control3D\";\r\nimport type { IPointerEvent } from \"core/Events/deviceInputEvents\";\r\n\r\n/**\r\n * Class used to manage 3D user interface\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui3D\r\n */\r\nexport class GUI3DManager implements IDisposable {\r\n    private _scene: Scene;\r\n    private _sceneDisposeObserver: Nullable<Observer<Scene>>;\r\n    private _utilityLayer: Nullable<UtilityLayerRenderer>;\r\n    private _rootContainer: Container3D;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _pointerOutObserver: Nullable<Observer<number>>;\r\n    private _customControlScaling = 1.0;\r\n    /** @internal */\r\n    public _lastPickedControl: Control3D;\r\n    /** @internal */\r\n    public _lastControlOver: { [pointerId: number]: Control3D } = {};\r\n    /** @internal */\r\n    public _lastControlDown: { [pointerId: number]: Control3D } = {};\r\n\r\n    protected static MRTK_REALISTIC_SCALING: number = 0.032;\r\n\r\n    /**\r\n     * Observable raised when the point picked by the pointer events changed\r\n     */\r\n    public onPickedPointChangedObservable = new Observable<Nullable<Vector3>>();\r\n\r\n    /**\r\n     * Observable raised when a picking happens\r\n     */\r\n    public onPickingObservable = new Observable<Nullable<AbstractMesh>>();\r\n\r\n    // Shared resources\r\n    /** @internal */\r\n    public _sharedMaterials: { [key: string]: Material } = {};\r\n\r\n    /** @internal */\r\n    public _touchSharedMaterials: { [key: string]: Material } = {};\r\n\r\n    /** Gets the hosting scene */\r\n    public get scene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /** Gets associated utility layer */\r\n    public get utilityLayer(): Nullable<UtilityLayerRenderer> {\r\n        return this._utilityLayer;\r\n    }\r\n\r\n    /** Gets the scaling for all UI elements owned by this manager */\r\n    public get controlScaling() {\r\n        return this._customControlScaling;\r\n    }\r\n\r\n    /** Sets the scaling adjustment for all UI elements owned by this manager */\r\n    public set controlScaling(newScale: number) {\r\n        if (this._customControlScaling !== newScale && newScale > 0) {\r\n            const scaleRatio = newScale / this._customControlScaling;\r\n            this._customControlScaling = newScale;\r\n\r\n            this._rootContainer.children.forEach((control: Control3D) => {\r\n                control.scaling.scaleInPlace(scaleRatio);\r\n\r\n                if (newScale !== 1) {\r\n                    control._isScaledByManager = true;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /** Gets if controls attached to this manager are realistically sized, based on the fact that 1 unit length is 1 meter */\r\n    public get useRealisticScaling() {\r\n        return this.controlScaling === GUI3DManager.MRTK_REALISTIC_SCALING;\r\n    }\r\n\r\n    /** Sets if controls attached to this manager are realistically sized, based on the fact that 1 unit length is 1 meter */\r\n    public set useRealisticScaling(newValue: boolean) {\r\n        this.controlScaling = newValue ? GUI3DManager.MRTK_REALISTIC_SCALING : 1;\r\n    }\r\n\r\n    /**\r\n     * Creates a new GUI3DManager\r\n     * @param scene\r\n     */\r\n    public constructor(scene?: Scene) {\r\n        this._scene = scene || EngineStore.LastCreatedScene!;\r\n        this._sceneDisposeObserver = this._scene.onDisposeObservable.add(() => {\r\n            this._sceneDisposeObserver = null;\r\n            this._utilityLayer = null;\r\n            this.dispose();\r\n        });\r\n\r\n        this._utilityLayer = UtilityLayerRenderer._CreateDefaultUtilityLayerFromScene(this._scene);\r\n        this._utilityLayer.onlyCheckPointerDownEvents = false;\r\n        this._utilityLayer.pickUtilitySceneFirst = false;\r\n        this._utilityLayer.mainSceneTrackerPredicate = (mesh: Nullable<AbstractMesh>) => {\r\n            return mesh && mesh.reservedDataStore?.GUI3D?.control?._node;\r\n        };\r\n\r\n        // Root\r\n        this._rootContainer = new Container3D(\"RootContainer\");\r\n        this._rootContainer._host = this;\r\n        const utilityLayerScene = this._utilityLayer.utilityLayerScene;\r\n\r\n        // Events\r\n        this._pointerOutObserver = this._utilityLayer.onPointerOutObservable.add((pointerId) => {\r\n            this._handlePointerOut(pointerId, true);\r\n        });\r\n\r\n        this._pointerObserver = utilityLayerScene.onPointerObservable.add((pi) => {\r\n            this._doPicking(pi);\r\n        });\r\n\r\n        // Scene\r\n        this._utilityLayer.utilityLayerScene.autoClear = false;\r\n        this._utilityLayer.utilityLayerScene.autoClearDepthAndStencil = false;\r\n        new HemisphericLight(\"hemi\", Vector3.Up(), this._utilityLayer.utilityLayerScene);\r\n    }\r\n\r\n    private _handlePointerOut(pointerId: number, isPointerUp: boolean) {\r\n        const previousControlOver = this._lastControlOver[pointerId];\r\n        if (previousControlOver) {\r\n            previousControlOver._onPointerOut(previousControlOver);\r\n            delete this._lastControlOver[pointerId];\r\n        }\r\n\r\n        if (isPointerUp) {\r\n            if (this._lastControlDown[pointerId]) {\r\n                this._lastControlDown[pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerId];\r\n            }\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.notifyObservers(null);\r\n    }\r\n\r\n    private _doPicking(pi: PointerInfo): boolean {\r\n        if (!this._utilityLayer || !this._utilityLayer.shouldRender || !this._utilityLayer.utilityLayerScene.activeCamera) {\r\n            return false;\r\n        }\r\n\r\n        const pointerEvent = <IPointerEvent>pi.event;\r\n\r\n        const pointerId = pointerEvent.pointerId || 0;\r\n        const buttonIndex = pointerEvent.button;\r\n\r\n        const pickingInfo = pi.pickInfo;\r\n        if (pickingInfo) {\r\n            this.onPickingObservable.notifyObservers(pickingInfo.pickedMesh);\r\n        }\r\n\r\n        if (!pickingInfo || !pickingInfo.hit) {\r\n            this._handlePointerOut(pointerId, pi.type === PointerEventTypes.POINTERUP);\r\n            return false;\r\n        }\r\n\r\n        if (pickingInfo.pickedPoint) {\r\n            this.onPickedPointChangedObservable.notifyObservers(pickingInfo.pickedPoint);\r\n        }\r\n\r\n        const control = <Control3D>pickingInfo.pickedMesh!.reservedDataStore?.GUI3D?.control;\r\n        if (!!control && !control._processObservables(pi.type, pickingInfo.pickedPoint!, pickingInfo.originMesh?.position || null, pointerId, buttonIndex)) {\r\n            if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        }\r\n\r\n        if (pi.type === PointerEventTypes.POINTERUP) {\r\n            if (this._lastControlDown[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerEvent.pointerId];\r\n            }\r\n\r\n            if (pointerEvent.pointerType === \"touch\" || (pointerEvent.pointerType === \"xr\" && this._scene.getEngine().hostInformation.isMobile)) {\r\n                this._handlePointerOut(pointerId, false);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container\r\n     */\r\n    public get rootContainer(): Container3D {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the root child list\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the root child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._rootContainer.containsControl(control);\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the root child list\r\n     * @param control defines the control to add\r\n     * @returns the current manager\r\n     */\r\n    public addControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.addControl(control);\r\n        if (this._customControlScaling !== 1) {\r\n            control.scaling.scaleInPlace(this._customControlScaling);\r\n            control._isScaledByManager = true;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root child list\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.removeControl(control);\r\n        if (control._isScaledByManager) {\r\n            control.scaling.scaleInPlace(1 / this._customControlScaling);\r\n            control._isScaledByManager = false;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this._rootContainer.dispose();\r\n\r\n        for (const materialName in this._sharedMaterials) {\r\n            if (!Object.prototype.hasOwnProperty.call(this._sharedMaterials, materialName)) {\r\n                continue;\r\n            }\r\n\r\n            this._sharedMaterials[materialName].dispose();\r\n        }\r\n\r\n        this._sharedMaterials = {};\r\n\r\n        for (const materialName in this._touchSharedMaterials) {\r\n            if (!Object.prototype.hasOwnProperty.call(this._touchSharedMaterials, materialName)) {\r\n                continue;\r\n            }\r\n\r\n            this._touchSharedMaterials[materialName].dispose();\r\n        }\r\n\r\n        this._touchSharedMaterials = {};\r\n\r\n        if (this._pointerOutObserver && this._utilityLayer) {\r\n            this._utilityLayer.onPointerOutObservable.remove(this._pointerOutObserver);\r\n            this._pointerOutObserver = null;\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.clear();\r\n        this.onPickingObservable.clear();\r\n\r\n        const utilityLayerScene = this._utilityLayer ? this._utilityLayer.utilityLayerScene : null;\r\n\r\n        if (utilityLayerScene) {\r\n            if (this._pointerObserver) {\r\n                utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\r\n                this._pointerObserver = null;\r\n            }\r\n        }\r\n        if (this._scene) {\r\n            if (this._sceneDisposeObserver) {\r\n                this._scene.onDisposeObservable.remove(this._sceneDisposeObserver);\r\n                this._sceneDisposeObserver = null;\r\n            }\r\n        }\r\n\r\n        if (this._utilityLayer) {\r\n            this._utilityLayer.dispose();\r\n        }\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { Mesh } from \"core/Meshes/mesh\";\r\nimport type { ISceneLoaderPlugin, ISceneLoaderPluginExtensions } from \"core/Loading/sceneLoader\";\r\nimport { SceneLoader } from \"core/Loading/sceneLoader\";\r\nimport { AssetContainer } from \"core/assetContainer\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\n/**\r\n * STL file type loader.\r\n * This is a babylon scene loader plugin.\r\n */\r\nexport class STLFileLoader implements ISceneLoaderPlugin {\r\n    /** @internal */\r\n    public solidPattern = /solid (\\S*)([\\S\\s]*?)endsolid[ ]*(\\S*)/g;\r\n\r\n    /** @internal */\r\n    public facetsPattern = /facet([\\s\\S]*?)endfacet/g;\r\n    /** @internal */\r\n    public normalPattern = /normal[\\s]+([-+]?[0-9]+\\.?[0-9]*([eE][-+]?[0-9]+)?)+[\\s]+([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)+[\\s]+([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)+/g;\r\n    /** @internal */\r\n    public vertexPattern = /vertex[\\s]+([-+]?[0-9]+\\.?[0-9]*([eE][-+]?[0-9]+)?)+[\\s]+([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)+[\\s]+([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)+/g;\r\n\r\n    /**\r\n     * Defines the name of the plugin.\r\n     */\r\n    public name = \"stl\";\r\n\r\n    /**\r\n     * Defines the extensions the stl loader is able to load.\r\n     * force data to come in as an ArrayBuffer\r\n     * we'll convert to string if it looks like it's an ASCII .stl\r\n     */\r\n    public extensions: ISceneLoaderPluginExtensions = {\r\n        \".stl\": { isBinary: true },\r\n    };\r\n\r\n    /**\r\n     * Defines if Y and Z axes are swapped or not when loading an STL file.\r\n     * The default is false to maintain backward compatibility. When set to\r\n     * true, coordinates from the STL file are used without change.\r\n     */\r\n    public static DO_NOT_ALTER_FILE_COORDINATES = false;\r\n\r\n    /**\r\n     * Import meshes into a scene.\r\n     * @param meshesNames An array of mesh names, a single mesh name, or empty string for all meshes that filter what meshes are imported\r\n     * @param scene The scene to import into\r\n     * @param data The data to import\r\n     * @param rootUrl The root url for scene and resources\r\n     * @param meshes The meshes array to import into\r\n     * @returns True if successful or false otherwise\r\n     */\r\n    public importMesh(meshesNames: any, scene: Scene, data: any, rootUrl: string, meshes: Nullable<AbstractMesh[]>): boolean {\r\n        let matches;\r\n\r\n        if (typeof data !== \"string\") {\r\n            if (this._isBinary(data)) {\r\n                // binary .stl\r\n                const babylonMesh = new Mesh(\"stlmesh\", scene);\r\n                this._parseBinary(babylonMesh, data);\r\n                if (meshes) {\r\n                    meshes.push(babylonMesh);\r\n                }\r\n                return true;\r\n            }\r\n\r\n            // ASCII .stl\r\n\r\n            // convert to string\r\n            const array_buffer = new Uint8Array(data);\r\n            let str = \"\";\r\n            for (let i = 0; i < data.byteLength; i++) {\r\n                str += String.fromCharCode(array_buffer[i]); // implicitly assumes little-endian\r\n            }\r\n            data = str;\r\n        }\r\n\r\n        //if arrived here, data is a string, containing the STLA data.\r\n\r\n        while ((matches = this.solidPattern.exec(data))) {\r\n            let meshName = matches[1];\r\n            const meshNameFromEnd = matches[3];\r\n            if (meshNameFromEnd && meshName != meshNameFromEnd) {\r\n                Tools.Error(\"Error in STL, solid name != endsolid name\");\r\n                return false;\r\n            }\r\n\r\n            // check meshesNames\r\n            if (meshesNames && meshName) {\r\n                if (meshesNames instanceof Array) {\r\n                    if (!meshesNames.indexOf(meshName)) {\r\n                        continue;\r\n                    }\r\n                } else {\r\n                    if (meshName !== meshesNames) {\r\n                        continue;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // stl mesh name can be empty as well\r\n            meshName = meshName || \"stlmesh\";\r\n\r\n            const babylonMesh = new Mesh(meshName, scene);\r\n            this._parseASCII(babylonMesh, matches[2]);\r\n            if (meshes) {\r\n                meshes.push(babylonMesh);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Load into a scene.\r\n     * @param scene The scene to load into\r\n     * @param data The data to import\r\n     * @param rootUrl The root url for scene and resources\r\n     * @returns true if successful or false otherwise\r\n     */\r\n    public load(scene: Scene, data: any, rootUrl: string): boolean {\r\n        const result = this.importMesh(null, scene, data, rootUrl, null);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Load into an asset container.\r\n     * @param scene The scene to load into\r\n     * @param data The data to import\r\n     * @param rootUrl The root url for scene and resources\r\n     * @returns The loaded asset container\r\n     */\r\n    public loadAssetContainer(scene: Scene, data: string, rootUrl: string): AssetContainer {\r\n        const container = new AssetContainer(scene);\r\n        scene._blockEntityCollection = true;\r\n        this.importMesh(null, scene, data, rootUrl, container.meshes);\r\n        scene._blockEntityCollection = false;\r\n        return container;\r\n    }\r\n\r\n    private _isBinary(data: any) {\r\n        // check if file size is correct for binary stl\r\n        const reader = new DataView(data);\r\n\r\n        // A Binary STL header is 80 bytes, if the data size is not great than\r\n        // that then it's not a binary STL.\r\n        if (reader.byteLength <= 80) {\r\n            return false;\r\n        }\r\n\r\n        const faceSize = (32 / 8) * 3 + (32 / 8) * 3 * 3 + 16 / 8;\r\n        const nFaces = reader.getUint32(80, true);\r\n\r\n        if (80 + 32 / 8 + nFaces * faceSize === reader.byteLength) {\r\n            return true;\r\n        }\r\n\r\n        // US-ASCII begin with 's', 'o', 'l', 'i', 'd'\r\n        const ascii = [115, 111, 108, 105, 100];\r\n        for (let off = 0; off < 5; off++) {\r\n            if (reader.getUint8(off) !== ascii[off]) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _parseBinary(mesh: Mesh, data: ArrayBuffer) {\r\n        const reader = new DataView(data);\r\n        const faces = reader.getUint32(80, true);\r\n\r\n        const dataOffset = 84;\r\n        const faceLength = 12 * 4 + 2;\r\n\r\n        let offset = 0;\r\n\r\n        const positions = new Float32Array(faces * 3 * 3);\r\n        const normals = new Float32Array(faces * 3 * 3);\r\n        const indices = new Uint32Array(faces * 3);\r\n        let indicesCount = 0;\r\n\r\n        for (let face = 0; face < faces; face++) {\r\n            const start = dataOffset + face * faceLength;\r\n            const normalX = reader.getFloat32(start, true);\r\n            const normalY = reader.getFloat32(start + 4, true);\r\n            const normalZ = reader.getFloat32(start + 8, true);\r\n\r\n            for (let i = 1; i <= 3; i++) {\r\n                const vertexstart = start + i * 12;\r\n\r\n                // ordering is intentional to match ascii import\r\n                positions[offset] = reader.getFloat32(vertexstart, true);\r\n                normals[offset] = normalX;\r\n\r\n                if (!STLFileLoader.DO_NOT_ALTER_FILE_COORDINATES) {\r\n                    positions[offset + 2] = reader.getFloat32(vertexstart + 4, true);\r\n                    positions[offset + 1] = reader.getFloat32(vertexstart + 8, true);\r\n\r\n                    normals[offset + 2] = normalY;\r\n                    normals[offset + 1] = normalZ;\r\n                } else {\r\n                    positions[offset + 1] = reader.getFloat32(vertexstart + 4, true);\r\n                    positions[offset + 2] = reader.getFloat32(vertexstart + 8, true);\r\n\r\n                    normals[offset + 1] = normalY;\r\n                    normals[offset + 2] = normalZ;\r\n                }\r\n\r\n                offset += 3;\r\n            }\r\n\r\n            if (STLFileLoader.DO_NOT_ALTER_FILE_COORDINATES) {\r\n                indices[indicesCount] = indicesCount;\r\n                indices[indicesCount + 1] = indicesCount + 2;\r\n                indices[indicesCount + 2] = indicesCount + 1;\r\n                indicesCount += 3;\r\n            } else {\r\n                indices[indicesCount] = indicesCount++;\r\n                indices[indicesCount] = indicesCount++;\r\n                indices[indicesCount] = indicesCount++;\r\n            }\r\n        }\r\n\r\n        mesh.setVerticesData(VertexBuffer.PositionKind, positions);\r\n        mesh.setVerticesData(VertexBuffer.NormalKind, normals);\r\n        mesh.setIndices(indices);\r\n        mesh.computeWorldMatrix(true);\r\n    }\r\n\r\n    private _parseASCII(mesh: Mesh, solidData: string) {\r\n        const positions = [];\r\n        const normals = [];\r\n        const indices = [];\r\n        let indicesCount = 0;\r\n\r\n        //load facets, ignoring loop as the standard doesn't define it can contain more than vertices\r\n        let matches;\r\n        while ((matches = this.facetsPattern.exec(solidData))) {\r\n            const facet = matches[1];\r\n            //one normal per face\r\n            const normalMatches = this.normalPattern.exec(facet);\r\n            this.normalPattern.lastIndex = 0;\r\n            if (!normalMatches) {\r\n                continue;\r\n            }\r\n            const normal = [Number(normalMatches[1]), Number(normalMatches[5]), Number(normalMatches[3])];\r\n\r\n            let vertexMatch;\r\n            while ((vertexMatch = this.vertexPattern.exec(facet))) {\r\n                if (!STLFileLoader.DO_NOT_ALTER_FILE_COORDINATES) {\r\n                    positions.push(Number(vertexMatch[1]), Number(vertexMatch[5]), Number(vertexMatch[3]));\r\n                    normals.push(normal[0], normal[1], normal[2]);\r\n                } else {\r\n                    positions.push(Number(vertexMatch[1]), Number(vertexMatch[3]), Number(vertexMatch[5]));\r\n\r\n                    // Flipping the second and third component because inverted\r\n                    // when normal was declared.\r\n                    normals.push(normal[0], normal[2], normal[1]);\r\n                }\r\n            }\r\n            if (STLFileLoader.DO_NOT_ALTER_FILE_COORDINATES) {\r\n                indices.push(indicesCount, indicesCount + 2, indicesCount + 1);\r\n                indicesCount += 3;\r\n            } else {\r\n                indices.push(indicesCount++, indicesCount++, indicesCount++);\r\n            }\r\n            this.vertexPattern.lastIndex = 0;\r\n        }\r\n\r\n        this.facetsPattern.lastIndex = 0;\r\n        mesh.setVerticesData(VertexBuffer.PositionKind, positions);\r\n        mesh.setVerticesData(VertexBuffer.NormalKind, normals);\r\n        mesh.setIndices(indices);\r\n        mesh.computeWorldMatrix(true);\r\n    }\r\n}\r\n\r\nif (SceneLoader) {\r\n    SceneLoader.RegisterPlugin(new STLFileLoader());\r\n}\r\n"],"names":["ValueAndUnit","value","unit","UNITMODE_PIXEL","negativeValueAllowed","_value","_unit","ignoreAdaptiveScaling","onChangedObservable","this","_originalUnit","isPercentage","UNITMODE_PERCENTAGE","isPixel","internalValue","notifyObservers","getValueInPixel","host","refValue","getValue","updateInPlace","width","height","idealWidth","Math","ceil","getSize","idealHeight","useSmallestIdeal","window","innerWidth","innerHeight","toString","decimals","percentage","toFixed","pixels","fromString","source","match","_Regex","exec","length","sourceValue","parseFloat","sourceUnit","_UNITMODE_PERCENTAGE","_UNITMODE_PIXEL","tmpRect","tmpRect2","tmpV1","tmpV2","Measure","left","top","copyFrom","other","copyFromFloats","CombineToRef","a","b","result","min","right","max","bottom","addAndTransformToRef","transform","addX","addY","addWidth","addHeight","Number","MAX_VALUE","i","transformCoordinates","x","y","floor","transformToRef","isEqualsTo","Empty","Vector2WithInfo","buttonIndex","super","Matrix2D","constructor","m00","m01","m10","m11","m20","m21","m","Float32Array","fromValues","determinant","invertToRef","l0","l1","l2","l3","l4","l5","det","detDiv","det4","det5","multiplyToRef","r0","r1","r2","r3","r4","r5","Identity","IdentityToRef","TranslationToRef","ScalingToRef","RotationToRef","angle","s","sin","c","cos","ComposeToRef","tx","ty","scaleX","scaleY","parentMatrix","_TempPreTranslationMatrix","_TempScalingMatrix","_TempRotationMatrix","_TempPostTranslationMatrix","_TempCompose0","_TempCompose1","_TempCompose2","MathTools","Round","precision","DefaultRoundingPrecision","round","Control","isReadOnly","_isReadOnly","transformedMeasure","_evaluatedMeasure","clipChildren","_clipChildren","clipContent","_clipContent","shadowOffsetX","_shadowOffsetX","_markAsDirty","shadowOffsetY","_shadowOffsetY","shadowBlur","_shadowBlur","_previousShadowBlur","shadowColor","_shadowColor","typeName","_getTypeName","getClassName","accessibilityTag","_accessibilityTag","onAccessibilityTagChangedObservable","_host","fontOffset","_fontOffset","offset","alpha","_alpha","_alphaSet","highlightLineWidth","_highlightLineWidth","isHighlighted","_isHighlighted","highlightColor","_highlightColor","_scaleX","_markMatrixAsDirty","_scaleY","rotation","_rotation","transformCenterY","_transformCenterY","transformCenterX","_transformCenterX","horizontalAlignment","_horizontalAlignment","verticalAlignment","_verticalAlignment","fixedRatio","_fixedRatio","fixedRatioMasterIsWidth","_fixedRatioMasterIsWidth","_width","widthInPixels","_cachedParentMeasure","isNaN","_height","heightInPixels","fontFamily","_fontFamily","_resetFontCache","fontStyle","_fontStyle","fontWeight","_fontWeight","style","_style","remove","_styleObserver","add","_isFontSizeInPercentage","_fontSize","fontSizeInPixels","fontSizeToUse","_tempParentMeasure","fontSize","color","_color","gradient","_gradient","zIndex","_zIndex","parent","_reOrderControl","notRenderable","_doNotRender","isVisible","_isVisible","onIsVisibleChangedObservable","isDirty","_isDirty","linkedMesh","_linkedMesh","descendantsOnlyPadding","_descendantsOnlyPadding","paddingLeft","_paddingLeft","paddingLeftInPixels","_paddingLeftInPixels","paddingRight","_paddingRight","paddingRightInPixels","_paddingRightInPixels","paddingTop","_paddingTop","paddingTopInPixels","_paddingTopInPixels","paddingBottom","_paddingBottom","paddingBottomInPixels","_paddingBottomInPixels","_left","leftInPixels","_top","topInPixels","linkOffsetX","_linkOffsetX","linkOffsetXInPixels","linkOffsetY","_linkOffsetY","linkOffsetYInPixels","centerX","_currentMeasure","centerY","isEnabled","_isEnabled","recursivelyFirePointerOut","control","pointer","_lastControlOver","_onPointerOut","undefined","children","forEach","disabledColor","_disabledColor","disabledColorItem","_disabledColorItem","name","_tempPaddingMeasure","HORIZONTAL_ALIGNMENT_CENTER","VERTICAL_ALIGNMENT_CENTER","_wasDirty","_prevCurrentMeasureTransformedIntoGlobalSpace","_transformMatrix","_invertTransformMatrix","_transformedPosition","Zero","_isMatrixDirty","_fontSet","_dummyVector2","_downCount","_enterCount","_downPointerIds","_evaluatedParentMeasure","_rebuildLayout","_customData","_isClipped","_automaticSize","metadata","isHitTestVisible","isPointerBlocker","isFocusInvisible","useBitmapCache","hoverCursor","onWheelObservable","onPointerMoveObservable","onPointerOutObservable","onPointerDownObservable","onPointerUpObservable","onPointerClickObservable","onPointerEnterObservable","onDirtyObservable","onBeforeDrawObservable","onAfterDrawObservable","onDisposeObservable","animations","_tmpMeasureA","getAscendantOfClass","className","markAsDirty","force","markAllAsDirty","_markAllAsDirty","isAscendant","container","getLocalCoordinates","globalCoordinates","getLocalCoordinatesToRef","getParentLocalCoordinates","moveToVector3","position","scene","_rootContainer","Error","HORIZONTAL_ALIGNMENT_LEFT","VERTICAL_ALIGNMENT_TOP","globalViewport","_getGlobalViewport","projectedPosition","Project","IdentityReadOnly","getTransformMatrix","_moveToProjectedPosition","z","getDescendantsToRef","results","directDescendantsOnly","predicate","getDescendants","Array","linkWithMesh","mesh","index","_linkedControls","indexOf","splice","push","setPadding","setPaddingInPixels","oldLeft","oldTop","parentMeasure","_processMeasures","getContext","newLeft","newTop","leftAndTopIgnoreAdaptiveScaling","abs","_offsetLeft","_offsetTop","_flagDescendantsAsMatrixDirty","_intersectsRect","rect","context","_transform","_computeAdditionalOffsetX","_computeAdditionalOffsetY","invalidateRect","useInvalidateRectOptimization","leftShadowOffset","rightShadowOffset","topShadowOffset","bottomShadowOffset","offsetX","offsetY","_font","_prepareFont","_link","uniqueId","getScene","getUniqueId","translate","rotate","scale","_cachedOffsetX","_cachedOffsetY","_renderHighlight","save","strokeStyle","lineWidth","_renderHighlightSpecific","restore","strokeRect","_getColor","getCanvasGradient","_applyStates","font","fillStyle","AllowAlphaInheritance","globalAlpha","renderToIntermediateTexture","_layout","_numLayoutCalls","rebuildCount","_evaluateClippingState","_preMeasure","_measure","_computeAlignment","_additionalProcessing","hasObservers","parentWidth","parentHeight","HORIZONTAL_ALIGNMENT_RIGHT","VERTICAL_ALIGNMENT_BOTTOM","_clipForChildren","_clip","invalidatedRectangle","beginPath","_ClipMeasure","intersection","clip","_render","_numRenderCalls","_cacheData","putImageData","_draw","getImageData","contains","_shouldBlockPointer","_processPicking","pi","type","pointerId","deltaX","deltaY","_processObservables","_onPointerMove","target","coordinates","_onPointerEnter","canNotify","_onPointerDown","rootContainer","_capturedPointerIds","event","_onPointerUp","notifyClick","canNotifyClick","delete","_forcePointerUp","key","_onWheelScroll","_onCanvasBlur","POINTERMOVE","previousControlOver","POINTERDOWN","_registerLastControlDown","_lastPickedControl","POINTERUP","_lastControlDown","POINTERWHEEL","_GetFontOffset","child","clone","serialization","serialize","cloned","Instantiate","parse","serializedObject","Parse","_parseFromContent","serializationObject","Serialize","AppendSerializedAnimations","animationIndex","parsedAnimation","internalClass","autoAnimate","beginAnimation","autoAnimateFrom","autoAnimateTo","autoAnimateLoop","autoAnimateSpeed","dispose","clear","removeControl","_HORIZONTAL_ALIGNMENT_LEFT","_HORIZONTAL_ALIGNMENT_RIGHT","_HORIZONTAL_ALIGNMENT_CENTER","_VERTICAL_ALIGNMENT_TOP","_VERTICAL_ALIGNMENT_BOTTOM","_VERTICAL_ALIGNMENT_CENTER","_FontHeightSizes","engine","LastCreatedEngine","getFontOffset","controlType","drawEllipse","arc","PI","closePath","isReady","AddHeader","TextWrapping","Container","_renderToIntermediateTexture","adaptHeightToChildren","_adaptHeightToChildren","adaptWidthToChildren","_adaptWidthToChildren","background","_background","backgroundGradient","_backgroundGradient","_children","_measureForChildren","_intermediateTexture","logLayoutCycleErrors","maxLayoutCycle","onControlAddedObservable","onControlRemovedObservable","_inverseTransformMatrix","_inverseMeasure","getChildByName","getChildByType","containsControl","addControl","clearControls","slice","_cleanControlAfterRemoval","wasAdded","_getBackgroundColor","_localDraw","fillRect","_beforeLayout","scaleTo","NEAREST_SAMPLINGMODE","TEXTUREFORMAT_RGBA","hasAlpha","computedWidth","computedHeight","_postMeasure","renderToIntermediateTextureThisDraw","contextToDrawTo","clearRect","drawImage","canvas","item","_changeCursor","childSerializationObject","childData","Rectangle","thickness","_thickness","cornerRadius","_cornerRadius","cornerRadiusX","cornerRadiusY","cornerRadiusZ","cornerRadiusW","_cachedRadius","additionalWidth","additionalHeight","_getRectangleFill","_drawRoundedRect","fill","stroke","moveTo","lineTo","TextBlock","lines","_lines","resizeToFit","_resizeToFit","textWrapping","_textWrapping","text","_text","onTextChangedObservable","textHorizontalAlignment","_textHorizontalAlignment","textVerticalAlignment","_textVerticalAlignment","lineSpacing","_lineSpacing","outlineWidth","_outlineWidth","underline","_underline","lineThrough","_lineThrough","applyOutlineToUnderline","_applyOutlineToUnderline","outlineColor","_outlineColor","wordDivider","_wordDivider","forceResizeWidth","_forceResizeWidth","Clip","onLinesReadyObservable","_linesTemp","_breakLines","maxLineWidth","line","newWidth","newHeight","_drawText","textWidth","strokeText","fillText","_drawLine","xFrom","yFrom","xTo","yTo","currentStroke","_renderLines","lineJoin","miterLimit","refWidth","refHeight","split","Ellipsis","_line","_parseLineEllipsis","WordWrap","_parseLineWordWrap","WordWrapEllipsis","_parseLineWordWrapEllipsis","_parseLine","_getTextMetricsWidth","measureText","_getCharsToRemove","lineLength","diff","charWidth","removeChars","characters","from","join","textMetrics","actualBoundingBoxLeft","actualBoundingBoxRight","words","wordSplittingFunction","n","testLine","testWidth","_computeHeightForLinesOf","lastLine","currentLine","linesToRemove","pop","rootY","ascent","descent","lineCount","computeExpectedHeight","createCanvas","Image","isLoaded","_loaded","detectPointerOnOpaqueOnly","_detectPointerOnOpaqueOnly","sliceLeft","_sliceLeft","sliceRight","_sliceRight","sliceTop","_sliceTop","sliceBottom","_sliceBottom","sourceLeft","_sourceLeft","sourceTop","_sourceTop","sourceWidth","_sourceWidth","sourceHeight","_sourceHeight","imageWidth","_imageWidth","imageHeight","_imageHeight","populateNinePatchSlicesFromImage","_populateNinePatchSlicesFromImage","_extractNinePatchSliceDataFromImage","isSVG","_isSVG","svgAttributesComputationCompleted","_svgAttributesComputationCompleted","autoScale","_autoScale","synchronizeSizeWithContent","stretch","_stretch","_rotate90","preserveProperties","_domImage","getEngine","dataUrl","toDataURL","rotatedImage","_cellId","_cellWidth","_cellHeight","_handleRotationForSVGImage","_imageDataCache","data","srcImage","dstImage","_rotate90SourceProperties","onSVGAttributesComputedObservable","addOnce","srcLeft","srcTop","srcWidth","domImage","srcHeight","dstLeft","dstTop","dstWidth","dstHeight","mult","_workingCanvas","imageData","_onImageLoaded","onload","onImageLoadedObservable","_source","ResetImageCache","SourceImgCache","_removeCacheUsage","get","timesUsed","_svgCheck","has","cachedData","img","loaded","waitingForLoadCallback","bind","createCanvasImage","set","waitingCallback","SetCorsBehavior","SetReferrerPolicyBehavior","referrerPolicy","src","SVGSVGElement","search","lastIndexOf","svgsrc","elemid","svgExist","document","body","querySelector","svgDoc","contentDocument","documentElement","vb","getAttribute","docwidth","docheight","getElementById","_getSVGAttribs","addEventListener","svgImage","createElement","appendChild","svgobj","elem","vb_width","vb_height","elem_bbox","getBBox","elem_matrix_a","elem_matrix_d","elem_matrix_e","elem_matrix_f","mainMatrix","baseVal","consolidate","matrix","d","e","f","cellWidth","cellHeight","cellId","url","STRETCH_FILL","STRETCH_NONE","STRETCH_UNIFORM","STRETCH_NINE_PATCH","STRETCH_EXTEND","_prepareWorkingCanvasForOpaqueDetection","_drawImage","sx","sy","sw","sh","tw","th","rowCount","naturalWidth","column","row","hRatio","vRatio","ratio","_renderNinePatch","leftWidth","topHeight","bottomHeight","rightWidth","centerWidth","centerHeight","targetCenterWidth","targetCenterHeight","centerLeftOffset","centerTopOffset","rightOffset","bottomOffset","Map","Button","image","_image","textBlock","_textBlock","delegatePickingToChildren","alphaStore","pointerEnterAnimation","pointerOutAnimation","pointerDownAnimation","pointerUpAnimation","textBlockName","imageName","CreateImageButton","imageUrl","iconImage","CreateImageOnlyButton","CreateSimpleButton","CreateImageWithCenterTextButton","StackPanel","isVertical","_isVertical","spacing","_spacing","_doNotTrackManualChanges","_manualWidth","_manualHeight","ignoreLayoutWarnings","stackWidth","stackHeight","childrenCount","Warn","panelWidthChanged","panelHeightChanged","previousHeight","previousWidth","manualWidth","manualHeight","Checkbox","checkSizeRatio","_checkSizeRatio","isChecked","_isChecked","onIsCheckedChangedObservable","actualWidth","actualHeight","offsetWidth","offsetHeight","AddCheckBoxWithHeader","title","onValueChanged","panel","checkbox","header","TextWrapper","_characters","txt","removePart","idxStart","idxEnd","insertTxt","newCharacters","charAt","idx","substr","temp","substring","to","isWord","rWord","InputText","maxWidth","_maxWidth","maxWidthInPixels","highligherOpacity","_highligherOpacity","onFocusSelectAll","_onFocusSelectAll","textHighlightColor","_textHighlightColor","margin","_margin","marginInPixels","autoStretchWidth","_autoStretchWidth","focusedBackground","_focusedBackground","focusedColor","_focusedColor","placeholderColor","_placeholderColor","placeholderText","_placeholderText","deadKey","_deadKey","flag","highlightedText","_highlightedText","addKey","_addKey","currentKey","_currentKey","_textWrapper","valueAsString","_textHasChanged","_isFocused","_blinkIsEven","_cursorOffset","_isTextHighlightOn","_startHighlightIndex","_endHighlightIndex","_cursorIndex","_isPointerDown","promptMessage","disableMobilePrompt","onBeforeKeyAddObservable","onFocusObservable","onBlurObservable","onTextHighlightObservable","onTextCopyObservable","onTextCutObservable","onTextPasteObservable","onKeyboardEventProcessedObservable","onBlur","_scrollLeft","clearTimeout","_blinkTimeout","unRegisterClipboardEvents","_onClipboardObserver","onClipboardObservable","_onPointerDblTapObserver","onPointerObservable","onFocus","_focusedBy","prompt","focusedControl","registerClipboardEvents","clipboardInfo","COPY","_onCopyText","CUT","_onCutText","PASTE","_onPasteText","pointerInfo","POINTERDOUBLETAP","_processDblClick","_selectAllText","focus","moveFocusToControl","blur","keepsFocusWith","_connectedVirtualKeyboard","processKey","keyCode","evt","ctrlKey","metaKey","preventDefault","isTextHighlightOn","deletePosition","shiftKey","insertPosition","_updateValueFromCursorIndex","moveLeft","moveRight","_clickedCoordinate","processKeyboard","ev","clipboardData","setData","types","getData","clipTextLeft","_beforeRenderText","_textWidth","marginWidth","availableWidth","textLeft","absoluteCursorPosition","currentSize","previousDist","cursorOffsetText","cursorOffsetWidth","cursorLeft","setTimeout","highlightCursorOffsetWidth","highlightCursorLeft","_capturingControl","pointerType","textWrapper","Grid","_cells","columnCount","_columnDefinitions","_rowDefinitions","_childControls","cells","getRowDefinition","getColumnDefinition","addRowDefinition","_rowDefinitionObservers","addColumnDefinition","_columnDefinitionObservers","setRowDefinition","current","setColumnDefinition","getChildrenAt","cell","getChildCellInfo","_tag","_removeCell","childIndex","_offsetCell","previousKey","removeColumnDefinition","removeRowDefinition","goodContainer","_getGridDefinitions","definitionCallback","widths","heights","lefts","tops","globalWidthPercentage","availableHeight","globalHeightPercentage","rowDefinition","columnDefinition","Object","prototype","hasOwnProperty","call","parseInt","columns","rows","tags","cd","rd","columnValue","rowValue","cellInfo","rowNumber","columnNumber","ColorPicker","equals","toHSVToRef","_tmpColor","_h","r","_s","g","_v","_Epsilon","onValueChangedObservable","size","Red","_pointerStartedOnSquare","_pointerStartedOnWheel","_squareLeft","_squareTop","_squareSize","_lastPointerDownId","_pointerIsDown","_updateSquareProps","radius","squareSize","sqrt","_drawGradientSquare","hueValue","lgh","createLinearGradient","addColorStop","lgv","_drawCircle","_createColorWheelCanvas","maxDistSq","innerRadius","minDistSq","distSq","dist","ang","atan2","HSVtoRGBToRef","alphaRatio","alphaAmount","maxAlpha","minAlpha","lowerRadius","upperRadius","wheelThickness","_colorWheelCanvas","cx","cy","_updateValueFromPointer","_isPointOnSquare","_isPointOnWheel","dx","dy","ShowPickerDialogAsync","advancedTexture","options","Promise","resolve","pickerWidth","pickerHeight","headerHeight","lastColor","swatchLimit","numSwatchesPerLine","drawerMaxRows","rawSwatchSize","gutterSize","colGutters","swatchSize","drawerMaxSize","containerSize","buttonColor","buttonBackgroundColor","buttonBackgroundHoverColor","buttonBackgroundClickColor","buttonDisabledColor","buttonDisabledBackgroundColor","luminanceLimitColor","FromHexString","luminanceLimit","iconColorDark","iconColorLight","buttonFontSize","butEdit","inputFieldLabels","inputTextBackgroundColor","inputTextColor","swatchNumber","swatchDrawer","butSave","lastVal","activeField","editSwatchMode","dialogContainer","savedColors","topRow","initialRows","gutterCount","pickerPanel","panelHead","pickerPanelRows","closeButton","headerColor3","closeIconColor","toHexString","closePicker","currentSwatch","dialogBody","dialogBodyCols","pickerGrid","picker","editSwatches","updateValues","pickerBodyRight","pickerBodyRightRows","pickerSwatchesButtons","pickerButtonsCol","pickerSwatches","pickeSwatchesRows","activeSwatches","labelWidth","labelHeight","labelTextSize","newText","newSwatch","swatchOutline","currentText","buttonGrid","buttonGridRows","buttonWidth","buttonHeight","butOK","butCancel","disableButton","setEditButtonVisibility","updateSwatches","pickerColorValues","currentColor","rgbValuesQuadrant","labelText","rValInt","updateInt","gValInt","bValInt","rValDec","updateFloat","gValDec","bValDec","hexValueQuadrant","hexVal","minusPound","inputField","pickedColor","field","channel","newValue","test","newSwatchRGB","createSwatch","icon","swatch","swatchColor","swatchLuminence","mode","thisButton","button","currentRows","thisRow","totalButtonsThisRow","buttonIterations","w","enableButton","disabled","val","newHexValue","checkHex","leadingZero","Ellipse","FocusableButton","_unfocusedColor","displose","InputTextArea","autoStretchHeight","_autoStretchHeight","maxHeight","_maxHeight","maxHeightInPixels","_updateCursorPosition","_highlightCursorInfo","initialStartIndex","initialRelativeStartIndex","initialLineIndex","_cursorInfo","globalStartIndex","globalEndIndex","relativeEndIndex","relativeStartIndex","currentLineIndex","alternativeProcessKey","code","rightDelta","upperLine","tmpIndex","relativeIndex","currentWidth","_contextForBreakLines","upperWidth","lineEnding","upperLineRelativeIndex","underLine","underWidth","underLineRelativeIndex","flushedLine","map","char","longerString","reduce","acc","longerStringWidth","_availableWidth","totalHeight","_availableHeight","tmpLength","_computeScroll","_clipTextLeft","_clipTextTop","selectedHeight","textTop","_scrollTop","deltaIndex","cursorTop","_resetBlinking","startLineIndex","endLineIndex","highlightRootY","highlightRootX","begin","end","leftOffsetWidth","selectedText","hightlightWidth","_clickedCoordinateX","_clickedCoordinateY","movementX","movementY","globalIndex","lastClickedCoordinateY","relativeCoordinateY","relativeXPosition","_evt","dipose","InputPassword","pwdTextWrapper","Line","dash","_dash","connectedControl","_connectedControl","_connectedControlDirtyObserver","x1","_x1","y1","_y1","x2","_x2","y2","_y2","_lineWidth","_effectiveX2","_effectiveY2","setLineDash","MultiLinePoint","multiLine","_multiLine","_x","_y","_point","_control","_controlObserver","onPointUpdate","_mesh","_meshObserver","onAfterCameraRenderObservable","resetLinks","_translatePoint","getProjectedPositionWithZ","getBoundingInfo","boundingSphere","center","getWorldMatrix","xValue","_canvas","yValue","MultiLine","_points","getAt","items","point","reset","previousPoint","first","_minX","_minY","_maxX","_maxY","RadioButton","executeOnAllControls","group","childRadio","offseHeight","AddRadioButtonWithHeader","radio","BaseSlider","displayThumb","_displayThumb","step","_step","barOffset","_barOffset","barOffsetInPixels","thumbWidth","_thumbWidth","thumbWidthInPixels","minimum","_minimum","_maximum","maximum","isThumbClamped","_isThumbClamped","_effectiveBarOffset","_getThumbPosition","_backgroundBoxLength","_getThumbThickness","thumbThickness","_backgroundBoxThickness","_prepareRenderingData","_renderLeft","_renderTop","_renderWidth","_renderHeight","_effectiveThumbThickness","console","error","Slider","displayValueBar","_displayValueBar","borderColor","_borderColor","thumbColor","_thumbColor","isThumbCircle","_isThumbCircle","thumbPosition","SelectorGroup","_groupPanel","_selectors","_groupHeader","_addGroupHeader","groupPanel","selectors","label","groupHeading","_getSelector","selectorNb","removeSelector","CheckboxGroup","addCheckbox","func","checked","state","_selector","isHorizontal","controlFirst","buttonBackground","_setSelectorLabel","_setSelectorLabelColor","_setSelectorButtonColor","_setSelectorButtonBackground","RadioGroup","_selectNb","addRadio","nb","SliderGroup","addSlider","v","onValueChange","SelectionPanel","groups","_buttonColor","_buttonBackground","_headerColor","_barColor","_barHeight","_spacerHeight","_bars","_groups","_panel","_addSpacer","headerColor","_setHeaderColor","_setbuttonColor","j","labelColor","_labelColor","_setLabelColor","_setButtonBackground","barColor","_setBarColor","barHeight","_setBarHeight","spacerHeight","_setSpacerHeight","separator","bar","addGroup","removeGroup","groupNb","setHeaderName","relabel","removeFromGroupSelector","addToGroupCheckbox","addToGroupRadio","addToGroupSlider","onVal","_ScrollViewerWindow","freezeControls","_freezeControls","_restoreMeasures","textureSize","renderWidth","renderHeight","measure","_updateMeasures","_useBuckets","_makeBuckets","bucketWidth","_bucketWidth","bucketHeight","_bucketHeight","setBucketSizes","_buckets","_bucketLen","_dispatchInBuckets","_oldLeft","_oldTop","bStartX","_origLeft","origLeft","bEndX","bEndY","_origTop","origTop","bStartY","bucket","lstc","origLeftForChildren","origTopForChildren","_updateChildrenMeasures","_parentMeasure","_scrollChildren","_scrollChildrenWithBuckets","scrollLeft","scrollTop","parentClientWidth","parentClientHeight","ScrollBar","invertScrollDirection","_invertScrollDirection","invert","_tempMeasure","sign","_first","_originX","_originY","delta","ImageScrollBar","backgroundImage","_backgroundBaseImage","num90RotationInVerticalMode","_backgroundImage","rotatedValue","thumbImage","_thumbBaseImage","_thumbImage","thumbLength","_thumbLength","thumbHeight","_thumbHeight","barImageHeight","_barImageHeight","ScrollViewer","horizontalBar","_horizontalBar","verticalBar","_verticalBar","_window","forceHorizontalBar","_forceHorizontalBar","_grid","_barSize","forceVerticalBar","_forceVerticalBar","isImageBased","_pointerIsOver","_wheelPrecision","_horizontalBarImageHeight","_verticalBarImageHeight","_oldWindowContentsWidth","_oldWindowContentsHeight","_useImageBar","_horizontalBarSpace","_verticalBarSpace","_dragSpace","_addBar","barBackground","resetWindow","_buildClientSizes","idealRatio","_clientWidth","_clientHeight","_updateScroller","_setWindowPosition","wheelPrecision","scrollBackground","_barImage","hb","horizontalThumbImage","_horizontalBarImage","verticalThumbImage","_verticalBarImage","barSize","horizontalBarImageHeight","verticalBarImageHeight","_barBackground","barImage","_barBackgroundImage","horizontalBarImage","_horizontalBarBackgroundImage","verticalBarImage","_verticalBarBackgroundImage","windowContentsWidth","windowContentsHeight","_endLeft","_endTop","_attachWheel","barControl","barContainer","_onWheelObserver","ToggleButton","_group","isActive","_isActive","toActiveAnimation","toInactiveAnimation","onIsActiveChangedObservable","childToggle","pointerEnterActiveAnimation","pointerOutActiveAnimation","pointerDownActiveAnimation","pointerUpActiveAnimation","pointerEnterInactiveAnimation","pointerOutInactiveAnimation","pointerDownInactiveAnimation","pointerUpInactiveAnimation","KeyPropertySet","VirtualKeyboard","onKeyPressObservable","defaultButtonWidth","defaultButtonHeight","defaultButtonPaddingLeft","defaultButtonPaddingRight","defaultButtonPaddingTop","defaultButtonPaddingBottom","defaultButtonColor","defaultButtonBackground","shiftButtonColor","selectedShiftThickness","shiftState","_currentlyConnectedInputText","_connectedInputTexts","_onKeyPressObserver","_createKey","propertySet","addKeysRow","keys","propertySets","maxKey","properties","applyShiftState","rowContainer","button_tblock","toUpperCase","toLowerCase","connectedInputText","connect","input","some","onFocusObserver","onBlurObserver","disconnect","filtered","filter","_removeConnectedInputObservables","CreateDefaultLayout","returnValue","stackPanel","DisplayGrid","displayMinorLines","_displayMinorLines","displayMajorLines","_displayMajorLines","minorLineTickness","_minorLineTickness","minorLineColor","_minorLineColor","majorLineTickness","_majorLineTickness","majorLineColor","_majorLineColor","majorLineFrequency","_majorLineFrequency","cellCountX","cellCountY","cellX","cellY","ImageBasedSlider","valueBarImage","_valueBarImage","BaseGradient","_colorStops","_gradientDirty","_addColorStopsToCanvasGradient","stop","_canvasGradient","_context","_createCanvasGradient","removeColorStop","colorStop","clearColorStops","colorStops","LinearGradient","x0","y0","_x0","_y0","RadialGradient","_r0","_r1","createRadialGradient","Style","AdvancedDynamicTexture","numLayoutCalls","numRenderCalls","renderScale","_renderScale","_onResize","_idealWidth","_idealHeight","_useSmallestIdeal","renderAtIdealSize","_renderAtIdealSize","rwidth","rheight","layer","_layerToDispose","getChildren","getControlsByType","getControlByName","_getControlByKey","find","_focusedControl","isForeground","isBackground","_clipboardData","generateMipMaps","samplingMode","invertY","onGuiReadyObservable","_isFullscreen","_fullscreenViewport","_blockNextFocusCheck","_cursorChanged","_defaultMousePointerId","_rootChildrenHaveChanged","Set","onControlPickedObservable","onBeginLayoutObservable","onEndLayoutObservable","onBeginRenderObservable","onEndRenderObservable","premulAlpha","applyYInversionOnUpdate","checkPointerEveryFrame","_useInvalidateRectOptimization","_invalidatedRectangle","_clearMeasure","_onClipboardCopy","rawEvt","_onClipboardCut","_onClipboardPaste","parseContent","parseSerializedObject","_texture","_rootElement","getInputElement","_renderObserver","onBeforeCameraRenderObservable","camera","_checkUpdate","_controlAddedObserver","_controlRemovedObserver","_preKeyboardObserver","onPreKeyboardObservable","info","KEYDOWN","skipOnPointerObservable","_resizeObserver","onResizeObservable","invalidMinX","invalidMinY","invalidMaxX","invalidMaxY","maxX","maxY","createStyle","moveToNonOverlappedPosition","overlapGroup","deltaStep","repelFactor","controlsForGroup","isArray","descendants","control1","velocity","control2","_Overlaps","subtract","diffLength","normalize","overlapDeltaMultiplier","_prePointerObserver","onPrePointerObservable","_sceneRenderObserver","onBeforeRenderObservable","_pointerObserver","_canvasPointerOutObserver","onCanvasPointerOutObservable","_canvasBlurObserver","onCanvasBlurObservable","texture","getRenderWidth","getRenderHeight","globalViewPort","toGlobal","targetX","targetY","getProjectedPosition","worldMatrix","skipUpdate","layerMask","isDisposed","SetImmediate","ZeroReadOnly","update","AllowGPUOptimizations","skipRender","_checkGuiIsReady","activeCamera","cursor","_doPicking","cameraToUseForPointers","viewport","doNotHandleCursors","_manageFocus","_cleanControlAfterRemovalFromList","list","pick","_scene","_translateToPicking","tempViewport","pointerX","pointerY","originalCameraToUseForPointers","rigCameras","rigViewport","rigCamera","toGlobalToRef","transformedX","getHardwareScalingLevel","transformedY","attach","isPointerCaptured","_attachPickingToSceneRender","_attachToOnPointerOut","_attachToOnBlur","self","removeEventListener","_transformUvs","uv","textureMatrix","getTextureMatrix","isIdentityAs3x2","homogeneousTextureMatrix","Matrix","getRowToRef","Vector4","setRowFromFloats","Vector2","TransformToRef","wrapU","WRAP_ADDRESSMODE","MIRROR_ADDRESSMODE","fX","trunc","wrapV","fY","attachToMesh","supportPointerMove","pickInfo","hit","pickedMesh","getTextureCoordinates","friendlyControls","canMoveFocus","otherHost","enablePointerMoveEvents","pickFunction","forcePicking","pointerEvent","entries","serializeContent","root","scaleToSize","newName","noMipmap","ParseFromSnippetAsync","snippetId","appendToAdt","adt","CreateFullscreenUI","serialized","_LoadURLContentAsync","SnippetUrl","replace","parseFromSnippetAsync","ParseFromFileAsync","parseFromURLAsync","snippet","reject","request","readyState","status","gui","payload","JSON","responseText","jsonPayload","encodedGui","TextDecoder","decode","open","send","CreateForMesh","onlyAlphaTesting","materialSetupCallback","_CreateMaterial","TRILINEAR_SAMPLINGMODE","internalClassType","material","backFaceCulling","diffuseColor","Black","specularColor","diffuseTexture","emissiveTexture","opacityTexture","CreateForMeshTexture","foreground","sampling","BILINEAR_SAMPLINGMODE","adaptiveScaling","resultScene","newScale","guiIsReady","AdvancedDynamicTextureInstrumentation","renderTimeCounter","_renderTime","layoutTimeCounter","_layoutTime","captureRenderTime","_captureRenderTime","_onBeginRenderObserver","beginMonitoring","_onEndRenderObserver","endMonitoring","captureLayoutTime","_captureLayoutTime","_onBeginLayoutObserver","_onEndLayoutObserver","XmlLoaderError","XmlLoader","parentClass","_nodes","_nodeTypes","element","attribute","_isLoaded","_objectAttributes","_parentClass","_getChainElement","attributeValue","_getClassAttribute","attributeName","_createGuiElement","node","linkParent","guiNode","nodeName","attributes","includes","startsWith","endsWith","getNamedItem","id","exception","_parseGrid","cellNode","totalColumnsNumber","nodeType","nodeValue","k","firstChild","_parseXml","nextSibling","_parseElement","_prepareSourceElement","variable","iterator","_parseElementsFromSource","dataSource","splittedSource","generated","setAttribute","_rootNode","getNodeById","getNodes","loadLayout","xmlFile","rootNode","onSuccess","onError","xhttp","XMLHttpRequest","responseXML","xmlDoc","onerror","loadLayoutAsync","Vector3WithInfo","Control3D","_node","scaling","_isScaledByManager","behaviors","_behaviors","addBehavior","behavior","init","isLoading","onDataLoadedObservable","removeBehavior","detach","getBehaviorByName","setEnabled","linkToTransformNode","_prepareNode","_createNode","_injectGUI3DReservedDataStore","isPickable","_affectMaterial","reservedDataStore","GUI3D","_isTouchButton3D","_generatePointerEventType","forcePointerUp","pickedPoint","originMeshPosition","_disposeNode","ContentDisplay3D","_contentResolution","_contentScaleRatio","content","_content","utilityLayer","_facadeTexture","utilityLayerScene","_setFacadeTextureScaling","_applyFacade","_contentScaleRatioY","contentResolution","_resetContent","_disposeFacadeTexture","facadeTexture","AbstractButton3D","Button3D","_options","depth","_currentMaterial","emissiveColor","scaleInPlace","faceUV","useRightHandedSystem","wrap","Container3D","blockLayout","_blockLayout","_arrangeChildren","updateLayout","UNSET_ORIENTATION","FACEORIGIN_ORIENTATION","FACEORIGINREVERSED_ORIENTATION","FACEFORWARD_ORIENTATION","FACEFORWARDREVERSED_ORIENTATION","VolumeBasedPanel","orientation","_orientation","_columns","_rowThenColum","_rows","controlCount","currentInverseWorld","Invert","computeWorldMatrix","boundingBox","getHierarchyBoundingVectors","extendSize","Vector3","subtractToRef","TransformNormalToRef","startOffsetX","startOffsetY","nodeGrid","cellCounter","_mapGridNode","_finalProcessing","CylinderPanel","_radius","nodePosition","newPos","_cylindricalMapping","lookAt","Y","LOCAL","yAngle","RotationYawPitchRollToRef","TransformNormal","ShadersStore","FluentMaterialDefines","INNERGLOW","BORDER","HOVERLIGHT","TEXTURE","rebuild","FluentMaterial","innerGlowColorIntensity","innerGlowColor","albedoColor","renderBorders","borderWidth","edgeSmoothingValue","borderMinValue","renderHoverLight","hoverRadius","hoverColor","hoverPosition","needAlphaBlending","needAlphaTesting","getAlphaTestTexture","isReadyForSubMesh","subMesh","isFrozen","effect","_wasPreviouslyReady","materialDefines","defines","checkReadyOnEveryCall","_renderId","getRenderId","_areTexturesDirty","_albedoTexture","isReadyOrNotBlocking","markAsProcessed","resetCachedMaterial","attribs","PositionKind","NormalKind","UVKind","shaderName","uniforms","samplers","uniformBuffers","PrepareUniformsAndSamplersList","uniformsNames","uniformBuffersNames","maxSimultaneousLights","setEffect","createEffect","fallbacks","onCompiled","indexParameters","_materialContext","bindForSubMesh","world","_activeEffect","bindOnlyWorldMatrix","setMatrix","_mustRebind","setColor4","setFloat","setVector3","setDirectColor4","setTexture","_afterBind","getActiveTextures","hasTexture","forceDisposeEffect","Clone","customType","rootUrl","TouchHolographicMenu","backPlateMargin","_backPlateMargin","_updateCurrentMinMax","_updateMargins","_backPlate","_backPlateMaterial","_pickedPointObserver","onPickedPointChangedObservable","_currentMin","_currentMax","minimizeInPlace","maximizeInPlace","addInPlaceFromFloats","subtractInPlace","addButton","wasLayoutBlocked","isBackplateVisible","MENU_BUTTON_SCALE","HandMenu","handConstraintBehavior","_handConstraintBehavior","xr","linkToXRExperience","FluentBackplateMaterialDefines","BLOB_ENABLE","BLOB_ENABLE_2","SMOOTH_EDGES","IRIDESCENT_MAP_ENABLE","_needNormals","FluentBackplateMaterial","absoluteSizes","_filterWidth","baseColor","lineColor","blobIntensity","blobFarSize","blobNearDistance","blobFarDistance","blobFadeLength","blobNearSize","blobPulse","blobFade","blobNearSize2","blobPulse2","blobFade2","_rate","highlightWidth","_highlightTransform","_highlight","iridescenceIntensity","iridescenceEdgeIntensity","_angle","fadeOut","_reflected","_frequency","_verticalOffset","globalLeftIndexTipPosition","_globalLeftIndexTipPosition4","globalRightIndexTipPosition","_globalRightIndexTipPosition4","alphaMode","ALPHA_DISABLE","_blobTexture","BLOB_TEXTURE_URL","_iridescentMap","IM_TEXTURE_URL","_isReadyForSubMesh","PrepareDefinesForAttributes","FOG","addFallback","HandleFallbacksForShadows","IMAGEPROCESSINGPOSTPROCESS","imageProcessingConfiguration","applyByPostProcess","NORMAL","UV1","UV2","UV2Kind","VERTEXCOLOR","ColorKind","TANGENT","TangentKind","PrepareAttributesForInstances","setVector4","getAnimatables","HolographicBackplate","renderingGroupId","_model","_material","shareMaterials","_shareMaterials","collisionMesh","visibility","ImportMeshAsync","MODEL_BASE_URL","MODEL_FILENAME","then","importedModel","meshes","_createMaterial","_touchSharedMaterials","HolographicButton","_disposeTooltip","_tooltipFade","_tooltipTextBlock","_tooltipTexture","_tooltipMesh","_tooltipHoverObserver","_tooltipOutObserver","_textPlate","_frontPlate","tooltipText","rightHandedScene","tooltipBackground","sideOrientation","DOUBLESIDE","mat","addChild","Forward","Up","delay","fadeIn","_rebuildContent","_imageUrl","backMaterial","_backMaterial","frontMaterial","_frontMaterial","plateMaterial","_plateMaterial","_createBackMaterial","_createFrontMaterial","_createPlateMaterial","_sharedMaterials","FluentButtonMaterialDefines","RELATIVE_WIDTH","ENABLE_FADE","_needUVs","FluentButtonMaterial","edgeWidth","edgeColor","proximityMaxIntensity","proximityFarDistance","proximityNearRadius","proximityAnisotropy","selectionFuzz","selected","selectionFade","selectionFadeSize","selectedDistance","selectedFadeLength","leftBlobEnable","leftBlobNearSize","leftBlobPulse","leftBlobFade","leftBlobInnerFade","rightBlobEnable","rightBlobNearSize","rightBlobPulse","rightBlobFade","rightBlobInnerFade","activeFaceDir","activeFaceUp","enableFade","fadeWidth","smoothActiveFace","showFrame","useBlobTexture","ALPHA_ADD","disableDepthWrite","TouchButton3D","_isNearPressed","_interactionSurfaceHeight","_isToggleButton","_toggleState","_toggleButtonCallback","_onToggle","onToggleObservable","collidableFrontDirection","isActiveNearInteraction","frontWorldDir","_collidableFrontDirection","_collisionMesh","transformedDirection","isNearPickable","getChildMeshes","forward","isToggleButton","removeCallback","isToggled","newState","_isInteractionInFrontOfButton","collidablePos","_getInteractionHeight","getAbsolutePosition","getPressDepth","touchPoint","interactionHeight","interactionPos","basePos","frontDir","Distance","Dot","providedType","nearMeshPosition","activeInteractionCount","TouchHolographicButton","_isBackplateVisible","_frontPlateDepth","_backPlateDepth","_backplateColor","_backplateToggledColor","decompose","Clamp","_pointerHoverObserver","alphaMesh","importedFrontPlate","tn","setParent","negate","DefaultBehavior","followBehaviorEnabled","sixDofDragBehaviorEnabled","surfaceMagnetismBehaviorEnabled","_followBehavior","_sixDofDragBehavior","_surfaceMagnetismBehavior","followBehavior","sixDofDragBehavior","surfaceMagnetismBehavior","ownerMesh","draggablesMeshes","sceneUnderstandingMeshes","attachedNode","_addObservables","draggableMeshes","faceCameraOnDragStart","enabled","_removeObservables","_onBeforeRenderObserver","_enabled","isMoving","_onDragObserver","onDragObservable","disableMovement","findAndUpdateTarget","HandleMaterial","hover","_hover","_updateInterpolationTarget","drag","_drag","_scale","_lastTick","animationLength","hoverScale","baseScale","dragScale","_positionOffset","Date","now","_onBeforeRender","tick","scaleDiff","_targetScale","colorDiff","Color3","_targetColor","scaleToRef","addToRef","setColor3","HandleState","GizmoHandle","_state","gizmo","_gizmo","HOVER","_updateMaterial","DRAG","IDLE","_materials","createNode","handle","positionOffset","setDragBehavior","dragStartFn","dragFn","dragEndFn","dragBehavior","_dragBehavior","_dragStartObserver","onDragStartObservable","_draggingObserver","_dragEndObserver","onDragEndObservable","SideHandle","verticalBox","sideNode","isNearGrabbable","CornerHandle","horizontalBox","angleNode","SlateGizmo","attachedSlate","attachedMesh","updateBoundingBox","onPickingObservable","_handleHovered","_attachedSlate","_boundingDimensions","_tmpQuaternion","_tmpVector","_corners","_sides","_boundingBoxGizmo","_handleSize","_existingSlateScale","fixedScreenSize","fixedScreenSizeDistanceFactor","updateScale","gizmoLayer","originalScene","_handlesParent","rotationQuaternion","masksCorners","dimensions","origin","corner","_assignDragBehaviorCorners","originStart","dimensionsStart","masks","_moveHandle","side","_assignDragBehaviorSides","_rootMesh","_keepAspectRatio","vector","aspectRatio","invertDiagonal","axis","dot","_clampDimensions","mask","keepAspectRatio","impact","multiplyInPlace","clampedDimensions","minDimensions","isCorner","offsetOriginMasked","offsetDimensionsMasked","addInPlace","moveFn","dragOrigin","toObjectFrame","dragPlaneNormal","_followButton","_handleDragged","normal","ref","projectToRef","_positionElements","_updatePivot","quaternionOrigin","directionOrigin","worldPivot","worldPlaneNormal","getAbsolutePivotPoint","GetAngleBetweenVectorsOnPlane","RotationAxisToRef","_attachedNodeChanged","_RemoveAndStorePivotPoint","originalParent","_update","RotationYawPitchRoll","boundingMinMax","_updateHandlesPosition","_updateHandlesScaling","_RestorePivotPoint","handleScaling","scaledWidth","scaledHeight","setAll","absolutePosition","distanceFromCamera","HolographicSlate","defaultBehavior","_defaultBehavior","_dimensions","newRatio","titleBarHeight","_titleBarHeight","_titleBar","_titleBarTitle","_contentPlate","_titleText","_titleTextComponent","titleBarMargin","defaultDimensions","_closeButton","_contentViewport","_contentDragBehavior","_contentMaterial","albedoTexture","_resetContentPositionAndZoom","_applyContentViewport","_addControl","followButton","titleBar","titleBarTitle","contentPlate","backPlate","contentPlateHeight","rightHandScene","_DEFAULT_TEXT_RESOLUTION_Y","tex","uScale","vScale","uOffset","vOffset","TransformCoordinatesToRef","setPivotPoint","origin2","BACKSIDE","frontUVs","FRONTSIDE","_attachContentPlateBehavior","ASSETS_BASE_URL","FOLLOW_ICON_FILENAME","CLOSE_ICON_FILENAME","recenter","moveAttached","useObjectOrientationForDragging","updateDragPlane","worldDimensions","upWorld","rightWorld","projectedOffset","startViewport","dragPlanePoint","_titleBarMaterial","_positionChangedObserver","onPositionChangedObservable","resetDefaultAspectAndPose","resetAspect","backward","Backward","pivot","FromLookDirectionLH","MeshButton3D","_currentMesh","NearMenu","isPinned","_isPinned","_pinButton","_createPinButton","_ASSETS_BASE_URL","_PIN_ICON_FILENAME","ignoreCameraPitchAndRoll","pitchOffset","minimumDistance","defaultDistance","maximumDistance","_dragObserver","PlanePanel","ScatterPanel","_iteration","iteration","_scatterMapping","random","count","sort","distance1","lengthSquared","distance2","radiusPaddingSquared","pow","cellSize","difference2D","difference","combinedRadius","distance","MRDLSliderBarMaterialDefines","SKY_ENABLED","IRIDESCENCE_ENABLED","MRDLSliderBarMaterial","bevelFront","bevelFrontStretch","bevelBack","bevelBackStretch","radiusTopLeft","radiusTopRight","radiusBottomLeft","radiusBottomRight","bulgeEnabled","bulgeHeight","bulgeRadius","sunIntensity","sunTheta","sunPhi","indirectDiffuse","albedo","specular","shininess","sharpness","subsurface","leftGradientColor","rightGradientColor","reflection","frontReflect","edgeReflect","power","skyColor","horizonColor","groundColor","horizonPower","fuzz","minFuzz","clipFade","hueShift","saturationShift","valueShift","blobPosition","blobPosition2","blobTexture","leftIndexPosition","rightIndexPosition","leftIndexMiddlePosition","rightIndexMiddlePosition","decalScaleXY","decalFrontOnly","rimIntensity","rimHueShift","rimSaturationShift","rimValueShift","useGlobalLeftIndex","useGlobalRightIndex","globalLeftIndexTipProximity","globalRightIndexTipProximity","globaRightIndexTipPosition","globalLeftThumbTipPosition","globalRightThumbTipPosition","globalLeftIndexMiddlePosition","globalRightIndexMiddlePosition","_blueGradientTexture","BLUE_GRADIENT_TEXTURE_URL","_decalTexture","_reflectionMapTexture","_indirectEnvTexture","setVector2","MRDLSliderThumbMaterialDefines","MRDLSliderThumbMaterial","MRDLBackplateMaterialDefines","IRIDESCENCE_ENABLE","MRDLBackplateMaterial","iridescenceTint","gradientColor","topLeftGradientColor","topRightGradientColor","bottomLeftGradientColor","bottomRightGradientColor","edgePower","edgeLineGradientBlend","_iridescentMapTexture","IRIDESCENT_MAP_TEXTURE_URL","Slider3D","sliderBackplateVisible","_sliderBackplateVisible","_sliderThumb","_convertToPosition","start","_sliderBar","SLIDER_SCALING","sliderBarMaterial","_sliderBarMaterial","sliderThumbMaterial","_sliderThumbMaterial","sliderBackplateMaterial","_sliderBackplateMaterial","sliderBackplate","sliderBackplateModel","sliderBarModel","sliderThumbModel","_sliderBackplate","_createBehavior","pointerDragBehavior","dragAxis","Right","_draggedPosition","dragDistance","_convertToValue","SpherePanel","_sphericalMapping","xAngle","StackPanel3D","extendSizes","TouchMeshButton3D","MRDLBackglowMaterialDefines","MRDLBackglowMaterial","bevelRadius","tuningMotion","motion","maxIntensity","intensityFadeInExponent","outerFuzzStart","outerFuzzEnd","innerColor","blendExponent","falloff","bias","MRDLFrontplateMaterialDefines","MRDLFrontplateMaterial","relativeToHeight","blobEnable","blobInnerFade","blobPulseMaxSize","blobEnable2","blobInnerFade2","gazeIntensity","gazeFocus","MRDLInnerquadMaterialDefines","MRDLInnerquadMaterial","fixedRadius","glowFraction","glowMax","glowFalloff","ALPHA_COMBINE","_backGlow","_innerQuad","Down","_frontPlateCollisionMesh","subtext","_subtext","backGlowMaterial","_backGlowMaterial","innerQuadMaterial","_innerQuadMaterial","textSizeInPixels","imageSizeInPixels","plateMaterialColor","frontPlateDepth","backPlateDepth","backGlowOffset","flatPlaneDepth","innerQuadRadius","innerQuadColor","innerQuadToggledColor","innerQuadHoverColor","innerQuadToggledHoverColor","_performEnterExitAnimation","_pointerClickObserver","_performClickAnimation","_pointerEnterObserver","_pointerOutObserver","_toggleObserver","_getAspectRatio","_alignContentVertically","_alignContentHorizontally","totalPanelWidthInPixels","padding","contentContainer","imageContainer","textContainer","backPlateMesh","_createBackPlate","_createFrontPlate","innerQuadMesh","_createInnerQuad","backGlowMesh","_createBackGlow","MRTK_ASSET_BASE_URL","BACKPLATE_MODEL_FILENAME","backPlateModel","FRONTPLATE_MODEL_FILENAME","collisionPlate","_collisionPlate","frontPlateModel","INNERQUAD_MODEL_FILENAME","innerQuadModel","BACKGLOW_MODEL_FILENAME","backGlowModel","animationGroup","property","frame","values","animation","anim","ANIMATIONTYPE_FLOAT","ANIMATIONLOOPMODE_CYCLE","animkeyFrames","inTangent","outTangent","interpolation","setKeys","addTargetedAnimation","speedRatio","play","_createBackGlowMaterial","glowRadius","_createInnerQuadMaterial","GUI3DManager","_utilityLayer","controlScaling","_customControlScaling","scaleRatio","useRealisticScaling","MRTK_REALISTIC_SCALING","LastCreatedScene","_sceneDisposeObserver","_CreateDefaultUtilityLayerFromScene","onlyCheckPointerDownEvents","pickUtilitySceneFirst","mainSceneTrackerPredicate","_handlePointerOut","autoClear","autoClearDepthAndStencil","isPointerUp","shouldRender","pickingInfo","originMesh","hostInformation","isMobile","materialName","STLFileLoader","solidPattern","facetsPattern","normalPattern","vertexPattern","extensions","isBinary","importMesh","meshesNames","matches","_isBinary","babylonMesh","_parseBinary","array_buffer","Uint8Array","str","byteLength","String","fromCharCode","meshName","meshNameFromEnd","_parseASCII","load","loadAssetContainer","_blockEntityCollection","reader","DataView","getUint32","ascii","off","getUint8","faces","positions","normals","indices","Uint32Array","indicesCount","face","normalX","getFloat32","normalY","normalZ","vertexstart","DO_NOT_ALTER_FILE_COORDINATES","setVerticesData","setIndices","solidData","facet","normalMatches","lastIndex","vertexMatch","RegisterPlugin"],"sourceRoot":""}