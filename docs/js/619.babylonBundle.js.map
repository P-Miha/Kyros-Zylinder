{"version":3,"file":"js/619.babylonBundle.js","mappings":"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","sources":["webpack://babylonjs-typescript-webpack-template/./dev/core/src/DeviceInput/InputDevices/deviceEnums.ts","webpack://babylonjs-typescript-webpack-template/./dev/core/src/DeviceInput/eventFactory.ts","webpack://babylonjs-typescript-webpack-template/./dev/core/src/DeviceInput/nativeDeviceInputSystem.ts","webpack://babylonjs-typescript-webpack-template/./dev/core/src/DeviceInput/webDeviceInputSystem.ts","webpack://babylonjs-typescript-webpack-template/./dev/core/src/DeviceInput/internalDeviceSourceManager.ts","webpack://babylonjs-typescript-webpack-template/./dev/core/src/Events/deviceInputEvents.ts","webpack://babylonjs-typescript-webpack-template/./dev/core/src/Events/pointerEvents.ts","webpack://babylonjs-typescript-webpack-template/./dev/core/src/Materials/material.detailMapConfiguration.ts","webpack://babylonjs-typescript-webpack-template/./dev/core/src/Materials/materialPluginManager.ts","webpack://babylonjs-typescript-webpack-template/./dev/core/src/Materials/standardMaterial.ts","webpack://babylonjs-typescript-webpack-template/./dev/core/src/Meshes/Builders/groundBuilder.ts","webpack://babylonjs-typescript-webpack-template/./dev/core/src/Meshes/mesh.ts","webpack://babylonjs-typescript-webpack-template/./dev/core/src/Misc/coroutine.ts"],"sourcesContent":["/**\r\n * Enum for Device Types\r\n */\r\nexport enum DeviceType {\r\n    /** Generic */\r\n    Generic = 0,\r\n    /** Keyboard */\r\n    Keyboard = 1,\r\n    /** Mouse */\r\n    Mouse = 2,\r\n    /** Touch Pointers */\r\n    Touch = 3,\r\n    /** PS4 Dual Shock */\r\n    DualShock = 4,\r\n    /** Xbox */\r\n    Xbox = 5,\r\n    /** Switch Controller */\r\n    Switch = 6,\r\n    /** PS5 DualSense */\r\n    DualSense = 7,\r\n}\r\n\r\n// Device Enums\r\n/**\r\n * Enum for All Pointers (Touch/Mouse)\r\n */\r\nexport enum PointerInput {\r\n    /** Horizontal Axis (Not used in events/observables; only in polling) */\r\n    Horizontal = 0,\r\n    /** Vertical Axis (Not used in events/observables; only in polling) */\r\n    Vertical = 1,\r\n    /** Left Click or Touch */\r\n    LeftClick = 2,\r\n    /** Middle Click */\r\n    MiddleClick = 3,\r\n    /** Right Click */\r\n    RightClick = 4,\r\n    /** Browser Back */\r\n    BrowserBack = 5,\r\n    /** Browser Forward */\r\n    BrowserForward = 6,\r\n    /** Mouse Wheel X */\r\n    MouseWheelX = 7,\r\n    /** Mouse Wheel Y */\r\n    MouseWheelY = 8,\r\n    /** Mouse Wheel Z */\r\n    MouseWheelZ = 9,\r\n    /** Used in events/observables to identify if x/y changes occurred */\r\n    Move = 12,\r\n}\r\n\r\n/** @internal */\r\nexport enum NativePointerInput {\r\n    /** Horizontal Axis */\r\n    Horizontal = PointerInput.Horizontal,\r\n    /** Vertical Axis */\r\n    Vertical = 1,\r\n    /** Left Click or Touch */\r\n    LeftClick = 2,\r\n    /** Middle Click */\r\n    MiddleClick = 3,\r\n    /** Right Click */\r\n    RightClick = 4,\r\n    /** Browser Back */\r\n    BrowserBack = 5,\r\n    /** Browser Forward */\r\n    BrowserForward = 6,\r\n    /** Mouse Wheel X */\r\n    MouseWheelX = 7,\r\n    /** Mouse Wheel Y */\r\n    MouseWheelY = 8,\r\n    /** Mouse Wheel Z */\r\n    MouseWheelZ = 9,\r\n    /** Delta X */\r\n    DeltaHorizontal = 10,\r\n    /** Delta Y */\r\n    DeltaVertical = 11,\r\n}\r\n\r\n/**\r\n * Enum for Dual Shock Gamepad\r\n */\r\nexport enum DualShockInput {\r\n    /** Cross */\r\n    Cross = 0,\r\n    /** Circle */\r\n    Circle = 1,\r\n    /** Square */\r\n    Square = 2,\r\n    /** Triangle */\r\n    Triangle = 3,\r\n    /** L1 */\r\n    L1 = 4,\r\n    /** R1 */\r\n    R1 = 5,\r\n    /** L2 */\r\n    L2 = 6,\r\n    /** R2 */\r\n    R2 = 7,\r\n    /** Share */\r\n    Share = 8,\r\n    /** Options */\r\n    Options = 9,\r\n    /** L3 */\r\n    L3 = 10,\r\n    /** R3 */\r\n    R3 = 11,\r\n    /** DPadUp */\r\n    DPadUp = 12,\r\n    /** DPadDown */\r\n    DPadDown = 13,\r\n    /** DPadLeft */\r\n    DPadLeft = 14,\r\n    /** DRight */\r\n    DPadRight = 15,\r\n    /** Home */\r\n    Home = 16,\r\n    /** TouchPad */\r\n    TouchPad = 17,\r\n    /** LStickXAxis */\r\n    LStickXAxis = 18,\r\n    /** LStickYAxis */\r\n    LStickYAxis = 19,\r\n    /** RStickXAxis */\r\n    RStickXAxis = 20,\r\n    /** RStickYAxis */\r\n    RStickYAxis = 21,\r\n}\r\n\r\n/**\r\n * Enum for Dual Sense Gamepad\r\n */\r\nexport enum DualSenseInput {\r\n    /** Cross */\r\n    Cross = 0,\r\n    /** Circle */\r\n    Circle = 1,\r\n    /** Square */\r\n    Square = 2,\r\n    /** Triangle */\r\n    Triangle = 3,\r\n    /** L1 */\r\n    L1 = 4,\r\n    /** R1 */\r\n    R1 = 5,\r\n    /** L2 */\r\n    L2 = 6,\r\n    /** R2 */\r\n    R2 = 7,\r\n    /** Create */\r\n    Create = 8,\r\n    /** Options */\r\n    Options = 9,\r\n    /** L3 */\r\n    L3 = 10,\r\n    /** R3 */\r\n    R3 = 11,\r\n    /** DPadUp */\r\n    DPadUp = 12,\r\n    /** DPadDown */\r\n    DPadDown = 13,\r\n    /** DPadLeft */\r\n    DPadLeft = 14,\r\n    /** DRight */\r\n    DPadRight = 15,\r\n    /** Home */\r\n    Home = 16,\r\n    /** TouchPad */\r\n    TouchPad = 17,\r\n    /** LStickXAxis */\r\n    LStickXAxis = 18,\r\n    /** LStickYAxis */\r\n    LStickYAxis = 19,\r\n    /** RStickXAxis */\r\n    RStickXAxis = 20,\r\n    /** RStickYAxis */\r\n    RStickYAxis = 21,\r\n}\r\n\r\n/**\r\n * Enum for Xbox Gamepad\r\n */\r\nexport enum XboxInput {\r\n    /** A */\r\n    A = 0,\r\n    /** B */\r\n    B = 1,\r\n    /** X */\r\n    X = 2,\r\n    /** Y */\r\n    Y = 3,\r\n    /** LB */\r\n    LB = 4,\r\n    /** RB */\r\n    RB = 5,\r\n    /** LT */\r\n    LT = 6,\r\n    /** RT */\r\n    RT = 7,\r\n    /** Back */\r\n    Back = 8,\r\n    /** Start */\r\n    Start = 9,\r\n    /** LS */\r\n    LS = 10,\r\n    /** RS */\r\n    RS = 11,\r\n    /** DPadUp */\r\n    DPadUp = 12,\r\n    /** DPadDown */\r\n    DPadDown = 13,\r\n    /** DPadLeft */\r\n    DPadLeft = 14,\r\n    /** DRight */\r\n    DPadRight = 15,\r\n    /** Home */\r\n    Home = 16,\r\n    /** LStickXAxis */\r\n    LStickXAxis = 17,\r\n    /** LStickYAxis */\r\n    LStickYAxis = 18,\r\n    /** RStickXAxis */\r\n    RStickXAxis = 19,\r\n    /** RStickYAxis */\r\n    RStickYAxis = 20,\r\n}\r\n\r\n/**\r\n * Enum for Switch (Pro/JoyCon L+R) Gamepad\r\n */\r\nexport enum SwitchInput {\r\n    /** B */\r\n    B = 0,\r\n    /** A */\r\n    A = 1,\r\n    /** Y */\r\n    Y = 2,\r\n    /** X */\r\n    X = 3,\r\n    /** L */\r\n    L = 4,\r\n    /** R */\r\n    R = 5,\r\n    /** ZL */\r\n    ZL = 6,\r\n    /** ZR */\r\n    ZR = 7,\r\n    /** Minus */\r\n    Minus = 8,\r\n    /** Plus */\r\n    Plus = 9,\r\n    /** LS */\r\n    LS = 10,\r\n    /** RS */\r\n    RS = 11,\r\n    /** DPadUp */\r\n    DPadUp = 12,\r\n    /** DPadDown */\r\n    DPadDown = 13,\r\n    /** DPadLeft */\r\n    DPadLeft = 14,\r\n    /** DRight */\r\n    DPadRight = 15,\r\n    /** Home */\r\n    Home = 16,\r\n    /** Capture */\r\n    Capture = 17,\r\n    /** LStickXAxis */\r\n    LStickXAxis = 18,\r\n    /** LStickYAxis */\r\n    LStickYAxis = 19,\r\n    /** RStickXAxis */\r\n    RStickXAxis = 20,\r\n    /** RStickYAxis */\r\n    RStickYAxis = 21,\r\n}\r\n","import { Constants } from \"../Engines/constants\";\r\nimport type { IUIEvent } from \"../Events/deviceInputEvents\";\r\nimport { EventConstants } from \"../Events/deviceInputEvents\";\r\nimport type { Nullable } from \"../types\";\r\nimport { DeviceType, NativePointerInput, PointerInput } from \"./InputDevices/deviceEnums\";\r\nimport type { IDeviceInputSystem } from \"./inputInterfaces\";\r\n\r\n/**\r\n * Class to wrap DeviceInputSystem data into an event object\r\n */\r\nexport class DeviceEventFactory {\r\n    /**\r\n     * Create device input events based on provided type and slot\r\n     *\r\n     * @param deviceType Type of device\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param inputIndex Id of input to be checked\r\n     * @param currentState Current value for given input\r\n     * @param deviceInputSystem Reference to DeviceInputSystem\r\n     * @param elementToAttachTo HTMLElement to reference as target for inputs\r\n     * @returns IUIEvent object\r\n     */\r\n    public static CreateDeviceEvent(\r\n        deviceType: DeviceType,\r\n        deviceSlot: number,\r\n        inputIndex: number,\r\n        currentState: Nullable<number>,\r\n        deviceInputSystem: IDeviceInputSystem,\r\n        elementToAttachTo?: any,\r\n        pointerId?: number\r\n    ): IUIEvent {\r\n        switch (deviceType) {\r\n            case DeviceType.Keyboard:\r\n                return this._CreateKeyboardEvent(inputIndex, currentState, deviceInputSystem, elementToAttachTo);\r\n            case DeviceType.Mouse:\r\n                if (inputIndex === PointerInput.MouseWheelX || inputIndex === PointerInput.MouseWheelY || inputIndex === PointerInput.MouseWheelZ) {\r\n                    return this._CreateWheelEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo);\r\n                }\r\n            // eslint-disable-next-line no-fallthrough\r\n            case DeviceType.Touch:\r\n                return this._CreatePointerEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo, pointerId);\r\n            default:\r\n                throw `Unable to generate event for device ${DeviceType[deviceType]}`;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates pointer event\r\n     *\r\n     * @param deviceType Type of device\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param inputIndex Id of input to be checked\r\n     * @param currentState Current value for given input\r\n     * @param deviceInputSystem Reference to DeviceInputSystem\r\n     * @param elementToAttachTo HTMLElement to reference as target for inputs\r\n     * @returns IUIEvent object (Pointer)\r\n     */\r\n    private static _CreatePointerEvent(\r\n        deviceType: DeviceType,\r\n        deviceSlot: number,\r\n        inputIndex: number,\r\n        currentState: Nullable<number>,\r\n        deviceInputSystem: IDeviceInputSystem,\r\n        elementToAttachTo?: any,\r\n        pointerId?: number\r\n    ): any {\r\n        const evt = this._CreateMouseEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo);\r\n\r\n        if (deviceType === DeviceType.Mouse) {\r\n            evt.deviceType = DeviceType.Mouse;\r\n            evt.pointerId = 1;\r\n            evt.pointerType = \"mouse\";\r\n        } else {\r\n            evt.deviceType = DeviceType.Touch;\r\n            evt.pointerId = pointerId ?? deviceSlot;\r\n            evt.pointerType = \"touch\";\r\n        }\r\n\r\n        let buttons = 0;\r\n\r\n        // Populate buttons property with current state of all mouse buttons\r\n        // Uses values found on: https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\r\n        buttons += deviceInputSystem.pollInput(deviceType, deviceSlot, PointerInput.LeftClick);\r\n        buttons += deviceInputSystem.pollInput(deviceType, deviceSlot, PointerInput.RightClick) * 2;\r\n        buttons += deviceInputSystem.pollInput(deviceType, deviceSlot, PointerInput.MiddleClick) * 4;\r\n        evt.buttons = buttons;\r\n\r\n        if (inputIndex === PointerInput.Move) {\r\n            evt.type = \"pointermove\";\r\n        } else if (inputIndex >= PointerInput.LeftClick && inputIndex <= PointerInput.RightClick) {\r\n            evt.type = currentState === 1 ? \"pointerdown\" : \"pointerup\";\r\n            evt.button = inputIndex - 2;\r\n        }\r\n\r\n        return evt;\r\n    }\r\n\r\n    /**\r\n     * Create Mouse Wheel Event\r\n     * @param deviceType Type of device\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param inputIndex Id of input to be checked\r\n     * @param currentState Current value for given input\r\n     * @param deviceInputSystem Reference to DeviceInputSystem\r\n     * @param elementToAttachTo HTMLElement to reference as target for inputs\r\n     * @returns IUIEvent object (Wheel)\r\n     */\r\n    private static _CreateWheelEvent(\r\n        deviceType: DeviceType,\r\n        deviceSlot: number,\r\n        inputIndex: number,\r\n        currentState: Nullable<number>,\r\n        deviceInputSystem: IDeviceInputSystem,\r\n        elementToAttachTo: any\r\n    ): any {\r\n        const evt = this._CreateMouseEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo);\r\n\r\n        // While WheelEvents don't generally have a pointerId, we used to add one in the InputManager\r\n        // This line has been added to make the InputManager more platform-agnostic\r\n        // Similar code exists in the WebDeviceInputSystem to handle browser created events\r\n        evt.pointerId = 1;\r\n        evt.type = \"wheel\";\r\n        evt.deltaMode = EventConstants.DOM_DELTA_PIXEL;\r\n        evt.deltaX = 0;\r\n        evt.deltaY = 0;\r\n        evt.deltaZ = 0;\r\n\r\n        switch (inputIndex) {\r\n            case PointerInput.MouseWheelX:\r\n                evt.deltaX = currentState;\r\n                break;\r\n            case PointerInput.MouseWheelY:\r\n                evt.deltaY = currentState;\r\n                break;\r\n            case PointerInput.MouseWheelZ:\r\n                evt.deltaZ = currentState;\r\n                break;\r\n        }\r\n\r\n        return evt;\r\n    }\r\n\r\n    /**\r\n     * Create Mouse Event\r\n     * @param deviceType Type of device\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param inputIndex Id of input to be checked\r\n     * @param currentState Current value for given input\r\n     * @param deviceInputSystem Reference to DeviceInputSystem\r\n     * @param elementToAttachTo HTMLElement to reference as target for inputs\r\n     * @returns IUIEvent object (Mouse)\r\n     */\r\n    private static _CreateMouseEvent(\r\n        deviceType: DeviceType,\r\n        deviceSlot: number,\r\n        inputIndex: number,\r\n        currentState: Nullable<number>,\r\n        deviceInputSystem: IDeviceInputSystem,\r\n        elementToAttachTo?: any\r\n    ): any {\r\n        const evt = this._CreateEvent(elementToAttachTo);\r\n        const pointerX = deviceInputSystem.pollInput(deviceType, deviceSlot, PointerInput.Horizontal);\r\n        const pointerY = deviceInputSystem.pollInput(deviceType, deviceSlot, PointerInput.Vertical);\r\n\r\n        // Handle offsets/deltas based on existence of HTMLElement\r\n        if (elementToAttachTo) {\r\n            evt.movementX = 0;\r\n            evt.movementY = 0;\r\n            evt.offsetX = evt.movementX - elementToAttachTo.getBoundingClientRect().x;\r\n            evt.offsetY = evt.movementY - elementToAttachTo.getBoundingClientRect().y;\r\n        } else {\r\n            evt.movementX = deviceInputSystem.pollInput(deviceType, deviceSlot, NativePointerInput.DeltaHorizontal); // DeltaHorizontal\r\n            evt.movementY = deviceInputSystem.pollInput(deviceType, deviceSlot, NativePointerInput.DeltaVertical); // DeltaVertical\r\n            evt.offsetX = 0;\r\n            evt.offsetY = 0;\r\n        }\r\n        this._CheckNonCharacterKeys(evt, deviceInputSystem);\r\n\r\n        evt.clientX = pointerX;\r\n        evt.clientY = pointerY;\r\n        evt.x = pointerX;\r\n        evt.y = pointerY;\r\n\r\n        evt.deviceType = deviceType;\r\n        evt.deviceSlot = deviceSlot;\r\n        evt.inputIndex = inputIndex;\r\n\r\n        return evt;\r\n    }\r\n\r\n    /**\r\n     * Create Keyboard Event\r\n     * @param inputIndex Id of input to be checked\r\n     * @param currentState Current value for given input\r\n     * @param deviceInputSystem Reference to DeviceInputSystem\r\n     * @param elementToAttachTo HTMLElement to reference as target for inputs\r\n     * @returns IEvent object (Keyboard)\r\n     */\r\n    private static _CreateKeyboardEvent(inputIndex: number, currentState: Nullable<number>, deviceInputSystem: IDeviceInputSystem, elementToAttachTo?: any): any {\r\n        const evt = this._CreateEvent(elementToAttachTo);\r\n        this._CheckNonCharacterKeys(evt, deviceInputSystem);\r\n        evt.deviceType = DeviceType.Keyboard;\r\n        evt.deviceSlot = 0;\r\n        evt.inputIndex = inputIndex;\r\n\r\n        evt.type = currentState === 1 ? \"keydown\" : \"keyup\";\r\n        evt.key = String.fromCharCode(inputIndex);\r\n        evt.keyCode = inputIndex;\r\n\r\n        return evt;\r\n    }\r\n\r\n    /**\r\n     * Add parameters for non-character keys (Ctrl, Alt, Meta, Shift)\r\n     * @param evt Event object to add parameters to\r\n     * @param deviceInputSystem DeviceInputSystem to pull values from\r\n     */\r\n    private static _CheckNonCharacterKeys(evt: any, deviceInputSystem: IDeviceInputSystem): void {\r\n        const isKeyboardActive = deviceInputSystem.isDeviceAvailable(DeviceType.Keyboard);\r\n        const altKey = isKeyboardActive && deviceInputSystem.pollInput(DeviceType.Keyboard, 0, Constants.INPUT_ALT_KEY) === 1;\r\n        const ctrlKey = isKeyboardActive && deviceInputSystem.pollInput(DeviceType.Keyboard, 0, Constants.INPUT_CTRL_KEY) === 1;\r\n        const metaKey =\r\n            isKeyboardActive &&\r\n            (deviceInputSystem.pollInput(DeviceType.Keyboard, 0, Constants.INPUT_META_KEY1) === 1 ||\r\n                deviceInputSystem.pollInput(DeviceType.Keyboard, 0, Constants.INPUT_META_KEY2) === 1 ||\r\n                deviceInputSystem.pollInput(DeviceType.Keyboard, 0, Constants.INPUT_META_KEY3) === 1);\r\n        const shiftKey = isKeyboardActive && deviceInputSystem.pollInput(DeviceType.Keyboard, 0, Constants.INPUT_SHIFT_KEY) === 1;\r\n\r\n        evt.altKey = altKey;\r\n        evt.ctrlKey = ctrlKey;\r\n        evt.metaKey = metaKey;\r\n        evt.shiftKey = shiftKey;\r\n    }\r\n\r\n    /**\r\n     * Create base event object\r\n     * @param elementToAttachTo Value to use as event target\r\n     * @returns\r\n     */\r\n    private static _CreateEvent(elementToAttachTo: any): any {\r\n        const evt: { [k: string]: any } = {};\r\n        evt.preventDefault = () => {};\r\n        evt.target = elementToAttachTo;\r\n\r\n        return evt;\r\n    }\r\n}\r\n","import type { INative } from \"../Engines/Native/nativeInterfaces\";\r\nimport type { IUIEvent } from \"../Events/deviceInputEvents\";\r\nimport { DeviceEventFactory } from \"./eventFactory\";\r\nimport { DeviceType } from \"./InputDevices/deviceEnums\";\r\nimport type { IDeviceInputSystem } from \"./inputInterfaces\";\r\n\r\ndeclare const _native: INative;\r\n\r\n/** @internal */\r\nexport class NativeDeviceInputSystem implements IDeviceInputSystem {\r\n    private readonly _nativeInput: IDeviceInputSystem;\r\n\r\n    public constructor(\r\n        onDeviceConnected: (deviceType: DeviceType, deviceSlot: number) => void,\r\n        onDeviceDisconnected: (deviceType: DeviceType, deviceSlot: number) => void,\r\n        onInputChanged: (deviceType: DeviceType, deviceSlot: number, eventData: IUIEvent) => void\r\n    ) {\r\n        this._nativeInput = _native.DeviceInputSystem\r\n            ? new _native.DeviceInputSystem(onDeviceConnected, onDeviceDisconnected, (deviceType, deviceSlot, inputIndex, currentState) => {\r\n                  const evt = DeviceEventFactory.CreateDeviceEvent(deviceType, deviceSlot, inputIndex, currentState, this);\r\n\r\n                  onInputChanged(deviceType, deviceSlot, evt);\r\n              })\r\n            : this._createDummyNativeInput();\r\n    }\r\n\r\n    // Public functions\r\n    /**\r\n     * Checks for current device input value, given an id and input index. Throws exception if requested device not initialized.\r\n     * @param deviceType Enum specifying device type\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param inputIndex Id of input to be checked\r\n     * @returns Current value of input\r\n     */\r\n    public pollInput(deviceType: DeviceType, deviceSlot: number, inputIndex: number): number {\r\n        return this._nativeInput.pollInput(deviceType, deviceSlot, inputIndex);\r\n    }\r\n\r\n    /**\r\n     * Check for a specific device in the DeviceInputSystem\r\n     * @param deviceType Type of device to check for\r\n     * @returns bool with status of device's existence\r\n     */\r\n    public isDeviceAvailable(deviceType: DeviceType): boolean {\r\n        //TODO: FIx native side first\r\n        return deviceType === DeviceType.Mouse || deviceType === DeviceType.Touch;\r\n    }\r\n\r\n    /**\r\n     * Dispose of all the observables\r\n     */\r\n    public dispose(): void {\r\n        this._nativeInput.dispose();\r\n    }\r\n\r\n    /**\r\n     * For versions of BabylonNative that don't have the NativeInput plugin initialized, create a dummy version\r\n     * @returns Object with dummy functions\r\n     */\r\n    private _createDummyNativeInput() {\r\n        const nativeInput = {\r\n            pollInput: () => {\r\n                return 0;\r\n            },\r\n            isDeviceAvailable: () => {\r\n                return false;\r\n            },\r\n            dispose: () => {},\r\n        };\r\n\r\n        return nativeInput;\r\n    }\r\n}\r\n","import type { Engine } from \"../Engines/engine\";\r\nimport type { IPointerEvent, IUIEvent } from \"../Events/deviceInputEvents\";\r\nimport { IsNavigatorAvailable } from \"../Misc/domManagement\";\r\nimport type { Observer } from \"../Misc/observable\";\r\nimport { Tools } from \"../Misc/tools\";\r\nimport type { Nullable } from \"../types\";\r\nimport { DeviceEventFactory } from \"./eventFactory\";\r\nimport { DeviceType, PointerInput } from \"./InputDevices/deviceEnums\";\r\nimport type { IDeviceInputSystem } from \"./inputInterfaces\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nconst MAX_KEYCODES = 255;\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nconst MAX_POINTER_INPUTS = Object.keys(PointerInput).length / 2;\r\n\r\n/** @internal */\r\nexport class WebDeviceInputSystem implements IDeviceInputSystem {\r\n    // Private Members\r\n    private _inputs: Array<{ [deviceSlot: number]: Array<number> }> = [];\r\n    private _gamepads: Array<DeviceType>;\r\n    private _keyboardActive: boolean = false;\r\n    private _pointerActive: boolean = false;\r\n    private _elementToAttachTo: HTMLElement;\r\n    private _metaKeys: Array<number>;\r\n    private readonly _engine: Engine;\r\n    private readonly _usingSafari: boolean = Tools.IsSafari();\r\n    // Found solution for determining if MacOS is being used here:\r\n    // https://stackoverflow.com/questions/10527983/best-way-to-detect-mac-os-x-or-windows-computers-with-javascript-or-jquery\r\n    private readonly _usingMacOS: boolean = IsNavigatorAvailable() && /(Mac|iPhone|iPod|iPad)/i.test(navigator.platform);\r\n\r\n    private _onDeviceConnected: (deviceType: DeviceType, deviceSlot: number) => void;\r\n    private _onDeviceDisconnected: (deviceType: DeviceType, deviceSlot: number) => void;\r\n    private _onInputChanged: (deviceType: DeviceType, deviceSlot: number, eventData: IUIEvent) => void;\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _keyboardDownEvent = (evt: any) => {};\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _keyboardUpEvent = (evt: any) => {};\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _keyboardBlurEvent = (evt: any) => {};\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _pointerMoveEvent = (evt: any) => {};\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _pointerDownEvent = (evt: any) => {};\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _pointerUpEvent = (evt: any) => {};\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _pointerCancelEvent = (evt: any) => {};\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _pointerWheelEvent = (evt: any) => {};\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _pointerBlurEvent = (evt: any) => {};\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _pointerMacOSChromeOutEvent = (evt: any) => {};\r\n    private _wheelEventName: string;\r\n    private _eventsAttached: boolean = false;\r\n\r\n    private _mouseId = -1;\r\n    private readonly _isUsingFirefox = IsNavigatorAvailable() && navigator.userAgent && navigator.userAgent.indexOf(\"Firefox\") !== -1;\r\n    private readonly _isUsingChromium = IsNavigatorAvailable() && navigator.userAgent && navigator.userAgent.indexOf(\"Chrome\") !== -1;\r\n\r\n    // Array to store active Pointer ID values; prevents issues with negative pointerIds\r\n    private _activeTouchIds: Array<number>;\r\n    private _maxTouchPoints: number = 0;\r\n\r\n    private _pointerInputClearObserver: Nullable<Observer<Engine>> = null;\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _gamepadConnectedEvent = (evt: any) => {};\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _gamepadDisconnectedEvent = (evt: any) => {};\r\n\r\n    private _eventPrefix: string;\r\n\r\n    /**\r\n     * Constructor for the WebDeviceInputSystem\r\n     * @param engine Engine to reference\r\n     * @param onDeviceConnected Callback to execute when device is connected\r\n     * @param onDeviceDisconnected Callback to execute when device is disconnected\r\n     * @param onInputChanged Callback to execute when input changes on device\r\n     */\r\n    constructor(\r\n        engine: Engine,\r\n        onDeviceConnected: (deviceType: DeviceType, deviceSlot: number) => void,\r\n        onDeviceDisconnected: (deviceType: DeviceType, deviceSlot: number) => void,\r\n        onInputChanged: (deviceType: DeviceType, deviceSlot: number, eventData: IUIEvent) => void\r\n    ) {\r\n        this._eventPrefix = Tools.GetPointerPrefix(engine);\r\n        this._engine = engine;\r\n\r\n        this._onDeviceConnected = onDeviceConnected;\r\n        this._onDeviceDisconnected = onDeviceDisconnected;\r\n        this._onInputChanged = onInputChanged;\r\n\r\n        // If we need a pointerId, set one for future use\r\n        this._mouseId = this._isUsingFirefox ? 0 : 1;\r\n\r\n        this._enableEvents();\r\n\r\n        if (this._usingMacOS) {\r\n            this._metaKeys = [];\r\n        }\r\n\r\n        // Set callback to enable event handler switching when inputElement changes\r\n        if (!this._engine._onEngineViewChanged) {\r\n            this._engine._onEngineViewChanged = () => {\r\n                this._enableEvents();\r\n            };\r\n        }\r\n    }\r\n\r\n    // Public functions\r\n    /**\r\n     * Checks for current device input value, given an id and input index. Throws exception if requested device not initialized.\r\n     * @param deviceType Enum specifying device type\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param inputIndex Id of input to be checked\r\n     * @returns Current value of input\r\n     */\r\n    public pollInput(deviceType: DeviceType, deviceSlot: number, inputIndex: number): number {\r\n        const device = this._inputs[deviceType][deviceSlot];\r\n\r\n        if (!device) {\r\n            throw `Unable to find device ${DeviceType[deviceType]}`;\r\n        }\r\n\r\n        if (deviceType >= DeviceType.DualShock && deviceType <= DeviceType.DualSense) {\r\n            this._updateDevice(deviceType, deviceSlot, inputIndex);\r\n        }\r\n\r\n        const currentValue = device[inputIndex];\r\n        if (currentValue === undefined) {\r\n            throw `Unable to find input ${inputIndex} for device ${DeviceType[deviceType]} in slot ${deviceSlot}`;\r\n        }\r\n\r\n        if (inputIndex === PointerInput.Move) {\r\n            Tools.Warn(`Unable to provide information for PointerInput.Move.  Try using PointerInput.Horizontal or PointerInput.Vertical for move data.`);\r\n        }\r\n\r\n        return currentValue;\r\n    }\r\n\r\n    /**\r\n     * Check for a specific device in the DeviceInputSystem\r\n     * @param deviceType Type of device to check for\r\n     * @returns bool with status of device's existence\r\n     */\r\n    public isDeviceAvailable(deviceType: DeviceType): boolean {\r\n        return this._inputs[deviceType] !== undefined;\r\n    }\r\n\r\n    /**\r\n     * Dispose of all the eventlisteners\r\n     */\r\n    public dispose(): void {\r\n        // Callbacks\r\n        this._onDeviceConnected = () => {};\r\n        this._onDeviceDisconnected = () => {};\r\n        this._onInputChanged = () => {};\r\n        delete this._engine._onEngineViewChanged;\r\n\r\n        if (this._elementToAttachTo) {\r\n            this._disableEvents();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enable listening for user input events\r\n     */\r\n    private _enableEvents(): void {\r\n        const inputElement = this?._engine.getInputElement();\r\n        if (inputElement && (!this._eventsAttached || this._elementToAttachTo !== inputElement)) {\r\n            // Remove events before adding to avoid double events or simultaneous events on multiple canvases\r\n            this._disableEvents();\r\n\r\n            // If the inputs array has already been created, zero it out to before setting up events\r\n            if (this._inputs) {\r\n                for (const inputs of this._inputs) {\r\n                    if (inputs) {\r\n                        for (const deviceSlotKey in inputs) {\r\n                            const deviceSlot = +deviceSlotKey;\r\n                            const device = inputs[deviceSlot];\r\n                            if (device) {\r\n                                for (let inputIndex = 0; inputIndex < device.length; inputIndex++) {\r\n                                    device[inputIndex] = 0;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            this._elementToAttachTo = inputElement;\r\n            // Set tab index for the inputElement to the engine's canvasTabIndex, if and only if the element's tab index is -1\r\n            this._elementToAttachTo.tabIndex = this._elementToAttachTo.tabIndex !== -1 ? this._elementToAttachTo.tabIndex : this._engine.canvasTabIndex;\r\n            this._handleKeyActions();\r\n            this._handlePointerActions();\r\n            this._handleGamepadActions();\r\n            this._eventsAttached = true;\r\n\r\n            // Check for devices that are already connected but aren't registered. Currently, only checks for gamepads and mouse\r\n            this._checkForConnectedDevices();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disable listening for user input events\r\n     */\r\n    private _disableEvents(): void {\r\n        if (this._elementToAttachTo) {\r\n            // Blur Events\r\n            this._elementToAttachTo.removeEventListener(\"blur\", this._keyboardBlurEvent);\r\n            this._elementToAttachTo.removeEventListener(\"blur\", this._pointerBlurEvent);\r\n\r\n            // Keyboard Events\r\n            this._elementToAttachTo.removeEventListener(\"keydown\", this._keyboardDownEvent);\r\n            this._elementToAttachTo.removeEventListener(\"keyup\", this._keyboardUpEvent);\r\n\r\n            // Pointer Events\r\n            this._elementToAttachTo.removeEventListener(this._eventPrefix + \"move\", this._pointerMoveEvent);\r\n            this._elementToAttachTo.removeEventListener(this._eventPrefix + \"down\", this._pointerDownEvent);\r\n            this._elementToAttachTo.removeEventListener(this._eventPrefix + \"up\", this._pointerUpEvent);\r\n            this._elementToAttachTo.removeEventListener(this._eventPrefix + \"cancel\", this._pointerCancelEvent);\r\n            this._elementToAttachTo.removeEventListener(this._wheelEventName, this._pointerWheelEvent);\r\n            if (this._usingMacOS && this._isUsingChromium) {\r\n                this._elementToAttachTo.removeEventListener(\"lostpointercapture\", this._pointerMacOSChromeOutEvent);\r\n            }\r\n\r\n            // Gamepad Events\r\n            window.removeEventListener(\"gamepadconnected\", this._gamepadConnectedEvent);\r\n            window.removeEventListener(\"gamepaddisconnected\", this._gamepadDisconnectedEvent);\r\n        }\r\n\r\n        if (this._pointerInputClearObserver) {\r\n            this._engine.onEndFrameObservable.remove(this._pointerInputClearObserver);\r\n        }\r\n\r\n        this._eventsAttached = false;\r\n    }\r\n\r\n    /**\r\n     * Checks for existing connections to devices and register them, if necessary\r\n     * Currently handles gamepads and mouse\r\n     */\r\n    private _checkForConnectedDevices(): void {\r\n        if (navigator.getGamepads) {\r\n            const gamepads = navigator.getGamepads();\r\n\r\n            for (const gamepad of gamepads) {\r\n                if (gamepad) {\r\n                    this._addGamePad(gamepad);\r\n                }\r\n            }\r\n        }\r\n\r\n        // If the device in use has mouse capabilities, pre-register mouse\r\n        if (typeof matchMedia === \"function\" && matchMedia(\"(pointer:fine)\").matches) {\r\n            // This will provide a dummy value for the cursor position and is expected to be overridden when the first mouse event happens.\r\n            // There isn't any good way to get the current position outside of a pointer event so that's why this was done.\r\n            this._addPointerDevice(DeviceType.Mouse, 0, 0, 0);\r\n        }\r\n    }\r\n\r\n    // Private functions\r\n    /**\r\n     * Add a gamepad to the DeviceInputSystem\r\n     * @param gamepad A single DOM Gamepad object\r\n     */\r\n    private _addGamePad(gamepad: any): void {\r\n        const deviceType = this._getGamepadDeviceType(gamepad.id);\r\n        const deviceSlot = gamepad.index;\r\n\r\n        this._gamepads = this._gamepads || new Array<DeviceType>(gamepad.index + 1);\r\n        this._registerDevice(deviceType, deviceSlot, gamepad.buttons.length + gamepad.axes.length);\r\n\r\n        this._gamepads[deviceSlot] = deviceType;\r\n    }\r\n\r\n    /**\r\n     * Add pointer device to DeviceInputSystem\r\n     * @param deviceType Type of Pointer to add\r\n     * @param deviceSlot Pointer ID (0 for mouse, pointerId for Touch)\r\n     * @param currentX Current X at point of adding\r\n     * @param currentY Current Y at point of adding\r\n     */\r\n    private _addPointerDevice(deviceType: DeviceType, deviceSlot: number, currentX: number, currentY: number): void {\r\n        if (!this._pointerActive) {\r\n            this._pointerActive = true;\r\n        }\r\n        this._registerDevice(deviceType, deviceSlot, MAX_POINTER_INPUTS);\r\n        const pointer = this._inputs[deviceType][deviceSlot]; /* initialize our pointer position immediately after registration */\r\n        pointer[0] = currentX;\r\n        pointer[1] = currentY;\r\n    }\r\n\r\n    /**\r\n     * Add device and inputs to device array\r\n     * @param deviceType Enum specifying device type\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param numberOfInputs Number of input entries to create for given device\r\n     */\r\n    private _registerDevice(deviceType: DeviceType, deviceSlot: number, numberOfInputs: number): void {\r\n        if (deviceSlot === undefined) {\r\n            throw `Unable to register device ${DeviceType[deviceType]} to undefined slot.`;\r\n        }\r\n\r\n        if (!this._inputs[deviceType]) {\r\n            this._inputs[deviceType] = {};\r\n        }\r\n\r\n        if (!this._inputs[deviceType][deviceSlot]) {\r\n            const device = new Array<number>(numberOfInputs);\r\n\r\n            device.fill(0);\r\n\r\n            this._inputs[deviceType][deviceSlot] = device;\r\n            this._onDeviceConnected(deviceType, deviceSlot);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Given a specific device name, remove that device from the device map\r\n     * @param deviceType Enum specifying device type\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     */\r\n    private _unregisterDevice(deviceType: DeviceType, deviceSlot: number): void {\r\n        if (this._inputs[deviceType][deviceSlot]) {\r\n            delete this._inputs[deviceType][deviceSlot];\r\n            this._onDeviceDisconnected(deviceType, deviceSlot);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle all actions that come from keyboard interaction\r\n     */\r\n    private _handleKeyActions(): void {\r\n        this._keyboardDownEvent = (evt) => {\r\n            if (!this._keyboardActive) {\r\n                this._keyboardActive = true;\r\n                this._registerDevice(DeviceType.Keyboard, 0, MAX_KEYCODES);\r\n            }\r\n\r\n            const kbKey = this._inputs[DeviceType.Keyboard][0];\r\n            if (kbKey) {\r\n                kbKey[evt.keyCode] = 1;\r\n\r\n                const deviceEvent = evt as IUIEvent;\r\n                deviceEvent.inputIndex = evt.keyCode;\r\n\r\n                if (this._usingMacOS && evt.metaKey && evt.key !== \"Meta\") {\r\n                    if (!this._metaKeys.includes(evt.keyCode)) {\r\n                        this._metaKeys.push(evt.keyCode);\r\n                    }\r\n                }\r\n\r\n                this._onInputChanged(DeviceType.Keyboard, 0, deviceEvent);\r\n            }\r\n        };\r\n\r\n        this._keyboardUpEvent = (evt) => {\r\n            if (!this._keyboardActive) {\r\n                this._keyboardActive = true;\r\n                this._registerDevice(DeviceType.Keyboard, 0, MAX_KEYCODES);\r\n            }\r\n\r\n            const kbKey = this._inputs[DeviceType.Keyboard][0];\r\n            if (kbKey) {\r\n                kbKey[evt.keyCode] = 0;\r\n\r\n                const deviceEvent = evt as IUIEvent;\r\n                deviceEvent.inputIndex = evt.keyCode;\r\n\r\n                if (this._usingMacOS && evt.key === \"Meta\" && this._metaKeys.length > 0) {\r\n                    for (const keyCode of this._metaKeys) {\r\n                        const deviceEvent: IUIEvent = DeviceEventFactory.CreateDeviceEvent(DeviceType.Keyboard, 0, keyCode, 0, this, this._elementToAttachTo);\r\n                        kbKey[keyCode] = 0;\r\n                        this._onInputChanged(DeviceType.Keyboard, 0, deviceEvent);\r\n                    }\r\n                    this._metaKeys.splice(0, this._metaKeys.length);\r\n                }\r\n\r\n                this._onInputChanged(DeviceType.Keyboard, 0, deviceEvent);\r\n            }\r\n        };\r\n\r\n        this._keyboardBlurEvent = () => {\r\n            if (this._keyboardActive) {\r\n                const kbKey = this._inputs[DeviceType.Keyboard][0];\r\n\r\n                for (let i = 0; i < kbKey.length; i++) {\r\n                    if (kbKey[i] !== 0) {\r\n                        kbKey[i] = 0;\r\n\r\n                        const deviceEvent: IUIEvent = DeviceEventFactory.CreateDeviceEvent(DeviceType.Keyboard, 0, i, 0, this, this._elementToAttachTo);\r\n\r\n                        this._onInputChanged(DeviceType.Keyboard, 0, deviceEvent);\r\n                    }\r\n                }\r\n                if (this._usingMacOS) {\r\n                    this._metaKeys.splice(0, this._metaKeys.length);\r\n                }\r\n            }\r\n        };\r\n\r\n        this._elementToAttachTo.addEventListener(\"keydown\", this._keyboardDownEvent);\r\n        this._elementToAttachTo.addEventListener(\"keyup\", this._keyboardUpEvent);\r\n        this._elementToAttachTo.addEventListener(\"blur\", this._keyboardBlurEvent);\r\n    }\r\n\r\n    /**\r\n     * Handle all actions that come from pointer interaction\r\n     */\r\n    private _handlePointerActions(): void {\r\n        // If maxTouchPoints is defined, use that value.  Otherwise, allow for a minimum for supported gestures like pinch\r\n        this._maxTouchPoints = (IsNavigatorAvailable() && navigator.maxTouchPoints) || 2;\r\n        if (!this._activeTouchIds) {\r\n            this._activeTouchIds = new Array<number>(this._maxTouchPoints);\r\n        }\r\n\r\n        for (let i = 0; i < this._maxTouchPoints; i++) {\r\n            this._activeTouchIds[i] = -1;\r\n        }\r\n\r\n        this._pointerMoveEvent = (evt) => {\r\n            const deviceType = this._getPointerType(evt);\r\n            let deviceSlot = deviceType === DeviceType.Mouse ? 0 : this._activeTouchIds.indexOf(evt.pointerId);\r\n\r\n            // In the event that we're gettting pointermove events from touch inputs that we aren't tracking,\r\n            // look for an available slot and retroactively connect it.\r\n            if (deviceType === DeviceType.Touch && deviceSlot === -1) {\r\n                const idx = this._activeTouchIds.indexOf(-1);\r\n\r\n                if (idx >= 0) {\r\n                    deviceSlot = idx;\r\n                    this._activeTouchIds[idx] = evt.pointerId;\r\n                    // Because this is a \"new\" input, inform the connected callback\r\n                    this._onDeviceConnected(deviceType, deviceSlot);\r\n                } else {\r\n                    // We can't find an open slot to store new pointer so just return (can only support max number of touches)\r\n                    Tools.Warn(`Max number of touches exceeded.  Ignoring touches in excess of ${this._maxTouchPoints}`);\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if (!this._inputs[deviceType]) {\r\n                this._inputs[deviceType] = {};\r\n            }\r\n\r\n            if (!this._inputs[deviceType][deviceSlot]) {\r\n                this._addPointerDevice(deviceType, deviceSlot, evt.clientX, evt.clientY);\r\n            }\r\n\r\n            const pointer = this._inputs[deviceType][deviceSlot];\r\n            if (pointer) {\r\n                const deviceEvent = evt as IPointerEvent;\r\n                deviceEvent.inputIndex = PointerInput.Move;\r\n\r\n                pointer[PointerInput.Horizontal] = evt.clientX;\r\n                pointer[PointerInput.Vertical] = evt.clientY;\r\n\r\n                // For touches that aren't started with a down, we need to set the button state to 1\r\n                if (deviceType === DeviceType.Touch && pointer[PointerInput.LeftClick] === 0) {\r\n                    pointer[PointerInput.LeftClick] = 1;\r\n                }\r\n\r\n                if (evt.pointerId === undefined) {\r\n                    evt.pointerId = this._mouseId;\r\n                }\r\n\r\n                this._onInputChanged(deviceType, deviceSlot, deviceEvent);\r\n\r\n                // Lets Propagate the event for move with same position.\r\n                if (!this._usingSafari && evt.button !== -1) {\r\n                    deviceEvent.inputIndex = evt.button + 2;\r\n                    pointer[evt.button + 2] = pointer[evt.button + 2] ? 0 : 1; // Reverse state of button if evt.button has value\r\n                    this._onInputChanged(deviceType, deviceSlot, deviceEvent);\r\n                }\r\n            }\r\n        };\r\n\r\n        this._pointerDownEvent = (evt) => {\r\n            const deviceType = this._getPointerType(evt);\r\n            let deviceSlot = deviceType === DeviceType.Mouse ? 0 : evt.pointerId;\r\n\r\n            if (deviceType === DeviceType.Touch) {\r\n                const idx = this._activeTouchIds.indexOf(-1);\r\n\r\n                if (idx >= 0) {\r\n                    deviceSlot = idx;\r\n                    this._activeTouchIds[idx] = evt.pointerId;\r\n                } else {\r\n                    // We can't find an open slot to store new pointer so just return (can only support max number of touches)\r\n                    Tools.Warn(`Max number of touches exceeded.  Ignoring touches in excess of ${this._maxTouchPoints}`);\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if (!this._inputs[deviceType]) {\r\n                this._inputs[deviceType] = {};\r\n            }\r\n\r\n            if (!this._inputs[deviceType][deviceSlot]) {\r\n                this._addPointerDevice(deviceType, deviceSlot, evt.clientX, evt.clientY);\r\n            } else if (deviceType === DeviceType.Touch) {\r\n                this._onDeviceConnected(deviceType, deviceSlot);\r\n            }\r\n\r\n            const pointer = this._inputs[deviceType][deviceSlot];\r\n            if (pointer) {\r\n                const previousHorizontal = pointer[PointerInput.Horizontal];\r\n                const previousVertical = pointer[PointerInput.Vertical];\r\n\r\n                if (deviceType === DeviceType.Mouse) {\r\n                    // Mouse; Set pointerId if undefined\r\n                    if (evt.pointerId === undefined) {\r\n                        evt.pointerId = this._mouseId;\r\n                    }\r\n\r\n                    if (!document.pointerLockElement) {\r\n                        try {\r\n                            this._elementToAttachTo.setPointerCapture(this._mouseId);\r\n                        } catch (e) {\r\n                            // DO NOTHING\r\n                        }\r\n                    }\r\n                } else {\r\n                    // Touch; Since touches are dynamically assigned, only set capture if we have an id\r\n                    if (evt.pointerId && !document.pointerLockElement) {\r\n                        try {\r\n                            this._elementToAttachTo.setPointerCapture(evt.pointerId);\r\n                        } catch (e) {\r\n                            // DO NOTHING\r\n                        }\r\n                    }\r\n                }\r\n\r\n                pointer[PointerInput.Horizontal] = evt.clientX;\r\n                pointer[PointerInput.Vertical] = evt.clientY;\r\n                pointer[evt.button + 2] = 1;\r\n\r\n                const deviceEvent = evt as IUIEvent;\r\n\r\n                // NOTE: The +2 used here to is because PointerInput has the same value progression for its mouse buttons as PointerEvent.button\r\n                // However, we have our X and Y values front-loaded to group together the touch inputs but not break this progression\r\n                // EG. ([X, Y, Left-click], Middle-click, etc...)\r\n                deviceEvent.inputIndex = evt.button + 2;\r\n\r\n                this._onInputChanged(deviceType, deviceSlot, deviceEvent);\r\n\r\n                if (previousHorizontal !== evt.clientX || previousVertical !== evt.clientY) {\r\n                    deviceEvent.inputIndex = PointerInput.Move;\r\n                    this._onInputChanged(deviceType, deviceSlot, deviceEvent);\r\n                }\r\n            }\r\n        };\r\n\r\n        this._pointerUpEvent = (evt) => {\r\n            const deviceType = this._getPointerType(evt);\r\n            const deviceSlot = deviceType === DeviceType.Mouse ? 0 : this._activeTouchIds.indexOf(evt.pointerId);\r\n\r\n            if (deviceType === DeviceType.Touch) {\r\n                // If we're getting a pointerup event for a touch that isn't active, just return.\r\n                if (deviceSlot === -1) {\r\n                    return;\r\n                } else {\r\n                    this._activeTouchIds[deviceSlot] = -1;\r\n                }\r\n            }\r\n\r\n            const pointer = this._inputs[deviceType]?.[deviceSlot];\r\n            if (pointer && pointer[evt.button + 2] !== 0) {\r\n                const previousHorizontal = pointer[PointerInput.Horizontal];\r\n                const previousVertical = pointer[PointerInput.Vertical];\r\n\r\n                pointer[PointerInput.Horizontal] = evt.clientX;\r\n                pointer[PointerInput.Vertical] = evt.clientY;\r\n                pointer[evt.button + 2] = 0;\r\n\r\n                const deviceEvent = evt as IUIEvent;\r\n\r\n                if (evt.pointerId === undefined) {\r\n                    evt.pointerId = this._mouseId;\r\n                }\r\n\r\n                if (previousHorizontal !== evt.clientX || previousVertical !== evt.clientY) {\r\n                    deviceEvent.inputIndex = PointerInput.Move;\r\n                    this._onInputChanged(deviceType, deviceSlot, deviceEvent);\r\n                }\r\n\r\n                // NOTE: The +2 used here to is because PointerInput has the same value progression for its mouse buttons as PointerEvent.button\r\n                // However, we have our X and Y values front-loaded to group together the touch inputs but not break this progression\r\n                // EG. ([X, Y, Left-click], Middle-click, etc...)\r\n                deviceEvent.inputIndex = evt.button + 2;\r\n\r\n                if (deviceType === DeviceType.Mouse && this._mouseId >= 0 && this._elementToAttachTo.hasPointerCapture?.(this._mouseId)) {\r\n                    this._elementToAttachTo.releasePointerCapture(this._mouseId);\r\n                } else if (evt.pointerId && this._elementToAttachTo.hasPointerCapture?.(evt.pointerId)) {\r\n                    this._elementToAttachTo.releasePointerCapture(evt.pointerId);\r\n                }\r\n\r\n                this._onInputChanged(deviceType, deviceSlot, deviceEvent);\r\n\r\n                if (deviceType === DeviceType.Touch) {\r\n                    this._onDeviceDisconnected(deviceType, deviceSlot);\r\n                }\r\n            }\r\n        };\r\n\r\n        this._pointerCancelEvent = (evt) => {\r\n            if (evt.pointerType === \"mouse\") {\r\n                const pointer = this._inputs[DeviceType.Mouse][0];\r\n\r\n                if (this._mouseId >= 0 && this._elementToAttachTo.hasPointerCapture?.(this._mouseId)) {\r\n                    this._elementToAttachTo.releasePointerCapture(this._mouseId);\r\n                }\r\n\r\n                for (let inputIndex = PointerInput.LeftClick; inputIndex <= PointerInput.BrowserForward; inputIndex++) {\r\n                    if (pointer[inputIndex] === 1) {\r\n                        pointer[inputIndex] = 0;\r\n\r\n                        const deviceEvent: IUIEvent = DeviceEventFactory.CreateDeviceEvent(DeviceType.Mouse, 0, inputIndex, 0, this, this._elementToAttachTo);\r\n\r\n                        this._onInputChanged(DeviceType.Mouse, 0, deviceEvent);\r\n                    }\r\n                }\r\n            } else {\r\n                const deviceSlot = this._activeTouchIds.indexOf(evt.pointerId);\r\n\r\n                // If we're getting a pointercancel event for a touch that isn't active, just return\r\n                if (deviceSlot === -1) {\r\n                    return;\r\n                }\r\n\r\n                if (this._elementToAttachTo.hasPointerCapture?.(evt.pointerId)) {\r\n                    this._elementToAttachTo.releasePointerCapture(evt.pointerId);\r\n                }\r\n\r\n                this._inputs[DeviceType.Touch][deviceSlot][PointerInput.LeftClick] = 0;\r\n\r\n                const deviceEvent: IUIEvent = DeviceEventFactory.CreateDeviceEvent(\r\n                    DeviceType.Touch,\r\n                    deviceSlot,\r\n                    PointerInput.LeftClick,\r\n                    0,\r\n                    this,\r\n                    this._elementToAttachTo,\r\n                    evt.pointerId\r\n                );\r\n\r\n                this._onInputChanged(DeviceType.Touch, deviceSlot, deviceEvent);\r\n\r\n                this._activeTouchIds[deviceSlot] = -1;\r\n                this._onDeviceDisconnected(DeviceType.Touch, deviceSlot);\r\n            }\r\n        };\r\n\r\n        // Set Wheel Event Name, code originally from scene.inputManager\r\n        this._wheelEventName =\r\n            \"onwheel\" in document.createElement(\"div\")\r\n                ? \"wheel\" // Modern browsers support \"wheel\"\r\n                : (<any>document).onmousewheel !== undefined\r\n                ? \"mousewheel\" // Webkit and IE support at least \"mousewheel\"\r\n                : \"DOMMouseScroll\"; // let's assume that remaining browsers are older Firefox\r\n\r\n        // Code originally in scene.inputManager.ts\r\n        // Chrome reports warning in console if wheel listener doesn't set an explicit passive option.\r\n        // IE11 only supports captureEvent:boolean, not options:object, and it defaults to false.\r\n        // Feature detection technique copied from: https://github.com/github/eventlistener-polyfill (MIT license)\r\n        let passiveSupported = false;\r\n        const noop = function () {};\r\n\r\n        try {\r\n            const options = Object.defineProperty({}, \"passive\", {\r\n                get: function () {\r\n                    passiveSupported = true;\r\n                },\r\n            });\r\n\r\n            this._elementToAttachTo.addEventListener(\"test\", noop, options);\r\n            this._elementToAttachTo.removeEventListener(\"test\", noop, options);\r\n        } catch (e) {\r\n            /* */\r\n        }\r\n\r\n        this._pointerBlurEvent = () => {\r\n            // Handle mouse buttons\r\n            if (this.isDeviceAvailable(DeviceType.Mouse)) {\r\n                const pointer = this._inputs[DeviceType.Mouse][0];\r\n\r\n                if (this._mouseId >= 0 && this._elementToAttachTo.hasPointerCapture?.(this._mouseId)) {\r\n                    this._elementToAttachTo.releasePointerCapture(this._mouseId);\r\n                }\r\n\r\n                for (let inputIndex = PointerInput.LeftClick; inputIndex <= PointerInput.BrowserForward; inputIndex++) {\r\n                    if (pointer[inputIndex] === 1) {\r\n                        pointer[inputIndex] = 0;\r\n\r\n                        const deviceEvent: IUIEvent = DeviceEventFactory.CreateDeviceEvent(DeviceType.Mouse, 0, inputIndex, 0, this, this._elementToAttachTo);\r\n\r\n                        this._onInputChanged(DeviceType.Mouse, 0, deviceEvent);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Handle Active Touches\r\n            if (this.isDeviceAvailable(DeviceType.Touch)) {\r\n                const pointer = this._inputs[DeviceType.Touch];\r\n\r\n                for (let deviceSlot = 0; deviceSlot < this._activeTouchIds.length; deviceSlot++) {\r\n                    const pointerId = this._activeTouchIds[deviceSlot];\r\n\r\n                    if (this._elementToAttachTo.hasPointerCapture?.(pointerId)) {\r\n                        this._elementToAttachTo.releasePointerCapture(pointerId);\r\n                    }\r\n\r\n                    if (pointerId !== -1 && pointer[deviceSlot]?.[PointerInput.LeftClick] === 1) {\r\n                        pointer[deviceSlot][PointerInput.LeftClick] = 0;\r\n\r\n                        const deviceEvent: IUIEvent = DeviceEventFactory.CreateDeviceEvent(\r\n                            DeviceType.Touch,\r\n                            deviceSlot,\r\n                            PointerInput.LeftClick,\r\n                            0,\r\n                            this,\r\n                            this._elementToAttachTo,\r\n                            pointerId\r\n                        );\r\n\r\n                        this._onInputChanged(DeviceType.Touch, deviceSlot, deviceEvent);\r\n\r\n                        this._activeTouchIds[deviceSlot] = -1;\r\n                        this._onDeviceDisconnected(DeviceType.Touch, deviceSlot);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        this._pointerWheelEvent = (evt) => {\r\n            const deviceType = DeviceType.Mouse;\r\n            const deviceSlot = 0;\r\n\r\n            if (!this._inputs[deviceType]) {\r\n                this._inputs[deviceType] = [];\r\n            }\r\n\r\n            if (!this._inputs[deviceType][deviceSlot]) {\r\n                this._pointerActive = true;\r\n                this._registerDevice(deviceType, deviceSlot, MAX_POINTER_INPUTS);\r\n            }\r\n\r\n            const pointer = this._inputs[deviceType][deviceSlot];\r\n            if (pointer) {\r\n                pointer[PointerInput.MouseWheelX] = evt.deltaX || 0;\r\n                pointer[PointerInput.MouseWheelY] = evt.deltaY || evt.wheelDelta || 0;\r\n                pointer[PointerInput.MouseWheelZ] = evt.deltaZ || 0;\r\n\r\n                const deviceEvent = evt as IUIEvent;\r\n                // By default, there is no pointerId for mouse wheel events so we'll add one here\r\n                // This logic was originally in the InputManager but was added here to make the\r\n                // InputManager more platform-agnostic\r\n                if (evt.pointerId === undefined) {\r\n                    evt.pointerId = this._mouseId;\r\n                }\r\n\r\n                if (pointer[PointerInput.MouseWheelX] !== 0) {\r\n                    deviceEvent.inputIndex = PointerInput.MouseWheelX;\r\n                    this._onInputChanged(deviceType, deviceSlot, deviceEvent);\r\n                }\r\n                if (pointer[PointerInput.MouseWheelY] !== 0) {\r\n                    deviceEvent.inputIndex = PointerInput.MouseWheelY;\r\n                    this._onInputChanged(deviceType, deviceSlot, deviceEvent);\r\n                }\r\n                if (pointer[PointerInput.MouseWheelZ] !== 0) {\r\n                    deviceEvent.inputIndex = PointerInput.MouseWheelZ;\r\n                    this._onInputChanged(deviceType, deviceSlot, deviceEvent);\r\n                }\r\n            }\r\n        };\r\n\r\n        // Workaround for MacOS Chromium Browsers for lost pointer capture bug\r\n        if (this._usingMacOS && this._isUsingChromium) {\r\n            this._pointerMacOSChromeOutEvent = (evt) => {\r\n                if (evt.buttons > 1) {\r\n                    this._pointerCancelEvent(evt);\r\n                }\r\n            };\r\n            this._elementToAttachTo.addEventListener(\"lostpointercapture\", this._pointerMacOSChromeOutEvent);\r\n        }\r\n\r\n        this._elementToAttachTo.addEventListener(this._eventPrefix + \"move\", this._pointerMoveEvent);\r\n        this._elementToAttachTo.addEventListener(this._eventPrefix + \"down\", this._pointerDownEvent);\r\n        this._elementToAttachTo.addEventListener(this._eventPrefix + \"up\", this._pointerUpEvent);\r\n        this._elementToAttachTo.addEventListener(this._eventPrefix + \"cancel\", this._pointerCancelEvent);\r\n        this._elementToAttachTo.addEventListener(\"blur\", this._pointerBlurEvent);\r\n        this._elementToAttachTo.addEventListener(this._wheelEventName, this._pointerWheelEvent, passiveSupported ? { passive: false } : false);\r\n\r\n        // Since there's no up or down event for mouse wheel or delta x/y, clear mouse values at end of frame\r\n        this._pointerInputClearObserver = this._engine.onEndFrameObservable.add(() => {\r\n            if (this.isDeviceAvailable(DeviceType.Mouse)) {\r\n                const pointer = this._inputs[DeviceType.Mouse][0];\r\n                pointer[PointerInput.MouseWheelX] = 0;\r\n                pointer[PointerInput.MouseWheelY] = 0;\r\n                pointer[PointerInput.MouseWheelZ] = 0;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handle all actions that come from gamepad interaction\r\n     */\r\n    private _handleGamepadActions(): void {\r\n        this._gamepadConnectedEvent = (evt: any) => {\r\n            this._addGamePad(evt.gamepad);\r\n        };\r\n\r\n        this._gamepadDisconnectedEvent = (evt: any) => {\r\n            if (this._gamepads) {\r\n                const deviceType = this._getGamepadDeviceType(evt.gamepad.id);\r\n                const deviceSlot = evt.gamepad.index;\r\n\r\n                this._unregisterDevice(deviceType, deviceSlot);\r\n                delete this._gamepads[deviceSlot];\r\n            }\r\n        };\r\n\r\n        window.addEventListener(\"gamepadconnected\", this._gamepadConnectedEvent);\r\n        window.addEventListener(\"gamepaddisconnected\", this._gamepadDisconnectedEvent);\r\n    }\r\n\r\n    /**\r\n     * Update all non-event based devices with each frame\r\n     * @param deviceType Enum specifying device type\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param inputIndex Id of input to be checked\r\n     */\r\n    private _updateDevice(deviceType: DeviceType, deviceSlot: number, inputIndex: number): void {\r\n        // Gamepads\r\n        const gp = navigator.getGamepads()[deviceSlot];\r\n\r\n        if (gp && deviceType === this._gamepads[deviceSlot]) {\r\n            const device = this._inputs[deviceType][deviceSlot];\r\n\r\n            if (inputIndex >= gp.buttons.length) {\r\n                device[inputIndex] = gp.axes[inputIndex - gp.buttons.length].valueOf();\r\n            } else {\r\n                device[inputIndex] = gp.buttons[inputIndex].value;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets DeviceType from the device name\r\n     * @param deviceName Name of Device from DeviceInputSystem\r\n     * @returns DeviceType enum value\r\n     */\r\n    private _getGamepadDeviceType(deviceName: string): DeviceType {\r\n        if (deviceName.indexOf(\"054c\") !== -1) {\r\n            // DualShock 4 Gamepad\r\n            return deviceName.indexOf(\"0ce6\") !== -1 ? DeviceType.DualSense : DeviceType.DualShock;\r\n        } else if (deviceName.indexOf(\"Xbox One\") !== -1 || deviceName.search(\"Xbox 360\") !== -1 || deviceName.search(\"xinput\") !== -1) {\r\n            // Xbox Gamepad\r\n            return DeviceType.Xbox;\r\n        } else if (deviceName.indexOf(\"057e\") !== -1) {\r\n            // Switch Gamepad\r\n            return DeviceType.Switch;\r\n        }\r\n\r\n        return DeviceType.Generic;\r\n    }\r\n\r\n    /**\r\n     * Get DeviceType from a given pointer/mouse/touch event.\r\n     * @param evt PointerEvent to evaluate\r\n     * @returns DeviceType interpreted from event\r\n     */\r\n    private _getPointerType(evt: any): DeviceType {\r\n        let deviceType = DeviceType.Mouse;\r\n\r\n        if (evt.pointerType === \"touch\" || evt.pointerType === \"pen\" || evt.touches) {\r\n            deviceType = DeviceType.Touch;\r\n        }\r\n\r\n        return deviceType;\r\n    }\r\n}\r\n","import type { IDisposable } from \"../scene\";\r\nimport { DeviceType } from \"./InputDevices/deviceEnums\";\r\nimport type { Observable } from \"../Misc/observable\";\r\nimport type { IDeviceInputSystem } from \"./inputInterfaces\";\r\nimport { NativeDeviceInputSystem } from \"./nativeDeviceInputSystem\";\r\nimport { WebDeviceInputSystem } from \"./webDeviceInputSystem\";\r\nimport { DeviceSource } from \"./InputDevices/deviceSource\";\r\nimport type { INative } from \"../Engines/Native/nativeInterfaces\";\r\nimport type { Engine } from \"../Engines/engine\";\r\nimport type { IUIEvent } from \"../Events/deviceInputEvents\";\r\n\r\ntype Distribute<T> = T extends DeviceType ? DeviceSource<T> : never;\r\n\r\nexport type DeviceSourceType = Distribute<DeviceType>;\r\n\r\ndeclare const _native: INative;\r\n\r\ndeclare module \"../Engines/engine\" {\r\n    interface Engine {\r\n        /** @internal */\r\n        _deviceSourceManager?: InternalDeviceSourceManager;\r\n    }\r\n}\r\n\r\n/** @internal */\r\nexport interface IObservableManager {\r\n    onDeviceConnectedObservable: Observable<DeviceSourceType>;\r\n    onDeviceDisconnectedObservable: Observable<DeviceSourceType>;\r\n\r\n    // Functions\r\n    _onInputChanged(deviceType: DeviceType, deviceSlot: number, eventData: IUIEvent): void;\r\n    _addDevice(deviceSource: DeviceSource<DeviceType>): void;\r\n    _removeDevice(deviceType: DeviceType, deviceSlot: number): void;\r\n}\r\n\r\n/** @internal */\r\nexport class InternalDeviceSourceManager implements IDisposable {\r\n    // Public Members\r\n    public readonly _deviceInputSystem: IDeviceInputSystem;\r\n\r\n    // Private Members\r\n    // This is a master list of all device type/slot combos\r\n    private readonly _devices: Array<Array<number>>;\r\n\r\n    private readonly _registeredManagers = new Array<IObservableManager>();\r\n\r\n    public _refCount = 0;\r\n\r\n    public constructor(engine: Engine) {\r\n        const numberOfDeviceTypes = Object.keys(DeviceType).length / 2;\r\n        this._devices = new Array<Array<number>>(numberOfDeviceTypes);\r\n\r\n        const onDeviceConnected = (deviceType: DeviceType, deviceSlot: number) => {\r\n            if (!this._devices[deviceType]) {\r\n                this._devices[deviceType] = new Array<number>();\r\n            }\r\n\r\n            if (!this._devices[deviceType][deviceSlot]) {\r\n                this._devices[deviceType][deviceSlot] = deviceSlot;\r\n            }\r\n            for (const manager of this._registeredManagers) {\r\n                const deviceSource = new DeviceSource(this._deviceInputSystem, deviceType, deviceSlot);\r\n                manager._addDevice(deviceSource);\r\n            }\r\n        };\r\n\r\n        const onDeviceDisconnected = (deviceType: DeviceType, deviceSlot: number) => {\r\n            if (this._devices[deviceType]?.[deviceSlot]) {\r\n                delete this._devices[deviceType][deviceSlot];\r\n            }\r\n            for (const manager of this._registeredManagers) {\r\n                manager._removeDevice(deviceType, deviceSlot);\r\n            }\r\n        };\r\n\r\n        const onInputChanged = (deviceType: DeviceType, deviceSlot: number, eventData: IUIEvent) => {\r\n            if (eventData) {\r\n                for (const manager of this._registeredManagers) {\r\n                    manager._onInputChanged(deviceType, deviceSlot, eventData);\r\n                }\r\n            }\r\n        };\r\n\r\n        if (typeof _native !== \"undefined\") {\r\n            this._deviceInputSystem = new NativeDeviceInputSystem(onDeviceConnected, onDeviceDisconnected, onInputChanged);\r\n        } else {\r\n            this._deviceInputSystem = new WebDeviceInputSystem(engine, onDeviceConnected, onDeviceDisconnected, onInputChanged);\r\n        }\r\n    }\r\n\r\n    // Public Functions\r\n    public readonly registerManager = (manager: IObservableManager): void => {\r\n        for (let deviceType = 0; deviceType < this._devices.length; deviceType++) {\r\n            const device = this._devices[deviceType];\r\n            for (const deviceSlotKey in device) {\r\n                const deviceSlot = +deviceSlotKey;\r\n                manager._addDevice(new DeviceSource(this._deviceInputSystem, deviceType, deviceSlot));\r\n            }\r\n        }\r\n        this._registeredManagers.push(manager);\r\n    };\r\n\r\n    public readonly unregisterManager = (manager: IObservableManager): void => {\r\n        const idx = this._registeredManagers.indexOf(manager);\r\n\r\n        if (idx > -1) {\r\n            this._registeredManagers.splice(idx, 1);\r\n        }\r\n    };\r\n\r\n    public dispose(): void {\r\n        this._deviceInputSystem.dispose();\r\n    }\r\n}\r\n","import type { PointerInput } from \"../DeviceInput/InputDevices/deviceEnums\";\r\n\r\n/**\r\n * Event Types\r\n */\r\nexport enum DeviceInputEventType {\r\n    // Pointers\r\n    /** PointerMove */\r\n    PointerMove,\r\n    /** PointerDown */\r\n    PointerDown,\r\n    /** PointerUp */\r\n    PointerUp,\r\n}\r\n\r\n/**\r\n * Native friendly interface for Event Object\r\n */\r\nexport interface IUIEvent {\r\n    /**\r\n     * Input array index\r\n     */\r\n    inputIndex: number;\r\n\r\n    /**\r\n     * Current target for an event\r\n     */\r\n    currentTarget?: any;\r\n\r\n    /**\r\n     * Alias for target\r\n     * @deprecated Use target instead\r\n     */\r\n    srcElement?: any;\r\n\r\n    /**\r\n     * Type of event\r\n     */\r\n    type: string;\r\n\r\n    /**\r\n     * Reference to object where object was dispatched\r\n     */\r\n    target: any;\r\n\r\n    /**\r\n     * Tells user agent what to do when not explicitly handled\r\n     */\r\n    preventDefault: () => void;\r\n}\r\n\r\n/**\r\n * Native friendly interface for KeyboardEvent Object\r\n */\r\nexport interface IKeyboardEvent extends IUIEvent {\r\n    /**\r\n     * Status of Alt key being pressed\r\n     */\r\n    altKey: boolean;\r\n\r\n    /**\r\n     * Unicode value of character pressed\r\n     * @deprecated Required for event, use keyCode instead.\r\n     */\r\n    charCode?: number;\r\n\r\n    /**\r\n     * Code for key based on layout\r\n     */\r\n    code: string;\r\n\r\n    /**\r\n     * Status of Ctrl key being pressed\r\n     */\r\n    ctrlKey: boolean;\r\n\r\n    /**\r\n     * String representation of key\r\n     */\r\n    key: string;\r\n    /**\r\n     * ASCII value of key\r\n     * @deprecated Used with DeviceSourceManager\r\n     */\r\n    keyCode: number;\r\n\r\n    /**\r\n     * Status of Meta key (eg. Windows key) being pressed\r\n     */\r\n    metaKey: boolean;\r\n\r\n    /**\r\n     * Status of Shift key being pressed\r\n     */\r\n    shiftKey: boolean;\r\n}\r\n\r\n/**\r\n * Native friendly interface for MouseEvent Object\r\n */\r\nexport interface IMouseEvent extends IUIEvent {\r\n    /**\r\n     * Subset of possible PointerInput values for events, excluding ones that CANNOT be in events organically\r\n     */\r\n    inputIndex: Exclude<PointerInput, PointerInput.Horizontal | PointerInput.Vertical>;\r\n\r\n    /**\r\n     * Status of Alt key being pressed\r\n     */\r\n    altKey: boolean;\r\n\r\n    /**\r\n     * Value of single mouse button pressed\r\n     */\r\n    button: number;\r\n\r\n    /**\r\n     * Value of all mouse buttons pressed\r\n     */\r\n    buttons: number;\r\n\r\n    /**\r\n     * Current X coordinate\r\n     */\r\n    clientX: number;\r\n\r\n    /**\r\n     * Current Y coordinate\r\n     */\r\n    clientY: number;\r\n\r\n    /**\r\n     * Status of Ctrl key being pressed\r\n     */\r\n    ctrlKey: boolean;\r\n\r\n    /**\r\n     * Provides current click count\r\n     */\r\n    detail?: number;\r\n\r\n    /**\r\n     * Status of Meta key (eg. Windows key) being pressed\r\n     */\r\n    metaKey: boolean;\r\n\r\n    /**\r\n     * Delta of movement on X axis\r\n     */\r\n    movementX: number;\r\n\r\n    /**\r\n     * Delta of movement on Y axis\r\n     */\r\n    movementY: number;\r\n\r\n    /**\r\n     * Delta of movement on X axis\r\n     * @deprecated Use 'movementX' instead\r\n     */\r\n    mozMovementX?: number;\r\n\r\n    /**\r\n     * Delta of movement on Y axis\r\n     * @deprecated Use 'movementY' instead\r\n     */\r\n    mozMovementY?: number;\r\n\r\n    /**\r\n     * Delta of movement on X axis\r\n     * @deprecated Use 'movementX' instead\r\n     */\r\n    msMovementX?: number;\r\n\r\n    /**\r\n     * Delta of movement on Y axis\r\n     * @deprecated Use 'movementY' instead\r\n     */\r\n    msMovementY?: number;\r\n\r\n    /**\r\n     * Current coordinate of X within container\r\n     */\r\n    offsetX: number;\r\n\r\n    /**\r\n     * Current coordinate of Y within container\r\n     */\r\n    offsetY: number;\r\n\r\n    /**\r\n     * Horizontal coordinate of event\r\n     */\r\n    pageX: number;\r\n\r\n    /**\r\n     * Vertical coordinate of event\r\n     */\r\n    pageY: number;\r\n\r\n    /**\r\n     * Status of Shift key being pressed\r\n     */\r\n    shiftKey: boolean;\r\n\r\n    /**\r\n     * Delta of movement on X axis\r\n     * @deprecated Use 'movementX' instead\r\n     */\r\n    webkitMovementX?: number;\r\n\r\n    /**\r\n     * Delta of movement on Y axis\r\n     * @deprecated Use 'movementY' instead\r\n     */\r\n    webkitMovementY?: number;\r\n\r\n    /**\r\n     * Alias of clientX\r\n     */\r\n    x: number;\r\n\r\n    /**\r\n     * Alias of clientY\r\n     */\r\n    y: number;\r\n}\r\n\r\n/**\r\n * Native friendly interface for PointerEvent Object\r\n */\r\nexport interface IPointerEvent extends IMouseEvent {\r\n    /**\r\n     * Subset of possible PointerInput values for events, excluding ones that CANNOT be in events organically and mouse wheel values\r\n     */\r\n    inputIndex: Exclude<PointerInput, PointerInput.Horizontal | PointerInput.Vertical | PointerInput.MouseWheelX | PointerInput.MouseWheelY | PointerInput.MouseWheelZ>;\r\n\r\n    /**\r\n     * Pointer Event ID\r\n     */\r\n    pointerId: number;\r\n\r\n    /**\r\n     * Type of pointer\r\n     */\r\n    pointerType: string;\r\n}\r\n\r\n/**\r\n * Native friendly interface for WheelEvent Object\r\n */\r\nexport interface IWheelEvent extends IMouseEvent {\r\n    /**\r\n     * Subset of possible PointerInput values for events that can only be used with mouse wheel\r\n     */\r\n    inputIndex: PointerInput.MouseWheelX | PointerInput.MouseWheelY | PointerInput.MouseWheelZ;\r\n\r\n    /**\r\n     * Units for delta value\r\n     */\r\n    deltaMode: number;\r\n\r\n    /**\r\n     * Horizontal scroll delta\r\n     */\r\n    deltaX: number;\r\n\r\n    /**\r\n     * Vertical scroll delta\r\n     */\r\n    deltaY: number;\r\n\r\n    /**\r\n     * Z-Axis scroll delta\r\n     */\r\n    deltaZ: number;\r\n\r\n    /**\r\n     * WheelDelta (From MouseWheel Event)\r\n     * @deprecated\r\n     */\r\n    wheelDelta?: number;\r\n}\r\n\r\n/**\r\n * Constants used for Events\r\n */\r\nexport class EventConstants {\r\n    /**\r\n     * Pixel delta for Wheel Events (Default)\r\n     */\r\n    public static DOM_DELTA_PIXEL = 0x00;\r\n\r\n    /**\r\n     * Line delta for Wheel Events\r\n     */\r\n    public static DOM_DELTA_LINE = 0x01;\r\n\r\n    /**\r\n     * Page delta for Wheel Events\r\n     */\r\n    public static DOM_DELTA_PAGE = 0x02;\r\n}\r\n","import type { Nullable } from \"../types\";\r\nimport { Vector2 } from \"../Maths/math.vector\";\r\nimport type { PickingInfo } from \"../Collisions/pickingInfo\";\r\nimport type { IMouseEvent, IPointerEvent } from \"./deviceInputEvents\";\r\nimport type { InputManager } from \"../Inputs/scene.inputManager\";\r\n\r\nimport type { Ray } from \"../Culling/ray\";\r\n\r\n/**\r\n * Gather the list of pointer event types as constants.\r\n */\r\nexport class PointerEventTypes {\r\n    /**\r\n     * The pointerdown event is fired when a pointer becomes active. For mouse, it is fired when the device transitions from no buttons depressed to at least one button depressed. For touch, it is fired when physical contact is made with the digitizer. For pen, it is fired when the stylus makes physical contact with the digitizer.\r\n     */\r\n    public static readonly POINTERDOWN = 0x01;\r\n    /**\r\n     * The pointerup event is fired when a pointer is no longer active.\r\n     */\r\n    public static readonly POINTERUP = 0x02;\r\n    /**\r\n     * The pointermove event is fired when a pointer changes coordinates.\r\n     */\r\n    public static readonly POINTERMOVE = 0x04;\r\n    /**\r\n     * The pointerwheel event is fired when a mouse wheel has been rotated.\r\n     */\r\n    public static readonly POINTERWHEEL = 0x08;\r\n    /**\r\n     * The pointerpick event is fired when a mesh or sprite has been picked by the pointer.\r\n     */\r\n    public static readonly POINTERPICK = 0x10;\r\n    /**\r\n     * The pointertap event is fired when a the object has been touched and released without drag.\r\n     */\r\n    public static readonly POINTERTAP = 0x20;\r\n    /**\r\n     * The pointerdoubletap event is fired when a the object has been touched and released twice without drag.\r\n     */\r\n    public static readonly POINTERDOUBLETAP = 0x40;\r\n}\r\n\r\n/**\r\n * Base class of pointer info types.\r\n */\r\nexport class PointerInfoBase {\r\n    /**\r\n     * Instantiates the base class of pointers info.\r\n     * @param type Defines the type of event (PointerEventTypes)\r\n     * @param event Defines the related dom event\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the type of event (PointerEventTypes)\r\n         */\r\n        public type: number,\r\n        /**\r\n         * Defines the related dom event\r\n         */\r\n        public event: IMouseEvent\r\n    ) {}\r\n}\r\n\r\n/**\r\n * This class is used to store pointer related info for the onPrePointerObservable event.\r\n * Set the skipOnPointerObservable property to true if you want the engine to stop any process after this event is triggered, even not calling onPointerObservable\r\n */\r\nexport class PointerInfoPre extends PointerInfoBase {\r\n    /**\r\n     * Ray from a pointer if available (eg. 6dof controller)\r\n     */\r\n    public ray: Nullable<Ray> = null;\r\n\r\n    /**\r\n     * Defines picking info coming from a near interaction (proximity instead of ray-based picking)\r\n     */\r\n    public nearInteractionPickingInfo: Nullable<PickingInfo>;\r\n\r\n    /**\r\n     * The original picking info that was used to trigger the pointer event\r\n     */\r\n    public originalPickingInfo: Nullable<PickingInfo> = null;\r\n\r\n    /**\r\n     * Defines the local position of the pointer on the canvas.\r\n     */\r\n    public localPosition: Vector2;\r\n\r\n    /**\r\n     * Defines whether the engine should skip the next OnPointerObservable associated to this pre.\r\n     */\r\n    public skipOnPointerObservable: boolean;\r\n\r\n    /**\r\n     * Instantiates a PointerInfoPre to store pointer related info to the onPrePointerObservable event.\r\n     * @param type Defines the type of event (PointerEventTypes)\r\n     * @param event Defines the related dom event\r\n     * @param localX Defines the local x coordinates of the pointer when the event occured\r\n     * @param localY Defines the local y coordinates of the pointer when the event occured\r\n     */\r\n    constructor(type: number, event: IMouseEvent, localX: number, localY: number) {\r\n        super(type, event);\r\n        this.skipOnPointerObservable = false;\r\n        this.localPosition = new Vector2(localX, localY);\r\n    }\r\n}\r\n\r\n/**\r\n * This type contains all the data related to a pointer event in Babylon.js.\r\n * The event member is an instance of PointerEvent for all types except PointerWheel and is of type MouseWheelEvent when type equals PointerWheel. The different event types can be found in the PointerEventTypes class.\r\n */\r\nexport class PointerInfo extends PointerInfoBase {\r\n    private _pickInfo: Nullable<PickingInfo>;\r\n    private _inputManager: Nullable<InputManager>;\r\n\r\n    /**\r\n     * Defines the picking info associated with this PointerInfo object (if applicable)\r\n     */\r\n    public get pickInfo(): Nullable<PickingInfo> {\r\n        if (!this._pickInfo) {\r\n            this._generatePickInfo();\r\n        }\r\n\r\n        return this._pickInfo;\r\n    }\r\n    /**\r\n     * Instantiates a PointerInfo to store pointer related info to the onPointerObservable event.\r\n     * @param type Defines the type of event (PointerEventTypes)\r\n     * @param event Defines the related dom event\r\n     * @param pickInfo Defines the picking info associated to the info (if any)\r\n     * @param inputManager Defines the InputManager to use if there is no pickInfo\r\n     */\r\n    constructor(type: number, event: IMouseEvent, pickInfo: Nullable<PickingInfo>, inputManager: Nullable<InputManager> = null) {\r\n        super(type, event);\r\n        this._pickInfo = pickInfo;\r\n        this._inputManager = inputManager;\r\n    }\r\n\r\n    /**\r\n     * Generates the picking info if needed\r\n     */\r\n    /** @internal */\r\n    public _generatePickInfo(): void {\r\n        if (this._inputManager) {\r\n            this._pickInfo = this._inputManager._pickMove(this.event as IPointerEvent);\r\n            this._inputManager._setRayOnPointerInfo(this._pickInfo, this.event);\r\n            this._inputManager = null;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Data relating to a touch event on the screen.\r\n */\r\nexport interface PointerTouch {\r\n    /**\r\n     * X coordinate of touch.\r\n     */\r\n    x: number;\r\n    /**\r\n     * Y coordinate of touch.\r\n     */\r\n    y: number;\r\n    /**\r\n     * Id of touch. Unique for each finger.\r\n     */\r\n    pointerId: number;\r\n    /**\r\n     * Event type passed from DOM.\r\n     */\r\n    type: any;\r\n}\r\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"../types\";\r\nimport { Material } from \"./material\";\r\nimport { serialize, expandToProperty, serializeAsTexture } from \"../Misc/decorators\";\r\nimport { MaterialFlags } from \"./materialFlags\";\r\nimport { MaterialHelper } from \"./materialHelper\";\r\nimport type { BaseTexture } from \"./Textures/baseTexture\";\r\nimport type { UniformBuffer } from \"./uniformBuffer\";\r\nimport type { IAnimatable } from \"../Animations/animatable.interface\";\r\nimport { MaterialDefines } from \"./materialDefines\";\r\nimport { MaterialPluginBase } from \"./materialPluginBase\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\nimport type { Engine } from \"../Engines/engine\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { StandardMaterial } from \"./standardMaterial\";\r\nimport type { PBRBaseMaterial } from \"./PBR/pbrBaseMaterial\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class MaterialDetailMapDefines extends MaterialDefines {\r\n    DETAIL = false;\r\n    DETAILDIRECTUV = 0;\r\n    DETAIL_NORMALBLENDMETHOD = 0;\r\n}\r\n\r\n/**\r\n * Plugin that implements the detail map component of a material\r\n *\r\n * Inspired from:\r\n *   Unity: https://docs.unity3d.com/Packages/com.unity.render-pipelines.high-definition@9.0/manual/Mask-Map-and-Detail-Map.html and https://docs.unity3d.com/Manual/StandardShaderMaterialParameterDetail.html\r\n *   Unreal: https://docs.unrealengine.com/en-US/Engine/Rendering/Materials/HowTo/DetailTexturing/index.html\r\n *   Cryengine: https://docs.cryengine.com/display/SDKDOC2/Detail+Maps\r\n */\r\nexport class DetailMapConfiguration extends MaterialPluginBase {\r\n    private _texture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * The detail texture of the material.\r\n     */\r\n    @serializeAsTexture(\"detailTexture\")\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public texture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Defines how strongly the detail diffuse/albedo channel is blended with the regular diffuse/albedo texture\r\n     * Bigger values mean stronger blending\r\n     */\r\n    @serialize()\r\n    public diffuseBlendLevel = 1;\r\n\r\n    /**\r\n     * Defines how strongly the detail roughness channel is blended with the regular roughness value\r\n     * Bigger values mean stronger blending. Only used with PBR materials\r\n     */\r\n    @serialize()\r\n    public roughnessBlendLevel = 1;\r\n\r\n    /**\r\n     * Defines how strong the bump effect from the detail map is\r\n     * Bigger values mean stronger effect\r\n     */\r\n    @serialize()\r\n    public bumpLevel = 1;\r\n\r\n    private _normalBlendMethod = Material.MATERIAL_NORMALBLENDMETHOD_WHITEOUT;\r\n    /**\r\n     * The method used to blend the bump and detail normals together\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public normalBlendMethod: number;\r\n\r\n    private _isEnabled = false;\r\n    /**\r\n     * Enable or disable the detail map on this material\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public isEnabled = false;\r\n\r\n    /** @internal */\r\n    private _internalMarkAllSubMeshesAsTexturesDirty: () => void;\r\n\r\n    /** @internal */\r\n    public _markAllSubMeshesAsTexturesDirty(): void {\r\n        this._enable(this._isEnabled);\r\n        this._internalMarkAllSubMeshesAsTexturesDirty();\r\n    }\r\n\r\n    constructor(material: PBRBaseMaterial | StandardMaterial, addToPluginList = true) {\r\n        super(material, \"DetailMap\", 140, new MaterialDetailMapDefines(), addToPluginList);\r\n\r\n        this._internalMarkAllSubMeshesAsTexturesDirty = material._dirtyCallbacks[Constants.MATERIAL_TextureDirtyFlag];\r\n    }\r\n\r\n    public isReadyForSubMesh(defines: MaterialDetailMapDefines, scene: Scene, engine: Engine): boolean {\r\n        if (!this._isEnabled) {\r\n            return true;\r\n        }\r\n\r\n        if (defines._areTexturesDirty && scene.texturesEnabled) {\r\n            if (engine.getCaps().standardDerivatives && this._texture && MaterialFlags.DetailTextureEnabled) {\r\n                // Detail texture cannot be not blocking.\r\n                if (!this._texture.isReady()) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public prepareDefines(defines: MaterialDetailMapDefines, scene: Scene): void {\r\n        if (this._isEnabled) {\r\n            defines.DETAIL_NORMALBLENDMETHOD = this._normalBlendMethod;\r\n\r\n            const engine = scene.getEngine();\r\n\r\n            if (defines._areTexturesDirty) {\r\n                if (engine.getCaps().standardDerivatives && this._texture && MaterialFlags.DetailTextureEnabled && this._isEnabled) {\r\n                    MaterialHelper.PrepareDefinesForMergedUV(this._texture, defines, \"DETAIL\");\r\n                    defines.DETAIL_NORMALBLENDMETHOD = this._normalBlendMethod;\r\n                } else {\r\n                    defines.DETAIL = false;\r\n                }\r\n            }\r\n        } else {\r\n            defines.DETAIL = false;\r\n        }\r\n    }\r\n\r\n    public bindForSubMesh(uniformBuffer: UniformBuffer, scene: Scene): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n\r\n        const isFrozen = this._material.isFrozen;\r\n\r\n        if (!uniformBuffer.useUbo || !isFrozen || !uniformBuffer.isSync) {\r\n            if (this._texture && MaterialFlags.DetailTextureEnabled) {\r\n                uniformBuffer.updateFloat4(\"vDetailInfos\", this._texture.coordinatesIndex, this.diffuseBlendLevel, this.bumpLevel, this.roughnessBlendLevel);\r\n                MaterialHelper.BindTextureMatrix(this._texture, uniformBuffer, \"detail\");\r\n            }\r\n        }\r\n\r\n        // Textures\r\n        if (scene.texturesEnabled) {\r\n            if (this._texture && MaterialFlags.DetailTextureEnabled) {\r\n                uniformBuffer.setTexture(\"detailSampler\", this._texture);\r\n            }\r\n        }\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (this._texture === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public getActiveTextures(activeTextures: BaseTexture[]): void {\r\n        if (this._texture) {\r\n            activeTextures.push(this._texture);\r\n        }\r\n    }\r\n\r\n    public getAnimatables(animatables: IAnimatable[]): void {\r\n        if (this._texture && this._texture.animations && this._texture.animations.length > 0) {\r\n            animatables.push(this._texture);\r\n        }\r\n    }\r\n\r\n    public dispose(forceDisposeTextures?: boolean): void {\r\n        if (forceDisposeTextures) {\r\n            this._texture?.dispose();\r\n        }\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"DetailMapConfiguration\";\r\n    }\r\n\r\n    public getSamplers(samplers: string[]): void {\r\n        samplers.push(\"detailSampler\");\r\n    }\r\n\r\n    public getUniforms(): { ubo?: Array<{ name: string; size: number; type: string }>; vertex?: string; fragment?: string } {\r\n        return {\r\n            ubo: [\r\n                { name: \"vDetailInfos\", size: 4, type: \"vec4\" },\r\n                { name: \"detailMatrix\", size: 16, type: \"mat4\" },\r\n            ],\r\n        };\r\n    }\r\n}\r\n","import type { ProcessingOptions, ShaderCustomProcessingFunction } from \"../Engines/Processors/shaderProcessingOptions\";\r\nimport type { Nullable } from \"../types\";\r\nimport { Material } from \"./material\";\r\nimport type {\r\n    MaterialPluginPrepareEffect,\r\n    MaterialPluginBindForSubMesh,\r\n    MaterialPluginDisposed,\r\n    MaterialPluginGetActiveTextures,\r\n    MaterialPluginGetAnimatables,\r\n    MaterialPluginGetDefineNames,\r\n    MaterialPluginHasTexture,\r\n    MaterialPluginIsReadyForSubMesh,\r\n    MaterialPluginPrepareDefines,\r\n    MaterialPluginPrepareUniformBuffer,\r\n    MaterialPluginHardBindForSubMesh,\r\n    MaterialPluginHasRenderTargetTextures,\r\n    MaterialPluginFillRenderTargetTextures,\r\n} from \"./materialPluginEvent\";\r\nimport { MaterialPluginEvent } from \"./materialPluginEvent\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\n\r\nimport type { Scene } from \"../scene\";\r\nimport type { Engine } from \"../Engines/engine\";\r\nimport type { MaterialPluginBase } from \"./materialPluginBase\";\r\nimport { ShaderProcessor } from \"../Engines/Processors/shaderProcessor\";\r\nimport { ShaderLanguage } from \"./shaderLanguage\";\r\nimport { ShaderStore } from \"../Engines/shaderStore\";\r\n\r\ndeclare module \"./material\" {\r\n    export interface Material {\r\n        /**\r\n         * Plugin manager for this material\r\n         */\r\n        pluginManager?: MaterialPluginManager;\r\n    }\r\n}\r\n\r\nconst rxOption = new RegExp(\"^([gimus]+)!\");\r\n\r\n/**\r\n * Class that manages the plugins of a material\r\n * @since 5.0\r\n */\r\nexport class MaterialPluginManager {\r\n    /** Map a plugin class name to a #define name (used in the vertex/fragment shaders as a marker of the plugin usage) */\r\n    private static _MaterialPluginClassToMainDefine: { [name: string]: string } = {};\r\n    private static _MaterialPluginCounter: number = 0;\r\n\r\n    protected _material: Material;\r\n    protected _scene: Scene;\r\n    protected _engine: Engine;\r\n    /** @internal */\r\n    public _plugins: MaterialPluginBase[] = [];\r\n    protected _activePlugins: MaterialPluginBase[] = [];\r\n    protected _activePluginsForExtraEvents: MaterialPluginBase[] = [];\r\n    protected _codeInjectionPoints: { [shaderType: string]: { [codeName: string]: boolean } };\r\n    protected _defineNamesFromPlugins?: { [name: string]: { type: string; default: any } };\r\n    protected _uboDeclaration: string;\r\n    protected _vertexDeclaration: string;\r\n    protected _fragmentDeclaration: string;\r\n    protected _uniformList: string[];\r\n    protected _samplerList: string[];\r\n    protected _uboList: string[];\r\n\r\n    static {\r\n        EngineStore.OnEnginesDisposedObservable.add(() => {\r\n            UnregisterAllMaterialPlugins();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance of the plugin manager\r\n     * @param material material that this manager will manage the plugins for\r\n     */\r\n    constructor(material: Material) {\r\n        this._material = material;\r\n        this._scene = material.getScene();\r\n        this._engine = this._scene.getEngine();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _addPlugin(plugin: MaterialPluginBase): boolean {\r\n        for (let i = 0; i < this._plugins.length; ++i) {\r\n            if (this._plugins[i].name === plugin.name) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this._material._uniformBufferLayoutBuilt) {\r\n            throw `The plugin \"${plugin.name}\" can't be added to the material \"${this._material.name}\" because this material has already been used for rendering! Please add plugins to materials before any rendering with this material occurs.`;\r\n        }\r\n\r\n        const pluginClassName = plugin.getClassName();\r\n        if (!MaterialPluginManager._MaterialPluginClassToMainDefine[pluginClassName]) {\r\n            MaterialPluginManager._MaterialPluginClassToMainDefine[pluginClassName] = \"MATERIALPLUGIN_\" + ++MaterialPluginManager._MaterialPluginCounter;\r\n        }\r\n\r\n        this._material._callbackPluginEventGeneric = this._handlePluginEvent.bind(this);\r\n\r\n        this._plugins.push(plugin);\r\n        this._plugins.sort((a, b) => a.priority - b.priority);\r\n\r\n        this._codeInjectionPoints = {};\r\n\r\n        const defineNamesFromPlugins: { [name: string]: { type: string; default: any } } = {};\r\n        defineNamesFromPlugins[MaterialPluginManager._MaterialPluginClassToMainDefine[pluginClassName]] = {\r\n            type: \"boolean\",\r\n            default: true,\r\n        };\r\n\r\n        for (const plugin of this._plugins) {\r\n            plugin.collectDefines(defineNamesFromPlugins);\r\n            this._collectPointNames(\"vertex\", plugin.getCustomCode(\"vertex\"));\r\n            this._collectPointNames(\"fragment\", plugin.getCustomCode(\"fragment\"));\r\n        }\r\n\r\n        this._defineNamesFromPlugins = defineNamesFromPlugins;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _activatePlugin(plugin: MaterialPluginBase): void {\r\n        if (this._activePlugins.indexOf(plugin) === -1) {\r\n            this._activePlugins.push(plugin);\r\n            this._activePlugins.sort((a, b) => a.priority - b.priority);\r\n\r\n            this._material._callbackPluginEventIsReadyForSubMesh = this._handlePluginEventIsReadyForSubMesh.bind(this);\r\n            this._material._callbackPluginEventPrepareDefinesBeforeAttributes = this._handlePluginEventPrepareDefinesBeforeAttributes.bind(this);\r\n            this._material._callbackPluginEventPrepareDefines = this._handlePluginEventPrepareDefines.bind(this);\r\n            this._material._callbackPluginEventBindForSubMesh = this._handlePluginEventBindForSubMesh.bind(this);\r\n\r\n            if (plugin.registerForExtraEvents) {\r\n                this._activePluginsForExtraEvents.push(plugin);\r\n                this._activePluginsForExtraEvents.sort((a, b) => a.priority - b.priority);\r\n                this._material._callbackPluginEventHasRenderTargetTextures = this._handlePluginEventHasRenderTargetTextures.bind(this);\r\n                this._material._callbackPluginEventFillRenderTargetTextures = this._handlePluginEventFillRenderTargetTextures.bind(this);\r\n                this._material._callbackPluginEventHardBindForSubMesh = this._handlePluginEventHardBindForSubMesh.bind(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a plugin from the list of plugins managed by this manager\r\n     * @param name name of the plugin\r\n     * @returns the plugin if found, else null\r\n     */\r\n    public getPlugin(name: string): Nullable<MaterialPluginBase> {\r\n        for (let i = 0; i < this._plugins.length; ++i) {\r\n            if (this._plugins[i].name === name) {\r\n                return this._plugins[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    protected _handlePluginEventIsReadyForSubMesh(eventData: MaterialPluginIsReadyForSubMesh): void {\r\n        let isReady = true;\r\n        for (const plugin of this._activePlugins) {\r\n            isReady = isReady && plugin.isReadyForSubMesh(eventData.defines, this._scene, this._engine, eventData.subMesh);\r\n        }\r\n        eventData.isReadyForSubMesh = isReady;\r\n    }\r\n\r\n    protected _handlePluginEventPrepareDefinesBeforeAttributes(eventData: MaterialPluginPrepareDefines): void {\r\n        for (const plugin of this._activePlugins) {\r\n            plugin.prepareDefinesBeforeAttributes(eventData.defines, this._scene, eventData.mesh);\r\n        }\r\n    }\r\n\r\n    protected _handlePluginEventPrepareDefines(eventData: MaterialPluginPrepareDefines): void {\r\n        for (const plugin of this._activePlugins) {\r\n            plugin.prepareDefines(eventData.defines, this._scene, eventData.mesh);\r\n        }\r\n    }\r\n\r\n    protected _handlePluginEventHardBindForSubMesh(eventData: MaterialPluginHardBindForSubMesh): void {\r\n        for (const plugin of this._activePluginsForExtraEvents) {\r\n            plugin.hardBindForSubMesh(this._material._uniformBuffer, this._scene, this._engine, eventData.subMesh);\r\n        }\r\n    }\r\n\r\n    protected _handlePluginEventBindForSubMesh(eventData: MaterialPluginBindForSubMesh): void {\r\n        for (const plugin of this._activePlugins) {\r\n            plugin.bindForSubMesh(this._material._uniformBuffer, this._scene, this._engine, eventData.subMesh);\r\n        }\r\n    }\r\n\r\n    protected _handlePluginEventHasRenderTargetTextures(eventData: MaterialPluginHasRenderTargetTextures): void {\r\n        let hasRenderTargetTextures = false;\r\n        for (const plugin of this._activePluginsForExtraEvents) {\r\n            hasRenderTargetTextures = plugin.hasRenderTargetTextures();\r\n            if (hasRenderTargetTextures) {\r\n                break;\r\n            }\r\n        }\r\n        eventData.hasRenderTargetTextures = hasRenderTargetTextures;\r\n    }\r\n\r\n    protected _handlePluginEventFillRenderTargetTextures(eventData: MaterialPluginFillRenderTargetTextures): void {\r\n        for (const plugin of this._activePluginsForExtraEvents) {\r\n            plugin.fillRenderTargetTextures(eventData.renderTargets);\r\n        }\r\n    }\r\n\r\n    protected _handlePluginEvent(\r\n        id: number,\r\n        info:\r\n            | MaterialPluginGetActiveTextures\r\n            | MaterialPluginGetAnimatables\r\n            | MaterialPluginHasTexture\r\n            | MaterialPluginDisposed\r\n            | MaterialPluginGetDefineNames\r\n            | MaterialPluginPrepareEffect\r\n            | MaterialPluginPrepareUniformBuffer\r\n    ): void {\r\n        switch (id) {\r\n            case MaterialPluginEvent.GetActiveTextures: {\r\n                const eventData = info as MaterialPluginGetActiveTextures;\r\n                for (const plugin of this._activePlugins) {\r\n                    plugin.getActiveTextures(eventData.activeTextures);\r\n                }\r\n                break;\r\n            }\r\n\r\n            case MaterialPluginEvent.GetAnimatables: {\r\n                const eventData = info as MaterialPluginGetAnimatables;\r\n                for (const plugin of this._activePlugins) {\r\n                    plugin.getAnimatables(eventData.animatables);\r\n                }\r\n                break;\r\n            }\r\n\r\n            case MaterialPluginEvent.HasTexture: {\r\n                const eventData = info as MaterialPluginHasTexture;\r\n                let hasTexture = false;\r\n                for (const plugin of this._activePlugins) {\r\n                    hasTexture = plugin.hasTexture(eventData.texture);\r\n                    if (hasTexture) {\r\n                        break;\r\n                    }\r\n                }\r\n                eventData.hasTexture = hasTexture;\r\n                break;\r\n            }\r\n\r\n            case MaterialPluginEvent.Disposed: {\r\n                const eventData = info as MaterialPluginDisposed;\r\n                for (const plugin of this._plugins) {\r\n                    plugin.dispose(eventData.forceDisposeTextures);\r\n                }\r\n                break;\r\n            }\r\n\r\n            case MaterialPluginEvent.GetDefineNames: {\r\n                const eventData = info as MaterialPluginGetDefineNames;\r\n                eventData.defineNames = this._defineNamesFromPlugins;\r\n                break;\r\n            }\r\n\r\n            case MaterialPluginEvent.PrepareEffect: {\r\n                const eventData = info as MaterialPluginPrepareEffect;\r\n                for (const plugin of this._activePlugins) {\r\n                    eventData.fallbackRank = plugin.addFallbacks(eventData.defines, eventData.fallbacks, eventData.fallbackRank);\r\n                    plugin.getAttributes(eventData.attributes, this._scene, eventData.mesh);\r\n                }\r\n                if (this._uniformList.length > 0) {\r\n                    eventData.uniforms.push(...this._uniformList);\r\n                }\r\n                if (this._samplerList.length > 0) {\r\n                    eventData.samplers.push(...this._samplerList);\r\n                }\r\n                if (this._uboList.length > 0) {\r\n                    eventData.uniformBuffersNames.push(...this._uboList);\r\n                }\r\n                eventData.customCode = this._injectCustomCode(eventData, eventData.customCode);\r\n                break;\r\n            }\r\n\r\n            case MaterialPluginEvent.PrepareUniformBuffer: {\r\n                const eventData = info as MaterialPluginPrepareUniformBuffer;\r\n                this._uboDeclaration = \"\";\r\n                this._vertexDeclaration = \"\";\r\n                this._fragmentDeclaration = \"\";\r\n                this._uniformList = [];\r\n                this._samplerList = [];\r\n                this._uboList = [];\r\n                for (const plugin of this._plugins) {\r\n                    const uniforms = plugin.getUniforms();\r\n                    if (uniforms) {\r\n                        if (uniforms.ubo) {\r\n                            for (const uniform of uniforms.ubo) {\r\n                                if (uniform.size && uniform.type) {\r\n                                    const arraySize = uniform.arraySize ?? 0;\r\n                                    eventData.ubo.addUniform(uniform.name, uniform.size, arraySize);\r\n                                    this._uboDeclaration += `${uniform.type} ${uniform.name}${arraySize > 0 ? `[${arraySize}]` : \"\"};\\n`;\r\n                                }\r\n                                this._uniformList.push(uniform.name);\r\n                            }\r\n                        }\r\n                        if (uniforms.vertex) {\r\n                            this._vertexDeclaration += uniforms.vertex + \"\\n\";\r\n                        }\r\n                        if (uniforms.fragment) {\r\n                            this._fragmentDeclaration += uniforms.fragment + \"\\n\";\r\n                        }\r\n                    }\r\n                    plugin.getSamplers(this._samplerList);\r\n                    plugin.getUniformBuffersNames(this._uboList);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected _collectPointNames(shaderType: string, customCode: Nullable<{ [pointName: string]: string }> | undefined): void {\r\n        if (!customCode) {\r\n            return;\r\n        }\r\n        for (const pointName in customCode) {\r\n            if (!this._codeInjectionPoints[shaderType]) {\r\n                this._codeInjectionPoints[shaderType] = {};\r\n            }\r\n            this._codeInjectionPoints[shaderType][pointName] = true;\r\n        }\r\n    }\r\n\r\n    protected _injectCustomCode(eventData: MaterialPluginPrepareEffect, existingCallback?: (shaderType: string, code: string) => string): ShaderCustomProcessingFunction {\r\n        return (shaderType: string, code: string) => {\r\n            if (existingCallback) {\r\n                code = existingCallback(shaderType, code);\r\n            }\r\n            if (this._uboDeclaration) {\r\n                code = code.replace(\"#define ADDITIONAL_UBO_DECLARATION\", this._uboDeclaration);\r\n            }\r\n            if (this._vertexDeclaration) {\r\n                code = code.replace(\"#define ADDITIONAL_VERTEX_DECLARATION\", this._vertexDeclaration);\r\n            }\r\n            if (this._fragmentDeclaration) {\r\n                code = code.replace(\"#define ADDITIONAL_FRAGMENT_DECLARATION\", this._fragmentDeclaration);\r\n            }\r\n            const points = this._codeInjectionPoints?.[shaderType];\r\n            if (!points) {\r\n                return code;\r\n            }\r\n            let processorOptions: Nullable<ProcessingOptions> = null;\r\n            for (let pointName in points) {\r\n                let injectedCode = \"\";\r\n                for (const plugin of this._activePlugins) {\r\n                    let customCode = plugin.getCustomCode(shaderType)?.[pointName];\r\n                    if (!customCode) {\r\n                        continue;\r\n                    }\r\n                    if (plugin.resolveIncludes) {\r\n                        if (processorOptions === null) {\r\n                            const shaderLanguage = ShaderLanguage.GLSL;\r\n                            processorOptions = {\r\n                                defines: [], // not used by _ProcessIncludes\r\n                                indexParameters: eventData.indexParameters,\r\n                                isFragment: false,\r\n                                shouldUseHighPrecisionShader: this._engine._shouldUseHighPrecisionShader,\r\n                                processor: undefined as any, // not used by _ProcessIncludes\r\n                                supportsUniformBuffers: this._engine.supportsUniformBuffers,\r\n                                shadersRepository: ShaderStore.GetShadersRepository(shaderLanguage),\r\n                                includesShadersStore: ShaderStore.GetIncludesShadersStore(shaderLanguage),\r\n                                version: undefined as any, // not used by _ProcessIncludes\r\n                                platformName: this._engine.shaderPlatformName,\r\n                                processingContext: undefined as any, // not used by _ProcessIncludes\r\n                                isNDCHalfZRange: this._engine.isNDCHalfZRange,\r\n                                useReverseDepthBuffer: this._engine.useReverseDepthBuffer,\r\n                                processCodeAfterIncludes: undefined as any, // not used by _ProcessIncludes\r\n                            };\r\n                        }\r\n                        processorOptions.isFragment = shaderType === \"fragment\";\r\n                        ShaderProcessor._ProcessIncludes(customCode, processorOptions, (code) => (customCode = code));\r\n                    }\r\n                    injectedCode += customCode + \"\\n\";\r\n                }\r\n                if (injectedCode.length > 0) {\r\n                    if (pointName.charAt(0) === \"!\") {\r\n                        // pointName is a regular expression\r\n                        pointName = pointName.substring(1);\r\n\r\n                        let regexFlags = \"g\";\r\n                        if (pointName.charAt(0) === \"!\") {\r\n                            // no flags\r\n                            regexFlags = \"\";\r\n                            pointName = pointName.substring(1);\r\n                        } else {\r\n                            // get the flag(s)\r\n                            const matchOption = rxOption.exec(pointName);\r\n                            if (matchOption && matchOption.length >= 2) {\r\n                                regexFlags = matchOption[1];\r\n                                pointName = pointName.substring(regexFlags.length + 1);\r\n                            }\r\n                        }\r\n\r\n                        if (regexFlags.indexOf(\"g\") < 0) {\r\n                            // we force the \"g\" flag so that the regexp object is stateful!\r\n                            regexFlags += \"g\";\r\n                        }\r\n\r\n                        const sourceCode = code;\r\n                        const rx = new RegExp(pointName, regexFlags);\r\n                        let match = rx.exec(sourceCode);\r\n                        while (match !== null) {\r\n                            let newCode = injectedCode;\r\n                            for (let i = 0; i < match.length; ++i) {\r\n                                newCode = newCode.replace(\"$\" + i, match[i]);\r\n                            }\r\n                            code = code.replace(match[0], newCode);\r\n                            match = rx.exec(sourceCode);\r\n                        }\r\n                    } else {\r\n                        const fullPointName = \"#define \" + pointName;\r\n                        code = code.replace(fullPointName, \"\\n\" + injectedCode + \"\\n\" + fullPointName);\r\n                    }\r\n                }\r\n            }\r\n            return code;\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * Type for plugin material factories.\r\n */\r\nexport type PluginMaterialFactory = (material: Material) => Nullable<MaterialPluginBase>;\r\n\r\nconst plugins: Array<[string, PluginMaterialFactory]> = [];\r\nlet inited = false;\r\nlet observer: Nullable<Observer<Material>> = null;\r\n\r\n/**\r\n * Registers a new material plugin through a factory, or updates it. This makes the plugin available to all materials instantiated after its registration.\r\n * @param pluginName The plugin name\r\n * @param factory The factory function which allows to create the plugin\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport function RegisterMaterialPlugin(pluginName: string, factory: PluginMaterialFactory): void {\r\n    if (!inited) {\r\n        observer = Material.OnEventObservable.add((material: Material) => {\r\n            for (const [, factory] of plugins) {\r\n                factory(material);\r\n            }\r\n        }, MaterialPluginEvent.Created);\r\n        inited = true;\r\n    }\r\n    const existing = plugins.filter(([name, _factory]) => name === pluginName);\r\n    if (existing.length > 0) {\r\n        existing[0][1] = factory;\r\n    } else {\r\n        plugins.push([pluginName, factory]);\r\n    }\r\n}\r\n\r\n/**\r\n * Removes a material plugin from the list of global plugins.\r\n * @param pluginName The plugin name\r\n * @returns true if the plugin has been removed, else false\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport function UnregisterMaterialPlugin(pluginName: string): boolean {\r\n    for (let i = 0; i < plugins.length; ++i) {\r\n        if (plugins[i][0] === pluginName) {\r\n            plugins.splice(i, 1);\r\n            if (plugins.length === 0) {\r\n                UnregisterAllMaterialPlugins();\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Clear the list of global material plugins\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport function UnregisterAllMaterialPlugins(): void {\r\n    plugins.length = 0;\r\n    inited = false;\r\n    Material.OnEventObservable.remove(observer);\r\n    observer = null;\r\n}\r\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { serialize, SerializationHelper, serializeAsColor3, expandToProperty, serializeAsFresnelParameters, serializeAsTexture } from \"../Misc/decorators\";\r\nimport type { Observer } from \"../Misc/observable\";\r\nimport { SmartArray } from \"../Misc/smartArray\";\r\nimport type { IAnimatable } from \"../Animations/animatable.interface\";\r\n\r\nimport type { Nullable } from \"../types\";\r\nimport { Scene } from \"../scene\";\r\nimport { Matrix } from \"../Maths/math.vector\";\r\nimport { Color3 } from \"../Maths/math.color\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport type { SubMesh } from \"../Meshes/subMesh\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport { PrePassConfiguration } from \"./prePassConfiguration\";\r\n\r\nimport type { IImageProcessingConfigurationDefines } from \"./imageProcessingConfiguration\";\r\nimport { ImageProcessingConfiguration } from \"./imageProcessingConfiguration\";\r\nimport type { ColorCurves } from \"./colorCurves\";\r\nimport type { FresnelParameters } from \"./fresnelParameters\";\r\nimport type { ICustomShaderNameResolveOptions } from \"../Materials/material\";\r\nimport { Material } from \"../Materials/material\";\r\nimport { MaterialPluginEvent } from \"./materialPluginEvent\";\r\nimport { MaterialDefines } from \"../Materials/materialDefines\";\r\nimport { PushMaterial } from \"./pushMaterial\";\r\nimport { MaterialHelper } from \"./materialHelper\";\r\n\r\nimport type { BaseTexture } from \"../Materials/Textures/baseTexture\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport type { CubeTexture } from \"../Materials/Textures/cubeTexture\";\r\nimport type { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport { MaterialFlags } from \"./materialFlags\";\r\n\r\nimport \"../Shaders/default.fragment\";\r\nimport \"../Shaders/default.vertex\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { EffectFallbacks } from \"./effectFallbacks\";\r\nimport type { Effect, IEffectCreationOptions } from \"./effect\";\r\nimport { DetailMapConfiguration } from \"./material.detailMapConfiguration\";\r\nimport { addClipPlaneUniforms, bindClipPlane } from \"./clipPlaneMaterialHelper\";\r\n\r\nconst onCreatedEffectParameters = { effect: null as unknown as Effect, subMesh: null as unknown as Nullable<SubMesh> };\r\n\r\n/** @internal */\r\nexport class StandardMaterialDefines extends MaterialDefines implements IImageProcessingConfigurationDefines {\r\n    public MAINUV1 = false;\r\n    public MAINUV2 = false;\r\n    public MAINUV3 = false;\r\n    public MAINUV4 = false;\r\n    public MAINUV5 = false;\r\n    public MAINUV6 = false;\r\n    public DIFFUSE = false;\r\n    public DIFFUSEDIRECTUV = 0;\r\n    public BAKED_VERTEX_ANIMATION_TEXTURE = false;\r\n    public AMBIENT = false;\r\n    public AMBIENTDIRECTUV = 0;\r\n    public OPACITY = false;\r\n    public OPACITYDIRECTUV = 0;\r\n    public OPACITYRGB = false;\r\n    public REFLECTION = false;\r\n    public EMISSIVE = false;\r\n    public EMISSIVEDIRECTUV = 0;\r\n    public SPECULAR = false;\r\n    public SPECULARDIRECTUV = 0;\r\n    public BUMP = false;\r\n    public BUMPDIRECTUV = 0;\r\n    public PARALLAX = false;\r\n    public PARALLAXOCCLUSION = false;\r\n    public SPECULAROVERALPHA = false;\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public CLIPPLANE5 = false;\r\n    public CLIPPLANE6 = false;\r\n    public ALPHATEST = false;\r\n    public DEPTHPREPASS = false;\r\n    public ALPHAFROMDIFFUSE = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public SPECULARTERM = false;\r\n    public DIFFUSEFRESNEL = false;\r\n    public OPACITYFRESNEL = false;\r\n    public REFLECTIONFRESNEL = false;\r\n    public REFRACTIONFRESNEL = false;\r\n    public EMISSIVEFRESNEL = false;\r\n    public FRESNEL = false;\r\n    public NORMAL = false;\r\n    public TANGENT = false;\r\n    public UV1 = false;\r\n    public UV2 = false;\r\n    public UV3 = false;\r\n    public UV4 = false;\r\n    public UV5 = false;\r\n    public UV6 = false;\r\n    public VERTEXCOLOR = false;\r\n    public VERTEXALPHA = false;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public BONETEXTURE = false;\r\n    public BONES_VELOCITY_ENABLED = false;\r\n    public INSTANCES = false;\r\n    public THIN_INSTANCES = false;\r\n    public INSTANCESCOLOR = false;\r\n    public GLOSSINESS = false;\r\n    public ROUGHNESS = false;\r\n    public EMISSIVEASILLUMINATION = false;\r\n    public LINKEMISSIVEWITHDIFFUSE = false;\r\n    public REFLECTIONFRESNELFROMSPECULAR = false;\r\n    public LIGHTMAP = false;\r\n    public LIGHTMAPDIRECTUV = 0;\r\n    public OBJECTSPACE_NORMALMAP = false;\r\n    public USELIGHTMAPASSHADOWMAP = false;\r\n    public REFLECTIONMAP_3D = false;\r\n    public REFLECTIONMAP_SPHERICAL = false;\r\n    public REFLECTIONMAP_PLANAR = false;\r\n    public REFLECTIONMAP_CUBIC = false;\r\n    public USE_LOCAL_REFLECTIONMAP_CUBIC = false;\r\n    public USE_LOCAL_REFRACTIONMAP_CUBIC = false;\r\n    public REFLECTIONMAP_PROJECTION = false;\r\n    public REFLECTIONMAP_SKYBOX = false;\r\n    public REFLECTIONMAP_EXPLICIT = false;\r\n    public REFLECTIONMAP_EQUIRECTANGULAR = false;\r\n    public REFLECTIONMAP_EQUIRECTANGULAR_FIXED = false;\r\n    public REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = false;\r\n    public REFLECTIONMAP_OPPOSITEZ = false;\r\n    public INVERTCUBICMAP = false;\r\n    public LOGARITHMICDEPTH = false;\r\n    public REFRACTION = false;\r\n    public REFRACTIONMAP_3D = false;\r\n    public REFLECTIONOVERALPHA = false;\r\n    public TWOSIDEDLIGHTING = false;\r\n    public SHADOWFLOAT = false;\r\n    public MORPHTARGETS = false;\r\n    public MORPHTARGETS_NORMAL = false;\r\n    public MORPHTARGETS_TANGENT = false;\r\n    public MORPHTARGETS_UV = false;\r\n    public NUM_MORPH_INFLUENCERS = 0;\r\n    public MORPHTARGETS_TEXTURE = false;\r\n    public NONUNIFORMSCALING = false; // https://playground.babylonjs.com#V6DWIH\r\n    public PREMULTIPLYALPHA = false; // https://playground.babylonjs.com#LNVJJ7\r\n    public ALPHATEST_AFTERALLALPHACOMPUTATIONS = false;\r\n    public ALPHABLEND = true;\r\n\r\n    public PREPASS = false;\r\n    public PREPASS_IRRADIANCE = false;\r\n    public PREPASS_IRRADIANCE_INDEX = -1;\r\n    public PREPASS_ALBEDO_SQRT = false;\r\n    public PREPASS_ALBEDO_SQRT_INDEX = -1;\r\n    public PREPASS_DEPTH = false;\r\n    public PREPASS_DEPTH_INDEX = -1;\r\n    public PREPASS_NORMAL = false;\r\n    public PREPASS_NORMAL_INDEX = -1;\r\n    public PREPASS_POSITION = false;\r\n    public PREPASS_POSITION_INDEX = -1;\r\n    public PREPASS_VELOCITY = false;\r\n    public PREPASS_VELOCITY_INDEX = -1;\r\n    public PREPASS_REFLECTIVITY = false;\r\n    public PREPASS_REFLECTIVITY_INDEX = -1;\r\n    public SCENE_MRT_COUNT = 0;\r\n\r\n    public RGBDLIGHTMAP = false;\r\n    public RGBDREFLECTION = false;\r\n    public RGBDREFRACTION = false;\r\n\r\n    public IMAGEPROCESSING = false;\r\n    public VIGNETTE = false;\r\n    public VIGNETTEBLENDMODEMULTIPLY = false;\r\n    public VIGNETTEBLENDMODEOPAQUE = false;\r\n    public TONEMAPPING = false;\r\n    public TONEMAPPING_ACES = false;\r\n    public CONTRAST = false;\r\n    public COLORCURVES = false;\r\n    public COLORGRADING = false;\r\n    public COLORGRADING3D = false;\r\n    public SAMPLER3DGREENDEPTH = false;\r\n    public SAMPLER3DBGRMAP = false;\r\n    public DITHER = false;\r\n    public IMAGEPROCESSINGPOSTPROCESS = false;\r\n    public SKIPFINALCOLORCLAMP = false;\r\n    public MULTIVIEW = false;\r\n    public ORDER_INDEPENDENT_TRANSPARENCY = false;\r\n    public ORDER_INDEPENDENT_TRANSPARENCY_16BITS = false;\r\n    public CAMERA_ORTHOGRAPHIC = false;\r\n    public CAMERA_PERSPECTIVE = false;\r\n\r\n    /**\r\n     * If the reflection texture on this material is in linear color space\r\n     * @internal\r\n     */\r\n    public IS_REFLECTION_LINEAR = false;\r\n    /**\r\n     * If the refraction texture on this material is in linear color space\r\n     * @internal\r\n     */\r\n    public IS_REFRACTION_LINEAR = false;\r\n    public EXPOSURE = false;\r\n\r\n    public DECAL_AFTER_DETAIL = false;\r\n\r\n    /**\r\n     * Initializes the Standard Material defines.\r\n     * @param externalProperties The external properties\r\n     */\r\n    constructor(externalProperties?: { [name: string]: { type: string; default: any } }) {\r\n        super(externalProperties);\r\n        this.rebuild();\r\n    }\r\n\r\n    public setReflectionMode(modeToEnable: string) {\r\n        const modes = [\r\n            \"REFLECTIONMAP_CUBIC\",\r\n            \"REFLECTIONMAP_EXPLICIT\",\r\n            \"REFLECTIONMAP_PLANAR\",\r\n            \"REFLECTIONMAP_PROJECTION\",\r\n            \"REFLECTIONMAP_PROJECTION\",\r\n            \"REFLECTIONMAP_SKYBOX\",\r\n            \"REFLECTIONMAP_SPHERICAL\",\r\n            \"REFLECTIONMAP_EQUIRECTANGULAR\",\r\n            \"REFLECTIONMAP_EQUIRECTANGULAR_FIXED\",\r\n            \"REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED\",\r\n        ];\r\n\r\n        for (const mode of modes) {\r\n            (<any>this)[mode] = mode === modeToEnable;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * This is the default material used in Babylon. It is the best trade off between quality\r\n * and performances.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/materials_introduction\r\n */\r\nexport class StandardMaterial extends PushMaterial {\r\n    @serializeAsTexture(\"diffuseTexture\")\r\n    private _diffuseTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * The basic texture of the material as viewed under a light.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\r\n    public diffuseTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsTexture(\"ambientTexture\")\r\n    private _ambientTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * AKA Occlusion Texture in other nomenclature, it helps adding baked shadows into your material.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public ambientTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsTexture(\"opacityTexture\")\r\n    private _opacityTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Define the transparency of the material from a texture.\r\n     * The final alpha value can be read either from the red channel (if texture.getAlphaFromRGB is false)\r\n     * or from the luminance or the current texel (if texture.getAlphaFromRGB is true)\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\r\n    public opacityTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsTexture(\"reflectionTexture\")\r\n    private _reflectionTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Define the texture used to display the reflection.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/reflectionTexture#how-to-obtain-reflections-and-refractions\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public reflectionTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsTexture(\"emissiveTexture\")\r\n    private _emissiveTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Define texture of the material as if self lit.\r\n     * This will be mixed in the final result even in the absence of light.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public emissiveTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsTexture(\"specularTexture\")\r\n    private _specularTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Define how the color and intensity of the highlight given by the light in the material.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public specularTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsTexture(\"bumpTexture\")\r\n    private _bumpTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Bump mapping is a technique to simulate bump and dents on a rendered surface.\r\n     * These are made by creating a normal map from an image. The means to do this can be found on the web, a search for 'normal map generator' will bring up free and paid for methods of doing this.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/moreMaterials#bump-map\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public bumpTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsTexture(\"lightmapTexture\")\r\n    private _lightmapTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Complex lighting can be computationally expensive to compute at runtime.\r\n     * To save on computation, lightmaps may be used to store calculated lighting in a texture which will be applied to a given mesh.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/lights/lights_introduction#lightmaps\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public lightmapTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsTexture(\"refractionTexture\")\r\n    private _refractionTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Define the texture used to display the refraction.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/reflectionTexture#how-to-obtain-reflections-and-refractions\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public refractionTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * The color of the material lit by the environmental background lighting.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/materials_introduction#ambient-color-example\r\n     */\r\n    @serializeAsColor3(\"ambient\")\r\n    public ambientColor = new Color3(0, 0, 0);\r\n\r\n    /**\r\n     * The basic color of the material as viewed under a light.\r\n     */\r\n    @serializeAsColor3(\"diffuse\")\r\n    public diffuseColor = new Color3(1, 1, 1);\r\n\r\n    /**\r\n     * Define how the color and intensity of the highlight given by the light in the material.\r\n     */\r\n    @serializeAsColor3(\"specular\")\r\n    public specularColor = new Color3(1, 1, 1);\r\n\r\n    /**\r\n     * Define the color of the material as if self lit.\r\n     * This will be mixed in the final result even in the absence of light.\r\n     */\r\n    @serializeAsColor3(\"emissive\")\r\n    public emissiveColor = new Color3(0, 0, 0);\r\n\r\n    /**\r\n     * Defines how sharp are the highlights in the material.\r\n     * The bigger the value the sharper giving a more glossy feeling to the result.\r\n     * Reversely, the smaller the value the blurrier giving a more rough feeling to the result.\r\n     */\r\n    @serialize()\r\n    public specularPower = 64;\r\n\r\n    @serialize(\"useAlphaFromDiffuseTexture\")\r\n    private _useAlphaFromDiffuseTexture = false;\r\n    /**\r\n     * Does the transparency come from the diffuse texture alpha channel.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\r\n    public useAlphaFromDiffuseTexture: boolean;\r\n\r\n    @serialize(\"useEmissiveAsIllumination\")\r\n    private _useEmissiveAsIllumination = false;\r\n    /**\r\n     * If true, the emissive value is added into the end result, otherwise it is multiplied in.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useEmissiveAsIllumination: boolean;\r\n\r\n    @serialize(\"linkEmissiveWithDiffuse\")\r\n    private _linkEmissiveWithDiffuse = false;\r\n    /**\r\n     * If true, some kind of energy conservation will prevent the end result to be more than 1 by reducing\r\n     * the emissive level when the final color is close to one.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public linkEmissiveWithDiffuse: boolean;\r\n\r\n    @serialize(\"useSpecularOverAlpha\")\r\n    private _useSpecularOverAlpha = false;\r\n    /**\r\n     * Specifies that the material will keep the specular highlights over a transparent surface (only the most luminous ones).\r\n     * A car glass is a good exemple of that. When sun reflects on it you can not see what is behind.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useSpecularOverAlpha: boolean;\r\n\r\n    @serialize(\"useReflectionOverAlpha\")\r\n    private _useReflectionOverAlpha = false;\r\n    /**\r\n     * Specifies that the material will keeps the reflection highlights over a transparent surface (only the most luminous ones).\r\n     * A car glass is a good exemple of that. When the street lights reflects on it you can not see what is behind.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useReflectionOverAlpha: boolean;\r\n\r\n    @serialize(\"disableLighting\")\r\n    private _disableLighting = false;\r\n    /**\r\n     * Does lights from the scene impacts this material.\r\n     * It can be a nice trick for performance to disable lighting on a fully emissive material.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public disableLighting: boolean;\r\n\r\n    @serialize(\"useObjectSpaceNormalMap\")\r\n    private _useObjectSpaceNormalMap = false;\r\n    /**\r\n     * Allows using an object space normal map (instead of tangent space).\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useObjectSpaceNormalMap: boolean;\r\n\r\n    @serialize(\"useParallax\")\r\n    private _useParallax = false;\r\n    /**\r\n     * Is parallax enabled or not.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/parallaxMapping\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useParallax: boolean;\r\n\r\n    @serialize(\"useParallaxOcclusion\")\r\n    private _useParallaxOcclusion = false;\r\n    /**\r\n     * Is parallax occlusion enabled or not.\r\n     * If true, the outcome is way more realistic than traditional Parallax but you can expect a performance hit that worthes consideration.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/parallaxMapping\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useParallaxOcclusion: boolean;\r\n\r\n    /**\r\n     * Apply a scaling factor that determine which \"depth\" the height map should reprensent. A value between 0.05 and 0.1 is reasonnable in Parallax, you can reach 0.2 using Parallax Occlusion.\r\n     */\r\n    @serialize()\r\n    public parallaxScaleBias = 0.05;\r\n\r\n    @serialize(\"roughness\")\r\n    private _roughness = 0;\r\n    /**\r\n     * Helps to define how blurry the reflections should appears in the material.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public roughness: number;\r\n\r\n    /**\r\n     * In case of refraction, define the value of the index of refraction.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/reflectionTexture#how-to-obtain-reflections-and-refractions\r\n     */\r\n    @serialize()\r\n    public indexOfRefraction = 0.98;\r\n\r\n    /**\r\n     * Invert the refraction texture alongside the y axis.\r\n     * It can be useful with procedural textures or probe for instance.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/reflectionTexture#how-to-obtain-reflections-and-refractions\r\n     */\r\n    @serialize()\r\n    public invertRefractionY = true;\r\n\r\n    /**\r\n     * Defines the alpha limits in alpha test mode.\r\n     */\r\n    @serialize()\r\n    public alphaCutOff = 0.4;\r\n\r\n    @serialize(\"useLightmapAsShadowmap\")\r\n    private _useLightmapAsShadowmap = false;\r\n    /**\r\n     * In case of light mapping, define whether the map contains light or shadow informations.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useLightmapAsShadowmap: boolean;\r\n\r\n    // Fresnel\r\n    @serializeAsFresnelParameters(\"diffuseFresnelParameters\")\r\n    private _diffuseFresnelParameters: FresnelParameters;\r\n    /**\r\n     * Define the diffuse fresnel parameters of the material.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/fresnelParameters\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsFresnelDirty\")\r\n    public diffuseFresnelParameters: FresnelParameters;\r\n\r\n    @serializeAsFresnelParameters(\"opacityFresnelParameters\")\r\n    private _opacityFresnelParameters: FresnelParameters;\r\n    /**\r\n     * Define the opacity fresnel parameters of the material.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/fresnelParameters\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsFresnelAndMiscDirty\")\r\n    public opacityFresnelParameters: FresnelParameters;\r\n\r\n    @serializeAsFresnelParameters(\"reflectionFresnelParameters\")\r\n    private _reflectionFresnelParameters: FresnelParameters;\r\n    /**\r\n     * Define the reflection fresnel parameters of the material.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/fresnelParameters\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsFresnelDirty\")\r\n    public reflectionFresnelParameters: FresnelParameters;\r\n\r\n    @serializeAsFresnelParameters(\"refractionFresnelParameters\")\r\n    private _refractionFresnelParameters: FresnelParameters;\r\n    /**\r\n     * Define the refraction fresnel parameters of the material.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/fresnelParameters\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsFresnelDirty\")\r\n    public refractionFresnelParameters: FresnelParameters;\r\n\r\n    @serializeAsFresnelParameters(\"emissiveFresnelParameters\")\r\n    private _emissiveFresnelParameters: FresnelParameters;\r\n    /**\r\n     * Define the emissive fresnel parameters of the material.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/fresnelParameters\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsFresnelDirty\")\r\n    public emissiveFresnelParameters: FresnelParameters;\r\n\r\n    @serialize(\"useReflectionFresnelFromSpecular\")\r\n    private _useReflectionFresnelFromSpecular = false;\r\n    /**\r\n     * If true automatically deducts the fresnels values from the material specularity.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/fresnelParameters\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsFresnelDirty\")\r\n    public useReflectionFresnelFromSpecular: boolean;\r\n\r\n    @serialize(\"useGlossinessFromSpecularMapAlpha\")\r\n    private _useGlossinessFromSpecularMapAlpha = false;\r\n    /**\r\n     * Defines if the glossiness/roughness of the material should be read from the specular map alpha channel\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useGlossinessFromSpecularMapAlpha: boolean;\r\n\r\n    @serialize(\"maxSimultaneousLights\")\r\n    private _maxSimultaneousLights = 4;\r\n    /**\r\n     * Defines the maximum number of lights that can be used in the material\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public maxSimultaneousLights: number;\r\n\r\n    @serialize(\"invertNormalMapX\")\r\n    private _invertNormalMapX = false;\r\n    /**\r\n     * If sets to true, x component of normal map value will invert (x = 1.0 - x).\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public invertNormalMapX: boolean;\r\n\r\n    @serialize(\"invertNormalMapY\")\r\n    private _invertNormalMapY = false;\r\n    /**\r\n     * If sets to true, y component of normal map value will invert (y = 1.0 - y).\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public invertNormalMapY: boolean;\r\n\r\n    @serialize(\"twoSidedLighting\")\r\n    private _twoSidedLighting = false;\r\n    /**\r\n     * If sets to true and backfaceCulling is false, normals will be flipped on the backside.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public twoSidedLighting: boolean;\r\n\r\n    @serialize(\"applyDecalMapAfterDetailMap\")\r\n    private _applyDecalMapAfterDetailMap = false;\r\n    /**\r\n     * If sets to true, the decal map will be applied after the detail map. Else, it is applied before (default: false)\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\r\n    public applyDecalMapAfterDetailMap: boolean;\r\n\r\n    /**\r\n     * Default configuration related to image processing available in the standard Material.\r\n     */\r\n    protected _imageProcessingConfiguration: ImageProcessingConfiguration;\r\n\r\n    /**\r\n     * Gets the image processing configuration used either in this material.\r\n     */\r\n    public get imageProcessingConfiguration(): ImageProcessingConfiguration {\r\n        return this._imageProcessingConfiguration;\r\n    }\r\n\r\n    /**\r\n     * Sets the Default image processing configuration used either in the this material.\r\n     *\r\n     * If sets to null, the scene one is in use.\r\n     */\r\n    public set imageProcessingConfiguration(value: ImageProcessingConfiguration) {\r\n        this._attachImageProcessingConfiguration(value);\r\n\r\n        // Ensure the effect will be rebuilt.\r\n        this._markAllSubMeshesAsTexturesDirty();\r\n    }\r\n\r\n    /**\r\n     * Keep track of the image processing observer to allow dispose and replace.\r\n     */\r\n    private _imageProcessingObserver: Nullable<Observer<ImageProcessingConfiguration>>;\r\n\r\n    /**\r\n     * Attaches a new image processing configuration to the Standard Material.\r\n     * @param configuration\r\n     */\r\n    protected _attachImageProcessingConfiguration(configuration: Nullable<ImageProcessingConfiguration>): void {\r\n        if (configuration === this._imageProcessingConfiguration) {\r\n            return;\r\n        }\r\n\r\n        // Detaches observer\r\n        if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\r\n            this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\r\n        }\r\n\r\n        // Pick the scene configuration if needed\r\n        if (!configuration) {\r\n            this._imageProcessingConfiguration = this.getScene().imageProcessingConfiguration;\r\n        } else {\r\n            this._imageProcessingConfiguration = configuration;\r\n        }\r\n\r\n        // Attaches observer\r\n        if (this._imageProcessingConfiguration) {\r\n            this._imageProcessingObserver = this._imageProcessingConfiguration.onUpdateParameters.add(() => {\r\n                this._markAllSubMeshesAsImageProcessingDirty();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Defines additional PrePass parameters for the material.\r\n     */\r\n    public readonly prePassConfiguration: PrePassConfiguration;\r\n\r\n    /**\r\n     * Can this material render to prepass\r\n     */\r\n    public get isPrePassCapable(): boolean {\r\n        return !this.disableDepthWrite;\r\n    }\r\n\r\n    /**\r\n     * Gets whether the color curves effect is enabled.\r\n     */\r\n    public get cameraColorCurvesEnabled(): boolean {\r\n        return this.imageProcessingConfiguration.colorCurvesEnabled;\r\n    }\r\n    /**\r\n     * Sets whether the color curves effect is enabled.\r\n     */\r\n    public set cameraColorCurvesEnabled(value: boolean) {\r\n        this.imageProcessingConfiguration.colorCurvesEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Gets whether the color grading effect is enabled.\r\n     */\r\n    public get cameraColorGradingEnabled(): boolean {\r\n        return this.imageProcessingConfiguration.colorGradingEnabled;\r\n    }\r\n    /**\r\n     * Gets whether the color grading effect is enabled.\r\n     */\r\n    public set cameraColorGradingEnabled(value: boolean) {\r\n        this.imageProcessingConfiguration.colorGradingEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Gets whether tonemapping is enabled or not.\r\n     */\r\n    public get cameraToneMappingEnabled(): boolean {\r\n        return this._imageProcessingConfiguration.toneMappingEnabled;\r\n    }\r\n    /**\r\n     * Sets whether tonemapping is enabled or not\r\n     */\r\n    public set cameraToneMappingEnabled(value: boolean) {\r\n        this._imageProcessingConfiguration.toneMappingEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * The camera exposure used on this material.\r\n     * This property is here and not in the camera to allow controlling exposure without full screen post process.\r\n     * This corresponds to a photographic exposure.\r\n     */\r\n    public get cameraExposure(): number {\r\n        return this._imageProcessingConfiguration.exposure;\r\n    }\r\n    /**\r\n     * The camera exposure used on this material.\r\n     * This property is here and not in the camera to allow controlling exposure without full screen post process.\r\n     * This corresponds to a photographic exposure.\r\n     */\r\n    public set cameraExposure(value: number) {\r\n        this._imageProcessingConfiguration.exposure = value;\r\n    }\r\n\r\n    /**\r\n     * Gets The camera contrast used on this material.\r\n     */\r\n    public get cameraContrast(): number {\r\n        return this._imageProcessingConfiguration.contrast;\r\n    }\r\n\r\n    /**\r\n     * Sets The camera contrast used on this material.\r\n     */\r\n    public set cameraContrast(value: number) {\r\n        this._imageProcessingConfiguration.contrast = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the Color Grading 2D Lookup Texture.\r\n     */\r\n    public get cameraColorGradingTexture(): Nullable<BaseTexture> {\r\n        return this._imageProcessingConfiguration.colorGradingTexture;\r\n    }\r\n    /**\r\n     * Sets the Color Grading 2D Lookup Texture.\r\n     */\r\n    public set cameraColorGradingTexture(value: Nullable<BaseTexture>) {\r\n        this._imageProcessingConfiguration.colorGradingTexture = value;\r\n    }\r\n\r\n    /**\r\n     * The color grading curves provide additional color adjustmnent that is applied after any color grading transform (3D LUT).\r\n     * They allow basic adjustment of saturation and small exposure adjustments, along with color filter tinting to provide white balance adjustment or more stylistic effects.\r\n     * These are similar to controls found in many professional imaging or colorist software. The global controls are applied to the entire image. For advanced tuning, extra controls are provided to adjust the shadow, midtone and highlight areas of the image;\r\n     * corresponding to low luminance, medium luminance, and high luminance areas respectively.\r\n     */\r\n    public get cameraColorCurves(): Nullable<ColorCurves> {\r\n        return this._imageProcessingConfiguration.colorCurves;\r\n    }\r\n    /**\r\n     * The color grading curves provide additional color adjustment that is applied after any color grading transform (3D LUT).\r\n     * They allow basic adjustment of saturation and small exposure adjustments, along with color filter tinting to provide white balance adjustment or more stylistic effects.\r\n     * These are similar to controls found in many professional imaging or colorist software. The global controls are applied to the entire image. For advanced tuning, extra controls are provided to adjust the shadow, midtone and highlight areas of the image;\r\n     * corresponding to low luminance, medium luminance, and high luminance areas respectively.\r\n     */\r\n    public set cameraColorCurves(value: Nullable<ColorCurves>) {\r\n        this._imageProcessingConfiguration.colorCurves = value;\r\n    }\r\n\r\n    /**\r\n     * Can this material render to several textures at once\r\n     */\r\n    public get canRenderToMRT() {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Defines the detail map parameters for the material.\r\n     */\r\n    public readonly detailMap: DetailMapConfiguration;\r\n\r\n    protected _renderTargets = new SmartArray<RenderTargetTexture>(16);\r\n    protected _worldViewProjectionMatrix = Matrix.Zero();\r\n    protected _globalAmbientColor = new Color3(0, 0, 0);\r\n    protected _useLogarithmicDepth: boolean;\r\n    protected _cacheHasRenderTargetTextures = false;\r\n\r\n    /**\r\n     * Instantiates a new standard material.\r\n     * This is the default material used in Babylon. It is the best trade off between quality\r\n     * and performances.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/materials_introduction\r\n     * @param name Define the name of the material in the scene\r\n     * @param scene Define the scene the material belong to\r\n     */\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n\r\n        this.detailMap = new DetailMapConfiguration(this);\r\n\r\n        // Setup the default processing configuration to the scene.\r\n        this._attachImageProcessingConfiguration(null);\r\n        this.prePassConfiguration = new PrePassConfiguration();\r\n\r\n        this.getRenderTargetTextures = (): SmartArray<RenderTargetTexture> => {\r\n            this._renderTargets.reset();\r\n\r\n            if (StandardMaterial.ReflectionTextureEnabled && this._reflectionTexture && this._reflectionTexture.isRenderTarget) {\r\n                this._renderTargets.push(<RenderTargetTexture>this._reflectionTexture);\r\n            }\r\n\r\n            if (StandardMaterial.RefractionTextureEnabled && this._refractionTexture && this._refractionTexture.isRenderTarget) {\r\n                this._renderTargets.push(<RenderTargetTexture>this._refractionTexture);\r\n            }\r\n\r\n            this._eventInfo.renderTargets = this._renderTargets;\r\n            this._callbackPluginEventFillRenderTargetTextures(this._eventInfo);\r\n\r\n            return this._renderTargets;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that current material needs to register RTT\r\n     */\r\n    public get hasRenderTargetTextures(): boolean {\r\n        if (StandardMaterial.ReflectionTextureEnabled && this._reflectionTexture && this._reflectionTexture.isRenderTarget) {\r\n            return true;\r\n        }\r\n\r\n        if (StandardMaterial.RefractionTextureEnabled && this._refractionTexture && this._refractionTexture.isRenderTarget) {\r\n            return true;\r\n        }\r\n\r\n        return this._cacheHasRenderTargetTextures;\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name of the material e.g. \"StandardMaterial\"\r\n     * Mainly use in serialization.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"StandardMaterial\";\r\n    }\r\n\r\n    /**\r\n     * In case the depth buffer does not allow enough depth precision for your scene (might be the case in large scenes)\r\n     * You can try switching to logarithmic depth.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/advanced/logarithmicDepthBuffer\r\n     */\r\n    @serialize()\r\n    public get useLogarithmicDepth(): boolean {\r\n        return this._useLogarithmicDepth;\r\n    }\r\n\r\n    public set useLogarithmicDepth(value: boolean) {\r\n        this._useLogarithmicDepth = value && this.getScene().getEngine().getCaps().fragmentDepthSupported;\r\n\r\n        this._markAllSubMeshesAsMiscDirty();\r\n    }\r\n\r\n    /**\r\n     * Specifies if the material will require alpha blending\r\n     * @returns a boolean specifying if alpha blending is needed\r\n     */\r\n    public needAlphaBlending(): boolean {\r\n        if (this._disableAlphaBlending) {\r\n            return false;\r\n        }\r\n\r\n        return (\r\n            this.alpha < 1.0 ||\r\n            this._opacityTexture != null ||\r\n            this._shouldUseAlphaFromDiffuseTexture() ||\r\n            (this._opacityFresnelParameters && this._opacityFresnelParameters.isEnabled)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Specifies if this material should be rendered in alpha test mode\r\n     * @returns a boolean specifying if an alpha test is needed.\r\n     */\r\n    public needAlphaTesting(): boolean {\r\n        if (this._forceAlphaTest) {\r\n            return true;\r\n        }\r\n\r\n        return this._hasAlphaChannel() && (this._transparencyMode == null || this._transparencyMode === Material.MATERIAL_ALPHATEST);\r\n    }\r\n\r\n    /**\r\n     * Specifies whether or not the alpha value of the diffuse texture should be used for alpha blending.\r\n     */\r\n    protected _shouldUseAlphaFromDiffuseTexture(): boolean {\r\n        return this._diffuseTexture != null && this._diffuseTexture.hasAlpha && this._useAlphaFromDiffuseTexture && this._transparencyMode !== Material.MATERIAL_OPAQUE;\r\n    }\r\n\r\n    /**\r\n     * Specifies whether or not there is a usable alpha channel for transparency.\r\n     */\r\n    protected _hasAlphaChannel(): boolean {\r\n        return (this._diffuseTexture != null && this._diffuseTexture.hasAlpha) || this._opacityTexture != null;\r\n    }\r\n\r\n    /**\r\n     * Get the texture used for alpha test purpose.\r\n     * @returns the diffuse texture in case of the standard material.\r\n     */\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return this._diffuseTexture;\r\n    }\r\n\r\n    /**\r\n     * Get if the submesh is ready to be used and all its information available.\r\n     * Child classes can use it to update shaders\r\n     * @param mesh defines the mesh to check\r\n     * @param subMesh defines which submesh to check\r\n     * @param useInstances specifies that instances should be used\r\n     * @returns a boolean indicating that the submesh is ready or not\r\n     */\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances: boolean = false): boolean {\r\n        if (!this._uniformBufferLayoutBuilt) {\r\n            this.buildUniformLayout();\r\n        }\r\n\r\n        if (subMesh.effect && this.isFrozen) {\r\n            if (subMesh.effect._wasPreviouslyReady && subMesh.effect._wasPreviouslyUsingInstances === useInstances) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            this._callbackPluginEventGeneric(MaterialPluginEvent.GetDefineNames, this._eventInfo);\r\n            subMesh.materialDefines = new StandardMaterialDefines(this._eventInfo.defineNames);\r\n        }\r\n\r\n        const scene = this.getScene();\r\n        const defines = <StandardMaterialDefines>subMesh.materialDefines;\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Lights\r\n        defines._needNormals = MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, true, this._maxSimultaneousLights, this._disableLighting);\r\n\r\n        // Multiview\r\n        MaterialHelper.PrepareDefinesForMultiview(scene, defines);\r\n\r\n        // PrePass\r\n        const oit = this.needAlphaBlendingForMesh(mesh) && this.getScene().useOrderIndependentTransparency;\r\n        MaterialHelper.PrepareDefinesForPrePass(scene, defines, this.canRenderToMRT && !oit);\r\n\r\n        // Order independant transparency\r\n        MaterialHelper.PrepareDefinesForOIT(scene, defines, oit);\r\n\r\n        // Textures\r\n        if (defines._areTexturesDirty) {\r\n            this._eventInfo.hasRenderTargetTextures = false;\r\n            this._callbackPluginEventHasRenderTargetTextures(this._eventInfo);\r\n            this._cacheHasRenderTargetTextures = this._eventInfo.hasRenderTargetTextures;\r\n            defines._needUVs = false;\r\n            for (let i = 1; i <= Constants.MAX_SUPPORTED_UV_SETS; ++i) {\r\n                defines[\"MAINUV\" + i] = false;\r\n            }\r\n            if (scene.texturesEnabled) {\r\n                defines.DIFFUSEDIRECTUV = 0;\r\n                defines.BUMPDIRECTUV = 0;\r\n                defines.AMBIENTDIRECTUV = 0;\r\n                defines.OPACITYDIRECTUV = 0;\r\n                defines.EMISSIVEDIRECTUV = 0;\r\n                defines.SPECULARDIRECTUV = 0;\r\n                defines.LIGHTMAPDIRECTUV = 0;\r\n\r\n                if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\r\n                    if (!this._diffuseTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    } else {\r\n                        MaterialHelper.PrepareDefinesForMergedUV(this._diffuseTexture, defines, \"DIFFUSE\");\r\n                    }\r\n                } else {\r\n                    defines.DIFFUSE = false;\r\n                }\r\n\r\n                if (this._ambientTexture && StandardMaterial.AmbientTextureEnabled) {\r\n                    if (!this._ambientTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    } else {\r\n                        MaterialHelper.PrepareDefinesForMergedUV(this._ambientTexture, defines, \"AMBIENT\");\r\n                    }\r\n                } else {\r\n                    defines.AMBIENT = false;\r\n                }\r\n\r\n                if (this._opacityTexture && StandardMaterial.OpacityTextureEnabled) {\r\n                    if (!this._opacityTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    } else {\r\n                        MaterialHelper.PrepareDefinesForMergedUV(this._opacityTexture, defines, \"OPACITY\");\r\n                        defines.OPACITYRGB = this._opacityTexture.getAlphaFromRGB;\r\n                    }\r\n                } else {\r\n                    defines.OPACITY = false;\r\n                }\r\n\r\n                if (this._reflectionTexture && StandardMaterial.ReflectionTextureEnabled) {\r\n                    if (!this._reflectionTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    } else {\r\n                        defines._needNormals = true;\r\n                        defines.REFLECTION = true;\r\n\r\n                        defines.ROUGHNESS = this._roughness > 0;\r\n                        defines.REFLECTIONOVERALPHA = this._useReflectionOverAlpha;\r\n                        defines.INVERTCUBICMAP = this._reflectionTexture.coordinatesMode === Texture.INVCUBIC_MODE;\r\n                        defines.REFLECTIONMAP_3D = this._reflectionTexture.isCube;\r\n                        defines.REFLECTIONMAP_OPPOSITEZ =\r\n                            defines.REFLECTIONMAP_3D && this.getScene().useRightHandedSystem ? !this._reflectionTexture.invertZ : this._reflectionTexture.invertZ;\r\n                        defines.RGBDREFLECTION = this._reflectionTexture.isRGBD;\r\n\r\n                        switch (this._reflectionTexture.coordinatesMode) {\r\n                            case Texture.EXPLICIT_MODE:\r\n                                defines.setReflectionMode(\"REFLECTIONMAP_EXPLICIT\");\r\n                                break;\r\n                            case Texture.PLANAR_MODE:\r\n                                defines.setReflectionMode(\"REFLECTIONMAP_PLANAR\");\r\n                                break;\r\n                            case Texture.PROJECTION_MODE:\r\n                                defines.setReflectionMode(\"REFLECTIONMAP_PROJECTION\");\r\n                                break;\r\n                            case Texture.SKYBOX_MODE:\r\n                                defines.setReflectionMode(\"REFLECTIONMAP_SKYBOX\");\r\n                                break;\r\n                            case Texture.SPHERICAL_MODE:\r\n                                defines.setReflectionMode(\"REFLECTIONMAP_SPHERICAL\");\r\n                                break;\r\n                            case Texture.EQUIRECTANGULAR_MODE:\r\n                                defines.setReflectionMode(\"REFLECTIONMAP_EQUIRECTANGULAR\");\r\n                                break;\r\n                            case Texture.FIXED_EQUIRECTANGULAR_MODE:\r\n                                defines.setReflectionMode(\"REFLECTIONMAP_EQUIRECTANGULAR_FIXED\");\r\n                                break;\r\n                            case Texture.FIXED_EQUIRECTANGULAR_MIRRORED_MODE:\r\n                                defines.setReflectionMode(\"REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED\");\r\n                                break;\r\n                            case Texture.CUBIC_MODE:\r\n                            case Texture.INVCUBIC_MODE:\r\n                            default:\r\n                                defines.setReflectionMode(\"REFLECTIONMAP_CUBIC\");\r\n                                break;\r\n                        }\r\n\r\n                        defines.USE_LOCAL_REFLECTIONMAP_CUBIC = (<any>this._reflectionTexture).boundingBoxSize ? true : false;\r\n                    }\r\n                } else {\r\n                    defines.REFLECTION = false;\r\n                    defines.REFLECTIONMAP_OPPOSITEZ = false;\r\n                }\r\n\r\n                if (this._emissiveTexture && StandardMaterial.EmissiveTextureEnabled) {\r\n                    if (!this._emissiveTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    } else {\r\n                        MaterialHelper.PrepareDefinesForMergedUV(this._emissiveTexture, defines, \"EMISSIVE\");\r\n                    }\r\n                } else {\r\n                    defines.EMISSIVE = false;\r\n                }\r\n\r\n                if (this._lightmapTexture && StandardMaterial.LightmapTextureEnabled) {\r\n                    if (!this._lightmapTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    } else {\r\n                        MaterialHelper.PrepareDefinesForMergedUV(this._lightmapTexture, defines, \"LIGHTMAP\");\r\n                        defines.USELIGHTMAPASSHADOWMAP = this._useLightmapAsShadowmap;\r\n                        defines.RGBDLIGHTMAP = this._lightmapTexture.isRGBD;\r\n                    }\r\n                } else {\r\n                    defines.LIGHTMAP = false;\r\n                }\r\n\r\n                if (this._specularTexture && StandardMaterial.SpecularTextureEnabled) {\r\n                    if (!this._specularTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    } else {\r\n                        MaterialHelper.PrepareDefinesForMergedUV(this._specularTexture, defines, \"SPECULAR\");\r\n                        defines.GLOSSINESS = this._useGlossinessFromSpecularMapAlpha;\r\n                    }\r\n                } else {\r\n                    defines.SPECULAR = false;\r\n                }\r\n\r\n                if (scene.getEngine().getCaps().standardDerivatives && this._bumpTexture && StandardMaterial.BumpTextureEnabled) {\r\n                    // Bump texture can not be not blocking.\r\n                    if (!this._bumpTexture.isReady()) {\r\n                        return false;\r\n                    } else {\r\n                        MaterialHelper.PrepareDefinesForMergedUV(this._bumpTexture, defines, \"BUMP\");\r\n\r\n                        defines.PARALLAX = this._useParallax;\r\n                        defines.PARALLAXOCCLUSION = this._useParallaxOcclusion;\r\n                    }\r\n\r\n                    defines.OBJECTSPACE_NORMALMAP = this._useObjectSpaceNormalMap;\r\n                } else {\r\n                    defines.BUMP = false;\r\n                    defines.PARALLAX = false;\r\n                    defines.PARALLAXOCCLUSION = false;\r\n                }\r\n\r\n                if (this._refractionTexture && StandardMaterial.RefractionTextureEnabled) {\r\n                    if (!this._refractionTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    } else {\r\n                        defines._needUVs = true;\r\n                        defines.REFRACTION = true;\r\n\r\n                        defines.REFRACTIONMAP_3D = this._refractionTexture.isCube;\r\n                        defines.RGBDREFRACTION = this._refractionTexture.isRGBD;\r\n                        defines.USE_LOCAL_REFRACTIONMAP_CUBIC = (<any>this._refractionTexture).boundingBoxSize ? true : false;\r\n                    }\r\n                } else {\r\n                    defines.REFRACTION = false;\r\n                }\r\n\r\n                defines.TWOSIDEDLIGHTING = !this._backFaceCulling && this._twoSidedLighting;\r\n            } else {\r\n                defines.DIFFUSE = false;\r\n                defines.AMBIENT = false;\r\n                defines.OPACITY = false;\r\n                defines.REFLECTION = false;\r\n                defines.EMISSIVE = false;\r\n                defines.LIGHTMAP = false;\r\n                defines.BUMP = false;\r\n                defines.REFRACTION = false;\r\n            }\r\n\r\n            defines.ALPHAFROMDIFFUSE = this._shouldUseAlphaFromDiffuseTexture();\r\n\r\n            defines.EMISSIVEASILLUMINATION = this._useEmissiveAsIllumination;\r\n\r\n            defines.LINKEMISSIVEWITHDIFFUSE = this._linkEmissiveWithDiffuse;\r\n\r\n            defines.SPECULAROVERALPHA = this._useSpecularOverAlpha;\r\n\r\n            defines.PREMULTIPLYALPHA = this.alphaMode === Constants.ALPHA_PREMULTIPLIED || this.alphaMode === Constants.ALPHA_PREMULTIPLIED_PORTERDUFF;\r\n\r\n            defines.ALPHATEST_AFTERALLALPHACOMPUTATIONS = this.transparencyMode !== null;\r\n\r\n            defines.ALPHABLEND = this.transparencyMode === null || this.needAlphaBlendingForMesh(mesh); // check on null for backward compatibility\r\n        }\r\n\r\n        this._eventInfo.isReadyForSubMesh = true;\r\n        this._eventInfo.defines = defines;\r\n        this._eventInfo.subMesh = subMesh;\r\n        this._callbackPluginEventIsReadyForSubMesh(this._eventInfo);\r\n\r\n        if (!this._eventInfo.isReadyForSubMesh) {\r\n            return false;\r\n        }\r\n\r\n        if (defines._areImageProcessingDirty && this._imageProcessingConfiguration) {\r\n            if (!this._imageProcessingConfiguration.isReady()) {\r\n                return false;\r\n            }\r\n\r\n            this._imageProcessingConfiguration.prepareDefines(defines);\r\n\r\n            defines.IS_REFLECTION_LINEAR = this.reflectionTexture != null && !this.reflectionTexture.gammaSpace;\r\n            defines.IS_REFRACTION_LINEAR = this.refractionTexture != null && !this.refractionTexture.gammaSpace;\r\n        }\r\n\r\n        if (defines._areFresnelDirty) {\r\n            if (StandardMaterial.FresnelEnabled) {\r\n                // Fresnel\r\n                if (\r\n                    this._diffuseFresnelParameters ||\r\n                    this._opacityFresnelParameters ||\r\n                    this._emissiveFresnelParameters ||\r\n                    this._refractionFresnelParameters ||\r\n                    this._reflectionFresnelParameters\r\n                ) {\r\n                    defines.DIFFUSEFRESNEL = this._diffuseFresnelParameters && this._diffuseFresnelParameters.isEnabled;\r\n\r\n                    defines.OPACITYFRESNEL = this._opacityFresnelParameters && this._opacityFresnelParameters.isEnabled;\r\n\r\n                    defines.REFLECTIONFRESNEL = this._reflectionFresnelParameters && this._reflectionFresnelParameters.isEnabled;\r\n\r\n                    defines.REFLECTIONFRESNELFROMSPECULAR = this._useReflectionFresnelFromSpecular;\r\n\r\n                    defines.REFRACTIONFRESNEL = this._refractionFresnelParameters && this._refractionFresnelParameters.isEnabled;\r\n\r\n                    defines.EMISSIVEFRESNEL = this._emissiveFresnelParameters && this._emissiveFresnelParameters.isEnabled;\r\n\r\n                    defines._needNormals = true;\r\n                    defines.FRESNEL = true;\r\n                }\r\n            } else {\r\n                defines.FRESNEL = false;\r\n            }\r\n        }\r\n\r\n        // Misc.\r\n        MaterialHelper.PrepareDefinesForMisc(\r\n            mesh,\r\n            scene,\r\n            this._useLogarithmicDepth,\r\n            this.pointsCloud,\r\n            this.fogEnabled,\r\n            this._shouldTurnAlphaTestOn(mesh) || this._forceAlphaTest,\r\n            defines,\r\n            this._applyDecalMapAfterDetailMap\r\n        );\r\n\r\n        // Values that need to be evaluated on every frame\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, this, defines, useInstances, null, subMesh.getRenderingMesh().hasThinInstances);\r\n\r\n        // External config\r\n        this._eventInfo.defines = defines;\r\n        this._eventInfo.mesh = mesh;\r\n        this._callbackPluginEventPrepareDefinesBeforeAttributes(this._eventInfo);\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true, true);\r\n\r\n        // External config\r\n        this._callbackPluginEventPrepareDefines(this._eventInfo);\r\n\r\n        // Get correct effect\r\n        let forceWasNotReadyPreviously = false;\r\n\r\n        if (defines.isDirty) {\r\n            const lightDisposed = defines._areLightsDisposed;\r\n            defines.markAsProcessed();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.REFLECTION) {\r\n                fallbacks.addFallback(0, \"REFLECTION\");\r\n            }\r\n\r\n            if (defines.SPECULAR) {\r\n                fallbacks.addFallback(0, \"SPECULAR\");\r\n            }\r\n\r\n            if (defines.BUMP) {\r\n                fallbacks.addFallback(0, \"BUMP\");\r\n            }\r\n\r\n            if (defines.PARALLAX) {\r\n                fallbacks.addFallback(1, \"PARALLAX\");\r\n            }\r\n\r\n            if (defines.PARALLAXOCCLUSION) {\r\n                fallbacks.addFallback(0, \"PARALLAXOCCLUSION\");\r\n            }\r\n\r\n            if (defines.SPECULAROVERALPHA) {\r\n                fallbacks.addFallback(0, \"SPECULAROVERALPHA\");\r\n            }\r\n\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            if (defines.POINTSIZE) {\r\n                fallbacks.addFallback(0, \"POINTSIZE\");\r\n            }\r\n\r\n            if (defines.LOGARITHMICDEPTH) {\r\n                fallbacks.addFallback(0, \"LOGARITHMICDEPTH\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, this._maxSimultaneousLights);\r\n\r\n            if (defines.SPECULARTERM) {\r\n                fallbacks.addFallback(0, \"SPECULARTERM\");\r\n            }\r\n\r\n            if (defines.DIFFUSEFRESNEL) {\r\n                fallbacks.addFallback(1, \"DIFFUSEFRESNEL\");\r\n            }\r\n\r\n            if (defines.OPACITYFRESNEL) {\r\n                fallbacks.addFallback(2, \"OPACITYFRESNEL\");\r\n            }\r\n\r\n            if (defines.REFLECTIONFRESNEL) {\r\n                fallbacks.addFallback(3, \"REFLECTIONFRESNEL\");\r\n            }\r\n\r\n            if (defines.EMISSIVEFRESNEL) {\r\n                fallbacks.addFallback(4, \"EMISSIVEFRESNEL\");\r\n            }\r\n\r\n            if (defines.FRESNEL) {\r\n                fallbacks.addFallback(4, \"FRESNEL\");\r\n            }\r\n\r\n            if (defines.MULTIVIEW) {\r\n                fallbacks.addFallback(0, \"MULTIVIEW\");\r\n            }\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.TANGENT) {\r\n                attribs.push(VertexBuffer.TangentKind);\r\n            }\r\n\r\n            for (let i = 1; i <= Constants.MAX_SUPPORTED_UV_SETS; ++i) {\r\n                if (defines[\"UV\" + i]) {\r\n                    attribs.push(`uv${i === 1 ? \"\" : i}`);\r\n                }\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n            MaterialHelper.PrepareAttributesForMorphTargets(attribs, mesh, defines);\r\n            MaterialHelper.PrepareAttributesForBakedVertexAnimation(attribs, mesh, defines);\r\n\r\n            let shaderName = \"default\";\r\n\r\n            const uniforms = [\r\n                \"world\",\r\n                \"view\",\r\n                \"viewProjection\",\r\n                \"vEyePosition\",\r\n                \"vLightsType\",\r\n                \"vAmbientColor\",\r\n                \"vDiffuseColor\",\r\n                \"vSpecularColor\",\r\n                \"vEmissiveColor\",\r\n                \"visibility\",\r\n                \"vFogInfos\",\r\n                \"vFogColor\",\r\n                \"pointSize\",\r\n                \"vDiffuseInfos\",\r\n                \"vAmbientInfos\",\r\n                \"vOpacityInfos\",\r\n                \"vReflectionInfos\",\r\n                \"vEmissiveInfos\",\r\n                \"vSpecularInfos\",\r\n                \"vBumpInfos\",\r\n                \"vLightmapInfos\",\r\n                \"vRefractionInfos\",\r\n                \"mBones\",\r\n                \"diffuseMatrix\",\r\n                \"ambientMatrix\",\r\n                \"opacityMatrix\",\r\n                \"reflectionMatrix\",\r\n                \"emissiveMatrix\",\r\n                \"specularMatrix\",\r\n                \"bumpMatrix\",\r\n                \"normalMatrix\",\r\n                \"lightmapMatrix\",\r\n                \"refractionMatrix\",\r\n                \"diffuseLeftColor\",\r\n                \"diffuseRightColor\",\r\n                \"opacityParts\",\r\n                \"reflectionLeftColor\",\r\n                \"reflectionRightColor\",\r\n                \"emissiveLeftColor\",\r\n                \"emissiveRightColor\",\r\n                \"refractionLeftColor\",\r\n                \"refractionRightColor\",\r\n                \"vReflectionPosition\",\r\n                \"vReflectionSize\",\r\n                \"vRefractionPosition\",\r\n                \"vRefractionSize\",\r\n                \"logarithmicDepthConstant\",\r\n                \"vTangentSpaceParams\",\r\n                \"alphaCutOff\",\r\n                \"boneTextureWidth\",\r\n                \"morphTargetTextureInfo\",\r\n                \"morphTargetTextureIndices\",\r\n            ];\r\n\r\n            const samplers = [\r\n                \"diffuseSampler\",\r\n                \"ambientSampler\",\r\n                \"opacitySampler\",\r\n                \"reflectionCubeSampler\",\r\n                \"reflection2DSampler\",\r\n                \"emissiveSampler\",\r\n                \"specularSampler\",\r\n                \"bumpSampler\",\r\n                \"lightmapSampler\",\r\n                \"refractionCubeSampler\",\r\n                \"refraction2DSampler\",\r\n                \"boneSampler\",\r\n                \"morphTargets\",\r\n                \"oitDepthSampler\",\r\n                \"oitFrontColorSampler\",\r\n            ];\r\n\r\n            const uniformBuffers = [\"Material\", \"Scene\", \"Mesh\"];\r\n\r\n            const indexParameters = { maxSimultaneousLights: this._maxSimultaneousLights, maxSimultaneousMorphTargets: defines.NUM_MORPH_INFLUENCERS };\r\n\r\n            this._eventInfo.fallbacks = fallbacks;\r\n            this._eventInfo.fallbackRank = 0;\r\n            this._eventInfo.defines = defines;\r\n            this._eventInfo.uniforms = uniforms;\r\n            this._eventInfo.attributes = attribs;\r\n            this._eventInfo.samplers = samplers;\r\n            this._eventInfo.uniformBuffersNames = uniformBuffers;\r\n            this._eventInfo.customCode = undefined;\r\n            this._eventInfo.mesh = mesh;\r\n            this._eventInfo.indexParameters = indexParameters;\r\n            this._callbackPluginEventGeneric(MaterialPluginEvent.PrepareEffect, this._eventInfo);\r\n\r\n            PrePassConfiguration.AddUniforms(uniforms);\r\n            PrePassConfiguration.AddSamplers(samplers);\r\n\r\n            if (ImageProcessingConfiguration) {\r\n                ImageProcessingConfiguration.PrepareUniforms(uniforms, defines);\r\n                ImageProcessingConfiguration.PrepareSamplers(samplers, defines);\r\n            }\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: this._maxSimultaneousLights,\r\n            });\r\n\r\n            addClipPlaneUniforms(uniforms);\r\n\r\n            const csnrOptions: ICustomShaderNameResolveOptions = {};\r\n\r\n            if (this.customShaderNameResolve) {\r\n                shaderName = this.customShaderNameResolve(shaderName, uniforms, uniformBuffers, samplers, defines, attribs, csnrOptions);\r\n            }\r\n\r\n            const join = defines.toString();\r\n\r\n            const previousEffect = subMesh.effect;\r\n            let effect = scene.getEngine().createEffect(\r\n                shaderName,\r\n                <IEffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: fallbacks,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters,\r\n                    processFinalCode: csnrOptions.processFinalCode,\r\n                    processCodeAfterIncludes: this._eventInfo.customCode,\r\n                    multiTarget: defines.PREPASS,\r\n                },\r\n                engine\r\n            );\r\n\r\n            this._eventInfo.customCode = undefined;\r\n\r\n            if (effect) {\r\n                if (this._onEffectCreatedObservable) {\r\n                    onCreatedEffectParameters.effect = effect;\r\n                    onCreatedEffectParameters.subMesh = subMesh;\r\n                    this._onEffectCreatedObservable.notifyObservers(onCreatedEffectParameters);\r\n                }\r\n\r\n                // Use previous effect while new one is compiling\r\n                if (this.allowShaderHotSwapping && previousEffect && !effect.isReady()) {\r\n                    effect = previousEffect;\r\n                    defines.markAsUnprocessed();\r\n\r\n                    forceWasNotReadyPreviously = this.isFrozen;\r\n\r\n                    if (lightDisposed) {\r\n                        // re register in case it takes more than one frame.\r\n                        defines._areLightsDisposed = true;\r\n                        return false;\r\n                    }\r\n                } else {\r\n                    scene.resetCachedMaterial();\r\n                    subMesh.setEffect(effect, defines, this._materialContext);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = forceWasNotReadyPreviously ? false : true;\r\n        subMesh.effect._wasPreviouslyUsingInstances = useInstances;\r\n\r\n        this._checkScenePerformancePriority();\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Builds the material UBO layouts.\r\n     * Used internally during the effect preparation.\r\n     */\r\n    public buildUniformLayout(): void {\r\n        // Order is important !\r\n        const ubo = this._uniformBuffer;\r\n        ubo.addUniform(\"diffuseLeftColor\", 4);\r\n        ubo.addUniform(\"diffuseRightColor\", 4);\r\n        ubo.addUniform(\"opacityParts\", 4);\r\n        ubo.addUniform(\"reflectionLeftColor\", 4);\r\n        ubo.addUniform(\"reflectionRightColor\", 4);\r\n        ubo.addUniform(\"refractionLeftColor\", 4);\r\n        ubo.addUniform(\"refractionRightColor\", 4);\r\n        ubo.addUniform(\"emissiveLeftColor\", 4);\r\n        ubo.addUniform(\"emissiveRightColor\", 4);\r\n\r\n        ubo.addUniform(\"vDiffuseInfos\", 2);\r\n        ubo.addUniform(\"vAmbientInfos\", 2);\r\n        ubo.addUniform(\"vOpacityInfos\", 2);\r\n        ubo.addUniform(\"vReflectionInfos\", 2);\r\n        ubo.addUniform(\"vReflectionPosition\", 3);\r\n        ubo.addUniform(\"vReflectionSize\", 3);\r\n        ubo.addUniform(\"vEmissiveInfos\", 2);\r\n        ubo.addUniform(\"vLightmapInfos\", 2);\r\n        ubo.addUniform(\"vSpecularInfos\", 2);\r\n        ubo.addUniform(\"vBumpInfos\", 3);\r\n\r\n        ubo.addUniform(\"diffuseMatrix\", 16);\r\n        ubo.addUniform(\"ambientMatrix\", 16);\r\n        ubo.addUniform(\"opacityMatrix\", 16);\r\n        ubo.addUniform(\"reflectionMatrix\", 16);\r\n        ubo.addUniform(\"emissiveMatrix\", 16);\r\n        ubo.addUniform(\"lightmapMatrix\", 16);\r\n        ubo.addUniform(\"specularMatrix\", 16);\r\n        ubo.addUniform(\"bumpMatrix\", 16);\r\n        ubo.addUniform(\"vTangentSpaceParams\", 2);\r\n        ubo.addUniform(\"pointSize\", 1);\r\n        ubo.addUniform(\"alphaCutOff\", 1);\r\n        ubo.addUniform(\"refractionMatrix\", 16);\r\n        ubo.addUniform(\"vRefractionInfos\", 4);\r\n        ubo.addUniform(\"vRefractionPosition\", 3);\r\n        ubo.addUniform(\"vRefractionSize\", 3);\r\n        ubo.addUniform(\"vSpecularColor\", 4);\r\n        ubo.addUniform(\"vEmissiveColor\", 3);\r\n        ubo.addUniform(\"vDiffuseColor\", 4);\r\n        ubo.addUniform(\"vAmbientColor\", 3);\r\n\r\n        super.buildUniformLayout();\r\n    }\r\n\r\n    /**\r\n     * Binds the submesh to this material by preparing the effect and shader to draw\r\n     * @param world defines the world transformation matrix\r\n     * @param mesh defines the mesh containing the submesh\r\n     * @param subMesh defines the submesh to bind the material to\r\n     */\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const scene = this.getScene();\r\n\r\n        const defines = <StandardMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices Mesh.\r\n        mesh.getMeshUniformBuffer().bindToEffect(effect, \"Mesh\");\r\n        mesh.transferToEffect(world);\r\n\r\n        // Binding unconditionally\r\n        this._uniformBuffer.bindToEffect(effect, \"Material\");\r\n\r\n        this.prePassConfiguration.bindForSubMesh(this._activeEffect, scene, mesh, world, this.isFrozen);\r\n\r\n        this._eventInfo.subMesh = subMesh;\r\n        this._callbackPluginEventHardBindForSubMesh(this._eventInfo);\r\n\r\n        // Normal Matrix\r\n        if (defines.OBJECTSPACE_NORMALMAP) {\r\n            world.toNormalMatrix(this._normalMatrix);\r\n            this.bindOnlyNormalMatrix(this._normalMatrix);\r\n        }\r\n\r\n        const mustRebind = effect._forceRebindOnNextCall || this._mustRebind(scene, effect, mesh.visibility);\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, effect);\r\n        const ubo = this._uniformBuffer;\r\n        if (mustRebind) {\r\n            this.bindViewProjection(effect);\r\n            if (!ubo.useUbo || !this.isFrozen || !ubo.isSync || effect._forceRebindOnNextCall) {\r\n                if (StandardMaterial.FresnelEnabled && defines.FRESNEL) {\r\n                    // Fresnel\r\n                    if (this.diffuseFresnelParameters && this.diffuseFresnelParameters.isEnabled) {\r\n                        ubo.updateColor4(\"diffuseLeftColor\", this.diffuseFresnelParameters.leftColor, this.diffuseFresnelParameters.power);\r\n                        ubo.updateColor4(\"diffuseRightColor\", this.diffuseFresnelParameters.rightColor, this.diffuseFresnelParameters.bias);\r\n                    }\r\n\r\n                    if (this.opacityFresnelParameters && this.opacityFresnelParameters.isEnabled) {\r\n                        ubo.updateColor4(\r\n                            \"opacityParts\",\r\n                            new Color3(\r\n                                this.opacityFresnelParameters.leftColor.toLuminance(),\r\n                                this.opacityFresnelParameters.rightColor.toLuminance(),\r\n                                this.opacityFresnelParameters.bias\r\n                            ),\r\n                            this.opacityFresnelParameters.power\r\n                        );\r\n                    }\r\n\r\n                    if (this.reflectionFresnelParameters && this.reflectionFresnelParameters.isEnabled) {\r\n                        ubo.updateColor4(\"reflectionLeftColor\", this.reflectionFresnelParameters.leftColor, this.reflectionFresnelParameters.power);\r\n                        ubo.updateColor4(\"reflectionRightColor\", this.reflectionFresnelParameters.rightColor, this.reflectionFresnelParameters.bias);\r\n                    }\r\n\r\n                    if (this.refractionFresnelParameters && this.refractionFresnelParameters.isEnabled) {\r\n                        ubo.updateColor4(\"refractionLeftColor\", this.refractionFresnelParameters.leftColor, this.refractionFresnelParameters.power);\r\n                        ubo.updateColor4(\"refractionRightColor\", this.refractionFresnelParameters.rightColor, this.refractionFresnelParameters.bias);\r\n                    }\r\n\r\n                    if (this.emissiveFresnelParameters && this.emissiveFresnelParameters.isEnabled) {\r\n                        ubo.updateColor4(\"emissiveLeftColor\", this.emissiveFresnelParameters.leftColor, this.emissiveFresnelParameters.power);\r\n                        ubo.updateColor4(\"emissiveRightColor\", this.emissiveFresnelParameters.rightColor, this.emissiveFresnelParameters.bias);\r\n                    }\r\n                }\r\n\r\n                // Textures\r\n                if (scene.texturesEnabled) {\r\n                    if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\r\n                        ubo.updateFloat2(\"vDiffuseInfos\", this._diffuseTexture.coordinatesIndex, this._diffuseTexture.level);\r\n                        MaterialHelper.BindTextureMatrix(this._diffuseTexture, ubo, \"diffuse\");\r\n                    }\r\n\r\n                    if (this._ambientTexture && StandardMaterial.AmbientTextureEnabled) {\r\n                        ubo.updateFloat2(\"vAmbientInfos\", this._ambientTexture.coordinatesIndex, this._ambientTexture.level);\r\n                        MaterialHelper.BindTextureMatrix(this._ambientTexture, ubo, \"ambient\");\r\n                    }\r\n\r\n                    if (this._opacityTexture && StandardMaterial.OpacityTextureEnabled) {\r\n                        ubo.updateFloat2(\"vOpacityInfos\", this._opacityTexture.coordinatesIndex, this._opacityTexture.level);\r\n                        MaterialHelper.BindTextureMatrix(this._opacityTexture, ubo, \"opacity\");\r\n                    }\r\n\r\n                    if (this._hasAlphaChannel()) {\r\n                        ubo.updateFloat(\"alphaCutOff\", this.alphaCutOff);\r\n                    }\r\n\r\n                    if (this._reflectionTexture && StandardMaterial.ReflectionTextureEnabled) {\r\n                        ubo.updateFloat2(\"vReflectionInfos\", this._reflectionTexture.level, this.roughness);\r\n                        ubo.updateMatrix(\"reflectionMatrix\", this._reflectionTexture.getReflectionTextureMatrix());\r\n\r\n                        if ((<any>this._reflectionTexture).boundingBoxSize) {\r\n                            const cubeTexture = <CubeTexture>this._reflectionTexture;\r\n\r\n                            ubo.updateVector3(\"vReflectionPosition\", cubeTexture.boundingBoxPosition);\r\n                            ubo.updateVector3(\"vReflectionSize\", cubeTexture.boundingBoxSize);\r\n                        }\r\n                    }\r\n\r\n                    if (this._emissiveTexture && StandardMaterial.EmissiveTextureEnabled) {\r\n                        ubo.updateFloat2(\"vEmissiveInfos\", this._emissiveTexture.coordinatesIndex, this._emissiveTexture.level);\r\n                        MaterialHelper.BindTextureMatrix(this._emissiveTexture, ubo, \"emissive\");\r\n                    }\r\n\r\n                    if (this._lightmapTexture && StandardMaterial.LightmapTextureEnabled) {\r\n                        ubo.updateFloat2(\"vLightmapInfos\", this._lightmapTexture.coordinatesIndex, this._lightmapTexture.level);\r\n                        MaterialHelper.BindTextureMatrix(this._lightmapTexture, ubo, \"lightmap\");\r\n                    }\r\n\r\n                    if (this._specularTexture && StandardMaterial.SpecularTextureEnabled) {\r\n                        ubo.updateFloat2(\"vSpecularInfos\", this._specularTexture.coordinatesIndex, this._specularTexture.level);\r\n                        MaterialHelper.BindTextureMatrix(this._specularTexture, ubo, \"specular\");\r\n                    }\r\n\r\n                    if (this._bumpTexture && scene.getEngine().getCaps().standardDerivatives && StandardMaterial.BumpTextureEnabled) {\r\n                        ubo.updateFloat3(\"vBumpInfos\", this._bumpTexture.coordinatesIndex, 1.0 / this._bumpTexture.level, this.parallaxScaleBias);\r\n                        MaterialHelper.BindTextureMatrix(this._bumpTexture, ubo, \"bump\");\r\n\r\n                        if (scene._mirroredCameraPosition) {\r\n                            ubo.updateFloat2(\"vTangentSpaceParams\", this._invertNormalMapX ? 1.0 : -1.0, this._invertNormalMapY ? 1.0 : -1.0);\r\n                        } else {\r\n                            ubo.updateFloat2(\"vTangentSpaceParams\", this._invertNormalMapX ? -1.0 : 1.0, this._invertNormalMapY ? -1.0 : 1.0);\r\n                        }\r\n                    }\r\n\r\n                    if (this._refractionTexture && StandardMaterial.RefractionTextureEnabled) {\r\n                        let depth = 1.0;\r\n                        if (!this._refractionTexture.isCube) {\r\n                            ubo.updateMatrix(\"refractionMatrix\", this._refractionTexture.getReflectionTextureMatrix());\r\n\r\n                            if ((<any>this._refractionTexture).depth) {\r\n                                depth = (<any>this._refractionTexture).depth;\r\n                            }\r\n                        }\r\n                        ubo.updateFloat4(\"vRefractionInfos\", this._refractionTexture.level, this.indexOfRefraction, depth, this.invertRefractionY ? -1 : 1);\r\n\r\n                        if ((<any>this._refractionTexture).boundingBoxSize) {\r\n                            const cubeTexture = <CubeTexture>this._refractionTexture;\r\n\r\n                            ubo.updateVector3(\"vRefractionPosition\", cubeTexture.boundingBoxPosition);\r\n                            ubo.updateVector3(\"vRefractionSize\", cubeTexture.boundingBoxSize);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Point size\r\n                if (this.pointsCloud) {\r\n                    ubo.updateFloat(\"pointSize\", this.pointSize);\r\n                }\r\n\r\n                if (defines.SPECULARTERM) {\r\n                    ubo.updateColor4(\"vSpecularColor\", this.specularColor, this.specularPower);\r\n                }\r\n\r\n                ubo.updateColor3(\"vEmissiveColor\", StandardMaterial.EmissiveTextureEnabled ? this.emissiveColor : Color3.BlackReadOnly);\r\n                ubo.updateColor4(\"vDiffuseColor\", this.diffuseColor, this.alpha);\r\n\r\n                scene.ambientColor.multiplyToRef(this.ambientColor, this._globalAmbientColor);\r\n                ubo.updateColor3(\"vAmbientColor\", this._globalAmbientColor);\r\n            }\r\n\r\n            // Textures\r\n            if (scene.texturesEnabled) {\r\n                if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\r\n                    effect.setTexture(\"diffuseSampler\", this._diffuseTexture);\r\n                }\r\n\r\n                if (this._ambientTexture && StandardMaterial.AmbientTextureEnabled) {\r\n                    effect.setTexture(\"ambientSampler\", this._ambientTexture);\r\n                }\r\n\r\n                if (this._opacityTexture && StandardMaterial.OpacityTextureEnabled) {\r\n                    effect.setTexture(\"opacitySampler\", this._opacityTexture);\r\n                }\r\n\r\n                if (this._reflectionTexture && StandardMaterial.ReflectionTextureEnabled) {\r\n                    if (this._reflectionTexture.isCube) {\r\n                        effect.setTexture(\"reflectionCubeSampler\", this._reflectionTexture);\r\n                    } else {\r\n                        effect.setTexture(\"reflection2DSampler\", this._reflectionTexture);\r\n                    }\r\n                }\r\n\r\n                if (this._emissiveTexture && StandardMaterial.EmissiveTextureEnabled) {\r\n                    effect.setTexture(\"emissiveSampler\", this._emissiveTexture);\r\n                }\r\n\r\n                if (this._lightmapTexture && StandardMaterial.LightmapTextureEnabled) {\r\n                    effect.setTexture(\"lightmapSampler\", this._lightmapTexture);\r\n                }\r\n\r\n                if (this._specularTexture && StandardMaterial.SpecularTextureEnabled) {\r\n                    effect.setTexture(\"specularSampler\", this._specularTexture);\r\n                }\r\n\r\n                if (this._bumpTexture && scene.getEngine().getCaps().standardDerivatives && StandardMaterial.BumpTextureEnabled) {\r\n                    effect.setTexture(\"bumpSampler\", this._bumpTexture);\r\n                }\r\n\r\n                if (this._refractionTexture && StandardMaterial.RefractionTextureEnabled) {\r\n                    if (this._refractionTexture.isCube) {\r\n                        effect.setTexture(\"refractionCubeSampler\", this._refractionTexture);\r\n                    } else {\r\n                        effect.setTexture(\"refraction2DSampler\", this._refractionTexture);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // OIT with depth peeling\r\n            if (this.getScene().useOrderIndependentTransparency && this.needAlphaBlendingForMesh(mesh)) {\r\n                this.getScene().depthPeelingRenderer!.bind(effect);\r\n            }\r\n\r\n            this._eventInfo.subMesh = subMesh;\r\n            this._callbackPluginEventBindForSubMesh(this._eventInfo);\r\n\r\n            // Clip plane\r\n            bindClipPlane(effect, this, scene);\r\n\r\n            // Colors\r\n            this.bindEyePosition(effect);\r\n        } else if (scene.getEngine()._features.needToAlwaysBindUniformBuffers) {\r\n            this._needToBindSceneUbo = true;\r\n        }\r\n\r\n        if (mustRebind || !this.isFrozen) {\r\n            // Lights\r\n            if (scene.lightsEnabled && !this._disableLighting) {\r\n                MaterialHelper.BindLights(scene, mesh, effect, defines, this._maxSimultaneousLights);\r\n            }\r\n\r\n            // View\r\n            if (\r\n                (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) ||\r\n                this._reflectionTexture ||\r\n                this._refractionTexture ||\r\n                mesh.receiveShadows ||\r\n                defines.PREPASS\r\n            ) {\r\n                this.bindView(effect);\r\n            }\r\n\r\n            // Fog\r\n            MaterialHelper.BindFogParameters(scene, mesh, effect);\r\n\r\n            // Morph targets\r\n            if (defines.NUM_MORPH_INFLUENCERS) {\r\n                MaterialHelper.BindMorphTargetParameters(mesh, effect);\r\n            }\r\n\r\n            if (defines.BAKED_VERTEX_ANIMATION_TEXTURE) {\r\n                mesh.bakedVertexAnimationManager?.bind(effect, defines.INSTANCES);\r\n            }\r\n\r\n            // Log. depth\r\n            if (this.useLogarithmicDepth) {\r\n                MaterialHelper.BindLogDepth(defines, effect, scene);\r\n            }\r\n\r\n            // image processing\r\n            if (this._imageProcessingConfiguration && !this._imageProcessingConfiguration.applyByPostProcess) {\r\n                this._imageProcessingConfiguration.bind(this._activeEffect);\r\n            }\r\n        }\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n        ubo.update();\r\n    }\r\n\r\n    /**\r\n     * Get the list of animatables in the material.\r\n     * @returns the list of animatables object used in the material\r\n     */\r\n    public getAnimatables(): IAnimatable[] {\r\n        const results = super.getAnimatables();\r\n\r\n        if (this._diffuseTexture && this._diffuseTexture.animations && this._diffuseTexture.animations.length > 0) {\r\n            results.push(this._diffuseTexture);\r\n        }\r\n\r\n        if (this._ambientTexture && this._ambientTexture.animations && this._ambientTexture.animations.length > 0) {\r\n            results.push(this._ambientTexture);\r\n        }\r\n\r\n        if (this._opacityTexture && this._opacityTexture.animations && this._opacityTexture.animations.length > 0) {\r\n            results.push(this._opacityTexture);\r\n        }\r\n\r\n        if (this._reflectionTexture && this._reflectionTexture.animations && this._reflectionTexture.animations.length > 0) {\r\n            results.push(this._reflectionTexture);\r\n        }\r\n\r\n        if (this._emissiveTexture && this._emissiveTexture.animations && this._emissiveTexture.animations.length > 0) {\r\n            results.push(this._emissiveTexture);\r\n        }\r\n\r\n        if (this._specularTexture && this._specularTexture.animations && this._specularTexture.animations.length > 0) {\r\n            results.push(this._specularTexture);\r\n        }\r\n\r\n        if (this._bumpTexture && this._bumpTexture.animations && this._bumpTexture.animations.length > 0) {\r\n            results.push(this._bumpTexture);\r\n        }\r\n\r\n        if (this._lightmapTexture && this._lightmapTexture.animations && this._lightmapTexture.animations.length > 0) {\r\n            results.push(this._lightmapTexture);\r\n        }\r\n\r\n        if (this._refractionTexture && this._refractionTexture.animations && this._refractionTexture.animations.length > 0) {\r\n            results.push(this._refractionTexture);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Gets the active textures from the material\r\n     * @returns an array of textures\r\n     */\r\n    public getActiveTextures(): BaseTexture[] {\r\n        const activeTextures = super.getActiveTextures();\r\n\r\n        if (this._diffuseTexture) {\r\n            activeTextures.push(this._diffuseTexture);\r\n        }\r\n\r\n        if (this._ambientTexture) {\r\n            activeTextures.push(this._ambientTexture);\r\n        }\r\n\r\n        if (this._opacityTexture) {\r\n            activeTextures.push(this._opacityTexture);\r\n        }\r\n\r\n        if (this._reflectionTexture) {\r\n            activeTextures.push(this._reflectionTexture);\r\n        }\r\n\r\n        if (this._emissiveTexture) {\r\n            activeTextures.push(this._emissiveTexture);\r\n        }\r\n\r\n        if (this._specularTexture) {\r\n            activeTextures.push(this._specularTexture);\r\n        }\r\n\r\n        if (this._bumpTexture) {\r\n            activeTextures.push(this._bumpTexture);\r\n        }\r\n\r\n        if (this._lightmapTexture) {\r\n            activeTextures.push(this._lightmapTexture);\r\n        }\r\n\r\n        if (this._refractionTexture) {\r\n            activeTextures.push(this._refractionTexture);\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    /**\r\n     * Specifies if the material uses a texture\r\n     * @param texture defines the texture to check against the material\r\n     * @returns a boolean specifying if the material uses the texture\r\n     */\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._ambientTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._opacityTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._reflectionTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._emissiveTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._specularTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._bumpTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._lightmapTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._refractionTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Disposes the material\r\n     * @param forceDisposeEffect specifies if effects should be forcefully disposed\r\n     * @param forceDisposeTextures specifies if textures should be forcefully disposed\r\n     */\r\n    public dispose(forceDisposeEffect?: boolean, forceDisposeTextures?: boolean): void {\r\n        if (forceDisposeTextures) {\r\n            this._diffuseTexture?.dispose();\r\n            this._ambientTexture?.dispose();\r\n            this._opacityTexture?.dispose();\r\n            this._reflectionTexture?.dispose();\r\n            this._emissiveTexture?.dispose();\r\n            this._specularTexture?.dispose();\r\n            this._bumpTexture?.dispose();\r\n            this._lightmapTexture?.dispose();\r\n            this._refractionTexture?.dispose();\r\n        }\r\n\r\n        if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\r\n            this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect, forceDisposeTextures);\r\n    }\r\n\r\n    /**\r\n     * Makes a duplicate of the material, and gives it a new name\r\n     * @param name defines the new name for the duplicated material\r\n     * @param cloneTexturesOnlyOnce - if a texture is used in more than one channel (e.g diffuse and opacity), only clone it once and reuse it on the other channels. Default false.\r\n     * @param rootUrl defines the root URL to use to load textures\r\n     * @returns the cloned material\r\n     */\r\n    public clone(name: string, cloneTexturesOnlyOnce: boolean = true, rootUrl = \"\"): StandardMaterial {\r\n        const result = SerializationHelper.Clone(() => new StandardMaterial(name, this.getScene()), this, { cloneTexturesOnlyOnce });\r\n\r\n        result.name = name;\r\n        result.id = name;\r\n\r\n        this.stencil.copyTo(result.stencil);\r\n\r\n        this._clonePlugins(result, rootUrl);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a standard material from parsed material data\r\n     * @param source defines the JSON representation of the material\r\n     * @param scene defines the hosting scene\r\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\r\n     * @returns a new standard material\r\n     */\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): StandardMaterial {\r\n        const material = SerializationHelper.Parse(() => new StandardMaterial(source.name, scene), source, scene, rootUrl);\r\n\r\n        if (source.stencil) {\r\n            material.stencil.parse(source.stencil, scene, rootUrl);\r\n        }\r\n\r\n        Material._parsePlugins(source, material, scene, rootUrl);\r\n\r\n        return material;\r\n    }\r\n\r\n    // Flags used to enable or disable a type of texture for all Standard Materials\r\n    /**\r\n     * Are diffuse textures enabled in the application.\r\n     */\r\n    public static get DiffuseTextureEnabled(): boolean {\r\n        return MaterialFlags.DiffuseTextureEnabled;\r\n    }\r\n    public static set DiffuseTextureEnabled(value: boolean) {\r\n        MaterialFlags.DiffuseTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are detail textures enabled in the application.\r\n     */\r\n    public static get DetailTextureEnabled(): boolean {\r\n        return MaterialFlags.DetailTextureEnabled;\r\n    }\r\n    public static set DetailTextureEnabled(value: boolean) {\r\n        MaterialFlags.DetailTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are ambient textures enabled in the application.\r\n     */\r\n    public static get AmbientTextureEnabled(): boolean {\r\n        return MaterialFlags.AmbientTextureEnabled;\r\n    }\r\n    public static set AmbientTextureEnabled(value: boolean) {\r\n        MaterialFlags.AmbientTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are opacity textures enabled in the application.\r\n     */\r\n    public static get OpacityTextureEnabled(): boolean {\r\n        return MaterialFlags.OpacityTextureEnabled;\r\n    }\r\n    public static set OpacityTextureEnabled(value: boolean) {\r\n        MaterialFlags.OpacityTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are reflection textures enabled in the application.\r\n     */\r\n    public static get ReflectionTextureEnabled(): boolean {\r\n        return MaterialFlags.ReflectionTextureEnabled;\r\n    }\r\n    public static set ReflectionTextureEnabled(value: boolean) {\r\n        MaterialFlags.ReflectionTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are emissive textures enabled in the application.\r\n     */\r\n    public static get EmissiveTextureEnabled(): boolean {\r\n        return MaterialFlags.EmissiveTextureEnabled;\r\n    }\r\n    public static set EmissiveTextureEnabled(value: boolean) {\r\n        MaterialFlags.EmissiveTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are specular textures enabled in the application.\r\n     */\r\n    public static get SpecularTextureEnabled(): boolean {\r\n        return MaterialFlags.SpecularTextureEnabled;\r\n    }\r\n    public static set SpecularTextureEnabled(value: boolean) {\r\n        MaterialFlags.SpecularTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are bump textures enabled in the application.\r\n     */\r\n    public static get BumpTextureEnabled(): boolean {\r\n        return MaterialFlags.BumpTextureEnabled;\r\n    }\r\n    public static set BumpTextureEnabled(value: boolean) {\r\n        MaterialFlags.BumpTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are lightmap textures enabled in the application.\r\n     */\r\n    public static get LightmapTextureEnabled(): boolean {\r\n        return MaterialFlags.LightmapTextureEnabled;\r\n    }\r\n    public static set LightmapTextureEnabled(value: boolean) {\r\n        MaterialFlags.LightmapTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are refraction textures enabled in the application.\r\n     */\r\n    public static get RefractionTextureEnabled(): boolean {\r\n        return MaterialFlags.RefractionTextureEnabled;\r\n    }\r\n    public static set RefractionTextureEnabled(value: boolean) {\r\n        MaterialFlags.RefractionTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are color grading textures enabled in the application.\r\n     */\r\n    public static get ColorGradingTextureEnabled(): boolean {\r\n        return MaterialFlags.ColorGradingTextureEnabled;\r\n    }\r\n    public static set ColorGradingTextureEnabled(value: boolean) {\r\n        MaterialFlags.ColorGradingTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are fresnels enabled in the application.\r\n     */\r\n    public static get FresnelEnabled(): boolean {\r\n        return MaterialFlags.FresnelEnabled;\r\n    }\r\n    public static set FresnelEnabled(value: boolean) {\r\n        MaterialFlags.FresnelEnabled = value;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.StandardMaterial\", StandardMaterial);\r\n\r\nScene.DefaultMaterialFactory = (scene: Scene) => {\r\n    return new StandardMaterial(\"default material\", scene);\r\n};\r\n","import type { Scene } from \"../../scene\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport { Color3 } from \"../../Maths/math.color\";\r\nimport { Mesh } from \"../mesh\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport { GroundMesh } from \"../groundMesh\";\r\nimport { Tools } from \"../../Misc/tools\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { EngineStore } from \"../../Engines/engineStore\";\r\nimport { Epsilon } from \"../../Maths/math.constants\";\r\nimport { CompatibilityOptions } from \"../../Compat/compatibilityOptions\";\r\n\r\n/**\r\n * Creates the VertexData for a Ground\r\n * @param options an object used to set the following optional parameters for the Ground, required but can be empty\r\n *  - width the width (x direction) of the ground, optional, default 1\r\n *  - height the height (z direction) of the ground, optional, default 1\r\n *  - subdivisions the number of subdivisions per side, optional, default 1\r\n * @param options.width\r\n * @param options.height\r\n * @param options.subdivisions\r\n * @param options.subdivisionsX\r\n * @param options.subdivisionsY\r\n * @returns the VertexData of the Ground\r\n */\r\nexport function CreateGroundVertexData(options: { width?: number; height?: number; subdivisions?: number; subdivisionsX?: number; subdivisionsY?: number }): VertexData {\r\n    const indices = [];\r\n    const positions = [];\r\n    const normals = [];\r\n    const uvs = [];\r\n    let row: number, col: number;\r\n\r\n    const width: number = options.width || 1;\r\n    const height: number = options.height || 1;\r\n    const subdivisionsX: number = (options.subdivisionsX || options.subdivisions || 1) | 0;\r\n    const subdivisionsY: number = (options.subdivisionsY || options.subdivisions || 1) | 0;\r\n\r\n    for (row = 0; row <= subdivisionsY; row++) {\r\n        for (col = 0; col <= subdivisionsX; col++) {\r\n            const position = new Vector3((col * width) / subdivisionsX - width / 2.0, 0, ((subdivisionsY - row) * height) / subdivisionsY - height / 2.0);\r\n            const normal = new Vector3(0, 1.0, 0);\r\n\r\n            positions.push(position.x, position.y, position.z);\r\n            normals.push(normal.x, normal.y, normal.z);\r\n            uvs.push(col / subdivisionsX, CompatibilityOptions.UseOpenGLOrientationForUV ? row / subdivisionsY : 1.0 - row / subdivisionsY);\r\n        }\r\n    }\r\n\r\n    for (row = 0; row < subdivisionsY; row++) {\r\n        for (col = 0; col < subdivisionsX; col++) {\r\n            indices.push(col + 1 + (row + 1) * (subdivisionsX + 1));\r\n            indices.push(col + 1 + row * (subdivisionsX + 1));\r\n            indices.push(col + row * (subdivisionsX + 1));\r\n\r\n            indices.push(col + (row + 1) * (subdivisionsX + 1));\r\n            indices.push(col + 1 + (row + 1) * (subdivisionsX + 1));\r\n            indices.push(col + row * (subdivisionsX + 1));\r\n        }\r\n    }\r\n\r\n    // Result\r\n    const vertexData = new VertexData();\r\n\r\n    vertexData.indices = indices;\r\n    vertexData.positions = positions;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates the VertexData for a TiledGround by subdividing the ground into tiles\r\n * @param options an object used to set the following optional parameters for the Ground, required but can be empty\r\n * * xmin the ground minimum X coordinate, optional, default -1\r\n * * zmin the ground minimum Z coordinate, optional, default -1\r\n * * xmax the ground maximum X coordinate, optional, default 1\r\n * * zmax the ground maximum Z coordinate, optional, default 1\r\n * * subdivisions a javascript object {w: positive integer, h: positive integer}, `w` and `h` are the numbers of subdivisions on the ground width and height creating 'tiles', default {w: 6, h: 6}\r\n * * precision a javascript object {w: positive integer, h: positive integer}, `w` and `h` are the numbers of subdivisions on the tile width and height, default {w: 2, h: 2}\r\n * @param options.xmin\r\n * @param options.zmin\r\n * @param options.xmax\r\n * @param options.zmax\r\n * @param options.subdivisions\r\n * @param options.subdivisions.w\r\n * @param options.subdivisions.h\r\n * @param options.precision\r\n * @param options.precision.w\r\n * @param options.precision.h\r\n * @returns the VertexData of the TiledGround\r\n */\r\nexport function CreateTiledGroundVertexData(options: {\r\n    xmin: number;\r\n    zmin: number;\r\n    xmax: number;\r\n    zmax: number;\r\n    subdivisions?: { w: number; h: number };\r\n    precision?: { w: number; h: number };\r\n}): VertexData {\r\n    const xmin = options.xmin !== undefined && options.xmin !== null ? options.xmin : -1.0;\r\n    const zmin = options.zmin !== undefined && options.zmin !== null ? options.zmin : -1.0;\r\n    const xmax = options.xmax !== undefined && options.xmax !== null ? options.xmax : 1.0;\r\n    const zmax = options.zmax !== undefined && options.zmax !== null ? options.zmax : 1.0;\r\n    const subdivisions = options.subdivisions || { w: 1, h: 1 };\r\n    const precision = options.precision || { w: 1, h: 1 };\r\n\r\n    const indices = new Array<number>();\r\n    const positions = new Array<number>();\r\n    const normals = new Array<number>();\r\n    const uvs = new Array<number>();\r\n    let row: number, col: number, tileRow: number, tileCol: number;\r\n\r\n    subdivisions.h = subdivisions.h < 1 ? 1 : subdivisions.h;\r\n    subdivisions.w = subdivisions.w < 1 ? 1 : subdivisions.w;\r\n    precision.w = precision.w < 1 ? 1 : precision.w;\r\n    precision.h = precision.h < 1 ? 1 : precision.h;\r\n\r\n    const tileSize = {\r\n        w: (xmax - xmin) / subdivisions.w,\r\n        h: (zmax - zmin) / subdivisions.h,\r\n    };\r\n\r\n    function applyTile(xTileMin: number, zTileMin: number, xTileMax: number, zTileMax: number) {\r\n        // Indices\r\n        const base = positions.length / 3;\r\n        const rowLength = precision.w + 1;\r\n        for (row = 0; row < precision.h; row++) {\r\n            for (col = 0; col < precision.w; col++) {\r\n                const square = [base + col + row * rowLength, base + (col + 1) + row * rowLength, base + (col + 1) + (row + 1) * rowLength, base + col + (row + 1) * rowLength];\r\n\r\n                indices.push(square[1]);\r\n                indices.push(square[2]);\r\n                indices.push(square[3]);\r\n                indices.push(square[0]);\r\n                indices.push(square[1]);\r\n                indices.push(square[3]);\r\n            }\r\n        }\r\n\r\n        // Position, normals and uvs\r\n        const position = Vector3.Zero();\r\n        const normal = new Vector3(0, 1.0, 0);\r\n        for (row = 0; row <= precision.h; row++) {\r\n            position.z = (row * (zTileMax - zTileMin)) / precision.h + zTileMin;\r\n            for (col = 0; col <= precision.w; col++) {\r\n                position.x = (col * (xTileMax - xTileMin)) / precision.w + xTileMin;\r\n                position.y = 0;\r\n\r\n                positions.push(position.x, position.y, position.z);\r\n                normals.push(normal.x, normal.y, normal.z);\r\n                uvs.push(col / precision.w, row / precision.h);\r\n            }\r\n        }\r\n    }\r\n\r\n    for (tileRow = 0; tileRow < subdivisions.h; tileRow++) {\r\n        for (tileCol = 0; tileCol < subdivisions.w; tileCol++) {\r\n            applyTile(xmin + tileCol * tileSize.w, zmin + tileRow * tileSize.h, xmin + (tileCol + 1) * tileSize.w, zmin + (tileRow + 1) * tileSize.h);\r\n        }\r\n    }\r\n\r\n    // Result\r\n    const vertexData = new VertexData();\r\n\r\n    vertexData.indices = indices;\r\n    vertexData.positions = positions;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates the VertexData of the Ground designed from a heightmap\r\n * @param options an object used to set the following parameters for the Ground, required and provided by CreateGroundFromHeightMap\r\n * * width the width (x direction) of the ground\r\n * * height the height (z direction) of the ground\r\n * * subdivisions the number of subdivisions per side\r\n * * minHeight the minimum altitude on the ground, optional, default 0\r\n * * maxHeight the maximum altitude on the ground, optional default 1\r\n * * colorFilter the filter to apply to the image pixel colors to compute the height, optional Color3, default (0.3, 0.59, 0.11)\r\n * * buffer the array holding the image color data\r\n * * bufferWidth the width of image\r\n * * bufferHeight the height of image\r\n * * alphaFilter Remove any data where the alpha channel is below this value, defaults 0 (all data visible)\r\n * @param options.width\r\n * @param options.height\r\n * @param options.subdivisions\r\n * @param options.minHeight\r\n * @param options.maxHeight\r\n * @param options.colorFilter\r\n * @param options.buffer\r\n * @param options.bufferWidth\r\n * @param options.bufferHeight\r\n * @param options.alphaFilter\r\n * @returns the VertexData of the Ground designed from a heightmap\r\n */\r\nexport function CreateGroundFromHeightMapVertexData(options: {\r\n    width: number;\r\n    height: number;\r\n    subdivisions: number;\r\n    minHeight: number;\r\n    maxHeight: number;\r\n    colorFilter: Color3;\r\n    buffer: Uint8Array;\r\n    bufferWidth: number;\r\n    bufferHeight: number;\r\n    alphaFilter: number;\r\n}): VertexData {\r\n    const indices = [];\r\n    const positions = [];\r\n    const normals = [];\r\n    const uvs = [];\r\n    let row, col;\r\n    const filter = options.colorFilter || new Color3(0.3, 0.59, 0.11);\r\n    const alphaFilter = options.alphaFilter || 0.0;\r\n    let invert = false;\r\n\r\n    if (options.minHeight > options.maxHeight) {\r\n        invert = true;\r\n        const temp = options.maxHeight;\r\n        options.maxHeight = options.minHeight;\r\n        options.minHeight = temp;\r\n    }\r\n\r\n    // Vertices\r\n    for (row = 0; row <= options.subdivisions; row++) {\r\n        for (col = 0; col <= options.subdivisions; col++) {\r\n            const position = new Vector3(\r\n                (col * options.width) / options.subdivisions - options.width / 2.0,\r\n                0,\r\n                ((options.subdivisions - row) * options.height) / options.subdivisions - options.height / 2.0\r\n            );\r\n\r\n            // Compute height\r\n            const heightMapX = (((position.x + options.width / 2) / options.width) * (options.bufferWidth - 1)) | 0;\r\n            const heightMapY = ((1.0 - (position.z + options.height / 2) / options.height) * (options.bufferHeight - 1)) | 0;\r\n\r\n            const pos = (heightMapX + heightMapY * options.bufferWidth) * 4;\r\n            let r = options.buffer[pos] / 255.0;\r\n            let g = options.buffer[pos + 1] / 255.0;\r\n            let b = options.buffer[pos + 2] / 255.0;\r\n            const a = options.buffer[pos + 3] / 255.0;\r\n\r\n            if (invert) {\r\n                r = 1.0 - r;\r\n                g = 1.0 - g;\r\n                b = 1.0 - b;\r\n            }\r\n\r\n            const gradient = r * filter.r + g * filter.g + b * filter.b;\r\n\r\n            // If our alpha channel is not within our filter then we will assign a 'special' height\r\n            // Then when building the indices, we will ignore any vertex that is using the special height\r\n            if (a >= alphaFilter) {\r\n                position.y = options.minHeight + (options.maxHeight - options.minHeight) * gradient;\r\n            } else {\r\n                position.y = options.minHeight - Epsilon; // We can't have a height below minHeight, normally.\r\n            }\r\n\r\n            // Add  vertex\r\n            positions.push(position.x, position.y, position.z);\r\n            normals.push(0, 0, 0);\r\n            uvs.push(col / options.subdivisions, 1.0 - row / options.subdivisions);\r\n        }\r\n    }\r\n\r\n    // Indices\r\n    for (row = 0; row < options.subdivisions; row++) {\r\n        for (col = 0; col < options.subdivisions; col++) {\r\n            // Calculate Indices\r\n            const idx1 = col + 1 + (row + 1) * (options.subdivisions + 1);\r\n            const idx2 = col + 1 + row * (options.subdivisions + 1);\r\n            const idx3 = col + row * (options.subdivisions + 1);\r\n            const idx4 = col + (row + 1) * (options.subdivisions + 1);\r\n\r\n            // Check that all indices are visible (based on our special height)\r\n            // Only display the vertex if all Indices are visible\r\n            // Positions are stored x,y,z for each vertex, hence the * 3 and + 1 for height\r\n            const isVisibleIdx1 = positions[idx1 * 3 + 1] >= options.minHeight;\r\n            const isVisibleIdx2 = positions[idx2 * 3 + 1] >= options.minHeight;\r\n            const isVisibleIdx3 = positions[idx3 * 3 + 1] >= options.minHeight;\r\n            if (isVisibleIdx1 && isVisibleIdx2 && isVisibleIdx3) {\r\n                indices.push(idx1);\r\n                indices.push(idx2);\r\n                indices.push(idx3);\r\n            }\r\n\r\n            const isVisibleIdx4 = positions[idx4 * 3 + 1] >= options.minHeight;\r\n            if (isVisibleIdx4 && isVisibleIdx1 && isVisibleIdx3) {\r\n                indices.push(idx4);\r\n                indices.push(idx1);\r\n                indices.push(idx3);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Normals\r\n    VertexData.ComputeNormals(positions, indices, normals);\r\n\r\n    // Result\r\n    const vertexData = new VertexData();\r\n\r\n    vertexData.indices = indices;\r\n    vertexData.positions = positions;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates a ground mesh\r\n * * The parameters `width` and `height` (floats, default 1) set the width and height sizes of the ground\r\n * * The parameter `subdivisions` (positive integer) sets the number of subdivisions per side\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param options.width\r\n * @param options.height\r\n * @param options.subdivisions\r\n * @param options.subdivisionsX\r\n * @param options.subdivisionsY\r\n * @param options.updatable\r\n * @param scene defines the hosting scene\r\n * @returns the ground mesh\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#ground\r\n */\r\nexport function CreateGround(\r\n    name: string,\r\n    options: { width?: number; height?: number; subdivisions?: number; subdivisionsX?: number; subdivisionsY?: number; updatable?: boolean } = {},\r\n    scene?: Scene\r\n): GroundMesh {\r\n    const ground = new GroundMesh(name, scene);\r\n    ground._setReady(false);\r\n    ground._subdivisionsX = options.subdivisionsX || options.subdivisions || 1;\r\n    ground._subdivisionsY = options.subdivisionsY || options.subdivisions || 1;\r\n    ground._width = options.width || 1;\r\n    ground._height = options.height || 1;\r\n    ground._maxX = ground._width / 2;\r\n    ground._maxZ = ground._height / 2;\r\n    ground._minX = -ground._maxX;\r\n    ground._minZ = -ground._maxZ;\r\n\r\n    const vertexData = CreateGroundVertexData(options);\r\n\r\n    vertexData.applyToMesh(ground, options.updatable);\r\n\r\n    ground._setReady(true);\r\n\r\n    return ground;\r\n}\r\n\r\n/**\r\n * Creates a tiled ground mesh\r\n * * The parameters `xmin` and `xmax` (floats, default -1 and 1) set the ground minimum and maximum X coordinates\r\n * * The parameters `zmin` and `zmax` (floats, default -1 and 1) set the ground minimum and maximum Z coordinates\r\n * * The parameter `subdivisions` is a javascript object `{w: positive integer, h: positive integer}` (default `{w: 6, h: 6}`). `w` and `h` are the numbers of subdivisions on the ground width and height. Each subdivision is called a tile\r\n * * The parameter `precision` is a javascript object `{w: positive integer, h: positive integer}` (default `{w: 2, h: 2}`). `w` and `h` are the numbers of subdivisions on the ground width and height of each tile\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param options.xmin\r\n * @param options.zmin\r\n * @param options.xmax\r\n * @param options.zmax\r\n * @param options.subdivisions\r\n * @param options.subdivisions.w\r\n * @param options.subdivisions.h\r\n * @param options.precision\r\n * @param options.precision.w\r\n * @param options.precision.h\r\n * @param options.updatable\r\n * @param scene defines the hosting scene\r\n * @returns the tiled ground mesh\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#tiled-ground\r\n */\r\nexport function CreateTiledGround(\r\n    name: string,\r\n    options: { xmin: number; zmin: number; xmax: number; zmax: number; subdivisions?: { w: number; h: number }; precision?: { w: number; h: number }; updatable?: boolean },\r\n    scene: Nullable<Scene> = null\r\n): Mesh {\r\n    const tiledGround = new Mesh(name, scene);\r\n\r\n    const vertexData = CreateTiledGroundVertexData(options);\r\n\r\n    vertexData.applyToMesh(tiledGround, options.updatable);\r\n\r\n    return tiledGround;\r\n}\r\n\r\n/**\r\n * Creates a ground mesh from a height map\r\n * * The parameter `url` sets the URL of the height map image resource.\r\n * * The parameters `width` and `height` (positive floats, default 10) set the ground width and height sizes.\r\n * * The parameter `subdivisions` (positive integer, default 1) sets the number of subdivision per side.\r\n * * The parameter `minHeight` (float, default 0) is the minimum altitude on the ground.\r\n * * The parameter `maxHeight` (float, default 1) is the maximum altitude on the ground.\r\n * * The parameter `colorFilter` (optional Color3, default (0.3, 0.59, 0.11) ) is the filter to apply to the image pixel colors to compute the height.\r\n * * The parameter `onReady` is a javascript callback function that will be called  once the mesh is just built (the height map download can last some time).\r\n * * The parameter `alphaFilter` will filter any data where the alpha channel is below this value, defaults 0 (all data visible)\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.\r\n * @param name defines the name of the mesh\r\n * @param url defines the url to the height map\r\n * @param options defines the options used to create the mesh\r\n * @param options.width\r\n * @param options.height\r\n * @param options.subdivisions\r\n * @param options.minHeight\r\n * @param options.maxHeight\r\n * @param options.colorFilter\r\n * @param options.alphaFilter\r\n * @param options.updatable\r\n * @param options.onReady\r\n * @param scene defines the hosting scene\r\n * @returns the ground mesh\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set/height_map\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#ground-from-a-height-map\r\n */\r\nexport function CreateGroundFromHeightMap(\r\n    name: string,\r\n    url: string,\r\n    options: {\r\n        width?: number;\r\n        height?: number;\r\n        subdivisions?: number;\r\n        minHeight?: number;\r\n        maxHeight?: number;\r\n        colorFilter?: Color3;\r\n        alphaFilter?: number;\r\n        updatable?: boolean;\r\n        onReady?: (mesh: GroundMesh) => void;\r\n    } = {},\r\n    scene: Nullable<Scene> = null\r\n): GroundMesh {\r\n    const width = options.width || 10.0;\r\n    const height = options.height || 10.0;\r\n    const subdivisions = options.subdivisions || 1 | 0;\r\n    const minHeight = options.minHeight || 0.0;\r\n    const maxHeight = options.maxHeight || 1.0;\r\n    const filter = options.colorFilter || new Color3(0.3, 0.59, 0.11);\r\n    const alphaFilter = options.alphaFilter || 0.0;\r\n    const updatable = options.updatable;\r\n    const onReady = options.onReady;\r\n\r\n    scene = scene || EngineStore.LastCreatedScene!;\r\n\r\n    const ground = new GroundMesh(name, scene);\r\n    ground._subdivisionsX = subdivisions;\r\n    ground._subdivisionsY = subdivisions;\r\n    ground._width = width;\r\n    ground._height = height;\r\n    ground._maxX = ground._width / 2.0;\r\n    ground._maxZ = ground._height / 2.0;\r\n    ground._minX = -ground._maxX;\r\n    ground._minZ = -ground._maxZ;\r\n\r\n    ground._setReady(false);\r\n\r\n    const onload = (img: HTMLImageElement | ImageBitmap) => {\r\n        const bufferWidth = img.width;\r\n        const bufferHeight = img.height;\r\n\r\n        if (scene!.isDisposed) {\r\n            return;\r\n        }\r\n\r\n        const buffer = <Uint8Array>scene?.getEngine().resizeImageBitmap(img, bufferWidth, bufferHeight);\r\n\r\n        const vertexData = CreateGroundFromHeightMapVertexData({\r\n            width: width,\r\n            height: height,\r\n            subdivisions: subdivisions,\r\n            minHeight: minHeight,\r\n            maxHeight: maxHeight,\r\n            colorFilter: filter,\r\n            buffer: buffer,\r\n            bufferWidth: bufferWidth,\r\n            bufferHeight: bufferHeight,\r\n            alphaFilter: alphaFilter,\r\n        });\r\n\r\n        vertexData.applyToMesh(ground, updatable);\r\n\r\n        //execute ready callback, if set\r\n        if (onReady) {\r\n            onReady(ground);\r\n        }\r\n\r\n        ground._setReady(true);\r\n    };\r\n\r\n    Tools.LoadImage(url, onload, () => {}, scene.offlineProvider);\r\n\r\n    return ground;\r\n}\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated use the functions directly from the module\r\n */\r\nexport const GroundBuilder = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreateGround,\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreateGroundFromHeightMap,\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreateTiledGround,\r\n};\r\n\r\nVertexData.CreateGround = CreateGroundVertexData;\r\nVertexData.CreateTiledGround = CreateTiledGroundVertexData;\r\nVertexData.CreateGroundFromHeightMap = CreateGroundFromHeightMapVertexData;\r\n\r\nMesh.CreateGround = (name: string, width: number, height: number, subdivisions: number, scene?: Scene, updatable?: boolean): Mesh => {\r\n    const options = {\r\n        width,\r\n        height,\r\n        subdivisions,\r\n        updatable,\r\n    };\r\n\r\n    return CreateGround(name, options, scene);\r\n};\r\n\r\nMesh.CreateTiledGround = (\r\n    name: string,\r\n    xmin: number,\r\n    zmin: number,\r\n    xmax: number,\r\n    zmax: number,\r\n    subdivisions: { w: number; h: number },\r\n    precision: { w: number; h: number },\r\n    scene: Scene,\r\n    updatable?: boolean\r\n): Mesh => {\r\n    const options = {\r\n        xmin,\r\n        zmin,\r\n        xmax,\r\n        zmax,\r\n        subdivisions,\r\n        precision,\r\n        updatable,\r\n    };\r\n\r\n    return CreateTiledGround(name, options, scene);\r\n};\r\n\r\nMesh.CreateGroundFromHeightMap = (\r\n    name: string,\r\n    url: string,\r\n    width: number,\r\n    height: number,\r\n    subdivisions: number,\r\n    minHeight: number,\r\n    maxHeight: number,\r\n    scene: Scene,\r\n    updatable?: boolean,\r\n    onReady?: (mesh: GroundMesh) => void,\r\n    alphaFilter?: number\r\n): GroundMesh => {\r\n    const options = {\r\n        width,\r\n        height,\r\n        subdivisions,\r\n        minHeight,\r\n        maxHeight,\r\n        updatable,\r\n        onReady,\r\n        alphaFilter,\r\n    };\r\n\r\n    return CreateGroundFromHeightMap(name, url, options, scene);\r\n};\r\n","import type { Observer } from \"../Misc/observable\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport { Tools, AsyncLoop } from \"../Misc/tools\";\r\nimport type { IAnimatable } from \"../Animations/animatable.interface\";\r\nimport { DeepCopier } from \"../Misc/deepCopier\";\r\nimport { Tags } from \"../Misc/tags\";\r\nimport type { Coroutine } from \"../Misc/coroutine\";\r\nimport { runCoroutineSync, runCoroutineAsync, createYieldingScheduler } from \"../Misc/coroutine\";\r\nimport type { Nullable, FloatArray, IndicesArray } from \"../types\";\r\nimport { Camera } from \"../Cameras/camera\";\r\nimport type { Scene } from \"../scene\";\r\nimport { ScenePerformancePriority } from \"../scene\";\r\nimport type { Vector4 } from \"../Maths/math.vector\";\r\nimport { Quaternion, Matrix, Vector3, Vector2 } from \"../Maths/math.vector\";\r\nimport type { Color4 } from \"../Maths/math.color\";\r\nimport { Color3 } from \"../Maths/math.color\";\r\nimport type { Engine } from \"../Engines/engine\";\r\nimport { Node } from \"../node\";\r\nimport { VertexBuffer, Buffer } from \"../Buffers/buffer\";\r\nimport type { IGetSetVerticesData } from \"./mesh.vertexData\";\r\nimport { VertexData } from \"./mesh.vertexData\";\r\n\r\nimport { Geometry } from \"./geometry\";\r\nimport { AbstractMesh } from \"./abstractMesh\";\r\nimport { SubMesh } from \"./subMesh\";\r\nimport type { BoundingSphere } from \"../Culling/boundingSphere\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { Material } from \"../Materials/material\";\r\nimport { MultiMaterial } from \"../Materials/multiMaterial\";\r\nimport { SceneLoaderFlags } from \"../Loading/sceneLoaderFlags\";\r\nimport type { Skeleton } from \"../Bones/skeleton\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { SerializationHelper } from \"../Misc/decorators\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport { GetClass, RegisterClass } from \"../Misc/typeStore\";\r\nimport { _WarnImport } from \"../Misc/devTools\";\r\nimport { SceneComponentConstants } from \"../sceneComponent\";\r\nimport { MeshLODLevel } from \"./meshLODLevel\";\r\nimport type { Path3D } from \"../Maths/math.path\";\r\nimport type { Plane } from \"../Maths/math.plane\";\r\nimport type { TransformNode } from \"./transformNode\";\r\nimport type { DrawWrapper } from \"../Materials/drawWrapper\";\r\nimport type { PhysicsEngine as PhysicsEngineV1 } from \"../Physics/v1/physicsEngine\";\r\n\r\nimport type { GoldbergMesh } from \"./goldbergMesh\";\r\nimport type { InstancedMesh } from \"./instancedMesh\";\r\nimport type { IPhysicsEnabledObject, PhysicsImpostor } from \"../Physics/v1/physicsImpostor\";\r\nimport type { ICreateCapsuleOptions } from \"./Builders/capsuleBuilder\";\r\nimport type { LinesMesh } from \"./linesMesh\";\r\nimport type { GroundMesh } from \"./groundMesh\";\r\n\r\n/**\r\n * @internal\r\n **/\r\nexport class _CreationDataStorage {\r\n    public closePath?: boolean;\r\n    public closeArray?: boolean;\r\n    public idx: number[];\r\n    public dashSize: number;\r\n    public gapSize: number;\r\n    public path3D: Path3D;\r\n    public pathArray: Vector3[][];\r\n    public arc: number;\r\n    public radius: number;\r\n    public cap: number;\r\n    public tessellation: number;\r\n}\r\n\r\n/**\r\n * @internal\r\n **/\r\nclass _InstanceDataStorage {\r\n    public visibleInstances: any = {};\r\n    public batchCache = new _InstancesBatch();\r\n    public batchCacheReplacementModeInFrozenMode = new _InstancesBatch();\r\n    public instancesBufferSize = 32 * 16 * 4; // let's start with a maximum of 32 instances\r\n    public instancesBuffer: Nullable<Buffer>;\r\n    public instancesPreviousBuffer: Nullable<Buffer>;\r\n    public instancesData: Float32Array;\r\n    public instancesPreviousData: Float32Array;\r\n    public overridenInstanceCount: number;\r\n    public isFrozen: boolean;\r\n    public forceMatrixUpdates: boolean;\r\n    public previousBatch: Nullable<_InstancesBatch>;\r\n    public hardwareInstancedRendering: boolean;\r\n    public sideOrientation: number;\r\n    public manualUpdate: boolean;\r\n    public previousManualUpdate: boolean;\r\n    public previousRenderId: number;\r\n    public masterMeshPreviousWorldMatrix: Nullable<Matrix>;\r\n}\r\n\r\n/**\r\n * @internal\r\n **/\r\nexport class _InstancesBatch {\r\n    public mustReturn = false;\r\n    public visibleInstances = new Array<Nullable<Array<InstancedMesh>>>();\r\n    public renderSelf = new Array<boolean>();\r\n    public hardwareInstancedRendering = new Array<boolean>();\r\n}\r\n\r\n/**\r\n * @internal\r\n **/\r\nclass _ThinInstanceDataStorage {\r\n    public instancesCount: number = 0;\r\n    public matrixBuffer: Nullable<Buffer> = null;\r\n    public previousMatrixBuffer: Nullable<Buffer> = null;\r\n    public matrixBufferSize = 32 * 16; // let's start with a maximum of 32 thin instances\r\n    public matrixData: Nullable<Float32Array> = null;\r\n    public previousMatrixData: Nullable<Float32Array>;\r\n    public boundingVectors: Array<Vector3> = [];\r\n    public worldMatrices: Nullable<Matrix[]> = null;\r\n    public masterMeshPreviousWorldMatrix: Nullable<Matrix>;\r\n}\r\n\r\n/**\r\n * @internal\r\n **/\r\nclass _InternalMeshDataInfo {\r\n    // Events\r\n    public _onBeforeRenderObservable: Nullable<Observable<Mesh>>;\r\n    public _onBeforeBindObservable: Nullable<Observable<Mesh>>;\r\n    public _onAfterRenderObservable: Nullable<Observable<Mesh>>;\r\n    public _onBeforeDrawObservable: Nullable<Observable<Mesh>>;\r\n    public _onBetweenPassObservable: Nullable<Observable<SubMesh>>;\r\n\r\n    public _areNormalsFrozen: boolean = false; // Will be used by ribbons mainly\r\n    public _sourcePositions: Nullable<Float32Array>; // Will be used to save original positions when using software skinning\r\n    public _sourceNormals: Nullable<Float32Array>; // Will be used to save original normals when using software skinning\r\n\r\n    // Will be used to save a source mesh reference, If any\r\n    public _source: Nullable<Mesh> = null;\r\n    // Will be used to for fast cloned mesh lookup\r\n    public meshMap: Nullable<{ [id: string]: Mesh | undefined }> = null;\r\n\r\n    public _preActivateId: number = -1;\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public _LODLevels = new Array<MeshLODLevel>();\r\n    /** Alternative definition of LOD level, using screen coverage instead of distance */\r\n    public _useLODScreenCoverage: boolean = false;\r\n    public _checkReadinessObserver: Nullable<Observer<Scene>>;\r\n\r\n    public _onMeshReadyObserverAdded: (observer: Observer<Mesh>) => void;\r\n\r\n    public _effectiveMaterial: Nullable<Material> = null;\r\n\r\n    public _forcedInstanceCount: number = 0;\r\n\r\n    public _overrideRenderingFillMode: Nullable<number> = null;\r\n}\r\n\r\n/**\r\n * Class used to represent renderable models\r\n */\r\nexport class Mesh extends AbstractMesh implements IGetSetVerticesData {\r\n    // Consts\r\n\r\n    /**\r\n     * Mesh side orientation : usually the external or front surface\r\n     */\r\n    public static readonly FRONTSIDE = VertexData.FRONTSIDE;\r\n\r\n    /**\r\n     * Mesh side orientation : usually the internal or back surface\r\n     */\r\n    public static readonly BACKSIDE = VertexData.BACKSIDE;\r\n    /**\r\n     * Mesh side orientation : both internal and external or front and back surfaces\r\n     */\r\n    public static readonly DOUBLESIDE = VertexData.DOUBLESIDE;\r\n    /**\r\n     * Mesh side orientation : by default, `FRONTSIDE`\r\n     */\r\n    public static readonly DEFAULTSIDE = VertexData.DEFAULTSIDE;\r\n    /**\r\n     * Mesh cap setting : no cap\r\n     */\r\n    public static readonly NO_CAP = 0;\r\n    /**\r\n     * Mesh cap setting : one cap at the beginning of the mesh\r\n     */\r\n    public static readonly CAP_START = 1;\r\n    /**\r\n     * Mesh cap setting : one cap at the end of the mesh\r\n     */\r\n    public static readonly CAP_END = 2;\r\n    /**\r\n     * Mesh cap setting : two caps, one at the beginning  and one at the end of the mesh\r\n     */\r\n    public static readonly CAP_ALL = 3;\r\n    /**\r\n     * Mesh pattern setting : no flip or rotate\r\n     */\r\n    public static readonly NO_FLIP = 0;\r\n    /**\r\n     * Mesh pattern setting : flip (reflect in y axis) alternate tiles on each row or column\r\n     */\r\n    public static readonly FLIP_TILE = 1;\r\n    /**\r\n     * Mesh pattern setting : rotate (180degs) alternate tiles on each row or column\r\n     */\r\n    public static readonly ROTATE_TILE = 2;\r\n    /**\r\n     * Mesh pattern setting : flip (reflect in y axis) all tiles on alternate rows\r\n     */\r\n    public static readonly FLIP_ROW = 3;\r\n    /**\r\n     * Mesh pattern setting : rotate (180degs) all tiles on alternate rows\r\n     */\r\n    public static readonly ROTATE_ROW = 4;\r\n    /**\r\n     * Mesh pattern setting : flip and rotate alternate tiles on each row or column\r\n     */\r\n    public static readonly FLIP_N_ROTATE_TILE = 5;\r\n    /**\r\n     * Mesh pattern setting : rotate pattern and rotate\r\n     */\r\n    public static readonly FLIP_N_ROTATE_ROW = 6;\r\n    /**\r\n     * Mesh tile positioning : part tiles same on left/right or top/bottom\r\n     */\r\n    public static readonly CENTER = 0;\r\n    /**\r\n     * Mesh tile positioning : part tiles on left\r\n     */\r\n    public static readonly LEFT = 1;\r\n    /**\r\n     * Mesh tile positioning : part tiles on right\r\n     */\r\n    public static readonly RIGHT = 2;\r\n    /**\r\n     * Mesh tile positioning : part tiles on top\r\n     */\r\n    public static readonly TOP = 3;\r\n    /**\r\n     * Mesh tile positioning : part tiles on bottom\r\n     */\r\n    public static readonly BOTTOM = 4;\r\n\r\n    /**\r\n     * Indicates that the instanced meshes should be sorted from back to front before rendering if their material is transparent\r\n     */\r\n    public static INSTANCEDMESH_SORT_TRANSPARENT = false;\r\n\r\n    /**\r\n     * Gets the default side orientation.\r\n     * @param orientation the orientation to value to attempt to get\r\n     * @returns the default orientation\r\n     * @internal\r\n     */\r\n    public static _GetDefaultSideOrientation(orientation?: number): number {\r\n        return orientation || Mesh.FRONTSIDE; // works as Mesh.FRONTSIDE is 0\r\n    }\r\n\r\n    // Internal data\r\n    private _internalMeshDataInfo = new _InternalMeshDataInfo();\r\n\r\n    /**\r\n     * Determines if the LOD levels are intended to be calculated using screen coverage (surface area ratio) instead of distance.\r\n     */\r\n    public get useLODScreenCoverage() {\r\n        return this._internalMeshDataInfo._useLODScreenCoverage;\r\n    }\r\n\r\n    public set useLODScreenCoverage(value: boolean) {\r\n        this._internalMeshDataInfo._useLODScreenCoverage = value;\r\n        this._sortLODLevels();\r\n    }\r\n\r\n    /**\r\n     * Will notify when the mesh is completely ready, including materials.\r\n     * Observers added to this observable will be removed once triggered\r\n     */\r\n    public onMeshReadyObservable: Observable<Mesh>;\r\n\r\n    public get computeBonesUsingShaders(): boolean {\r\n        return this._internalAbstractMeshDataInfo._computeBonesUsingShaders;\r\n    }\r\n    public set computeBonesUsingShaders(value: boolean) {\r\n        if (this._internalAbstractMeshDataInfo._computeBonesUsingShaders === value) {\r\n            return;\r\n        }\r\n\r\n        if (value && this._internalMeshDataInfo._sourcePositions) {\r\n            // switch from software to GPU computation: we need to reset the vertex and normal buffers that have been updated by the software process\r\n            this.setVerticesData(VertexBuffer.PositionKind, this._internalMeshDataInfo._sourcePositions, true);\r\n            if (this._internalMeshDataInfo._sourceNormals) {\r\n                this.setVerticesData(VertexBuffer.NormalKind, this._internalMeshDataInfo._sourceNormals, true);\r\n            }\r\n\r\n            this._internalMeshDataInfo._sourcePositions = null;\r\n            this._internalMeshDataInfo._sourceNormals = null;\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._computeBonesUsingShaders = value;\r\n        this._markSubMeshesAsAttributesDirty();\r\n    }\r\n\r\n    /**\r\n     * An event triggered before rendering the mesh\r\n     */\r\n    public get onBeforeRenderObservable(): Observable<Mesh> {\r\n        if (!this._internalMeshDataInfo._onBeforeRenderObservable) {\r\n            this._internalMeshDataInfo._onBeforeRenderObservable = new Observable<Mesh>();\r\n        }\r\n\r\n        return this._internalMeshDataInfo._onBeforeRenderObservable;\r\n    }\r\n\r\n    /**\r\n     * An event triggered before binding the mesh\r\n     */\r\n    public get onBeforeBindObservable(): Observable<Mesh> {\r\n        if (!this._internalMeshDataInfo._onBeforeBindObservable) {\r\n            this._internalMeshDataInfo._onBeforeBindObservable = new Observable<Mesh>();\r\n        }\r\n\r\n        return this._internalMeshDataInfo._onBeforeBindObservable;\r\n    }\r\n\r\n    /**\r\n     * An event triggered after rendering the mesh\r\n     */\r\n    public get onAfterRenderObservable(): Observable<Mesh> {\r\n        if (!this._internalMeshDataInfo._onAfterRenderObservable) {\r\n            this._internalMeshDataInfo._onAfterRenderObservable = new Observable<Mesh>();\r\n        }\r\n\r\n        return this._internalMeshDataInfo._onAfterRenderObservable;\r\n    }\r\n\r\n    /**\r\n     * An event triggeredbetween rendering pass when using separateCullingPass = true\r\n     */\r\n    public get onBetweenPassObservable(): Observable<SubMesh> {\r\n        if (!this._internalMeshDataInfo._onBetweenPassObservable) {\r\n            this._internalMeshDataInfo._onBetweenPassObservable = new Observable<SubMesh>();\r\n        }\r\n\r\n        return this._internalMeshDataInfo._onBetweenPassObservable;\r\n    }\r\n\r\n    /**\r\n     * An event triggered before drawing the mesh\r\n     */\r\n    public get onBeforeDrawObservable(): Observable<Mesh> {\r\n        if (!this._internalMeshDataInfo._onBeforeDrawObservable) {\r\n            this._internalMeshDataInfo._onBeforeDrawObservable = new Observable<Mesh>();\r\n        }\r\n\r\n        return this._internalMeshDataInfo._onBeforeDrawObservable;\r\n    }\r\n\r\n    private _onBeforeDrawObserver: Nullable<Observer<Mesh>>;\r\n\r\n    /**\r\n     * Sets a callback to call before drawing the mesh. It is recommended to use onBeforeDrawObservable instead\r\n     */\r\n    public set onBeforeDraw(callback: () => void) {\r\n        if (this._onBeforeDrawObserver) {\r\n            this.onBeforeDrawObservable.remove(this._onBeforeDrawObserver);\r\n        }\r\n        this._onBeforeDrawObserver = this.onBeforeDrawObservable.add(callback);\r\n    }\r\n\r\n    public get hasInstances(): boolean {\r\n        return this.instances.length > 0;\r\n    }\r\n\r\n    public get hasThinInstances(): boolean {\r\n        return (this._thinInstanceDataStorage.instancesCount ?? 0) > 0;\r\n    }\r\n\r\n    // Members\r\n\r\n    /**\r\n     * Gets the delay loading state of the mesh (when delay loading is turned on)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/importers/incrementalLoading\r\n     */\r\n    public delayLoadState = Constants.DELAYLOADSTATE_NONE;\r\n\r\n    /**\r\n     * Gets the list of instances created from this mesh\r\n     * it is not supposed to be modified manually.\r\n     * Note also that the order of the InstancedMesh wihin the array is not significant and might change.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/copies/instances\r\n     */\r\n    public instances = new Array<InstancedMesh>();\r\n\r\n    /**\r\n     * Gets the file containing delay loading data for this mesh\r\n     */\r\n    public delayLoadingFile: string;\r\n\r\n    /** @internal */\r\n    public _binaryInfo: any;\r\n\r\n    /**\r\n     * User defined function used to change how LOD level selection is done\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/LOD\r\n     */\r\n    public onLODLevelSelection: (distance: number, mesh: Mesh, selectedLevel: Nullable<Mesh>) => void;\r\n\r\n    // Private\r\n    /** @internal */\r\n    public _creationDataStorage: Nullable<_CreationDataStorage> = null;\r\n\r\n    /** @internal */\r\n    public _geometry: Nullable<Geometry> = null;\r\n    /** @internal */\r\n    public _delayInfo: Array<string>;\r\n    /** @internal */\r\n    public _delayLoadingFunction: (any: any, mesh: Mesh) => void;\r\n\r\n    /**\r\n     * Gets or sets the forced number of instances to display.\r\n     * If 0 (default value), the number of instances is not forced and depends on the draw type\r\n     * (regular / instance / thin instances mesh)\r\n     */\r\n    public get forcedInstanceCount(): number {\r\n        return this._internalMeshDataInfo._forcedInstanceCount;\r\n    }\r\n\r\n    public set forcedInstanceCount(count: number) {\r\n        this._internalMeshDataInfo._forcedInstanceCount = count;\r\n    }\r\n\r\n    /** @internal */\r\n    public _instanceDataStorage = new _InstanceDataStorage();\r\n\r\n    /** @internal */\r\n    public _thinInstanceDataStorage = new _ThinInstanceDataStorage();\r\n\r\n    /** @internal */\r\n    public _shouldGenerateFlatShading: boolean = false;\r\n\r\n    // Use by builder only to know what orientation were the mesh build in.\r\n    /** @internal */\r\n    public _originalBuilderSideOrientation: number = Mesh.DEFAULTSIDE;\r\n\r\n    /**\r\n     * Use this property to change the original side orientation defined at construction time\r\n     */\r\n    public overrideMaterialSideOrientation: Nullable<number> = null;\r\n\r\n    /**\r\n     * Use this property to override the Material's fillMode value\r\n     */\r\n    public get overrideRenderingFillMode(): Nullable<number> {\r\n        return this._internalMeshDataInfo._overrideRenderingFillMode;\r\n    }\r\n\r\n    public set overrideRenderingFillMode(fillMode: Nullable<number>) {\r\n        this._internalMeshDataInfo._overrideRenderingFillMode = fillMode;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating whether to render ignoring the active camera's max z setting. (false by default)\r\n     * You should not mix meshes that have this property set to true with meshes that have it set to false if they all write\r\n     * to the depth buffer, because the z-values are not comparable in the two cases and you will get rendering artifacts if you do.\r\n     * You can set the property to true for meshes that do not write to the depth buffer, or set the same value (either false or true) otherwise.\r\n     * Note this will reduce performance when set to true.\r\n     */\r\n    public ignoreCameraMaxZ = false;\r\n\r\n    /**\r\n     * Gets the source mesh (the one used to clone this one from)\r\n     */\r\n    public get source(): Nullable<Mesh> {\r\n        return this._internalMeshDataInfo._source;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of clones of this mesh\r\n     * The scene must have been constructed with useClonedMeshMap=true for this to work!\r\n     * Note that useClonedMeshMap=true is the default setting\r\n     */\r\n    public get cloneMeshMap(): Nullable<{ [id: string]: Mesh | undefined }> {\r\n        return this._internalMeshDataInfo.meshMap;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that this mesh does not use index buffer\r\n     */\r\n    public get isUnIndexed(): boolean {\r\n        return this._unIndexed;\r\n    }\r\n\r\n    public set isUnIndexed(value: boolean) {\r\n        if (this._unIndexed !== value) {\r\n            this._unIndexed = value;\r\n            this._markSubMeshesAsAttributesDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets the array buffer used to store the instanced buffer used for instances' world matrices */\r\n    public get worldMatrixInstancedBuffer() {\r\n        return this._instanceDataStorage.instancesData;\r\n    }\r\n\r\n    /** Gets the array buffer used to store the instanced buffer used for instances' previous world matrices */\r\n    public get previousWorldMatrixInstancedBuffer() {\r\n        return this._instanceDataStorage.instancesPreviousData;\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating that the update of the instance buffer of the world matrices is manual */\r\n    public get manualUpdateOfWorldMatrixInstancedBuffer() {\r\n        return this._instanceDataStorage.manualUpdate;\r\n    }\r\n\r\n    public set manualUpdateOfWorldMatrixInstancedBuffer(value: boolean) {\r\n        this._instanceDataStorage.manualUpdate = value;\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating that the update of the instance buffer of the world matrices is manual */\r\n    public get manualUpdateOfPreviousWorldMatrixInstancedBuffer() {\r\n        return this._instanceDataStorage.previousManualUpdate;\r\n    }\r\n\r\n    public set manualUpdateOfPreviousWorldMatrixInstancedBuffer(value: boolean) {\r\n        this._instanceDataStorage.previousManualUpdate = value;\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating that the update of the instance buffer of the world matrices must be performed in all cases (and notably even in frozen mode) */\r\n    public get forceWorldMatrixInstancedBufferUpdate() {\r\n        return this._instanceDataStorage.forceMatrixUpdates;\r\n    }\r\n\r\n    public set forceWorldMatrixInstancedBufferUpdate(value: boolean) {\r\n        this._instanceDataStorage.forceMatrixUpdates = value;\r\n    }\r\n\r\n    /**\r\n     * @constructor\r\n     * @param name The value used by scene.getMeshByName() to do a lookup.\r\n     * @param scene The scene to add this mesh to.\r\n     * @param parent The parent of this mesh, if it has one\r\n     * @param source An optional Mesh from which geometry is shared, cloned.\r\n     * @param doNotCloneChildren When cloning, skip cloning child meshes of source, default False.\r\n     *                  When false, achieved by calling a clone(), also passing False.\r\n     *                  This will make creation of children, recursive.\r\n     * @param clonePhysicsImpostor When cloning, include cloning mesh physics impostor, default True.\r\n     */\r\n    constructor(\r\n        name: string,\r\n        scene: Nullable<Scene> = null,\r\n        parent: Nullable<Node> = null,\r\n        source: Nullable<Mesh> = null,\r\n        doNotCloneChildren?: boolean,\r\n        clonePhysicsImpostor: boolean = true\r\n    ) {\r\n        super(name, scene);\r\n\r\n        scene = this.getScene();\r\n\r\n        this._onBeforeDraw = (isInstance: boolean, world: Matrix, effectiveMaterial?: Material) => {\r\n            if (isInstance && effectiveMaterial) {\r\n                if (this._uniformBuffer) {\r\n                    this.transferToEffect(world);\r\n                } else {\r\n                    effectiveMaterial.bindOnlyWorldMatrix(world);\r\n                }\r\n            }\r\n        };\r\n\r\n        if (source) {\r\n            // Geometry\r\n            if (source._geometry) {\r\n                source._geometry.applyToMesh(this);\r\n            }\r\n\r\n            // Deep copy\r\n            DeepCopier.DeepCopy(\r\n                source,\r\n                this,\r\n                [\r\n                    \"name\",\r\n                    \"material\",\r\n                    \"skeleton\",\r\n                    \"instances\",\r\n                    \"parent\",\r\n                    \"uniqueId\",\r\n                    \"source\",\r\n                    \"metadata\",\r\n                    \"morphTargetManager\",\r\n                    \"hasInstances\",\r\n                    \"worldMatrixInstancedBuffer\",\r\n                    \"previousWorldMatrixInstancedBuffer\",\r\n                    \"hasLODLevels\",\r\n                    \"geometry\",\r\n                    \"isBlocked\",\r\n                    \"areNormalsFrozen\",\r\n                    \"facetNb\",\r\n                    \"isFacetDataEnabled\",\r\n                    \"lightSources\",\r\n                    \"useBones\",\r\n                    \"isAnInstance\",\r\n                    \"collider\",\r\n                    \"edgesRenderer\",\r\n                    \"forward\",\r\n                    \"up\",\r\n                    \"right\",\r\n                    \"absolutePosition\",\r\n                    \"absoluteScaling\",\r\n                    \"absoluteRotationQuaternion\",\r\n                    \"isWorldMatrixFrozen\",\r\n                    \"nonUniformScaling\",\r\n                    \"behaviors\",\r\n                    \"worldMatrixFromCache\",\r\n                    \"hasThinInstances\",\r\n                    \"cloneMeshMap\",\r\n                    \"hasBoundingInfo\",\r\n                    \"physicsBody\",\r\n                    \"physicsImpostor\",\r\n                ],\r\n                [\"_poseMatrix\"]\r\n            );\r\n\r\n            // Source mesh\r\n            this._internalMeshDataInfo._source = source;\r\n            if (scene.useClonedMeshMap) {\r\n                if (!source._internalMeshDataInfo.meshMap) {\r\n                    source._internalMeshDataInfo.meshMap = {};\r\n                }\r\n                source._internalMeshDataInfo.meshMap[this.uniqueId] = this;\r\n            }\r\n\r\n            // Construction Params\r\n            // Clone parameters allowing mesh to be updated in case of parametric shapes.\r\n            this._originalBuilderSideOrientation = source._originalBuilderSideOrientation;\r\n            this._creationDataStorage = source._creationDataStorage;\r\n\r\n            // Animation ranges\r\n            if (source._ranges) {\r\n                const ranges = source._ranges;\r\n                for (const name in ranges) {\r\n                    if (!Object.prototype.hasOwnProperty.call(ranges, name)) {\r\n                        continue;\r\n                    }\r\n\r\n                    if (!ranges[name]) {\r\n                        continue;\r\n                    }\r\n\r\n                    this.createAnimationRange(name, ranges[name]!.from, ranges[name]!.to);\r\n                }\r\n            }\r\n\r\n            // Metadata\r\n            if (source.metadata && source.metadata.clone) {\r\n                this.metadata = source.metadata.clone();\r\n            } else {\r\n                this.metadata = source.metadata;\r\n            }\r\n            this._internalMetadata = source._internalMetadata;\r\n\r\n            // Tags\r\n            if (Tags && Tags.HasTags(source)) {\r\n                Tags.AddTagsTo(this, Tags.GetTags(source, true));\r\n            }\r\n\r\n            // Enabled. We shouldn't need to check the source's ancestors, as this mesh\r\n            // will have the same ones.\r\n            this.setEnabled(source.isEnabled(false));\r\n\r\n            // Parent\r\n            this.parent = source.parent;\r\n\r\n            // Pivot\r\n            this.setPivotMatrix(source.getPivotMatrix());\r\n\r\n            this.id = name + \".\" + source.id;\r\n\r\n            // Material\r\n            this.material = source.material;\r\n\r\n            if (!doNotCloneChildren) {\r\n                // Children\r\n                const directDescendants = source.getDescendants(true);\r\n                for (let index = 0; index < directDescendants.length; index++) {\r\n                    const child = directDescendants[index];\r\n\r\n                    if ((<any>child).clone) {\r\n                        (<any>child).clone(name + \".\" + child.name, this);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Morphs\r\n            if (source.morphTargetManager) {\r\n                this.morphTargetManager = source.morphTargetManager;\r\n            }\r\n\r\n            // Physics clone\r\n            if (scene.getPhysicsEngine) {\r\n                const physicsEngine = scene.getPhysicsEngine();\r\n                if (clonePhysicsImpostor && physicsEngine) {\r\n                    if (physicsEngine.getPluginVersion() === 1) {\r\n                        const impostor = (physicsEngine as PhysicsEngineV1).getImpostorForPhysicsObject(source);\r\n                        if (impostor) {\r\n                            this.physicsImpostor = impostor.clone(this);\r\n                        }\r\n                    } else if (physicsEngine.getPluginVersion() === 2) {\r\n                        if (source.physicsBody) {\r\n                            source.physicsBody.clone(this);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Particles\r\n            for (let index = 0; index < scene.particleSystems.length; index++) {\r\n                const system = scene.particleSystems[index];\r\n\r\n                if (system.emitter === source) {\r\n                    system.clone(system.name, this);\r\n                }\r\n            }\r\n\r\n            // Skeleton\r\n            this.skeleton = source.skeleton;\r\n\r\n            this.refreshBoundingInfo(true, true);\r\n            this.computeWorldMatrix(true);\r\n        }\r\n\r\n        // Parent\r\n        if (parent !== null) {\r\n            this.parent = parent;\r\n        }\r\n\r\n        this._instanceDataStorage.hardwareInstancedRendering = this.getEngine().getCaps().instancedArrays;\r\n\r\n        this._internalMeshDataInfo._onMeshReadyObserverAdded = (observer: Observer<Mesh>) => {\r\n            // only notify once! then unregister the observer\r\n            observer.unregisterOnNextCall = true;\r\n            if (this.isReady(true)) {\r\n                this.onMeshReadyObservable.notifyObservers(this);\r\n            } else {\r\n                if (!this._internalMeshDataInfo._checkReadinessObserver) {\r\n                    this._internalMeshDataInfo._checkReadinessObserver = this._scene.onBeforeRenderObservable.add(() => {\r\n                        // check for complete readiness\r\n                        if (this.isReady(true)) {\r\n                            this._scene.onBeforeRenderObservable.remove(this._internalMeshDataInfo._checkReadinessObserver);\r\n                            this._internalMeshDataInfo._checkReadinessObserver = null;\r\n                            this.onMeshReadyObservable.notifyObservers(this);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        };\r\n\r\n        this.onMeshReadyObservable = new Observable(this._internalMeshDataInfo._onMeshReadyObserverAdded);\r\n\r\n        if (source) {\r\n            source.onClonedObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    public instantiateHierarchy(\r\n        newParent: Nullable<TransformNode> = null,\r\n        options?: { doNotInstantiate: boolean | ((node: TransformNode) => boolean) },\r\n        onNewNodeCreated?: (source: TransformNode, clone: TransformNode) => void\r\n    ): Nullable<TransformNode> {\r\n        const instance =\r\n            this.getTotalVertices() === 0 || (options && options.doNotInstantiate && (options.doNotInstantiate === true || options.doNotInstantiate(this)))\r\n                ? this.clone(\"Clone of \" + (this.name || this.id), newParent || this.parent, true)\r\n                : this.createInstance(\"instance of \" + (this.name || this.id));\r\n\r\n        instance.parent = newParent || this.parent;\r\n        instance.position = this.position.clone();\r\n        instance.scaling = this.scaling.clone();\r\n        if (this.rotationQuaternion) {\r\n            instance.rotationQuaternion = this.rotationQuaternion.clone();\r\n        } else {\r\n            instance.rotation = this.rotation.clone();\r\n        }\r\n\r\n        if (onNewNodeCreated) {\r\n            onNewNodeCreated(this, instance);\r\n        }\r\n\r\n        for (const child of this.getChildTransformNodes(true)) {\r\n            // instancedMesh should have a different sourced mesh\r\n            if (child.getClassName() === \"InstancedMesh\" && instance.getClassName() === \"Mesh\" && (child as InstancedMesh).sourceMesh === this) {\r\n                (child as InstancedMesh).instantiateHierarchy(\r\n                    instance,\r\n                    {\r\n                        doNotInstantiate: (options && options.doNotInstantiate) || false,\r\n                        newSourcedMesh: instance as Mesh,\r\n                    },\r\n                    onNewNodeCreated\r\n                );\r\n            } else {\r\n                child.instantiateHierarchy(instance, options, onNewNodeCreated);\r\n            }\r\n        }\r\n\r\n        return instance;\r\n    }\r\n\r\n    /**\r\n     * Gets the class name\r\n     * @returns the string \"Mesh\".\r\n     */\r\n    public getClassName(): string {\r\n        return \"Mesh\";\r\n    }\r\n\r\n    /** @internal */\r\n    public get _isMesh() {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Returns a description of this mesh\r\n     * @param fullDetails define if full details about this mesh must be used\r\n     * @returns a descriptive string representing this mesh\r\n     */\r\n    public toString(fullDetails?: boolean): string {\r\n        let ret = super.toString(fullDetails);\r\n        ret += \", n vertices: \" + this.getTotalVertices();\r\n        ret += \", parent: \" + (this._waitingParentId ? this._waitingParentId : this.parent ? this.parent.name : \"NONE\");\r\n\r\n        if (this.animations) {\r\n            for (let i = 0; i < this.animations.length; i++) {\r\n                ret += \", animation[0]: \" + this.animations[i].toString(fullDetails);\r\n            }\r\n        }\r\n\r\n        if (fullDetails) {\r\n            if (this._geometry) {\r\n                const ib = this.getIndices();\r\n                const vb = this.getVerticesData(VertexBuffer.PositionKind);\r\n\r\n                if (vb && ib) {\r\n                    ret += \", flat shading: \" + (vb.length / 3 === ib.length ? \"YES\" : \"NO\");\r\n                }\r\n            } else {\r\n                ret += \", flat shading: UNKNOWN\";\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /** @internal */\r\n    public _unBindEffect() {\r\n        super._unBindEffect();\r\n\r\n        for (const instance of this.instances) {\r\n            instance._unBindEffect();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this mesh has LOD\r\n     */\r\n    public get hasLODLevels(): boolean {\r\n        return this._internalMeshDataInfo._LODLevels.length > 0;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of MeshLODLevel associated with the current mesh\r\n     * @returns an array of MeshLODLevel\r\n     */\r\n    public getLODLevels(): MeshLODLevel[] {\r\n        return this._internalMeshDataInfo._LODLevels;\r\n    }\r\n\r\n    private _sortLODLevels(): void {\r\n        const sortingOrderFactor = this._internalMeshDataInfo._useLODScreenCoverage ? -1 : 1;\r\n        this._internalMeshDataInfo._LODLevels.sort((a, b) => {\r\n            if (a.distanceOrScreenCoverage < b.distanceOrScreenCoverage) {\r\n                return sortingOrderFactor;\r\n            }\r\n            if (a.distanceOrScreenCoverage > b.distanceOrScreenCoverage) {\r\n                return -sortingOrderFactor;\r\n            }\r\n\r\n            return 0;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Add a mesh as LOD level triggered at the given distance.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/LOD\r\n     * @param distanceOrScreenCoverage Either distance from the center of the object to show this level or the screen coverage if `useScreenCoverage` is set to `true`.\r\n     * If screen coverage, value is a fraction of the screen's total surface, between 0 and 1.\r\n     * Example Playground for distance https://playground.babylonjs.com/#QE7KM#197\r\n     * Example Playground for screen coverage https://playground.babylonjs.com/#QE7KM#196\r\n     * @param mesh The mesh to be added as LOD level (can be null)\r\n     * @returns This mesh (for chaining)\r\n     */\r\n    public addLODLevel(distanceOrScreenCoverage: number, mesh: Nullable<Mesh>): Mesh {\r\n        if (mesh && mesh._masterMesh) {\r\n            Logger.Warn(\"You cannot use a mesh as LOD level twice\");\r\n            return this;\r\n        }\r\n\r\n        const level = new MeshLODLevel(distanceOrScreenCoverage, mesh);\r\n        this._internalMeshDataInfo._LODLevels.push(level);\r\n\r\n        if (mesh) {\r\n            mesh._masterMesh = this;\r\n        }\r\n\r\n        this._sortLODLevels();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the LOD level mesh at the passed distance or null if not found.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/LOD\r\n     * @param distance The distance from the center of the object to show this level\r\n     * @returns a Mesh or `null`\r\n     */\r\n    public getLODLevelAtDistance(distance: number): Nullable<Mesh> {\r\n        const internalDataInfo = this._internalMeshDataInfo;\r\n        for (let index = 0; index < internalDataInfo._LODLevels.length; index++) {\r\n            const level = internalDataInfo._LODLevels[index];\r\n\r\n            if (level.distanceOrScreenCoverage === distance) {\r\n                return level.mesh;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Remove a mesh from the LOD array\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/LOD\r\n     * @param mesh defines the mesh to be removed\r\n     * @returns This mesh (for chaining)\r\n     */\r\n    public removeLODLevel(mesh: Nullable<Mesh>): Mesh {\r\n        const internalDataInfo = this._internalMeshDataInfo;\r\n        for (let index = 0; index < internalDataInfo._LODLevels.length; index++) {\r\n            if (internalDataInfo._LODLevels[index].mesh === mesh) {\r\n                internalDataInfo._LODLevels.splice(index, 1);\r\n                if (mesh) {\r\n                    mesh._masterMesh = null;\r\n                }\r\n            }\r\n        }\r\n\r\n        this._sortLODLevels();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the registered LOD mesh distant from the parameter `camera` position if any, else returns the current mesh.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/LOD\r\n     * @param camera defines the camera to use to compute distance\r\n     * @param boundingSphere defines a custom bounding sphere to use instead of the one from this mesh\r\n     * @returns This mesh (for chaining)\r\n     */\r\n    public getLOD(camera: Camera, boundingSphere?: BoundingSphere): Nullable<AbstractMesh> {\r\n        const internalDataInfo = this._internalMeshDataInfo;\r\n        if (!internalDataInfo._LODLevels || internalDataInfo._LODLevels.length === 0) {\r\n            return this;\r\n        }\r\n\r\n        const bSphere = boundingSphere || this.getBoundingInfo().boundingSphere;\r\n\r\n        const distanceToCamera = camera.mode === Camera.ORTHOGRAPHIC_CAMERA ? camera.minZ : bSphere.centerWorld.subtract(camera.globalPosition).length();\r\n        let compareValue = distanceToCamera;\r\n        let compareSign = 1;\r\n\r\n        if (internalDataInfo._useLODScreenCoverage) {\r\n            const screenArea = camera.screenArea;\r\n            let meshArea = (bSphere.radiusWorld * camera.minZ) / distanceToCamera;\r\n            meshArea = meshArea * meshArea * Math.PI;\r\n            compareValue = meshArea / screenArea;\r\n            compareSign = -1;\r\n        }\r\n\r\n        if (compareSign * internalDataInfo._LODLevels[internalDataInfo._LODLevels.length - 1].distanceOrScreenCoverage > compareSign * compareValue) {\r\n            if (this.onLODLevelSelection) {\r\n                this.onLODLevelSelection(compareValue, this, this);\r\n            }\r\n            return this;\r\n        }\r\n\r\n        for (let index = 0; index < internalDataInfo._LODLevels.length; index++) {\r\n            const level = internalDataInfo._LODLevels[index];\r\n\r\n            if (compareSign * level.distanceOrScreenCoverage < compareSign * compareValue) {\r\n                if (level.mesh) {\r\n                    if (level.mesh.delayLoadState === Constants.DELAYLOADSTATE_NOTLOADED) {\r\n                        level.mesh._checkDelayState();\r\n                        return this;\r\n                    }\r\n\r\n                    if (level.mesh.delayLoadState === Constants.DELAYLOADSTATE_LOADING) {\r\n                        return this;\r\n                    }\r\n\r\n                    level.mesh._preActivate();\r\n                    level.mesh._updateSubMeshesBoundingInfo(this.worldMatrixFromCache);\r\n                }\r\n\r\n                if (this.onLODLevelSelection) {\r\n                    this.onLODLevelSelection(compareValue, this, level.mesh);\r\n                }\r\n\r\n                return level.mesh;\r\n            }\r\n        }\r\n\r\n        if (this.onLODLevelSelection) {\r\n            this.onLODLevelSelection(compareValue, this, this);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh internal Geometry object\r\n     */\r\n    public get geometry(): Nullable<Geometry> {\r\n        return this._geometry;\r\n    }\r\n\r\n    /**\r\n     * Returns the total number of vertices within the mesh geometry or zero if the mesh has no geometry.\r\n     * @returns the total number of vertices\r\n     */\r\n    public getTotalVertices(): number {\r\n        if (this._geometry === null || this._geometry === undefined) {\r\n            return 0;\r\n        }\r\n        return this._geometry.getTotalVertices();\r\n    }\r\n\r\n    /**\r\n     * Returns the content of an associated vertex buffer\r\n     * @param kind defines which buffer to read from (positions, indices, normals, etc). Possible `kind` values :\r\n     * - VertexBuffer.PositionKind\r\n     * - VertexBuffer.UVKind\r\n     * - VertexBuffer.UV2Kind\r\n     * - VertexBuffer.UV3Kind\r\n     * - VertexBuffer.UV4Kind\r\n     * - VertexBuffer.UV5Kind\r\n     * - VertexBuffer.UV6Kind\r\n     * - VertexBuffer.ColorKind\r\n     * - VertexBuffer.MatricesIndicesKind\r\n     * - VertexBuffer.MatricesIndicesExtraKind\r\n     * - VertexBuffer.MatricesWeightsKind\r\n     * - VertexBuffer.MatricesWeightsExtraKind\r\n     * @param copyWhenShared defines a boolean indicating that if the mesh geometry is shared among some other meshes, the returned array is a copy of the internal one\r\n     * @param forceCopy defines a boolean forcing the copy of the buffer no matter what the value of copyWhenShared is\r\n     * @param bypassInstanceData defines a boolean indicating that the function should not take into account the instance data (applies only if the mesh has instances). Default: false\r\n     * @returns a FloatArray or null if the mesh has no geometry or no vertex buffer for this kind.\r\n     */\r\n    public getVerticesData(kind: string, copyWhenShared?: boolean, forceCopy?: boolean, bypassInstanceData?: boolean): Nullable<FloatArray> {\r\n        if (!this._geometry) {\r\n            return null;\r\n        }\r\n        let data = bypassInstanceData\r\n            ? undefined\r\n            : this._userInstancedBuffersStorage?.vertexBuffers[kind]?.getFloatData(\r\n                  this.instances.length + 1, // +1 because the master mesh is not included in the instances array\r\n                  forceCopy || (copyWhenShared && this._geometry.meshes.length !== 1)\r\n              );\r\n        if (!data) {\r\n            data = this._geometry.getVerticesData(kind, copyWhenShared, forceCopy);\r\n        }\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * Returns the mesh VertexBuffer object from the requested `kind`\r\n     * @param kind defines which buffer to read from (positions, indices, normals, etc). Possible `kind` values :\r\n     * - VertexBuffer.PositionKind\r\n     * - VertexBuffer.NormalKind\r\n     * - VertexBuffer.UVKind\r\n     * - VertexBuffer.UV2Kind\r\n     * - VertexBuffer.UV3Kind\r\n     * - VertexBuffer.UV4Kind\r\n     * - VertexBuffer.UV5Kind\r\n     * - VertexBuffer.UV6Kind\r\n     * - VertexBuffer.ColorKind\r\n     * - VertexBuffer.MatricesIndicesKind\r\n     * - VertexBuffer.MatricesIndicesExtraKind\r\n     * - VertexBuffer.MatricesWeightsKind\r\n     * - VertexBuffer.MatricesWeightsExtraKind\r\n     * @param bypassInstanceData defines a boolean indicating that the function should not take into account the instance data (applies only if the mesh has instances). Default: false\r\n     * @returns a FloatArray or null if the mesh has no vertex buffer for this kind.\r\n     */\r\n    public getVertexBuffer(kind: string, bypassInstanceData?: boolean): Nullable<VertexBuffer> {\r\n        if (!this._geometry) {\r\n            return null;\r\n        }\r\n\r\n        return (bypassInstanceData ? undefined : this._userInstancedBuffersStorage?.vertexBuffers[kind]) ?? this._geometry.getVertexBuffer(kind);\r\n    }\r\n\r\n    /**\r\n     * Tests if a specific vertex buffer is associated with this mesh\r\n     * @param kind defines which buffer to check (positions, indices, normals, etc). Possible `kind` values :\r\n     * - VertexBuffer.PositionKind\r\n     * - VertexBuffer.NormalKind\r\n     * - VertexBuffer.UVKind\r\n     * - VertexBuffer.UV2Kind\r\n     * - VertexBuffer.UV3Kind\r\n     * - VertexBuffer.UV4Kind\r\n     * - VertexBuffer.UV5Kind\r\n     * - VertexBuffer.UV6Kind\r\n     * - VertexBuffer.ColorKind\r\n     * - VertexBuffer.MatricesIndicesKind\r\n     * - VertexBuffer.MatricesIndicesExtraKind\r\n     * - VertexBuffer.MatricesWeightsKind\r\n     * - VertexBuffer.MatricesWeightsExtraKind\r\n     * @param bypassInstanceData defines a boolean indicating that the function should not take into account the instance data (applies only if the mesh has instances). Default: false\r\n     * @returns a boolean\r\n     */\r\n    public isVerticesDataPresent(kind: string, bypassInstanceData?: boolean): boolean {\r\n        if (!this._geometry) {\r\n            if (this._delayInfo) {\r\n                return this._delayInfo.indexOf(kind) !== -1;\r\n            }\r\n            return false;\r\n        }\r\n        return (!bypassInstanceData && this._userInstancedBuffersStorage?.vertexBuffers[kind] !== undefined) || this._geometry.isVerticesDataPresent(kind);\r\n    }\r\n\r\n    /**\r\n     * Returns a boolean defining if the vertex data for the requested `kind` is updatable.\r\n     * @param kind defines which buffer to check (positions, indices, normals, etc). Possible `kind` values :\r\n     * - VertexBuffer.PositionKind\r\n     * - VertexBuffer.UVKind\r\n     * - VertexBuffer.UV2Kind\r\n     * - VertexBuffer.UV3Kind\r\n     * - VertexBuffer.UV4Kind\r\n     * - VertexBuffer.UV5Kind\r\n     * - VertexBuffer.UV6Kind\r\n     * - VertexBuffer.ColorKind\r\n     * - VertexBuffer.MatricesIndicesKind\r\n     * - VertexBuffer.MatricesIndicesExtraKind\r\n     * - VertexBuffer.MatricesWeightsKind\r\n     * - VertexBuffer.MatricesWeightsExtraKind\r\n     * @param bypassInstanceData defines a boolean indicating that the function should not take into account the instance data (applies only if the mesh has instances). Default: false\r\n     * @returns a boolean\r\n     */\r\n    public isVertexBufferUpdatable(kind: string, bypassInstanceData?: boolean): boolean {\r\n        if (!this._geometry) {\r\n            if (this._delayInfo) {\r\n                return this._delayInfo.indexOf(kind) !== -1;\r\n            }\r\n            return false;\r\n        }\r\n        if (!bypassInstanceData) {\r\n            const buffer = this._userInstancedBuffersStorage?.vertexBuffers[kind];\r\n            if (buffer) {\r\n                return buffer.isUpdatable();\r\n            }\r\n        }\r\n        return this._geometry.isVertexBufferUpdatable(kind);\r\n    }\r\n\r\n    /**\r\n     * Returns a string which contains the list of existing `kinds` of Vertex Data associated with this mesh.\r\n     * @param bypassInstanceData defines a boolean indicating that the function should not take into account the instance data (applies only if the mesh has instances). Default: false\r\n     * @returns an array of strings\r\n     */\r\n    public getVerticesDataKinds(bypassInstanceData?: boolean): string[] {\r\n        if (!this._geometry) {\r\n            const result = new Array<string>();\r\n            if (this._delayInfo) {\r\n                this._delayInfo.forEach(function (kind) {\r\n                    result.push(kind);\r\n                });\r\n            }\r\n            return result;\r\n        }\r\n        const kinds = this._geometry.getVerticesDataKinds();\r\n        if (!bypassInstanceData && this._userInstancedBuffersStorage) {\r\n            for (const kind in this._userInstancedBuffersStorage.vertexBuffers) {\r\n                if (kinds.indexOf(kind) === -1) {\r\n                    kinds.push(kind);\r\n                }\r\n            }\r\n        }\r\n        return kinds;\r\n    }\r\n\r\n    /**\r\n     * Returns a positive integer : the total number of indices in this mesh geometry.\r\n     * @returns the numner of indices or zero if the mesh has no geometry.\r\n     */\r\n    public getTotalIndices(): number {\r\n        if (!this._geometry) {\r\n            return 0;\r\n        }\r\n        return this._geometry.getTotalIndices();\r\n    }\r\n\r\n    /**\r\n     * Returns an array of integers or a typed array (Int32Array, Uint32Array, Uint16Array) populated with the mesh indices.\r\n     * @param copyWhenShared If true (default false) and and if the mesh geometry is shared among some other meshes, the returned array is a copy of the internal one.\r\n     * @param forceCopy defines a boolean indicating that the returned array must be cloned upon returning it\r\n     * @returns the indices array or an empty array if the mesh has no geometry\r\n     */\r\n    public getIndices(copyWhenShared?: boolean, forceCopy?: boolean): Nullable<IndicesArray> {\r\n        if (!this._geometry) {\r\n            return [];\r\n        }\r\n        return this._geometry.getIndices(copyWhenShared, forceCopy);\r\n    }\r\n\r\n    public get isBlocked(): boolean {\r\n        return this._masterMesh !== null && this._masterMesh !== undefined;\r\n    }\r\n\r\n    /**\r\n     * Determine if the current mesh is ready to be rendered\r\n     * @param completeCheck defines if a complete check (including materials and lights) has to be done (false by default)\r\n     * @param forceInstanceSupport will check if the mesh will be ready when used with instances (false by default)\r\n     * @returns true if all associated assets are ready (material, textures, shaders)\r\n     */\r\n    public isReady(completeCheck = false, forceInstanceSupport = false): boolean {\r\n        if (this.delayLoadState === Constants.DELAYLOADSTATE_LOADING) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.isReady(completeCheck)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.subMeshes || this.subMeshes.length === 0) {\r\n            return true;\r\n        }\r\n\r\n        if (!completeCheck) {\r\n            return true;\r\n        }\r\n\r\n        const engine = this.getEngine();\r\n        const scene = this.getScene();\r\n        const hardwareInstancedRendering = forceInstanceSupport || (engine.getCaps().instancedArrays && (this.instances.length > 0 || this.hasThinInstances));\r\n\r\n        this.computeWorldMatrix();\r\n\r\n        const mat = this.material || scene.defaultMaterial;\r\n        if (mat) {\r\n            if (mat._storeEffectOnSubMeshes) {\r\n                for (const subMesh of this.subMeshes) {\r\n                    const effectiveMaterial = subMesh.getMaterial();\r\n                    if (effectiveMaterial) {\r\n                        if (effectiveMaterial._storeEffectOnSubMeshes) {\r\n                            if (!effectiveMaterial.isReadyForSubMesh(this, subMesh, hardwareInstancedRendering)) {\r\n                                return false;\r\n                            }\r\n                        } else {\r\n                            if (!effectiveMaterial.isReady(this, hardwareInstancedRendering)) {\r\n                                return false;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                if (!mat.isReady(this, hardwareInstancedRendering)) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Shadows\r\n        const currentRenderPassId = engine.currentRenderPassId;\r\n        for (const light of this.lightSources) {\r\n            const generators = light.getShadowGenerators();\r\n\r\n            if (!generators) {\r\n                continue;\r\n            }\r\n\r\n            const iterator = generators.values();\r\n            for (let key = iterator.next(); key.done !== true; key = iterator.next()) {\r\n                const generator = key.value;\r\n                if (generator && (!generator.getShadowMap()?.renderList || (generator.getShadowMap()?.renderList && generator.getShadowMap()?.renderList?.indexOf(this) !== -1))) {\r\n                    const shadowMap = generator.getShadowMap()!;\r\n                    const renderPassIds = shadowMap.renderPassIds ?? [engine.currentRenderPassId];\r\n                    for (let p = 0; p < renderPassIds.length; ++p) {\r\n                        engine.currentRenderPassId = renderPassIds[p];\r\n                        for (const subMesh of this.subMeshes) {\r\n                            if (!generator.isReady(subMesh, hardwareInstancedRendering, subMesh.getMaterial()?.needAlphaBlendingForMesh(this) ?? false)) {\r\n                                engine.currentRenderPassId = currentRenderPassId;\r\n                                return false;\r\n                            }\r\n                        }\r\n                    }\r\n                    engine.currentRenderPassId = currentRenderPassId;\r\n                }\r\n            }\r\n        }\r\n\r\n        // LOD\r\n        for (const lod of this._internalMeshDataInfo._LODLevels) {\r\n            if (lod.mesh && !lod.mesh.isReady(hardwareInstancedRendering)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the normals aren't to be recomputed on next mesh `positions` array update. This property is pertinent only for updatable parametric shapes.\r\n     */\r\n    public get areNormalsFrozen(): boolean {\r\n        return this._internalMeshDataInfo._areNormalsFrozen;\r\n    }\r\n\r\n    /**\r\n     * This function affects parametric shapes on vertex position update only : ribbons, tubes, etc. It has no effect at all on other shapes. It prevents the mesh normals from being recomputed on next `positions` array update.\r\n     * @returns the current mesh\r\n     */\r\n    public freezeNormals(): Mesh {\r\n        this._internalMeshDataInfo._areNormalsFrozen = true;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * This function affects parametric shapes on vertex position update only : ribbons, tubes, etc. It has no effect at all on other shapes. It reactivates the mesh normals computation if it was previously frozen\r\n     * @returns the current mesh\r\n     */\r\n    public unfreezeNormals(): Mesh {\r\n        this._internalMeshDataInfo._areNormalsFrozen = false;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets a value overriding the instance count. Only applicable when custom instanced InterleavedVertexBuffer are used rather than InstancedMeshs\r\n     */\r\n    public set overridenInstanceCount(count: number) {\r\n        this._instanceDataStorage.overridenInstanceCount = count;\r\n    }\r\n\r\n    // Methods\r\n    /** @internal */\r\n    public _preActivate(): Mesh {\r\n        const internalDataInfo = this._internalMeshDataInfo;\r\n        const sceneRenderId = this.getScene().getRenderId();\r\n        if (internalDataInfo._preActivateId === sceneRenderId) {\r\n            return this;\r\n        }\r\n\r\n        internalDataInfo._preActivateId = sceneRenderId;\r\n        this._instanceDataStorage.visibleInstances = null;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _preActivateForIntermediateRendering(renderId: number): Mesh {\r\n        if (this._instanceDataStorage.visibleInstances) {\r\n            this._instanceDataStorage.visibleInstances.intermediateDefaultRenderId = renderId;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _registerInstanceForRenderId(instance: InstancedMesh, renderId: number): Mesh {\r\n        if (!this._instanceDataStorage.visibleInstances) {\r\n            this._instanceDataStorage.visibleInstances = {\r\n                defaultRenderId: renderId,\r\n                selfDefaultRenderId: this._renderId,\r\n            };\r\n        }\r\n\r\n        if (!this._instanceDataStorage.visibleInstances[renderId]) {\r\n            if (this._instanceDataStorage.previousRenderId !== undefined && this._instanceDataStorage.isFrozen) {\r\n                this._instanceDataStorage.visibleInstances[this._instanceDataStorage.previousRenderId] = null;\r\n            }\r\n            this._instanceDataStorage.previousRenderId = renderId;\r\n            this._instanceDataStorage.visibleInstances[renderId] = new Array<InstancedMesh>();\r\n        }\r\n\r\n        this._instanceDataStorage.visibleInstances[renderId].push(instance);\r\n        return this;\r\n    }\r\n\r\n    protected _afterComputeWorldMatrix(): void {\r\n        super._afterComputeWorldMatrix();\r\n\r\n        if (!this.hasThinInstances) {\r\n            return;\r\n        }\r\n\r\n        if (!this.doNotSyncBoundingInfo) {\r\n            this.thinInstanceRefreshBoundingInfo(false);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _postActivate(): void {\r\n        if (this.edgesShareWithInstances && this.edgesRenderer && this.edgesRenderer.isEnabled && this._renderingGroup) {\r\n            this._renderingGroup._edgesRenderers.pushNoDuplicate(this.edgesRenderer);\r\n            this.edgesRenderer.customInstances.push(this.getWorldMatrix());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This method recomputes and sets a new BoundingInfo to the mesh unless it is locked.\r\n     * This means the mesh underlying bounding box and sphere are recomputed.\r\n     * @param applySkeleton defines whether to apply the skeleton before computing the bounding info\r\n     * @param applyMorph  defines whether to apply the morph target before computing the bounding info\r\n     * @returns the current mesh\r\n     */\r\n    public refreshBoundingInfo(applySkeleton: boolean = false, applyMorph: boolean = false): Mesh {\r\n        if (this.hasBoundingInfo && this.getBoundingInfo().isLocked) {\r\n            return this;\r\n        }\r\n\r\n        const bias = this.geometry ? this.geometry.boundingBias : null;\r\n        this._refreshBoundingInfo(this._getPositionData(applySkeleton, applyMorph), bias);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _createGlobalSubMesh(force: boolean): Nullable<SubMesh> {\r\n        const totalVertices = this.getTotalVertices();\r\n        if (!totalVertices || !this.getIndices()) {\r\n            return null;\r\n        }\r\n\r\n        // Check if we need to recreate the submeshes\r\n        if (this.subMeshes && this.subMeshes.length > 0) {\r\n            const ib = this.getIndices();\r\n\r\n            if (!ib) {\r\n                return null;\r\n            }\r\n\r\n            const totalIndices = ib.length;\r\n            let needToRecreate = false;\r\n\r\n            if (force) {\r\n                needToRecreate = true;\r\n            } else {\r\n                for (const submesh of this.subMeshes) {\r\n                    if (submesh.indexStart + submesh.indexCount > totalIndices) {\r\n                        needToRecreate = true;\r\n                        break;\r\n                    }\r\n\r\n                    if (submesh.verticesStart + submesh.verticesCount > totalVertices) {\r\n                        needToRecreate = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (!needToRecreate) {\r\n                return this.subMeshes[0];\r\n            }\r\n        }\r\n\r\n        this.releaseSubMeshes();\r\n        return new SubMesh(0, 0, totalVertices, 0, this.getTotalIndices(), this);\r\n    }\r\n\r\n    /**\r\n     * This function will subdivide the mesh into multiple submeshes\r\n     * @param count defines the expected number of submeshes\r\n     */\r\n    public subdivide(count: number): void {\r\n        if (count < 1) {\r\n            return;\r\n        }\r\n\r\n        const totalIndices = this.getTotalIndices();\r\n        let subdivisionSize = (totalIndices / count) | 0;\r\n        let offset = 0;\r\n\r\n        // Ensure that subdivisionSize is a multiple of 3\r\n        while (subdivisionSize % 3 !== 0) {\r\n            subdivisionSize++;\r\n        }\r\n\r\n        this.releaseSubMeshes();\r\n        for (let index = 0; index < count; index++) {\r\n            if (offset >= totalIndices) {\r\n                break;\r\n            }\r\n\r\n            SubMesh.CreateFromIndices(0, offset, index === count - 1 ? totalIndices - offset : subdivisionSize, this, undefined, false);\r\n\r\n            offset += subdivisionSize;\r\n        }\r\n\r\n        this.refreshBoundingInfo();\r\n        this.synchronizeInstances();\r\n    }\r\n\r\n    /**\r\n     * Copy a FloatArray into a specific associated vertex buffer\r\n     * @param kind defines which buffer to write to (positions, indices, normals, etc). Possible `kind` values :\r\n     * - VertexBuffer.PositionKind\r\n     * - VertexBuffer.UVKind\r\n     * - VertexBuffer.UV2Kind\r\n     * - VertexBuffer.UV3Kind\r\n     * - VertexBuffer.UV4Kind\r\n     * - VertexBuffer.UV5Kind\r\n     * - VertexBuffer.UV6Kind\r\n     * - VertexBuffer.ColorKind\r\n     * - VertexBuffer.MatricesIndicesKind\r\n     * - VertexBuffer.MatricesIndicesExtraKind\r\n     * - VertexBuffer.MatricesWeightsKind\r\n     * - VertexBuffer.MatricesWeightsExtraKind\r\n     * @param data defines the data source\r\n     * @param updatable defines if the updated vertex buffer must be flagged as updatable\r\n     * @param stride defines the data stride size (can be null)\r\n     * @returns the current mesh\r\n     */\r\n    public setVerticesData(kind: string, data: FloatArray, updatable: boolean = false, stride?: number): AbstractMesh {\r\n        if (!this._geometry) {\r\n            const vertexData = new VertexData();\r\n            vertexData.set(data, kind);\r\n\r\n            const scene = this.getScene();\r\n\r\n            new Geometry(Geometry.RandomId(), scene, vertexData, updatable, this);\r\n        } else {\r\n            this._geometry.setVerticesData(kind, data, updatable, stride);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Delete a vertex buffer associated with this mesh\r\n     * @param kind defines which buffer to delete (positions, indices, normals, etc). Possible `kind` values :\r\n     * - VertexBuffer.PositionKind\r\n     * - VertexBuffer.UVKind\r\n     * - VertexBuffer.UV2Kind\r\n     * - VertexBuffer.UV3Kind\r\n     * - VertexBuffer.UV4Kind\r\n     * - VertexBuffer.UV5Kind\r\n     * - VertexBuffer.UV6Kind\r\n     * - VertexBuffer.ColorKind\r\n     * - VertexBuffer.MatricesIndicesKind\r\n     * - VertexBuffer.MatricesIndicesExtraKind\r\n     * - VertexBuffer.MatricesWeightsKind\r\n     * - VertexBuffer.MatricesWeightsExtraKind\r\n     */\r\n    public removeVerticesData(kind: string) {\r\n        if (!this._geometry) {\r\n            return;\r\n        }\r\n\r\n        this._geometry.removeVerticesData(kind);\r\n    }\r\n\r\n    /**\r\n     * Flags an associated vertex buffer as updatable\r\n     * @param kind defines which buffer to use (positions, indices, normals, etc). Possible `kind` values :\r\n     * - VertexBuffer.PositionKind\r\n     * - VertexBuffer.UVKind\r\n     * - VertexBuffer.UV2Kind\r\n     * - VertexBuffer.UV3Kind\r\n     * - VertexBuffer.UV4Kind\r\n     * - VertexBuffer.UV5Kind\r\n     * - VertexBuffer.UV6Kind\r\n     * - VertexBuffer.ColorKind\r\n     * - VertexBuffer.MatricesIndicesKind\r\n     * - VertexBuffer.MatricesIndicesExtraKind\r\n     * - VertexBuffer.MatricesWeightsKind\r\n     * - VertexBuffer.MatricesWeightsExtraKind\r\n     * @param updatable defines if the updated vertex buffer must be flagged as updatable\r\n     */\r\n    public markVerticesDataAsUpdatable(kind: string, updatable = true) {\r\n        const vb = this.getVertexBuffer(kind);\r\n\r\n        if (!vb || vb.isUpdatable() === updatable) {\r\n            return;\r\n        }\r\n\r\n        this.setVerticesData(kind, <FloatArray>this.getVerticesData(kind), updatable);\r\n    }\r\n\r\n    /**\r\n     * Sets the mesh global Vertex Buffer\r\n     * @param buffer defines the buffer to use\r\n     * @param disposeExistingBuffer disposes the existing buffer, if any (default: true)\r\n     * @returns the current mesh\r\n     */\r\n    public setVerticesBuffer(buffer: VertexBuffer, disposeExistingBuffer = true): Mesh {\r\n        if (!this._geometry) {\r\n            this._geometry = Geometry.CreateGeometryForMesh(this);\r\n        }\r\n\r\n        this._geometry.setVerticesBuffer(buffer, null, disposeExistingBuffer);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a specific associated vertex buffer\r\n     * @param kind defines which buffer to write to (positions, indices, normals, etc). Possible `kind` values :\r\n     * - VertexBuffer.PositionKind\r\n     * - VertexBuffer.UVKind\r\n     * - VertexBuffer.UV2Kind\r\n     * - VertexBuffer.UV3Kind\r\n     * - VertexBuffer.UV4Kind\r\n     * - VertexBuffer.UV5Kind\r\n     * - VertexBuffer.UV6Kind\r\n     * - VertexBuffer.ColorKind\r\n     * - VertexBuffer.MatricesIndicesKind\r\n     * - VertexBuffer.MatricesIndicesExtraKind\r\n     * - VertexBuffer.MatricesWeightsKind\r\n     * - VertexBuffer.MatricesWeightsExtraKind\r\n     * @param data defines the data source\r\n     * @param updateExtends defines if extends info of the mesh must be updated (can be null). This is mostly useful for \"position\" kind\r\n     * @param makeItUnique defines if the geometry associated with the mesh must be cloned to make the change only for this mesh (and not all meshes associated with the same geometry)\r\n     * @returns the current mesh\r\n     */\r\n    public updateVerticesData(kind: string, data: FloatArray, updateExtends?: boolean, makeItUnique?: boolean): AbstractMesh {\r\n        if (!this._geometry) {\r\n            return this;\r\n        }\r\n        if (!makeItUnique) {\r\n            this._geometry.updateVerticesData(kind, data, updateExtends);\r\n        } else {\r\n            this.makeGeometryUnique();\r\n            this.updateVerticesData(kind, data, updateExtends, false);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * This method updates the vertex positions of an updatable mesh according to the `positionFunction` returned values.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/dynamicMeshMorph#other-shapes-updatemeshpositions\r\n     * @param positionFunction is a simple JS function what is passed the mesh `positions` array. It doesn't need to return anything\r\n     * @param computeNormals is a boolean (default true) to enable/disable the mesh normal recomputation after the vertex position update\r\n     * @returns the current mesh\r\n     */\r\n    public updateMeshPositions(positionFunction: (data: FloatArray) => void, computeNormals: boolean = true): Mesh {\r\n        const positions = this.getVerticesData(VertexBuffer.PositionKind);\r\n        if (!positions) {\r\n            return this;\r\n        }\r\n\r\n        positionFunction(positions);\r\n        this.updateVerticesData(VertexBuffer.PositionKind, positions, false, false);\r\n\r\n        if (computeNormals) {\r\n            const indices = this.getIndices();\r\n            const normals = this.getVerticesData(VertexBuffer.NormalKind);\r\n\r\n            if (!normals) {\r\n                return this;\r\n            }\r\n\r\n            VertexData.ComputeNormals(positions, indices, normals);\r\n            this.updateVerticesData(VertexBuffer.NormalKind, normals, false, false);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a un-shared specific occurence of the geometry for the mesh.\r\n     * @returns the current mesh\r\n     */\r\n    public makeGeometryUnique(): Mesh {\r\n        if (!this._geometry) {\r\n            return this;\r\n        }\r\n\r\n        if (this._geometry.meshes.length === 1) {\r\n            return this;\r\n        }\r\n\r\n        const oldGeometry = this._geometry;\r\n        const geometry = this._geometry.copy(Geometry.RandomId());\r\n        oldGeometry.releaseForMesh(this, true);\r\n        geometry.applyToMesh(this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the index buffer of this mesh\r\n     * @param indices defines the source data\r\n     * @param totalVertices defines the total number of vertices referenced by this index data (can be null)\r\n     * @param updatable defines if the updated index buffer must be flagged as updatable (default is false)\r\n     * @returns the current mesh\r\n     */\r\n    public setIndices(indices: IndicesArray, totalVertices: Nullable<number> = null, updatable: boolean = false): AbstractMesh {\r\n        if (!this._geometry) {\r\n            const vertexData = new VertexData();\r\n            vertexData.indices = indices;\r\n\r\n            const scene = this.getScene();\r\n\r\n            new Geometry(Geometry.RandomId(), scene, vertexData, updatable, this);\r\n        } else {\r\n            this._geometry.setIndices(indices, totalVertices, updatable);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update the current index buffer\r\n     * @param indices defines the source data\r\n     * @param offset defines the offset in the index buffer where to store the new data (can be null)\r\n     * @param gpuMemoryOnly defines a boolean indicating that only the GPU memory must be updated leaving the CPU version of the indices unchanged (false by default)\r\n     * @returns the current mesh\r\n     */\r\n    public updateIndices(indices: IndicesArray, offset?: number, gpuMemoryOnly = false): AbstractMesh {\r\n        if (!this._geometry) {\r\n            return this;\r\n        }\r\n\r\n        this._geometry.updateIndices(indices, offset, gpuMemoryOnly);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Invert the geometry to move from a right handed system to a left handed one.\r\n     * @returns the current mesh\r\n     */\r\n    public toLeftHanded(): Mesh {\r\n        if (!this._geometry) {\r\n            return this;\r\n        }\r\n        this._geometry.toLeftHanded();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _bind(subMesh: SubMesh, effect: Effect, fillMode: number, allowInstancedRendering = true): Mesh {\r\n        if (!this._geometry) {\r\n            return this;\r\n        }\r\n\r\n        const engine = this.getScene().getEngine();\r\n\r\n        // Morph targets\r\n        if (this.morphTargetManager && this.morphTargetManager.isUsingTextureForTargets) {\r\n            this.morphTargetManager._bind(effect);\r\n        }\r\n\r\n        // Wireframe\r\n        let indexToBind;\r\n        if (this._unIndexed) {\r\n            indexToBind = null;\r\n        } else {\r\n            switch (this._getRenderingFillMode(fillMode)) {\r\n                case Material.PointFillMode:\r\n                    indexToBind = null;\r\n                    break;\r\n                case Material.WireFrameFillMode:\r\n                    indexToBind = subMesh._getLinesIndexBuffer(<IndicesArray>this.getIndices(), engine);\r\n                    break;\r\n                default:\r\n                case Material.TriangleFillMode:\r\n                    indexToBind = this._geometry.getIndexBuffer();\r\n                    break;\r\n            }\r\n        }\r\n\r\n        // VBOs\r\n        if (!allowInstancedRendering || !this._userInstancedBuffersStorage || this.hasThinInstances) {\r\n            this._geometry._bind(effect, indexToBind);\r\n        } else {\r\n            this._geometry._bind(effect, indexToBind, this._userInstancedBuffersStorage.vertexBuffers, this._userInstancedBuffersStorage.vertexArrayObjects);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _draw(subMesh: SubMesh, fillMode: number, instancesCount?: number): Mesh {\r\n        if (!this._geometry || !this._geometry.getVertexBuffers() || (!this._unIndexed && !this._geometry.getIndexBuffer())) {\r\n            return this;\r\n        }\r\n\r\n        if (this._internalMeshDataInfo._onBeforeDrawObservable) {\r\n            this._internalMeshDataInfo._onBeforeDrawObservable.notifyObservers(this);\r\n        }\r\n\r\n        const scene = this.getScene();\r\n        const engine = scene.getEngine();\r\n\r\n        if (this._unIndexed || fillMode == Material.PointFillMode) {\r\n            // or triangles as points\r\n            engine.drawArraysType(fillMode, subMesh.verticesStart, subMesh.verticesCount, this.forcedInstanceCount || instancesCount);\r\n        } else if (fillMode == Material.WireFrameFillMode) {\r\n            // Triangles as wireframe\r\n            engine.drawElementsType(fillMode, 0, subMesh._linesIndexCount, this.forcedInstanceCount || instancesCount);\r\n        } else {\r\n            engine.drawElementsType(fillMode, subMesh.indexStart, subMesh.indexCount, this.forcedInstanceCount || instancesCount);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Registers for this mesh a javascript function called just before the rendering process\r\n     * @param func defines the function to call before rendering this mesh\r\n     * @returns the current mesh\r\n     */\r\n    public registerBeforeRender(func: (mesh: AbstractMesh) => void): Mesh {\r\n        this.onBeforeRenderObservable.add(func);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Disposes a previously registered javascript function called before the rendering\r\n     * @param func defines the function to remove\r\n     * @returns the current mesh\r\n     */\r\n    public unregisterBeforeRender(func: (mesh: AbstractMesh) => void): Mesh {\r\n        this.onBeforeRenderObservable.removeCallback(func);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Registers for this mesh a javascript function called just after the rendering is complete\r\n     * @param func defines the function to call after rendering this mesh\r\n     * @returns the current mesh\r\n     */\r\n    public registerAfterRender(func: (mesh: AbstractMesh) => void): Mesh {\r\n        this.onAfterRenderObservable.add(func);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Disposes a previously registered javascript function called after the rendering.\r\n     * @param func defines the function to remove\r\n     * @returns the current mesh\r\n     */\r\n    public unregisterAfterRender(func: (mesh: AbstractMesh) => void): Mesh {\r\n        this.onAfterRenderObservable.removeCallback(func);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _getInstancesRenderList(subMeshId: number, isReplacementMode: boolean = false): _InstancesBatch {\r\n        if (this._instanceDataStorage.isFrozen) {\r\n            if (isReplacementMode) {\r\n                this._instanceDataStorage.batchCacheReplacementModeInFrozenMode.hardwareInstancedRendering[subMeshId] = false;\r\n                this._instanceDataStorage.batchCacheReplacementModeInFrozenMode.renderSelf[subMeshId] = true;\r\n                return this._instanceDataStorage.batchCacheReplacementModeInFrozenMode;\r\n            }\r\n            if (this._instanceDataStorage.previousBatch) {\r\n                return this._instanceDataStorage.previousBatch;\r\n            }\r\n        }\r\n        const scene = this.getScene();\r\n        const isInIntermediateRendering = scene._isInIntermediateRendering();\r\n        const onlyForInstances = isInIntermediateRendering\r\n            ? this._internalAbstractMeshDataInfo._onlyForInstancesIntermediate\r\n            : this._internalAbstractMeshDataInfo._onlyForInstances;\r\n        const batchCache = this._instanceDataStorage.batchCache;\r\n        batchCache.mustReturn = false;\r\n        batchCache.renderSelf[subMeshId] = isReplacementMode || (!onlyForInstances && this.isEnabled() && this.isVisible);\r\n        batchCache.visibleInstances[subMeshId] = null;\r\n\r\n        if (this._instanceDataStorage.visibleInstances && !isReplacementMode) {\r\n            const visibleInstances = this._instanceDataStorage.visibleInstances;\r\n            const currentRenderId = scene.getRenderId();\r\n            const defaultRenderId = isInIntermediateRendering ? visibleInstances.intermediateDefaultRenderId : visibleInstances.defaultRenderId;\r\n            batchCache.visibleInstances[subMeshId] = visibleInstances[currentRenderId];\r\n\r\n            if (!batchCache.visibleInstances[subMeshId] && defaultRenderId) {\r\n                batchCache.visibleInstances[subMeshId] = visibleInstances[defaultRenderId];\r\n            }\r\n        }\r\n        batchCache.hardwareInstancedRendering[subMeshId] =\r\n            !isReplacementMode &&\r\n            this._instanceDataStorage.hardwareInstancedRendering &&\r\n            batchCache.visibleInstances[subMeshId] !== null &&\r\n            batchCache.visibleInstances[subMeshId] !== undefined;\r\n        this._instanceDataStorage.previousBatch = batchCache;\r\n\r\n        return batchCache;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _renderWithInstances(subMesh: SubMesh, fillMode: number, batch: _InstancesBatch, effect: Effect, engine: Engine): Mesh {\r\n        const visibleInstances = batch.visibleInstances[subMesh._id];\r\n        const visibleInstanceCount = visibleInstances ? visibleInstances.length : 0;\r\n\r\n        const instanceStorage = this._instanceDataStorage;\r\n        const currentInstancesBufferSize = instanceStorage.instancesBufferSize;\r\n        let instancesBuffer = instanceStorage.instancesBuffer;\r\n        let instancesPreviousBuffer = instanceStorage.instancesPreviousBuffer;\r\n        const matricesCount = visibleInstanceCount + 1;\r\n        const bufferSize = matricesCount * 16 * 4;\r\n\r\n        while (instanceStorage.instancesBufferSize < bufferSize) {\r\n            instanceStorage.instancesBufferSize *= 2;\r\n        }\r\n\r\n        if (!instanceStorage.instancesData || currentInstancesBufferSize != instanceStorage.instancesBufferSize) {\r\n            instanceStorage.instancesData = new Float32Array(instanceStorage.instancesBufferSize / 4);\r\n        }\r\n        if ((this._scene.needsPreviousWorldMatrices && !instanceStorage.instancesPreviousData) || currentInstancesBufferSize != instanceStorage.instancesBufferSize) {\r\n            instanceStorage.instancesPreviousData = new Float32Array(instanceStorage.instancesBufferSize / 4);\r\n        }\r\n\r\n        let offset = 0;\r\n        let instancesCount = 0;\r\n\r\n        const renderSelf = batch.renderSelf[subMesh._id];\r\n\r\n        const needUpdateBuffer =\r\n            !instancesBuffer ||\r\n            currentInstancesBufferSize !== instanceStorage.instancesBufferSize ||\r\n            (this._scene.needsPreviousWorldMatrices && !instanceStorage.instancesPreviousBuffer);\r\n\r\n        if (!this._instanceDataStorage.manualUpdate && (!instanceStorage.isFrozen || needUpdateBuffer)) {\r\n            const world = this.getWorldMatrix();\r\n            if (renderSelf) {\r\n                if (this._scene.needsPreviousWorldMatrices) {\r\n                    if (!instanceStorage.masterMeshPreviousWorldMatrix) {\r\n                        instanceStorage.masterMeshPreviousWorldMatrix = world.clone();\r\n                        instanceStorage.masterMeshPreviousWorldMatrix.copyToArray(instanceStorage.instancesPreviousData, offset);\r\n                    } else {\r\n                        instanceStorage.masterMeshPreviousWorldMatrix.copyToArray(instanceStorage.instancesPreviousData, offset);\r\n                        instanceStorage.masterMeshPreviousWorldMatrix.copyFrom(world);\r\n                    }\r\n                }\r\n                world.copyToArray(instanceStorage.instancesData, offset);\r\n                offset += 16;\r\n                instancesCount++;\r\n            }\r\n\r\n            if (visibleInstances) {\r\n                if (Mesh.INSTANCEDMESH_SORT_TRANSPARENT && this._scene.activeCamera && subMesh.getMaterial()?.needAlphaBlendingForMesh(subMesh.getRenderingMesh())) {\r\n                    const cameraPosition = this._scene.activeCamera.globalPosition;\r\n                    for (let instanceIndex = 0; instanceIndex < visibleInstances.length; instanceIndex++) {\r\n                        const instanceMesh = visibleInstances[instanceIndex];\r\n                        instanceMesh._distanceToCamera = Vector3.Distance(instanceMesh.getBoundingInfo().boundingSphere.centerWorld, cameraPosition);\r\n                    }\r\n                    visibleInstances.sort((m1, m2) => {\r\n                        return m1._distanceToCamera > m2._distanceToCamera ? -1 : m1._distanceToCamera < m2._distanceToCamera ? 1 : 0;\r\n                    });\r\n                }\r\n                for (let instanceIndex = 0; instanceIndex < visibleInstances.length; instanceIndex++) {\r\n                    const instance = visibleInstances[instanceIndex];\r\n                    const matrix = instance.getWorldMatrix();\r\n                    matrix.copyToArray(instanceStorage.instancesData, offset);\r\n\r\n                    if (this._scene.needsPreviousWorldMatrices) {\r\n                        if (!instance._previousWorldMatrix) {\r\n                            instance._previousWorldMatrix = matrix.clone();\r\n                            instance._previousWorldMatrix.copyToArray(instanceStorage.instancesPreviousData, offset);\r\n                        } else {\r\n                            instance._previousWorldMatrix.copyToArray(instanceStorage.instancesPreviousData, offset);\r\n                            instance._previousWorldMatrix.copyFrom(matrix);\r\n                        }\r\n                    }\r\n\r\n                    offset += 16;\r\n                    instancesCount++;\r\n                }\r\n            }\r\n        } else {\r\n            instancesCount = (renderSelf ? 1 : 0) + visibleInstanceCount;\r\n        }\r\n\r\n        if (needUpdateBuffer) {\r\n            if (instancesBuffer) {\r\n                instancesBuffer.dispose();\r\n            }\r\n\r\n            if (instancesPreviousBuffer) {\r\n                instancesPreviousBuffer.dispose();\r\n            }\r\n\r\n            instancesBuffer = new Buffer(engine, instanceStorage.instancesData, true, 16, false, true);\r\n            instanceStorage.instancesBuffer = instancesBuffer;\r\n            if (!this._userInstancedBuffersStorage) {\r\n                this._userInstancedBuffersStorage = {\r\n                    data: {},\r\n                    vertexBuffers: {},\r\n                    strides: {},\r\n                    sizes: {},\r\n                    vertexArrayObjects: this.getEngine().getCaps().vertexArrayObject ? {} : undefined,\r\n                };\r\n            }\r\n\r\n            this._userInstancedBuffersStorage.vertexBuffers[\"world0\"] = instancesBuffer.createVertexBuffer(\"world0\", 0, 4);\r\n            this._userInstancedBuffersStorage.vertexBuffers[\"world1\"] = instancesBuffer.createVertexBuffer(\"world1\", 4, 4);\r\n            this._userInstancedBuffersStorage.vertexBuffers[\"world2\"] = instancesBuffer.createVertexBuffer(\"world2\", 8, 4);\r\n            this._userInstancedBuffersStorage.vertexBuffers[\"world3\"] = instancesBuffer.createVertexBuffer(\"world3\", 12, 4);\r\n\r\n            if (this._scene.needsPreviousWorldMatrices) {\r\n                instancesPreviousBuffer = new Buffer(engine, instanceStorage.instancesPreviousData, true, 16, false, true);\r\n                instanceStorage.instancesPreviousBuffer = instancesPreviousBuffer;\r\n\r\n                this._userInstancedBuffersStorage.vertexBuffers[\"previousWorld0\"] = instancesPreviousBuffer.createVertexBuffer(\"previousWorld0\", 0, 4);\r\n                this._userInstancedBuffersStorage.vertexBuffers[\"previousWorld1\"] = instancesPreviousBuffer.createVertexBuffer(\"previousWorld1\", 4, 4);\r\n                this._userInstancedBuffersStorage.vertexBuffers[\"previousWorld2\"] = instancesPreviousBuffer.createVertexBuffer(\"previousWorld2\", 8, 4);\r\n                this._userInstancedBuffersStorage.vertexBuffers[\"previousWorld3\"] = instancesPreviousBuffer.createVertexBuffer(\"previousWorld3\", 12, 4);\r\n            }\r\n            this._invalidateInstanceVertexArrayObject();\r\n        } else {\r\n            if (!this._instanceDataStorage.isFrozen || this._instanceDataStorage.forceMatrixUpdates) {\r\n                instancesBuffer!.updateDirectly(instanceStorage.instancesData, 0, instancesCount);\r\n                if (this._scene.needsPreviousWorldMatrices && (!this._instanceDataStorage.manualUpdate || this._instanceDataStorage.previousManualUpdate)) {\r\n                    instancesPreviousBuffer!.updateDirectly(instanceStorage.instancesPreviousData, 0, instancesCount);\r\n                }\r\n            }\r\n        }\r\n\r\n        this._processInstancedBuffers(visibleInstances, renderSelf);\r\n\r\n        // Stats\r\n        this.getScene()._activeIndices.addCount(subMesh.indexCount * instancesCount, false);\r\n\r\n        // Draw\r\n        if (engine._currentDrawContext) {\r\n            engine._currentDrawContext.useInstancing = true;\r\n        }\r\n        this._bind(subMesh, effect, fillMode);\r\n        this._draw(subMesh, fillMode, instancesCount);\r\n\r\n        // Write current matrices as previous matrices in case of manual update\r\n        // Default behaviour when previous matrices are not specified explicitly\r\n        // Will break if instances number/order changes\r\n        if (\r\n            this._scene.needsPreviousWorldMatrices &&\r\n            !needUpdateBuffer &&\r\n            this._instanceDataStorage.manualUpdate &&\r\n            (!this._instanceDataStorage.isFrozen || this._instanceDataStorage.forceMatrixUpdates) &&\r\n            !this._instanceDataStorage.previousManualUpdate\r\n        ) {\r\n            instancesPreviousBuffer!.updateDirectly(instanceStorage.instancesData, 0, instancesCount);\r\n        }\r\n\r\n        engine.unbindInstanceAttributes();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _renderWithThinInstances(subMesh: SubMesh, fillMode: number, effect: Effect, engine: Engine) {\r\n        // Stats\r\n        const instancesCount = this._thinInstanceDataStorage?.instancesCount ?? 0;\r\n\r\n        this.getScene()._activeIndices.addCount(subMesh.indexCount * instancesCount, false);\r\n\r\n        // Draw\r\n        if (engine._currentDrawContext) {\r\n            engine._currentDrawContext.useInstancing = true;\r\n        }\r\n        this._bind(subMesh, effect, fillMode);\r\n        this._draw(subMesh, fillMode, instancesCount);\r\n\r\n        // Write current matrices as previous matrices\r\n        // Default behaviour when previous matrices are not specified explicitly\r\n        // Will break if instances number/order changes\r\n        if (this._scene.needsPreviousWorldMatrices && !this._thinInstanceDataStorage.previousMatrixData && this._thinInstanceDataStorage.matrixData) {\r\n            if (!this._thinInstanceDataStorage.previousMatrixBuffer) {\r\n                this._thinInstanceDataStorage.previousMatrixBuffer = this._thinInstanceCreateMatrixBuffer(\"previousWorld\", this._thinInstanceDataStorage.matrixData, false);\r\n            } else {\r\n                this._thinInstanceDataStorage.previousMatrixBuffer!.updateDirectly(this._thinInstanceDataStorage.matrixData, 0, instancesCount);\r\n            }\r\n        }\r\n\r\n        engine.unbindInstanceAttributes();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public _processInstancedBuffers(visibleInstances: Nullable<InstancedMesh[]>, renderSelf: boolean) {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _processRendering(\r\n        renderingMesh: AbstractMesh,\r\n        subMesh: SubMesh,\r\n        effect: Effect,\r\n        fillMode: number,\r\n        batch: _InstancesBatch,\r\n        hardwareInstancedRendering: boolean,\r\n        onBeforeDraw: (isInstance: boolean, world: Matrix, effectiveMaterial?: Material) => void,\r\n        effectiveMaterial?: Material\r\n    ): Mesh {\r\n        const scene = this.getScene();\r\n        const engine = scene.getEngine();\r\n        fillMode = this._getRenderingFillMode(fillMode);\r\n\r\n        if (hardwareInstancedRendering && subMesh.getRenderingMesh().hasThinInstances) {\r\n            this._renderWithThinInstances(subMesh, fillMode, effect, engine);\r\n            return this;\r\n        }\r\n\r\n        if (hardwareInstancedRendering) {\r\n            this._renderWithInstances(subMesh, fillMode, batch, effect, engine);\r\n        } else {\r\n            if (engine._currentDrawContext) {\r\n                engine._currentDrawContext.useInstancing = false;\r\n            }\r\n\r\n            let instanceCount = 0;\r\n            if (batch.renderSelf[subMesh._id]) {\r\n                // Draw\r\n                if (onBeforeDraw) {\r\n                    onBeforeDraw(false, renderingMesh.getWorldMatrix(), effectiveMaterial);\r\n                }\r\n                instanceCount++;\r\n\r\n                this._draw(subMesh, fillMode, this._instanceDataStorage.overridenInstanceCount);\r\n            }\r\n\r\n            const visibleInstancesForSubMesh = batch.visibleInstances[subMesh._id];\r\n\r\n            if (visibleInstancesForSubMesh) {\r\n                const visibleInstanceCount = visibleInstancesForSubMesh.length;\r\n                instanceCount += visibleInstanceCount;\r\n\r\n                // Stats\r\n                for (let instanceIndex = 0; instanceIndex < visibleInstanceCount; instanceIndex++) {\r\n                    const instance = visibleInstancesForSubMesh[instanceIndex];\r\n\r\n                    // World\r\n                    const world = instance.getWorldMatrix();\r\n                    if (onBeforeDraw) {\r\n                        onBeforeDraw(true, world, effectiveMaterial);\r\n                    }\r\n                    // Draw\r\n                    this._draw(subMesh, fillMode);\r\n                }\r\n            }\r\n\r\n            // Stats\r\n            scene._activeIndices.addCount(subMesh.indexCount * instanceCount, false);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _rebuild(dispose = false): void {\r\n        if (this._instanceDataStorage.instancesBuffer) {\r\n            // Dispose instance buffer to be recreated in _renderWithInstances when rendered\r\n            if (dispose) {\r\n                this._instanceDataStorage.instancesBuffer.dispose();\r\n            }\r\n            this._instanceDataStorage.instancesBuffer = null;\r\n        }\r\n        if (this._userInstancedBuffersStorage) {\r\n            for (const kind in this._userInstancedBuffersStorage.vertexBuffers) {\r\n                const buffer = this._userInstancedBuffersStorage.vertexBuffers[kind];\r\n                if (buffer) {\r\n                    // Dispose instance buffer to be recreated in _renderWithInstances when rendered\r\n                    if (dispose) {\r\n                        buffer.dispose();\r\n                    }\r\n                    this._userInstancedBuffersStorage.vertexBuffers[kind] = null;\r\n                }\r\n            }\r\n            if (this._userInstancedBuffersStorage.vertexArrayObjects) {\r\n                this._userInstancedBuffersStorage.vertexArrayObjects = {};\r\n            }\r\n        }\r\n        this._internalMeshDataInfo._effectiveMaterial = null;\r\n        super._rebuild(dispose);\r\n    }\r\n\r\n    /** @internal */\r\n    public _freeze() {\r\n        if (!this.subMeshes) {\r\n            return;\r\n        }\r\n\r\n        // Prepare batches\r\n        for (let index = 0; index < this.subMeshes.length; index++) {\r\n            this._getInstancesRenderList(index);\r\n        }\r\n\r\n        this._internalMeshDataInfo._effectiveMaterial = null;\r\n        this._instanceDataStorage.isFrozen = true;\r\n    }\r\n\r\n    /** @internal */\r\n    public _unFreeze() {\r\n        this._instanceDataStorage.isFrozen = false;\r\n        this._instanceDataStorage.previousBatch = null;\r\n    }\r\n\r\n    /**\r\n     * Triggers the draw call for the mesh. Usually, you don't need to call this method by your own because the mesh rendering is handled by the scene rendering manager\r\n     * @param subMesh defines the subMesh to render\r\n     * @param enableAlphaMode defines if alpha mode can be changed\r\n     * @param effectiveMeshReplacement defines an optional mesh used to provide info for the rendering\r\n     * @returns the current mesh\r\n     */\r\n    public render(subMesh: SubMesh, enableAlphaMode: boolean, effectiveMeshReplacement?: AbstractMesh): Mesh {\r\n        const scene = this.getScene();\r\n\r\n        if (this._internalAbstractMeshDataInfo._isActiveIntermediate) {\r\n            this._internalAbstractMeshDataInfo._isActiveIntermediate = false;\r\n        } else {\r\n            this._internalAbstractMeshDataInfo._isActive = false;\r\n        }\r\n\r\n        if (this._checkOcclusionQuery() && !this._occlusionDataStorage.forceRenderingWhenOccluded) {\r\n            return this;\r\n        }\r\n\r\n        // Managing instances\r\n        const batch = this._getInstancesRenderList(subMesh._id, !!effectiveMeshReplacement);\r\n\r\n        if (batch.mustReturn) {\r\n            return this;\r\n        }\r\n\r\n        // Checking geometry state\r\n        if (!this._geometry || !this._geometry.getVertexBuffers() || (!this._unIndexed && !this._geometry.getIndexBuffer())) {\r\n            return this;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n        let oldCameraMaxZ = 0;\r\n        let oldCamera: Nullable<Camera> = null;\r\n        if (this.ignoreCameraMaxZ && scene.activeCamera && !scene._isInIntermediateRendering()) {\r\n            oldCameraMaxZ = scene.activeCamera.maxZ;\r\n            oldCamera = scene.activeCamera;\r\n            scene.activeCamera.maxZ = 0;\r\n            scene.updateTransformMatrix(true);\r\n        }\r\n\r\n        if (this._internalMeshDataInfo._onBeforeRenderObservable) {\r\n            this._internalMeshDataInfo._onBeforeRenderObservable.notifyObservers(this);\r\n        }\r\n\r\n        const renderingMesh = subMesh.getRenderingMesh();\r\n        const hardwareInstancedRendering =\r\n            batch.hardwareInstancedRendering[subMesh._id] ||\r\n            renderingMesh.hasThinInstances ||\r\n            (!!this._userInstancedBuffersStorage && !subMesh.getMesh()._internalAbstractMeshDataInfo._actAsRegularMesh);\r\n        const instanceDataStorage = this._instanceDataStorage;\r\n\r\n        const material = subMesh.getMaterial();\r\n        if (!material) {\r\n            if (oldCamera) {\r\n                oldCamera.maxZ = oldCameraMaxZ;\r\n                scene.updateTransformMatrix(true);\r\n            }\r\n            return this;\r\n        }\r\n\r\n        // Material\r\n        if (!instanceDataStorage.isFrozen || !this._internalMeshDataInfo._effectiveMaterial || this._internalMeshDataInfo._effectiveMaterial !== material) {\r\n            if (material._storeEffectOnSubMeshes) {\r\n                if (!material.isReadyForSubMesh(this, subMesh, hardwareInstancedRendering)) {\r\n                    if (oldCamera) {\r\n                        oldCamera.maxZ = oldCameraMaxZ;\r\n                        scene.updateTransformMatrix(true);\r\n                    }\r\n                    return this;\r\n                }\r\n            } else if (!material.isReady(this, hardwareInstancedRendering)) {\r\n                if (oldCamera) {\r\n                    oldCamera.maxZ = oldCameraMaxZ;\r\n                    scene.updateTransformMatrix(true);\r\n                }\r\n                return this;\r\n            }\r\n\r\n            this._internalMeshDataInfo._effectiveMaterial = material;\r\n        } else if (\r\n            (material._storeEffectOnSubMeshes && !subMesh.effect?._wasPreviouslyReady) ||\r\n            (!material._storeEffectOnSubMeshes && !material.getEffect()?._wasPreviouslyReady)\r\n        ) {\r\n            if (oldCamera) {\r\n                oldCamera.maxZ = oldCameraMaxZ;\r\n                scene.updateTransformMatrix(true);\r\n            }\r\n            return this;\r\n        }\r\n\r\n        // Alpha mode\r\n        if (enableAlphaMode) {\r\n            engine.setAlphaMode(this._internalMeshDataInfo._effectiveMaterial.alphaMode);\r\n        }\r\n\r\n        let drawWrapper: Nullable<DrawWrapper>;\r\n        if (this._internalMeshDataInfo._effectiveMaterial._storeEffectOnSubMeshes) {\r\n            drawWrapper = subMesh._drawWrapper;\r\n        } else {\r\n            drawWrapper = this._internalMeshDataInfo._effectiveMaterial._getDrawWrapper();\r\n        }\r\n\r\n        const effect = drawWrapper?.effect ?? null;\r\n\r\n        for (const step of scene._beforeRenderingMeshStage) {\r\n            step.action(this, subMesh, batch, effect);\r\n        }\r\n\r\n        if (!drawWrapper || !effect) {\r\n            if (oldCamera) {\r\n                oldCamera.maxZ = oldCameraMaxZ;\r\n                scene.updateTransformMatrix(true);\r\n            }\r\n            return this;\r\n        }\r\n\r\n        const effectiveMesh = effectiveMeshReplacement || this;\r\n\r\n        let sideOrientation: Nullable<number>;\r\n\r\n        if (!instanceDataStorage.isFrozen && (this._internalMeshDataInfo._effectiveMaterial.backFaceCulling || this.overrideMaterialSideOrientation !== null)) {\r\n            const mainDeterminant = effectiveMesh._getWorldMatrixDeterminant();\r\n            sideOrientation = this.overrideMaterialSideOrientation;\r\n            if (sideOrientation == null) {\r\n                sideOrientation = this._internalMeshDataInfo._effectiveMaterial.sideOrientation;\r\n            }\r\n            if (mainDeterminant < 0) {\r\n                sideOrientation = sideOrientation === Material.ClockWiseSideOrientation ? Material.CounterClockWiseSideOrientation : Material.ClockWiseSideOrientation;\r\n            }\r\n            instanceDataStorage.sideOrientation = sideOrientation!;\r\n        } else {\r\n            sideOrientation = instanceDataStorage.sideOrientation;\r\n        }\r\n\r\n        const reverse = this._internalMeshDataInfo._effectiveMaterial._preBind(drawWrapper, sideOrientation);\r\n\r\n        if (this._internalMeshDataInfo._effectiveMaterial.forceDepthWrite) {\r\n            engine.setDepthWrite(true);\r\n        }\r\n\r\n        // Bind\r\n        const effectiveMaterial = this._internalMeshDataInfo._effectiveMaterial;\r\n        const fillMode = effectiveMaterial.fillMode;\r\n\r\n        if (this._internalMeshDataInfo._onBeforeBindObservable) {\r\n            this._internalMeshDataInfo._onBeforeBindObservable.notifyObservers(this);\r\n        }\r\n\r\n        if (!hardwareInstancedRendering) {\r\n            // Binding will be done later because we need to add more info to the VB\r\n            this._bind(subMesh, effect, fillMode, false);\r\n        }\r\n\r\n        const world = effectiveMesh.getWorldMatrix();\r\n        if (effectiveMaterial._storeEffectOnSubMeshes) {\r\n            effectiveMaterial.bindForSubMesh(world, this, subMesh);\r\n        } else {\r\n            effectiveMaterial.bind(world, this);\r\n        }\r\n\r\n        if (!effectiveMaterial.backFaceCulling && effectiveMaterial.separateCullingPass) {\r\n            engine.setState(true, effectiveMaterial.zOffset, false, !reverse, effectiveMaterial.cullBackFaces, effectiveMaterial.stencil, effectiveMaterial.zOffsetUnits);\r\n            this._processRendering(this, subMesh, effect, fillMode, batch, hardwareInstancedRendering, this._onBeforeDraw, this._internalMeshDataInfo._effectiveMaterial);\r\n            engine.setState(true, effectiveMaterial.zOffset, false, reverse, effectiveMaterial.cullBackFaces, effectiveMaterial.stencil, effectiveMaterial.zOffsetUnits);\r\n\r\n            if (this._internalMeshDataInfo._onBetweenPassObservable) {\r\n                this._internalMeshDataInfo._onBetweenPassObservable.notifyObservers(subMesh);\r\n            }\r\n        }\r\n\r\n        // Draw\r\n        this._processRendering(this, subMesh, effect, fillMode, batch, hardwareInstancedRendering, this._onBeforeDraw, this._internalMeshDataInfo._effectiveMaterial);\r\n\r\n        // Unbind\r\n        this._internalMeshDataInfo._effectiveMaterial.unbind();\r\n\r\n        for (const step of scene._afterRenderingMeshStage) {\r\n            step.action(this, subMesh, batch, effect);\r\n        }\r\n\r\n        if (this._internalMeshDataInfo._onAfterRenderObservable) {\r\n            this._internalMeshDataInfo._onAfterRenderObservable.notifyObservers(this);\r\n        }\r\n\r\n        if (oldCamera) {\r\n            oldCamera.maxZ = oldCameraMaxZ;\r\n            scene.updateTransformMatrix(true);\r\n        }\r\n\r\n        if (scene.performancePriority === ScenePerformancePriority.Aggressive && !instanceDataStorage.isFrozen) {\r\n            this._freeze();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    private _onBeforeDraw: (isInstance: boolean, world: Matrix, effectiveMaterial?: Material) => void;\r\n\r\n    /**\r\n     *   Renormalize the mesh and patch it up if there are no weights\r\n     *   Similar to normalization by adding the weights compute the reciprocal and multiply all elements, this wil ensure that everything adds to 1.\r\n     *   However in the case of zero weights then we set just a single influence to 1.\r\n     *   We check in the function for extra's present and if so we use the normalizeSkinWeightsWithExtras rather than the FourWeights version.\r\n     */\r\n    public cleanMatrixWeights(): void {\r\n        if (this.isVerticesDataPresent(VertexBuffer.MatricesWeightsKind)) {\r\n            if (this.isVerticesDataPresent(VertexBuffer.MatricesWeightsExtraKind)) {\r\n                this._normalizeSkinWeightsAndExtra();\r\n            } else {\r\n                this._normalizeSkinFourWeights();\r\n            }\r\n        }\r\n    }\r\n\r\n    // faster 4 weight version.\r\n    private _normalizeSkinFourWeights(): void {\r\n        const matricesWeights = <FloatArray>this.getVerticesData(VertexBuffer.MatricesWeightsKind);\r\n        const numWeights = matricesWeights.length;\r\n\r\n        for (let a = 0; a < numWeights; a += 4) {\r\n            // accumulate weights\r\n            const t = matricesWeights[a] + matricesWeights[a + 1] + matricesWeights[a + 2] + matricesWeights[a + 3];\r\n            // check for invalid weight and just set it to 1.\r\n            if (t === 0) {\r\n                matricesWeights[a] = 1;\r\n            } else {\r\n                // renormalize so everything adds to 1 use reciprocal\r\n                const recip = 1 / t;\r\n                matricesWeights[a] *= recip;\r\n                matricesWeights[a + 1] *= recip;\r\n                matricesWeights[a + 2] *= recip;\r\n                matricesWeights[a + 3] *= recip;\r\n            }\r\n        }\r\n        this.setVerticesData(VertexBuffer.MatricesWeightsKind, matricesWeights);\r\n    }\r\n    // handle special case of extra verts.  (in theory gltf can handle 12 influences)\r\n    private _normalizeSkinWeightsAndExtra(): void {\r\n        const matricesWeightsExtra = <FloatArray>this.getVerticesData(VertexBuffer.MatricesWeightsExtraKind);\r\n        const matricesWeights = <FloatArray>this.getVerticesData(VertexBuffer.MatricesWeightsKind);\r\n        const numWeights = matricesWeights.length;\r\n\r\n        for (let a = 0; a < numWeights; a += 4) {\r\n            // accumulate weights\r\n            let t = matricesWeights[a] + matricesWeights[a + 1] + matricesWeights[a + 2] + matricesWeights[a + 3];\r\n            t += matricesWeightsExtra[a] + matricesWeightsExtra[a + 1] + matricesWeightsExtra[a + 2] + matricesWeightsExtra[a + 3];\r\n            // check for invalid weight and just set it to 1.\r\n            if (t === 0) {\r\n                matricesWeights[a] = 1;\r\n            } else {\r\n                // renormalize so everything adds to 1 use reciprocal\r\n                const recip = 1 / t;\r\n                matricesWeights[a] *= recip;\r\n                matricesWeights[a + 1] *= recip;\r\n                matricesWeights[a + 2] *= recip;\r\n                matricesWeights[a + 3] *= recip;\r\n                // same goes for extras\r\n                matricesWeightsExtra[a] *= recip;\r\n                matricesWeightsExtra[a + 1] *= recip;\r\n                matricesWeightsExtra[a + 2] *= recip;\r\n                matricesWeightsExtra[a + 3] *= recip;\r\n            }\r\n        }\r\n        this.setVerticesData(VertexBuffer.MatricesWeightsKind, matricesWeights);\r\n        this.setVerticesData(VertexBuffer.MatricesWeightsKind, matricesWeightsExtra);\r\n    }\r\n\r\n    /**\r\n     * ValidateSkinning is used to determine that a mesh has valid skinning data along with skin metrics, if missing weights,\r\n     * or not normalized it is returned as invalid mesh the string can be used for console logs, or on screen messages to let\r\n     * the user know there was an issue with importing the mesh\r\n     * @returns a validation object with skinned, valid and report string\r\n     */\r\n    public validateSkinning(): { skinned: boolean; valid: boolean; report: string } {\r\n        const matricesWeightsExtra = <FloatArray>this.getVerticesData(VertexBuffer.MatricesWeightsExtraKind);\r\n        const matricesWeights = <FloatArray>this.getVerticesData(VertexBuffer.MatricesWeightsKind);\r\n        if (matricesWeights === null || this.skeleton == null) {\r\n            return { skinned: false, valid: true, report: \"not skinned\" };\r\n        }\r\n\r\n        const numWeights = matricesWeights.length;\r\n        let numberNotSorted: number = 0;\r\n        let missingWeights: number = 0;\r\n        let maxUsedWeights: number = 0;\r\n        let numberNotNormalized: number = 0;\r\n        const numInfluences: number = matricesWeightsExtra === null ? 4 : 8;\r\n        const usedWeightCounts = new Array<number>();\r\n        for (let a = 0; a <= numInfluences; a++) {\r\n            usedWeightCounts[a] = 0;\r\n        }\r\n        const toleranceEpsilon: number = 0.001;\r\n\r\n        for (let a = 0; a < numWeights; a += 4) {\r\n            let lastWeight: number = matricesWeights[a];\r\n            let t = lastWeight;\r\n            let usedWeights: number = t === 0 ? 0 : 1;\r\n\r\n            for (let b = 1; b < numInfluences; b++) {\r\n                const d = b < 4 ? matricesWeights[a + b] : matricesWeightsExtra[a + b - 4];\r\n                if (d > lastWeight) {\r\n                    numberNotSorted++;\r\n                }\r\n                if (d !== 0) {\r\n                    usedWeights++;\r\n                }\r\n                t += d;\r\n                lastWeight = d;\r\n            }\r\n            // count the buffer weights usage\r\n            usedWeightCounts[usedWeights]++;\r\n\r\n            // max influences\r\n            if (usedWeights > maxUsedWeights) {\r\n                maxUsedWeights = usedWeights;\r\n            }\r\n\r\n            // check for invalid weight and just set it to 1.\r\n            if (t === 0) {\r\n                missingWeights++;\r\n            } else {\r\n                // renormalize so everything adds to 1 use reciprocal\r\n                const recip = 1 / t;\r\n                let tolerance = 0;\r\n                for (let b = 0; b < numInfluences; b++) {\r\n                    if (b < 4) {\r\n                        tolerance += Math.abs(matricesWeights[a + b] - matricesWeights[a + b] * recip);\r\n                    } else {\r\n                        tolerance += Math.abs(matricesWeightsExtra[a + b - 4] - matricesWeightsExtra[a + b - 4] * recip);\r\n                    }\r\n                }\r\n                // arbitrary epsilon value for dictating not normalized\r\n                if (tolerance > toleranceEpsilon) {\r\n                    numberNotNormalized++;\r\n                }\r\n            }\r\n        }\r\n\r\n        // validate bone indices are in range of the skeleton\r\n        const numBones: number = this.skeleton.bones.length;\r\n        const matricesIndices = <FloatArray>this.getVerticesData(VertexBuffer.MatricesIndicesKind);\r\n        const matricesIndicesExtra = <FloatArray>this.getVerticesData(VertexBuffer.MatricesIndicesExtraKind);\r\n        let numBadBoneIndices: number = 0;\r\n        for (let a = 0; a < numWeights; a += 4) {\r\n            for (let b = 0; b < numInfluences; b++) {\r\n                const index = b < 4 ? matricesIndices[a + b] : matricesIndicesExtra[a + b - 4];\r\n                if (index >= numBones || index < 0) {\r\n                    numBadBoneIndices++;\r\n                }\r\n            }\r\n        }\r\n\r\n        // log mesh stats\r\n        const output =\r\n            \"Number of Weights = \" +\r\n            numWeights / 4 +\r\n            \"\\nMaximum influences = \" +\r\n            maxUsedWeights +\r\n            \"\\nMissing Weights = \" +\r\n            missingWeights +\r\n            \"\\nNot Sorted = \" +\r\n            numberNotSorted +\r\n            \"\\nNot Normalized = \" +\r\n            numberNotNormalized +\r\n            \"\\nWeightCounts = [\" +\r\n            usedWeightCounts +\r\n            \"]\" +\r\n            \"\\nNumber of bones = \" +\r\n            numBones +\r\n            \"\\nBad Bone Indices = \" +\r\n            numBadBoneIndices;\r\n\r\n        return { skinned: true, valid: missingWeights === 0 && numberNotNormalized === 0 && numBadBoneIndices === 0, report: output };\r\n    }\r\n\r\n    /** @internal */\r\n    public _checkDelayState(): Mesh {\r\n        const scene = this.getScene();\r\n        if (this._geometry) {\r\n            this._geometry.load(scene);\r\n        } else if (this.delayLoadState === Constants.DELAYLOADSTATE_NOTLOADED) {\r\n            this.delayLoadState = Constants.DELAYLOADSTATE_LOADING;\r\n\r\n            this._queueLoad(scene);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    private _queueLoad(scene: Scene): Mesh {\r\n        scene.addPendingData(this);\r\n\r\n        const getBinaryData = this.delayLoadingFile.indexOf(\".babylonbinarymeshdata\") !== -1;\r\n\r\n        Tools.LoadFile(\r\n            this.delayLoadingFile,\r\n            (data) => {\r\n                if (data instanceof ArrayBuffer) {\r\n                    this._delayLoadingFunction(data, this);\r\n                } else {\r\n                    this._delayLoadingFunction(JSON.parse(data), this);\r\n                }\r\n\r\n                this.instances.forEach((instance) => {\r\n                    instance.refreshBoundingInfo();\r\n                    instance._syncSubMeshes();\r\n                });\r\n\r\n                this.delayLoadState = Constants.DELAYLOADSTATE_LOADED;\r\n                scene.removePendingData(this);\r\n            },\r\n            () => {},\r\n            scene.offlineProvider,\r\n            getBinaryData\r\n        );\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns `true` if the mesh is within the frustum defined by the passed array of planes.\r\n     * A mesh is in the frustum if its bounding box intersects the frustum\r\n     * @param frustumPlanes defines the frustum to test\r\n     * @returns true if the mesh is in the frustum planes\r\n     */\r\n    public isInFrustum(frustumPlanes: Plane[]): boolean {\r\n        if (this.delayLoadState === Constants.DELAYLOADSTATE_LOADING) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.isInFrustum(frustumPlanes)) {\r\n            return false;\r\n        }\r\n\r\n        this._checkDelayState();\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Sets the mesh material by the material or multiMaterial `id` property\r\n     * @param id is a string identifying the material or the multiMaterial\r\n     * @returns the current mesh\r\n     */\r\n    public setMaterialById(id: string): Mesh {\r\n        const materials = this.getScene().materials;\r\n        let index: number;\r\n        for (index = materials.length - 1; index > -1; index--) {\r\n            if (materials[index].id === id) {\r\n                this.material = materials[index];\r\n                return this;\r\n            }\r\n        }\r\n\r\n        // Multi\r\n        const multiMaterials = this.getScene().multiMaterials;\r\n        for (index = multiMaterials.length - 1; index > -1; index--) {\r\n            if (multiMaterials[index].id === id) {\r\n                this.material = multiMaterials[index];\r\n                return this;\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns as a new array populated with the mesh material and/or skeleton, if any.\r\n     * @returns an array of IAnimatable\r\n     */\r\n    public getAnimatables(): IAnimatable[] {\r\n        const results = new Array<IAnimatable>();\r\n\r\n        if (this.material) {\r\n            results.push(this.material);\r\n        }\r\n\r\n        if (this.skeleton) {\r\n            results.push(this.skeleton);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Modifies the mesh geometry according to the passed transformation matrix.\r\n     * This method returns nothing, but it really modifies the mesh even if it's originally not set as updatable.\r\n     * The mesh normals are modified using the same transformation.\r\n     * Note that, under the hood, this method sets a new VertexBuffer each call.\r\n     * @param transform defines the transform matrix to use\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/transforms/center_origin/bakingTransforms\r\n     * @returns the current mesh\r\n     */\r\n    public bakeTransformIntoVertices(transform: Matrix): Mesh {\r\n        // Position\r\n        if (!this.isVerticesDataPresent(VertexBuffer.PositionKind)) {\r\n            return this;\r\n        }\r\n\r\n        const submeshes = this.subMeshes.splice(0);\r\n\r\n        this._resetPointsArrayCache();\r\n\r\n        let data = <FloatArray>this.getVerticesData(VertexBuffer.PositionKind);\r\n\r\n        const temp = Vector3.Zero();\r\n        let index: number;\r\n        for (index = 0; index < data.length; index += 3) {\r\n            Vector3.TransformCoordinatesFromFloatsToRef(data[index], data[index + 1], data[index + 2], transform, temp).toArray(data, index);\r\n        }\r\n\r\n        this.setVerticesData(VertexBuffer.PositionKind, data, (<VertexBuffer>this.getVertexBuffer(VertexBuffer.PositionKind)).isUpdatable());\r\n\r\n        // Normals\r\n        if (this.isVerticesDataPresent(VertexBuffer.NormalKind)) {\r\n            data = <FloatArray>this.getVerticesData(VertexBuffer.NormalKind);\r\n            for (index = 0; index < data.length; index += 3) {\r\n                Vector3.TransformNormalFromFloatsToRef(data[index], data[index + 1], data[index + 2], transform, temp)\r\n                    .normalize()\r\n                    .toArray(data, index);\r\n            }\r\n            this.setVerticesData(VertexBuffer.NormalKind, data, (<VertexBuffer>this.getVertexBuffer(VertexBuffer.NormalKind)).isUpdatable());\r\n        }\r\n\r\n        // flip faces?\r\n        if (transform.determinant() < 0) {\r\n            this.flipFaces();\r\n        }\r\n\r\n        // Restore submeshes\r\n        this.releaseSubMeshes();\r\n        this.subMeshes = submeshes;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Modifies the mesh geometry according to its own current World Matrix.\r\n     * The mesh World Matrix is then reset.\r\n     * This method returns nothing but really modifies the mesh even if it's originally not set as updatable.\r\n     * Note that, under the hood, this method sets a new VertexBuffer each call.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/transforms/center_origin/bakingTransforms\r\n     * @param bakeIndependentlyOfChildren indicates whether to preserve all child nodes' World Matrix during baking\r\n     * @returns the current mesh\r\n     */\r\n    public bakeCurrentTransformIntoVertices(bakeIndependentlyOfChildren: boolean = true): Mesh {\r\n        this.bakeTransformIntoVertices(this.computeWorldMatrix(true));\r\n        this.resetLocalMatrix(bakeIndependentlyOfChildren);\r\n        return this;\r\n    }\r\n\r\n    // Cache\r\n\r\n    /** @internal */\r\n    public get _positions(): Nullable<Vector3[]> {\r\n        if (this._internalAbstractMeshDataInfo._positions) {\r\n            return this._internalAbstractMeshDataInfo._positions;\r\n        }\r\n\r\n        if (this._geometry) {\r\n            return this._geometry._positions;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /** @internal */\r\n    public _resetPointsArrayCache(): Mesh {\r\n        if (this._geometry) {\r\n            this._geometry._resetPointsArrayCache();\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @internal */\r\n    public _generatePointsArray(): boolean {\r\n        if (this._geometry) {\r\n            return this._geometry._generatePointsArray();\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Mesh object generated from the current mesh properties.\r\n     * This method must not get confused with createInstance()\r\n     * @param name is a string, the name given to the new mesh\r\n     * @param newParent can be any Node object (default `null`)\r\n     * @param doNotCloneChildren allows/denies the recursive cloning of the original mesh children if any (default `false`)\r\n     * @param clonePhysicsImpostor allows/denies the cloning in the same time of the original mesh `body` used by the physics engine, if any (default `true`)\r\n     * @returns a new mesh\r\n     */\r\n    public clone(name: string = \"\", newParent: Nullable<Node> = null, doNotCloneChildren?: boolean, clonePhysicsImpostor: boolean = true): Mesh {\r\n        return new Mesh(name, this.getScene(), newParent, this, doNotCloneChildren, clonePhysicsImpostor);\r\n    }\r\n\r\n    /**\r\n     * Releases resources associated with this mesh.\r\n     * @param doNotRecurse Set to true to not recurse into each children (recurse into each children by default)\r\n     * @param disposeMaterialAndTextures Set to true to also dispose referenced materials and textures (false by default)\r\n     */\r\n    public dispose(doNotRecurse?: boolean, disposeMaterialAndTextures = false): void {\r\n        this.morphTargetManager = null;\r\n\r\n        if (this._geometry) {\r\n            this._geometry.releaseForMesh(this, true);\r\n        }\r\n\r\n        const internalDataInfo = this._internalMeshDataInfo;\r\n\r\n        if (internalDataInfo._onBeforeDrawObservable) {\r\n            internalDataInfo._onBeforeDrawObservable.clear();\r\n        }\r\n\r\n        if (internalDataInfo._onBeforeBindObservable) {\r\n            internalDataInfo._onBeforeBindObservable.clear();\r\n        }\r\n\r\n        if (internalDataInfo._onBeforeRenderObservable) {\r\n            internalDataInfo._onBeforeRenderObservable.clear();\r\n        }\r\n\r\n        if (internalDataInfo._onAfterRenderObservable) {\r\n            internalDataInfo._onAfterRenderObservable.clear();\r\n        }\r\n\r\n        if (internalDataInfo._onBetweenPassObservable) {\r\n            internalDataInfo._onBetweenPassObservable.clear();\r\n        }\r\n\r\n        // Sources\r\n        if (this._scene.useClonedMeshMap) {\r\n            if (internalDataInfo.meshMap) {\r\n                for (const uniqueId in internalDataInfo.meshMap) {\r\n                    const mesh = internalDataInfo.meshMap[uniqueId];\r\n                    if (mesh) {\r\n                        mesh._internalMeshDataInfo._source = null;\r\n                        internalDataInfo.meshMap[uniqueId] = undefined;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (internalDataInfo._source && internalDataInfo._source._internalMeshDataInfo.meshMap) {\r\n                internalDataInfo._source._internalMeshDataInfo.meshMap[this.uniqueId] = undefined;\r\n            }\r\n        } else {\r\n            const meshes = this.getScene().meshes;\r\n            for (const abstractMesh of meshes) {\r\n                const mesh = abstractMesh as Mesh;\r\n                if (mesh._internalMeshDataInfo && mesh._internalMeshDataInfo._source && mesh._internalMeshDataInfo._source === this) {\r\n                    mesh._internalMeshDataInfo._source = null;\r\n                }\r\n            }\r\n        }\r\n\r\n        internalDataInfo._source = null;\r\n        this._instanceDataStorage.visibleInstances = {};\r\n\r\n        // Instances\r\n        this._disposeInstanceSpecificData();\r\n\r\n        // Thin instances\r\n        this._disposeThinInstanceSpecificData();\r\n\r\n        if (this._internalMeshDataInfo._checkReadinessObserver) {\r\n            this._scene.onBeforeRenderObservable.remove(this._internalMeshDataInfo._checkReadinessObserver);\r\n        }\r\n\r\n        super.dispose(doNotRecurse, disposeMaterialAndTextures);\r\n    }\r\n\r\n    /** @internal */\r\n    public _disposeInstanceSpecificData() {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @internal */\r\n    public _disposeThinInstanceSpecificData() {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @internal */\r\n    public _invalidateInstanceVertexArrayObject() {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Modifies the mesh geometry according to a displacement map.\r\n     * A displacement map is a colored image. Each pixel color value (actually a gradient computed from red, green, blue values) will give the displacement to apply to each mesh vertex.\r\n     * The mesh must be set as updatable. Its internal geometry is directly modified, no new buffer are allocated.\r\n     * @param url is a string, the URL from the image file is to be downloaded.\r\n     * @param minHeight is the lower limit of the displacement.\r\n     * @param maxHeight is the upper limit of the displacement.\r\n     * @param onSuccess is an optional Javascript function to be called just after the mesh is modified. It is passed the modified mesh and must return nothing.\r\n     * @param uvOffset is an optional vector2 used to offset UV.\r\n     * @param uvScale is an optional vector2 used to scale UV.\r\n     * @param forceUpdate defines whether or not to force an update of the generated buffers. This is useful to apply on a deserialized model for instance.\r\n     * @returns the Mesh.\r\n     */\r\n    public applyDisplacementMap(\r\n        url: string,\r\n        minHeight: number,\r\n        maxHeight: number,\r\n        onSuccess?: (mesh: Mesh) => void,\r\n        uvOffset?: Vector2,\r\n        uvScale?: Vector2,\r\n        forceUpdate = false\r\n    ): Mesh {\r\n        const scene = this.getScene();\r\n\r\n        const onload = (img: HTMLImageElement | ImageBitmap) => {\r\n            // Getting height map data\r\n            const heightMapWidth = img.width;\r\n            const heightMapHeight = img.height;\r\n            const canvas = this.getEngine().createCanvas(heightMapWidth, heightMapHeight);\r\n            const context = <CanvasRenderingContext2D>canvas.getContext(\"2d\");\r\n\r\n            context.drawImage(img, 0, 0);\r\n\r\n            // Create VertexData from map data\r\n            //Cast is due to wrong definition in lib.d.ts from ts 1.3 - https://github.com/Microsoft/TypeScript/issues/949\r\n            const buffer = <Uint8Array>(<any>context.getImageData(0, 0, heightMapWidth, heightMapHeight).data);\r\n\r\n            this.applyDisplacementMapFromBuffer(buffer, heightMapWidth, heightMapHeight, minHeight, maxHeight, uvOffset, uvScale, forceUpdate);\r\n            //execute success callback, if set\r\n            if (onSuccess) {\r\n                onSuccess(this);\r\n            }\r\n        };\r\n\r\n        Tools.LoadImage(url, onload, () => {}, scene.offlineProvider);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Modifies the mesh geometry according to a displacementMap buffer.\r\n     * A displacement map is a colored image. Each pixel color value (actually a gradient computed from red, green, blue values) will give the displacement to apply to each mesh vertex.\r\n     * The mesh must be set as updatable. Its internal geometry is directly modified, no new buffer are allocated.\r\n     * @param buffer is a `Uint8Array` buffer containing series of `Uint8` lower than 255, the red, green, blue and alpha values of each successive pixel.\r\n     * @param heightMapWidth is the width of the buffer image.\r\n     * @param heightMapHeight is the height of the buffer image.\r\n     * @param minHeight is the lower limit of the displacement.\r\n     * @param maxHeight is the upper limit of the displacement.\r\n     * @param uvOffset is an optional vector2 used to offset UV.\r\n     * @param uvScale is an optional vector2 used to scale UV.\r\n     * @param forceUpdate defines whether or not to force an update of the generated buffers. This is useful to apply on a deserialized model for instance.\r\n     * @returns the Mesh.\r\n     */\r\n    public applyDisplacementMapFromBuffer(\r\n        buffer: Uint8Array,\r\n        heightMapWidth: number,\r\n        heightMapHeight: number,\r\n        minHeight: number,\r\n        maxHeight: number,\r\n        uvOffset?: Vector2,\r\n        uvScale?: Vector2,\r\n        forceUpdate = false\r\n    ): Mesh {\r\n        if (!this.isVerticesDataPresent(VertexBuffer.PositionKind) || !this.isVerticesDataPresent(VertexBuffer.NormalKind) || !this.isVerticesDataPresent(VertexBuffer.UVKind)) {\r\n            Logger.Warn(\"Cannot call applyDisplacementMap: Given mesh is not complete. Position, Normal or UV are missing\");\r\n            return this;\r\n        }\r\n\r\n        const positions = <FloatArray>this.getVerticesData(VertexBuffer.PositionKind, true, true);\r\n        const normals = <FloatArray>this.getVerticesData(VertexBuffer.NormalKind);\r\n        const uvs = <number[]>this.getVerticesData(VertexBuffer.UVKind);\r\n        let position = Vector3.Zero();\r\n        const normal = Vector3.Zero();\r\n        const uv = Vector2.Zero();\r\n\r\n        uvOffset = uvOffset || Vector2.Zero();\r\n        uvScale = uvScale || new Vector2(1, 1);\r\n\r\n        for (let index = 0; index < positions.length; index += 3) {\r\n            Vector3.FromArrayToRef(positions, index, position);\r\n            Vector3.FromArrayToRef(normals, index, normal);\r\n            Vector2.FromArrayToRef(uvs, (index / 3) * 2, uv);\r\n\r\n            // Compute height\r\n            const u = (Math.abs(uv.x * uvScale.x + (uvOffset.x % 1)) * (heightMapWidth - 1)) % heightMapWidth | 0;\r\n            const v = (Math.abs(uv.y * uvScale.y + (uvOffset.y % 1)) * (heightMapHeight - 1)) % heightMapHeight | 0;\r\n\r\n            const pos = (u + v * heightMapWidth) * 4;\r\n            const r = buffer[pos] / 255.0;\r\n            const g = buffer[pos + 1] / 255.0;\r\n            const b = buffer[pos + 2] / 255.0;\r\n\r\n            const gradient = r * 0.3 + g * 0.59 + b * 0.11;\r\n\r\n            normal.normalize();\r\n            normal.scaleInPlace(minHeight + (maxHeight - minHeight) * gradient);\r\n            position = position.add(normal);\r\n\r\n            position.toArray(positions, index);\r\n        }\r\n\r\n        VertexData.ComputeNormals(positions, this.getIndices(), normals);\r\n\r\n        if (forceUpdate) {\r\n            this.setVerticesData(VertexBuffer.PositionKind, positions);\r\n            this.setVerticesData(VertexBuffer.NormalKind, normals);\r\n            this.setVerticesData(VertexBuffer.UVKind, uvs);\r\n        } else {\r\n            this.updateVerticesData(VertexBuffer.PositionKind, positions);\r\n            this.updateVerticesData(VertexBuffer.NormalKind, normals);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    private _getFlattenedNormals(indices: IndicesArray, positions: FloatArray): Float32Array {\r\n        const normals = new Float32Array(indices.length * 3);\r\n        let normalsCount = 0;\r\n\r\n        // Decide if normals should be flipped\r\n        const flipNormalGeneration =\r\n            this.overrideMaterialSideOrientation ===\r\n            (this._scene.useRightHandedSystem ? Constants.MATERIAL_CounterClockWiseSideOrientation : Constants.MATERIAL_ClockWiseSideOrientation);\r\n\r\n        // Generate new normals\r\n        for (let index = 0; index < indices.length; index += 3) {\r\n            const p1 = Vector3.FromArray(positions, indices[index] * 3);\r\n            const p2 = Vector3.FromArray(positions, indices[index + 1] * 3);\r\n            const p3 = Vector3.FromArray(positions, indices[index + 2] * 3);\r\n\r\n            const p1p2 = p1.subtract(p2);\r\n            const p3p2 = p3.subtract(p2);\r\n\r\n            const normal = Vector3.Normalize(Vector3.Cross(p1p2, p3p2));\r\n            if (flipNormalGeneration) {\r\n                normal.scaleInPlace(-1);\r\n            }\r\n\r\n            // Store same normals for every vertex\r\n            for (let localIndex = 0; localIndex < 3; localIndex++) {\r\n                normals[normalsCount++] = normal.x;\r\n                normals[normalsCount++] = normal.y;\r\n                normals[normalsCount++] = normal.z;\r\n            }\r\n        }\r\n\r\n        return normals;\r\n    }\r\n\r\n    private _convertToUnIndexedMesh(flattenNormals: boolean = false): Mesh {\r\n        const kinds = this.getVerticesDataKinds();\r\n        const indices = this.getIndices()!;\r\n        const data: { [kind: string]: FloatArray } = {};\r\n\r\n        const separateVertices = (data: FloatArray, stride: number): Float32Array => {\r\n            const newData = new Float32Array(indices.length * stride);\r\n            let count = 0;\r\n            for (let index = 0; index < indices.length; index++) {\r\n                for (let offset = 0; offset < stride; offset++) {\r\n                    newData[count++] = data[indices[index] * stride + offset];\r\n                }\r\n            }\r\n            return newData;\r\n        };\r\n\r\n        // Save previous submeshes\r\n        const previousSubmeshes = this.geometry ? this.subMeshes.slice(0) : [];\r\n\r\n        // Cache vertex data\r\n        for (const kind of kinds) {\r\n            data[kind] = this.getVerticesData(kind)!;\r\n        }\r\n\r\n        // Update vertex data\r\n        for (const kind of kinds) {\r\n            const vertexBuffer = this.getVertexBuffer(kind)!;\r\n            const stride = vertexBuffer.getStrideSize();\r\n\r\n            if (flattenNormals && kind === VertexBuffer.NormalKind) {\r\n                const normals = this._getFlattenedNormals(indices, data[VertexBuffer.PositionKind]);\r\n                this.setVerticesData(VertexBuffer.NormalKind, normals, vertexBuffer.isUpdatable(), stride);\r\n            } else {\r\n                this.setVerticesData(kind, separateVertices(data[kind], stride), vertexBuffer.isUpdatable(), stride);\r\n            }\r\n        }\r\n\r\n        // Update morph targets\r\n        if (this.morphTargetManager) {\r\n            for (let targetIndex = 0; targetIndex < this.morphTargetManager.numTargets; targetIndex++) {\r\n                const target = this.morphTargetManager.getTarget(targetIndex);\r\n\r\n                const positions = target.getPositions()!;\r\n                target.setPositions(separateVertices(positions, 3));\r\n\r\n                const normals = target.getNormals();\r\n                if (normals) {\r\n                    target.setNormals(flattenNormals ? this._getFlattenedNormals(indices, positions) : separateVertices(normals, 3));\r\n                }\r\n\r\n                const tangents = target.getTangents();\r\n                if (tangents) {\r\n                    target.setTangents(separateVertices(tangents, 3));\r\n                }\r\n\r\n                const uvs = target.getUVs();\r\n                if (uvs) {\r\n                    target.setUVs(separateVertices(uvs, 2));\r\n                }\r\n            }\r\n            this.morphTargetManager.synchronize();\r\n        }\r\n\r\n        // Update indices\r\n        for (let index = 0; index < indices.length; index++) {\r\n            indices[index] = index;\r\n        }\r\n        this.setIndices(indices);\r\n\r\n        this._unIndexed = true;\r\n\r\n        // Update submeshes\r\n        this.releaseSubMeshes();\r\n        for (const previousOne of previousSubmeshes) {\r\n            SubMesh.AddToMesh(previousOne.materialIndex, previousOne.indexStart, previousOne.indexCount, previousOne.indexStart, previousOne.indexCount, this);\r\n        }\r\n\r\n        this.synchronizeInstances();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Modify the mesh to get a flat shading rendering.\r\n     * This means each mesh facet will then have its own normals. Usually new vertices are added in the mesh geometry to get this result.\r\n     * Warning : the mesh is really modified even if not set originally as updatable and, under the hood, a new VertexBuffer is allocated.\r\n     * @returns current mesh\r\n     */\r\n    public convertToFlatShadedMesh(): Mesh {\r\n        return this._convertToUnIndexedMesh(true);\r\n    }\r\n\r\n    /**\r\n     * This method removes all the mesh indices and add new vertices (duplication) in order to unfold facets into buffers.\r\n     * In other words, more vertices, no more indices and a single bigger VBO.\r\n     * The mesh is really modified even if not set originally as updatable. Under the hood, a new VertexBuffer is allocated.\r\n     * @returns current mesh\r\n     */\r\n    public convertToUnIndexedMesh(): Mesh {\r\n        return this._convertToUnIndexedMesh();\r\n    }\r\n\r\n    /**\r\n     * Inverses facet orientations.\r\n     * Warning : the mesh is really modified even if not set originally as updatable. A new VertexBuffer is created under the hood each call.\r\n     * @param flipNormals will also inverts the normals\r\n     * @returns current mesh\r\n     */\r\n    public flipFaces(flipNormals: boolean = false): Mesh {\r\n        const vertex_data = VertexData.ExtractFromMesh(this);\r\n        let i: number;\r\n        if (flipNormals && this.isVerticesDataPresent(VertexBuffer.NormalKind) && vertex_data.normals) {\r\n            for (i = 0; i < vertex_data.normals.length; i++) {\r\n                vertex_data.normals[i] *= -1;\r\n            }\r\n        }\r\n\r\n        if (vertex_data.indices) {\r\n            let temp;\r\n            for (i = 0; i < vertex_data.indices.length; i += 3) {\r\n                // reassign indices\r\n                temp = vertex_data.indices[i + 1];\r\n                vertex_data.indices[i + 1] = vertex_data.indices[i + 2];\r\n                vertex_data.indices[i + 2] = temp;\r\n            }\r\n        }\r\n\r\n        vertex_data.applyToMesh(this, this.isVertexBufferUpdatable(VertexBuffer.PositionKind));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Increase the number of facets and hence vertices in a mesh\r\n     * Vertex normals are interpolated from existing vertex normals\r\n     * Warning : the mesh is really modified even if not set originally as updatable. A new VertexBuffer is created under the hood each call.\r\n     * @param numberPerEdge the number of new vertices to add to each edge of a facet, optional default 1\r\n     */\r\n    public increaseVertices(numberPerEdge: number = 1): void {\r\n        const vertex_data = VertexData.ExtractFromMesh(this);\r\n        const currentIndices = vertex_data.indices && !Array.isArray(vertex_data.indices) && Array.from ? Array.from(vertex_data.indices) : vertex_data.indices;\r\n        const positions = vertex_data.positions && !Array.isArray(vertex_data.positions) && Array.from ? Array.from(vertex_data.positions) : vertex_data.positions;\r\n        const uvs = vertex_data.uvs && !Array.isArray(vertex_data.uvs) && Array.from ? Array.from(vertex_data.uvs) : vertex_data.uvs;\r\n        const normals = vertex_data.normals && !Array.isArray(vertex_data.normals) && Array.from ? Array.from(vertex_data.normals) : vertex_data.normals;\r\n\r\n        if (!currentIndices || !positions) {\r\n            Logger.Warn(\"Couldn't increase number of vertices : VertexData must contain at least indices and positions\");\r\n        } else {\r\n            vertex_data.indices = currentIndices;\r\n            vertex_data.positions = positions;\r\n            if (uvs) {\r\n                vertex_data.uvs = uvs;\r\n            }\r\n            if (normals) {\r\n                vertex_data.normals = normals;\r\n            }\r\n\r\n            const segments: number = numberPerEdge + 1; //segments per current facet edge, become sides of new facets\r\n            const tempIndices: Array<Array<number>> = new Array();\r\n            for (let i = 0; i < segments + 1; i++) {\r\n                tempIndices[i] = new Array();\r\n            }\r\n            let a: number; //vertex index of one end of a side\r\n            let b: number; //vertex index of other end of the side\r\n            const deltaPosition: Vector3 = new Vector3(0, 0, 0);\r\n            const deltaNormal: Vector3 = new Vector3(0, 0, 0);\r\n            const deltaUV: Vector2 = new Vector2(0, 0);\r\n            const indices: number[] = new Array();\r\n            const vertexIndex: number[] = new Array();\r\n            const side: Array<Array<Array<number>>> = new Array();\r\n            let len: number;\r\n            let positionPtr: number = positions.length;\r\n            let uvPtr: number;\r\n            if (uvs) {\r\n                uvPtr = uvs.length;\r\n            }\r\n            let normalsPtr: number;\r\n            if (normals) {\r\n                normalsPtr = normals.length;\r\n            }\r\n\r\n            for (let i = 0; i < currentIndices.length; i += 3) {\r\n                vertexIndex[0] = currentIndices[i];\r\n                vertexIndex[1] = currentIndices[i + 1];\r\n                vertexIndex[2] = currentIndices[i + 2];\r\n                for (let j = 0; j < 3; j++) {\r\n                    a = vertexIndex[j];\r\n                    b = vertexIndex[(j + 1) % 3];\r\n                    if (side[a] === undefined && side[b] === undefined) {\r\n                        side[a] = new Array();\r\n                        side[b] = new Array();\r\n                    } else {\r\n                        if (side[a] === undefined) {\r\n                            side[a] = new Array();\r\n                        }\r\n                        if (side[b] === undefined) {\r\n                            side[b] = new Array();\r\n                        }\r\n                    }\r\n                    if (side[a][b] === undefined && side[b][a] === undefined) {\r\n                        side[a][b] = [];\r\n                        deltaPosition.x = (positions[3 * b] - positions[3 * a]) / segments;\r\n                        deltaPosition.y = (positions[3 * b + 1] - positions[3 * a + 1]) / segments;\r\n                        deltaPosition.z = (positions[3 * b + 2] - positions[3 * a + 2]) / segments;\r\n                        if (normals) {\r\n                            deltaNormal.x = (normals[3 * b] - normals[3 * a]) / segments;\r\n                            deltaNormal.y = (normals[3 * b + 1] - normals[3 * a + 1]) / segments;\r\n                            deltaNormal.z = (normals[3 * b + 2] - normals[3 * a + 2]) / segments;\r\n                        }\r\n                        if (uvs) {\r\n                            deltaUV.x = (uvs[2 * b] - uvs[2 * a]) / segments;\r\n                            deltaUV.y = (uvs[2 * b + 1] - uvs[2 * a + 1]) / segments;\r\n                        }\r\n                        side[a][b].push(a);\r\n                        for (let k = 1; k < segments; k++) {\r\n                            side[a][b].push(positions.length / 3);\r\n                            positions[positionPtr++] = positions[3 * a] + k * deltaPosition.x;\r\n                            positions[positionPtr++] = positions[3 * a + 1] + k * deltaPosition.y;\r\n                            positions[positionPtr++] = positions[3 * a + 2] + k * deltaPosition.z;\r\n                            if (normals) {\r\n                                normals[normalsPtr!++] = normals[3 * a] + k * deltaNormal.x;\r\n                                normals[normalsPtr!++] = normals[3 * a + 1] + k * deltaNormal.y;\r\n                                normals[normalsPtr!++] = normals[3 * a + 2] + k * deltaNormal.z;\r\n                            }\r\n                            if (uvs) {\r\n                                uvs[uvPtr!++] = uvs[2 * a] + k * deltaUV.x;\r\n                                uvs[uvPtr!++] = uvs[2 * a + 1] + k * deltaUV.y;\r\n                            }\r\n                        }\r\n                        side[a][b].push(b);\r\n                        side[b][a] = new Array();\r\n                        len = side[a][b].length;\r\n                        for (let idx = 0; idx < len; idx++) {\r\n                            side[b][a][idx] = side[a][b][len - 1 - idx];\r\n                        }\r\n                    }\r\n                }\r\n                //Calculate positions, normals and uvs of new internal vertices\r\n                tempIndices[0][0] = currentIndices[i];\r\n                tempIndices[1][0] = side[currentIndices[i]][currentIndices[i + 1]][1];\r\n                tempIndices[1][1] = side[currentIndices[i]][currentIndices[i + 2]][1];\r\n                for (let k = 2; k < segments; k++) {\r\n                    tempIndices[k][0] = side[currentIndices[i]][currentIndices[i + 1]][k];\r\n                    tempIndices[k][k] = side[currentIndices[i]][currentIndices[i + 2]][k];\r\n                    deltaPosition.x = (positions[3 * tempIndices[k][k]] - positions[3 * tempIndices[k][0]]) / k;\r\n                    deltaPosition.y = (positions[3 * tempIndices[k][k] + 1] - positions[3 * tempIndices[k][0] + 1]) / k;\r\n                    deltaPosition.z = (positions[3 * tempIndices[k][k] + 2] - positions[3 * tempIndices[k][0] + 2]) / k;\r\n                    if (normals) {\r\n                        deltaNormal.x = (normals[3 * tempIndices[k][k]] - normals[3 * tempIndices[k][0]]) / k;\r\n                        deltaNormal.y = (normals[3 * tempIndices[k][k] + 1] - normals[3 * tempIndices[k][0] + 1]) / k;\r\n                        deltaNormal.z = (normals[3 * tempIndices[k][k] + 2] - normals[3 * tempIndices[k][0] + 2]) / k;\r\n                    }\r\n                    if (uvs) {\r\n                        deltaUV.x = (uvs[2 * tempIndices[k][k]] - uvs[2 * tempIndices[k][0]]) / k;\r\n                        deltaUV.y = (uvs[2 * tempIndices[k][k] + 1] - uvs[2 * tempIndices[k][0] + 1]) / k;\r\n                    }\r\n                    for (let j = 1; j < k; j++) {\r\n                        tempIndices[k][j] = positions.length / 3;\r\n                        positions[positionPtr++] = positions[3 * tempIndices[k][0]] + j * deltaPosition.x;\r\n                        positions[positionPtr++] = positions[3 * tempIndices[k][0] + 1] + j * deltaPosition.y;\r\n                        positions[positionPtr++] = positions[3 * tempIndices[k][0] + 2] + j * deltaPosition.z;\r\n                        if (normals) {\r\n                            normals[normalsPtr!++] = normals[3 * tempIndices[k][0]] + j * deltaNormal.x;\r\n                            normals[normalsPtr!++] = normals[3 * tempIndices[k][0] + 1] + j * deltaNormal.y;\r\n                            normals[normalsPtr!++] = normals[3 * tempIndices[k][0] + 2] + j * deltaNormal.z;\r\n                        }\r\n                        if (uvs) {\r\n                            uvs[uvPtr!++] = uvs[2 * tempIndices[k][0]] + j * deltaUV.x;\r\n                            uvs[uvPtr!++] = uvs[2 * tempIndices[k][0] + 1] + j * deltaUV.y;\r\n                        }\r\n                    }\r\n                }\r\n                tempIndices[segments] = side[currentIndices[i + 1]][currentIndices[i + 2]];\r\n\r\n                // reform indices\r\n                indices.push(tempIndices[0][0], tempIndices[1][0], tempIndices[1][1]);\r\n                for (let k = 1; k < segments; k++) {\r\n                    let j: number;\r\n                    for (j = 0; j < k; j++) {\r\n                        indices.push(tempIndices[k][j], tempIndices[k + 1][j], tempIndices[k + 1][j + 1]);\r\n                        indices.push(tempIndices[k][j], tempIndices[k + 1][j + 1], tempIndices[k][j + 1]);\r\n                    }\r\n                    indices.push(tempIndices[k][j], tempIndices[k + 1][j], tempIndices[k + 1][j + 1]);\r\n                }\r\n            }\r\n\r\n            vertex_data.indices = indices;\r\n            vertex_data.applyToMesh(this, this.isVertexBufferUpdatable(VertexBuffer.PositionKind));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Force adjacent facets to share vertices and remove any facets that have all vertices in a line\r\n     * This will undo any application of covertToFlatShadedMesh\r\n     * Warning : the mesh is really modified even if not set originally as updatable. A new VertexBuffer is created under the hood each call.\r\n     */\r\n    public forceSharedVertices(): void {\r\n        const vertex_data = VertexData.ExtractFromMesh(this);\r\n        const currentUVs = vertex_data.uvs;\r\n        const currentIndices = vertex_data.indices;\r\n        const currentPositions = vertex_data.positions;\r\n        const currentColors = vertex_data.colors;\r\n        const currentMatrixIndices = vertex_data.matricesIndices;\r\n        const currentMatrixWeights = vertex_data.matricesWeights;\r\n        const currentMatrixIndicesExtra = vertex_data.matricesIndicesExtra;\r\n        const currentMatrixWeightsExtra = vertex_data.matricesWeightsExtra;\r\n\r\n        if (currentIndices === void 0 || currentPositions === void 0 || currentIndices === null || currentPositions === null) {\r\n            Logger.Warn(\"VertexData contains empty entries\");\r\n        } else {\r\n            const positions: Array<number> = new Array();\r\n            const indices: Array<number> = new Array();\r\n            const uvs: Array<number> = new Array();\r\n            const colors: Array<number> = new Array();\r\n            const matrixIndices: Array<number> = new Array();\r\n            const matrixWeights: Array<number> = new Array();\r\n            const matrixIndicesExtra: Array<number> = new Array();\r\n            const matrixWeightsExtra: Array<number> = new Array();\r\n            let pstring: Array<string> = new Array(); //lists facet vertex positions (a,b,c) as string \"a|b|c\"\r\n\r\n            let indexPtr: number = 0; // pointer to next available index value\r\n            const uniquePositions: { [key: string]: number } = {}; // unique vertex positions\r\n            let ptr: number; // pointer to element in uniquePositions\r\n            let facet: Array<number>;\r\n\r\n            for (let i = 0; i < currentIndices.length; i += 3) {\r\n                facet = [currentIndices[i], currentIndices[i + 1], currentIndices[i + 2]]; //facet vertex indices\r\n                pstring = new Array();\r\n                for (let j = 0; j < 3; j++) {\r\n                    pstring[j] = \"\";\r\n                    for (let k = 0; k < 3; k++) {\r\n                        //small values make 0\r\n                        if (Math.abs(currentPositions[3 * facet[j] + k]) < 0.00000001) {\r\n                            currentPositions[3 * facet[j] + k] = 0;\r\n                        }\r\n                        pstring[j] += currentPositions[3 * facet[j] + k] + \"|\";\r\n                    }\r\n                }\r\n                //check facet vertices to see that none are repeated\r\n                // do not process any facet that has a repeated vertex, ie is a line\r\n                if (!(pstring[0] == pstring[1] || pstring[0] == pstring[2] || pstring[1] == pstring[2])) {\r\n                    //for each facet position check if already listed in uniquePositions\r\n                    // if not listed add to uniquePositions and set index pointer\r\n                    // if listed use its index in uniquePositions and new index pointer\r\n                    for (let j = 0; j < 3; j++) {\r\n                        ptr = uniquePositions[pstring[j]];\r\n                        if (ptr === undefined) {\r\n                            uniquePositions[pstring[j]] = indexPtr;\r\n                            ptr = indexPtr++;\r\n                            //not listed so add individual x, y, z coordinates to positions\r\n                            for (let k = 0; k < 3; k++) {\r\n                                positions.push(currentPositions[3 * facet[j] + k]);\r\n                            }\r\n                            if (currentColors !== null && currentColors !== void 0) {\r\n                                for (let k = 0; k < 4; k++) {\r\n                                    colors.push(currentColors[4 * facet[j] + k]);\r\n                                }\r\n                            }\r\n                            if (currentUVs !== null && currentUVs !== void 0) {\r\n                                for (let k = 0; k < 2; k++) {\r\n                                    uvs.push(currentUVs[2 * facet[j] + k]);\r\n                                }\r\n                            }\r\n                            if (currentMatrixIndices !== null && currentMatrixIndices !== void 0) {\r\n                                for (let k = 0; k < 4; k++) {\r\n                                    matrixIndices.push(currentMatrixIndices[4 * facet[j] + k]);\r\n                                }\r\n                            }\r\n                            if (currentMatrixWeights !== null && currentMatrixWeights !== void 0) {\r\n                                for (let k = 0; k < 4; k++) {\r\n                                    matrixWeights.push(currentMatrixWeights[4 * facet[j] + k]);\r\n                                }\r\n                            }\r\n                            if (currentMatrixIndicesExtra !== null && currentMatrixIndicesExtra !== void 0) {\r\n                                for (let k = 0; k < 4; k++) {\r\n                                    matrixIndicesExtra.push(currentMatrixIndicesExtra[4 * facet[j] + k]);\r\n                                }\r\n                            }\r\n                            if (currentMatrixWeightsExtra !== null && currentMatrixWeightsExtra !== void 0) {\r\n                                for (let k = 0; k < 4; k++) {\r\n                                    matrixWeightsExtra.push(currentMatrixWeightsExtra[4 * facet[j] + k]);\r\n                                }\r\n                            }\r\n                        }\r\n                        // add new index pointer to indices array\r\n                        indices.push(ptr);\r\n                    }\r\n                }\r\n            }\r\n\r\n            const normals: Array<number> = new Array();\r\n            VertexData.ComputeNormals(positions, indices, normals);\r\n\r\n            //create new vertex data object and update\r\n            vertex_data.positions = positions;\r\n            vertex_data.indices = indices;\r\n            vertex_data.normals = normals;\r\n            if (currentUVs !== null && currentUVs !== void 0) {\r\n                vertex_data.uvs = uvs;\r\n            }\r\n            if (currentColors !== null && currentColors !== void 0) {\r\n                vertex_data.colors = colors;\r\n            }\r\n            if (currentMatrixIndices !== null && currentMatrixIndices !== void 0) {\r\n                vertex_data.matricesIndices = matrixIndices;\r\n            }\r\n            if (currentMatrixWeights !== null && currentMatrixWeights !== void 0) {\r\n                vertex_data.matricesWeights = matrixWeights;\r\n            }\r\n            if (currentMatrixIndicesExtra !== null && currentMatrixIndicesExtra !== void 0) {\r\n                vertex_data.matricesIndicesExtra = matrixIndicesExtra;\r\n            }\r\n            if (currentMatrixWeights !== null && currentMatrixWeights !== void 0) {\r\n                vertex_data.matricesWeightsExtra = matrixWeightsExtra;\r\n            }\r\n\r\n            vertex_data.applyToMesh(this, this.isVertexBufferUpdatable(VertexBuffer.PositionKind));\r\n        }\r\n    }\r\n\r\n    // Instances\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/naming-convention\r\n    public static _instancedMeshFactory(name: string, mesh: Mesh): InstancedMesh {\r\n        throw _WarnImport(\"InstancedMesh\");\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public static _PhysicsImpostorParser(scene: Scene, physicObject: IPhysicsEnabledObject, jsonObject: any): PhysicsImpostor {\r\n        throw _WarnImport(\"PhysicsImpostor\");\r\n    }\r\n\r\n    /**\r\n     * Creates a new InstancedMesh object from the mesh model.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/copies/instances\r\n     * @param name defines the name of the new instance\r\n     * @returns a new InstancedMesh\r\n     */\r\n    public createInstance(name: string): InstancedMesh {\r\n        return Mesh._instancedMeshFactory(name, this);\r\n    }\r\n\r\n    /**\r\n     * Synchronises all the mesh instance submeshes to the current mesh submeshes, if any.\r\n     * After this call, all the mesh instances have the same submeshes than the current mesh.\r\n     * @returns the current mesh\r\n     */\r\n    public synchronizeInstances(): Mesh {\r\n        for (let instanceIndex = 0; instanceIndex < this.instances.length; instanceIndex++) {\r\n            const instance = this.instances[instanceIndex];\r\n            instance._syncSubMeshes();\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Optimization of the mesh's indices, in case a mesh has duplicated vertices.\r\n     * The function will only reorder the indices and will not remove unused vertices to avoid problems with submeshes.\r\n     * This should be used together with the simplification to avoid disappearing triangles.\r\n     * @param successCallback an optional success callback to be called after the optimization finished.\r\n     * @returns the current mesh\r\n     */\r\n    public optimizeIndices(successCallback?: (mesh?: Mesh) => void): Mesh {\r\n        const indices = <IndicesArray>this.getIndices();\r\n        const positions = this.getVerticesData(VertexBuffer.PositionKind);\r\n\r\n        if (!positions || !indices) {\r\n            return this;\r\n        }\r\n\r\n        const vectorPositions = new Array<Vector3>();\r\n        for (let pos = 0; pos < positions.length; pos = pos + 3) {\r\n            vectorPositions.push(Vector3.FromArray(positions, pos));\r\n        }\r\n        const dupes = new Array<number>();\r\n\r\n        AsyncLoop.SyncAsyncForLoop(\r\n            vectorPositions.length,\r\n            40,\r\n            (iteration) => {\r\n                const realPos = vectorPositions.length - 1 - iteration;\r\n                const testedPosition = vectorPositions[realPos];\r\n                for (let j = 0; j < realPos; ++j) {\r\n                    const againstPosition = vectorPositions[j];\r\n                    if (testedPosition.equals(againstPosition)) {\r\n                        dupes[realPos] = j;\r\n                        break;\r\n                    }\r\n                }\r\n            },\r\n            () => {\r\n                for (let i = 0; i < indices.length; ++i) {\r\n                    indices[i] = dupes[indices[i]] || indices[i];\r\n                }\r\n\r\n                //indices are now reordered\r\n                const originalSubMeshes = this.subMeshes.slice(0);\r\n                this.setIndices(indices);\r\n                this.subMeshes = originalSubMeshes;\r\n                if (successCallback) {\r\n                    successCallback(this);\r\n                }\r\n            }\r\n        );\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Serialize current mesh\r\n     * @param serializationObject defines the object which will receive the serialization data\r\n     */\r\n    public serialize(serializationObject: any = {}): any {\r\n        serializationObject.name = this.name;\r\n        serializationObject.id = this.id;\r\n        serializationObject.uniqueId = this.uniqueId;\r\n        serializationObject.type = this.getClassName();\r\n\r\n        if (Tags && Tags.HasTags(this)) {\r\n            serializationObject.tags = Tags.GetTags(this);\r\n        }\r\n\r\n        serializationObject.position = this.position.asArray();\r\n\r\n        if (this.rotationQuaternion) {\r\n            serializationObject.rotationQuaternion = this.rotationQuaternion.asArray();\r\n        } else if (this.rotation) {\r\n            serializationObject.rotation = this.rotation.asArray();\r\n        }\r\n\r\n        serializationObject.scaling = this.scaling.asArray();\r\n        if (this._postMultiplyPivotMatrix) {\r\n            serializationObject.pivotMatrix = this.getPivotMatrix().asArray();\r\n        } else {\r\n            serializationObject.localMatrix = this.getPivotMatrix().asArray();\r\n        }\r\n\r\n        serializationObject.isEnabled = this.isEnabled(false);\r\n        serializationObject.isVisible = this.isVisible;\r\n        serializationObject.infiniteDistance = this.infiniteDistance;\r\n        serializationObject.pickable = this.isPickable;\r\n\r\n        serializationObject.receiveShadows = this.receiveShadows;\r\n\r\n        serializationObject.billboardMode = this.billboardMode;\r\n        serializationObject.visibility = this.visibility;\r\n\r\n        serializationObject.checkCollisions = this.checkCollisions;\r\n        serializationObject.isBlocker = this.isBlocker;\r\n        serializationObject.overrideMaterialSideOrientation = this.overrideMaterialSideOrientation;\r\n\r\n        // Parent\r\n        if (this.parent) {\r\n            this.parent._serializeAsParent(serializationObject);\r\n        }\r\n\r\n        // Geometry\r\n        serializationObject.isUnIndexed = this.isUnIndexed;\r\n        const geometry = this._geometry;\r\n        if (geometry && this.subMeshes) {\r\n            serializationObject.geometryUniqueId = geometry.uniqueId;\r\n            serializationObject.geometryId = geometry.id;\r\n\r\n            // SubMeshes\r\n            serializationObject.subMeshes = [];\r\n            for (let subIndex = 0; subIndex < this.subMeshes.length; subIndex++) {\r\n                const subMesh = this.subMeshes[subIndex];\r\n\r\n                serializationObject.subMeshes.push({\r\n                    materialIndex: subMesh.materialIndex,\r\n                    verticesStart: subMesh.verticesStart,\r\n                    verticesCount: subMesh.verticesCount,\r\n                    indexStart: subMesh.indexStart,\r\n                    indexCount: subMesh.indexCount,\r\n                });\r\n            }\r\n        }\r\n\r\n        // Material\r\n        if (this.material) {\r\n            if (!this.material.doNotSerialize) {\r\n                serializationObject.materialUniqueId = this.material.uniqueId;\r\n                serializationObject.materialId = this.material.id; // back compat\r\n            }\r\n        } else {\r\n            this.material = null;\r\n            serializationObject.materialUniqueId = this._scene.defaultMaterial.uniqueId;\r\n            serializationObject.materialId = this._scene.defaultMaterial.id; // back compat\r\n        }\r\n\r\n        // Morph targets\r\n        if (this.morphTargetManager) {\r\n            serializationObject.morphTargetManagerId = this.morphTargetManager.uniqueId;\r\n        }\r\n\r\n        // Skeleton\r\n        if (this.skeleton) {\r\n            serializationObject.skeletonId = this.skeleton.id;\r\n            serializationObject.numBoneInfluencers = this.numBoneInfluencers;\r\n        }\r\n\r\n        // Physics\r\n        //TODO implement correct serialization for physics impostors.\r\n        if (this.getScene()._getComponent(SceneComponentConstants.NAME_PHYSICSENGINE)) {\r\n            const impostor = this.getPhysicsImpostor();\r\n            if (impostor) {\r\n                serializationObject.physicsMass = impostor.getParam(\"mass\");\r\n                serializationObject.physicsFriction = impostor.getParam(\"friction\");\r\n                serializationObject.physicsRestitution = impostor.getParam(\"mass\");\r\n                serializationObject.physicsImpostor = impostor.type;\r\n            }\r\n        }\r\n\r\n        // Metadata\r\n        if (this.metadata) {\r\n            serializationObject.metadata = this.metadata;\r\n        }\r\n\r\n        // Instances\r\n        serializationObject.instances = [];\r\n        for (let index = 0; index < this.instances.length; index++) {\r\n            const instance = this.instances[index];\r\n            if (instance.doNotSerialize) {\r\n                continue;\r\n            }\r\n\r\n            const serializationInstance: any = {\r\n                name: instance.name,\r\n                id: instance.id,\r\n                isEnabled: instance.isEnabled(false),\r\n                isVisible: instance.isVisible,\r\n                isPickable: instance.isPickable,\r\n                checkCollisions: instance.checkCollisions,\r\n                position: instance.position.asArray(),\r\n                scaling: instance.scaling.asArray(),\r\n            };\r\n\r\n            if (instance.parent) {\r\n                instance.parent._serializeAsParent(serializationInstance);\r\n            }\r\n\r\n            if (instance.rotationQuaternion) {\r\n                serializationInstance.rotationQuaternion = instance.rotationQuaternion.asArray();\r\n            } else if (instance.rotation) {\r\n                serializationInstance.rotation = instance.rotation.asArray();\r\n            }\r\n\r\n            // Physics\r\n            //TODO implement correct serialization for physics impostors.\r\n            if (this.getScene()._getComponent(SceneComponentConstants.NAME_PHYSICSENGINE)) {\r\n                const impostor = instance.getPhysicsImpostor();\r\n                if (impostor) {\r\n                    serializationInstance.physicsMass = impostor.getParam(\"mass\");\r\n                    serializationInstance.physicsFriction = impostor.getParam(\"friction\");\r\n                    serializationInstance.physicsRestitution = impostor.getParam(\"mass\");\r\n                    serializationInstance.physicsImpostor = impostor.type;\r\n                }\r\n            }\r\n\r\n            // Metadata\r\n            if (instance.metadata) {\r\n                serializationInstance.metadata = instance.metadata;\r\n            }\r\n\r\n            // Action Manager\r\n            if (instance.actionManager) {\r\n                serializationInstance.actions = instance.actionManager.serialize(instance.name);\r\n            }\r\n\r\n            serializationObject.instances.push(serializationInstance);\r\n\r\n            // Animations\r\n            SerializationHelper.AppendSerializedAnimations(instance, serializationInstance);\r\n            serializationInstance.ranges = instance.serializeAnimationRanges();\r\n        }\r\n\r\n        // Thin instances\r\n        if (this._thinInstanceDataStorage.instancesCount && this._thinInstanceDataStorage.matrixData) {\r\n            serializationObject.thinInstances = {\r\n                instancesCount: this._thinInstanceDataStorage.instancesCount,\r\n                matrixData: Array.from(this._thinInstanceDataStorage.matrixData),\r\n                matrixBufferSize: this._thinInstanceDataStorage.matrixBufferSize,\r\n                enablePicking: this.thinInstanceEnablePicking,\r\n            };\r\n\r\n            if (this._userThinInstanceBuffersStorage) {\r\n                const userThinInstance: any = {\r\n                    data: {},\r\n                    sizes: {},\r\n                    strides: {},\r\n                };\r\n\r\n                for (const kind in this._userThinInstanceBuffersStorage.data) {\r\n                    userThinInstance.data[kind] = Array.from(this._userThinInstanceBuffersStorage.data[kind]);\r\n                    userThinInstance.sizes[kind] = this._userThinInstanceBuffersStorage.sizes[kind];\r\n                    userThinInstance.strides[kind] = this._userThinInstanceBuffersStorage.strides[kind];\r\n                }\r\n\r\n                serializationObject.thinInstances.userThinInstance = userThinInstance;\r\n            }\r\n        }\r\n\r\n        // Animations\r\n        SerializationHelper.AppendSerializedAnimations(this, serializationObject);\r\n        serializationObject.ranges = this.serializeAnimationRanges();\r\n\r\n        // Layer mask\r\n        serializationObject.layerMask = this.layerMask;\r\n\r\n        // Alpha\r\n        serializationObject.alphaIndex = this.alphaIndex;\r\n        serializationObject.hasVertexAlpha = this.hasVertexAlpha;\r\n\r\n        // Overlay\r\n        serializationObject.overlayAlpha = this.overlayAlpha;\r\n        serializationObject.overlayColor = this.overlayColor.asArray();\r\n        serializationObject.renderOverlay = this.renderOverlay;\r\n\r\n        // Fog\r\n        serializationObject.applyFog = this.applyFog;\r\n\r\n        // Action Manager\r\n        if (this.actionManager) {\r\n            serializationObject.actions = this.actionManager.serialize(this.name);\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /** @internal */\r\n    public _syncGeometryWithMorphTargetManager() {\r\n        if (!this.geometry) {\r\n            return;\r\n        }\r\n\r\n        this._markSubMeshesAsAttributesDirty();\r\n\r\n        const morphTargetManager = this._internalAbstractMeshDataInfo._morphTargetManager;\r\n        if (morphTargetManager && morphTargetManager.vertexCount) {\r\n            if (morphTargetManager.vertexCount !== this.getTotalVertices()) {\r\n                Logger.Error(\"Mesh is incompatible with morph targets. Targets and mesh must all have the same vertices count.\");\r\n                this.morphTargetManager = null;\r\n                return;\r\n            }\r\n\r\n            if (morphTargetManager.isUsingTextureForTargets) {\r\n                return;\r\n            }\r\n\r\n            for (let index = 0; index < morphTargetManager.numInfluencers; index++) {\r\n                const morphTarget = morphTargetManager.getActiveTarget(index);\r\n\r\n                const positions = morphTarget.getPositions();\r\n                if (!positions) {\r\n                    Logger.Error(\"Invalid morph target. Target must have positions.\");\r\n                    return;\r\n                }\r\n\r\n                this.geometry.setVerticesData(VertexBuffer.PositionKind + index, positions, false, 3);\r\n\r\n                const normals = morphTarget.getNormals();\r\n                if (normals) {\r\n                    this.geometry.setVerticesData(VertexBuffer.NormalKind + index, normals, false, 3);\r\n                }\r\n\r\n                const tangents = morphTarget.getTangents();\r\n                if (tangents) {\r\n                    this.geometry.setVerticesData(VertexBuffer.TangentKind + index, tangents, false, 3);\r\n                }\r\n\r\n                const uvs = morphTarget.getUVs();\r\n                if (uvs) {\r\n                    this.geometry.setVerticesData(VertexBuffer.UVKind + \"_\" + index, uvs, false, 2);\r\n                }\r\n            }\r\n        } else {\r\n            let index = 0;\r\n\r\n            // Positions\r\n            while (this.geometry.isVerticesDataPresent(VertexBuffer.PositionKind + index)) {\r\n                this.geometry.removeVerticesData(VertexBuffer.PositionKind + index);\r\n\r\n                if (this.geometry.isVerticesDataPresent(VertexBuffer.NormalKind + index)) {\r\n                    this.geometry.removeVerticesData(VertexBuffer.NormalKind + index);\r\n                }\r\n                if (this.geometry.isVerticesDataPresent(VertexBuffer.TangentKind + index)) {\r\n                    this.geometry.removeVerticesData(VertexBuffer.TangentKind + index);\r\n                }\r\n                if (this.geometry.isVerticesDataPresent(VertexBuffer.UVKind + index)) {\r\n                    this.geometry.removeVerticesData(VertexBuffer.UVKind + \"_\" + index);\r\n                }\r\n                index++;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public static _GroundMeshParser = (parsedMesh: any, scene: Scene): Mesh => {\r\n        throw _WarnImport(\"GroundMesh\");\r\n    };\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public static _GoldbergMeshParser = (parsedMesh: any, scene: Scene): GoldbergMesh => {\r\n        throw _WarnImport(\"GoldbergMesh\");\r\n    };\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public static _LinesMeshParser = (parsedMesh: any, scene: Scene): Mesh => {\r\n        throw _WarnImport(\"LinesMesh\");\r\n    };\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public static _GreasedLineMeshParser = (parsedMesh: any, scene: Scene): Mesh => {\r\n        throw _WarnImport(\"GreasedLineMesh\");\r\n    };\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public static _TrailMeshParser = (parsedMesh: any, scene: Scene): Mesh => {\r\n        throw _WarnImport(\"TrailMesh\");\r\n    };\r\n\r\n    /**\r\n     * Returns a new Mesh object parsed from the source provided.\r\n     * @param parsedMesh is the source\r\n     * @param scene defines the hosting scene\r\n     * @param rootUrl is the root URL to prefix the `delayLoadingFile` property with\r\n     * @returns a new Mesh\r\n     */\r\n    public static Parse(parsedMesh: any, scene: Scene, rootUrl: string): Mesh {\r\n        let mesh: Mesh;\r\n\r\n        if (parsedMesh.type && parsedMesh.type === \"LinesMesh\") {\r\n            mesh = Mesh._LinesMeshParser(parsedMesh, scene);\r\n        } else if (parsedMesh.type && parsedMesh.type === \"GroundMesh\") {\r\n            mesh = Mesh._GroundMeshParser(parsedMesh, scene);\r\n        } else if (parsedMesh.type && parsedMesh.type === \"GoldbergMesh\") {\r\n            mesh = Mesh._GoldbergMeshParser(parsedMesh, scene);\r\n        } else if (parsedMesh.type && parsedMesh.type === \"GreasedLineMesh\") {\r\n            mesh = Mesh._GreasedLineMeshParser(parsedMesh, scene);\r\n        } else if (parsedMesh.type && parsedMesh.type === \"TrailMesh\") {\r\n            mesh = Mesh._TrailMeshParser(parsedMesh, scene);\r\n        } else {\r\n            mesh = new Mesh(parsedMesh.name, scene);\r\n        }\r\n        mesh.id = parsedMesh.id;\r\n        mesh._waitingParsedUniqueId = parsedMesh.uniqueId;\r\n\r\n        if (Tags) {\r\n            Tags.AddTagsTo(mesh, parsedMesh.tags);\r\n        }\r\n\r\n        mesh.position = Vector3.FromArray(parsedMesh.position);\r\n\r\n        if (parsedMesh.metadata !== undefined) {\r\n            mesh.metadata = parsedMesh.metadata;\r\n        }\r\n\r\n        if (parsedMesh.rotationQuaternion) {\r\n            mesh.rotationQuaternion = Quaternion.FromArray(parsedMesh.rotationQuaternion);\r\n        } else if (parsedMesh.rotation) {\r\n            mesh.rotation = Vector3.FromArray(parsedMesh.rotation);\r\n        }\r\n\r\n        mesh.scaling = Vector3.FromArray(parsedMesh.scaling);\r\n\r\n        if (parsedMesh.localMatrix) {\r\n            mesh.setPreTransformMatrix(Matrix.FromArray(parsedMesh.localMatrix));\r\n        } else if (parsedMesh.pivotMatrix) {\r\n            mesh.setPivotMatrix(Matrix.FromArray(parsedMesh.pivotMatrix));\r\n        }\r\n\r\n        mesh.setEnabled(parsedMesh.isEnabled);\r\n        mesh.isVisible = parsedMesh.isVisible;\r\n        mesh.infiniteDistance = parsedMesh.infiniteDistance;\r\n\r\n        mesh.showBoundingBox = parsedMesh.showBoundingBox;\r\n        mesh.showSubMeshesBoundingBox = parsedMesh.showSubMeshesBoundingBox;\r\n\r\n        if (parsedMesh.applyFog !== undefined) {\r\n            mesh.applyFog = parsedMesh.applyFog;\r\n        }\r\n\r\n        if (parsedMesh.pickable !== undefined) {\r\n            mesh.isPickable = parsedMesh.pickable;\r\n        }\r\n\r\n        if (parsedMesh.alphaIndex !== undefined) {\r\n            mesh.alphaIndex = parsedMesh.alphaIndex;\r\n        }\r\n\r\n        mesh.receiveShadows = parsedMesh.receiveShadows;\r\n\r\n        if (parsedMesh.billboardMode !== undefined) {\r\n            mesh.billboardMode = parsedMesh.billboardMode;\r\n        }\r\n\r\n        if (parsedMesh.visibility !== undefined) {\r\n            mesh.visibility = parsedMesh.visibility;\r\n        }\r\n\r\n        mesh.checkCollisions = parsedMesh.checkCollisions;\r\n        mesh.overrideMaterialSideOrientation = parsedMesh.overrideMaterialSideOrientation;\r\n\r\n        if (parsedMesh.isBlocker !== undefined) {\r\n            mesh.isBlocker = parsedMesh.isBlocker;\r\n        }\r\n\r\n        mesh._shouldGenerateFlatShading = parsedMesh.useFlatShading;\r\n\r\n        // freezeWorldMatrix\r\n        if (parsedMesh.freezeWorldMatrix) {\r\n            mesh._waitingData.freezeWorldMatrix = parsedMesh.freezeWorldMatrix;\r\n        }\r\n\r\n        // Parent\r\n        if (parsedMesh.parentId !== undefined) {\r\n            mesh._waitingParentId = parsedMesh.parentId;\r\n        }\r\n\r\n        if (parsedMesh.parentInstanceIndex !== undefined) {\r\n            mesh._waitingParentInstanceIndex = parsedMesh.parentInstanceIndex;\r\n        }\r\n\r\n        // Actions\r\n        if (parsedMesh.actions !== undefined) {\r\n            mesh._waitingData.actions = parsedMesh.actions;\r\n        }\r\n\r\n        // Overlay\r\n        if (parsedMesh.overlayAlpha !== undefined) {\r\n            mesh.overlayAlpha = parsedMesh.overlayAlpha;\r\n        }\r\n\r\n        if (parsedMesh.overlayColor !== undefined) {\r\n            mesh.overlayColor = Color3.FromArray(parsedMesh.overlayColor);\r\n        }\r\n\r\n        if (parsedMesh.renderOverlay !== undefined) {\r\n            mesh.renderOverlay = parsedMesh.renderOverlay;\r\n        }\r\n\r\n        // Geometry\r\n        mesh.isUnIndexed = !!parsedMesh.isUnIndexed;\r\n        mesh.hasVertexAlpha = parsedMesh.hasVertexAlpha;\r\n\r\n        if (parsedMesh.delayLoadingFile) {\r\n            mesh.delayLoadState = Constants.DELAYLOADSTATE_NOTLOADED;\r\n            mesh.delayLoadingFile = rootUrl + parsedMesh.delayLoadingFile;\r\n            mesh.buildBoundingInfo(Vector3.FromArray(parsedMesh.boundingBoxMinimum), Vector3.FromArray(parsedMesh.boundingBoxMaximum));\r\n\r\n            if (parsedMesh._binaryInfo) {\r\n                mesh._binaryInfo = parsedMesh._binaryInfo;\r\n            }\r\n\r\n            mesh._delayInfo = [];\r\n            if (parsedMesh.hasUVs) {\r\n                mesh._delayInfo.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (parsedMesh.hasUVs2) {\r\n                mesh._delayInfo.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (parsedMesh.hasUVs3) {\r\n                mesh._delayInfo.push(VertexBuffer.UV3Kind);\r\n            }\r\n\r\n            if (parsedMesh.hasUVs4) {\r\n                mesh._delayInfo.push(VertexBuffer.UV4Kind);\r\n            }\r\n\r\n            if (parsedMesh.hasUVs5) {\r\n                mesh._delayInfo.push(VertexBuffer.UV5Kind);\r\n            }\r\n\r\n            if (parsedMesh.hasUVs6) {\r\n                mesh._delayInfo.push(VertexBuffer.UV6Kind);\r\n            }\r\n\r\n            if (parsedMesh.hasColors) {\r\n                mesh._delayInfo.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            if (parsedMesh.hasMatricesIndices) {\r\n                mesh._delayInfo.push(VertexBuffer.MatricesIndicesKind);\r\n            }\r\n\r\n            if (parsedMesh.hasMatricesWeights) {\r\n                mesh._delayInfo.push(VertexBuffer.MatricesWeightsKind);\r\n            }\r\n\r\n            mesh._delayLoadingFunction = Geometry._ImportGeometry;\r\n\r\n            if (SceneLoaderFlags.ForceFullSceneLoadingForIncremental) {\r\n                mesh._checkDelayState();\r\n            }\r\n        } else {\r\n            Geometry._ImportGeometry(parsedMesh, mesh);\r\n        }\r\n\r\n        // Material\r\n        if (parsedMesh.materialUniqueId) {\r\n            mesh._waitingMaterialId = parsedMesh.materialUniqueId;\r\n        } else if (parsedMesh.materialId) {\r\n            mesh._waitingMaterialId = parsedMesh.materialId;\r\n        }\r\n\r\n        // Morph targets\r\n        if (parsedMesh.morphTargetManagerId > -1) {\r\n            mesh.morphTargetManager = scene.getMorphTargetManagerById(parsedMesh.morphTargetManagerId);\r\n        }\r\n\r\n        // Skeleton\r\n        if (parsedMesh.skeletonId !== undefined && parsedMesh.skeletonId !== null) {\r\n            mesh.skeleton = scene.getLastSkeletonById(parsedMesh.skeletonId);\r\n            if (parsedMesh.numBoneInfluencers) {\r\n                mesh.numBoneInfluencers = parsedMesh.numBoneInfluencers;\r\n            }\r\n        }\r\n\r\n        // Animations\r\n        if (parsedMesh.animations) {\r\n            for (let animationIndex = 0; animationIndex < parsedMesh.animations.length; animationIndex++) {\r\n                const parsedAnimation = parsedMesh.animations[animationIndex];\r\n                const internalClass = GetClass(\"BABYLON.Animation\");\r\n                if (internalClass) {\r\n                    mesh.animations.push(internalClass.Parse(parsedAnimation));\r\n                }\r\n            }\r\n            Node.ParseAnimationRanges(mesh, parsedMesh, scene);\r\n        }\r\n\r\n        if (parsedMesh.autoAnimate) {\r\n            scene.beginAnimation(mesh, parsedMesh.autoAnimateFrom, parsedMesh.autoAnimateTo, parsedMesh.autoAnimateLoop, parsedMesh.autoAnimateSpeed || 1.0);\r\n        }\r\n\r\n        // Layer Mask\r\n        if (parsedMesh.layerMask && !isNaN(parsedMesh.layerMask)) {\r\n            mesh.layerMask = Math.abs(parseInt(parsedMesh.layerMask));\r\n        } else {\r\n            mesh.layerMask = 0x0fffffff;\r\n        }\r\n\r\n        // Physics\r\n        if (parsedMesh.physicsImpostor) {\r\n            Mesh._PhysicsImpostorParser(scene, mesh, parsedMesh);\r\n        }\r\n\r\n        // Levels\r\n        if (parsedMesh.lodMeshIds) {\r\n            mesh._waitingData.lods = {\r\n                ids: parsedMesh.lodMeshIds,\r\n                distances: parsedMesh.lodDistances ? parsedMesh.lodDistances : null,\r\n                coverages: parsedMesh.lodCoverages ? parsedMesh.lodCoverages : null,\r\n            };\r\n        }\r\n\r\n        // Instances\r\n        if (parsedMesh.instances) {\r\n            for (let index = 0; index < parsedMesh.instances.length; index++) {\r\n                const parsedInstance = parsedMesh.instances[index];\r\n                const instance = mesh.createInstance(parsedInstance.name);\r\n\r\n                if (parsedInstance.id) {\r\n                    instance.id = parsedInstance.id;\r\n                }\r\n\r\n                if (Tags) {\r\n                    if (parsedInstance.tags) {\r\n                        Tags.AddTagsTo(instance, parsedInstance.tags);\r\n                    } else {\r\n                        Tags.AddTagsTo(instance, parsedMesh.tags);\r\n                    }\r\n                }\r\n\r\n                instance.position = Vector3.FromArray(parsedInstance.position);\r\n\r\n                if (parsedInstance.metadata !== undefined) {\r\n                    instance.metadata = parsedInstance.metadata;\r\n                }\r\n\r\n                if (parsedInstance.parentId !== undefined) {\r\n                    instance._waitingParentId = parsedInstance.parentId;\r\n                }\r\n\r\n                if (parsedInstance.parentInstanceIndex !== undefined) {\r\n                    instance._waitingParentInstanceIndex = parsedInstance.parentInstanceIndex;\r\n                }\r\n\r\n                if (parsedInstance.isEnabled !== undefined && parsedInstance.isEnabled !== null) {\r\n                    instance.setEnabled(parsedInstance.isEnabled);\r\n                }\r\n\r\n                if (parsedInstance.isVisible !== undefined && parsedInstance.isVisible !== null) {\r\n                    instance.isVisible = parsedInstance.isVisible;\r\n                }\r\n\r\n                if (parsedInstance.isPickable !== undefined && parsedInstance.isPickable !== null) {\r\n                    instance.isPickable = parsedInstance.isPickable;\r\n                }\r\n\r\n                if (parsedInstance.rotationQuaternion) {\r\n                    instance.rotationQuaternion = Quaternion.FromArray(parsedInstance.rotationQuaternion);\r\n                } else if (parsedInstance.rotation) {\r\n                    instance.rotation = Vector3.FromArray(parsedInstance.rotation);\r\n                }\r\n\r\n                instance.scaling = Vector3.FromArray(parsedInstance.scaling);\r\n\r\n                if (parsedInstance.checkCollisions != undefined && parsedInstance.checkCollisions != null) {\r\n                    instance.checkCollisions = parsedInstance.checkCollisions;\r\n                }\r\n                if (parsedInstance.pickable != undefined && parsedInstance.pickable != null) {\r\n                    instance.isPickable = parsedInstance.pickable;\r\n                }\r\n                if (parsedInstance.showBoundingBox != undefined && parsedInstance.showBoundingBox != null) {\r\n                    instance.showBoundingBox = parsedInstance.showBoundingBox;\r\n                }\r\n                if (parsedInstance.showSubMeshesBoundingBox != undefined && parsedInstance.showSubMeshesBoundingBox != null) {\r\n                    instance.showSubMeshesBoundingBox = parsedInstance.showSubMeshesBoundingBox;\r\n                }\r\n                if (parsedInstance.alphaIndex != undefined && parsedInstance.showSubMeshesBoundingBox != null) {\r\n                    instance.alphaIndex = parsedInstance.alphaIndex;\r\n                }\r\n\r\n                // Physics\r\n                if (parsedInstance.physicsImpostor) {\r\n                    Mesh._PhysicsImpostorParser(scene, instance, parsedInstance);\r\n                }\r\n\r\n                // Actions\r\n                if (parsedInstance.actions !== undefined) {\r\n                    instance._waitingData.actions = parsedInstance.actions;\r\n                }\r\n\r\n                // Animation\r\n                if (parsedInstance.animations) {\r\n                    for (let animationIndex = 0; animationIndex < parsedInstance.animations.length; animationIndex++) {\r\n                        const parsedAnimation = parsedInstance.animations[animationIndex];\r\n                        const internalClass = GetClass(\"BABYLON.Animation\");\r\n                        if (internalClass) {\r\n                            instance.animations.push(internalClass.Parse(parsedAnimation));\r\n                        }\r\n                    }\r\n                    Node.ParseAnimationRanges(instance, parsedInstance, scene);\r\n\r\n                    if (parsedInstance.autoAnimate) {\r\n                        scene.beginAnimation(\r\n                            instance,\r\n                            parsedInstance.autoAnimateFrom,\r\n                            parsedInstance.autoAnimateTo,\r\n                            parsedInstance.autoAnimateLoop,\r\n                            parsedInstance.autoAnimateSpeed || 1.0\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Thin instances\r\n        if (parsedMesh.thinInstances) {\r\n            const thinInstances = parsedMesh.thinInstances;\r\n\r\n            mesh.thinInstanceEnablePicking = !!thinInstances.enablePicking;\r\n\r\n            if (thinInstances.matrixData) {\r\n                mesh.thinInstanceSetBuffer(\"matrix\", new Float32Array(thinInstances.matrixData), 16, false);\r\n\r\n                mesh._thinInstanceDataStorage.matrixBufferSize = thinInstances.matrixBufferSize;\r\n                mesh._thinInstanceDataStorage.instancesCount = thinInstances.instancesCount;\r\n            } else {\r\n                mesh._thinInstanceDataStorage.matrixBufferSize = thinInstances.matrixBufferSize;\r\n            }\r\n\r\n            if (parsedMesh.thinInstances.userThinInstance) {\r\n                const userThinInstance = parsedMesh.thinInstances.userThinInstance;\r\n\r\n                for (const kind in userThinInstance.data) {\r\n                    mesh.thinInstanceSetBuffer(kind, new Float32Array(userThinInstance.data[kind]), userThinInstance.strides[kind], false);\r\n                    mesh._userThinInstanceBuffersStorage.sizes[kind] = userThinInstance.sizes[kind];\r\n                }\r\n            }\r\n        }\r\n\r\n        return mesh;\r\n    }\r\n\r\n    // Skeletons\r\n\r\n    /**\r\n     * Prepare internal position array for software CPU skinning\r\n     * @returns original positions used for CPU skinning. Useful for integrating Morphing with skeletons in same mesh\r\n     */\r\n    public setPositionsForCPUSkinning(): Nullable<Float32Array> {\r\n        const internalDataInfo = this._internalMeshDataInfo;\r\n        if (!internalDataInfo._sourcePositions) {\r\n            const source = this.getVerticesData(VertexBuffer.PositionKind);\r\n            if (!source) {\r\n                return internalDataInfo._sourcePositions;\r\n            }\r\n\r\n            internalDataInfo._sourcePositions = new Float32Array(<any>source);\r\n\r\n            if (!this.isVertexBufferUpdatable(VertexBuffer.PositionKind)) {\r\n                this.setVerticesData(VertexBuffer.PositionKind, source, true);\r\n            }\r\n        }\r\n        return internalDataInfo._sourcePositions;\r\n    }\r\n\r\n    /**\r\n     * Prepare internal normal array for software CPU skinning\r\n     * @returns original normals used for CPU skinning. Useful for integrating Morphing with skeletons in same mesh.\r\n     */\r\n    public setNormalsForCPUSkinning(): Nullable<Float32Array> {\r\n        const internalDataInfo = this._internalMeshDataInfo;\r\n\r\n        if (!internalDataInfo._sourceNormals) {\r\n            const source = this.getVerticesData(VertexBuffer.NormalKind);\r\n\r\n            if (!source) {\r\n                return internalDataInfo._sourceNormals;\r\n            }\r\n\r\n            internalDataInfo._sourceNormals = new Float32Array(<any>source);\r\n\r\n            if (!this.isVertexBufferUpdatable(VertexBuffer.NormalKind)) {\r\n                this.setVerticesData(VertexBuffer.NormalKind, source, true);\r\n            }\r\n        }\r\n        return internalDataInfo._sourceNormals;\r\n    }\r\n\r\n    /**\r\n     * Updates the vertex buffer by applying transformation from the bones\r\n     * @param skeleton defines the skeleton to apply to current mesh\r\n     * @returns the current mesh\r\n     */\r\n    public applySkeleton(skeleton: Skeleton): Mesh {\r\n        if (!this.geometry) {\r\n            return this;\r\n        }\r\n\r\n        if (this.geometry._softwareSkinningFrameId == this.getScene().getFrameId()) {\r\n            return this;\r\n        }\r\n\r\n        this.geometry._softwareSkinningFrameId = this.getScene().getFrameId();\r\n\r\n        if (!this.isVerticesDataPresent(VertexBuffer.PositionKind)) {\r\n            return this;\r\n        }\r\n        if (!this.isVerticesDataPresent(VertexBuffer.MatricesIndicesKind)) {\r\n            return this;\r\n        }\r\n        if (!this.isVerticesDataPresent(VertexBuffer.MatricesWeightsKind)) {\r\n            return this;\r\n        }\r\n\r\n        const hasNormals = this.isVerticesDataPresent(VertexBuffer.NormalKind);\r\n\r\n        const internalDataInfo = this._internalMeshDataInfo;\r\n\r\n        if (!internalDataInfo._sourcePositions) {\r\n            const submeshes = this.subMeshes.slice();\r\n            this.setPositionsForCPUSkinning();\r\n            this.subMeshes = submeshes;\r\n        }\r\n\r\n        if (hasNormals && !internalDataInfo._sourceNormals) {\r\n            this.setNormalsForCPUSkinning();\r\n        }\r\n\r\n        // positionsData checks for not being Float32Array will only pass at most once\r\n        let positionsData = this.getVerticesData(VertexBuffer.PositionKind);\r\n\r\n        if (!positionsData) {\r\n            return this;\r\n        }\r\n\r\n        if (!(positionsData instanceof Float32Array)) {\r\n            positionsData = new Float32Array(positionsData);\r\n        }\r\n\r\n        // normalsData checks for not being Float32Array will only pass at most once\r\n        let normalsData = this.getVerticesData(VertexBuffer.NormalKind);\r\n\r\n        if (hasNormals) {\r\n            if (!normalsData) {\r\n                return this;\r\n            }\r\n\r\n            if (!(normalsData instanceof Float32Array)) {\r\n                normalsData = new Float32Array(normalsData);\r\n            }\r\n        }\r\n\r\n        const matricesIndicesData = this.getVerticesData(VertexBuffer.MatricesIndicesKind);\r\n        const matricesWeightsData = this.getVerticesData(VertexBuffer.MatricesWeightsKind);\r\n\r\n        if (!matricesWeightsData || !matricesIndicesData) {\r\n            return this;\r\n        }\r\n\r\n        const needExtras = this.numBoneInfluencers > 4;\r\n        const matricesIndicesExtraData = needExtras ? this.getVerticesData(VertexBuffer.MatricesIndicesExtraKind) : null;\r\n        const matricesWeightsExtraData = needExtras ? this.getVerticesData(VertexBuffer.MatricesWeightsExtraKind) : null;\r\n\r\n        const skeletonMatrices = skeleton.getTransformMatrices(this);\r\n\r\n        const tempVector3 = Vector3.Zero();\r\n        const finalMatrix = new Matrix();\r\n        const tempMatrix = new Matrix();\r\n\r\n        let matWeightIdx = 0;\r\n        let inf: number;\r\n        for (let index = 0; index < positionsData.length; index += 3, matWeightIdx += 4) {\r\n            let weight: number;\r\n            for (inf = 0; inf < 4; inf++) {\r\n                weight = matricesWeightsData[matWeightIdx + inf];\r\n                if (weight > 0) {\r\n                    Matrix.FromFloat32ArrayToRefScaled(skeletonMatrices, Math.floor(matricesIndicesData[matWeightIdx + inf] * 16), weight, tempMatrix);\r\n                    finalMatrix.addToSelf(tempMatrix);\r\n                }\r\n            }\r\n            if (needExtras) {\r\n                for (inf = 0; inf < 4; inf++) {\r\n                    weight = matricesWeightsExtraData![matWeightIdx + inf];\r\n                    if (weight > 0) {\r\n                        Matrix.FromFloat32ArrayToRefScaled(skeletonMatrices, Math.floor(matricesIndicesExtraData![matWeightIdx + inf] * 16), weight, tempMatrix);\r\n                        finalMatrix.addToSelf(tempMatrix);\r\n                    }\r\n                }\r\n            }\r\n\r\n            Vector3.TransformCoordinatesFromFloatsToRef(\r\n                internalDataInfo._sourcePositions![index],\r\n                internalDataInfo._sourcePositions![index + 1],\r\n                internalDataInfo._sourcePositions![index + 2],\r\n                finalMatrix,\r\n                tempVector3\r\n            );\r\n            tempVector3.toArray(positionsData, index);\r\n\r\n            if (hasNormals) {\r\n                Vector3.TransformNormalFromFloatsToRef(\r\n                    internalDataInfo._sourceNormals![index],\r\n                    internalDataInfo._sourceNormals![index + 1],\r\n                    internalDataInfo._sourceNormals![index + 2],\r\n                    finalMatrix,\r\n                    tempVector3\r\n                );\r\n                tempVector3.toArray(normalsData!, index);\r\n            }\r\n\r\n            finalMatrix.reset();\r\n        }\r\n\r\n        this.updateVerticesData(VertexBuffer.PositionKind, positionsData);\r\n        if (hasNormals) {\r\n            this.updateVerticesData(VertexBuffer.NormalKind, normalsData!);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    // Tools\r\n\r\n    /**\r\n     * Returns an object containing a min and max Vector3 which are the minimum and maximum vectors of each mesh bounding box from the passed array, in the world coordinates\r\n     * @param meshes defines the list of meshes to scan\r\n     * @returns an object `{min:` Vector3`, max:` Vector3`}`\r\n     */\r\n    public static MinMax(meshes: AbstractMesh[]): { min: Vector3; max: Vector3 } {\r\n        let minVector: Nullable<Vector3> = null;\r\n        let maxVector: Nullable<Vector3> = null;\r\n\r\n        meshes.forEach(function (mesh) {\r\n            const boundingInfo = mesh.getBoundingInfo();\r\n\r\n            const boundingBox = boundingInfo.boundingBox;\r\n            if (!minVector || !maxVector) {\r\n                minVector = boundingBox.minimumWorld;\r\n                maxVector = boundingBox.maximumWorld;\r\n            } else {\r\n                minVector.minimizeInPlace(boundingBox.minimumWorld);\r\n                maxVector.maximizeInPlace(boundingBox.maximumWorld);\r\n            }\r\n        });\r\n\r\n        if (!minVector || !maxVector) {\r\n            return {\r\n                min: Vector3.Zero(),\r\n                max: Vector3.Zero(),\r\n            };\r\n        }\r\n\r\n        return {\r\n            min: minVector,\r\n            max: maxVector,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Returns the center of the `{min:` Vector3`, max:` Vector3`}` or the center of MinMax vector3 computed from a mesh array\r\n     * @param meshesOrMinMaxVector could be an array of meshes or a `{min:` Vector3`, max:` Vector3`}` object\r\n     * @returns a vector3\r\n     */\r\n    public static Center(meshesOrMinMaxVector: { min: Vector3; max: Vector3 } | AbstractMesh[]): Vector3 {\r\n        const minMaxVector = meshesOrMinMaxVector instanceof Array ? Mesh.MinMax(meshesOrMinMaxVector) : meshesOrMinMaxVector;\r\n        return Vector3.Center(minMaxVector.min, minMaxVector.max);\r\n    }\r\n\r\n    /**\r\n     * Merge the array of meshes into a single mesh for performance reasons.\r\n     * @param meshes array of meshes with the vertices to merge. Entries cannot be empty meshes.\r\n     * @param disposeSource when true (default), dispose of the vertices from the source meshes.\r\n     * @param allow32BitsIndices when the sum of the vertices > 64k, this must be set to true.\r\n     * @param meshSubclass (optional) can be set to a Mesh where the merged vertices will be inserted.\r\n     * @param subdivideWithSubMeshes when true (false default), subdivide mesh into subMeshes.\r\n     * @param multiMultiMaterials when true (false default), subdivide mesh into subMeshes with multiple materials, ignores subdivideWithSubMeshes.\r\n     * @returns a new mesh\r\n     */\r\n    public static MergeMeshes(\r\n        meshes: Array<Mesh>,\r\n        disposeSource = true,\r\n        allow32BitsIndices?: boolean,\r\n        meshSubclass?: Mesh,\r\n        subdivideWithSubMeshes?: boolean,\r\n        multiMultiMaterials?: boolean\r\n    ) {\r\n        return runCoroutineSync(Mesh._MergeMeshesCoroutine(meshes, disposeSource, allow32BitsIndices, meshSubclass, subdivideWithSubMeshes, multiMultiMaterials, false));\r\n    }\r\n\r\n    /**\r\n     * Merge the array of meshes into a single mesh for performance reasons.\r\n     * @param meshes array of meshes with the vertices to merge. Entries cannot be empty meshes.\r\n     * @param disposeSource when true (default), dispose of the vertices from the source meshes.\r\n     * @param allow32BitsIndices when the sum of the vertices > 64k, this must be set to true.\r\n     * @param meshSubclass (optional) can be set to a Mesh where the merged vertices will be inserted.\r\n     * @param subdivideWithSubMeshes when true (false default), subdivide mesh into subMeshes.\r\n     * @param multiMultiMaterials when true (false default), subdivide mesh into subMeshes with multiple materials, ignores subdivideWithSubMeshes.\r\n     * @returns a new mesh\r\n     */\r\n    public static MergeMeshesAsync(\r\n        meshes: Array<Mesh>,\r\n        disposeSource = true,\r\n        allow32BitsIndices?: boolean,\r\n        meshSubclass?: Mesh,\r\n        subdivideWithSubMeshes?: boolean,\r\n        multiMultiMaterials?: boolean\r\n    ) {\r\n        return runCoroutineAsync(\r\n            Mesh._MergeMeshesCoroutine(meshes, disposeSource, allow32BitsIndices, meshSubclass, subdivideWithSubMeshes, multiMultiMaterials, true),\r\n            createYieldingScheduler()\r\n        );\r\n    }\r\n\r\n    private static *_MergeMeshesCoroutine(\r\n        meshes: Array<Mesh>,\r\n        disposeSource = true,\r\n        allow32BitsIndices: boolean | undefined,\r\n        meshSubclass: Mesh | undefined,\r\n        subdivideWithSubMeshes: boolean | undefined,\r\n        multiMultiMaterials: boolean | undefined,\r\n        isAsync: boolean\r\n    ): Coroutine<Nullable<Mesh>> {\r\n        // Remove any null/undefined entries from the mesh array\r\n        meshes = meshes.filter(Boolean);\r\n\r\n        if (meshes.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        let index: number;\r\n        if (!allow32BitsIndices) {\r\n            let totalVertices = 0;\r\n\r\n            // Counting vertices\r\n            for (index = 0; index < meshes.length; index++) {\r\n                totalVertices += meshes[index].getTotalVertices();\r\n\r\n                if (totalVertices >= 65536) {\r\n                    Logger.Warn(\"Cannot merge meshes because resulting mesh will have more than 65536 vertices. Please use allow32BitsIndices = true to use 32 bits indices\");\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n        if (multiMultiMaterials) {\r\n            subdivideWithSubMeshes = false;\r\n        }\r\n        const materialArray: Array<Material> = new Array<Material>();\r\n        const materialIndexArray: Array<number> = new Array<number>();\r\n        // Merge\r\n        const indiceArray: Array<number> = new Array<number>();\r\n        const currentOverrideMaterialSideOrientation = meshes[0].overrideMaterialSideOrientation;\r\n\r\n        for (index = 0; index < meshes.length; index++) {\r\n            const mesh = meshes[index];\r\n            if (mesh.isAnInstance) {\r\n                Logger.Warn(\"Cannot merge instance meshes.\");\r\n                return null;\r\n            }\r\n\r\n            if (currentOverrideMaterialSideOrientation !== mesh.overrideMaterialSideOrientation) {\r\n                Logger.Warn(\"Cannot merge meshes with different overrideMaterialSideOrientation values.\");\r\n                return null;\r\n            }\r\n\r\n            if (subdivideWithSubMeshes) {\r\n                indiceArray.push(mesh.getTotalIndices());\r\n            }\r\n\r\n            if (multiMultiMaterials) {\r\n                if (mesh.material) {\r\n                    const material = mesh.material;\r\n                    if (material instanceof MultiMaterial) {\r\n                        for (let matIndex = 0; matIndex < material.subMaterials.length; matIndex++) {\r\n                            if (materialArray.indexOf(<Material>material.subMaterials[matIndex]) < 0) {\r\n                                materialArray.push(<Material>material.subMaterials[matIndex]);\r\n                            }\r\n                        }\r\n                        for (let subIndex = 0; subIndex < mesh.subMeshes.length; subIndex++) {\r\n                            materialIndexArray.push(materialArray.indexOf(<Material>material.subMaterials[mesh.subMeshes[subIndex].materialIndex]));\r\n                            indiceArray.push(mesh.subMeshes[subIndex].indexCount);\r\n                        }\r\n                    } else {\r\n                        if (materialArray.indexOf(<Material>material) < 0) {\r\n                            materialArray.push(<Material>material);\r\n                        }\r\n                        for (let subIndex = 0; subIndex < mesh.subMeshes.length; subIndex++) {\r\n                            materialIndexArray.push(materialArray.indexOf(<Material>material));\r\n                            indiceArray.push(mesh.subMeshes[subIndex].indexCount);\r\n                        }\r\n                    }\r\n                } else {\r\n                    for (let subIndex = 0; subIndex < mesh.subMeshes.length; subIndex++) {\r\n                        materialIndexArray.push(0);\r\n                        indiceArray.push(mesh.subMeshes[subIndex].indexCount);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const source = meshes[0];\r\n\r\n        const getVertexDataFromMesh = (mesh: Mesh) => {\r\n            const wm = mesh.computeWorldMatrix(true);\r\n            const vertexData = VertexData.ExtractFromMesh(mesh, false, false);\r\n            return { vertexData, transform: wm };\r\n        };\r\n\r\n        const { vertexData: sourceVertexData, transform: sourceTransform } = getVertexDataFromMesh(source);\r\n        if (isAsync) {\r\n            yield;\r\n        }\r\n\r\n        const meshVertexDatas = new Array<{ vertexData: VertexData; transform?: Matrix }>(meshes.length - 1);\r\n        for (let i = 1; i < meshes.length; i++) {\r\n            meshVertexDatas[i - 1] = getVertexDataFromMesh(meshes[i]);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        const mergeCoroutine = sourceVertexData._mergeCoroutine(sourceTransform, meshVertexDatas, allow32BitsIndices, isAsync, !disposeSource);\r\n        let mergeCoroutineStep = mergeCoroutine.next();\r\n        while (!mergeCoroutineStep.done) {\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n            mergeCoroutineStep = mergeCoroutine.next();\r\n        }\r\n        const vertexData = mergeCoroutineStep.value;\r\n\r\n        if (!meshSubclass) {\r\n            meshSubclass = new Mesh(source.name + \"_merged\", source.getScene());\r\n        }\r\n\r\n        const applyToCoroutine = vertexData._applyToCoroutine(meshSubclass, undefined, isAsync);\r\n        let applyToCoroutineStep = applyToCoroutine.next();\r\n        while (!applyToCoroutineStep.done) {\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n            applyToCoroutineStep = applyToCoroutine.next();\r\n        }\r\n\r\n        // Setting properties\r\n        meshSubclass.checkCollisions = source.checkCollisions;\r\n        meshSubclass.overrideMaterialSideOrientation = source.overrideMaterialSideOrientation;\r\n\r\n        // Cleaning\r\n        if (disposeSource) {\r\n            for (index = 0; index < meshes.length; index++) {\r\n                meshes[index].dispose();\r\n            }\r\n        }\r\n\r\n        // Subdivide\r\n        if (subdivideWithSubMeshes || multiMultiMaterials) {\r\n            //-- removal of global submesh\r\n            meshSubclass.releaseSubMeshes();\r\n            index = 0;\r\n            let offset = 0;\r\n\r\n            //-- apply subdivision according to index table\r\n            while (index < indiceArray.length) {\r\n                SubMesh.CreateFromIndices(0, offset, indiceArray[index], meshSubclass, undefined, false);\r\n                offset += indiceArray[index];\r\n                index++;\r\n            }\r\n\r\n            for (const subMesh of meshSubclass.subMeshes) {\r\n                subMesh.refreshBoundingInfo();\r\n            }\r\n\r\n            meshSubclass.computeWorldMatrix(true);\r\n        }\r\n\r\n        if (multiMultiMaterials) {\r\n            const newMultiMaterial = new MultiMaterial(source.name + \"_merged\", source.getScene());\r\n            newMultiMaterial.subMaterials = materialArray;\r\n            for (let subIndex = 0; subIndex < meshSubclass.subMeshes.length; subIndex++) {\r\n                meshSubclass.subMeshes[subIndex].materialIndex = materialIndexArray[subIndex];\r\n            }\r\n            meshSubclass.material = newMultiMaterial;\r\n        } else {\r\n            meshSubclass.material = source.material;\r\n        }\r\n\r\n        return meshSubclass;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public addInstance(instance: InstancedMesh) {\r\n        instance._indexInSourceMeshInstanceArray = this.instances.length;\r\n        this.instances.push(instance);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public removeInstance(instance: InstancedMesh) {\r\n        // Remove from mesh\r\n        const index = instance._indexInSourceMeshInstanceArray;\r\n        if (index != -1) {\r\n            if (index !== this.instances.length - 1) {\r\n                const last = this.instances[this.instances.length - 1];\r\n                this.instances[index] = last;\r\n                last._indexInSourceMeshInstanceArray = index;\r\n            }\r\n\r\n            instance._indexInSourceMeshInstanceArray = -1;\r\n            this.instances.pop();\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _shouldConvertRHS() {\r\n        return this.overrideMaterialSideOrientation === Material.CounterClockWiseSideOrientation;\r\n    }\r\n\r\n    /** @internal */\r\n    public _getRenderingFillMode(fillMode: number): number {\r\n        const scene = this.getScene();\r\n\r\n        if (scene.forcePointsCloud) return Material.PointFillMode;\r\n\r\n        if (scene.forceWireframe) return Material.WireFrameFillMode;\r\n\r\n        return this.overrideRenderingFillMode ?? fillMode;\r\n    }\r\n\r\n    // deprecated methods\r\n    /**\r\n     * Sets the mesh material by the material or multiMaterial `id` property\r\n     * @param id is a string identifying the material or the multiMaterial\r\n     * @returns the current mesh\r\n     * @deprecated Please use MeshBuilder instead Please use setMaterialById instead\r\n     */\r\n    public setMaterialByID(id: string): Mesh {\r\n        return this.setMaterialById(id);\r\n    }\r\n\r\n    /**\r\n     * Creates a ribbon mesh.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param\r\n     * @param name defines the name of the mesh to create\r\n     * @param pathArray is a required array of paths, what are each an array of successive Vector3. The pathArray parameter depicts the ribbon geometry.\r\n     * @param closeArray creates a seam between the first and the last paths of the path array (default is false)\r\n     * @param closePath creates a seam between the first and the last points of each path of the path array\r\n     * @param offset is taken in account only if the `pathArray` is containing a single path\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @param instance defines an instance of an existing Ribbon object to be updated with the passed `pathArray` parameter (https://doc.babylonjs.com/how_to/How_to_dynamically_morph_a_mesh#ribbon)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateRibbon(\r\n        name: string,\r\n        pathArray: Vector3[][],\r\n        closeArray: boolean,\r\n        closePath: boolean,\r\n        offset: number,\r\n        scene?: Scene,\r\n        updatable?: boolean,\r\n        sideOrientation?: number,\r\n        instance?: Mesh\r\n    ): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a plane polygonal mesh.  By default, this is a disc.\r\n     * @param name defines the name of the mesh to create\r\n     * @param radius sets the radius size (float) of the polygon (default 0.5)\r\n     * @param tessellation sets the number of polygon sides (positive integer, default 64). So a tessellation valued to 3 will build a triangle, to 4 a square, etc\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateDisc(name: string, radius: number, tessellation: number, scene: Nullable<Scene>, updatable?: boolean, sideOrientation?: number): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a box mesh.\r\n     * @param name defines the name of the mesh to create\r\n     * @param size sets the size (float) of each box side (default 1)\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateBox(name: string, size: number, scene: Nullable<Scene>, updatable?: boolean, sideOrientation?: number): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a sphere mesh.\r\n     * @param name defines the name of the mesh to create\r\n     * @param segments sets the sphere number of horizontal stripes (positive integer, default 32)\r\n     * @param diameter sets the diameter size (float) of the sphere (default 1)\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateSphere(name: string, segments: number, diameter: number, scene?: Scene, updatable?: boolean, sideOrientation?: number): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a hemisphere mesh.\r\n     * @param name defines the name of the mesh to create\r\n     * @param segments sets the sphere number of horizontal stripes (positive integer, default 32)\r\n     * @param diameter sets the diameter size (float) of the sphere (default 1)\r\n     * @param scene defines the hosting scene\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateHemisphere(name: string, segments: number, diameter: number, scene?: Scene): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a cylinder or a cone mesh.\r\n     * @param name defines the name of the mesh to create\r\n     * @param height sets the height size (float) of the cylinder/cone (float, default 2)\r\n     * @param diameterTop set the top cap diameter (floats, default 1)\r\n     * @param diameterBottom set the bottom cap diameter (floats, default 1). This value can't be zero\r\n     * @param tessellation sets the number of cylinder sides (positive integer, default 24). Set it to 3 to get a prism for instance\r\n     * @param subdivisions sets the number of rings along the cylinder height (positive integer, default 1)\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateCylinder(\r\n        name: string,\r\n        height: number,\r\n        diameterTop: number,\r\n        diameterBottom: number,\r\n        tessellation: number,\r\n        subdivisions: any,\r\n        scene?: Scene,\r\n        updatable?: any,\r\n        sideOrientation?: number\r\n    ): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    // Torus  (Code from SharpDX.org)\r\n    /**\r\n     * Creates a torus mesh.\r\n     * @param name defines the name of the mesh to create\r\n     * @param diameter sets the diameter size (float) of the torus (default 1)\r\n     * @param thickness sets the diameter size of the tube of the torus (float, default 0.5)\r\n     * @param tessellation sets the number of torus sides (positive integer, default 16)\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateTorus(name: string, diameter: number, thickness: number, tessellation: number, scene?: Scene, updatable?: boolean, sideOrientation?: number): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a torus knot mesh.\r\n     * @param name defines the name of the mesh to create\r\n     * @param radius sets the global radius size (float) of the torus knot (default 2)\r\n     * @param tube sets the diameter size of the tube of the torus (float, default 0.5)\r\n     * @param radialSegments sets the number of sides on each tube segments (positive integer, default 32)\r\n     * @param tubularSegments sets the number of tubes to decompose the knot into (positive integer, default 32)\r\n     * @param p the number of windings on X axis (positive integers, default 2)\r\n     * @param q the number of windings on Y axis (positive integers, default 3)\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateTorusKnot(\r\n        name: string,\r\n        radius: number,\r\n        tube: number,\r\n        radialSegments: number,\r\n        tubularSegments: number,\r\n        p: number,\r\n        q: number,\r\n        scene?: Scene,\r\n        updatable?: boolean,\r\n        sideOrientation?: number\r\n    ): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a line mesh..\r\n     * @param name defines the name of the mesh to create\r\n     * @param points is an array successive Vector3\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param instance is an instance of an existing LineMesh object to be updated with the passed `points` parameter (https://doc.babylonjs.com/how_to/How_to_dynamically_morph_a_mesh#lines-and-dashedlines).\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateLines(name: string, points: Vector3[], scene: Nullable<Scene>, updatable: boolean, instance?: Nullable<LinesMesh>): LinesMesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a dashed line mesh.\r\n     * @param name defines the name of the mesh to create\r\n     * @param points is an array successive Vector3\r\n     * @param dashSize is the size of the dashes relatively the dash number (positive float, default 3)\r\n     * @param gapSize is the size of the gap between two successive dashes relatively the dash number (positive float, default 1)\r\n     * @param dashNb is the intended total number of dashes (positive integer, default 200)\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param instance is an instance of an existing LineMesh object to be updated with the passed `points` parameter (https://doc.babylonjs.com/how_to/How_to_dynamically_morph_a_mesh#lines-and-dashedlines)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateDashedLines(\r\n        name: string,\r\n        points: Vector3[],\r\n        dashSize: number,\r\n        gapSize: number,\r\n        dashNb: number,\r\n        scene: Nullable<Scene>,\r\n        updatable?: boolean,\r\n        instance?: LinesMesh\r\n    ): LinesMesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a polygon mesh.Please consider using the same method from the MeshBuilder class instead\r\n     * The polygon's shape will depend on the input parameters and is constructed parallel to a ground mesh.\r\n     * The parameter `shape` is a required array of successive Vector3 representing the corners of the polygon in th XoZ plane, that is y = 0 for all vectors.\r\n     * You can set the mesh side orientation with the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.\r\n     * Remember you can only change the shape positions, not their number when updating a polygon.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param#non-regular-polygon\r\n     * @param name defines the name of the mesh to create\r\n     * @param shape is a required array of successive Vector3 representing the corners of the polygon in th XoZ plane, that is y = 0 for all vectors\r\n     * @param scene defines the hosting scene\r\n     * @param holes is a required array of arrays of successive Vector3 used to defines holes in the polygon\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @param earcutInjection can be used to inject your own earcut reference\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreatePolygon(name: string, shape: Vector3[], scene: Scene, holes?: Vector3[][], updatable?: boolean, sideOrientation?: number, earcutInjection?: any): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates an extruded polygon mesh, with depth in the Y direction..\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param#extruded-non-regular-polygon\r\n     * @param name defines the name of the mesh to create\r\n     * @param shape is a required array of successive Vector3 representing the corners of the polygon in th XoZ plane, that is y = 0 for all vectors\r\n     * @param depth defines the height of extrusion\r\n     * @param scene defines the hosting scene\r\n     * @param holes is a required array of arrays of successive Vector3 used to defines holes in the polygon\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @param earcutInjection can be used to inject your own earcut reference\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static ExtrudePolygon(\r\n        name: string,\r\n        shape: Vector3[],\r\n        depth: number,\r\n        scene: Scene,\r\n        holes?: Vector3[][],\r\n        updatable?: boolean,\r\n        sideOrientation?: number,\r\n        earcutInjection?: any\r\n    ): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates an extruded shape mesh.\r\n     * The extrusion is a parametric shape. It has no predefined shape. Its final shape will depend on the input parameters.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param#extruded-shapes\r\n     * @param name defines the name of the mesh to create\r\n     * @param shape is a required array of successive Vector3. This array depicts the shape to be extruded in its local space : the shape must be designed in the xOy plane and will be extruded along the Z axis\r\n     * @param path is a required array of successive Vector3. This is the axis curve the shape is extruded along\r\n     * @param scale is the value to scale the shape\r\n     * @param rotation is the angle value to rotate the shape each step (each path point), from the former step (so rotation added each step) along the curve\r\n     * @param cap sets the way the extruded shape is capped. Possible values : Mesh.NO_CAP (default), Mesh.CAP_START, Mesh.CAP_END, Mesh.CAP_ALL\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @param instance is an instance of an existing ExtrudedShape object to be updated with the passed `shape`, `path`, `scale` or `rotation` parameters (https://doc.babylonjs.com/how_to/How_to_dynamically_morph_a_mesh#extruded-shape)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static ExtrudeShape(\r\n        name: string,\r\n        shape: Vector3[],\r\n        path: Vector3[],\r\n        scale: number,\r\n        rotation: number,\r\n        cap: number,\r\n        scene: Nullable<Scene>,\r\n        updatable?: boolean,\r\n        sideOrientation?: number,\r\n        instance?: Mesh\r\n    ): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates an custom extruded shape mesh.\r\n     * The custom extrusion is a parametric shape.\r\n     * It has no predefined shape. Its final shape will depend on the input parameters.\r\n     *\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param#extruded-shapes\r\n     * @param name defines the name of the mesh to create\r\n     * @param shape is a required array of successive Vector3. This array depicts the shape to be extruded in its local space : the shape must be designed in the xOy plane and will be extruded along the Z axis\r\n     * @param path is a required array of successive Vector3. This is the axis curve the shape is extruded along\r\n     * @param scaleFunction is a custom Javascript function called on each path point\r\n     * @param rotationFunction is a custom Javascript function called on each path point\r\n     * @param ribbonCloseArray forces the extrusion underlying ribbon to close all the paths in its `pathArray`\r\n     * @param ribbonClosePath forces the extrusion underlying ribbon to close its `pathArray`\r\n     * @param cap sets the way the extruded shape is capped. Possible values : Mesh.NO_CAP (default), Mesh.CAP_START, Mesh.CAP_END, Mesh.CAP_ALL\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @param instance is an instance of an existing ExtrudedShape object to be updated with the passed `shape`, `path`, `scale` or `rotation` parameters (https://doc.babylonjs.com/features/featuresDeepDive/mesh/dynamicMeshMorph#extruded-shape)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static ExtrudeShapeCustom(\r\n        name: string,\r\n        shape: Vector3[],\r\n        path: Vector3[],\r\n        scaleFunction: Nullable<{ (i: number, distance: number): number }>,\r\n        rotationFunction: Nullable<{ (i: number, distance: number): number }>,\r\n        ribbonCloseArray: boolean,\r\n        ribbonClosePath: boolean,\r\n        cap: number,\r\n        scene: Scene,\r\n        updatable?: boolean,\r\n        sideOrientation?: number,\r\n        instance?: Mesh\r\n    ): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates lathe mesh.\r\n     * The lathe is a shape with a symmetry axis : a 2D model shape is rotated around this axis to design the lathe.\r\n     * @param name defines the name of the mesh to create\r\n     * @param shape is a required array of successive Vector3. This array depicts the shape to be rotated in its local space : the shape must be designed in the xOy plane and will be rotated around the Y axis. It's usually a 2D shape, so the Vector3 z coordinates are often set to zero\r\n     * @param radius is the radius value of the lathe\r\n     * @param tessellation is the side number of the lathe.\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateLathe(name: string, shape: Vector3[], radius: number, tessellation: number, scene: Scene, updatable?: boolean, sideOrientation?: number): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a plane mesh.\r\n     * @param name defines the name of the mesh to create\r\n     * @param size sets the size (float) of both sides of the plane at once (default 1)\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreatePlane(name: string, size: number, scene: Scene, updatable?: boolean, sideOrientation?: number): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a ground mesh.\r\n     * @param name defines the name of the mesh to create\r\n     * @param width set the width of the ground\r\n     * @param height set the height of the ground\r\n     * @param subdivisions sets the number of subdivisions per side\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateGround(name: string, width: number, height: number, subdivisions: number, scene?: Scene, updatable?: boolean): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a tiled ground mesh.\r\n     * @param name defines the name of the mesh to create\r\n     * @param xmin set the ground minimum X coordinate\r\n     * @param zmin set the ground minimum Y coordinate\r\n     * @param xmax set the ground maximum X coordinate\r\n     * @param zmax set the ground maximum Z coordinate\r\n     * @param subdivisions is an object `{w: positive integer, h: positive integer}` (default `{w: 6, h: 6}`). `w` and `h` are the numbers of subdivisions on the ground width and height. Each subdivision is called a tile\r\n     * @param precision is an object `{w: positive integer, h: positive integer}` (default `{w: 2, h: 2}`). `w` and `h` are the numbers of subdivisions on the ground width and height of each tile\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateTiledGround(\r\n        name: string,\r\n        xmin: number,\r\n        zmin: number,\r\n        xmax: number,\r\n        zmax: number,\r\n        subdivisions: { w: number; h: number },\r\n        precision: { w: number; h: number },\r\n        scene: Scene,\r\n        updatable?: boolean\r\n    ): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a ground mesh from a height map.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set/height_map\r\n     * @param name defines the name of the mesh to create\r\n     * @param url sets the URL of the height map image resource\r\n     * @param width set the ground width size\r\n     * @param height set the ground height size\r\n     * @param subdivisions sets the number of subdivision per side\r\n     * @param minHeight is the minimum altitude on the ground\r\n     * @param maxHeight is the maximum altitude on the ground\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param onReady  is a callback function that will be called  once the mesh is built (the height map download can last some time)\r\n     * @param alphaFilter will filter any data where the alpha channel is below this value, defaults 0 (all data visible)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateGroundFromHeightMap(\r\n        name: string,\r\n        url: string,\r\n        width: number,\r\n        height: number,\r\n        subdivisions: number,\r\n        minHeight: number,\r\n        maxHeight: number,\r\n        scene: Scene,\r\n        updatable?: boolean,\r\n        onReady?: (mesh: GroundMesh) => void,\r\n        alphaFilter?: number\r\n    ): GroundMesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a tube mesh.\r\n     * The tube is a parametric shape.\r\n     * It has no predefined shape. Its final shape will depend on the input parameters.\r\n     *\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param\r\n     * @param name defines the name of the mesh to create\r\n     * @param path is a required array of successive Vector3. It is the curve used as the axis of the tube\r\n     * @param radius sets the tube radius size\r\n     * @param tessellation is the number of sides on the tubular surface\r\n     * @param radiusFunction is a custom function. If it is not null, it overrides the parameter `radius`. This function is called on each point of the tube path and is passed the index `i` of the i-th point and the distance of this point from the first point of the path\r\n     * @param cap sets the way the extruded shape is capped. Possible values : Mesh.NO_CAP (default), Mesh.CAP_START, Mesh.CAP_END, Mesh.CAP_ALL\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @param instance is an instance of an existing Tube object to be updated with the passed `pathArray` parameter (https://doc.babylonjs.com/how_to/How_to_dynamically_morph_a_mesh#tube)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateTube(\r\n        name: string,\r\n        path: Vector3[],\r\n        radius: number,\r\n        tessellation: number,\r\n        radiusFunction: { (i: number, distance: number): number },\r\n        cap: number,\r\n        scene: Scene,\r\n        updatable?: boolean,\r\n        sideOrientation?: number,\r\n        instance?: Mesh\r\n    ): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a polyhedron mesh.\r\n     *.\r\n     * * The parameter `type` (positive integer, max 14, default 0) sets the polyhedron type to build among the 15 embedded types. Please refer to the type sheet in the tutorial to choose the wanted type\r\n     * * The parameter `size` (positive float, default 1) sets the polygon size\r\n     * * You can overwrite the `size` on each dimension bu using the parameters `sizeX`, `sizeY` or `sizeZ` (positive floats, default to `size` value)\r\n     * * You can build other polyhedron types than the 15 embbeded ones by setting the parameter `custom` (`polyhedronObject`, default null). If you set the parameter `custom`, this overwrittes the parameter `type`\r\n     * * A `polyhedronObject` is a formatted javascript object. You'll find a full file with pre-set polyhedra here : https://github.com/BabylonJS/Extensions/tree/master/Polyhedron\r\n     * * You can set the color and the UV of each side of the polyhedron with the parameters `faceColors` (Color4, default `(1, 1, 1, 1)`) and faceUV (Vector4, default `(0, 0, 1, 1)`)\r\n     * * To understand how to set `faceUV` or `faceColors`, please read this by considering the right number of faces of your polyhedron, instead of only 6 for the box : https://doc.babylonjs.com/features/featuresDeepDive/materials/using/texturePerBoxFace\r\n     * * The parameter `flat` (boolean, default true). If set to false, it gives the polyhedron a single global face, so less vertices and shared normals. In this case, `faceColors` and `faceUV` are ignored\r\n     * * You can also set the mesh side orientation with the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation\r\n     * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n     * @param name defines the name of the mesh to create\r\n     * @param options defines the options used to create the mesh\r\n     * @param scene defines the hosting scene\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreatePolyhedron(\r\n        name: string,\r\n        options: {\r\n            type?: number;\r\n            size?: number;\r\n            sizeX?: number;\r\n            sizeY?: number;\r\n            sizeZ?: number;\r\n            custom?: any;\r\n            faceUV?: Vector4[];\r\n            faceColors?: Color4[];\r\n            updatable?: boolean;\r\n            sideOrientation?: number;\r\n        },\r\n        scene: Scene\r\n    ): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a sphere based upon an icosahedron with 20 triangular faces which can be subdivided\r\n     * * The parameter `radius` sets the radius size (float) of the icosphere (default 1)\r\n     * * You can set some different icosphere dimensions, for instance to build an ellipsoid, by using the parameters `radiusX`, `radiusY` and `radiusZ` (all by default have the same value than `radius`)\r\n     * * The parameter `subdivisions` sets the number of subdivisions (positive integer, default 4). The more subdivisions, the more faces on the icosphere whatever its size\r\n     * * The parameter `flat` (boolean, default true) gives each side its own normals. Set it to false to get a smooth continuous light reflection on the surface\r\n     * * You can also set the mesh side orientation with the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation\r\n     * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/polyhedra#icosphere\r\n     * @param name defines the name of the mesh\r\n     * @param options defines the options used to create the mesh\r\n     * @param scene defines the hosting scene\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateIcoSphere(\r\n        name: string,\r\n        options: { radius?: number; flat?: boolean; subdivisions?: number; sideOrientation?: number; updatable?: boolean },\r\n        scene: Scene\r\n    ): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a decal mesh.\r\n     *.\r\n     * A decal is a mesh usually applied as a model onto the surface of another mesh\r\n     * @param name  defines the name of the mesh\r\n     * @param sourceMesh defines the mesh receiving the decal\r\n     * @param position sets the position of the decal in world coordinates\r\n     * @param normal sets the normal of the mesh where the decal is applied onto in world coordinates\r\n     * @param size sets the decal scaling\r\n     * @param angle sets the angle to rotate the decal\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateDecal(name: string, sourceMesh: AbstractMesh, position: Vector3, normal: Vector3, size: Vector3, angle: number): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /** Creates a Capsule Mesh\r\n     * @param name defines the name of the mesh.\r\n     * @param options the constructors options used to shape the mesh.\r\n     * @param scene defines the scene the mesh is scoped to.\r\n     * @returns the capsule mesh\r\n     * @see https://doc.babylonjs.com/how_to/capsule_shape\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateCapsule(name: string, options: ICreateCapsuleOptions, scene: Scene): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Extends a mesh to a Goldberg mesh\r\n     * Warning  the mesh to convert MUST be an import of a perviously exported Goldberg mesh\r\n     * @param mesh the mesh to convert\r\n     * @returns the extended mesh\r\n     * @deprecated Please use ExtendMeshToGoldberg instead\r\n     */\r\n    public static ExtendToGoldberg(mesh: Mesh): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.Mesh\", Mesh);\r\n","/* eslint-disable @typescript-eslint/naming-convention */\r\n// \"Coroutines are computer program components that generalize subroutines for non-preemptive multitasking, by allowing execution to be suspended and resumed.\"\r\n// https://en.wikipedia.org/wiki/Coroutine\r\n\r\n// In this implementation, coroutines are typically created via generator functions (function* with yield statements).\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\r\n\r\n// In this implementation, the generator function (possibly parameterized) is referred to as a coroutine factory, and the returned iterator is referred to as the coroutine.\r\n// Technically yielding generator functions are not required - anything that implements the contract of Coroutine<T> can be run as a coroutine.\r\n\r\n// The coroutine is started with the first call to next on the iterator, it is suspended with yield statements, and it is resumed with additional calls to next on the iterator.\r\n// To create an object satisfying the Coroutine<T> contract with a generator function, it must not yield values, but rather only void via a plain \"yield;\" statement.\r\n// Coroutines can call other coroutines via:\r\n// 1. yield* someOtherCoroutine(); // If the called coroutine does not return a value\r\n// 2. const result = yield* someOtherCoroutine(); // If the called coroutine returns a value\r\n\r\n// Coroutines are run with the runCoroutine function, which takes a Coroutine<T>, a CoroutineScheduler<T>, and a success and error callback.\r\n// A scheduler is responsible for scheduling the next step of a coroutine, either synchronously or asynchronously.\r\n\r\n/**\r\n * A Coroutine<T> is the intersection of:\r\n * 1. An Iterator that yields void, returns a T, and is not passed values with calls to next.\r\n * 2. An IterableIterator of void (since it only yields void).\r\n */\r\ntype CoroutineBase<TStep, TReturn> = Iterator<TStep, TReturn, void> & IterableIterator<TStep>;\r\n/** @internal */\r\nexport type Coroutine<T> = CoroutineBase<void, T>;\r\n/** @internal */\r\nexport type AsyncCoroutine<T> = CoroutineBase<void | Promise<void>, T>;\r\n\r\n// A CoroutineStep<T> represents a single step of a coroutine, and is an IteratorResult as returned from Coroutine<T>.next().\r\n/** @internal */\r\nexport type CoroutineStep<T> = IteratorResult<void, T>;\r\n\r\n// A CoroutineScheduler<T> is responsible for scheduling the call to Coroutine<T>.next and invokes the success or error callback after next is called.\r\n/** @internal */\r\nexport type CoroutineScheduler<T> = (coroutine: AsyncCoroutine<T>, onStep: (stepResult: CoroutineStep<T>) => void, onError: (stepError: any) => void) => void;\r\n\r\n// The inline scheduler simply steps the coroutine synchronously. This is useful for running a coroutine synchronously, and also as a helper function for other schedulers.\r\n/**\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport function inlineScheduler<T>(coroutine: AsyncCoroutine<T>, onStep: (stepResult: CoroutineStep<T>) => void, onError: (stepError: any) => void) {\r\n    try {\r\n        const step = coroutine.next();\r\n\r\n        if (step.done) {\r\n            onStep(step);\r\n        } else if (!step.value) {\r\n            // NOTE: The properties of step have been narrowed, but the type of step itself is not narrowed, so the cast below is the most type safe way to deal with this without instantiating a new object to hold the values.\r\n            onStep(step as { done: typeof step.done; value: typeof step.value });\r\n        } else {\r\n            step.value.then(() => {\r\n                step.value = undefined;\r\n                onStep(step as { done: typeof step.done; value: typeof step.value });\r\n            }, onError);\r\n        }\r\n    } catch (error) {\r\n        onError(error);\r\n    }\r\n}\r\n\r\n// The yielding scheduler steps the coroutine synchronously until the specified time interval has elapsed, then yields control so other operations can be performed.\r\n// A single instance of a yielding scheduler could be shared across multiple coroutines to yield when their collective work exceeds the threshold.\r\n/**\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport function createYieldingScheduler<T>(yieldAfterMS = 25) {\r\n    let startTime: number | undefined;\r\n    return (coroutine: AsyncCoroutine<T>, onStep: (stepResult: CoroutineStep<T>) => void, onError: (stepError: any) => void) => {\r\n        const currentTime = performance.now();\r\n\r\n        if (startTime === undefined || currentTime - startTime > yieldAfterMS) {\r\n            // If this is the first coroutine step, or if the time interval has elapsed, record a new start time, and schedule the coroutine step to happen later, effectively yielding control of the execution context.\r\n            startTime = currentTime;\r\n            setTimeout(() => {\r\n                inlineScheduler(coroutine, onStep, onError);\r\n            }, 0);\r\n        } else {\r\n            // Otherwise it is not time to yield yet, so step the coroutine synchronously.\r\n            inlineScheduler(coroutine, onStep, onError);\r\n        }\r\n    };\r\n}\r\n\r\n// Runs the specified coroutine with the specified scheduler. The success or error callback will be invoked when the coroutine finishes.\r\n/**\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport function runCoroutine<T>(\r\n    coroutine: AsyncCoroutine<T>,\r\n    scheduler: CoroutineScheduler<T>,\r\n    onSuccess: (result: T) => void,\r\n    onError: (error: any) => void,\r\n    abortSignal?: AbortSignal\r\n) {\r\n    const resume = () => {\r\n        let reschedule: boolean | undefined;\r\n\r\n        const onStep = (stepResult: CoroutineStep<T>) => {\r\n            if (stepResult.done) {\r\n                // If the coroutine is done, report success.\r\n                onSuccess(stepResult.value);\r\n            } else {\r\n                // If the coroutine is not done, resume the coroutine (via the scheduler).\r\n                if (reschedule === undefined) {\r\n                    // If reschedule is undefined at this point, then the coroutine must have stepped synchronously, so just flag another loop iteration.\r\n                    reschedule = true;\r\n                } else {\r\n                    // If reschedule is defined at this point, then the coroutine must have stepped asynchronously, so call resume to restart the step loop.\r\n                    resume();\r\n                }\r\n            }\r\n        };\r\n\r\n        do {\r\n            reschedule = undefined;\r\n\r\n            if (!abortSignal || !abortSignal.aborted) {\r\n                scheduler(coroutine, onStep, onError);\r\n            } else {\r\n                onError(new Error(\"Aborted\"));\r\n            }\r\n\r\n            if (reschedule === undefined) {\r\n                // If reschedule is undefined at this point, then the coroutine must have stepped asynchronously, so stop looping and let the coroutine be resumed later.\r\n                reschedule = false;\r\n            }\r\n        } while (reschedule);\r\n    };\r\n\r\n    resume();\r\n}\r\n\r\n// Runs the specified coroutine synchronously.\r\n/**\r\n * @internal\r\n */\r\nexport function runCoroutineSync<T>(coroutine: Coroutine<T>, abortSignal?: AbortSignal): T {\r\n    // Run the coroutine with the inline scheduler, storing the returned value, or re-throwing the error (since the error callback will be called synchronously by the inline scheduler).\r\n    let result: T | undefined;\r\n    runCoroutine(\r\n        coroutine,\r\n        inlineScheduler,\r\n        (r: T) => (result = r),\r\n        (e: any) => {\r\n            throw e;\r\n        },\r\n        abortSignal\r\n    );\r\n\r\n    // Synchronously return the result of the coroutine.\r\n    return result!;\r\n}\r\n\r\n// Runs the specified coroutine asynchronously with the specified scheduler.\r\n/**\r\n * @internal\r\n */\r\nexport function runCoroutineAsync<T>(coroutine: AsyncCoroutine<T>, scheduler: CoroutineScheduler<T>, abortSignal?: AbortSignal): Promise<T> {\r\n    // Run the coroutine with a yielding scheduler, resolving or rejecting the result promise when the coroutine finishes.\r\n    return new Promise((resolve, reject) => {\r\n        runCoroutine(coroutine, scheduler, resolve, reject, abortSignal);\r\n    });\r\n}\r\n\r\n/**\r\n * Given a function that returns a Coroutine<T>, produce a function with the same parameters that returns a T.\r\n * The returned function runs the coroutine synchronously.\r\n * @param coroutineFactory A function that returns a Coroutine<T>.\r\n * @param abortSignal\r\n * @returns A function that runs the coroutine synchronously.\r\n * @internal\r\n */\r\nexport function makeSyncFunction<TParams extends unknown[], TReturn>(\r\n    coroutineFactory: (...params: TParams) => Coroutine<TReturn>,\r\n    abortSignal?: AbortSignal\r\n): (...params: TParams) => TReturn {\r\n    return (...params: TParams) => {\r\n        // Run the coroutine synchronously.\r\n        return runCoroutineSync(coroutineFactory(...params), abortSignal);\r\n    };\r\n}\r\n\r\n/**\r\n * Given a function that returns a Coroutine<T>, product a function with the same parameters that returns a Promise<T>.\r\n * The returned function runs the coroutine asynchronously, yield control of the execution context occasionally to enable a more responsive experience.\r\n * @param coroutineFactory A function that returns a Coroutine<T>.\r\n * @param scheduler\r\n * @param abortSignal\r\n * @returns A function that runs the coroutine asynchronously.\r\n * @internal\r\n */\r\nexport function makeAsyncFunction<TParams extends unknown[], TReturn>(\r\n    coroutineFactory: (...params: TParams) => AsyncCoroutine<TReturn>,\r\n    scheduler: CoroutineScheduler<TReturn>,\r\n    abortSignal?: AbortSignal\r\n): (...params: TParams) => Promise<TReturn> {\r\n    return (...params: TParams) => {\r\n        // Run the coroutine asynchronously.\r\n        return runCoroutineAsync(coroutineFactory(...params), scheduler, abortSignal);\r\n    };\r\n}\r\n"],"names":["DeviceType","PointerInput","NativePointerInput","DualShockInput","DualSenseInput","XboxInput","SwitchInput","DeviceEventFactory","CreateDeviceEvent","deviceType","deviceSlot","inputIndex","currentState","deviceInputSystem","elementToAttachTo","pointerId","Keyboard","this","_CreateKeyboardEvent","Mouse","MouseWheelX","MouseWheelY","MouseWheelZ","_CreateWheelEvent","Touch","_CreatePointerEvent","evt","_CreateMouseEvent","pointerType","buttons","pollInput","LeftClick","RightClick","MiddleClick","Move","type","button","deltaMode","DOM_DELTA_PIXEL","deltaX","deltaY","deltaZ","_CreateEvent","pointerX","Horizontal","pointerY","Vertical","movementX","movementY","offsetX","getBoundingClientRect","x","offsetY","y","DeltaHorizontal","DeltaVertical","_CheckNonCharacterKeys","clientX","clientY","key","String","fromCharCode","keyCode","isKeyboardActive","isDeviceAvailable","altKey","ctrlKey","metaKey","shiftKey","target","NativeDeviceInputSystem","onDeviceConnected","onDeviceDisconnected","onInputChanged","_nativeInput","_native","DeviceInputSystem","_createDummyNativeInput","dispose","MAX_POINTER_INPUTS","Object","keys","length","WebDeviceInputSystem","constructor","engine","_inputs","_keyboardActive","_pointerActive","_usingSafari","IsSafari","_usingMacOS","test","navigator","platform","_keyboardDownEvent","_keyboardUpEvent","_keyboardBlurEvent","_pointerMoveEvent","_pointerDownEvent","_pointerUpEvent","_pointerCancelEvent","_pointerWheelEvent","_pointerBlurEvent","_pointerMacOSChromeOutEvent","_eventsAttached","_mouseId","_isUsingFirefox","userAgent","indexOf","_isUsingChromium","_maxTouchPoints","_pointerInputClearObserver","_gamepadConnectedEvent","_gamepadDisconnectedEvent","_eventPrefix","GetPointerPrefix","_engine","_onDeviceConnected","_onDeviceDisconnected","_onInputChanged","_enableEvents","_metaKeys","_onEngineViewChanged","device","DualShock","DualSense","_updateDevice","currentValue","undefined","Warn","_elementToAttachTo","_disableEvents","inputElement","getInputElement","inputs","deviceSlotKey","tabIndex","canvasTabIndex","_handleKeyActions","_handlePointerActions","_handleGamepadActions","_checkForConnectedDevices","removeEventListener","_wheelEventName","window","onEndFrameObservable","remove","getGamepads","gamepads","gamepad","_addGamePad","matchMedia","matches","_addPointerDevice","_getGamepadDeviceType","id","index","_gamepads","Array","_registerDevice","axes","currentX","currentY","pointer","numberOfInputs","fill","_unregisterDevice","kbKey","deviceEvent","includes","push","splice","i","addEventListener","maxTouchPoints","_activeTouchIds","_getPointerType","idx","previousHorizontal","previousVertical","document","pointerLockElement","setPointerCapture","e","hasPointerCapture","releasePointerCapture","BrowserForward","createElement","onmousewheel","passiveSupported","noop","options","defineProperty","get","wheelDelta","passive","add","gp","valueOf","value","deviceName","search","Xbox","Switch","Generic","touches","InternalDeviceSourceManager","_registeredManagers","_refCount","registerManager","manager","_devices","_addDevice","_deviceInputSystem","unregisterManager","numberOfDeviceTypes","deviceSource","_removeDevice","eventData","DeviceInputEventType","EventConstants","DOM_DELTA_LINE","DOM_DELTA_PAGE","PointerEventTypes","POINTERDOWN","POINTERUP","POINTERMOVE","POINTERWHEEL","POINTERPICK","POINTERTAP","POINTERDOUBLETAP","PointerInfoBase","event","PointerInfoPre","localX","localY","super","ray","originalPickingInfo","skipOnPointerObservable","localPosition","PointerInfo","pickInfo","_pickInfo","_generatePickInfo","inputManager","_inputManager","_pickMove","_setRayOnPointerInfo","MaterialDetailMapDefines","DETAIL","DETAILDIRECTUV","DETAIL_NORMALBLENDMETHOD","DetailMapConfiguration","_markAllSubMeshesAsTexturesDirty","_enable","_isEnabled","_internalMarkAllSubMeshesAsTexturesDirty","material","addToPluginList","_texture","diffuseBlendLevel","roughnessBlendLevel","bumpLevel","_normalBlendMethod","MATERIAL_NORMALBLENDMETHOD_WHITEOUT","isEnabled","_dirtyCallbacks","isReadyForSubMesh","defines","scene","_areTexturesDirty","texturesEnabled","getCaps","standardDerivatives","DetailTextureEnabled","isReady","prepareDefines","getEngine","PrepareDefinesForMergedUV","bindForSubMesh","uniformBuffer","isFrozen","_material","useUbo","isSync","updateFloat4","coordinatesIndex","BindTextureMatrix","setTexture","hasTexture","texture","getActiveTextures","activeTextures","getAnimatables","animatables","animations","forceDisposeTextures","getClassName","getSamplers","samplers","getUniforms","ubo","name","size","rxOption","RegExp","MaterialPluginManager","_plugins","_activePlugins","_activePluginsForExtraEvents","_scene","getScene","_addPlugin","plugin","_uniformBufferLayoutBuilt","pluginClassName","_MaterialPluginClassToMainDefine","_MaterialPluginCounter","_callbackPluginEventGeneric","_handlePluginEvent","bind","sort","a","b","priority","_codeInjectionPoints","defineNamesFromPlugins","default","collectDefines","_collectPointNames","getCustomCode","_defineNamesFromPlugins","_activatePlugin","_callbackPluginEventIsReadyForSubMesh","_handlePluginEventIsReadyForSubMesh","_callbackPluginEventPrepareDefinesBeforeAttributes","_handlePluginEventPrepareDefinesBeforeAttributes","_callbackPluginEventPrepareDefines","_handlePluginEventPrepareDefines","_callbackPluginEventBindForSubMesh","_handlePluginEventBindForSubMesh","registerForExtraEvents","_callbackPluginEventHasRenderTargetTextures","_handlePluginEventHasRenderTargetTextures","_callbackPluginEventFillRenderTargetTextures","_handlePluginEventFillRenderTargetTextures","_callbackPluginEventHardBindForSubMesh","_handlePluginEventHardBindForSubMesh","getPlugin","subMesh","prepareDefinesBeforeAttributes","mesh","hardBindForSubMesh","_uniformBuffer","hasRenderTargetTextures","fillRenderTargetTextures","renderTargets","info","GetActiveTextures","GetAnimatables","HasTexture","Disposed","GetDefineNames","defineNames","PrepareEffect","fallbackRank","addFallbacks","fallbacks","getAttributes","attributes","_uniformList","uniforms","_samplerList","_uboList","uniformBuffersNames","customCode","_injectCustomCode","PrepareUniformBuffer","_uboDeclaration","_vertexDeclaration","_fragmentDeclaration","uniform","arraySize","addUniform","vertex","fragment","getUniformBuffersNames","shaderType","pointName","existingCallback","code","replace","points","processorOptions","injectedCode","resolveIncludes","shaderLanguage","GLSL","indexParameters","isFragment","shouldUseHighPrecisionShader","_shouldUseHighPrecisionShader","processor","supportsUniformBuffers","shadersRepository","GetShadersRepository","includesShadersStore","GetIncludesShadersStore","version","platformName","shaderPlatformName","processingContext","isNDCHalfZRange","useReverseDepthBuffer","processCodeAfterIncludes","_ProcessIncludes","charAt","substring","regexFlags","matchOption","exec","sourceCode","rx","match","newCode","fullPointName","OnEnginesDisposedObservable","UnregisterAllMaterialPlugins","plugins","inited","observer","RegisterMaterialPlugin","pluginName","factory","OnEventObservable","Created","existing","filter","_factory","UnregisterMaterialPlugin","onCreatedEffectParameters","effect","StandardMaterialDefines","externalProperties","MAINUV1","MAINUV2","MAINUV3","MAINUV4","MAINUV5","MAINUV6","DIFFUSE","DIFFUSEDIRECTUV","BAKED_VERTEX_ANIMATION_TEXTURE","AMBIENT","AMBIENTDIRECTUV","OPACITY","OPACITYDIRECTUV","OPACITYRGB","REFLECTION","EMISSIVE","EMISSIVEDIRECTUV","SPECULAR","SPECULARDIRECTUV","BUMP","BUMPDIRECTUV","PARALLAX","PARALLAXOCCLUSION","SPECULAROVERALPHA","CLIPPLANE","CLIPPLANE2","CLIPPLANE3","CLIPPLANE4","CLIPPLANE5","CLIPPLANE6","ALPHATEST","DEPTHPREPASS","ALPHAFROMDIFFUSE","POINTSIZE","FOG","SPECULARTERM","DIFFUSEFRESNEL","OPACITYFRESNEL","REFLECTIONFRESNEL","REFRACTIONFRESNEL","EMISSIVEFRESNEL","FRESNEL","NORMAL","TANGENT","UV1","UV2","UV3","UV4","UV5","UV6","VERTEXCOLOR","VERTEXALPHA","NUM_BONE_INFLUENCERS","BonesPerMesh","BONETEXTURE","BONES_VELOCITY_ENABLED","INSTANCES","THIN_INSTANCES","INSTANCESCOLOR","GLOSSINESS","ROUGHNESS","EMISSIVEASILLUMINATION","LINKEMISSIVEWITHDIFFUSE","REFLECTIONFRESNELFROMSPECULAR","LIGHTMAP","LIGHTMAPDIRECTUV","OBJECTSPACE_NORMALMAP","USELIGHTMAPASSHADOWMAP","REFLECTIONMAP_3D","REFLECTIONMAP_SPHERICAL","REFLECTIONMAP_PLANAR","REFLECTIONMAP_CUBIC","USE_LOCAL_REFLECTIONMAP_CUBIC","USE_LOCAL_REFRACTIONMAP_CUBIC","REFLECTIONMAP_PROJECTION","REFLECTIONMAP_SKYBOX","REFLECTIONMAP_EXPLICIT","REFLECTIONMAP_EQUIRECTANGULAR","REFLECTIONMAP_EQUIRECTANGULAR_FIXED","REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED","REFLECTIONMAP_OPPOSITEZ","INVERTCUBICMAP","LOGARITHMICDEPTH","REFRACTION","REFRACTIONMAP_3D","REFLECTIONOVERALPHA","TWOSIDEDLIGHTING","SHADOWFLOAT","MORPHTARGETS","MORPHTARGETS_NORMAL","MORPHTARGETS_TANGENT","MORPHTARGETS_UV","NUM_MORPH_INFLUENCERS","MORPHTARGETS_TEXTURE","NONUNIFORMSCALING","PREMULTIPLYALPHA","ALPHATEST_AFTERALLALPHACOMPUTATIONS","ALPHABLEND","PREPASS","PREPASS_IRRADIANCE","PREPASS_IRRADIANCE_INDEX","PREPASS_ALBEDO_SQRT","PREPASS_ALBEDO_SQRT_INDEX","PREPASS_DEPTH","PREPASS_DEPTH_INDEX","PREPASS_NORMAL","PREPASS_NORMAL_INDEX","PREPASS_POSITION","PREPASS_POSITION_INDEX","PREPASS_VELOCITY","PREPASS_VELOCITY_INDEX","PREPASS_REFLECTIVITY","PREPASS_REFLECTIVITY_INDEX","SCENE_MRT_COUNT","RGBDLIGHTMAP","RGBDREFLECTION","RGBDREFRACTION","IMAGEPROCESSING","VIGNETTE","VIGNETTEBLENDMODEMULTIPLY","VIGNETTEBLENDMODEOPAQUE","TONEMAPPING","TONEMAPPING_ACES","CONTRAST","COLORCURVES","COLORGRADING","COLORGRADING3D","SAMPLER3DGREENDEPTH","SAMPLER3DBGRMAP","DITHER","IMAGEPROCESSINGPOSTPROCESS","SKIPFINALCOLORCLAMP","MULTIVIEW","ORDER_INDEPENDENT_TRANSPARENCY","ORDER_INDEPENDENT_TRANSPARENCY_16BITS","CAMERA_ORTHOGRAPHIC","CAMERA_PERSPECTIVE","IS_REFLECTION_LINEAR","IS_REFRACTION_LINEAR","EXPOSURE","DECAL_AFTER_DETAIL","rebuild","setReflectionMode","modeToEnable","modes","mode","StandardMaterial","imageProcessingConfiguration","_imageProcessingConfiguration","_attachImageProcessingConfiguration","configuration","_imageProcessingObserver","onUpdateParameters","_markAllSubMeshesAsImageProcessingDirty","isPrePassCapable","disableDepthWrite","cameraColorCurvesEnabled","colorCurvesEnabled","cameraColorGradingEnabled","colorGradingEnabled","cameraToneMappingEnabled","toneMappingEnabled","cameraExposure","exposure","cameraContrast","contrast","cameraColorGradingTexture","colorGradingTexture","cameraColorCurves","colorCurves","canRenderToMRT","_diffuseTexture","_ambientTexture","_opacityTexture","_reflectionTexture","_emissiveTexture","_specularTexture","_bumpTexture","_lightmapTexture","_refractionTexture","ambientColor","diffuseColor","specularColor","emissiveColor","specularPower","_useAlphaFromDiffuseTexture","_useEmissiveAsIllumination","_linkEmissiveWithDiffuse","_useSpecularOverAlpha","_useReflectionOverAlpha","_disableLighting","_useObjectSpaceNormalMap","_useParallax","_useParallaxOcclusion","parallaxScaleBias","_roughness","indexOfRefraction","invertRefractionY","alphaCutOff","_useLightmapAsShadowmap","_useReflectionFresnelFromSpecular","_useGlossinessFromSpecularMapAlpha","_maxSimultaneousLights","_invertNormalMapX","_invertNormalMapY","_twoSidedLighting","_applyDecalMapAfterDetailMap","_renderTargets","_worldViewProjectionMatrix","Zero","_globalAmbientColor","_cacheHasRenderTargetTextures","detailMap","prePassConfiguration","getRenderTargetTextures","reset","ReflectionTextureEnabled","isRenderTarget","RefractionTextureEnabled","_eventInfo","useLogarithmicDepth","_useLogarithmicDepth","fragmentDepthSupported","_markAllSubMeshesAsMiscDirty","needAlphaBlending","_disableAlphaBlending","alpha","_shouldUseAlphaFromDiffuseTexture","_opacityFresnelParameters","needAlphaTesting","_forceAlphaTest","_hasAlphaChannel","_transparencyMode","MATERIAL_ALPHATEST","hasAlpha","MATERIAL_OPAQUE","getAlphaTestTexture","useInstances","buildUniformLayout","_wasPreviouslyReady","_wasPreviouslyUsingInstances","materialDefines","_isReadyForSubMesh","_needNormals","PrepareDefinesForLights","PrepareDefinesForMultiview","oit","needAlphaBlendingForMesh","useOrderIndependentTransparency","PrepareDefinesForPrePass","PrepareDefinesForOIT","_needUVs","DiffuseTextureEnabled","isReadyOrNotBlocking","AmbientTextureEnabled","OpacityTextureEnabled","getAlphaFromRGB","coordinatesMode","INVCUBIC_MODE","isCube","useRightHandedSystem","invertZ","isRGBD","EXPLICIT_MODE","PLANAR_MODE","PROJECTION_MODE","SKYBOX_MODE","SPHERICAL_MODE","EQUIRECTANGULAR_MODE","FIXED_EQUIRECTANGULAR_MODE","FIXED_EQUIRECTANGULAR_MIRRORED_MODE","CUBIC_MODE","boundingBoxSize","EmissiveTextureEnabled","LightmapTextureEnabled","SpecularTextureEnabled","BumpTextureEnabled","_backFaceCulling","alphaMode","transparencyMode","_areImageProcessingDirty","reflectionTexture","gammaSpace","refractionTexture","_areFresnelDirty","FresnelEnabled","_diffuseFresnelParameters","_emissiveFresnelParameters","_refractionFresnelParameters","_reflectionFresnelParameters","PrepareDefinesForMisc","pointsCloud","fogEnabled","_shouldTurnAlphaTestOn","PrepareDefinesForFrameBoundValues","getRenderingMesh","hasThinInstances","PrepareDefinesForAttributes","forceWasNotReadyPreviously","isDirty","lightDisposed","_areLightsDisposed","markAsProcessed","addFallback","HandleFallbacksForShadows","attribs","PositionKind","NormalKind","TangentKind","ColorKind","PrepareAttributesForBones","PrepareAttributesForInstances","PrepareAttributesForMorphTargets","PrepareAttributesForBakedVertexAnimation","shaderName","uniformBuffers","maxSimultaneousLights","maxSimultaneousMorphTargets","AddUniforms","AddSamplers","PrepareUniforms","PrepareSamplers","PrepareUniformsAndSamplersList","uniformsNames","csnrOptions","customShaderNameResolve","join","toString","previousEffect","createEffect","onCompiled","onError","processFinalCode","multiTarget","_onEffectCreatedObservable","notifyObservers","allowShaderHotSwapping","markAsUnprocessed","resetCachedMaterial","setEffect","_materialContext","_renderId","getRenderId","_checkScenePerformancePriority","world","_activeEffect","getMeshUniformBuffer","bindToEffect","transferToEffect","toNormalMatrix","_normalMatrix","bindOnlyNormalMatrix","mustRebind","_forceRebindOnNextCall","_mustRebind","visibility","BindBonesParameters","bindViewProjection","diffuseFresnelParameters","updateColor4","leftColor","power","rightColor","bias","opacityFresnelParameters","toLuminance","reflectionFresnelParameters","refractionFresnelParameters","emissiveFresnelParameters","updateFloat2","level","updateFloat","roughness","updateMatrix","getReflectionTextureMatrix","cubeTexture","updateVector3","boundingBoxPosition","updateFloat3","_mirroredCameraPosition","depth","pointSize","updateColor3","BlackReadOnly","multiplyToRef","depthPeelingRenderer","bindEyePosition","_features","needToAlwaysBindUniformBuffers","_needToBindSceneUbo","lightsEnabled","BindLights","applyFog","fogMode","FOGMODE_NONE","receiveShadows","bindView","BindFogParameters","BindMorphTargetParameters","bakedVertexAnimationManager","BindLogDepth","applyByPostProcess","_afterBind","update","results","forceDisposeEffect","clone","cloneTexturesOnlyOnce","rootUrl","result","Clone","stencil","copyTo","_clonePlugins","Parse","source","parse","_parsePlugins","ColorGradingTextureEnabled","DefaultMaterialFactory","CreateGroundVertexData","indices","positions","normals","uvs","row","col","width","height","subdivisionsX","subdivisions","subdivisionsY","position","normal","z","UseOpenGLOrientationForUV","vertexData","CreateTiledGroundVertexData","xmin","zmin","xmax","zmax","w","h","precision","tileRow","tileCol","tileSize","applyTile","xTileMin","zTileMin","xTileMax","zTileMax","base","rowLength","square","CreateGroundFromHeightMapVertexData","colorFilter","alphaFilter","invert","minHeight","maxHeight","temp","pos","bufferWidth","bufferHeight","r","buffer","g","gradient","idx1","idx2","idx3","idx4","isVisibleIdx1","isVisibleIdx2","isVisibleIdx3","ComputeNormals","CreateGround","ground","_setReady","_subdivisionsX","_subdivisionsY","_width","_height","_maxX","_maxZ","_minX","_minZ","applyToMesh","updatable","CreateTiledGround","tiledGround","CreateGroundFromHeightMap","url","onReady","LastCreatedScene","LoadImage","img","isDisposed","resizeImageBitmap","offlineProvider","GroundBuilder","_CreationDataStorage","_InstanceDataStorage","visibleInstances","batchCache","_InstancesBatch","batchCacheReplacementModeInFrozenMode","instancesBufferSize","mustReturn","renderSelf","hardwareInstancedRendering","_ThinInstanceDataStorage","instancesCount","matrixBuffer","previousMatrixBuffer","matrixBufferSize","matrixData","boundingVectors","worldMatrices","_InternalMeshDataInfo","_areNormalsFrozen","_source","meshMap","_preActivateId","_LODLevels","_useLODScreenCoverage","_effectiveMaterial","_forcedInstanceCount","_overrideRenderingFillMode","Mesh","_GetDefaultSideOrientation","orientation","FRONTSIDE","useLODScreenCoverage","_internalMeshDataInfo","_sortLODLevels","computeBonesUsingShaders","_internalAbstractMeshDataInfo","_computeBonesUsingShaders","_sourcePositions","setVerticesData","_sourceNormals","_markSubMeshesAsAttributesDirty","onBeforeRenderObservable","_onBeforeRenderObservable","onBeforeBindObservable","_onBeforeBindObservable","onAfterRenderObservable","_onAfterRenderObservable","onBetweenPassObservable","_onBetweenPassObservable","onBeforeDrawObservable","_onBeforeDrawObservable","onBeforeDraw","callback","_onBeforeDrawObserver","hasInstances","instances","_thinInstanceDataStorage","forcedInstanceCount","count","overrideRenderingFillMode","fillMode","cloneMeshMap","isUnIndexed","_unIndexed","worldMatrixInstancedBuffer","_instanceDataStorage","instancesData","previousWorldMatrixInstancedBuffer","instancesPreviousData","manualUpdateOfWorldMatrixInstancedBuffer","manualUpdate","manualUpdateOfPreviousWorldMatrixInstancedBuffer","previousManualUpdate","forceWorldMatrixInstancedBufferUpdate","forceMatrixUpdates","parent","doNotCloneChildren","clonePhysicsImpostor","delayLoadState","_creationDataStorage","_geometry","_shouldGenerateFlatShading","_originalBuilderSideOrientation","DEFAULTSIDE","overrideMaterialSideOrientation","ignoreCameraMaxZ","_onBeforeDraw","isInstance","effectiveMaterial","bindOnlyWorldMatrix","DeepCopy","useClonedMeshMap","uniqueId","_ranges","ranges","prototype","hasOwnProperty","call","createAnimationRange","from","to","metadata","_internalMetadata","HasTags","AddTagsTo","GetTags","setEnabled","setPivotMatrix","getPivotMatrix","directDescendants","getDescendants","child","morphTargetManager","getPhysicsEngine","physicsEngine","getPluginVersion","impostor","getImpostorForPhysicsObject","physicsImpostor","physicsBody","particleSystems","system","emitter","skeleton","refreshBoundingInfo","computeWorldMatrix","instancedArrays","_onMeshReadyObserverAdded","unregisterOnNextCall","onMeshReadyObservable","_checkReadinessObserver","onClonedObservable","instantiateHierarchy","newParent","onNewNodeCreated","instance","getTotalVertices","doNotInstantiate","createInstance","scaling","rotationQuaternion","rotation","getChildTransformNodes","sourceMesh","newSourcedMesh","_isMesh","fullDetails","ret","_waitingParentId","ib","getIndices","vb","getVerticesData","_unBindEffect","hasLODLevels","getLODLevels","sortingOrderFactor","distanceOrScreenCoverage","addLODLevel","_masterMesh","getLODLevelAtDistance","distance","internalDataInfo","removeLODLevel","getLOD","camera","boundingSphere","bSphere","getBoundingInfo","distanceToCamera","ORTHOGRAPHIC_CAMERA","minZ","centerWorld","subtract","globalPosition","compareValue","compareSign","screenArea","meshArea","radiusWorld","Math","PI","onLODLevelSelection","_checkDelayState","_preActivate","_updateSubMeshesBoundingInfo","worldMatrixFromCache","geometry","kind","copyWhenShared","forceCopy","bypassInstanceData","data","_userInstancedBuffersStorage","vertexBuffers","getFloatData","meshes","getVertexBuffer","isVerticesDataPresent","_delayInfo","isVertexBufferUpdatable","isUpdatable","getVerticesDataKinds","forEach","kinds","getTotalIndices","isBlocked","completeCheck","forceInstanceSupport","subMeshes","mat","defaultMaterial","_storeEffectOnSubMeshes","getMaterial","currentRenderPassId","light","lightSources","generators","getShadowGenerators","iterator","values","next","done","generator","getShadowMap","renderList","renderPassIds","p","lod","areNormalsFrozen","freezeNormals","unfreezeNormals","overridenInstanceCount","sceneRenderId","_preActivateForIntermediateRendering","renderId","intermediateDefaultRenderId","_registerInstanceForRenderId","defaultRenderId","selfDefaultRenderId","previousRenderId","_afterComputeWorldMatrix","doNotSyncBoundingInfo","thinInstanceRefreshBoundingInfo","_postActivate","edgesShareWithInstances","edgesRenderer","_renderingGroup","_edgesRenderers","pushNoDuplicate","customInstances","getWorldMatrix","applySkeleton","applyMorph","hasBoundingInfo","isLocked","boundingBias","_refreshBoundingInfo","_getPositionData","_createGlobalSubMesh","force","totalVertices","totalIndices","needToRecreate","submesh","indexStart","indexCount","verticesStart","verticesCount","releaseSubMeshes","subdivide","subdivisionSize","offset","CreateFromIndices","synchronizeInstances","stride","set","RandomId","removeVerticesData","markVerticesDataAsUpdatable","setVerticesBuffer","disposeExistingBuffer","CreateGeometryForMesh","updateVerticesData","updateExtends","makeItUnique","makeGeometryUnique","updateMeshPositions","positionFunction","computeNormals","oldGeometry","copy","releaseForMesh","setIndices","updateIndices","gpuMemoryOnly","toLeftHanded","_bind","allowInstancedRendering","indexToBind","isUsingTextureForTargets","_getRenderingFillMode","PointFillMode","WireFrameFillMode","_getLinesIndexBuffer","TriangleFillMode","getIndexBuffer","vertexArrayObjects","_draw","getVertexBuffers","drawArraysType","drawElementsType","_linesIndexCount","registerBeforeRender","func","unregisterBeforeRender","removeCallback","registerAfterRender","unregisterAfterRender","_getInstancesRenderList","subMeshId","isReplacementMode","previousBatch","isInIntermediateRendering","_isInIntermediateRendering","onlyForInstances","_onlyForInstancesIntermediate","_onlyForInstances","isVisible","currentRenderId","_renderWithInstances","batch","_id","visibleInstanceCount","instanceStorage","currentInstancesBufferSize","instancesBuffer","instancesPreviousBuffer","bufferSize","Float32Array","needsPreviousWorldMatrices","needUpdateBuffer","masterMeshPreviousWorldMatrix","copyToArray","copyFrom","INSTANCEDMESH_SORT_TRANSPARENT","activeCamera","cameraPosition","instanceIndex","instanceMesh","_distanceToCamera","Distance","m1","m2","matrix","_previousWorldMatrix","strides","sizes","vertexArrayObject","createVertexBuffer","_invalidateInstanceVertexArrayObject","updateDirectly","_processInstancedBuffers","_activeIndices","addCount","_currentDrawContext","useInstancing","unbindInstanceAttributes","_renderWithThinInstances","previousMatrixData","_thinInstanceCreateMatrixBuffer","_processRendering","renderingMesh","instanceCount","visibleInstancesForSubMesh","_rebuild","_freeze","_unFreeze","render","enableAlphaMode","effectiveMeshReplacement","_isActiveIntermediate","_isActive","_checkOcclusionQuery","_occlusionDataStorage","forceRenderingWhenOccluded","oldCameraMaxZ","oldCamera","maxZ","updateTransformMatrix","getMesh","_actAsRegularMesh","instanceDataStorage","getEffect","drawWrapper","setAlphaMode","_drawWrapper","_getDrawWrapper","step","_beforeRenderingMeshStage","action","effectiveMesh","sideOrientation","backFaceCulling","mainDeterminant","_getWorldMatrixDeterminant","ClockWiseSideOrientation","CounterClockWiseSideOrientation","reverse","_preBind","forceDepthWrite","setDepthWrite","separateCullingPass","setState","zOffset","cullBackFaces","zOffsetUnits","unbind","_afterRenderingMeshStage","performancePriority","Aggressive","cleanMatrixWeights","MatricesWeightsKind","MatricesWeightsExtraKind","_normalizeSkinWeightsAndExtra","_normalizeSkinFourWeights","matricesWeights","numWeights","t","recip","matricesWeightsExtra","validateSkinning","skinned","valid","report","numberNotSorted","missingWeights","maxUsedWeights","numberNotNormalized","numInfluences","usedWeightCounts","lastWeight","usedWeights","d","tolerance","abs","numBones","bones","matricesIndices","MatricesIndicesKind","matricesIndicesExtra","MatricesIndicesExtraKind","numBadBoneIndices","load","_queueLoad","addPendingData","getBinaryData","delayLoadingFile","LoadFile","ArrayBuffer","_delayLoadingFunction","JSON","_syncSubMeshes","removePendingData","isInFrustum","frustumPlanes","setMaterialById","materials","multiMaterials","bakeTransformIntoVertices","transform","submeshes","_resetPointsArrayCache","TransformCoordinatesFromFloatsToRef","toArray","TransformNormalFromFloatsToRef","normalize","determinant","flipFaces","bakeCurrentTransformIntoVertices","bakeIndependentlyOfChildren","resetLocalMatrix","_positions","_generatePointsArray","doNotRecurse","disposeMaterialAndTextures","clear","abstractMesh","_disposeInstanceSpecificData","_disposeThinInstanceSpecificData","applyDisplacementMap","onSuccess","uvOffset","uvScale","forceUpdate","heightMapWidth","heightMapHeight","context","createCanvas","getContext","drawImage","getImageData","applyDisplacementMapFromBuffer","UVKind","uv","FromArrayToRef","scaleInPlace","_getFlattenedNormals","normalsCount","flipNormalGeneration","p1","FromArray","p2","p3","p1p2","p3p2","Normalize","Cross","localIndex","_convertToUnIndexedMesh","flattenNormals","separateVertices","newData","previousSubmeshes","slice","vertexBuffer","getStrideSize","targetIndex","numTargets","getTarget","getPositions","setPositions","getNormals","setNormals","tangents","getTangents","setTangents","getUVs","setUVs","synchronize","previousOne","AddToMesh","materialIndex","convertToFlatShadedMesh","convertToUnIndexedMesh","flipNormals","vertex_data","ExtractFromMesh","increaseVertices","numberPerEdge","currentIndices","isArray","segments","tempIndices","deltaPosition","deltaNormal","deltaUV","vertexIndex","side","len","uvPtr","normalsPtr","positionPtr","j","k","forceSharedVertices","currentUVs","currentPositions","currentColors","colors","currentMatrixIndices","currentMatrixWeights","currentMatrixIndicesExtra","currentMatrixWeightsExtra","matrixIndices","matrixWeights","matrixIndicesExtra","matrixWeightsExtra","pstring","indexPtr","uniquePositions","ptr","facet","_instancedMeshFactory","_PhysicsImpostorParser","physicObject","jsonObject","optimizeIndices","successCallback","vectorPositions","dupes","SyncAsyncForLoop","iteration","realPos","testedPosition","againstPosition","equals","originalSubMeshes","serialize","serializationObject","tags","asArray","_postMultiplyPivotMatrix","pivotMatrix","localMatrix","infiniteDistance","pickable","isPickable","billboardMode","checkCollisions","isBlocker","_serializeAsParent","geometryUniqueId","geometryId","subIndex","doNotSerialize","materialUniqueId","materialId","morphTargetManagerId","skeletonId","numBoneInfluencers","_getComponent","NAME_PHYSICSENGINE","getPhysicsImpostor","physicsMass","getParam","physicsFriction","physicsRestitution","serializationInstance","actionManager","actions","AppendSerializedAnimations","serializeAnimationRanges","thinInstances","enablePicking","thinInstanceEnablePicking","_userThinInstanceBuffersStorage","userThinInstance","layerMask","alphaIndex","hasVertexAlpha","overlayAlpha","overlayColor","renderOverlay","_syncGeometryWithMorphTargetManager","_morphTargetManager","vertexCount","Error","numInfluencers","morphTarget","getActiveTarget","parsedMesh","_LinesMeshParser","_GroundMeshParser","_GoldbergMeshParser","_GreasedLineMeshParser","_TrailMeshParser","_waitingParsedUniqueId","setPreTransformMatrix","showBoundingBox","showSubMeshesBoundingBox","useFlatShading","freezeWorldMatrix","_waitingData","parentId","parentInstanceIndex","_waitingParentInstanceIndex","buildBoundingInfo","boundingBoxMinimum","boundingBoxMaximum","_binaryInfo","hasUVs","hasUVs2","UV2Kind","hasUVs3","UV3Kind","hasUVs4","UV4Kind","hasUVs5","UV5Kind","hasUVs6","UV6Kind","hasColors","hasMatricesIndices","hasMatricesWeights","_ImportGeometry","ForceFullSceneLoadingForIncremental","_waitingMaterialId","getMorphTargetManagerById","getLastSkeletonById","animationIndex","parsedAnimation","internalClass","N","ParseAnimationRanges","autoAnimate","beginAnimation","autoAnimateFrom","autoAnimateTo","autoAnimateLoop","autoAnimateSpeed","isNaN","parseInt","lodMeshIds","lods","ids","distances","lodDistances","coverages","lodCoverages","parsedInstance","thinInstanceSetBuffer","setPositionsForCPUSkinning","setNormalsForCPUSkinning","_softwareSkinningFrameId","getFrameId","hasNormals","positionsData","normalsData","matricesIndicesData","matricesWeightsData","needExtras","matricesIndicesExtraData","matricesWeightsExtraData","skeletonMatrices","getTransformMatrices","tempVector3","finalMatrix","tempMatrix","inf","matWeightIdx","weight","FromFloat32ArrayToRefScaled","floor","addToSelf","MinMax","minVector","maxVector","boundingBox","minimizeInPlace","minimumWorld","maximizeInPlace","maximumWorld","min","max","Center","meshesOrMinMaxVector","minMaxVector","MergeMeshes","disposeSource","allow32BitsIndices","meshSubclass","subdivideWithSubMeshes","multiMultiMaterials","_MergeMeshesCoroutine","MergeMeshesAsync","isAsync","Boolean","materialArray","materialIndexArray","indiceArray","currentOverrideMaterialSideOrientation","isAnInstance","matIndex","subMaterials","getVertexDataFromMesh","wm","sourceVertexData","sourceTransform","meshVertexDatas","mergeCoroutine","_mergeCoroutine","mergeCoroutineStep","applyToCoroutine","_applyToCoroutine","applyToCoroutineStep","newMultiMaterial","addInstance","_indexInSourceMeshInstanceArray","removeInstance","last","pop","_shouldConvertRHS","forcePointsCloud","forceWireframe","setMaterialByID","CreateRibbon","pathArray","closeArray","closePath","CreateDisc","radius","tessellation","CreateBox","CreateSphere","diameter","CreateHemisphere","CreateCylinder","diameterTop","diameterBottom","CreateTorus","thickness","CreateTorusKnot","tube","radialSegments","tubularSegments","q","CreateLines","CreateDashedLines","dashSize","gapSize","dashNb","CreatePolygon","shape","holes","earcutInjection","ExtrudePolygon","ExtrudeShape","path","scale","cap","ExtrudeShapeCustom","scaleFunction","rotationFunction","ribbonCloseArray","ribbonClosePath","CreateLathe","CreatePlane","CreateTube","radiusFunction","CreatePolyhedron","CreateIcoSphere","CreateDecal","angle","CreateCapsule","ExtendToGoldberg","BACKSIDE","DOUBLESIDE","NO_CAP","CAP_START","CAP_END","CAP_ALL","NO_FLIP","FLIP_TILE","ROTATE_TILE","FLIP_ROW","ROTATE_ROW","FLIP_N_ROTATE_TILE","FLIP_N_ROTATE_ROW","CENTER","LEFT","RIGHT","TOP","BOTTOM","inlineScheduler","coroutine","onStep","then","error","createYieldingScheduler","yieldAfterMS","startTime","currentTime","performance","now","setTimeout","runCoroutine","scheduler","abortSignal","resume","reschedule","stepResult","aborted","runCoroutineSync","runCoroutineAsync","Promise","resolve","reject","makeSyncFunction","coroutineFactory","params","makeAsyncFunction"],"sourceRoot":""}