{"version":3,"file":"js/897.babylonBundle.js","mappings":"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","sources":["webpack://babylonjs-typescript-webpack-template/./dev/core/src/Animations/animation.ts","webpack://babylonjs-typescript-webpack-template/./dev/core/src/Animations/easing.ts"],"sourcesContent":["import type { IEasingFunction, EasingFunction } from \"./easing\";\r\nimport { Vector3, Quaternion, Vector2, Matrix, TmpVectors } from \"../Maths/math.vector\";\r\nimport { Color3, Color4 } from \"../Maths/math.color\";\r\nimport { Scalar } from \"../Maths/math.scalar\";\r\n\r\nimport type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport { SerializationHelper } from \"../Misc/decorators\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport type { IAnimationKey } from \"./animationKey\";\r\nimport { AnimationKeyInterpolation } from \"./animationKey\";\r\nimport { AnimationRange } from \"./animationRange\";\r\nimport type { AnimationEvent } from \"./animationEvent\";\r\nimport { Node } from \"../node\";\r\nimport type { IAnimatable } from \"./animatable.interface\";\r\nimport { Size } from \"../Maths/math.size\";\r\nimport { WebRequest } from \"../Misc/webRequest\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\nimport type { Animatable } from \"./animatable\";\r\nimport type { RuntimeAnimation } from \"./runtimeAnimation\";\r\n\r\n/**\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class _IAnimationState {\r\n    key: number;\r\n    repeatCount: number;\r\n    workValue?: any;\r\n    loopMode?: number;\r\n    offsetValue?: any;\r\n    highLimitValue?: any;\r\n}\r\n\r\n/**\r\n * Class used to store any kind of animation\r\n */\r\nexport class Animation {\r\n    private static _UniqueIdGenerator = 0;\r\n\r\n    /**\r\n     * Use matrix interpolation instead of using direct key value when animating matrices\r\n     */\r\n    public static AllowMatricesInterpolation = false;\r\n\r\n    /**\r\n     * When matrix interpolation is enabled, this boolean forces the system to use Matrix.DecomposeLerp instead of Matrix.Lerp. Interpolation is more precise but slower\r\n     */\r\n    public static AllowMatrixDecomposeForInterpolation = true;\r\n\r\n    /**\r\n     * Gets or sets the unique id of the animation (the uniqueness is solely among other animations)\r\n     */\r\n    public uniqueId: number;\r\n\r\n    /** Define the Url to load snippets */\r\n    public static SnippetUrl = Constants.SnippetUrl;\r\n\r\n    /** Snippet ID if the animation was created from the snippet server */\r\n    public snippetId: string;\r\n\r\n    /**\r\n     * Stores the key frames of the animation\r\n     */\r\n    private _keys: Array<IAnimationKey>;\r\n\r\n    /**\r\n     * Stores the easing function of the animation\r\n     */\r\n    private _easingFunction: Nullable<IEasingFunction> = null;\r\n\r\n    /**\r\n     * @internal Internal use only\r\n     */\r\n    public _runtimeAnimations = new Array<RuntimeAnimation>();\r\n\r\n    /**\r\n     * The set of event that will be linked to this animation\r\n     */\r\n    private _events = new Array<AnimationEvent>();\r\n\r\n    /**\r\n     * Stores an array of target property paths\r\n     */\r\n    public targetPropertyPath: string[];\r\n\r\n    /**\r\n     * Stores the blending speed of the animation\r\n     */\r\n    public blendingSpeed = 0.01;\r\n\r\n    /**\r\n     * Stores the animation ranges for the animation\r\n     */\r\n    private _ranges: { [name: string]: Nullable<AnimationRange> } = {};\r\n\r\n    /**\r\n     * @internal Internal use\r\n     */\r\n    public static _PrepareAnimation(\r\n        name: string,\r\n        targetProperty: string,\r\n        framePerSecond: number,\r\n        totalFrame: number,\r\n        from: any,\r\n        to: any,\r\n        loopMode?: number,\r\n        easingFunction?: EasingFunction\r\n    ): Nullable<Animation> {\r\n        let dataType = undefined;\r\n\r\n        if (!isNaN(parseFloat(from)) && isFinite(from)) {\r\n            dataType = Animation.ANIMATIONTYPE_FLOAT;\r\n        } else if (from instanceof Quaternion) {\r\n            dataType = Animation.ANIMATIONTYPE_QUATERNION;\r\n        } else if (from instanceof Vector3) {\r\n            dataType = Animation.ANIMATIONTYPE_VECTOR3;\r\n        } else if (from instanceof Vector2) {\r\n            dataType = Animation.ANIMATIONTYPE_VECTOR2;\r\n        } else if (from instanceof Color3) {\r\n            dataType = Animation.ANIMATIONTYPE_COLOR3;\r\n        } else if (from instanceof Color4) {\r\n            dataType = Animation.ANIMATIONTYPE_COLOR4;\r\n        } else if (from instanceof Size) {\r\n            dataType = Animation.ANIMATIONTYPE_SIZE;\r\n        }\r\n\r\n        if (dataType == undefined) {\r\n            return null;\r\n        }\r\n\r\n        const animation = new Animation(name, targetProperty, framePerSecond, dataType, loopMode);\r\n\r\n        const keys: Array<IAnimationKey> = [\r\n            { frame: 0, value: from },\r\n            { frame: totalFrame, value: to },\r\n        ];\r\n        animation.setKeys(keys);\r\n\r\n        if (easingFunction !== undefined) {\r\n            animation.setEasingFunction(easingFunction);\r\n        }\r\n\r\n        return animation;\r\n    }\r\n\r\n    /**\r\n     * Sets up an animation\r\n     * @param property The property to animate\r\n     * @param animationType The animation type to apply\r\n     * @param framePerSecond The frames per second of the animation\r\n     * @param easingFunction The easing function used in the animation\r\n     * @returns The created animation\r\n     */\r\n    public static CreateAnimation(property: string, animationType: number, framePerSecond: number, easingFunction: EasingFunction): Animation {\r\n        const animation: Animation = new Animation(property + \"Animation\", property, framePerSecond, animationType, Animation.ANIMATIONLOOPMODE_CONSTANT);\r\n\r\n        animation.setEasingFunction(easingFunction);\r\n\r\n        return animation;\r\n    }\r\n\r\n    /**\r\n     * Create and start an animation on a node\r\n     * @param name defines the name of the global animation that will be run on all nodes\r\n     * @param target defines the target where the animation will take place\r\n     * @param targetProperty defines property to animate\r\n     * @param framePerSecond defines the number of frame per second yo use\r\n     * @param totalFrame defines the number of frames in total\r\n     * @param from defines the initial value\r\n     * @param to defines the final value\r\n     * @param loopMode defines which loop mode you want to use (off by default)\r\n     * @param easingFunction defines the easing function to use (linear by default)\r\n     * @param onAnimationEnd defines the callback to call when animation end\r\n     * @param scene defines the hosting scene\r\n     * @returns the animatable created for this animation\r\n     */\r\n    public static CreateAndStartAnimation(\r\n        name: string,\r\n        target: any,\r\n        targetProperty: string,\r\n        framePerSecond: number,\r\n        totalFrame: number,\r\n        from: any,\r\n        to: any,\r\n        loopMode?: number,\r\n        easingFunction?: EasingFunction,\r\n        onAnimationEnd?: () => void,\r\n        scene?: Scene\r\n    ): Nullable<Animatable> {\r\n        const animation = Animation._PrepareAnimation(name, targetProperty, framePerSecond, totalFrame, from, to, loopMode, easingFunction);\r\n\r\n        if (!animation) {\r\n            return null;\r\n        }\r\n\r\n        if (target.getScene) {\r\n            scene = target.getScene();\r\n        }\r\n\r\n        if (!scene) {\r\n            return null;\r\n        }\r\n\r\n        return scene.beginDirectAnimation(target, [animation], 0, totalFrame, animation.loopMode === 1, 1.0, onAnimationEnd);\r\n    }\r\n\r\n    /**\r\n     * Create and start an animation on a node and its descendants\r\n     * @param name defines the name of the global animation that will be run on all nodes\r\n     * @param node defines the root node where the animation will take place\r\n     * @param directDescendantsOnly if true only direct descendants will be used, if false direct and also indirect (children of children, an so on in a recursive manner) descendants will be used\r\n     * @param targetProperty defines property to animate\r\n     * @param framePerSecond defines the number of frame per second to use\r\n     * @param totalFrame defines the number of frames in total\r\n     * @param from defines the initial value\r\n     * @param to defines the final value\r\n     * @param loopMode defines which loop mode you want to use (off by default)\r\n     * @param easingFunction defines the easing function to use (linear by default)\r\n     * @param onAnimationEnd defines the callback to call when an animation ends (will be called once per node)\r\n     * @returns the list of animatables created for all nodes\r\n     * @example https://www.babylonjs-playground.com/#MH0VLI\r\n     */\r\n    public static CreateAndStartHierarchyAnimation(\r\n        name: string,\r\n        node: Node,\r\n        directDescendantsOnly: boolean,\r\n        targetProperty: string,\r\n        framePerSecond: number,\r\n        totalFrame: number,\r\n        from: any,\r\n        to: any,\r\n        loopMode?: number,\r\n        easingFunction?: EasingFunction,\r\n        onAnimationEnd?: () => void\r\n    ): Nullable<Animatable[]> {\r\n        const animation = Animation._PrepareAnimation(name, targetProperty, framePerSecond, totalFrame, from, to, loopMode, easingFunction);\r\n\r\n        if (!animation) {\r\n            return null;\r\n        }\r\n\r\n        const scene = node.getScene();\r\n        return scene.beginDirectHierarchyAnimation(node, directDescendantsOnly, [animation], 0, totalFrame, animation.loopMode === 1, 1.0, onAnimationEnd);\r\n    }\r\n\r\n    /**\r\n     * Creates a new animation, merges it with the existing animations and starts it\r\n     * @param name Name of the animation\r\n     * @param node Node which contains the scene that begins the animations\r\n     * @param targetProperty Specifies which property to animate\r\n     * @param framePerSecond The frames per second of the animation\r\n     * @param totalFrame The total number of frames\r\n     * @param from The frame at the beginning of the animation\r\n     * @param to The frame at the end of the animation\r\n     * @param loopMode Specifies the loop mode of the animation\r\n     * @param easingFunction (Optional) The easing function of the animation, which allow custom mathematical formulas for animations\r\n     * @param onAnimationEnd Callback to run once the animation is complete\r\n     * @returns Nullable animation\r\n     */\r\n    public static CreateMergeAndStartAnimation(\r\n        name: string,\r\n        node: Node,\r\n        targetProperty: string,\r\n        framePerSecond: number,\r\n        totalFrame: number,\r\n        from: any,\r\n        to: any,\r\n        loopMode?: number,\r\n        easingFunction?: EasingFunction,\r\n        onAnimationEnd?: () => void\r\n    ): Nullable<Animatable> {\r\n        const animation = Animation._PrepareAnimation(name, targetProperty, framePerSecond, totalFrame, from, to, loopMode, easingFunction);\r\n\r\n        if (!animation) {\r\n            return null;\r\n        }\r\n\r\n        node.animations.push(animation);\r\n\r\n        return node.getScene().beginAnimation(node, 0, totalFrame, animation.loopMode === 1, 1.0, onAnimationEnd);\r\n    }\r\n\r\n    /**\r\n     * Convert the keyframes for all animations belonging to the group to be relative to a given reference frame.\r\n     * @param sourceAnimation defines the Animation containing keyframes to convert\r\n     * @param referenceFrame defines the frame that keyframes in the range will be relative to\r\n     * @param range defines the name of the AnimationRange belonging to the Animation to convert\r\n     * @param cloneOriginal defines whether or not to clone the animation and convert the clone or convert the original animation (default is false)\r\n     * @param clonedName defines the name of the resulting cloned Animation if cloneOriginal is true\r\n     * @returns a new Animation if cloneOriginal is true or the original Animation if cloneOriginal is false\r\n     */\r\n    public static MakeAnimationAdditive(sourceAnimation: Animation, referenceFrame = 0, range?: string, cloneOriginal = false, clonedName?: string): Animation {\r\n        let animation = sourceAnimation;\r\n\r\n        if (cloneOriginal) {\r\n            animation = sourceAnimation.clone();\r\n            animation.name = clonedName || animation.name;\r\n        }\r\n\r\n        if (!animation._keys.length) {\r\n            return animation;\r\n        }\r\n\r\n        referenceFrame = referenceFrame >= 0 ? referenceFrame : 0;\r\n        let startIndex = 0;\r\n        const firstKey = animation._keys[0];\r\n        let endIndex = animation._keys.length - 1;\r\n        const lastKey = animation._keys[endIndex];\r\n        const valueStore = {\r\n            referenceValue: firstKey.value,\r\n            referencePosition: TmpVectors.Vector3[0],\r\n            referenceQuaternion: TmpVectors.Quaternion[0],\r\n            referenceScaling: TmpVectors.Vector3[1],\r\n            keyPosition: TmpVectors.Vector3[2],\r\n            keyQuaternion: TmpVectors.Quaternion[1],\r\n            keyScaling: TmpVectors.Vector3[3],\r\n        };\r\n        let referenceFound = false;\r\n        let from = firstKey.frame;\r\n        let to = lastKey.frame;\r\n        if (range) {\r\n            const rangeValue = animation.getRange(range);\r\n\r\n            if (rangeValue) {\r\n                from = rangeValue.from;\r\n                to = rangeValue.to;\r\n            }\r\n        }\r\n        let fromKeyFound = firstKey.frame === from;\r\n        let toKeyFound = lastKey.frame === to;\r\n\r\n        // There's only one key, so use it\r\n        if (animation._keys.length === 1) {\r\n            const value = animation._getKeyValue(animation._keys[0]);\r\n            valueStore.referenceValue = value.clone ? value.clone() : value;\r\n            referenceFound = true;\r\n        }\r\n\r\n        // Reference frame is before the first frame, so just use the first frame\r\n        else if (referenceFrame <= firstKey.frame) {\r\n            const value = animation._getKeyValue(firstKey.value);\r\n            valueStore.referenceValue = value.clone ? value.clone() : value;\r\n            referenceFound = true;\r\n        }\r\n\r\n        // Reference frame is after the last frame, so just use the last frame\r\n        else if (referenceFrame >= lastKey.frame) {\r\n            const value = animation._getKeyValue(lastKey.value);\r\n            valueStore.referenceValue = value.clone ? value.clone() : value;\r\n            referenceFound = true;\r\n        }\r\n\r\n        // Find key bookends, create them if they don't exist\r\n        let index = 0;\r\n        while (!referenceFound || !fromKeyFound || (!toKeyFound && index < animation._keys.length - 1)) {\r\n            const currentKey = animation._keys[index];\r\n            const nextKey = animation._keys[index + 1];\r\n\r\n            // If reference frame wasn't found yet, check if we can interpolate to it\r\n            if (!referenceFound && referenceFrame >= currentKey.frame && referenceFrame <= nextKey.frame) {\r\n                let value;\r\n\r\n                if (referenceFrame === currentKey.frame) {\r\n                    value = animation._getKeyValue(currentKey.value);\r\n                } else if (referenceFrame === nextKey.frame) {\r\n                    value = animation._getKeyValue(nextKey.value);\r\n                } else {\r\n                    const animationState = {\r\n                        key: index,\r\n                        repeatCount: 0,\r\n                        loopMode: this.ANIMATIONLOOPMODE_CONSTANT,\r\n                    };\r\n                    value = animation._interpolate(referenceFrame, animationState);\r\n                }\r\n\r\n                valueStore.referenceValue = value.clone ? value.clone() : value;\r\n                referenceFound = true;\r\n            }\r\n\r\n            // If from key wasn't found yet, check if we can interpolate to it\r\n            if (!fromKeyFound && from >= currentKey.frame && from <= nextKey.frame) {\r\n                if (from === currentKey.frame) {\r\n                    startIndex = index;\r\n                } else if (from === nextKey.frame) {\r\n                    startIndex = index + 1;\r\n                } else {\r\n                    const animationState = {\r\n                        key: index,\r\n                        repeatCount: 0,\r\n                        loopMode: this.ANIMATIONLOOPMODE_CONSTANT,\r\n                    };\r\n                    const value = animation._interpolate(from, animationState);\r\n                    const key: IAnimationKey = {\r\n                        frame: from,\r\n                        value: value.clone ? value.clone() : value,\r\n                    };\r\n                    animation._keys.splice(index + 1, 0, key);\r\n                    startIndex = index + 1;\r\n                }\r\n\r\n                fromKeyFound = true;\r\n            }\r\n\r\n            // If to key wasn't found yet, check if we can interpolate to it\r\n            if (!toKeyFound && to >= currentKey.frame && to <= nextKey.frame) {\r\n                if (to === currentKey.frame) {\r\n                    endIndex = index;\r\n                } else if (to === nextKey.frame) {\r\n                    endIndex = index + 1;\r\n                } else {\r\n                    const animationState = {\r\n                        key: index,\r\n                        repeatCount: 0,\r\n                        loopMode: this.ANIMATIONLOOPMODE_CONSTANT,\r\n                    };\r\n                    const value = animation._interpolate(to, animationState);\r\n                    const key: IAnimationKey = {\r\n                        frame: to,\r\n                        value: value.clone ? value.clone() : value,\r\n                    };\r\n                    animation._keys.splice(index + 1, 0, key);\r\n                    endIndex = index + 1;\r\n                }\r\n\r\n                toKeyFound = true;\r\n            }\r\n\r\n            index++;\r\n        }\r\n\r\n        // Conjugate the quaternion\r\n        if (animation.dataType === Animation.ANIMATIONTYPE_QUATERNION) {\r\n            valueStore.referenceValue.normalize().conjugateInPlace();\r\n        }\r\n\r\n        // Decompose matrix and conjugate the quaternion\r\n        else if (animation.dataType === Animation.ANIMATIONTYPE_MATRIX) {\r\n            valueStore.referenceValue.decompose(valueStore.referenceScaling, valueStore.referenceQuaternion, valueStore.referencePosition);\r\n            valueStore.referenceQuaternion.normalize().conjugateInPlace();\r\n        }\r\n\r\n        // Subtract the reference value from all of the key values\r\n        for (index = startIndex; index <= endIndex; index++) {\r\n            const key = animation._keys[index];\r\n\r\n            // If this key was duplicated to create a frame 0 key, skip it because its value has already been updated\r\n            if (index && animation.dataType !== Animation.ANIMATIONTYPE_FLOAT && key.value === firstKey.value) {\r\n                continue;\r\n            }\r\n\r\n            switch (animation.dataType) {\r\n                case Animation.ANIMATIONTYPE_MATRIX:\r\n                    key.value.decompose(valueStore.keyScaling, valueStore.keyQuaternion, valueStore.keyPosition);\r\n                    valueStore.keyPosition.subtractInPlace(valueStore.referencePosition);\r\n                    valueStore.keyScaling.divideInPlace(valueStore.referenceScaling);\r\n                    valueStore.referenceQuaternion.multiplyToRef(valueStore.keyQuaternion, valueStore.keyQuaternion);\r\n                    Matrix.ComposeToRef(valueStore.keyScaling, valueStore.keyQuaternion, valueStore.keyPosition, key.value);\r\n                    break;\r\n\r\n                case Animation.ANIMATIONTYPE_QUATERNION:\r\n                    valueStore.referenceValue.multiplyToRef(key.value, key.value);\r\n                    break;\r\n\r\n                case Animation.ANIMATIONTYPE_VECTOR2:\r\n                case Animation.ANIMATIONTYPE_VECTOR3:\r\n                case Animation.ANIMATIONTYPE_COLOR3:\r\n                case Animation.ANIMATIONTYPE_COLOR4:\r\n                    key.value.subtractToRef(valueStore.referenceValue, key.value);\r\n                    break;\r\n\r\n                case Animation.ANIMATIONTYPE_SIZE:\r\n                    key.value.width -= valueStore.referenceValue.width;\r\n                    key.value.height -= valueStore.referenceValue.height;\r\n                    break;\r\n\r\n                default:\r\n                    key.value -= valueStore.referenceValue;\r\n            }\r\n        }\r\n\r\n        return animation;\r\n    }\r\n\r\n    /**\r\n     * Transition property of an host to the target Value\r\n     * @param property The property to transition\r\n     * @param targetValue The target Value of the property\r\n     * @param host The object where the property to animate belongs\r\n     * @param scene Scene used to run the animation\r\n     * @param frameRate Framerate (in frame/s) to use\r\n     * @param transition The transition type we want to use\r\n     * @param duration The duration of the animation, in milliseconds\r\n     * @param onAnimationEnd Callback trigger at the end of the animation\r\n     * @returns Nullable animation\r\n     */\r\n    public static TransitionTo(\r\n        property: string,\r\n        targetValue: any,\r\n        host: any,\r\n        scene: Scene,\r\n        frameRate: number,\r\n        transition: Animation,\r\n        duration: number,\r\n        onAnimationEnd: Nullable<() => void> = null\r\n    ): Nullable<Animatable> {\r\n        if (duration <= 0) {\r\n            host[property] = targetValue;\r\n            if (onAnimationEnd) {\r\n                onAnimationEnd();\r\n            }\r\n            return null;\r\n        }\r\n\r\n        const endFrame: number = frameRate * (duration / 1000);\r\n\r\n        transition.setKeys([\r\n            {\r\n                frame: 0,\r\n                value: host[property].clone ? host[property].clone() : host[property],\r\n            },\r\n            {\r\n                frame: endFrame,\r\n                value: targetValue,\r\n            },\r\n        ]);\r\n\r\n        if (!host.animations) {\r\n            host.animations = [];\r\n        }\r\n\r\n        host.animations.push(transition);\r\n\r\n        const animation: Animatable = scene.beginAnimation(host, 0, endFrame, false);\r\n        animation.onAnimationEnd = onAnimationEnd;\r\n        return animation;\r\n    }\r\n\r\n    /**\r\n     * Return the array of runtime animations currently using this animation\r\n     */\r\n    public get runtimeAnimations(): RuntimeAnimation[] {\r\n        return this._runtimeAnimations;\r\n    }\r\n\r\n    /**\r\n     * Specifies if any of the runtime animations are currently running\r\n     */\r\n    public get hasRunningRuntimeAnimations(): boolean {\r\n        for (const runtimeAnimation of this._runtimeAnimations) {\r\n            if (!runtimeAnimation.isStopped()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Initializes the animation\r\n     * @param name Name of the animation\r\n     * @param targetProperty Property to animate\r\n     * @param framePerSecond The frames per second of the animation\r\n     * @param dataType The data type of the animation\r\n     * @param loopMode The loop mode of the animation\r\n     * @param enableBlending Specifies if blending should be enabled\r\n     */\r\n    constructor(\r\n        /**Name of the animation */\r\n        public name: string,\r\n        /**Property to animate */\r\n        public targetProperty: string,\r\n        /**The frames per second of the animation */\r\n        public framePerSecond: number,\r\n        /**The data type of the animation */\r\n        public dataType: number,\r\n        /**The loop mode of the animation */\r\n        public loopMode?: number,\r\n        /**Specifies if blending should be enabled */\r\n        public enableBlending?: boolean\r\n    ) {\r\n        this.targetPropertyPath = targetProperty.split(\".\");\r\n        this.dataType = dataType;\r\n        this.loopMode = loopMode === undefined ? Animation.ANIMATIONLOOPMODE_CYCLE : loopMode;\r\n        this.uniqueId = Animation._UniqueIdGenerator++;\r\n    }\r\n\r\n    // Methods\r\n    /**\r\n     * Converts the animation to a string\r\n     * @param fullDetails support for multiple levels of logging within scene loading\r\n     * @returns String form of the animation\r\n     */\r\n    public toString(fullDetails?: boolean): string {\r\n        let ret = \"Name: \" + this.name + \", property: \" + this.targetProperty;\r\n        ret += \", datatype: \" + [\"Float\", \"Vector3\", \"Quaternion\", \"Matrix\", \"Color3\", \"Vector2\"][this.dataType];\r\n        ret += \", nKeys: \" + (this._keys ? this._keys.length : \"none\");\r\n        ret += \", nRanges: \" + (this._ranges ? Object.keys(this._ranges).length : \"none\");\r\n        if (fullDetails) {\r\n            ret += \", Ranges: {\";\r\n            let first = true;\r\n            for (const name in this._ranges) {\r\n                if (first) {\r\n                    ret += \", \";\r\n                    first = false;\r\n                }\r\n                ret += name;\r\n            }\r\n            ret += \"}\";\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Add an event to this animation\r\n     * @param event Event to add\r\n     */\r\n    public addEvent(event: AnimationEvent): void {\r\n        this._events.push(event);\r\n        this._events.sort((a, b) => a.frame - b.frame);\r\n    }\r\n\r\n    /**\r\n     * Remove all events found at the given frame\r\n     * @param frame The frame to remove events from\r\n     */\r\n    public removeEvents(frame: number): void {\r\n        for (let index = 0; index < this._events.length; index++) {\r\n            if (this._events[index].frame === frame) {\r\n                this._events.splice(index, 1);\r\n                index--;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves all the events from the animation\r\n     * @returns Events from the animation\r\n     */\r\n    public getEvents(): AnimationEvent[] {\r\n        return this._events;\r\n    }\r\n\r\n    /**\r\n     * Creates an animation range\r\n     * @param name Name of the animation range\r\n     * @param from Starting frame of the animation range\r\n     * @param to Ending frame of the animation\r\n     */\r\n    public createRange(name: string, from: number, to: number): void {\r\n        // check name not already in use; could happen for bones after serialized\r\n        if (!this._ranges[name]) {\r\n            this._ranges[name] = new AnimationRange(name, from, to);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes an animation range by name\r\n     * @param name Name of the animation range to delete\r\n     * @param deleteFrames Specifies if the key frames for the range should also be deleted (true) or not (false)\r\n     */\r\n    public deleteRange(name: string, deleteFrames = true): void {\r\n        const range = this._ranges[name];\r\n        if (!range) {\r\n            return;\r\n        }\r\n        if (deleteFrames) {\r\n            const from = range.from;\r\n            const to = range.to;\r\n\r\n            // this loop MUST go high to low for multiple splices to work\r\n            for (let key = this._keys.length - 1; key >= 0; key--) {\r\n                if (this._keys[key].frame >= from && this._keys[key].frame <= to) {\r\n                    this._keys.splice(key, 1);\r\n                }\r\n            }\r\n        }\r\n        this._ranges[name] = null; // said much faster than 'delete this._range[name]'\r\n    }\r\n\r\n    /**\r\n     * Gets the animation range by name, or null if not defined\r\n     * @param name Name of the animation range\r\n     * @returns Nullable animation range\r\n     */\r\n    public getRange(name: string): Nullable<AnimationRange> {\r\n        return this._ranges[name];\r\n    }\r\n\r\n    /**\r\n     * Gets the key frames from the animation\r\n     * @returns The key frames of the animation\r\n     */\r\n    public getKeys(): Array<IAnimationKey> {\r\n        return this._keys;\r\n    }\r\n\r\n    /**\r\n     * Gets the highest frame rate of the animation\r\n     * @returns Highest frame rate of the animation\r\n     */\r\n    public getHighestFrame(): number {\r\n        let ret = 0;\r\n\r\n        for (let key = 0, nKeys = this._keys.length; key < nKeys; key++) {\r\n            if (ret < this._keys[key].frame) {\r\n                ret = this._keys[key].frame;\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Gets the easing function of the animation\r\n     * @returns Easing function of the animation\r\n     */\r\n    public getEasingFunction(): Nullable<IEasingFunction> {\r\n        return this._easingFunction;\r\n    }\r\n\r\n    /**\r\n     * Sets the easing function of the animation\r\n     * @param easingFunction A custom mathematical formula for animation\r\n     */\r\n    public setEasingFunction(easingFunction: Nullable<IEasingFunction>): void {\r\n        this._easingFunction = easingFunction;\r\n    }\r\n\r\n    /**\r\n     * Interpolates a scalar linearly\r\n     * @param startValue Start value of the animation curve\r\n     * @param endValue End value of the animation curve\r\n     * @param gradient Scalar amount to interpolate\r\n     * @returns Interpolated scalar value\r\n     */\r\n    public floatInterpolateFunction(startValue: number, endValue: number, gradient: number): number {\r\n        return Scalar.Lerp(startValue, endValue, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a scalar cubically\r\n     * @param startValue Start value of the animation curve\r\n     * @param outTangent End tangent of the animation\r\n     * @param endValue End value of the animation curve\r\n     * @param inTangent Start tangent of the animation curve\r\n     * @param gradient Scalar amount to interpolate\r\n     * @returns Interpolated scalar value\r\n     */\r\n    public floatInterpolateFunctionWithTangents(startValue: number, outTangent: number, endValue: number, inTangent: number, gradient: number): number {\r\n        return Scalar.Hermite(startValue, outTangent, endValue, inTangent, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a quaternion using a spherical linear interpolation\r\n     * @param startValue Start value of the animation curve\r\n     * @param endValue End value of the animation curve\r\n     * @param gradient Scalar amount to interpolate\r\n     * @returns Interpolated quaternion value\r\n     */\r\n    public quaternionInterpolateFunction(startValue: Quaternion, endValue: Quaternion, gradient: number): Quaternion {\r\n        return Quaternion.Slerp(startValue, endValue, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a quaternion cubically\r\n     * @param startValue Start value of the animation curve\r\n     * @param outTangent End tangent of the animation curve\r\n     * @param endValue End value of the animation curve\r\n     * @param inTangent Start tangent of the animation curve\r\n     * @param gradient Scalar amount to interpolate\r\n     * @returns Interpolated quaternion value\r\n     */\r\n    public quaternionInterpolateFunctionWithTangents(startValue: Quaternion, outTangent: Quaternion, endValue: Quaternion, inTangent: Quaternion, gradient: number): Quaternion {\r\n        return Quaternion.Hermite(startValue, outTangent, endValue, inTangent, gradient).normalize();\r\n    }\r\n\r\n    /**\r\n     * Interpolates a Vector3 linearly\r\n     * @param startValue Start value of the animation curve\r\n     * @param endValue End value of the animation curve\r\n     * @param gradient Scalar amount to interpolate (value between 0 and 1)\r\n     * @returns Interpolated scalar value\r\n     */\r\n    public vector3InterpolateFunction(startValue: Vector3, endValue: Vector3, gradient: number): Vector3 {\r\n        return Vector3.Lerp(startValue, endValue, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a Vector3 cubically\r\n     * @param startValue Start value of the animation curve\r\n     * @param outTangent End tangent of the animation\r\n     * @param endValue End value of the animation curve\r\n     * @param inTangent Start tangent of the animation curve\r\n     * @param gradient Scalar amount to interpolate (value between 0 and 1)\r\n     * @returns InterpolatedVector3 value\r\n     */\r\n    public vector3InterpolateFunctionWithTangents(startValue: Vector3, outTangent: Vector3, endValue: Vector3, inTangent: Vector3, gradient: number): Vector3 {\r\n        return Vector3.Hermite(startValue, outTangent, endValue, inTangent, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a Vector2 linearly\r\n     * @param startValue Start value of the animation curve\r\n     * @param endValue End value of the animation curve\r\n     * @param gradient Scalar amount to interpolate (value between 0 and 1)\r\n     * @returns Interpolated Vector2 value\r\n     */\r\n    public vector2InterpolateFunction(startValue: Vector2, endValue: Vector2, gradient: number): Vector2 {\r\n        return Vector2.Lerp(startValue, endValue, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a Vector2 cubically\r\n     * @param startValue Start value of the animation curve\r\n     * @param outTangent End tangent of the animation\r\n     * @param endValue End value of the animation curve\r\n     * @param inTangent Start tangent of the animation curve\r\n     * @param gradient Scalar amount to interpolate (value between 0 and 1)\r\n     * @returns Interpolated Vector2 value\r\n     */\r\n    public vector2InterpolateFunctionWithTangents(startValue: Vector2, outTangent: Vector2, endValue: Vector2, inTangent: Vector2, gradient: number): Vector2 {\r\n        return Vector2.Hermite(startValue, outTangent, endValue, inTangent, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a size linearly\r\n     * @param startValue Start value of the animation curve\r\n     * @param endValue End value of the animation curve\r\n     * @param gradient Scalar amount to interpolate\r\n     * @returns Interpolated Size value\r\n     */\r\n    public sizeInterpolateFunction(startValue: Size, endValue: Size, gradient: number): Size {\r\n        return Size.Lerp(startValue, endValue, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a Color3 linearly\r\n     * @param startValue Start value of the animation curve\r\n     * @param endValue End value of the animation curve\r\n     * @param gradient Scalar amount to interpolate\r\n     * @returns Interpolated Color3 value\r\n     */\r\n    public color3InterpolateFunction(startValue: Color3, endValue: Color3, gradient: number): Color3 {\r\n        return Color3.Lerp(startValue, endValue, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a Color3 cubically\r\n     * @param startValue Start value of the animation curve\r\n     * @param outTangent End tangent of the animation\r\n     * @param endValue End value of the animation curve\r\n     * @param inTangent Start tangent of the animation curve\r\n     * @param gradient Scalar amount to interpolate\r\n     * @returns interpolated value\r\n     */\r\n    public color3InterpolateFunctionWithTangents(startValue: Color3, outTangent: Color3, endValue: Color3, inTangent: Color3, gradient: number): Color3 {\r\n        return Color3.Hermite(startValue, outTangent, endValue, inTangent, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a Color4 linearly\r\n     * @param startValue Start value of the animation curve\r\n     * @param endValue End value of the animation curve\r\n     * @param gradient Scalar amount to interpolate\r\n     * @returns Interpolated Color3 value\r\n     */\r\n    public color4InterpolateFunction(startValue: Color4, endValue: Color4, gradient: number): Color4 {\r\n        return Color4.Lerp(startValue, endValue, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a Color4 cubically\r\n     * @param startValue Start value of the animation curve\r\n     * @param outTangent End tangent of the animation\r\n     * @param endValue End value of the animation curve\r\n     * @param inTangent Start tangent of the animation curve\r\n     * @param gradient Scalar amount to interpolate\r\n     * @returns interpolated value\r\n     */\r\n    public color4InterpolateFunctionWithTangents(startValue: Color4, outTangent: Color4, endValue: Color4, inTangent: Color4, gradient: number): Color4 {\r\n        return Color4.Hermite(startValue, outTangent, endValue, inTangent, gradient);\r\n    }\r\n\r\n    /**\r\n     * @internal Internal use only\r\n     */\r\n    public _getKeyValue(value: any): any {\r\n        if (typeof value === \"function\") {\r\n            return value();\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Evaluate the animation value at a given frame\r\n     * @param currentFrame defines the frame where we want to evaluate the animation\r\n     * @returns the animation value\r\n     */\r\n    public evaluate(currentFrame: number) {\r\n        return this._interpolate(currentFrame, {\r\n            key: 0,\r\n            repeatCount: 0,\r\n            loopMode: Animation.ANIMATIONLOOPMODE_CONSTANT,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal Internal use only\r\n     */\r\n    public _interpolate(currentFrame: number, state: _IAnimationState): any {\r\n        if (state.loopMode === Animation.ANIMATIONLOOPMODE_CONSTANT && state.repeatCount > 0) {\r\n            return state.highLimitValue.clone ? state.highLimitValue.clone() : state.highLimitValue;\r\n        }\r\n\r\n        const keys = this._keys;\r\n        const keysLength = keys.length;\r\n\r\n        let key = state.key;\r\n\r\n        while (key >= 0 && currentFrame < keys[key].frame) {\r\n            --key;\r\n        }\r\n\r\n        while (key + 1 <= keysLength - 1 && currentFrame >= keys[key + 1].frame) {\r\n            ++key;\r\n        }\r\n\r\n        state.key = key;\r\n\r\n        if (key < 0) {\r\n            return this._getKeyValue(keys[0].value);\r\n        } else if (key + 1 > keysLength - 1) {\r\n            return this._getKeyValue(keys[keysLength - 1].value);\r\n        }\r\n\r\n        const startKey = keys[key];\r\n        const endKey = keys[key + 1];\r\n        const startValue = this._getKeyValue(startKey.value);\r\n        const endValue = this._getKeyValue(endKey.value);\r\n        if (startKey.interpolation === AnimationKeyInterpolation.STEP) {\r\n            if (endKey.frame > currentFrame) {\r\n                return startValue;\r\n            } else {\r\n                return endValue;\r\n            }\r\n        }\r\n\r\n        const useTangent = startKey.outTangent !== undefined && endKey.inTangent !== undefined;\r\n        const frameDelta = endKey.frame - startKey.frame;\r\n\r\n        // gradient : percent of currentFrame between the frame inf and the frame sup\r\n        let gradient = (currentFrame - startKey.frame) / frameDelta;\r\n\r\n        // check for easingFunction and correction of gradient\r\n        const easingFunction = this.getEasingFunction();\r\n        if (easingFunction !== null) {\r\n            gradient = easingFunction.ease(gradient);\r\n        }\r\n\r\n        switch (this.dataType) {\r\n            // Float\r\n            case Animation.ANIMATIONTYPE_FLOAT: {\r\n                const floatValue = useTangent\r\n                    ? this.floatInterpolateFunctionWithTangents(startValue, startKey.outTangent * frameDelta, endValue, endKey.inTangent * frameDelta, gradient)\r\n                    : this.floatInterpolateFunction(startValue, endValue, gradient);\r\n                switch (state.loopMode) {\r\n                    case Animation.ANIMATIONLOOPMODE_CYCLE:\r\n                    case Animation.ANIMATIONLOOPMODE_CONSTANT:\r\n                    case Animation.ANIMATIONLOOPMODE_YOYO:\r\n                        return floatValue;\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE:\r\n                        return state.offsetValue * state.repeatCount + floatValue;\r\n                }\r\n                break;\r\n            }\r\n            // Quaternion\r\n            case Animation.ANIMATIONTYPE_QUATERNION: {\r\n                const quatValue = useTangent\r\n                    ? this.quaternionInterpolateFunctionWithTangents(startValue, startKey.outTangent.scale(frameDelta), endValue, endKey.inTangent.scale(frameDelta), gradient)\r\n                    : this.quaternionInterpolateFunction(startValue, endValue, gradient);\r\n                switch (state.loopMode) {\r\n                    case Animation.ANIMATIONLOOPMODE_CYCLE:\r\n                    case Animation.ANIMATIONLOOPMODE_CONSTANT:\r\n                    case Animation.ANIMATIONLOOPMODE_YOYO:\r\n                        return quatValue;\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE:\r\n                        return quatValue.addInPlace(state.offsetValue.scale(state.repeatCount));\r\n                }\r\n\r\n                return quatValue;\r\n            }\r\n            // Vector3\r\n            case Animation.ANIMATIONTYPE_VECTOR3: {\r\n                const vec3Value = useTangent\r\n                    ? this.vector3InterpolateFunctionWithTangents(startValue, startKey.outTangent.scale(frameDelta), endValue, endKey.inTangent.scale(frameDelta), gradient)\r\n                    : this.vector3InterpolateFunction(startValue, endValue, gradient);\r\n                switch (state.loopMode) {\r\n                    case Animation.ANIMATIONLOOPMODE_CYCLE:\r\n                    case Animation.ANIMATIONLOOPMODE_CONSTANT:\r\n                    case Animation.ANIMATIONLOOPMODE_YOYO:\r\n                        return vec3Value;\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE:\r\n                        return vec3Value.add(state.offsetValue.scale(state.repeatCount));\r\n                }\r\n                break;\r\n            }\r\n            // Vector2\r\n            case Animation.ANIMATIONTYPE_VECTOR2: {\r\n                const vec2Value = useTangent\r\n                    ? this.vector2InterpolateFunctionWithTangents(startValue, startKey.outTangent.scale(frameDelta), endValue, endKey.inTangent.scale(frameDelta), gradient)\r\n                    : this.vector2InterpolateFunction(startValue, endValue, gradient);\r\n                switch (state.loopMode) {\r\n                    case Animation.ANIMATIONLOOPMODE_CYCLE:\r\n                    case Animation.ANIMATIONLOOPMODE_CONSTANT:\r\n                    case Animation.ANIMATIONLOOPMODE_YOYO:\r\n                        return vec2Value;\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE:\r\n                        return vec2Value.add(state.offsetValue.scale(state.repeatCount));\r\n                }\r\n                break;\r\n            }\r\n            // Size\r\n            case Animation.ANIMATIONTYPE_SIZE: {\r\n                switch (state.loopMode) {\r\n                    case Animation.ANIMATIONLOOPMODE_CYCLE:\r\n                    case Animation.ANIMATIONLOOPMODE_CONSTANT:\r\n                    case Animation.ANIMATIONLOOPMODE_YOYO:\r\n                        return this.sizeInterpolateFunction(startValue, endValue, gradient);\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE:\r\n                        return this.sizeInterpolateFunction(startValue, endValue, gradient).add(state.offsetValue.scale(state.repeatCount));\r\n                }\r\n                break;\r\n            }\r\n            // Color3\r\n            case Animation.ANIMATIONTYPE_COLOR3: {\r\n                const color3Value = useTangent\r\n                    ? this.color3InterpolateFunctionWithTangents(startValue, startKey.outTangent.scale(frameDelta), endValue, endKey.inTangent.scale(frameDelta), gradient)\r\n                    : this.color3InterpolateFunction(startValue, endValue, gradient);\r\n                switch (state.loopMode) {\r\n                    case Animation.ANIMATIONLOOPMODE_CYCLE:\r\n                    case Animation.ANIMATIONLOOPMODE_CONSTANT:\r\n                    case Animation.ANIMATIONLOOPMODE_YOYO:\r\n                        return color3Value;\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE:\r\n                        return color3Value.add(state.offsetValue.scale(state.repeatCount));\r\n                }\r\n                break;\r\n            }\r\n            // Color4\r\n            case Animation.ANIMATIONTYPE_COLOR4: {\r\n                const color4Value = useTangent\r\n                    ? this.color4InterpolateFunctionWithTangents(startValue, startKey.outTangent.scale(frameDelta), endValue, endKey.inTangent.scale(frameDelta), gradient)\r\n                    : this.color4InterpolateFunction(startValue, endValue, gradient);\r\n                switch (state.loopMode) {\r\n                    case Animation.ANIMATIONLOOPMODE_CYCLE:\r\n                    case Animation.ANIMATIONLOOPMODE_CONSTANT:\r\n                    case Animation.ANIMATIONLOOPMODE_YOYO:\r\n                        return color4Value;\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE:\r\n                        return color4Value.add(state.offsetValue.scale(state.repeatCount));\r\n                }\r\n                break;\r\n            }\r\n            // Matrix\r\n            case Animation.ANIMATIONTYPE_MATRIX: {\r\n                switch (state.loopMode) {\r\n                    case Animation.ANIMATIONLOOPMODE_CYCLE:\r\n                    case Animation.ANIMATIONLOOPMODE_CONSTANT:\r\n                    case Animation.ANIMATIONLOOPMODE_YOYO: {\r\n                        if (Animation.AllowMatricesInterpolation) {\r\n                            return this.matrixInterpolateFunction(startValue, endValue, gradient, state.workValue);\r\n                        }\r\n                        return startValue;\r\n                    }\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE: {\r\n                        return startValue;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Defines the function to use to interpolate matrices\r\n     * @param startValue defines the start matrix\r\n     * @param endValue defines the end matrix\r\n     * @param gradient defines the gradient between both matrices\r\n     * @param result defines an optional target matrix where to store the interpolation\r\n     * @returns the interpolated matrix\r\n     */\r\n    public matrixInterpolateFunction(startValue: Matrix, endValue: Matrix, gradient: number, result?: Matrix): Matrix {\r\n        if (Animation.AllowMatrixDecomposeForInterpolation) {\r\n            if (result) {\r\n                Matrix.DecomposeLerpToRef(startValue, endValue, gradient, result);\r\n                return result;\r\n            }\r\n            return Matrix.DecomposeLerp(startValue, endValue, gradient);\r\n        }\r\n\r\n        if (result) {\r\n            Matrix.LerpToRef(startValue, endValue, gradient, result);\r\n            return result;\r\n        }\r\n        return Matrix.Lerp(startValue, endValue, gradient);\r\n    }\r\n\r\n    /**\r\n     * Makes a copy of the animation\r\n     * @returns Cloned animation\r\n     */\r\n    public clone(): Animation {\r\n        const clone = new Animation(this.name, this.targetPropertyPath.join(\".\"), this.framePerSecond, this.dataType, this.loopMode);\r\n\r\n        clone.enableBlending = this.enableBlending;\r\n        clone.blendingSpeed = this.blendingSpeed;\r\n\r\n        if (this._keys) {\r\n            clone.setKeys(this._keys);\r\n        }\r\n\r\n        if (this._ranges) {\r\n            clone._ranges = {};\r\n            for (const name in this._ranges) {\r\n                const range = this._ranges[name];\r\n                if (!range) {\r\n                    continue;\r\n                }\r\n                clone._ranges[name] = range.clone();\r\n            }\r\n        }\r\n\r\n        return clone;\r\n    }\r\n\r\n    /**\r\n     * Sets the key frames of the animation\r\n     * @param values The animation key frames to set\r\n     * @param dontClone Whether to clone the keys or not (default is false, so the array of keys is cloned)\r\n     */\r\n    public setKeys(values: Array<IAnimationKey>, dontClone = false): void {\r\n        this._keys = !dontClone ? values.slice(0) : values;\r\n    }\r\n\r\n    /**\r\n     * Serializes the animation to an object\r\n     * @returns Serialized object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject: any = {};\r\n\r\n        serializationObject.name = this.name;\r\n        serializationObject.property = this.targetProperty;\r\n        serializationObject.framePerSecond = this.framePerSecond;\r\n        serializationObject.dataType = this.dataType;\r\n        serializationObject.loopBehavior = this.loopMode;\r\n        serializationObject.enableBlending = this.enableBlending;\r\n        serializationObject.blendingSpeed = this.blendingSpeed;\r\n\r\n        const dataType = this.dataType;\r\n        serializationObject.keys = [];\r\n        const keys = this.getKeys();\r\n        for (let index = 0; index < keys.length; index++) {\r\n            const animationKey = keys[index];\r\n\r\n            const key: any = {};\r\n            key.frame = animationKey.frame;\r\n\r\n            switch (dataType) {\r\n                case Animation.ANIMATIONTYPE_FLOAT:\r\n                    key.values = [animationKey.value];\r\n                    if (animationKey.inTangent !== undefined) {\r\n                        key.values.push(animationKey.inTangent);\r\n                    }\r\n                    if (animationKey.outTangent !== undefined) {\r\n                        if (animationKey.inTangent === undefined) {\r\n                            key.values.push(undefined);\r\n                        }\r\n                        key.values.push(animationKey.outTangent);\r\n                    }\r\n                    if (animationKey.interpolation !== undefined) {\r\n                        if (animationKey.inTangent === undefined) {\r\n                            key.values.push(undefined);\r\n                        }\r\n                        if (animationKey.outTangent === undefined) {\r\n                            key.values.push(undefined);\r\n                        }\r\n                        key.values.push(animationKey.interpolation);\r\n                    }\r\n                    break;\r\n                case Animation.ANIMATIONTYPE_QUATERNION:\r\n                case Animation.ANIMATIONTYPE_MATRIX:\r\n                case Animation.ANIMATIONTYPE_VECTOR3:\r\n                case Animation.ANIMATIONTYPE_COLOR3:\r\n                case Animation.ANIMATIONTYPE_COLOR4:\r\n                    key.values = animationKey.value.asArray();\r\n                    if (animationKey.inTangent != undefined) {\r\n                        key.values.push(animationKey.inTangent.asArray());\r\n                    }\r\n                    if (animationKey.outTangent != undefined) {\r\n                        if (animationKey.inTangent === undefined) {\r\n                            key.values.push(undefined);\r\n                        }\r\n                        key.values.push(animationKey.outTangent.asArray());\r\n                    }\r\n                    if (animationKey.interpolation !== undefined) {\r\n                        if (animationKey.inTangent === undefined) {\r\n                            key.values.push(undefined);\r\n                        }\r\n                        if (animationKey.outTangent === undefined) {\r\n                            key.values.push(undefined);\r\n                        }\r\n                        key.values.push(animationKey.interpolation);\r\n                    }\r\n                    break;\r\n            }\r\n\r\n            serializationObject.keys.push(key);\r\n        }\r\n\r\n        serializationObject.ranges = [];\r\n        for (const name in this._ranges) {\r\n            const source = this._ranges[name];\r\n\r\n            if (!source) {\r\n                continue;\r\n            }\r\n            const range: any = {};\r\n            range.name = name;\r\n            range.from = source.from;\r\n            range.to = source.to;\r\n            serializationObject.ranges.push(range);\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Float animation type\r\n     */\r\n    public static readonly ANIMATIONTYPE_FLOAT = 0;\r\n    /**\r\n     * Vector3 animation type\r\n     */\r\n    public static readonly ANIMATIONTYPE_VECTOR3 = 1;\r\n    /**\r\n     * Quaternion animation type\r\n     */\r\n    public static readonly ANIMATIONTYPE_QUATERNION = 2;\r\n    /**\r\n     * Matrix animation type\r\n     */\r\n    public static readonly ANIMATIONTYPE_MATRIX = 3;\r\n    /**\r\n     * Color3 animation type\r\n     */\r\n    public static readonly ANIMATIONTYPE_COLOR3 = 4;\r\n    /**\r\n     * Color3 animation type\r\n     */\r\n    public static readonly ANIMATIONTYPE_COLOR4 = 7;\r\n    /**\r\n     * Vector2 animation type\r\n     */\r\n    public static readonly ANIMATIONTYPE_VECTOR2 = 5;\r\n    /**\r\n     * Size animation type\r\n     */\r\n    public static readonly ANIMATIONTYPE_SIZE = 6;\r\n    /**\r\n     * Relative Loop Mode\r\n     */\r\n    public static readonly ANIMATIONLOOPMODE_RELATIVE = 0;\r\n    /**\r\n     * Cycle Loop Mode\r\n     */\r\n    public static readonly ANIMATIONLOOPMODE_CYCLE = 1;\r\n    /**\r\n     * Constant Loop Mode\r\n     */\r\n    public static readonly ANIMATIONLOOPMODE_CONSTANT = 2;\r\n    /**\r\n     * Yoyo Loop Mode\r\n     */\r\n    public static readonly ANIMATIONLOOPMODE_YOYO = 4;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _UniversalLerp(left: any, right: any, amount: number): any {\r\n        const constructor = left.constructor;\r\n        if (constructor.Lerp) {\r\n            // Lerp supported\r\n            return constructor.Lerp(left, right, amount);\r\n        } else if (constructor.Slerp) {\r\n            // Slerp supported\r\n            return constructor.Slerp(left, right, amount);\r\n        } else if (left.toFixed) {\r\n            // Number\r\n            return left * (1.0 - amount) + amount * right;\r\n        } else {\r\n            // Blending not supported\r\n            return right;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Parses an animation object and creates an animation\r\n     * @param parsedAnimation Parsed animation object\r\n     * @returns Animation object\r\n     */\r\n    public static Parse(parsedAnimation: any): Animation {\r\n        const animation = new Animation(parsedAnimation.name, parsedAnimation.property, parsedAnimation.framePerSecond, parsedAnimation.dataType, parsedAnimation.loopBehavior);\r\n\r\n        const dataType = parsedAnimation.dataType;\r\n        const keys: Array<IAnimationKey> = [];\r\n        let data;\r\n        let index: number;\r\n\r\n        if (parsedAnimation.enableBlending) {\r\n            animation.enableBlending = parsedAnimation.enableBlending;\r\n        }\r\n\r\n        if (parsedAnimation.blendingSpeed) {\r\n            animation.blendingSpeed = parsedAnimation.blendingSpeed;\r\n        }\r\n\r\n        for (index = 0; index < parsedAnimation.keys.length; index++) {\r\n            const key = parsedAnimation.keys[index];\r\n            let inTangent: any = undefined;\r\n            let outTangent: any = undefined;\r\n            let interpolation: any = undefined;\r\n\r\n            switch (dataType) {\r\n                case Animation.ANIMATIONTYPE_FLOAT:\r\n                    data = key.values[0];\r\n                    if (key.values.length >= 2) {\r\n                        inTangent = key.values[1];\r\n                    }\r\n                    if (key.values.length >= 3) {\r\n                        outTangent = key.values[2];\r\n                    }\r\n                    if (key.values.length >= 4) {\r\n                        interpolation = key.values[3];\r\n                    }\r\n                    break;\r\n                case Animation.ANIMATIONTYPE_QUATERNION:\r\n                    data = Quaternion.FromArray(key.values);\r\n                    if (key.values.length >= 8) {\r\n                        const _inTangent = Quaternion.FromArray(key.values.slice(4, 8));\r\n                        if (!_inTangent.equals(Quaternion.Zero())) {\r\n                            inTangent = _inTangent;\r\n                        }\r\n                    }\r\n                    if (key.values.length >= 12) {\r\n                        const _outTangent = Quaternion.FromArray(key.values.slice(8, 12));\r\n                        if (!_outTangent.equals(Quaternion.Zero())) {\r\n                            outTangent = _outTangent;\r\n                        }\r\n                    }\r\n                    if (key.values.length >= 13) {\r\n                        interpolation = key.values[12];\r\n                    }\r\n                    break;\r\n                case Animation.ANIMATIONTYPE_MATRIX:\r\n                    data = Matrix.FromArray(key.values);\r\n                    if (key.values.length >= 17) {\r\n                        interpolation = key.values[16];\r\n                    }\r\n                    break;\r\n                case Animation.ANIMATIONTYPE_COLOR3:\r\n                    data = Color3.FromArray(key.values);\r\n                    if (key.values[3]) {\r\n                        inTangent = Color3.FromArray(key.values[3]);\r\n                    }\r\n                    if (key.values[4]) {\r\n                        outTangent = Color3.FromArray(key.values[4]);\r\n                    }\r\n                    if (key.values[5]) {\r\n                        interpolation = key.values[5];\r\n                    }\r\n                    break;\r\n                case Animation.ANIMATIONTYPE_COLOR4:\r\n                    data = Color4.FromArray(key.values);\r\n                    if (key.values[4]) {\r\n                        inTangent = Color4.FromArray(key.values[4]);\r\n                    }\r\n                    if (key.values[5]) {\r\n                        outTangent = Color4.FromArray(key.values[5]);\r\n                    }\r\n                    if (key.values[6]) {\r\n                        interpolation = Color4.FromArray(key.values[6]);\r\n                    }\r\n                    break;\r\n                case Animation.ANIMATIONTYPE_VECTOR3:\r\n                default:\r\n                    data = Vector3.FromArray(key.values);\r\n                    if (key.values[3]) {\r\n                        inTangent = Vector3.FromArray(key.values[3]);\r\n                    }\r\n                    if (key.values[4]) {\r\n                        outTangent = Vector3.FromArray(key.values[4]);\r\n                    }\r\n                    if (key.values[5]) {\r\n                        interpolation = key.values[5];\r\n                    }\r\n                    break;\r\n            }\r\n\r\n            const keyData: any = {};\r\n            keyData.frame = key.frame;\r\n            keyData.value = data;\r\n\r\n            if (inTangent != undefined) {\r\n                keyData.inTangent = inTangent;\r\n            }\r\n            if (outTangent != undefined) {\r\n                keyData.outTangent = outTangent;\r\n            }\r\n            if (interpolation != undefined) {\r\n                keyData.interpolation = interpolation;\r\n            }\r\n            keys.push(keyData);\r\n        }\r\n\r\n        animation.setKeys(keys);\r\n\r\n        if (parsedAnimation.ranges) {\r\n            for (index = 0; index < parsedAnimation.ranges.length; index++) {\r\n                data = parsedAnimation.ranges[index];\r\n                animation.createRange(data.name, data.from, data.to);\r\n            }\r\n        }\r\n\r\n        return animation;\r\n    }\r\n\r\n    /**\r\n     * Appends the serialized animations from the source animations\r\n     * @param source Source containing the animations\r\n     * @param destination Target to store the animations\r\n     */\r\n    public static AppendSerializedAnimations(source: IAnimatable, destination: any): void {\r\n        SerializationHelper.AppendSerializedAnimations(source, destination);\r\n    }\r\n\r\n    /**\r\n     * Creates a new animation or an array of animations from a snippet saved in a remote file\r\n     * @param name defines the name of the animation to create (can be null or empty to use the one from the json data)\r\n     * @param url defines the url to load from\r\n     * @returns a promise that will resolve to the new animation or an array of animations\r\n     */\r\n    public static ParseFromFileAsync(name: Nullable<string>, url: string): Promise<Animation | Array<Animation>> {\r\n        return new Promise((resolve, reject) => {\r\n            const request = new WebRequest();\r\n            request.addEventListener(\"readystatechange\", () => {\r\n                if (request.readyState == 4) {\r\n                    if (request.status == 200) {\r\n                        let serializationObject = JSON.parse(request.responseText);\r\n                        if (serializationObject.animations) {\r\n                            serializationObject = serializationObject.animations;\r\n                        }\r\n\r\n                        if (serializationObject.length) {\r\n                            const output = new Array<Animation>();\r\n                            for (const serializedAnimation of serializationObject) {\r\n                                output.push(this.Parse(serializedAnimation));\r\n                            }\r\n\r\n                            resolve(output);\r\n                        } else {\r\n                            const output = this.Parse(serializationObject);\r\n\r\n                            if (name) {\r\n                                output.name = name;\r\n                            }\r\n\r\n                            resolve(output);\r\n                        }\r\n                    } else {\r\n                        reject(\"Unable to load the animation\");\r\n                    }\r\n                }\r\n            });\r\n\r\n            request.open(\"GET\", url);\r\n            request.send();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates an animation or an array of animations from a snippet saved by the Inspector\r\n     * @param snippetId defines the snippet to load\r\n     * @returns a promise that will resolve to the new animation or a new array of animations\r\n     */\r\n    public static ParseFromSnippetAsync(snippetId: string): Promise<Animation | Array<Animation>> {\r\n        return new Promise((resolve, reject) => {\r\n            const request = new WebRequest();\r\n            request.addEventListener(\"readystatechange\", () => {\r\n                if (request.readyState == 4) {\r\n                    if (request.status == 200) {\r\n                        const snippet = JSON.parse(JSON.parse(request.responseText).jsonPayload);\r\n\r\n                        if (snippet.animations) {\r\n                            const serializationObject = JSON.parse(snippet.animations);\r\n                            const outputs = new Array<Animation>();\r\n                            for (const serializedAnimation of serializationObject.animations) {\r\n                                const output = this.Parse(serializedAnimation);\r\n                                output.snippetId = snippetId;\r\n                                outputs.push(output);\r\n                            }\r\n\r\n                            resolve(outputs);\r\n                        } else {\r\n                            const serializationObject = JSON.parse(snippet.animation);\r\n                            const output = this.Parse(serializationObject);\r\n\r\n                            output.snippetId = snippetId;\r\n\r\n                            resolve(output);\r\n                        }\r\n                    } else {\r\n                        reject(\"Unable to load the snippet \" + snippetId);\r\n                    }\r\n                }\r\n            });\r\n\r\n            request.open(\"GET\", this.SnippetUrl + \"/\" + snippetId.replace(/#/g, \"/\"));\r\n            request.send();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates an animation or an array of animations from a snippet saved by the Inspector\r\n     * @deprecated Please use ParseFromSnippetAsync instead\r\n     * @param snippetId defines the snippet to load\r\n     * @returns a promise that will resolve to the new animation or a new array of animations\r\n     */\r\n    public static CreateFromSnippetAsync = Animation.ParseFromSnippetAsync;\r\n}\r\n\r\nRegisterClass(\"BABYLON.Animation\", Animation);\r\nNode._AnimationRangeFactory = (name: string, from: number, to: number) => new AnimationRange(name, from, to);\r\n","import { BezierCurve } from \"../Maths/math.path\";\r\n\r\n/**\r\n * This represents the main contract an easing function should follow.\r\n * Easing functions are used throughout the animation system.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\r\n */\r\nexport interface IEasingFunction {\r\n    /**\r\n     * Given an input gradient between 0 and 1, this returns the corresponding value\r\n     * of the easing function.\r\n     * The link below provides some of the most common examples of easing functions.\r\n     * @see https://easings.net/\r\n     * @param gradient Defines the value between 0 and 1 we want the easing value for\r\n     * @returns the corresponding value on the curve defined by the easing function\r\n     */\r\n    ease(gradient: number): number;\r\n}\r\n\r\n/**\r\n * Base class used for every default easing function.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\r\n */\r\nexport class EasingFunction implements IEasingFunction {\r\n    /**\r\n     * Interpolation follows the mathematical formula associated with the easing function.\r\n     */\r\n    public static readonly EASINGMODE_EASEIN = 0;\r\n\r\n    /**\r\n     * Interpolation follows 100% interpolation minus the output of the formula associated with the easing function.\r\n     */\r\n    public static readonly EASINGMODE_EASEOUT = 1;\r\n\r\n    /**\r\n     * Interpolation uses EaseIn for the first half of the animation and EaseOut for the second half.\r\n     */\r\n    public static readonly EASINGMODE_EASEINOUT = 2;\r\n\r\n    private _easingMode = EasingFunction.EASINGMODE_EASEIN;\r\n\r\n    /**\r\n     * Sets the easing mode of the current function.\r\n     * @param easingMode Defines the willing mode (EASINGMODE_EASEIN, EASINGMODE_EASEOUT or EASINGMODE_EASEINOUT)\r\n     */\r\n    public setEasingMode(easingMode: number) {\r\n        const n = Math.min(Math.max(easingMode, 0), 2);\r\n        this._easingMode = n;\r\n    }\r\n    /**\r\n     * Gets the current easing mode.\r\n     * @returns the easing mode\r\n     */\r\n    public getEasingMode(): number {\r\n        return this._easingMode;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public easeInCore(gradient: number): number {\r\n        throw new Error(\"You must implement this method\");\r\n    }\r\n\r\n    /**\r\n     * Given an input gradient between 0 and 1, this returns the corresponding value\r\n     * of the easing function.\r\n     * @param gradient Defines the value between 0 and 1 we want the easing value for\r\n     * @returns the corresponding value on the curve defined by the easing function\r\n     */\r\n    public ease(gradient: number): number {\r\n        switch (this._easingMode) {\r\n            case EasingFunction.EASINGMODE_EASEIN:\r\n                return this.easeInCore(gradient);\r\n            case EasingFunction.EASINGMODE_EASEOUT:\r\n                return 1 - this.easeInCore(1 - gradient);\r\n        }\r\n\r\n        if (gradient >= 0.5) {\r\n            return (1 - this.easeInCore((1 - gradient) * 2)) * 0.5 + 0.5;\r\n        }\r\n\r\n        return this.easeInCore(gradient * 2) * 0.5;\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with a circle shape (see link below).\r\n * @see https://easings.net/#easeInCirc\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\r\n */\r\nexport class CircleEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * @internal\r\n     */\r\n    public easeInCore(gradient: number): number {\r\n        gradient = Math.max(0, Math.min(1, gradient));\r\n        return 1.0 - Math.sqrt(1.0 - gradient * gradient);\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with a ease back shape (see link below).\r\n * @see https://easings.net/#easeInBack\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\r\n */\r\nexport class BackEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * Instantiates a back ease easing\r\n     * @see https://easings.net/#easeInBack\r\n     * @param amplitude Defines the amplitude of the function\r\n     */\r\n    constructor(\r\n        /** Defines the amplitude of the function */\r\n        public amplitude: number = 1\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public easeInCore(gradient: number): number {\r\n        const num = Math.max(0, this.amplitude);\r\n        return Math.pow(gradient, 3.0) - gradient * num * Math.sin(3.1415926535897931 * gradient);\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with a bouncing shape (see link below).\r\n * @see https://easings.net/#easeInBounce\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\r\n */\r\nexport class BounceEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * Instantiates a bounce easing\r\n     * @see https://easings.net/#easeInBounce\r\n     * @param bounces Defines the number of bounces\r\n     * @param bounciness Defines the amplitude of the bounce\r\n     */\r\n    constructor(\r\n        /** Defines the number of bounces */\r\n        public bounces: number = 3,\r\n        /** Defines the amplitude of the bounce */\r\n        public bounciness: number = 2\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public easeInCore(gradient: number): number {\r\n        const y = Math.max(0.0, this.bounces);\r\n        let bounciness = this.bounciness;\r\n        if (bounciness <= 1.0) {\r\n            bounciness = 1.001;\r\n        }\r\n        const num9 = Math.pow(bounciness, y);\r\n        const num5 = 1.0 - bounciness;\r\n        const num4 = (1.0 - num9) / num5 + num9 * 0.5;\r\n        const num15 = gradient * num4;\r\n        const num65 = Math.log(-num15 * (1.0 - bounciness) + 1.0) / Math.log(bounciness);\r\n        const num3 = Math.floor(num65);\r\n        const num13 = num3 + 1.0;\r\n        const num8 = (1.0 - Math.pow(bounciness, num3)) / (num5 * num4);\r\n        const num12 = (1.0 - Math.pow(bounciness, num13)) / (num5 * num4);\r\n        const num7 = (num8 + num12) * 0.5;\r\n        const num6 = gradient - num7;\r\n        const num2 = num7 - num8;\r\n        return (-Math.pow(1.0 / bounciness, y - num3) / (num2 * num2)) * (num6 - num2) * (num6 + num2);\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with a power of 3 shape (see link below).\r\n * @see https://easings.net/#easeInCubic\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\r\n */\r\nexport class CubicEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * @internal\r\n     */\r\n    public easeInCore(gradient: number): number {\r\n        return gradient * gradient * gradient;\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with an elastic shape (see link below).\r\n * @see https://easings.net/#easeInElastic\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\r\n */\r\nexport class ElasticEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * Instantiates an elastic easing function\r\n     * @see https://easings.net/#easeInElastic\r\n     * @param oscillations Defines the number of oscillations\r\n     * @param springiness Defines the amplitude of the oscillations\r\n     */\r\n    constructor(\r\n        /** Defines the number of oscillations*/\r\n        public oscillations: number = 3,\r\n        /** Defines the amplitude of the oscillations*/\r\n        public springiness: number = 3\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public easeInCore(gradient: number): number {\r\n        let num2;\r\n        const num3 = Math.max(0.0, this.oscillations);\r\n        const num = Math.max(0.0, this.springiness);\r\n\r\n        if (num == 0) {\r\n            num2 = gradient;\r\n        } else {\r\n            num2 = (Math.exp(num * gradient) - 1.0) / (Math.exp(num) - 1.0);\r\n        }\r\n        return num2 * Math.sin((6.2831853071795862 * num3 + 1.5707963267948966) * gradient);\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with an exponential shape (see link below).\r\n * @see https://easings.net/#easeInExpo\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\r\n */\r\nexport class ExponentialEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * Instantiates an exponential easing function\r\n     * @see https://easings.net/#easeInExpo\r\n     * @param exponent Defines the exponent of the function\r\n     */\r\n    constructor(\r\n        /** Defines the exponent of the function */\r\n        public exponent: number = 2\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public easeInCore(gradient: number): number {\r\n        if (this.exponent <= 0) {\r\n            return gradient;\r\n        }\r\n\r\n        return (Math.exp(this.exponent * gradient) - 1.0) / (Math.exp(this.exponent) - 1.0);\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with a power shape (see link below).\r\n * @see https://easings.net/#easeInQuad\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\r\n */\r\nexport class PowerEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * Instantiates an power base easing function\r\n     * @see https://easings.net/#easeInQuad\r\n     * @param power Defines the power of the function\r\n     */\r\n    constructor(\r\n        /** Defines the power of the function */\r\n        public power: number = 2\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public easeInCore(gradient: number): number {\r\n        const y = Math.max(0.0, this.power);\r\n        return Math.pow(gradient, y);\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with a power of 2 shape (see link below).\r\n * @see https://easings.net/#easeInQuad\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\r\n */\r\nexport class QuadraticEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * @internal\r\n     */\r\n    public easeInCore(gradient: number): number {\r\n        return gradient * gradient;\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with a power of 4 shape (see link below).\r\n * @see https://easings.net/#easeInQuart\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\r\n */\r\nexport class QuarticEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * @internal\r\n     */\r\n    public easeInCore(gradient: number): number {\r\n        return gradient * gradient * gradient * gradient;\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with a power of 5 shape (see link below).\r\n * @see https://easings.net/#easeInQuint\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\r\n */\r\nexport class QuinticEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * @internal\r\n     */\r\n    public easeInCore(gradient: number): number {\r\n        return gradient * gradient * gradient * gradient * gradient;\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with a sin shape (see link below).\r\n * @see https://easings.net/#easeInSine\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\r\n */\r\nexport class SineEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * @internal\r\n     */\r\n    public easeInCore(gradient: number): number {\r\n        return 1.0 - Math.sin(1.5707963267948966 * (1.0 - gradient));\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with a bezier shape (see link below).\r\n * @see http://cubic-bezier.com/#.17,.67,.83,.67\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#easing-functions\r\n */\r\nexport class BezierCurveEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * Instantiates a bezier function\r\n     * @see http://cubic-bezier.com/#.17,.67,.83,.67\r\n     * @param x1 Defines the x component of the start tangent in the bezier curve\r\n     * @param y1 Defines the y component of the start tangent in the bezier curve\r\n     * @param x2 Defines the x component of the end tangent in the bezier curve\r\n     * @param y2 Defines the y component of the end tangent in the bezier curve\r\n     */\r\n    constructor(\r\n        /** Defines the x component of the start tangent in the bezier curve */\r\n        public x1: number = 0,\r\n        /** Defines the y component of the start tangent in the bezier curve */\r\n        public y1: number = 0,\r\n        /** Defines the x component of the end tangent in the bezier curve */\r\n        public x2: number = 1,\r\n        /** Defines the y component of the end tangent in the bezier curve */\r\n        public y2: number = 1\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public easeInCore(gradient: number): number {\r\n        return BezierCurve.Interpolate(gradient, this.x1, this.y1, this.x2, this.y2);\r\n    }\r\n}\r\n"],"names":["_IAnimationState","Animation","_PrepareAnimation","name","targetProperty","framePerSecond","totalFrame","from","to","loopMode","easingFunction","dataType","isNaN","parseFloat","isFinite","ANIMATIONTYPE_FLOAT","ANIMATIONTYPE_QUATERNION","ANIMATIONTYPE_VECTOR3","ANIMATIONTYPE_VECTOR2","ANIMATIONTYPE_COLOR3","ANIMATIONTYPE_COLOR4","ANIMATIONTYPE_SIZE","undefined","animation","keys","frame","value","setKeys","setEasingFunction","CreateAnimation","property","animationType","ANIMATIONLOOPMODE_CONSTANT","CreateAndStartAnimation","target","onAnimationEnd","scene","getScene","beginDirectAnimation","CreateAndStartHierarchyAnimation","node","directDescendantsOnly","beginDirectHierarchyAnimation","CreateMergeAndStartAnimation","animations","push","beginAnimation","MakeAnimationAdditive","sourceAnimation","referenceFrame","range","cloneOriginal","clonedName","clone","_keys","length","startIndex","firstKey","endIndex","lastKey","valueStore","referenceValue","referencePosition","Vector3","referenceQuaternion","Quaternion","referenceScaling","keyPosition","keyQuaternion","keyScaling","referenceFound","rangeValue","getRange","fromKeyFound","toKeyFound","_getKeyValue","index","currentKey","nextKey","animationState","key","repeatCount","this","_interpolate","splice","normalize","conjugateInPlace","ANIMATIONTYPE_MATRIX","decompose","subtractInPlace","divideInPlace","multiplyToRef","ComposeToRef","subtractToRef","width","height","TransitionTo","targetValue","host","frameRate","transition","duration","endFrame","runtimeAnimations","_runtimeAnimations","hasRunningRuntimeAnimations","runtimeAnimation","isStopped","constructor","enableBlending","_easingFunction","Array","_events","blendingSpeed","_ranges","targetPropertyPath","split","ANIMATIONLOOPMODE_CYCLE","uniqueId","_UniqueIdGenerator","toString","fullDetails","ret","Object","first","addEvent","event","sort","a","b","removeEvents","getEvents","createRange","deleteRange","deleteFrames","getKeys","getHighestFrame","nKeys","getEasingFunction","floatInterpolateFunction","startValue","endValue","gradient","Lerp","floatInterpolateFunctionWithTangents","outTangent","inTangent","Hermite","quaternionInterpolateFunction","Slerp","quaternionInterpolateFunctionWithTangents","vector3InterpolateFunction","vector3InterpolateFunctionWithTangents","vector2InterpolateFunction","vector2InterpolateFunctionWithTangents","sizeInterpolateFunction","color3InterpolateFunction","color3InterpolateFunctionWithTangents","color4InterpolateFunction","color4InterpolateFunctionWithTangents","evaluate","currentFrame","state","highLimitValue","keysLength","startKey","endKey","interpolation","STEP","useTangent","frameDelta","ease","floatValue","ANIMATIONLOOPMODE_YOYO","ANIMATIONLOOPMODE_RELATIVE","offsetValue","quatValue","scale","addInPlace","vec3Value","add","vec2Value","color3Value","color4Value","AllowMatricesInterpolation","matrixInterpolateFunction","workValue","result","AllowMatrixDecomposeForInterpolation","DecomposeLerpToRef","DecomposeLerp","LerpToRef","join","values","dontClone","slice","serialize","serializationObject","loopBehavior","animationKey","asArray","ranges","source","_UniversalLerp","left","right","amount","toFixed","Parse","parsedAnimation","data","FromArray","_inTangent","equals","Zero","_outTangent","keyData","AppendSerializedAnimations","destination","ParseFromFileAsync","url","Promise","resolve","reject","request","addEventListener","readyState","status","JSON","parse","responseText","output","serializedAnimation","open","send","ParseFromSnippetAsync","snippetId","snippet","jsonPayload","outputs","SnippetUrl","replace","CreateFromSnippetAsync","N","_AnimationRangeFactory","EasingFunction","_easingMode","EASINGMODE_EASEIN","setEasingMode","easingMode","n","Math","min","max","getEasingMode","easeInCore","Error","EASINGMODE_EASEOUT","EASINGMODE_EASEINOUT","CircleEase","sqrt","BackEase","amplitude","super","num","pow","sin","BounceEase","bounces","bounciness","y","num9","num5","num4","num15","num65","log","num3","floor","num13","num8","num7","num6","num2","CubicEase","ElasticEase","oscillations","springiness","exp","ExponentialEase","exponent","PowerEase","power","QuadraticEase","QuarticEase","QuinticEase","SineEase","BezierCurveEase","x1","y1","x2","y2","Interpolate"],"sourceRoot":""}