{"version":3,"file":"js/413.babylonBundle.js","mappings":"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","sources":["webpack://babylonjs-typescript-webpack-template/webpack/runtime/async module","webpack://babylonjs-typescript-webpack-template/webpack/runtime/chunk loaded","webpack://babylonjs-typescript-webpack-template/webpack/runtime/startup chunk dependencies","webpack://babylonjs-typescript-webpack-template/./src/contactForce.ts","webpack://babylonjs-typescript-webpack-template/./src/nagelDistanceField.ts","webpack://babylonjs-typescript-webpack-template/./src/nagelWorker.ts","webpack://babylonjs-typescript-webpack-template/./src/offParser.ts","webpack://babylonjs-typescript-webpack-template/./src/sdfParser.ts","webpack://babylonjs-typescript-webpack-template/webpack/bootstrap","webpack://babylonjs-typescript-webpack-template/webpack/runtime/define property getters","webpack://babylonjs-typescript-webpack-template/webpack/runtime/ensure chunk","webpack://babylonjs-typescript-webpack-template/webpack/runtime/get javascript chunk filename","webpack://babylonjs-typescript-webpack-template/webpack/runtime/global","webpack://babylonjs-typescript-webpack-template/webpack/runtime/hasOwnProperty shorthand","webpack://babylonjs-typescript-webpack-template/webpack/runtime/publicPath","webpack://babylonjs-typescript-webpack-template/webpack/runtime/importScripts chunk loading","webpack://babylonjs-typescript-webpack-template/webpack/startup"],"sourcesContent":["var webpackQueues = typeof Symbol === \"function\" ? Symbol(\"webpack queues\") : \"__webpack_queues__\";\nvar webpackExports = typeof Symbol === \"function\" ? Symbol(\"webpack exports\") : \"__webpack_exports__\";\nvar webpackError = typeof Symbol === \"function\" ? Symbol(\"webpack error\") : \"__webpack_error__\";\nvar resolveQueue = (queue) => {\n\tif(queue && queue.d < 1) {\n\t\tqueue.d = 1;\n\t\tqueue.forEach((fn) => (fn.r--));\n\t\tqueue.forEach((fn) => (fn.r-- ? fn.r++ : fn()));\n\t}\n}\nvar wrapDeps = (deps) => (deps.map((dep) => {\n\tif(dep !== null && typeof dep === \"object\") {\n\t\tif(dep[webpackQueues]) return dep;\n\t\tif(dep.then) {\n\t\t\tvar queue = [];\n\t\t\tqueue.d = 0;\n\t\t\tdep.then((r) => {\n\t\t\t\tobj[webpackExports] = r;\n\t\t\t\tresolveQueue(queue);\n\t\t\t}, (e) => {\n\t\t\t\tobj[webpackError] = e;\n\t\t\t\tresolveQueue(queue);\n\t\t\t});\n\t\t\tvar obj = {};\n\t\t\tobj[webpackQueues] = (fn) => (fn(queue));\n\t\t\treturn obj;\n\t\t}\n\t}\n\tvar ret = {};\n\tret[webpackQueues] = x => {};\n\tret[webpackExports] = dep;\n\treturn ret;\n}));\n__webpack_require__.a = (module, body, hasAwait) => {\n\tvar queue;\n\thasAwait && ((queue = []).d = -1);\n\tvar depQueues = new Set();\n\tvar exports = module.exports;\n\tvar currentDeps;\n\tvar outerResolve;\n\tvar reject;\n\tvar promise = new Promise((resolve, rej) => {\n\t\treject = rej;\n\t\touterResolve = resolve;\n\t});\n\tpromise[webpackExports] = exports;\n\tpromise[webpackQueues] = (fn) => (queue && fn(queue), depQueues.forEach(fn), promise[\"catch\"](x => {}));\n\tmodule.exports = promise;\n\tbody((deps) => {\n\t\tcurrentDeps = wrapDeps(deps);\n\t\tvar fn;\n\t\tvar getResult = () => (currentDeps.map((d) => {\n\t\t\tif(d[webpackError]) throw d[webpackError];\n\t\t\treturn d[webpackExports];\n\t\t}))\n\t\tvar promise = new Promise((resolve) => {\n\t\t\tfn = () => (resolve(getResult));\n\t\t\tfn.r = 0;\n\t\t\tvar fnQueue = (q) => (q !== queue && !depQueues.has(q) && (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn))));\n\t\t\tcurrentDeps.map((dep) => (dep[webpackQueues](fnQueue)));\n\t\t});\n\t\treturn fn.r ? promise : getResult();\n\t}, (err) => ((err ? reject(promise[webpackError] = err) : outerResolve(exports)), resolveQueue(queue)));\n\tqueue && queue.d < 0 && (queue.d = 0);\n};","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn Promise.all([873,906,559,778,156,522,89,962,745,734,804,803,921].map(__webpack_require__.e, __webpack_require__)).then(next);\n};","import { Matrix, Mesh, Quaternion, Vector3, Vector4, float } from \"@babylonjs/core\";\r\nimport { SDFData } from \"./sdfParser\";\r\nimport { calculateLocalPoint, index } from \"./nagelDistanceField\";\r\n\r\n//DEBUG Konstante!\r\n// Normalerweise 1\r\nconst cDeltaMultiplier = 1;\r\nconst scaling = 1;\r\n\r\n\r\n\r\n/**\r\n * Berechnet die benötigte änderung in Position und Orientierung, um von einer überschneideten Kollision zu einer an der Oberfläche berührenden Kollision zu kommen.\r\n * Dabei wird der Kontaktpunkt der Kollision über den Gradienten bestimmt\r\n */\r\n// export function distanceAndOriantationDelta(collisionPoint: Vector3, sdfFile: SDFData,){\r\n//     // Bestimmte Kontaktpunkt durch Gradienten der Distanzwerte\r\n//     const dDelta = new Vector3(\r\n//         (sdfFile.distances[index(collisionPoint.add(new Vector3(sdfFile.cellSize, 0, 0)), sdfFile)] - sdfFile.distances[index(collisionPoint.subtract(new Vector3(sdfFile.cellSize, 0, 0)), sdfFile)]) / 2, \r\n//         (sdfFile.distances[index(collisionPoint.add(new Vector3(0, sdfFile.cellSize, 0)), sdfFile)] - sdfFile.distances[index(collisionPoint.subtract(new Vector3(0, sdfFile.cellSize, 0)), sdfFile)]) / 2,\r\n//         (sdfFile.distances[index(collisionPoint.add(new Vector3(0, 0, sdfFile.cellSize)), sdfFile)] - sdfFile.distances[index(collisionPoint.subtract(new Vector3(0, 0, sdfFile.cellSize)), sdfFile)]) / 2);\r\n//     const normalVector = dDelta.divide(new Vector3(dDelta.length(), dDelta.length(), dDelta.length()));\r\n\r\n//     return normalVector;\r\n// }\r\n// export function inertiaMatrix(radius: float, mass: float): Matrix {\r\n//     const inertia: float = (2 / 5) * mass * radius * radius;\r\n//     const values = [inertia, 0, 0,\r\n//                     0, inertia, 0,\r\n//                     0, 0, inertia];\r\n//     return Matrix.FromArray(values);\r\n// }\r\n\r\n// export function invertedIneratiaMatrix(radius: float, mass: float): Matrix {\r\n//     const inertia: float = 5 /( 2 * mass * radius * radius);\r\n//     const values = [inertia, 0, 0, \r\n//                     0, inertia, 0,\r\n//                     0, 0, inertia];\r\n//     console.log(\"DEBUG: inertiaMatrix: \", Matrix.FromArray(values))\r\n\r\n//     return Matrix.FromArray(values);\r\n// }\r\n\r\nexport function calculateBoundingBoxDiagonalLength(minBox: Vector3, maxBox: Vector3): number {\r\n    const diffX = maxBox.x - minBox.x;\r\n    const diffY = maxBox.y - minBox.y;\r\n    const diffZ = maxBox.z - minBox.z;\r\n  \r\n    const diagonalLength = Math.sqrt(diffX * diffX + diffY * diffY + diffZ * diffZ);\r\n  \r\n    return diagonalLength / 2;\r\n  }\r\n\r\n// export function localRadius(contactPoint: Vector3, rootPoint: Vector3, staticMesh: Mesh){\r\n//     const localContactPoint = calculateLocalPoint(contactPoint, staticMesh)\r\n//     const localRootPoint = calculateLocalPoint(rootPoint, staticMesh)\r\n//     return localContactPoint.subtract(localRootPoint)\r\n\r\n// }\r\n\r\nexport function lambdaAlt(minBox: Vector3, maxBox: Vector3, contactPoint: Vector3, normalVector: Vector3, distance: float, rootPoint: Vector3){\r\n    // Diagonale Berechnen und ^2\r\n    const g = (maxBox.subtract(minBox).length()) / 2\r\n    // r ist der Abstand des Kontaktpunktes zum Schwerpunkts-mittelpunkt da wir vom Center als Schwerpunkt ausgehen ist der Vektor: R - Schwerpunkt, mit schwerpunkt = 0,0,0 => R\r\n    const r = contactPoint.subtract(rootPoint)\r\n    // NormalenVektor muss umgedreht werden, da er momentan in Kollisionsrichtung zeigt\r\n    // const n = normalVector.scale(-1)\r\n    const n = new Vector3(normalVector.x, normalVector.y, normalVector.z)\r\n\r\n    return (distance * scaling) / (1 + (5 / (2 * Math.pow(g, 2))) * Math.pow((r.cross(n)).length(), 2)) \r\n}\r\nexport function ccDelta(distance: float, minBox: Vector3, maxBox: Vector3, contactPoint: Vector3, normalVector: Vector3, rootPoint: Vector3){\r\n    const lambda = lambdaAlt(minBox, maxBox, contactPoint, normalVector, distance, rootPoint)\r\n    // return normalVector.scale(distance / (1 + (5 / (2 * Math.pow(calculateBoundingBoxDiagonalLength(minBox, maxBox), 2))) * Math.pow(((contactPoint.subtract(rootPoint)).cross(normalVector)).length(), 2)))\r\n    // Wieder den normalVektor umdrehen\r\n    // const n = normalVector.scale(-1)\r\n    const n = new Vector3(normalVector.x, normalVector.y, normalVector.z)\r\n    // cDeltaMultiplier ist dafür da, um die Kraft beliebig zu Skalieren, Variable am Anfang dieser Datei. Damit kann man testweise nur 1/2 der \"Kraft\" anwenden oder das Doppelte\r\n    return (n.multiply(new Vector3(lambda, lambda, lambda))).multiply(new Vector3(0.3, 0.3, 0.3))\r\n}\r\n\r\nexport function qqDelta(distance: float, minBox: Vector3, maxBox: Vector3, contactPoint: Vector3, rootPoint: Vector3, normalVector: Vector3, quaternion: Quaternion){\r\n//     // 5 geteilt durch 2*radius^2 * lambda'\r\n\r\n    \r\n    // Diagonale Berechnen und ^2\r\n    const g = maxBox.subtract(minBox).length() / 2\r\n    const R = contactPoint.subtract(rootPoint)\r\n    const RxN = R.cross(normalVector)\r\n    const constantPart = 5/(2*Math.pow(g, 2)) * lambdaAlt(minBox, maxBox, contactPoint, normalVector, distance, rootPoint)\r\n    const wTimesDeltaT = RxN.multiply(new Vector3(constantPart, constantPart, constantPart))\r\n\r\n    const q = quaternion // Momentane Orientierung\r\n    // Skalare Komponente ist in Babylon anscheinend die letzte Komponente\r\n    const wQuaternion = new Quaternion(wTimesDeltaT.x / 2, wTimesDeltaT.y / 2, wTimesDeltaT.z / 2, 0) // Durch 2 da * 1/2\r\n    return wQuaternion.multiply(q)\r\n\r\n}\r\n","import { Mesh, float, int } from \"@babylonjs/core\";\r\nimport { Matrix, Vector3 } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { SDFData } from \"./sdfParser\";\r\n\r\n\r\nexport function index2(x: int, y: int, z: int, resolution: Vector3): number {\r\n    //console.log(\"Index \" , x + resolution.x*(y + resolution.y*z))\r\n    return x + resolution.x*(y + resolution.y*z)}\r\n\r\nexport function index(point: Vector3, sdfFile: SDFData): number{\r\n    const o = sdfFile.bbox.min;\r\n    if (!inBox(point, sdfFile.bbox.min, sdfFile.bbox.max)) {\r\n        return -1; // Nicht in BoundingBox, daher trivialer Fall\r\n    }\r\n    //console.log(\" IN BOX: \", point)\r\n    let calculatedPoint = point.subtract(o);\r\n    calculatedPoint = calculatedPoint.divide(new Vector3(sdfFile.cellSize, sdfFile.cellSize, sdfFile.cellSize));\r\n    const roundedPoint = new Vector3(\r\n        Math.round(calculatedPoint.x),\r\n        Math.round(calculatedPoint.y),\r\n        Math.round(calculatedPoint.z)\r\n        )\r\n    // console.log(\"Berechneter Punkt \", calculatedPoint, \" gerundet auf: \" , roundedPoint)\r\n    //return index2(calculatedPoint.x, calculatedPoint.y, calculatedPoint.z, sdfFile.res);\r\n    return index2(roundedPoint.x, roundedPoint.y, roundedPoint.z, sdfFile.res);\r\n}\r\n\r\nexport function pointFunction(x: int, y: int, z: int, sdfFile: SDFData): Vector3{\r\n    const o = sdfFile.bbox.min;\r\n    return o.add(new Vector3((x + 0.5) * sdfFile.cellSize, (y + 0.5) * sdfFile.cellSize, (z + 0.5) * sdfFile.cellSize));\r\n}\r\n/**\r\n * Ist im gegebenen Codeabschnitt aufgerufen, jedoch nicht dabei gewesen, daher selbst implementiert.\r\n * @param vector\r\n * @param bboxMin\r\n * @param bboxMax\r\n * @returns true, wenn Point: Vector3 in BoundingBox liegt, sonst false\r\n */\r\nfunction inBox(vector: Vector3, bboxMin: Vector3, bboxMax: Vector3): boolean{\r\n    return vector.x >= bboxMin.x && vector.y >= bboxMin.y && vector.z >= bboxMin.z && vector.x <= bboxMax.x && vector.y <= bboxMax.y && vector.z <= bboxMax.z;\r\n}\r\nexport function inBoxCheck(vector: Vector3, bboxMin: Vector3, bboxMax: Vector3): boolean{\r\n    return vector.x >= bboxMin.x && vector.y >= bboxMin.y && vector.z >= bboxMin.z && vector.x <= bboxMax.x && vector.y <= bboxMax.y && vector.z <= bboxMax.z;\r\n}\r\n\r\n/**\r\n *  Gegeben ein Punkt und ein Mesh, wird der Punkt in das lokale Koordinatensystem des Meshes transformiert,\r\n *  indem die WorldMatrix des Meshes invertiert wird und der Punkt mit der invertierten Matrix transformiert wird. \r\n * @param point \r\n * @param mesh \r\n * @returns localpoint vom Mesh\r\n */\r\nexport function calculateLocalPoint(point: Vector3, mesh: Matrix): Vector3 {\r\n    const worldMatrix = mesh\r\n    const invertedWorldMatrix = new Matrix();\r\n    worldMatrix.invertToRef(invertedWorldMatrix);\r\n\r\n    const localPoint = Vector3.TransformCoordinates(point, invertedWorldMatrix);\r\n    return localPoint;\r\n}\r\n\r\nexport function distanceToWorldpoint(point: Vector3, sdfFile: SDFData, mesh: Matrix): number {\r\n    if(!inBox(point, sdfFile.bbox.min, sdfFile.bbox.max)){\r\n        return -1;\r\n    }\r\n    const localPoint = calculateLocalPoint(point, mesh);\r\n    //const gitterPoint = pointFunction(localPoint.x, localPoint.y, localPoint.z, sdfFile)\r\n    // console.log(\"Localpoint: \" ,localPoint)\r\n    // console.log(\"Gitterpoint: \" ,gitterPoint)\r\n    const indexofPoint = index(localPoint, sdfFile);\r\n    if (indexofPoint === -1) {\r\n        return -1;\r\n    }\r\n    return sdfFile.distances[indexofPoint];\r\n}   \r\n","import { Matrix, Quaternion, Vector3} from \"@babylonjs/core\";\r\nimport { SDFData, loadSDFFile, parseSDFFileContent} from \"./sdfParser\";\r\nimport { distanceToWorldpoint } from \"./nagelDistanceField\";\r\nimport { loadOffFile, parseOffFileContent } from \"./offParser\";\r\nimport { ccDelta, qqDelta } from \"./contactForce\";\r\n\r\n\r\n// Worker-Thread\r\n/**\r\n * Nagel-Worker für die Kollisionserkennung\r\n * Erhält Worldmatrix, Worldposition und oriantation des Meshes\r\n * Zieht Punkte und SDF von Internet bei erstellung des Workers\r\n * \r\n * Berechnet die Distanz der Punkte zur SDF, und schickt gegebenfalls Delta-Werte zurück\r\n *  \r\n * @param position\r\n * @returns Delta-Werte\r\n */\r\n\r\n// Setup and getting Files\r\nconst punkteInfo: Promise<string> = loadOffFile(\"https://raw.githubusercontent.com/P-Miha/Kyros-Zylinder/master/assets/SDFInformation/Nagel1.noff\");\r\nconst offInfo = parseOffFileContent(await punkteInfo);\r\n\r\nconst sdfFileUrl = 'https://raw.githubusercontent.com/P-Miha/Kyros-Zylinder/master/assets/SDFInformation/Nagel1.sdf';\r\nconst loadFile = loadSDFFile(sdfFileUrl);\r\n\r\nconst sdfContent = parseSDFFileContent(await loadFile);\r\n\r\n\r\n\r\n// OffInfo = Punkte auf beweglichem Objekt\r\n// SDFContent = SDF Daten des statischen Objekts\r\n// Prepare variables for the worker\r\nconst worldPositionMoveable =  Vector3.Zero();\r\nconst orientationMoveable =  Quaternion.Zero();\r\nconst worldPositionStatic = Vector3.Zero()\r\nconst orientationStatic = Quaternion.Zero();\r\nlet absolutePosition: Vector3[] = [];\r\nlet distanceResult: number[] = [];\r\nlet distance = 0;\r\nlet index = 0;\r\nlet contactPoint = absolutePosition[index];\r\nlet normalVector = Vector3.Zero();\r\nlet transformedNormal = Vector3.Zero();\r\n//Listener für die Nachrichten\r\nself.addEventListener(\"message\", (event) => {\r\n\r\n     const worldMatrixMoveable = Matrix.FromArray(event.data[0]);\r\n     const worldMatrixStatic = Matrix.FromArray(event.data[1]);\r\n\r\n    //console.log(\"WorldMatrixMoveable: \", worldMatrixMoveable);3\r\n\r\n    \r\n    // decompose WorldMatrixStatic and updates given parameters\r\n    worldMatrixMoveable.decompose(undefined, orientationMoveable, worldPositionMoveable);\r\n    // decompose WorldMatrix\r\n    worldMatrixStatic.decompose(undefined, orientationStatic, worldPositionStatic);\r\n\r\n    absolutePosition = CalculatePoints(offInfo.vertices, worldMatrixMoveable);\r\n    //const relativePosition = CalculateLocalPoints(absolutePosition, worldMatrixStatic);\r\n    distanceResult = CalculateDistance(absolutePosition, sdfContent, worldMatrixStatic);\r\n\r\n    distance = distanceResult[0];\r\n    index = distanceResult[1];\r\n    contactPoint = absolutePosition[index];\r\n    //empty array\r\n\r\n\r\n    //Update Normalenvektor\r\n    normalVector =  new Vector3(offInfo.normals[index].x, offInfo.normals[index].y, offInfo.normals[index].z);\r\n    transformedNormal = Vector3.TransformNormal(normalVector, worldMatrixMoveable);\r\n    //transformedNormal = transformedNormal.multiply(new Vector3(1, 1, 1));\r\n\r\n    if (distance < 0.1) {\r\n        //self.postMessage(distance, index);\r\n        // Distance kleiner gleich 0, daher Kollision\r\n        // Berechne Delta\r\n         const positionDelta = ccDelta(distance, sdfContent.bbox.min, sdfContent.bbox.max, \r\n            contactPoint, transformedNormal, worldPositionMoveable);\r\n        const orientationDelta = qqDelta(distance, sdfContent.bbox.min, sdfContent.bbox.max, \r\n            contactPoint, worldPositionMoveable, transformedNormal, orientationMoveable);\r\n        // Above should send the orientation of the moveable object \r\n        // Send Info back to Main Thread\r\n        //console.log(\"PositionDelta: \", positionDelta);\r\n        //console.log(\"OrientationDelta: \", orientationDelta);\r\n        // convert result to array\r\n        self.postMessage([positionDelta.asArray(), orientationDelta.asArray(), 1]);\r\n    }\r\n    else {\r\n        //console.log(\"Keine Kollision\");\r\n        self.postMessage([Vector3.Zero().asArray(), Quaternion.Zero().asArray(), -1]);\r\n    }\r\n});\r\n\r\n// Cleanup\r\n absolutePosition = [];\r\n distanceResult= [];\r\n distance = 0;\r\n index = 0;\r\n contactPoint = Vector3.Zero();\r\n normalVector = Vector3.Zero();\r\n transformedNormal = Vector3.Zero();\r\n\r\n// Berechne die aktuelle Position der Punkte basierend auf der Worldmatrix des Meshes\r\nfunction CalculatePoints(points: Vector3[], meshWorldMatrix: Matrix) {\r\n    const newPositions: Vector3[] = [];\r\n    points.forEach((point) => {\r\n        newPositions.push(Vector3.TransformCoordinates(point, meshWorldMatrix));\r\n    });\r\n    //console.log(\"NewPositions: \", newPositions);\r\n    return newPositions;\r\n}\r\n// Berechne die Distanz des Punktes zur SDF um zu prüfen ob Kollisionen vorliegen\r\nfunction CalculateDistance(points: Vector3[], sdfData: SDFData, worldMatrixStatic: Matrix) {\r\n    let lowestDistance = 1;\r\n    let pointIndex = 0;\r\n    points.forEach((point) => { \r\n        const distance = distanceToWorldpoint(point, sdfData, worldMatrixStatic);\r\n        if (distance < lowestDistance && distance != -1  && distance < 0) {\r\n            lowestDistance = distance;\r\n            pointIndex = points.indexOf(point);\r\n        }\r\n\r\n    });\r\n\r\n    // return Distance , Index\r\n    return [lowestDistance, pointIndex];\r\n}\r\n","import { Vector3 } from \"@babylonjs/core\";\r\n\r\nexport async function loadOffFile(url: string): Promise<string> {\r\n    try {\r\n    const response = await fetch(url);\r\n    const text = await response.text();\r\n    return text;\r\n    } catch (error) {\r\n    console.error('Fehler beim Laden der Off-Datei:', error);\r\n    throw error;\r\n    }\r\n}\r\n\r\nexport function parseOffFileContent(offContent: string): { vertices: Vector3[], normals: Vector3[] } {\r\n    const lines = offContent.trim().split('\\n');\r\n    const vertices: Vector3[] = [];\r\n    const normals: Vector3[] = [];\r\n  \r\n    // Zeile 1: OFF\r\n    // Zeile 2: Anzahl der Vertices, Anzahl der Faces, Anzahl der Kanten (nicht benötigt)\r\n  \r\n    for (let i = 3; i < lines.length; i++) {\r\n      const line = lines[i].trim();\r\n      const values = line.split(' ').map(parseFloat);\r\n  \r\n      if (values.length >= 3) {\r\n        const vertex = Vector3.FromArray(values.slice(0, 3));\r\n        vertices.push(vertex);\r\n  \r\n        if (values.length >= 6) {\r\n          const normal = Vector3.FromArray(values.slice(3, 6));\r\n          normals.push(normal);\r\n        }\r\n      }\r\n    }\r\n  \r\n    return { vertices, normals };\r\n  }","import { Vector3 } from \"@babylonjs/core\";\r\n\r\nexport async function loadSDFFile(url: string): Promise<string> {\r\n    try {\r\n    const response = await fetch(url);\r\n    const text = await response.text();\r\n    return text;\r\n    } catch (error) {\r\n    console.error('Fehler beim Laden der SDF-Datei:', error);\r\n    throw error;\r\n    }\r\n}\r\n\r\nexport interface SDFData {\r\n    bbox: {\r\n      min: Vector3,\r\n      max: Vector3\r\n    },\r\n    cellSize: number,\r\n    res: Vector3,\r\n    numCells: number,\r\n    distances: number[]\r\n  }\r\n  \r\n  export  function parseSDFFileContent(sdfContent: string): SDFData {\r\n    const lines = sdfContent.trim().split('\\n');\r\n    const data: SDFData = {\r\n      bbox: {\r\n        min: Vector3.Zero(),\r\n        max: Vector3.Zero()\r\n      },\r\n      cellSize: 0,\r\n      res: Vector3.Zero(),\r\n      numCells: 0,\r\n      distances: []\r\n    };\r\n  \r\n    for (let i = 0; i < lines.length; i++) {\r\n      const line = lines[i].trim();\r\n      \r\n      // Kommentare ignorieren\r\n      const commentIndex = line.indexOf('#');\r\n      if (commentIndex !== -1) {\r\n        // Nur den Teil der Zeile vor dem Kommentar extrahieren\r\n        const cleanedLine = line.substring(0, commentIndex).trim();\r\n        \r\n        if (cleanedLine.length === 0) {\r\n          continue;\r\n        }\r\n  \r\n        const values = cleanedLine.split(' ').map(parseFloat);\r\n        \r\n        if (values.length > 0) {\r\n          if (i === 0) {\r\n            data.bbox.min = Vector3.FromArray(values)\r\n          } else if (i === 1) {\r\n            data.bbox.max = Vector3.FromArray(values)\r\n          } else if (i === 2) {\r\n            data.cellSize = values[0];\r\n          } else if (i === 3) {\r\n            data.res = Vector3.FromArray(values);\r\n          } else if (i === 4) {\r\n            data.numCells = values[0];\r\n          } else {\r\n            data.distances.push(...values);\r\n          }\r\n        }\r\n      } else {\r\n        const values = line.split(' ').map(parseFloat);\r\n        \r\n        if (values.length > 0) {\r\n          if (i === 0) {\r\n            data.bbox.min = Vector3.FromArray(values)\r\n          } else if (i === 1) {\r\n            data.bbox.max = Vector3.FromArray(values)\r\n          } else if (i === 2) {\r\n            data.cellSize = values[0];\r\n          } else if (i === 3) {\r\n            data.res = Vector3.FromArray(values);\r\n          } else if (i === 4) {\r\n            data.numCells = values[0];\r\n          } else {\r\n            data.distances.push(...values);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  \r\n    return data;\r\n  }","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [873,906,559,778,156,522,89,962,745,734,804,803,921], () => (__webpack_require__(20413)))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"js/\" + chunkId + \".babylonBundle.js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && !scriptUrl) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl + \"../\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t413: 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkbabylonjs_typescript_webpack_template\"] = self[\"webpackChunkbabylonjs_typescript_webpack_template\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["webpackQueues","webpackExports","webpackError","resolveQueue","deferred","next","scaling","lambdaAlt","minBox","maxBox","contactPoint","normalVector","distance","rootPoint","g","subtract","length","r","n","Vector3","x","y","z","Math","pow","cross","ccDelta","lambda","multiply","qqDelta","quaternion","RxN","constantPart","wTimesDeltaT","q","Quaternion","inBox","vector","bboxMin","bboxMax","distanceToWorldpoint","point","sdfFile","mesh","bbox","min","max","localPoint","worldMatrix","invertedWorldMatrix","invertToRef","TransformCoordinates","calculateLocalPoint","indexofPoint","o","calculatedPoint","divide","cellSize","roundedPoint","round","resolution","res","index","distances","punkteInfo","offInfo","sdfFileUrl","loadFile","sdfContent","worldPositionMoveable","Zero","orientationMoveable","worldPositionStatic","orientationStatic","absolutePosition","distanceResult","transformedNormal","CalculatePoints","points","meshWorldMatrix","newPositions","forEach","push","CalculateDistance","sdfData","worldMatrixStatic","lowestDistance","pointIndex","indexOf","self","addEventListener","event","worldMatrixMoveable","Matrix","FromArray","data","decompose","undefined","vertices","normals","TransformNormal","positionDelta","orientationDelta","postMessage","asArray","async","loadOffFile","url","response","fetch","text","error","console","parseOffFileContent","offContent","lines","trim","split","i","values","map","parseFloat","vertex","slice","normal","loadSDFFile","parseSDFFileContent","numCells","line","commentIndex","cleanedLine","substring","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","__webpack_exports__","O","Symbol","queue","d","fn","a","body","hasAwait","currentDeps","outerResolve","reject","depQueues","Set","promise","Promise","resolve","rej","deps","dep","then","obj","e","ret","wrapDeps","getResult","fnQueue","has","add","err","result","chunkIds","priority","notFulfilled","Infinity","fulfilled","j","Object","keys","every","key","splice","definition","defineProperty","enumerable","get","f","chunkId","all","reduce","promises","u","globalThis","this","Function","window","prop","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","Error","replace","p","installedChunks","chunkLoadingGlobal","parentChunkLoadingFunction","bind","moreModules","runtime","pop"],"sourceRoot":""}