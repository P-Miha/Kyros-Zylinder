{"version":3,"file":"js/113.babylonBundle.js","mappings":"sUAAA,QAAe,IAA0B,uCCAzC,EAAe,IAA0B,uCC8BlC,MAAMA,EAAb,cACI,KAAAC,YAAcC,MACVC,EACAC,KAGA,MAAMC,EAAQ,IAAI,IAAMF,GAEnBG,QAAQC,IAAI,CACb,uCACA,6DACDC,MAAMC,IACLC,QAAQC,IAAIF,GACZJ,EAAMO,WAAWC,KAAK,CAClBC,cAAc,EACdC,SAAS,EACTC,WAAYC,SAASC,eAAe,eAAYC,GAClD,IAIN,MAAMC,EAAS,IAAI,IAAgB,UAAW,KAAM,IAAK,GAAI,WAAgBf,GAI7Ee,EAAOC,UAAU,YAGjBD,EAAOE,cAAclB,GAAQ,GAG5B,MAAMmB,EAAQ,IAAI,EAAAC,iBACd,QACA,IAAI,IAAQ,EAAG,EAAG,GAClBnB,GAoBCoB,QAAsB,oBAA4B,GAAG,GAAI,EAAWpB,OAAMc,EAAU,QAEpFO,EAAwBD,EAAcE,OAAO,GAAGC,SAEtDH,EAAcE,OAAO,GAAGC,SAAWF,EAGnCD,EAAcE,OAAO,GAAGE,SAASC,EAAI,EACrCpB,QAAQC,IAAI,aAAcc,EAAcE,OAAO,GAAGC,UAClD,MAAMG,EAAa,IAAI,IAAQ,EAAc1B,GAAO,GAAO,GACrD2B,EAAc,IAAI,EAAAC,YAAY,cAAe5B,GACnD2B,EAAYE,cAAgBH,EAC5BC,EAAYG,iBAAmB,EAC/BH,EAAYI,UAAY,GAExBX,EAAcE,OAAO,GAAGC,SAASS,iBAAkB,EACnDX,EAAsBQ,cAAgBH,EAQtC,MAAMO,GAAS,QACX,SACA,CAAEC,MAAO,EAAGC,OAAQ,GACpBnC,GAIEoC,EAAiB,IAAI,IAAiB,kBAAmBpC,GAgC/D,OA/BAoC,EAAeC,eAAiB,IAAI,IAAQC,EAAA,EAAiBtC,GAE7DiC,EAAOV,SAAWa,EAClBH,EAAOM,gBAAiB,EAOxBrB,EAAMsB,UAAY,GAmBlBzC,EAAO0C,iBAAiB,eAVF,SAAUC,GAC5B,GAAmB,IAAfA,EAAIC,OAChB,OAEQ,MAAMC,EAAO5C,EAAM4C,KAAK5C,EAAM6C,SAAU7C,EAAM8C,UAC1CF,EAAKG,KACL1C,QAAQC,IAAIsC,EAAKI,WAAU,GAEnC,IAEsD,GAE/ChD,CAAK,CAEpB,EAEA,YAAmBL,C,kCCvJnB,QAAe,IAA0B,sC","sources":["webpack://babylonjs-typescript-webpack-template/./assets/glb/LowPoly.glb","webpack://babylonjs-typescript-webpack-template/./assets/Overlay.png","webpack://babylonjs-typescript-webpack-template/./src/scenes/defaultWithTexture.ts","webpack://babylonjs-typescript-webpack-template/./assets/grass.jpg"],"sourcesContent":["export default __webpack_public_path__ + \"555db8d15bbc97ae30694376737aa1b3.glb\";","export default __webpack_public_path__ + \"0244f380ef0aafaf377b6d28f359db9a.png\";","import { Engine } from \"@babylonjs/core/Engines/engine\";\r\nimport { Scene } from \"@babylonjs/core/scene\";\r\nimport { ArcRotateCamera } from \"@babylonjs/core/Cameras/arcRotateCamera\";\r\nimport { Vector3} from \"@babylonjs/core/Maths/math.vector\";\r\nimport { CreateGround } from \"@babylonjs/core/Meshes/Builders/groundBuilder\";\r\nimport { StandardMaterial } from \"@babylonjs/core/Materials/standardMaterial\";\r\nimport { CreateSceneClass } from \"../createScene\";\r\nimport { SceneLoader } from \"@babylonjs/core/Loading/sceneLoader\";\r\nimport { HemisphericLight, PBRMaterial } from \"@babylonjs/core\";\r\nimport { DirectionalLight } from \"@babylonjs/core/Lights/directionalLight\";\r\nimport { ShadowGenerator } from \"@babylonjs/core/Lights/Shadows/shadowGenerator\";\r\n\r\nimport \"@babylonjs/core/Lights/Shadows/shadowGeneratorSceneComponent\";\r\nimport \"@babylonjs/loaders/glTF\";\r\n// If you don't need the standard material you will still need to import it since the scene requires it.\r\n// import \"@babylonjs/core/Materials/standardMaterial\";\r\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture\";\r\n\r\nimport grassTextureUrl from \"../../assets/grass.jpg\";\r\n\r\n// Import Highlights / Overlays for CyrusMesh\r\n\r\n// Impport Cyrus Mesh\r\n\r\nimport UVCylinder from \"../../assets/glb/LowPoly.glb\"\r\n\r\n// Baked Textures\r\nimport bakedTexture from \"../../assets/Overlay.png\"\r\n\r\n\r\nexport class DefaultSceneWithTexture implements CreateSceneClass {\r\n    createScene = async (\r\n        engine: Engine,\r\n        canvas: HTMLCanvasElement\r\n    ): Promise<Scene> => {\r\n        // This creates a basic Babylon Scene object (non-mesh)\r\n        const scene = new Scene(engine);\r\n\r\n        void Promise.all([\r\n            import(\"@babylonjs/core/Debug/debugLayer\"),\r\n            import(\"@babylonjs/inspector\"),\r\n        ]).then((_values) => {\r\n            console.log(_values);\r\n            scene.debugLayer.show({\r\n                handleResize: true,\r\n                overlay: true,\r\n                globalRoot: document.getElementById(\"#root\") || undefined,\r\n            });\r\n        });\r\n\r\n        // This creates and positions a free camera (non-mesh)\r\n        const camera = new ArcRotateCamera(\"Camera\", -1.85, 1.2, 50, Vector3.Zero(), scene);\r\n\r\n\r\n        // This targets the camera to scene origin\r\n        camera.setTarget(Vector3.Zero());\r\n\r\n        // This attaches the camera to the canvas\r\n        camera.attachControl(canvas, true);\r\n\r\n        // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\r\n         const light = new HemisphericLight(\r\n             \"light\",\r\n             new Vector3(0, 1, 0),\r\n             scene\r\n         );\r\n\r\n        // // Default intensity is 1. Let's dim the light a small amount\r\n        // light.intensity = 0.7;\r\n\r\n\r\n\r\n\r\n\r\n        // // Import Cyrus-Cylinder Mesh\r\n        // const cyrusCylinder = await SceneLoader.ImportMeshAsync(\"\",\"\",cyrus_cylinder,scene,undefined,\".glb\",);\r\n        // // const cyrusCylinder = await SceneLoader.ImportMeshAsync(\"\",\"\",alternative_cylinder ,scene,undefined,\".glb\",);\r\n        //const cyrusCylinder = await SceneLoader.ImportMeshAsync(\"\",\"\",split3CyrusCylinder ,scene,undefined,\".glb\",);\r\n        // [0] = Root\r\n        // [1] = Backside\r\n        // [2] = Bottom\r\n        // [3] = Frontside\r\n        // [4] = Top\r\n\r\n        const cyrusCylinder = await SceneLoader.ImportMeshAsync(\"\",\"\", UVCylinder,scene,undefined,\".glb\",);\r\n        // Cast Material to PRBMaterial\r\n        const cyrusCylinderMaterial = cyrusCylinder.meshes[1].material as PBRMaterial;\r\n        // Set Casted Material to Mesh\r\n        cyrusCylinder.meshes[1].material = cyrusCylinderMaterial;\r\n\r\n        // // Modifing cyrusCylinder mesh\r\n        cyrusCylinder.meshes[0].position.y = 2; // Floating\r\n        console.log(\"Material: \", cyrusCylinder.meshes[1].material )\r\n        const altTexture = new Texture(bakedTexture, scene, false, false);\r\n        const altMaterial = new PBRMaterial(\"altMaterial\", scene);\r\n        altMaterial.albedoTexture = altTexture;\r\n        altMaterial.transparencyMode = 0;\r\n        altMaterial.roughness = 0.5;\r\n        //cyrusCylinder.meshes[1].material = altMaterial;\r\n        cyrusCylinder.meshes[1].material.backFaceCulling = false;\r\n        cyrusCylinderMaterial.albedoTexture = altTexture;\r\n\r\n       \r\n\r\n\r\n\r\n        //camera.setTarget(cyrusCylinder.meshes[0]);\r\n        // Our built-in 'ground' shape.\r\n        const ground = CreateGround(\r\n            \"ground\",\r\n            { width: 6, height: 6 },\r\n            scene\r\n        );\r\n\r\n        // Load a texture to be used as the ground material\r\n        const groundMaterial = new StandardMaterial(\"ground material\", scene);\r\n        groundMaterial.diffuseTexture = new Texture(grassTextureUrl, scene);\r\n\r\n        ground.material = groundMaterial;\r\n        ground.receiveShadows = true;\r\n\r\n        //const light = new DirectionalLight(\r\n         //   \"light\",\r\n         //   new Vector3(0, -1, 1),\r\n         //   scene\r\n        //);\r\n        light.intensity = 0.5;\r\n        //light.position.y = 10;\r\n\r\n        //const shadowGenerator = new ShadowGenerator(512, light)\r\n        //shadowGenerator.useBlurExponentialShadowMap = true;\r\n        //shadowGenerator.blurScale = 2;\r\n        //shadowGenerator.setDarkness(0.2);\r\n\r\n        //shadowGenerator.getShadowMap()!.renderList!.push();\r\n        const onPointerDown = function (evt: PointerEvent) {\r\n            if (evt.button !== 0) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n            const pick = scene.pick(scene.pointerX, scene.pointerY, )\r\n            if (pick.hit){\r\n                console.log(pick.getNormal(true))\r\n            }\r\n        }\r\n\r\n        canvas.addEventListener(\"pointerdown\", onPointerDown, false);\r\n\r\n        return scene;\r\n    };\r\n}\r\n\r\nexport default new DefaultSceneWithTexture();\r\n","export default __webpack_public_path__ + \"9b31293ea96c8dfa518b45622da82a13.jpg\";"],"names":["DefaultSceneWithTexture","createScene","async","engine","canvas","scene","Promise","all","then","_values","console","log","debugLayer","show","handleResize","overlay","globalRoot","document","getElementById","undefined","camera","setTarget","attachControl","light","HemisphericLight","cyrusCylinder","cyrusCylinderMaterial","meshes","material","position","y","altTexture","altMaterial","PBRMaterial","albedoTexture","transparencyMode","roughness","backFaceCulling","ground","width","height","groundMaterial","diffuseTexture","grass","receiveShadows","intensity","addEventListener","evt","button","pick","pointerX","pointerY","hit","getNormal"],"sourceRoot":""}